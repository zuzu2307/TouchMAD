
Test_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000292d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000051b8  080294a8  080294a8  000394a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00001e68  0802e660  0802e660  0003e660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000920d8  080304c8  080304c8  000404c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000e0  080c25a0  080c25a0  000d25a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080c2680  080c2680  000e00fc  2**0
                  CONTENTS
  7 .ARM          00000008  080c2680  080c2680  000d2680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080c2688  080c2688  000e00fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  080c2688  080c2688  000d2688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080c269c  080c269c  000d269c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000fc  20000000  080c26a4  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000c16c  200000fc  080c27a0  000e00fc  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000c268  080c27a0  000ec268  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000e00fc  2**0
                  CONTENTS, READONLY
 15 .debug_info   000e37de  00000000  00000000  000e012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00016adf  00000000  00000000  001c390a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00005928  00000000  00000000  001da3f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000052e8  00000000  00000000  001dfd18  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003db03  00000000  00000000  001e5000  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0004f4c8  00000000  00000000  00222b03  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0013dee0  00000000  00000000  00271fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  003afeab  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00018540  00000000  00000000  003affa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08029490 	.word	0x08029490

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	08029490 	.word	0x08029490

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f00e fd22 	bl	800f004 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c0:	f000 f9b4 	bl	800092c <ft5336_I2C_InitializeIfRequired>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4603      	mov	r3, r0
 80005ea:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 f998 	bl	800092c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e010      	b.n	8000624 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	21a8      	movs	r1, #168	; 0xa8
 8000608:	4618      	mov	r0, r3
 800060a:	f00e fcdd 	bl	800efc8 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b51      	cmp	r3, #81	; 0x51
 8000618:	d101      	bne.n	800061e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d802      	bhi.n	8000630 <ft5336_ReadID+0x4e>
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e8      	beq.n	8000602 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f97e 	bl	800094c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f932 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f00e fca7 	bl	800efc8 <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000118 	.word	0x20000118

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f00e fbf4 	bl	800efc8 <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f00e fbe6 	bl	800efc8 <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f00e fbcb 	bl	800efc8 <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f00e fbbd 	bl	800efc8 <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000118 	.word	0x20000118
 8000890:	2000011c 	.word	0x2000011c

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f00e fb70 	bl	800ef94 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f00e fb5c 	bl	800ef94 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800091a:	781b      	ldrb	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000118 	.word	0x20000118

0800092c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000930:	f7ff fff0 	bl	8000914 <ft5336_Get_I2C_InitializedStatus>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d104      	bne.n	8000944 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800093a:	f00e fb21 	bl	800ef80 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800093e:	4b02      	ldr	r3, [pc, #8]	; (8000948 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
  }
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000118 	.word	0x20000118

0800094c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80009ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4a06      	ldr	r2, [pc, #24]	; (80009cc <vApplicationGetIdleTaskMemory+0x30>)
 80009b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000120 	.word	0x20000120
 80009cc:	20000178 	.word	0x20000178

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f002 fb40 	bl	800305a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f849 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009de:	f001 f801 	bl	80019e4 <MX_GPIO_Init>
  MX_ADC3_Init();
 80009e2:	f000 f903 	bl	8000bec <MX_ADC3_Init>
  MX_CRC_Init();
 80009e6:	f000 f953 	bl	8000c90 <MX_CRC_Init>
  MX_DCMI_Init();
 80009ea:	f000 f973 	bl	8000cd4 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80009ee:	f000 f9a5 	bl	8000d3c <MX_DMA2D_Init>
  MX_FMC_Init();
 80009f2:	f000 ff4b 	bl	800188c <MX_FMC_Init>
  MX_I2C1_Init();
 80009f6:	f000 f9d3 	bl	8000da0 <MX_I2C1_Init>
  MX_I2C3_Init();
 80009fa:	f000 fa11 	bl	8000e20 <MX_I2C3_Init>
  MX_LTDC_Init();
 80009fe:	f000 fa4f 	bl	8000ea0 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000a02:	f000 fb03 	bl	800100c <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000a06:	f000 fb2d 	bl	8001064 <MX_RTC_Init>
  MX_SAI2_Init();
 8000a0a:	f000 fbd1 	bl	80011b0 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000a0e:	f000 fc77 	bl	8001300 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000a12:	f000 fc95 	bl	8001340 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000a16:	f000 fcc3 	bl	80013a0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000a1a:	f000 fcff 	bl	800141c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a1e:	f000 fd73 	bl	8001508 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000a22:	f000 fde9 	bl	80015f8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a26:	f000 fe5f 	bl	80016e8 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000a2a:	f000 feb1 	bl	8001790 <MX_TIM12_Init>
  MX_USART6_UART_Init();
 8000a2e:	f000 fef5 	bl	800181c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000a32:	f00a ffa5 	bl	800b980 <MX_FATFS_Init>
  MX_USB_OTG_FS_USB_Init();
 8000a36:	f000 ff21 	bl	800187c <MX_USB_OTG_FS_USB_Init>
  MX_TouchGFX_Init();
 8000a3a:	f00e faee 	bl	800f01a <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <main+0x98>)
 8000a40:	1d3c      	adds	r4, r7, #4
 8000a42:	461d      	mov	r5, r3
 8000a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f00b fa8b 	bl	800bf70 <osThreadCreate>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <main+0x9c>)
 8000a5e:	601a      	str	r2, [r3, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a60:	f00b fa63 	bl	800bf2a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <main+0x94>
 8000a66:	bf00      	nop
 8000a68:	080294b4 	.word	0x080294b4
 8000a6c:	2000bd20 	.word	0x2000bd20

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0b4      	sub	sp, #208	; 0xd0
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a7a:	2230      	movs	r2, #48	; 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f027 fd89 	bl	8028596 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	2284      	movs	r2, #132	; 0x84
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f027 fd7a 	bl	8028596 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000aa2:	f005 f909 	bl	8005cb8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b4e      	ldr	r3, [pc, #312]	; (8000be0 <SystemClock_Config+0x170>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a4d      	ldr	r2, [pc, #308]	; (8000be0 <SystemClock_Config+0x170>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <SystemClock_Config+0x170>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000abe:	4b49      	ldr	r3, [pc, #292]	; (8000be4 <SystemClock_Config+0x174>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a48      	ldr	r2, [pc, #288]	; (8000be4 <SystemClock_Config+0x174>)
 8000ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac8:	6013      	str	r3, [r2, #0]
 8000aca:	4b46      	ldr	r3, [pc, #280]	; (8000be4 <SystemClock_Config+0x174>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ad6:	2309      	movs	r3, #9
 8000ad8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aea:	2302      	movs	r3, #2
 8000aec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000af4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000af8:	2319      	movs	r3, #25
 8000afa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000afe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b0c:	2309      	movs	r3, #9
 8000b0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f005 f9f0 	bl	8005efc <HAL_RCC_OscConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b22:	f001 f9b5 	bl	8001e90 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b26:	f005 f8d7 	bl	8005cd8 <HAL_PWREx_EnableOverDrive>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b30:	f001 f9ae 	bl	8001e90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	230f      	movs	r3, #15
 8000b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b56:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b5a:	2106      	movs	r1, #6
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f005 fc71 	bl	8006444 <HAL_RCC_ClockConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000b68:	f001 f992 	bl	8001e90 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <SystemClock_Config+0x178>)
 8000b6e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000b70:	2364      	movs	r3, #100	; 0x64
 8000b72:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000b80:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b84:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000b86:	2305      	movs	r3, #5
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000baa:	2300      	movs	r3, #0
 8000bac:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000bb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc4:	f107 0308 	add.w	r3, r7, #8
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f005 fe3f 	bl	800684c <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x168>
  {
    Error_Handler();
 8000bd4:	f001 f95c 	bl	8001e90 <Error_Handler>
  }
}
 8000bd8:	bf00      	nop
 8000bda:	37d0      	adds	r7, #208	; 0xd0
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40007000 	.word	0x40007000
 8000be8:	01b14828 	.word	0x01b14828

08000bec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <MX_ADC3_Init+0x9c>)
 8000c02:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c0a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <MX_ADC3_Init+0xa0>)
 8000c30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c4e:	f002 fa53 	bl	80030f8 <HAL_ADC_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000c58:	f001 f91a 	bl	8001e90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_ADC3_Init+0x98>)
 8000c6e:	f002 fa87 	bl	8003180 <HAL_ADC_ConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c78:	f001 f90a 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000bad8 	.word	0x2000bad8
 8000c88:	40012200 	.word	0x40012200
 8000c8c:	0f000001 	.word	0x0f000001

08000c90 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <MX_CRC_Init+0x40>)
 8000c98:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_CRC_Init+0x3c>)
 8000cba:	f002 fdb7 	bl	800382c <HAL_CRC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000cc4:	f001 f8e4 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	2000bab4 	.word	0x2000bab4
 8000cd0:	40023000 	.word	0x40023000

08000cd4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000cda:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <MX_DCMI_Init+0x64>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_DCMI_Init+0x60>)
 8000d22:	f002 fe6d 	bl	8003a00 <HAL_DCMI_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000d2c:	f001 f8b0 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000bd24 	.word	0x2000bd24
 8000d38:	50050000 	.word	0x50050000

08000d3c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d42:	4a16      	ldr	r2, [pc, #88]	; (8000d9c <MX_DMA2D_Init+0x60>)
 8000d44:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d72:	f002 ff7b 	bl	8003c6c <HAL_DMA2D_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000d7c:	f001 f888 	bl	8001e90 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d80:	2101      	movs	r1, #1
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_DMA2D_Init+0x5c>)
 8000d84:	f003 fa3c 	bl	8004200 <HAL_DMA2D_ConfigLayer>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000d8e:	f001 f87f 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000b888 	.word	0x2000b888
 8000d9c:	4002b000 	.word	0x4002b000

08000da0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000da6:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <MX_I2C1_Init+0x78>)
 8000da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dac:	4a1b      	ldr	r2, [pc, #108]	; (8000e1c <MX_I2C1_Init+0x7c>)
 8000dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dda:	480e      	ldr	r0, [pc, #56]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000ddc:	f003 fe24 	bl	8004a28 <HAL_I2C_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000de6:	f001 f853 	bl	8001e90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000dee:	f004 fb33 	bl	8005458 <HAL_I2CEx_ConfigAnalogFilter>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000df8:	f001 f84a 	bl	8001e90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_I2C1_Init+0x74>)
 8000e00:	f004 fb75 	bl	80054ee <HAL_I2CEx_ConfigDigitalFilter>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e0a:	f001 f841 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000b960 	.word	0x2000b960
 8000e18:	40005400 	.word	0x40005400
 8000e1c:	00c0eaff 	.word	0x00c0eaff

08000e20 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e26:	4a1c      	ldr	r2, [pc, #112]	; (8000e98 <MX_I2C3_Init+0x78>)
 8000e28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <MX_I2C3_Init+0x7c>)
 8000e2e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e5a:	480e      	ldr	r0, [pc, #56]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e5c:	f003 fde4 	bl	8004a28 <HAL_I2C_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e66:	f001 f813 	bl	8001e90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e6e:	f004 faf3 	bl	8005458 <HAL_I2CEx_ConfigAnalogFilter>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e78:	f001 f80a 	bl	8001e90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_I2C3_Init+0x74>)
 8000e80:	f004 fb35 	bl	80054ee <HAL_I2CEx_ConfigDigitalFilter>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e8a:	f001 f801 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000b914 	.word	0x2000b914
 8000e98:	40005c00 	.word	0x40005c00
 8000e9c:	00c0eaff 	.word	0x00c0eaff

08000ea0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b09a      	sub	sp, #104	; 0x68
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ea6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eaa:	2234      	movs	r2, #52	; 0x34
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f027 fb71 	bl	8028596 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2234      	movs	r2, #52	; 0x34
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f027 fb6b 	bl	8028596 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ec0:	4b50      	ldr	r3, [pc, #320]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ec2:	4a51      	ldr	r2, [pc, #324]	; (8001008 <MX_LTDC_Init+0x168>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ec6:	4b4f      	ldr	r3, [pc, #316]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ecc:	4b4d      	ldr	r3, [pc, #308]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ed2:	4b4c      	ldr	r3, [pc, #304]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ed8:	4b4a      	ldr	r3, [pc, #296]	; (8001004 <MX_LTDC_Init+0x164>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000ede:	4b49      	ldr	r3, [pc, #292]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ee0:	2228      	movs	r2, #40	; 0x28
 8000ee2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000ee4:	4b47      	ldr	r3, [pc, #284]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ee6:	2209      	movs	r2, #9
 8000ee8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000eea:	4b46      	ldr	r3, [pc, #280]	; (8001004 <MX_LTDC_Init+0x164>)
 8000eec:	2235      	movs	r2, #53	; 0x35
 8000eee:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000ef0:	4b44      	ldr	r3, [pc, #272]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ef2:	220b      	movs	r2, #11
 8000ef4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000ef6:	4b43      	ldr	r3, [pc, #268]	; (8001004 <MX_LTDC_Init+0x164>)
 8000ef8:	f240 2215 	movw	r2, #533	; 0x215
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000efe:	4b41      	ldr	r3, [pc, #260]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f00:	f240 121b 	movw	r2, #283	; 0x11b
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000f06:	4b3f      	ldr	r3, [pc, #252]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f08:	f240 2235 	movw	r2, #565	; 0x235
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f10:	f240 121d 	movw	r2, #285	; 0x11d
 8000f14:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f16:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f1e:	4b39      	ldr	r3, [pc, #228]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f26:	4b37      	ldr	r3, [pc, #220]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f2e:	4835      	ldr	r0, [pc, #212]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f30:	f004 fb2a 	bl	8005588 <HAL_LTDC_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000f3a:	f000 ffa9 	bl	8001e90 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000f42:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f46:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000f4c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f50:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000f52:	2301      	movs	r3, #1
 8000f54:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000f56:	23ff      	movs	r3, #255	; 0xff
 8000f58:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f62:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000f64:	2305      	movs	r3, #5
 8000f66:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000f68:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000f6c:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000f6e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f72:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000f74:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f78:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f90:	2200      	movs	r2, #0
 8000f92:	4619      	mov	r1, r3
 8000f94:	481b      	ldr	r0, [pc, #108]	; (8001004 <MX_LTDC_Init+0x164>)
 8000f96:	f004 fc7f 	bl	8005898 <HAL_LTDC_ConfigLayer>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000fa0:	f000 ff76 	bl	8001e90 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc0:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fc2:	2305      	movs	r3, #5
 8000fc4:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_LTDC_Init+0x164>)
 8000fec:	f004 fc54 	bl	8005898 <HAL_LTDC_ConfigLayer>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8000ff6:	f000 ff4b 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	3768      	adds	r7, #104	; 0x68
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000b77c 	.word	0x2000b77c
 8001008:	40016800 	.word	0x40016800

0800100c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001012:	4a13      	ldr	r2, [pc, #76]	; (8001060 <MX_QUADSPI_Init+0x54>)
 8001014:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001018:	22ff      	movs	r2, #255	; 0xff
 800101a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_QUADSPI_Init+0x50>)
 800101e:	2201      	movs	r2, #1
 8001020:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_QUADSPI_Init+0x50>)
 800102a:	2201      	movs	r2, #1
 800102c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_QUADSPI_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_QUADSPI_Init+0x50>)
 8001048:	f004 fe96 	bl	8005d78 <HAL_QSPI_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001052:	f000 ff1d 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000b8c8 	.word	0x2000b8c8
 8001060:	a0001000 	.word	0xa0001000

08001064 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b092      	sub	sp, #72	; 0x48
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800106a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]
 800107a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800107c:	2300      	movs	r3, #0
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	222c      	movs	r2, #44	; 0x2c
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f027 fa85 	bl	8028596 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800108c:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <MX_RTC_Init+0x144>)
 800108e:	4a47      	ldr	r2, [pc, #284]	; (80011ac <MX_RTC_Init+0x148>)
 8001090:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001092:	4b45      	ldr	r3, [pc, #276]	; (80011a8 <MX_RTC_Init+0x144>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001098:	4b43      	ldr	r3, [pc, #268]	; (80011a8 <MX_RTC_Init+0x144>)
 800109a:	227f      	movs	r2, #127	; 0x7f
 800109c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800109e:	4b42      	ldr	r3, [pc, #264]	; (80011a8 <MX_RTC_Init+0x144>)
 80010a0:	22ff      	movs	r2, #255	; 0xff
 80010a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010a4:	4b40      	ldr	r3, [pc, #256]	; (80011a8 <MX_RTC_Init+0x144>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010aa:	4b3f      	ldr	r3, [pc, #252]	; (80011a8 <MX_RTC_Init+0x144>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010b0:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <MX_RTC_Init+0x144>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010b6:	483c      	ldr	r0, [pc, #240]	; (80011a8 <MX_RTC_Init+0x144>)
 80010b8:	f006 f8ea 	bl	8007290 <HAL_RTC_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80010c2:	f000 fee5 	bl	8001e90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010d8:	2300      	movs	r3, #0
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e4:	2201      	movs	r2, #1
 80010e6:	4619      	mov	r1, r3
 80010e8:	482f      	ldr	r0, [pc, #188]	; (80011a8 <MX_RTC_Init+0x144>)
 80010ea:	f006 f94d 	bl	8007388 <HAL_RTC_SetTime>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80010f4:	f000 fecc 	bl	8001e90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80010fe:	2301      	movs	r3, #1
 8001100:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001104:	2301      	movs	r3, #1
 8001106:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800110a:	2300      	movs	r3, #0
 800110c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001110:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	4823      	ldr	r0, [pc, #140]	; (80011a8 <MX_RTC_Init+0x144>)
 800111a:	f006 f9f3 	bl	8007504 <HAL_RTC_SetDate>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001124:	f000 feb4 	bl	8001e90 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001128:	2300      	movs	r3, #0
 800112a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800112c:	2300      	movs	r3, #0
 800112e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001130:	2300      	movs	r3, #0
 8001132:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800114c:	2301      	movs	r3, #1
 800114e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001158:	463b      	mov	r3, r7
 800115a:	2201      	movs	r2, #1
 800115c:	4619      	mov	r1, r3
 800115e:	4812      	ldr	r0, [pc, #72]	; (80011a8 <MX_RTC_Init+0x144>)
 8001160:	f006 fa78 	bl	8007654 <HAL_RTC_SetAlarm>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800116a:	f000 fe91 	bl	8001e90 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800116e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	2201      	movs	r2, #1
 8001178:	4619      	mov	r1, r3
 800117a:	480b      	ldr	r0, [pc, #44]	; (80011a8 <MX_RTC_Init+0x144>)
 800117c:	f006 fa6a 	bl	8007654 <HAL_RTC_SetAlarm>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001186:	f000 fe83 	bl	8001e90 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800118a:	2202      	movs	r2, #2
 800118c:	2100      	movs	r1, #0
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <MX_RTC_Init+0x144>)
 8001190:	f006 fbea 	bl	8007968 <HAL_RTCEx_SetTimeStamp>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800119a:	f000 fe79 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	3748      	adds	r7, #72	; 0x48
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000b75c 	.word	0x2000b75c
 80011ac:	40002800 	.word	0x40002800

080011b0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80011b4:	4b4d      	ldr	r3, [pc, #308]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011b6:	4a4e      	ldr	r2, [pc, #312]	; (80012f0 <MX_SAI2_Init+0x140>)
 80011b8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80011ba:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80011c0:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80011c6:	4b49      	ldr	r3, [pc, #292]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011c8:	2240      	movs	r2, #64	; 0x40
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80011cc:	4b47      	ldr	r3, [pc, #284]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80011d2:	4b46      	ldr	r3, [pc, #280]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80011d8:	4b44      	ldr	r3, [pc, #272]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011de:	4b43      	ldr	r3, [pc, #268]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80011e4:	4b41      	ldr	r3, [pc, #260]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011ea:	4b40      	ldr	r3, [pc, #256]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80011f0:	4b3e      	ldr	r3, [pc, #248]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011f2:	4a40      	ldr	r2, [pc, #256]	; (80012f4 <MX_SAI2_Init+0x144>)
 80011f4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80011f6:	4b3d      	ldr	r3, [pc, #244]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80011fc:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <MX_SAI2_Init+0x13c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001202:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001204:	2200      	movs	r2, #0
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001208:	4b38      	ldr	r3, [pc, #224]	; (80012ec <MX_SAI2_Init+0x13c>)
 800120a:	2200      	movs	r2, #0
 800120c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800120e:	4b37      	ldr	r3, [pc, #220]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001210:	2208      	movs	r2, #8
 8001212:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001214:	4b35      	ldr	r3, [pc, #212]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001216:	2201      	movs	r2, #1
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800121a:	4b34      	ldr	r3, [pc, #208]	; (80012ec <MX_SAI2_Init+0x13c>)
 800121c:	2200      	movs	r2, #0
 800121e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001220:	4b32      	ldr	r3, [pc, #200]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001222:	2200      	movs	r2, #0
 8001224:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001226:	4b31      	ldr	r3, [pc, #196]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001228:	2200      	movs	r2, #0
 800122a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800122c:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <MX_SAI2_Init+0x13c>)
 800122e:	2200      	movs	r2, #0
 8001230:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001232:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001234:	2200      	movs	r2, #0
 8001236:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001238:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <MX_SAI2_Init+0x13c>)
 800123a:	2201      	movs	r2, #1
 800123c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001240:	2200      	movs	r2, #0
 8001242:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001244:	4829      	ldr	r0, [pc, #164]	; (80012ec <MX_SAI2_Init+0x13c>)
 8001246:	f006 fbe5 	bl	8007a14 <HAL_SAI_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001250:	f000 fe1e 	bl	8001e90 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001256:	4a29      	ldr	r2, [pc, #164]	; (80012fc <MX_SAI2_Init+0x14c>)
 8001258:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800125a:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <MX_SAI2_Init+0x148>)
 800125c:	2200      	movs	r2, #0
 800125e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001262:	2203      	movs	r2, #3
 8001264:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001268:	2240      	movs	r2, #64	; 0x40
 800126a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <MX_SAI2_Init+0x148>)
 800126e:	2200      	movs	r2, #0
 8001270:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001274:	2200      	movs	r2, #0
 8001276:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_SAI2_Init+0x148>)
 800127a:	2201      	movs	r2, #1
 800127c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_SAI2_Init+0x148>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_SAI2_Init+0x148>)
 8001298:	2200      	movs	r2, #0
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <MX_SAI2_Init+0x148>)
 800129e:	2200      	movs	r2, #0
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012a4:	2208      	movs	r2, #8
 80012a6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012bc:	2200      	movs	r2, #0
 80012be:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80012c0:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <MX_SAI2_Init+0x148>)
 80012da:	f006 fb9b 	bl	8007a14 <HAL_SAI_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80012e4:	f000 fdd4 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000ba30 	.word	0x2000ba30
 80012f0:	40015c04 	.word	0x40015c04
 80012f4:	0002ee00 	.word	0x0002ee00
 80012f8:	2000b9ac 	.word	0x2000b9ac
 80012fc:	40015c24 	.word	0x40015c24

08001300 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 8001306:	4a0d      	ldr	r2, [pc, #52]	; (800133c <MX_SDMMC1_SD_Init+0x3c>)
 8001308:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <MX_SDMMC1_SD_Init+0x38>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	2000b6d8 	.word	0x2000b6d8
 800133c:	40012c00 	.word	0x40012c00

08001340 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001346:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800134a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 8001384:	2200      	movs	r2, #0
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <MX_SPDIFRX_Init+0x5c>)
 800138a:	f007 fdd7 	bl	8008f3c <HAL_SPDIFRX_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001394:	f000 fd7c 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000bc14 	.word	0x2000bc14

080013a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_SPI2_Init+0x74>)
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <MX_SPI2_Init+0x78>)
 80013a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_SPI2_Init+0x74>)
 80013ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_SPI2_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <MX_SPI2_Init+0x74>)
 80013ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_SPI2_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_SPI2_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_SPI2_Init+0x74>)
 80013ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_SPI2_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_SPI2_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_SPI2_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_SPI2_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_SPI2_Init+0x74>)
 80013ee:	2207      	movs	r2, #7
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_SPI2_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_SPI2_Init+0x74>)
 80013fa:	2208      	movs	r2, #8
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_SPI2_Init+0x74>)
 8001400:	f007 fdf8 	bl	8008ff4 <HAL_SPI_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800140a:	f000 fd41 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000b824 	.word	0x2000b824
 8001418:	40003800 	.word	0x40003800

0800141c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08e      	sub	sp, #56	; 0x38
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
 800144a:	615a      	str	r2, [r3, #20]
 800144c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001450:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001454:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001456:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001458:	2200      	movs	r2, #0
 800145a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145c:	4b29      	ldr	r3, [pc, #164]	; (8001504 <MX_TIM2_Init+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001464:	f04f 32ff 	mov.w	r2, #4294967295
 8001468:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <MX_TIM2_Init+0xe8>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001476:	4823      	ldr	r0, [pc, #140]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001478:	f007 fe4e 	bl	8009118 <HAL_TIM_Base_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001482:	f000 fd05 	bl	8001e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800148c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001490:	4619      	mov	r1, r3
 8001492:	481c      	ldr	r0, [pc, #112]	; (8001504 <MX_TIM2_Init+0xe8>)
 8001494:	f008 f8f8 	bl	8009688 <HAL_TIM_ConfigClockSource>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800149e:	f000 fcf7 	bl	8001e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014a2:	4818      	ldr	r0, [pc, #96]	; (8001504 <MX_TIM2_Init+0xe8>)
 80014a4:	f007 fe8e 	bl	80091c4 <HAL_TIM_PWM_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80014ae:	f000 fcef 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	4810      	ldr	r0, [pc, #64]	; (8001504 <MX_TIM2_Init+0xe8>)
 80014c2:	f008 fd5b 	bl	8009f7c <HAL_TIMEx_MasterConfigSynchronization>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80014cc:	f000 fce0 	bl	8001e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d0:	2360      	movs	r3, #96	; 0x60
 80014d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	2200      	movs	r2, #0
 80014e4:	4619      	mov	r1, r3
 80014e6:	4807      	ldr	r0, [pc, #28]	; (8001504 <MX_TIM2_Init+0xe8>)
 80014e8:	f007 ffb6 	bl	8009458 <HAL_TIM_PWM_ConfigChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014f2:	f000 fccd 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014f6:	4803      	ldr	r0, [pc, #12]	; (8001504 <MX_TIM2_Init+0xe8>)
 80014f8:	f001 fa18 	bl	800292c <HAL_TIM_MspPostInit>

}
 80014fc:	bf00      	nop
 80014fe:	3738      	adds	r7, #56	; 0x38
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2000bca0 	.word	0x2000bca0

08001508 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08e      	sub	sp, #56	; 0x38
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800153a:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800153c:	4a2d      	ldr	r2, [pc, #180]	; (80015f4 <MX_TIM3_Init+0xec>)
 800153e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001540:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <MX_TIM3_Init+0xe8>)
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <MX_TIM3_Init+0xe8>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800154c:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800154e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001552:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <MX_TIM3_Init+0xe8>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001560:	4823      	ldr	r0, [pc, #140]	; (80015f0 <MX_TIM3_Init+0xe8>)
 8001562:	f007 fdd9 	bl	8009118 <HAL_TIM_Base_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800156c:	f000 fc90 	bl	8001e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157a:	4619      	mov	r1, r3
 800157c:	481c      	ldr	r0, [pc, #112]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800157e:	f008 f883 	bl	8009688 <HAL_TIM_ConfigClockSource>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001588:	f000 fc82 	bl	8001e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800158c:	4818      	ldr	r0, [pc, #96]	; (80015f0 <MX_TIM3_Init+0xe8>)
 800158e:	f007 fe19 	bl	80091c4 <HAL_TIM_PWM_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001598:	f000 fc7a 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4811      	ldr	r0, [pc, #68]	; (80015f0 <MX_TIM3_Init+0xe8>)
 80015ac:	f008 fce6 	bl	8009f7c <HAL_TIMEx_MasterConfigSynchronization>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80015b6:	f000 fc6b 	bl	8001e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ba:	2360      	movs	r3, #96	; 0x60
 80015bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ca:	463b      	mov	r3, r7
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_TIM3_Init+0xe8>)
 80015d2:	f007 ff41 	bl	8009458 <HAL_TIM_PWM_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80015dc:	f000 fc58 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015e0:	4803      	ldr	r0, [pc, #12]	; (80015f0 <MX_TIM3_Init+0xe8>)
 80015e2:	f001 f9a3 	bl	800292c <HAL_TIM_MspPostInit>

}
 80015e6:	bf00      	nop
 80015e8:	3738      	adds	r7, #56	; 0x38
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000bce0 	.word	0x2000bce0
 80015f4:	40000400 	.word	0x40000400

080015f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	; 0x38
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001618:	463b      	mov	r3, r7
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	615a      	str	r2, [r3, #20]
 8001628:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800162c:	4a2d      	ldr	r2, [pc, #180]	; (80016e4 <MX_TIM5_Init+0xec>)
 800162e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001630:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <MX_TIM5_Init+0xe8>)
 8001632:	2200      	movs	r2, #0
 8001634:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <MX_TIM5_Init+0xe8>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800163c:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800163e:	f04f 32ff 	mov.w	r2, #4294967295
 8001642:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001644:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <MX_TIM5_Init+0xe8>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164a:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001650:	4823      	ldr	r0, [pc, #140]	; (80016e0 <MX_TIM5_Init+0xe8>)
 8001652:	f007 fd61 	bl	8009118 <HAL_TIM_Base_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800165c:	f000 fc18 	bl	8001e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166a:	4619      	mov	r1, r3
 800166c:	481c      	ldr	r0, [pc, #112]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800166e:	f008 f80b 	bl	8009688 <HAL_TIM_ConfigClockSource>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001678:	f000 fc0a 	bl	8001e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800167c:	4818      	ldr	r0, [pc, #96]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800167e:	f007 fda1 	bl	80091c4 <HAL_TIM_PWM_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001688:	f000 fc02 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	4811      	ldr	r0, [pc, #68]	; (80016e0 <MX_TIM5_Init+0xe8>)
 800169c:	f008 fc6e 	bl	8009f7c <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80016a6:	f000 fbf3 	bl	8001e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016aa:	2360      	movs	r3, #96	; 0x60
 80016ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016ba:	463b      	mov	r3, r7
 80016bc:	220c      	movs	r2, #12
 80016be:	4619      	mov	r1, r3
 80016c0:	4807      	ldr	r0, [pc, #28]	; (80016e0 <MX_TIM5_Init+0xe8>)
 80016c2:	f007 fec9 	bl	8009458 <HAL_TIM_PWM_ConfigChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80016cc:	f000 fbe0 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <MX_TIM5_Init+0xe8>)
 80016d2:	f001 f92b 	bl	800292c <HAL_TIM_MspPostInit>

}
 80016d6:	bf00      	nop
 80016d8:	3738      	adds	r7, #56	; 0x38
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000bc60 	.word	0x2000bc60
 80016e4:	40000c00 	.word	0x40000c00

080016e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001708:	4a20      	ldr	r2, [pc, #128]	; (800178c <MX_TIM8_Init+0xa4>)
 800170a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800170c:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <MX_TIM8_Init+0xa0>)
 800170e:	2200      	movs	r2, #0
 8001710:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <MX_TIM8_Init+0xa0>)
 800171a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b16      	ldr	r3, [pc, #88]	; (8001788 <MX_TIM8_Init+0xa0>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001732:	4815      	ldr	r0, [pc, #84]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001734:	f007 fcf0 	bl	8009118 <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800173e:	f000 fba7 	bl	8001e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	4619      	mov	r1, r3
 800174e:	480e      	ldr	r0, [pc, #56]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001750:	f007 ff9a 	bl	8009688 <HAL_TIM_ConfigClockSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800175a:	f000 fb99 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4619      	mov	r1, r3
 800176e:	4806      	ldr	r0, [pc, #24]	; (8001788 <MX_TIM8_Init+0xa0>)
 8001770:	f008 fc04 	bl	8009f7c <HAL_TIMEx_MasterConfigSynchronization>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800177a:	f000 fb89 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	3720      	adds	r7, #32
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000bd74 	.word	0x2000bd74
 800178c:	40010400 	.word	0x40010400

08001790 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	615a      	str	r2, [r3, #20]
 80017a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <MX_TIM12_Init+0x84>)
 80017aa:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <MX_TIM12_Init+0x88>)
 80017ac:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <MX_TIM12_Init+0x84>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <MX_TIM12_Init+0x84>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_TIM12_Init+0x84>)
 80017bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017c0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_TIM12_Init+0x84>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_TIM12_Init+0x84>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80017ce:	4811      	ldr	r0, [pc, #68]	; (8001814 <MX_TIM12_Init+0x84>)
 80017d0:	f007 fcf8 	bl	80091c4 <HAL_TIM_PWM_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80017da:	f000 fb59 	bl	8001e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017de:	2360      	movs	r3, #96	; 0x60
 80017e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	4619      	mov	r1, r3
 80017f4:	4807      	ldr	r0, [pc, #28]	; (8001814 <MX_TIM12_Init+0x84>)
 80017f6:	f007 fe2f 	bl	8009458 <HAL_TIM_PWM_ConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001800:	f000 fb46 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001804:	4803      	ldr	r0, [pc, #12]	; (8001814 <MX_TIM12_Init+0x84>)
 8001806:	f001 f891 	bl	800292c <HAL_TIM_MspPostInit>

}
 800180a:	bf00      	nop
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000bb54 	.word	0x2000bb54
 8001818:	40001800 	.word	0x40001800

0800181c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001822:	4a15      	ldr	r2, [pc, #84]	; (8001878 <MX_USART6_UART_Init+0x5c>)
 8001824:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800182c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <MX_USART6_UART_Init+0x58>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001842:	220c      	movs	r2, #12
 8001844:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_USART6_UART_Init+0x58>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_USART6_UART_Init+0x58>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001860:	f008 fc38 	bl	800a0d4 <HAL_UART_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800186a:	f000 fb11 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000bb94 	.word	0x2000bb94
 8001878:	40011400 	.word	0x40011400

0800187c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
 80018a0:	615a      	str	r2, [r3, #20]
 80018a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80018a4:	4b4c      	ldr	r3, [pc, #304]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018a6:	4a4d      	ldr	r2, [pc, #308]	; (80019dc <MX_FMC_Init+0x150>)
 80018a8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80018aa:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80018b0:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80018b6:	4b48      	ldr	r3, [pc, #288]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018b8:	2204      	movs	r2, #4
 80018ba:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80018bc:	4b46      	ldr	r3, [pc, #280]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018be:	2210      	movs	r2, #16
 80018c0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80018c2:	4b45      	ldr	r3, [pc, #276]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018c4:	2240      	movs	r2, #64	; 0x40
 80018c6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80018c8:	4b43      	ldr	r3, [pc, #268]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018ca:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80018ce:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80018d0:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80018d6:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018dc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80018de:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80018e6:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <MX_FMC_Init+0x14c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80018ec:	2302      	movs	r3, #2
 80018ee:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80018f0:	2307      	movs	r3, #7
 80018f2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80018f4:	2304      	movs	r3, #4
 80018f6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80018f8:	2307      	movs	r3, #7
 80018fa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80018fc:	2303      	movs	r3, #3
 80018fe:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001900:	2302      	movs	r3, #2
 8001902:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001904:	2302      	movs	r3, #2
 8001906:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4619      	mov	r1, r3
 800190c:	4832      	ldr	r0, [pc, #200]	; (80019d8 <MX_FMC_Init+0x14c>)
 800190e:	f007 fa95 	bl	8008e3c <HAL_SDRAM_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001918:	f000 faba 	bl	8001e90 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  __IO uint32_t tmpmrd = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	603b      	str	r3, [r7, #0]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001920:	4b2f      	ldr	r3, [pc, #188]	; (80019e0 <MX_FMC_Init+0x154>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001926:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <MX_FMC_Init+0x154>)
 8001928:	2210      	movs	r2, #16
 800192a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800192c:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <MX_FMC_Init+0x154>)
 800192e:	2201      	movs	r2, #1
 8001930:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001932:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <MX_FMC_Init+0x154>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800193c:	4928      	ldr	r1, [pc, #160]	; (80019e0 <MX_FMC_Init+0x154>)
 800193e:	4826      	ldr	r0, [pc, #152]	; (80019d8 <MX_FMC_Init+0x14c>)
 8001940:	f007 fab0 	bl	8008ea4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001944:	2001      	movs	r0, #1
 8001946:	f001 fbb5 	bl	80030b4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800194a:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <MX_FMC_Init+0x154>)
 800194c:	2202      	movs	r2, #2
 800194e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001950:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <MX_FMC_Init+0x154>)
 8001952:	2210      	movs	r2, #16
 8001954:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <MX_FMC_Init+0x154>)
 8001958:	2201      	movs	r2, #1
 800195a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800195c:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <MX_FMC_Init+0x154>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001966:	491e      	ldr	r1, [pc, #120]	; (80019e0 <MX_FMC_Init+0x154>)
 8001968:	481b      	ldr	r0, [pc, #108]	; (80019d8 <MX_FMC_Init+0x14c>)
 800196a:	f007 fa9b 	bl	8008ea4 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <MX_FMC_Init+0x154>)
 8001970:	2203      	movs	r2, #3
 8001972:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <MX_FMC_Init+0x154>)
 8001976:	2210      	movs	r2, #16
 8001978:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <MX_FMC_Init+0x154>)
 800197c:	2208      	movs	r2, #8
 800197e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <MX_FMC_Init+0x154>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800198a:	4915      	ldr	r1, [pc, #84]	; (80019e0 <MX_FMC_Init+0x154>)
 800198c:	4812      	ldr	r0, [pc, #72]	; (80019d8 <MX_FMC_Init+0x14c>)
 800198e:	f007 fa89 	bl	8008ea4 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001992:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001996:	603b      	str	r3, [r7, #0]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
           SDRAM_MODEREG_CAS_LATENCY_3            | \
           SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_FMC_Init+0x154>)
 800199a:	2204      	movs	r2, #4
 800199c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <MX_FMC_Init+0x154>)
 80019a0:	2210      	movs	r2, #16
 80019a2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_FMC_Init+0x154>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <MX_FMC_Init+0x154>)
 80019ae:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80019b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b4:	490a      	ldr	r1, [pc, #40]	; (80019e0 <MX_FMC_Init+0x154>)
 80019b6:	4808      	ldr	r0, [pc, #32]	; (80019d8 <MX_FMC_Init+0x14c>)
 80019b8:	f007 fa74 	bl	8008ea4 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80019bc:	f240 712b 	movw	r1, #1835	; 0x72b
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_FMC_Init+0x14c>)
 80019c2:	f007 fa9a 	bl	8008efa <HAL_SDRAM_ProgramRefreshRate>

  //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
  FMC_Bank1->BTCR[0] = 0x000030D2;
 80019c6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80019ca:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80019ce:	601a      	str	r2, [r3, #0]

  /* USER CODE END FMC_Init 2 */
}
 80019d0:	bf00      	nop
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	2000bb20 	.word	0x2000bb20
 80019dc:	a0000140 	.word	0xa0000140
 80019e0:	20000378 	.word	0x20000378

080019e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b090      	sub	sp, #64	; 0x40
 80019e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019fa:	4baf      	ldr	r3, [pc, #700]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4aae      	ldr	r2, [pc, #696]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a00:	f043 0310 	orr.w	r3, r3, #16
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4bac      	ldr	r3, [pc, #688]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a12:	4ba9      	ldr	r3, [pc, #676]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4aa8      	ldr	r2, [pc, #672]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4ba6      	ldr	r3, [pc, #664]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	4ba3      	ldr	r3, [pc, #652]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4aa2      	ldr	r2, [pc, #648]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4ba0      	ldr	r3, [pc, #640]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a42:	4b9d      	ldr	r3, [pc, #628]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a9c      	ldr	r2, [pc, #624]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b9a      	ldr	r3, [pc, #616]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5a:	4b97      	ldr	r3, [pc, #604]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a96      	ldr	r2, [pc, #600]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b94      	ldr	r3, [pc, #592]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	4b91      	ldr	r3, [pc, #580]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a90      	ldr	r2, [pc, #576]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b8e      	ldr	r3, [pc, #568]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a8a:	4b8b      	ldr	r3, [pc, #556]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a8a      	ldr	r2, [pc, #552]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b88      	ldr	r3, [pc, #544]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001aa2:	4b85      	ldr	r3, [pc, #532]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a84      	ldr	r2, [pc, #528]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b82      	ldr	r3, [pc, #520]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001aba:	4b7f      	ldr	r3, [pc, #508]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a7e      	ldr	r2, [pc, #504]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ac0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b7c      	ldr	r3, [pc, #496]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ad2:	4b79      	ldr	r3, [pc, #484]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a78      	ldr	r2, [pc, #480]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ad8:	f043 0320 	orr.w	r3, r3, #32
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b76      	ldr	r3, [pc, #472]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0320 	and.w	r3, r3, #32
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aea:	4b73      	ldr	r3, [pc, #460]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a72      	ldr	r2, [pc, #456]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b70      	ldr	r3, [pc, #448]	; (8001cb8 <MX_GPIO_Init+0x2d4>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b02:	2201      	movs	r2, #1
 8001b04:	2120      	movs	r1, #32
 8001b06:	486d      	ldr	r0, [pc, #436]	; (8001cbc <MX_GPIO_Init+0x2d8>)
 8001b08:	f002 ff74 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	210c      	movs	r1, #12
 8001b10:	486b      	ldr	r0, [pc, #428]	; (8001cc0 <MX_GPIO_Init+0x2dc>)
 8001b12:	f002 ff6f 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	2108      	movs	r1, #8
 8001b1a:	486a      	ldr	r0, [pc, #424]	; (8001cc4 <MX_GPIO_Init+0x2e0>)
 8001b1c:	f002 ff6a 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b26:	4866      	ldr	r0, [pc, #408]	; (8001cc0 <MX_GPIO_Init+0x2dc>)
 8001b28:	f002 ff64 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b32:	4865      	ldr	r0, [pc, #404]	; (8001cc8 <MX_GPIO_Init+0x2e4>)
 8001b34:	f002 ff5e 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	21c8      	movs	r1, #200	; 0xc8
 8001b3c:	4863      	ldr	r0, [pc, #396]	; (8001ccc <MX_GPIO_Init+0x2e8>)
 8001b3e:	f002 ff59 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001b42:	2308      	movs	r3, #8
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b46:	2300      	movs	r3, #0
 8001b48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b52:	4619      	mov	r1, r3
 8001b54:	485e      	ldr	r0, [pc, #376]	; (8001cd0 <MX_GPIO_Init+0x2ec>)
 8001b56:	f002 fc81 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001b5a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b6c:	230b      	movs	r3, #11
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b74:	4619      	mov	r1, r3
 8001b76:	4855      	ldr	r0, [pc, #340]	; (8001ccc <MX_GPIO_Init+0x2e8>)
 8001b78:	f002 fc70 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001b7c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b8e:	230a      	movs	r3, #10
 8001b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b96:	4619      	mov	r1, r3
 8001b98:	484e      	ldr	r0, [pc, #312]	; (8001cd4 <MX_GPIO_Init+0x2f0>)
 8001b9a:	f002 fc5f 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bae:	2307      	movs	r3, #7
 8001bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4846      	ldr	r0, [pc, #280]	; (8001cd4 <MX_GPIO_Init+0x2f0>)
 8001bba:	f002 fc4f 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4841      	ldr	r0, [pc, #260]	; (8001cd8 <MX_GPIO_Init+0x2f4>)
 8001bd4:	f002 fc42 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001bd8:	2340      	movs	r3, #64	; 0x40
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bdc:	4b3f      	ldr	r3, [pc, #252]	; (8001cdc <MX_GPIO_Init+0x2f8>)
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be8:	4619      	mov	r1, r3
 8001bea:	4834      	ldr	r0, [pc, #208]	; (8001cbc <MX_GPIO_Init+0x2d8>)
 8001bec:	f002 fc36 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001bf0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c02:	230a      	movs	r3, #10
 8001c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4834      	ldr	r0, [pc, #208]	; (8001ce0 <MX_GPIO_Init+0x2fc>)
 8001c0e:	f002 fc25 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001c12:	2320      	movs	r3, #32
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c16:	2301      	movs	r3, #1
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c26:	4619      	mov	r1, r3
 8001c28:	4824      	ldr	r0, [pc, #144]	; (8001cbc <MX_GPIO_Init+0x2d8>)
 8001c2a:	f002 fc17 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001c2e:	f241 030c 	movw	r3, #4108	; 0x100c
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c44:	4619      	mov	r1, r3
 8001c46:	481e      	ldr	r0, [pc, #120]	; (8001cc0 <MX_GPIO_Init+0x2dc>)
 8001c48:	f002 fc08 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c52:	2300      	movs	r3, #0
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4820      	ldr	r0, [pc, #128]	; (8001ce4 <MX_GPIO_Init+0x300>)
 8001c62:	f002 fbfb 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001c66:	2308      	movs	r3, #8
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001c76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4811      	ldr	r0, [pc, #68]	; (8001cc4 <MX_GPIO_Init+0x2e0>)
 8001c7e:	f002 fbed 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c82:	2310      	movs	r3, #16
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c86:	2300      	movs	r3, #0
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c92:	4619      	mov	r1, r3
 8001c94:	4809      	ldr	r0, [pc, #36]	; (8001cbc <MX_GPIO_Init+0x2d8>)
 8001c96:	f002 fbe1 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001c9a:	f248 0304 	movw	r3, #32772	; 0x8004
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cac:	4619      	mov	r1, r3
 8001cae:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <MX_GPIO_Init+0x2e4>)
 8001cb0:	f002 fbd4 	bl	800445c <HAL_GPIO_Init>
 8001cb4:	e018      	b.n	8001ce8 <MX_GPIO_Init+0x304>
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020c00 	.word	0x40020c00
 8001cc0:	40022000 	.word	0x40022000
 8001cc4:	40022800 	.word	0x40022800
 8001cc8:	40021c00 	.word	0x40021c00
 8001ccc:	40021800 	.word	0x40021800
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40022400 	.word	0x40022400
 8001cdc:	10120000 	.word	0x10120000
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020800 	.word	0x40020800

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfe:	4619      	mov	r1, r3
 8001d00:	484f      	ldr	r0, [pc, #316]	; (8001e40 <MX_GPIO_Init+0x45c>)
 8001d02:	f002 fbab 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d18:	2307      	movs	r3, #7
 8001d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d20:	4619      	mov	r1, r3
 8001d22:	4848      	ldr	r0, [pc, #288]	; (8001e44 <MX_GPIO_Init+0x460>)
 8001d24:	f002 fb9a 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d42:	4619      	mov	r1, r3
 8001d44:	483f      	ldr	r0, [pc, #252]	; (8001e44 <MX_GPIO_Init+0x460>)
 8001d46:	f002 fb89 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001d4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d50:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <MX_GPIO_Init+0x464>)
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	483b      	ldr	r0, [pc, #236]	; (8001e4c <MX_GPIO_Init+0x468>)
 8001d60:	f002 fb7c 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d64:	2310      	movs	r3, #16
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d74:	230a      	movs	r3, #10
 8001d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4830      	ldr	r0, [pc, #192]	; (8001e40 <MX_GPIO_Init+0x45c>)
 8001d80:	f002 fb6c 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001d84:	23c8      	movs	r3, #200	; 0xc8
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d98:	4619      	mov	r1, r3
 8001d9a:	482d      	ldr	r0, [pc, #180]	; (8001e50 <MX_GPIO_Init+0x46c>)
 8001d9c:	f002 fb5e 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001da0:	2305      	movs	r3, #5
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001db0:	230a      	movs	r3, #10
 8001db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db8:	4619      	mov	r1, r3
 8001dba:	4826      	ldr	r0, [pc, #152]	; (8001e54 <MX_GPIO_Init+0x470>)
 8001dbc:	f002 fb4e 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001dc0:	2332      	movs	r3, #50	; 0x32
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dd0:	230b      	movs	r3, #11
 8001dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd8:	4619      	mov	r1, r3
 8001dda:	481e      	ldr	r0, [pc, #120]	; (8001e54 <MX_GPIO_Init+0x470>)
 8001ddc:	f002 fb3e 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001de0:	2304      	movs	r3, #4
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de4:	2300      	movs	r3, #0
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df0:	4619      	mov	r1, r3
 8001df2:	4817      	ldr	r0, [pc, #92]	; (8001e50 <MX_GPIO_Init+0x46c>)
 8001df4:	f002 fb32 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001df8:	2386      	movs	r3, #134	; 0x86
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e08:	230b      	movs	r3, #11
 8001e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e10:	4619      	mov	r1, r3
 8001e12:	480c      	ldr	r0, [pc, #48]	; (8001e44 <MX_GPIO_Init+0x460>)
 8001e14:	f002 fb22 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001e18:	2328      	movs	r3, #40	; 0x28
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e28:	230a      	movs	r3, #10
 8001e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e30:	4619      	mov	r1, r3
 8001e32:	4804      	ldr	r0, [pc, #16]	; (8001e44 <MX_GPIO_Init+0x460>)
 8001e34:	f002 fb12 	bl	800445c <HAL_GPIO_Init>

}
 8001e38:	bf00      	nop
 8001e3a:	3740      	adds	r7, #64	; 0x40
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021c00 	.word	0x40021c00
 8001e44:	40020000 	.word	0x40020000
 8001e48:	10120000 	.word	0x10120000
 8001e4c:	40022000 	.word	0x40022000
 8001e50:	40021800 	.word	0x40021800
 8001e54:	40020800 	.word	0x40020800

08001e58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001e60:	f00d f8e1 	bl	800f026 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f00a f8cf 	bl	800c008 <osDelay>
 8001e6a:	e7fb      	b.n	8001e64 <StartDefaultTask+0xc>

08001e6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e7e:	f001 f8f9 	bl	8003074 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40001000 	.word	0x40001000

08001e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_MspInit+0x4c>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a10      	ldr	r2, [pc, #64]	; (8001eec <HAL_MspInit+0x4c>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_MspInit+0x4c>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_MspInit+0x4c>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <HAL_MspInit+0x4c>)
 8001ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_MspInit+0x4c>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	210f      	movs	r1, #15
 8001eda:	f06f 0001 	mvn.w	r0, #1
 8001ede:	f001 fc6d 	bl	80037bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <HAL_ADC_MspInit+0xa4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d13c      	bne.n	8001f8c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f12:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a20      	ldr	r2, [pc, #128]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f30:	f043 0320 	orr.w	r3, r3, #32
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_ADC_MspInit+0xa8>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001f5a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001f5e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f60:	2303      	movs	r3, #3
 8001f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	480b      	ldr	r0, [pc, #44]	; (8001f9c <HAL_ADC_MspInit+0xac>)
 8001f70:	f002 fa74 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001f74:	2301      	movs	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <HAL_ADC_MspInit+0xb0>)
 8001f88:	f002 fa68 	bl	800445c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	; 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40012200 	.word	0x40012200
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40021400 	.word	0x40021400
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_CRC_MspInit+0x38>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d10b      	bne.n	8001fce <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_CRC_MspInit+0x3c>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <HAL_CRC_MspInit+0x3c>)
 8001fbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_CRC_MspInit+0x3c>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40023000 	.word	0x40023000
 8001fe0:	40023800 	.word	0x40023800

08001fe4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08e      	sub	sp, #56	; 0x38
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a50      	ldr	r2, [pc, #320]	; (8002144 <HAL_DCMI_MspInit+0x160>)
 8002002:	4293      	cmp	r3, r2
 8002004:	f040 809a 	bne.w	800213c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002008:	4b4f      	ldr	r3, [pc, #316]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800200a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200c:	4a4e      	ldr	r2, [pc, #312]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6353      	str	r3, [r2, #52]	; 0x34
 8002014:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	623b      	str	r3, [r7, #32]
 800201e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002020:	4b49      	ldr	r3, [pc, #292]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	4a48      	ldr	r2, [pc, #288]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	6313      	str	r3, [r2, #48]	; 0x30
 800202c:	4b46      	ldr	r3, [pc, #280]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002038:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	4a42      	ldr	r2, [pc, #264]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800203e:	f043 0308 	orr.w	r3, r3, #8
 8002042:	6313      	str	r3, [r2, #48]	; 0x30
 8002044:	4b40      	ldr	r3, [pc, #256]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002050:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	4a3c      	ldr	r2, [pc, #240]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800205a:	6313      	str	r3, [r2, #48]	; 0x30
 800205c:	4b3a      	ldr	r3, [pc, #232]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002068:	4b37      	ldr	r3, [pc, #220]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	4a36      	ldr	r2, [pc, #216]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800206e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002072:	6313      	str	r3, [r2, #48]	; 0x30
 8002074:	4b34      	ldr	r3, [pc, #208]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002080:	4b31      	ldr	r3, [pc, #196]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	4a30      	ldr	r2, [pc, #192]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6313      	str	r3, [r2, #48]	; 0x30
 800208c:	4b2e      	ldr	r3, [pc, #184]	; (8002148 <HAL_DCMI_MspInit+0x164>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002098:	2360      	movs	r3, #96	; 0x60
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80020a8:	230d      	movs	r3, #13
 80020aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b0:	4619      	mov	r1, r3
 80020b2:	4826      	ldr	r0, [pc, #152]	; (800214c <HAL_DCMI_MspInit+0x168>)
 80020b4:	f002 f9d2 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80020b8:	2308      	movs	r3, #8
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80020c8:	230d      	movs	r3, #13
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80020cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d0:	4619      	mov	r1, r3
 80020d2:	481f      	ldr	r0, [pc, #124]	; (8002150 <HAL_DCMI_MspInit+0x16c>)
 80020d4:	f002 f9c2 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80020d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80020ea:	230d      	movs	r3, #13
 80020ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80020ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f2:	4619      	mov	r1, r3
 80020f4:	4817      	ldr	r0, [pc, #92]	; (8002154 <HAL_DCMI_MspInit+0x170>)
 80020f6:	f002 f9b1 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80020fa:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800210c:	230d      	movs	r3, #13
 800210e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002114:	4619      	mov	r1, r3
 8002116:	4810      	ldr	r0, [pc, #64]	; (8002158 <HAL_DCMI_MspInit+0x174>)
 8002118:	f002 f9a0 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800211c:	2350      	movs	r3, #80	; 0x50
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800212c:	230d      	movs	r3, #13
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002134:	4619      	mov	r1, r3
 8002136:	4809      	ldr	r0, [pc, #36]	; (800215c <HAL_DCMI_MspInit+0x178>)
 8002138:	f002 f990 	bl	800445c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800213c:	bf00      	nop
 800213e:	3738      	adds	r7, #56	; 0x38
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	50050000 	.word	0x50050000
 8002148:	40023800 	.word	0x40023800
 800214c:	40021000 	.word	0x40021000
 8002150:	40020c00 	.word	0x40020c00
 8002154:	40021800 	.word	0x40021800
 8002158:	40021c00 	.word	0x40021c00
 800215c:	40020000 	.word	0x40020000

08002160 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <HAL_DMA2D_MspInit+0x44>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d113      	bne.n	800219a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_DMA2D_MspInit+0x48>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a0c      	ldr	r2, [pc, #48]	; (80021a8 <HAL_DMA2D_MspInit+0x48>)
 8002178:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <HAL_DMA2D_MspInit+0x48>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	205a      	movs	r0, #90	; 0x5a
 8002190:	f001 fb14 	bl	80037bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002194:	205a      	movs	r0, #90	; 0x5a
 8002196:	f001 fb2d 	bl	80037f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	4002b000 	.word	0x4002b000
 80021a8:	40023800 	.word	0x40023800

080021ac <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <HAL_DMA2D_MspDeInit+0x2c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d108      	bne.n	80021d0 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <HAL_DMA2D_MspDeInit+0x30>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a06      	ldr	r2, [pc, #24]	; (80021dc <HAL_DMA2D_MspDeInit+0x30>)
 80021c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80021ca:	205a      	movs	r0, #90	; 0x5a
 80021cc:	f001 fb20 	bl	8003810 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	4002b000 	.word	0x4002b000
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08c      	sub	sp, #48	; 0x30
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a2f      	ldr	r2, [pc, #188]	; (80022bc <HAL_I2C_MspInit+0xdc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d129      	bne.n	8002256 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a2e      	ldr	r2, [pc, #184]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800221a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800221e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002220:	2312      	movs	r3, #18
 8002222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002224:	2301      	movs	r3, #1
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800222c:	2304      	movs	r3, #4
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	4619      	mov	r1, r3
 8002236:	4823      	ldr	r0, [pc, #140]	; (80022c4 <HAL_I2C_MspInit+0xe4>)
 8002238:	f002 f910 	bl	800445c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800223c:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	4a1f      	ldr	r2, [pc, #124]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002242:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002246:	6413      	str	r3, [r2, #64]	; 0x40
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002254:	e02d      	b.n	80022b2 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a1b      	ldr	r2, [pc, #108]	; (80022c8 <HAL_I2C_MspInit+0xe8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d128      	bne.n	80022b2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	4a16      	ldr	r2, [pc, #88]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 8002266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226a:	6313      	str	r3, [r2, #48]	; 0x30
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002278:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800227e:	2312      	movs	r3, #18
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002282:	2301      	movs	r3, #1
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800228a:	2304      	movs	r3, #4
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	4619      	mov	r1, r3
 8002294:	480d      	ldr	r0, [pc, #52]	; (80022cc <HAL_I2C_MspInit+0xec>)
 8002296:	f002 f8e1 	bl	800445c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 80022a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022a4:	6413      	str	r3, [r2, #64]	; 0x40
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_I2C_MspInit+0xe0>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
}
 80022b2:	bf00      	nop
 80022b4:	3730      	adds	r7, #48	; 0x30
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40005400 	.word	0x40005400
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020400 	.word	0x40020400
 80022c8:	40005c00 	.word	0x40005c00
 80022cc:	40021c00 	.word	0x40021c00

080022d0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a15      	ldr	r2, [pc, #84]	; (8002334 <HAL_I2C_MspDeInit+0x64>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d110      	bne.n	8002304 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_I2C_MspDeInit+0x68>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a14      	ldr	r2, [pc, #80]	; (8002338 <HAL_I2C_MspDeInit+0x68>)
 80022e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80022ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022f2:	4812      	ldr	r0, [pc, #72]	; (800233c <HAL_I2C_MspDeInit+0x6c>)
 80022f4:	f002 fa5c 	bl	80047b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80022f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022fc:	480f      	ldr	r0, [pc, #60]	; (800233c <HAL_I2C_MspDeInit+0x6c>)
 80022fe:	f002 fa57 	bl	80047b0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002302:	e013      	b.n	800232c <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_I2C_MspDeInit+0x70>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10e      	bne.n	800232c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_I2C_MspDeInit+0x68>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_I2C_MspDeInit+0x68>)
 8002314:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800231a:	2180      	movs	r1, #128	; 0x80
 800231c:	4809      	ldr	r0, [pc, #36]	; (8002344 <HAL_I2C_MspDeInit+0x74>)
 800231e:	f002 fa47 	bl	80047b0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002326:	4807      	ldr	r0, [pc, #28]	; (8002344 <HAL_I2C_MspDeInit+0x74>)
 8002328:	f002 fa42 	bl	80047b0 <HAL_GPIO_DeInit>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40005400 	.word	0x40005400
 8002338:	40023800 	.word	0x40023800
 800233c:	40020400 	.word	0x40020400
 8002340:	40005c00 	.word	0x40005c00
 8002344:	40021c00 	.word	0x40021c00

08002348 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08e      	sub	sp, #56	; 0x38
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a55      	ldr	r2, [pc, #340]	; (80024bc <HAL_LTDC_MspInit+0x174>)
 8002366:	4293      	cmp	r3, r2
 8002368:	f040 80a3 	bne.w	80024b2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800236c:	4b54      	ldr	r3, [pc, #336]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	4a53      	ldr	r2, [pc, #332]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 8002372:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002376:	6453      	str	r3, [r2, #68]	; 0x44
 8002378:	4b51      	ldr	r3, [pc, #324]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002380:	623b      	str	r3, [r7, #32]
 8002382:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002384:	4b4e      	ldr	r3, [pc, #312]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	4a4d      	ldr	r2, [pc, #308]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 800238a:	f043 0310 	orr.w	r3, r3, #16
 800238e:	6313      	str	r3, [r2, #48]	; 0x30
 8002390:	4b4b      	ldr	r3, [pc, #300]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800239c:	4b48      	ldr	r3, [pc, #288]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	4a47      	ldr	r2, [pc, #284]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a6:	6313      	str	r3, [r2, #48]	; 0x30
 80023a8:	4b45      	ldr	r3, [pc, #276]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80023b4:	4b42      	ldr	r3, [pc, #264]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	4a41      	ldr	r2, [pc, #260]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023be:	6313      	str	r3, [r2, #48]	; 0x30
 80023c0:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023cc:	4b3c      	ldr	r3, [pc, #240]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	4a3b      	ldr	r2, [pc, #236]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023d6:	6313      	str	r3, [r2, #48]	; 0x30
 80023d8:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80023e4:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	4a35      	ldr	r2, [pc, #212]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ee:	6313      	str	r3, [r2, #48]	; 0x30
 80023f0:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <HAL_LTDC_MspInit+0x178>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80023fc:	2310      	movs	r3, #16
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002408:	2300      	movs	r3, #0
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800240c:	230e      	movs	r3, #14
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002414:	4619      	mov	r1, r3
 8002416:	482b      	ldr	r0, [pc, #172]	; (80024c4 <HAL_LTDC_MspInit+0x17c>)
 8002418:	f002 f820 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800241c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800242e:	230e      	movs	r3, #14
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002436:	4619      	mov	r1, r3
 8002438:	4823      	ldr	r0, [pc, #140]	; (80024c8 <HAL_LTDC_MspInit+0x180>)
 800243a:	f002 f80f 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800243e:	23f7      	movs	r3, #247	; 0xf7
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	2300      	movs	r3, #0
 800244c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800244e:	230e      	movs	r3, #14
 8002450:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002456:	4619      	mov	r1, r3
 8002458:	481c      	ldr	r0, [pc, #112]	; (80024cc <HAL_LTDC_MspInit+0x184>)
 800245a:	f001 ffff 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800245e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	2302      	movs	r3, #2
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246c:	2300      	movs	r3, #0
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002470:	2309      	movs	r3, #9
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002478:	4619      	mov	r1, r3
 800247a:	4815      	ldr	r0, [pc, #84]	; (80024d0 <HAL_LTDC_MspInit+0x188>)
 800247c:	f001 ffee 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002480:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002492:	230e      	movs	r3, #14
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249a:	4619      	mov	r1, r3
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <HAL_LTDC_MspInit+0x18c>)
 800249e:	f001 ffdd 	bl	800445c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	2058      	movs	r0, #88	; 0x58
 80024a8:	f001 f988 	bl	80037bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80024ac:	2058      	movs	r0, #88	; 0x58
 80024ae:	f001 f9a1 	bl	80037f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80024b2:	bf00      	nop
 80024b4:	3738      	adds	r7, #56	; 0x38
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40016800 	.word	0x40016800
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40022400 	.word	0x40022400
 80024cc:	40022800 	.word	0x40022800
 80024d0:	40021800 	.word	0x40021800
 80024d4:	40022000 	.word	0x40022000

080024d8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08c      	sub	sp, #48	; 0x30
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 031c 	add.w	r3, r7, #28
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a3b      	ldr	r2, [pc, #236]	; (80025e4 <HAL_QSPI_MspInit+0x10c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d170      	bne.n	80025dc <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80024fa:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fe:	4a3a      	ldr	r2, [pc, #232]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002500:	f043 0302 	orr.w	r3, r3, #2
 8002504:	6393      	str	r3, [r2, #56]	; 0x38
 8002506:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002512:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a34      	ldr	r2, [pc, #208]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002518:	f043 0310 	orr.w	r3, r3, #16
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252a:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a2e      	ldr	r2, [pc, #184]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b2c      	ldr	r3, [pc, #176]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002542:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a28      	ldr	r2, [pc, #160]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002548:	f043 0308 	orr.w	r3, r3, #8
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <HAL_QSPI_MspInit+0x110>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800255a:	2304      	movs	r3, #4
 800255c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002566:	2303      	movs	r3, #3
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800256a:	2309      	movs	r3, #9
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	4619      	mov	r1, r3
 8002574:	481d      	ldr	r0, [pc, #116]	; (80025ec <HAL_QSPI_MspInit+0x114>)
 8002576:	f001 ff71 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800257a:	2340      	movs	r3, #64	; 0x40
 800257c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002586:	2303      	movs	r3, #3
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800258a:	230a      	movs	r3, #10
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	4619      	mov	r1, r3
 8002594:	4816      	ldr	r0, [pc, #88]	; (80025f0 <HAL_QSPI_MspInit+0x118>)
 8002596:	f001 ff61 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800259a:	2304      	movs	r3, #4
 800259c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80025aa:	2309      	movs	r3, #9
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ae:	f107 031c 	add.w	r3, r7, #28
 80025b2:	4619      	mov	r1, r3
 80025b4:	480e      	ldr	r0, [pc, #56]	; (80025f0 <HAL_QSPI_MspInit+0x118>)
 80025b6:	f001 ff51 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80025ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80025be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80025cc:	2309      	movs	r3, #9
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	4619      	mov	r1, r3
 80025d6:	4807      	ldr	r0, [pc, #28]	; (80025f4 <HAL_QSPI_MspInit+0x11c>)
 80025d8:	f001 ff40 	bl	800445c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80025dc:	bf00      	nop
 80025de:	3730      	adds	r7, #48	; 0x30
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	a0001000 	.word	0xa0001000
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40020400 	.word	0x40020400
 80025f4:	40020c00 	.word	0x40020c00

080025f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a07      	ldr	r2, [pc, #28]	; (8002624 <HAL_RTC_MspInit+0x2c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d105      	bne.n	8002616 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <HAL_RTC_MspInit+0x30>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	4a06      	ldr	r2, [pc, #24]	; (8002628 <HAL_RTC_MspInit+0x30>)
 8002610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002614:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40002800 	.word	0x40002800
 8002628:	40023800 	.word	0x40023800

0800262c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a25      	ldr	r2, [pc, #148]	; (80026e0 <HAL_SD_MspInit+0xb4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d144      	bne.n	80026d8 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800264e:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	4a24      	ldr	r2, [pc, #144]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002654:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002658:	6453      	str	r3, [r2, #68]	; 0x44
 800265a:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002666:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a1e      	ldr	r2, [pc, #120]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800267e:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 8002684:	f043 0308 	orr.w	r3, r3, #8
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <HAL_SD_MspInit+0xb8>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002696:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800269a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	2302      	movs	r3, #2
 800269e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80026a8:	230c      	movs	r3, #12
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	4619      	mov	r1, r3
 80026b2:	480d      	ldr	r0, [pc, #52]	; (80026e8 <HAL_SD_MspInit+0xbc>)
 80026b4:	f001 fed2 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80026b8:	2304      	movs	r3, #4
 80026ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c4:	2303      	movs	r3, #3
 80026c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80026c8:	230c      	movs	r3, #12
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	4619      	mov	r1, r3
 80026d2:	4806      	ldr	r0, [pc, #24]	; (80026ec <HAL_SD_MspInit+0xc0>)
 80026d4:	f001 fec2 	bl	800445c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80026d8:	bf00      	nop
 80026da:	3728      	adds	r7, #40	; 0x28
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40012c00 	.word	0x40012c00
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40020800 	.word	0x40020800
 80026ec:	40020c00 	.word	0x40020c00

080026f0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002710:	d127      	bne.n	8002762 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002712:	4b16      	ldr	r3, [pc, #88]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a15      	ldr	r2, [pc, #84]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a0f      	ldr	r2, [pc, #60]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 8002730:	f043 0308 	orr.w	r3, r3, #8
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <HAL_SPDIFRX_MspInit+0x7c>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002752:	2308      	movs	r3, #8
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4619      	mov	r1, r3
 800275c:	4804      	ldr	r0, [pc, #16]	; (8002770 <HAL_SPDIFRX_MspInit+0x80>)
 800275e:	f001 fe7d 	bl	800445c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002762:	bf00      	nop
 8002764:	3728      	adds	r7, #40	; 0x28
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	40020c00 	.word	0x40020c00

08002774 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a25      	ldr	r2, [pc, #148]	; (8002828 <HAL_SPI_MspInit+0xb4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d144      	bne.n	8002820 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002796:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_SPI_MspInit+0xb8>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a24      	ldr	r2, [pc, #144]	; (800282c <HAL_SPI_MspInit+0xb8>)
 800279c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b22      	ldr	r3, [pc, #136]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80027ae:	4b1f      	ldr	r3, [pc, #124]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a1e      	ldr	r2, [pc, #120]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b1c      	ldr	r3, [pc, #112]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a18      	ldr	r2, [pc, #96]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b16      	ldr	r3, [pc, #88]	; (800282c <HAL_SPI_MspInit+0xb8>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80027de:	2302      	movs	r3, #2
 80027e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ea:	2300      	movs	r3, #0
 80027ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027ee:	2305      	movs	r3, #5
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	480d      	ldr	r0, [pc, #52]	; (8002830 <HAL_SPI_MspInit+0xbc>)
 80027fa:	f001 fe2f 	bl	800445c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80027fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280c:	2300      	movs	r3, #0
 800280e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002810:	2305      	movs	r3, #5
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	4619      	mov	r1, r3
 800281a:	4806      	ldr	r0, [pc, #24]	; (8002834 <HAL_SPI_MspInit+0xc0>)
 800281c:	f001 fe1e 	bl	800445c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002820:	bf00      	nop
 8002822:	3728      	adds	r7, #40	; 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40003800 	.word	0x40003800
 800282c:	40023800 	.word	0x40023800
 8002830:	40022000 	.word	0x40022000
 8002834:	40020400 	.word	0x40020400

08002838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d10c      	bne.n	8002864 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800284a:	4b24      	ldr	r3, [pc, #144]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a23      	ldr	r2, [pc, #140]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002862:	e034      	b.n	80028ce <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1d      	ldr	r2, [pc, #116]	; (80028e0 <HAL_TIM_Base_MspInit+0xa8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d10c      	bne.n	8002888 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800286e:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4a1a      	ldr	r2, [pc, #104]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	6413      	str	r3, [r2, #64]	; 0x40
 800287a:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
}
 8002886:	e022      	b.n	80028ce <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <HAL_TIM_Base_MspInit+0xac>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10c      	bne.n	80028ac <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a11      	ldr	r2, [pc, #68]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 8002898:	f043 0308 	orr.w	r3, r3, #8
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
}
 80028aa:	e010      	b.n	80028ce <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <HAL_TIM_Base_MspInit+0xb0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d10b      	bne.n	80028ce <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	4a08      	ldr	r2, [pc, #32]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	6453      	str	r3, [r2, #68]	; 0x44
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_TIM_Base_MspInit+0xa4>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40000400 	.word	0x40000400
 80028e4:	40000c00 	.word	0x40000c00
 80028e8:	40010400 	.word	0x40010400

080028ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <HAL_TIM_PWM_MspInit+0x38>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d10b      	bne.n	8002916 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_TIM_PWM_MspInit+0x3c>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_TIM_PWM_MspInit+0x3c>)
 8002904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <HAL_TIM_PWM_MspInit+0x3c>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40001800 	.word	0x40001800
 8002928:	40023800 	.word	0x40023800

0800292c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08c      	sub	sp, #48	; 0x30
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 031c 	add.w	r3, r7, #28
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294c:	d11d      	bne.n	800298a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	4b43      	ldr	r3, [pc, #268]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a42      	ldr	r2, [pc, #264]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b40      	ldr	r3, [pc, #256]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800296a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296c:	2302      	movs	r3, #2
 800296e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002974:	2300      	movs	r3, #0
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002978:	2301      	movs	r3, #1
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800297c:	f107 031c 	add.w	r3, r7, #28
 8002980:	4619      	mov	r1, r3
 8002982:	4837      	ldr	r0, [pc, #220]	; (8002a60 <HAL_TIM_MspPostInit+0x134>)
 8002984:	f001 fd6a 	bl	800445c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002988:	e064      	b.n	8002a54 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a35      	ldr	r2, [pc, #212]	; (8002a64 <HAL_TIM_MspPostInit+0x138>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d11c      	bne.n	80029ce <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002994:	4b31      	ldr	r3, [pc, #196]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	4a30      	ldr	r2, [pc, #192]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 800299a:	f043 0302 	orr.w	r3, r3, #2
 800299e:	6313      	str	r3, [r2, #48]	; 0x30
 80029a0:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80029ac:	2310      	movs	r3, #16
 80029ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029bc:	2302      	movs	r3, #2
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80029c0:	f107 031c 	add.w	r3, r7, #28
 80029c4:	4619      	mov	r1, r3
 80029c6:	4828      	ldr	r0, [pc, #160]	; (8002a68 <HAL_TIM_MspPostInit+0x13c>)
 80029c8:	f001 fd48 	bl	800445c <HAL_GPIO_Init>
}
 80029cc:	e042      	b.n	8002a54 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM5)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a26      	ldr	r2, [pc, #152]	; (8002a6c <HAL_TIM_MspPostInit+0x140>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d11c      	bne.n	8002a12 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80029d8:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	4a1f      	ldr	r2, [pc, #124]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 80029de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e2:	6313      	str	r3, [r2, #48]	; 0x30
 80029e4:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80029f0:	2301      	movs	r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a00:	2302      	movs	r3, #2
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4819      	ldr	r0, [pc, #100]	; (8002a70 <HAL_TIM_MspPostInit+0x144>)
 8002a0c:	f001 fd26 	bl	800445c <HAL_GPIO_Init>
}
 8002a10:	e020      	b.n	8002a54 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <HAL_TIM_MspPostInit+0x148>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d11b      	bne.n	8002a54 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a26:	6313      	str	r3, [r2, #48]	; 0x30
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_TIM_MspPostInit+0x130>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002a34:	2340      	movs	r3, #64	; 0x40
 8002a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002a44:	2309      	movs	r3, #9
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	480a      	ldr	r0, [pc, #40]	; (8002a78 <HAL_TIM_MspPostInit+0x14c>)
 8002a50:	f001 fd04 	bl	800445c <HAL_GPIO_Init>
}
 8002a54:	bf00      	nop
 8002a56:	3730      	adds	r7, #48	; 0x30
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40000400 	.word	0x40000400
 8002a68:	40020400 	.word	0x40020400
 8002a6c:	40000c00 	.word	0x40000c00
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40001800 	.word	0x40001800
 8002a78:	40021c00 	.word	0x40021c00

08002a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	; 0x28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1b      	ldr	r2, [pc, #108]	; (8002b08 <HAL_UART_MspInit+0x8c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d12f      	bne.n	8002afe <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	4a1a      	ldr	r2, [pc, #104]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002aa4:	f043 0320 	orr.w	r3, r3, #32
 8002aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aaa:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002abc:	f043 0304 	orr.w	r3, r3, #4
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_UART_MspInit+0x90>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002ace:	23c0      	movs	r3, #192	; 0xc0
 8002ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ade:	2308      	movs	r3, #8
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4809      	ldr	r0, [pc, #36]	; (8002b10 <HAL_UART_MspInit+0x94>)
 8002aea:	f001 fcb7 	bl	800445c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	2047      	movs	r0, #71	; 0x47
 8002af4:	f000 fe62 	bl	80037bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002af8:	2047      	movs	r0, #71	; 0x47
 8002afa:	f000 fe7b 	bl	80037f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002afe:	bf00      	nop
 8002b00:	3728      	adds	r7, #40	; 0x28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40011400 	.word	0x40011400
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40020800 	.word	0x40020800

08002b14 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002b28:	4b3a      	ldr	r3, [pc, #232]	; (8002c14 <HAL_FMC_MspInit+0x100>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d16d      	bne.n	8002c0c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002b30:	4b38      	ldr	r3, [pc, #224]	; (8002c14 <HAL_FMC_MspInit+0x100>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b36:	4b38      	ldr	r3, [pc, #224]	; (8002c18 <HAL_FMC_MspInit+0x104>)
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	4a37      	ldr	r2, [pc, #220]	; (8002c18 <HAL_FMC_MspInit+0x104>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6393      	str	r3, [r2, #56]	; 0x38
 8002b42:	4b35      	ldr	r3, [pc, #212]	; (8002c18 <HAL_FMC_MspInit+0x104>)
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002b4e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002b52:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b60:	230c      	movs	r3, #12
 8002b62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	4619      	mov	r1, r3
 8002b68:	482c      	ldr	r0, [pc, #176]	; (8002c1c <HAL_FMC_MspInit+0x108>)
 8002b6a:	f001 fc77 	bl	800445c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002b6e:	f248 1333 	movw	r3, #33075	; 0x8133
 8002b72:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	2302      	movs	r3, #2
 8002b76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b80:	230c      	movs	r3, #12
 8002b82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	4619      	mov	r1, r3
 8002b88:	4825      	ldr	r0, [pc, #148]	; (8002c20 <HAL_FMC_MspInit+0x10c>)
 8002b8a:	f001 fc67 	bl	800445c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002b8e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002b92:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ba0:	230c      	movs	r3, #12
 8002ba2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	481e      	ldr	r0, [pc, #120]	; (8002c24 <HAL_FMC_MspInit+0x110>)
 8002baa:	f001 fc57 	bl	800445c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002bae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002bb2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bc0:	230c      	movs	r3, #12
 8002bc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4817      	ldr	r0, [pc, #92]	; (8002c28 <HAL_FMC_MspInit+0x114>)
 8002bca:	f001 fc47 	bl	800445c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002bce:	2328      	movs	r3, #40	; 0x28
 8002bd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bde:	230c      	movs	r3, #12
 8002be0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002be2:	1d3b      	adds	r3, r7, #4
 8002be4:	4619      	mov	r1, r3
 8002be6:	4811      	ldr	r0, [pc, #68]	; (8002c2c <HAL_FMC_MspInit+0x118>)
 8002be8:	f001 fc38 	bl	800445c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002bec:	2308      	movs	r3, #8
 8002bee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bfc:	230c      	movs	r3, #12
 8002bfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	4619      	mov	r1, r3
 8002c04:	480a      	ldr	r0, [pc, #40]	; (8002c30 <HAL_FMC_MspInit+0x11c>)
 8002c06:	f001 fc29 	bl	800445c <HAL_GPIO_Init>
 8002c0a:	e000      	b.n	8002c0e <HAL_FMC_MspInit+0xfa>
    return;
 8002c0c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20000388 	.word	0x20000388
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40021800 	.word	0x40021800
 8002c24:	40020c00 	.word	0x40020c00
 8002c28:	40021400 	.word	0x40021400
 8002c2c:	40021c00 	.word	0x40021c00
 8002c30:	40020800 	.word	0x40020800

08002c34 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002c3c:	f7ff ff6a 	bl	8002b14 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a2b      	ldr	r2, [pc, #172]	; (8002d04 <HAL_SAI_MspInit+0xbc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d124      	bne.n	8002ca4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002c5a:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <HAL_SAI_MspInit+0xc0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10b      	bne.n	8002c7a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002c62:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <HAL_SAI_MspInit+0xc4>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	4a29      	ldr	r2, [pc, #164]	; (8002d0c <HAL_SAI_MspInit+0xc4>)
 8002c68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6e:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <HAL_SAI_MspInit+0xc4>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002c7a:	4b23      	ldr	r3, [pc, #140]	; (8002d08 <HAL_SAI_MspInit+0xc0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	4a21      	ldr	r2, [pc, #132]	; (8002d08 <HAL_SAI_MspInit+0xc0>)
 8002c82:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002c84:	23f0      	movs	r3, #240	; 0xf0
 8002c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c90:	2300      	movs	r3, #0
 8002c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002c94:	230a      	movs	r3, #10
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	481c      	ldr	r0, [pc, #112]	; (8002d10 <HAL_SAI_MspInit+0xc8>)
 8002ca0:	f001 fbdc 	bl	800445c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1a      	ldr	r2, [pc, #104]	; (8002d14 <HAL_SAI_MspInit+0xcc>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d125      	bne.n	8002cfa <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <HAL_SAI_MspInit+0xc0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10b      	bne.n	8002cce <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <HAL_SAI_MspInit+0xc4>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <HAL_SAI_MspInit+0xc4>)
 8002cbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_SAI_MspInit+0xc4>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <HAL_SAI_MspInit+0xc0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	4a0c      	ldr	r2, [pc, #48]	; (8002d08 <HAL_SAI_MspInit+0xc0>)
 8002cd6:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002cea:	230a      	movs	r3, #10
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002cee:	f107 0314 	add.w	r3, r7, #20
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4808      	ldr	r0, [pc, #32]	; (8002d18 <HAL_SAI_MspInit+0xd0>)
 8002cf6:	f001 fbb1 	bl	800445c <HAL_GPIO_Init>

    }
}
 8002cfa:	bf00      	nop
 8002cfc:	3728      	adds	r7, #40	; 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40015c04 	.word	0x40015c04
 8002d08:	2000038c 	.word	0x2000038c
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40022000 	.word	0x40022000
 8002d14:	40015c24 	.word	0x40015c24
 8002d18:	40021800 	.word	0x40021800

08002d1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08c      	sub	sp, #48	; 0x30
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	2036      	movs	r0, #54	; 0x36
 8002d32:	f000 fd43 	bl	80037bc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d36:	2036      	movs	r0, #54	; 0x36
 8002d38:	f000 fd5c 	bl	80037f4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d3c:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <HAL_InitTick+0xa0>)
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <HAL_InitTick+0xa0>)
 8002d42:	f043 0310 	orr.w	r3, r3, #16
 8002d46:	6413      	str	r3, [r2, #64]	; 0x40
 8002d48:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <HAL_InitTick+0xa0>)
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d54:	f107 0210 	add.w	r2, r7, #16
 8002d58:	f107 0314 	add.w	r3, r7, #20
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f003 fd42 	bl	80067e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002d64:	f003 fd18 	bl	8006798 <HAL_RCC_GetPCLK1Freq>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <HAL_InitTick+0xa4>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	0c9b      	lsrs	r3, r3, #18
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_InitTick+0xa8>)
 8002d7e:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <HAL_InitTick+0xac>)
 8002d80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_InitTick+0xa8>)
 8002d84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d88:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d8a:	4a0e      	ldr	r2, [pc, #56]	; (8002dc4 <HAL_InitTick+0xa8>)
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <HAL_InitTick+0xa8>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_InitTick+0xa8>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002d9c:	4809      	ldr	r0, [pc, #36]	; (8002dc4 <HAL_InitTick+0xa8>)
 8002d9e:	f006 f9bb 	bl	8009118 <HAL_TIM_Base_Init>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d104      	bne.n	8002db2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002da8:	4806      	ldr	r0, [pc, #24]	; (8002dc4 <HAL_InitTick+0xa8>)
 8002daa:	f006 f9e1 	bl	8009170 <HAL_TIM_Base_Start_IT>
 8002dae:	4603      	mov	r3, r0
 8002db0:	e000      	b.n	8002db4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3730      	adds	r7, #48	; 0x30
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	431bde83 	.word	0x431bde83
 8002dc4:	2000bdb4 	.word	0x2000bdb4
 8002dc8:	40001000 	.word	0x40001000

08002dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dde:	e7fe      	b.n	8002dde <HardFault_Handler+0x4>

08002de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <MemManage_Handler+0x4>

08002de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dea:	e7fe      	b.n	8002dea <BusFault_Handler+0x4>

08002dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002df0:	e7fe      	b.n	8002df0 <UsageFault_Handler+0x4>

08002df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e04:	4802      	ldr	r0, [pc, #8]	; (8002e10 <TIM6_DAC_IRQHandler+0x10>)
 8002e06:	f006 fa08 	bl	800921a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	2000bdb4 	.word	0x2000bdb4

08002e14 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002e18:	4802      	ldr	r0, [pc, #8]	; (8002e24 <USART6_IRQHandler+0x10>)
 8002e1a:	f007 f9a9 	bl	800a170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	2000bb94 	.word	0x2000bb94

08002e28 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002e2c:	4802      	ldr	r0, [pc, #8]	; (8002e38 <LTDC_IRQHandler+0x10>)
 8002e2e:	f002 fc7b 	bl	8005728 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	2000b77c 	.word	0x2000b77c

08002e3c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <DMA2D_IRQHandler+0x10>)
 8002e42:	f001 f8cc 	bl	8003fde <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	2000b888 	.word	0x2000b888

08002e50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
	return 1;
 8002e54:	2301      	movs	r3, #1
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <_kill>:

int _kill(int pid, int sig)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e6a:	f025 fb3d 	bl	80284e8 <__errno>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	2316      	movs	r3, #22
 8002e72:	6013      	str	r3, [r2, #0]
	return -1;
 8002e74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <_exit>:

void _exit (int status)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e88:	f04f 31ff 	mov.w	r1, #4294967295
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ffe7 	bl	8002e60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e92:	e7fe      	b.n	8002e92 <_exit+0x12>

08002e94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	e00a      	b.n	8002ebc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ea6:	f3af 8000 	nop.w
 8002eaa:	4601      	mov	r1, r0
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	60ba      	str	r2, [r7, #8]
 8002eb2:	b2ca      	uxtb	r2, r1
 8002eb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	dbf0      	blt.n	8002ea6 <_read+0x12>
	}

return len;
 8002ec4:	687b      	ldr	r3, [r7, #4]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	e009      	b.n	8002ef4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	60ba      	str	r2, [r7, #8]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	dbf1      	blt.n	8002ee0 <_write+0x12>
	}
	return len;
 8002efc:	687b      	ldr	r3, [r7, #4]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <_close>:

int _close(int file)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
	return -1;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f2e:	605a      	str	r2, [r3, #4]
	return 0;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_isatty>:

int _isatty(int file)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
	return 1;
 8002f46:	2301      	movs	r3, #1
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
	return 0;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f78:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <_sbrk+0x5c>)
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <_sbrk+0x60>)
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f84:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <_sbrk+0x64>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d102      	bne.n	8002f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <_sbrk+0x64>)
 8002f8e:	4a12      	ldr	r2, [pc, #72]	; (8002fd8 <_sbrk+0x68>)
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <_sbrk+0x64>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d207      	bcs.n	8002fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fa0:	f025 faa2 	bl	80284e8 <__errno>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	230c      	movs	r3, #12
 8002fa8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295
 8002fae:	e009      	b.n	8002fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <_sbrk+0x64>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fb6:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <_sbrk+0x64>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	4a05      	ldr	r2, [pc, #20]	; (8002fd4 <_sbrk+0x64>)
 8002fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20050000 	.word	0x20050000
 8002fd0:	00000400 	.word	0x00000400
 8002fd4:	20000390 	.word	0x20000390
 8002fd8:	2000c268 	.word	0x2000c268

08002fdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <SystemInit+0x28>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	4a07      	ldr	r2, [pc, #28]	; (8003004 <SystemInit+0x28>)
 8002fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <SystemInit+0x28>)
 8002ff2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ff6:	609a      	str	r2, [r3, #8]
#endif
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003040 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800300c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800300e:	e003      	b.n	8003018 <LoopCopyDataInit>

08003010 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003012:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003014:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003016:	3104      	adds	r1, #4

08003018 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003018:	480b      	ldr	r0, [pc, #44]	; (8003048 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800301a:	4b0c      	ldr	r3, [pc, #48]	; (800304c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800301c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800301e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003020:	d3f6      	bcc.n	8003010 <CopyDataInit>
  ldr  r2, =_sbss
 8003022:	4a0b      	ldr	r2, [pc, #44]	; (8003050 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003024:	e002      	b.n	800302c <LoopFillZerobss>

08003026 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003026:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003028:	f842 3b04 	str.w	r3, [r2], #4

0800302c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800302c:	4b09      	ldr	r3, [pc, #36]	; (8003054 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800302e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003030:	d3f9      	bcc.n	8003026 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003032:	f7ff ffd3 	bl	8002fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003036:	f025 fa6f 	bl	8028518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800303a:	f7fd fcc9 	bl	80009d0 <main>
  bx  lr    
 800303e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003040:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003044:	080c26a4 	.word	0x080c26a4
  ldr  r0, =_sdata
 8003048:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800304c:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8003050:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 8003054:	2000c268 	.word	0x2000c268

08003058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003058:	e7fe      	b.n	8003058 <ADC_IRQHandler>

0800305a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800305e:	2003      	movs	r0, #3
 8003060:	f000 fba1 	bl	80037a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003064:	2000      	movs	r0, #0
 8003066:	f7ff fe59 	bl	8002d1c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800306a:	f7fe ff19 	bl	8001ea0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_IncTick+0x20>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_IncTick+0x24>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4413      	add	r3, r2
 8003084:	4a04      	ldr	r2, [pc, #16]	; (8003098 <HAL_IncTick+0x24>)
 8003086:	6013      	str	r3, [r2, #0]
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000034 	.word	0x20000034
 8003098:	2000bdf4 	.word	0x2000bdf4

0800309c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return uwTick;
 80030a0:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <HAL_GetTick+0x14>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	2000bdf4 	.word	0x2000bdf4

080030b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030bc:	f7ff ffee 	bl	800309c <HAL_GetTick>
 80030c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d005      	beq.n	80030da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ce:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_Delay+0x40>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	461a      	mov	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4413      	add	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030da:	bf00      	nop
 80030dc:	f7ff ffde 	bl	800309c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d8f7      	bhi.n	80030dc <HAL_Delay+0x28>
  {
  }
}
 80030ec:	bf00      	nop
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20000034 	.word	0x20000034

080030f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e031      	b.n	8003172 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fe feea 	bl	8001ef0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b00      	cmp	r3, #0
 8003134:	d116      	bne.n	8003164 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <HAL_ADC_Init+0x84>)
 800313c:	4013      	ands	r3, r2
 800313e:	f043 0202 	orr.w	r2, r3, #2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f964 	bl	8003414 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f023 0303 	bic.w	r3, r3, #3
 800315a:	f043 0201 	orr.w	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
 8003162:	e001      	b.n	8003168 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003170:	7bfb      	ldrb	r3, [r7, #15]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	ffffeefd 	.word	0xffffeefd

08003180 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_ADC_ConfigChannel+0x1c>
 8003198:	2302      	movs	r3, #2
 800319a:	e12a      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x272>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b09      	cmp	r3, #9
 80031aa:	d93a      	bls.n	8003222 <HAL_ADC_ConfigChannel+0xa2>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031b4:	d035      	beq.n	8003222 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68d9      	ldr	r1, [r3, #12]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	3b1e      	subs	r3, #30
 80031cc:	2207      	movs	r2, #7
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	400a      	ands	r2, r1
 80031da:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a87      	ldr	r2, [pc, #540]	; (8003400 <HAL_ADC_ConfigChannel+0x280>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d10a      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68d9      	ldr	r1, [r3, #12]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	061a      	lsls	r2, r3, #24
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031fa:	e035      	b.n	8003268 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68d9      	ldr	r1, [r3, #12]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	4618      	mov	r0, r3
 800320e:	4603      	mov	r3, r0
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4403      	add	r3, r0
 8003214:	3b1e      	subs	r3, #30
 8003216:	409a      	lsls	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003220:	e022      	b.n	8003268 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6919      	ldr	r1, [r3, #16]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	b29b      	uxth	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	4613      	mov	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4413      	add	r3, r2
 8003236:	2207      	movs	r2, #7
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43da      	mvns	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	400a      	ands	r2, r1
 8003244:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6919      	ldr	r1, [r3, #16]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	4618      	mov	r0, r3
 8003258:	4603      	mov	r3, r0
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4403      	add	r3, r0
 800325e:	409a      	lsls	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b06      	cmp	r3, #6
 800326e:	d824      	bhi.n	80032ba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	3b05      	subs	r3, #5
 8003282:	221f      	movs	r2, #31
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43da      	mvns	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	400a      	ands	r2, r1
 8003290:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	b29b      	uxth	r3, r3
 800329e:	4618      	mov	r0, r3
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	3b05      	subs	r3, #5
 80032ac:	fa00 f203 	lsl.w	r2, r0, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	635a      	str	r2, [r3, #52]	; 0x34
 80032b8:	e04c      	b.n	8003354 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b0c      	cmp	r3, #12
 80032c0:	d824      	bhi.n	800330c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	3b23      	subs	r3, #35	; 0x23
 80032d4:	221f      	movs	r2, #31
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43da      	mvns	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	400a      	ands	r2, r1
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	4618      	mov	r0, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	3b23      	subs	r3, #35	; 0x23
 80032fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
 800330a:	e023      	b.n	8003354 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	3b41      	subs	r3, #65	; 0x41
 800331e:	221f      	movs	r2, #31
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43da      	mvns	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	400a      	ands	r2, r1
 800332c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	b29b      	uxth	r3, r3
 800333a:	4618      	mov	r0, r3
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	3b41      	subs	r3, #65	; 0x41
 8003348:	fa00 f203 	lsl.w	r2, r0, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a2a      	ldr	r2, [pc, #168]	; (8003404 <HAL_ADC_ConfigChannel+0x284>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10a      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x1f4>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003366:	d105      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003368:	4b27      	ldr	r3, [pc, #156]	; (8003408 <HAL_ADC_ConfigChannel+0x288>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4a26      	ldr	r2, [pc, #152]	; (8003408 <HAL_ADC_ConfigChannel+0x288>)
 800336e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003372:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a22      	ldr	r2, [pc, #136]	; (8003404 <HAL_ADC_ConfigChannel+0x284>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d109      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x212>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b12      	cmp	r3, #18
 8003384:	d105      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <HAL_ADC_ConfigChannel+0x288>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4a1f      	ldr	r2, [pc, #124]	; (8003408 <HAL_ADC_ConfigChannel+0x288>)
 800338c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003390:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <HAL_ADC_ConfigChannel+0x284>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d125      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x268>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a17      	ldr	r2, [pc, #92]	; (8003400 <HAL_ADC_ConfigChannel+0x280>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d003      	beq.n	80033ae <HAL_ADC_ConfigChannel+0x22e>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b11      	cmp	r3, #17
 80033ac:	d11c      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80033ae:	4b16      	ldr	r3, [pc, #88]	; (8003408 <HAL_ADC_ConfigChannel+0x288>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4a15      	ldr	r2, [pc, #84]	; (8003408 <HAL_ADC_ConfigChannel+0x288>)
 80033b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033b8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a10      	ldr	r2, [pc, #64]	; (8003400 <HAL_ADC_ConfigChannel+0x280>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d111      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80033c4:	4b11      	ldr	r3, [pc, #68]	; (800340c <HAL_ADC_ConfigChannel+0x28c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a11      	ldr	r2, [pc, #68]	; (8003410 <HAL_ADC_ConfigChannel+0x290>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	0c9a      	lsrs	r2, r3, #18
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80033da:	e002      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3b01      	subs	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f9      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	10000012 	.word	0x10000012
 8003404:	40012000 	.word	0x40012000
 8003408:	40012300 	.word	0x40012300
 800340c:	2000002c 	.word	0x2000002c
 8003410:	431bde83 	.word	0x431bde83

08003414 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800341c:	4b78      	ldr	r3, [pc, #480]	; (8003600 <ADC_Init+0x1ec>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4a77      	ldr	r2, [pc, #476]	; (8003600 <ADC_Init+0x1ec>)
 8003422:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003426:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003428:	4b75      	ldr	r3, [pc, #468]	; (8003600 <ADC_Init+0x1ec>)
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4973      	ldr	r1, [pc, #460]	; (8003600 <ADC_Init+0x1ec>)
 8003432:	4313      	orrs	r3, r2
 8003434:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6859      	ldr	r1, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	021a      	lsls	r2, r3, #8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003468:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800348a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6899      	ldr	r1, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	4a58      	ldr	r2, [pc, #352]	; (8003604 <ADC_Init+0x1f0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d022      	beq.n	80034ee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6899      	ldr	r1, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6899      	ldr	r1, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	e00f      	b.n	800350e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800350c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0202 	bic.w	r2, r2, #2
 800351c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	005a      	lsls	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01b      	beq.n	8003574 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800354a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800355a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6859      	ldr	r1, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	3b01      	subs	r3, #1
 8003568:	035a      	lsls	r2, r3, #13
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	e007      	b.n	8003584 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003582:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	3b01      	subs	r3, #1
 80035a0:	051a      	lsls	r2, r3, #20
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6899      	ldr	r1, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035c6:	025a      	lsls	r2, r3, #9
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6899      	ldr	r1, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	029a      	lsls	r2, r3, #10
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	609a      	str	r2, [r3, #8]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	40012300 	.word	0x40012300
 8003604:	0f000001 	.word	0x0f000001

08003608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <__NVIC_SetPriorityGrouping+0x40>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003624:	4013      	ands	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <__NVIC_SetPriorityGrouping+0x44>)
 8003632:	4313      	orrs	r3, r2
 8003634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003636:	4a04      	ldr	r2, [pc, #16]	; (8003648 <__NVIC_SetPriorityGrouping+0x40>)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	60d3      	str	r3, [r2, #12]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000ed00 	.word	0xe000ed00
 800364c:	05fa0000 	.word	0x05fa0000

08003650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <__NVIC_GetPriorityGrouping+0x18>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	0a1b      	lsrs	r3, r3, #8
 800365a:	f003 0307 	and.w	r3, r3, #7
}
 800365e:	4618      	mov	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367a:	2b00      	cmp	r3, #0
 800367c:	db0b      	blt.n	8003696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	f003 021f 	and.w	r2, r3, #31
 8003684:	4907      	ldr	r1, [pc, #28]	; (80036a4 <__NVIC_EnableIRQ+0x38>)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	2001      	movs	r0, #1
 800368e:	fa00 f202 	lsl.w	r2, r0, r2
 8003692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	e000e100 	.word	0xe000e100

080036a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	db10      	blt.n	80036dc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	f003 021f 	and.w	r2, r3, #31
 80036c0:	4909      	ldr	r1, [pc, #36]	; (80036e8 <__NVIC_DisableIRQ+0x40>)
 80036c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2001      	movs	r0, #1
 80036ca:	fa00 f202 	lsl.w	r2, r0, r2
 80036ce:	3320      	adds	r3, #32
 80036d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80036d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80036d8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	e000e100 	.word	0xe000e100

080036ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	6039      	str	r1, [r7, #0]
 80036f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	db0a      	blt.n	8003716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	b2da      	uxtb	r2, r3
 8003704:	490c      	ldr	r1, [pc, #48]	; (8003738 <__NVIC_SetPriority+0x4c>)
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	0112      	lsls	r2, r2, #4
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	440b      	add	r3, r1
 8003710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003714:	e00a      	b.n	800372c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4908      	ldr	r1, [pc, #32]	; (800373c <__NVIC_SetPriority+0x50>)
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	3b04      	subs	r3, #4
 8003724:	0112      	lsls	r2, r2, #4
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	440b      	add	r3, r1
 800372a:	761a      	strb	r2, [r3, #24]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000e100 	.word	0xe000e100
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003740:	b480      	push	{r7}
 8003742:	b089      	sub	sp, #36	; 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f1c3 0307 	rsb	r3, r3, #7
 800375a:	2b04      	cmp	r3, #4
 800375c:	bf28      	it	cs
 800375e:	2304      	movcs	r3, #4
 8003760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3304      	adds	r3, #4
 8003766:	2b06      	cmp	r3, #6
 8003768:	d902      	bls.n	8003770 <NVIC_EncodePriority+0x30>
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3b03      	subs	r3, #3
 800376e:	e000      	b.n	8003772 <NVIC_EncodePriority+0x32>
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003774:	f04f 32ff 	mov.w	r2, #4294967295
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43da      	mvns	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	401a      	ands	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003788:	f04f 31ff 	mov.w	r1, #4294967295
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	43d9      	mvns	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003798:	4313      	orrs	r3, r2
         );
}
 800379a:	4618      	mov	r0, r3
 800379c:	3724      	adds	r7, #36	; 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ff2a 	bl	8003608 <__NVIC_SetPriorityGrouping>
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037ce:	f7ff ff3f 	bl	8003650 <__NVIC_GetPriorityGrouping>
 80037d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	6978      	ldr	r0, [r7, #20]
 80037da:	f7ff ffb1 	bl	8003740 <NVIC_EncodePriority>
 80037de:	4602      	mov	r2, r0
 80037e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ff80 	bl	80036ec <__NVIC_SetPriority>
}
 80037ec:	bf00      	nop
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff ff32 	bl	800366c <__NVIC_EnableIRQ>
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff ff42 	bl	80036a8 <__NVIC_DisableIRQ>
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e054      	b.n	80038e8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	7f5b      	ldrb	r3, [r3, #29]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d105      	bne.n	8003854 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fe fba8 	bl	8001fa4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	791b      	ldrb	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10c      	bne.n	800387c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a22      	ldr	r2, [pc, #136]	; (80038f0 <HAL_CRC_Init+0xc4>)
 8003868:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0218 	bic.w	r2, r2, #24
 8003878:	609a      	str	r2, [r3, #8]
 800387a:	e00c      	b.n	8003896 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6899      	ldr	r1, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	461a      	mov	r2, r3
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f834 	bl	80038f4 <HAL_CRCEx_Polynomial_Set>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e028      	b.n	80038e8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	795b      	ldrb	r3, [r3, #5]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d105      	bne.n	80038aa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f04f 32ff 	mov.w	r2, #4294967295
 80038a6:	611a      	str	r2, [r3, #16]
 80038a8:	e004      	b.n	80038b4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6912      	ldr	r2, [r2, #16]
 80038b2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699a      	ldr	r2, [r3, #24]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	04c11db7 	.word	0x04c11db7

080038f4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003904:	231f      	movs	r3, #31
 8003906:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003908:	bf00      	nop
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1e5a      	subs	r2, r3, #1
 800390e:	613a      	str	r2, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d009      	beq.n	8003928 <HAL_CRCEx_Polynomial_Set+0x34>
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b18      	cmp	r3, #24
 800392c:	d846      	bhi.n	80039bc <HAL_CRCEx_Polynomial_Set+0xc8>
 800392e:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003934:	080039c3 	.word	0x080039c3
 8003938:	080039bd 	.word	0x080039bd
 800393c:	080039bd 	.word	0x080039bd
 8003940:	080039bd 	.word	0x080039bd
 8003944:	080039bd 	.word	0x080039bd
 8003948:	080039bd 	.word	0x080039bd
 800394c:	080039bd 	.word	0x080039bd
 8003950:	080039bd 	.word	0x080039bd
 8003954:	080039b1 	.word	0x080039b1
 8003958:	080039bd 	.word	0x080039bd
 800395c:	080039bd 	.word	0x080039bd
 8003960:	080039bd 	.word	0x080039bd
 8003964:	080039bd 	.word	0x080039bd
 8003968:	080039bd 	.word	0x080039bd
 800396c:	080039bd 	.word	0x080039bd
 8003970:	080039bd 	.word	0x080039bd
 8003974:	080039a5 	.word	0x080039a5
 8003978:	080039bd 	.word	0x080039bd
 800397c:	080039bd 	.word	0x080039bd
 8003980:	080039bd 	.word	0x080039bd
 8003984:	080039bd 	.word	0x080039bd
 8003988:	080039bd 	.word	0x080039bd
 800398c:	080039bd 	.word	0x080039bd
 8003990:	080039bd 	.word	0x080039bd
 8003994:	08003999 	.word	0x08003999
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	2b06      	cmp	r3, #6
 800399c:	d913      	bls.n	80039c6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80039a2:	e010      	b.n	80039c6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	2b07      	cmp	r3, #7
 80039a8:	d90f      	bls.n	80039ca <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80039ae:	e00c      	b.n	80039ca <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	2b0f      	cmp	r3, #15
 80039b4:	d90b      	bls.n	80039ce <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80039ba:	e008      	b.n	80039ce <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	75fb      	strb	r3, [r7, #23]
      break;
 80039c0:	e006      	b.n	80039d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80039c2:	bf00      	nop
 80039c4:	e004      	b.n	80039d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80039c6:	bf00      	nop
 80039c8:	e002      	b.n	80039d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80039ca:	bf00      	nop
 80039cc:	e000      	b.n	80039d0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80039ce:	bf00      	nop
  }
  if (status == HAL_OK)
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10d      	bne.n	80039f2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f023 0118 	bic.w	r1, r3, #24
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80039f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e069      	b.n	8003ae6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d102      	bne.n	8003a24 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fe fae0 	bl	8001fe4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6819      	ldr	r1, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	4b2a      	ldr	r3, [pc, #168]	; (8003af0 <HAL_DCMI_Init+0xf0>)
 8003a46:	400b      	ands	r3, r1
 8003a48:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6819      	ldr	r1, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003a5e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003a6a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003a76:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003a82:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003a8e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d112      	bne.n	8003ac6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	7f1b      	ldrb	r3, [r3, #28]
 8003aa4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	7f5b      	ldrb	r3, [r3, #29]
 8003aaa:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003aac:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	7f9b      	ldrb	r3, [r3, #30]
 8003ab2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003ab4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	7fdb      	ldrb	r3, [r3, #31]
 8003abc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003ac2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003ac4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 021e 	orr.w	r2, r2, #30
 8003ad4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	ffe0f007 	.word	0xffe0f007

08003af4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_DMA_Start_IT+0x26>
 8003b16:	2302      	movs	r3, #2
 8003b18:	e048      	b.n	8003bac <HAL_DMA_Start_IT+0xb8>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d137      	bne.n	8003b9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2202      	movs	r2, #2
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f864 	bl	8003c10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	223f      	movs	r2, #63	; 0x3f
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0216 	orr.w	r2, r2, #22
 8003b62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b72:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0208 	orr.w	r2, r2, #8
 8003b8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	e005      	b.n	8003baa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2280      	movs	r2, #128	; 0x80
 8003bcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e00c      	b.n	8003bec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2205      	movs	r2, #5
 8003bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b40      	cmp	r3, #64	; 0x40
 8003c3c:	d108      	bne.n	8003c50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c4e:	e007      	b.n	8003c60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	60da      	str	r2, [r3, #12]
}
 8003c60:	bf00      	nop
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e039      	b.n	8003cf2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fe fa64 	bl	8002160 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbc:	f023 0107 	bic.w	r1, r3, #7
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <HAL_DMA2D_Init+0x90>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68d1      	ldr	r1, [r2, #12]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	ffffc000 	.word	0xffffc000

08003d00 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e05f      	b.n	8003dd2 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8003d12:	4b32      	ldr	r3, [pc, #200]	; (8003ddc <HAL_DMA2D_DeInit+0xdc>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d02e      	beq.n	8003d7c <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d107      	bne.n	8003d3c <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f8c1 	bl	8003eb4 <HAL_DMA2D_Abort>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d021      	beq.n	8003d7c <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e04a      	b.n	8003dd2 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	d108      	bne.n	8003d5c <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f8f7 	bl	8003f40 <HAL_DMA2D_CLUTLoading_Abort>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d011      	beq.n	8003d7c <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e03a      	b.n	8003dd2 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d108      	bne.n	8003d7c <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f8e7 	bl	8003f40 <HAL_DMA2D_CLUTLoading_Abort>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e02a      	b.n	8003dd2 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	223f      	movs	r2, #63	; 0x3f
 8003d8a:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2200      	movs	r2, #0
 8003d92:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2200      	movs	r2, #0
 8003da2:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2200      	movs	r2, #0
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2200      	movs	r2, #0
 8003db2:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7fe f9f9 	bl	80021ac <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800

08003de0 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_DMA2D_Start_IT+0x1c>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e020      	b.n	8003e3e <HAL_DMA2D_Start_IT+0x5e>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 fa84 	bl	8004324 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b086      	sub	sp, #24
 8003e4a:	af02      	add	r7, sp, #8
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_DMA2D_BlendingStart_IT+0x1c>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e024      	b.n	8003eac <HAL_DMA2D_BlendingStart_IT+0x66>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fa4d 	bl	8004324 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8003e98:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 0205 	bic.w	r2, r3, #5
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0204 	orr.w	r2, r2, #4
 8003ece:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ed0:	f7ff f8e4 	bl	800309c <HAL_GetTick>
 8003ed4:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003ed6:	e017      	b.n	8003f08 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003ed8:	f7ff f8e0 	bl	800309c <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ee6:	d90f      	bls.n	8003f08 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e017      	b.n	8003f38 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e0      	bne.n	8003ed8 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8003f24:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3324      	adds	r3, #36	; 0x24
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0204 	orr.w	r2, r2, #4
 8003f60:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d103      	bne.n	8003f70 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	331c      	adds	r3, #28
 8003f6e:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8003f70:	f7ff f894 	bl	800309c <HAL_GetTick>
 8003f74:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003f76:	e017      	b.n	8003fa8 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003f78:	f7ff f890 	bl	800309c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f86:	d90f      	bls.n	8003fa8 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	f043 0220 	orr.w	r2, r3, #32
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2203      	movs	r2, #3
 8003f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e016      	b.n	8003fd6 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0320 	and.w	r3, r3, #32
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e1      	bne.n	8003f78 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d026      	beq.n	800404e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d021      	beq.n	800404e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004018:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401e:	f043 0201 	orr.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2201      	movs	r2, #1
 800402c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2204      	movs	r2, #4
 8004032:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b00      	cmp	r3, #0
 8004056:	d026      	beq.n	80040a6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d021      	beq.n	80040a6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004070:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2220      	movs	r2, #32
 8004078:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407e:	f043 0202 	orr.w	r2, r3, #2
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2204      	movs	r2, #4
 800408a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d026      	beq.n	80040fe <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d021      	beq.n	80040fe <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040c8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2208      	movs	r2, #8
 80040d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	f043 0204 	orr.w	r2, r3, #4
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2204      	movs	r2, #4
 80040e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d013      	beq.n	8004130 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00e      	beq.n	8004130 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004120:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2204      	movs	r2, #4
 8004128:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f853 	bl	80041d6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d024      	beq.n	8004184 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01f      	beq.n	8004184 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004152:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2202      	movs	r2, #2
 800415a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01f      	beq.n	80041ce <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01a      	beq.n	80041ce <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041a6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2210      	movs	r2, #16
 80041ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f80e 	bl	80041ea <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80041ce:	bf00      	nop
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_DMA2D_ConfigLayer+0x20>
 800421c:	2302      	movs	r3, #2
 800421e:	e079      	b.n	8004314 <HAL_DMA2D_ConfigLayer+0x114>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	3318      	adds	r3, #24
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	041b      	lsls	r3, r3, #16
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800424a:	4b35      	ldr	r3, [pc, #212]	; (8004320 <HAL_DMA2D_ConfigLayer+0x120>)
 800424c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b0a      	cmp	r3, #10
 8004254:	d003      	beq.n	800425e <HAL_DMA2D_ConfigLayer+0x5e>
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b09      	cmp	r3, #9
 800425c:	d107      	bne.n	800426e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	e005      	b.n	800427a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	061b      	lsls	r3, r3, #24
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d120      	bne.n	80042c2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	43db      	mvns	r3, r3
 800428a:	ea02 0103 	and.w	r1, r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	430a      	orrs	r2, r1
 8004296:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b0a      	cmp	r3, #10
 80042a8:	d003      	beq.n	80042b2 <HAL_DMA2D_ConfigLayer+0xb2>
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b09      	cmp	r3, #9
 80042b0:	d127      	bne.n	8004302 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80042be:	629a      	str	r2, [r3, #40]	; 0x28
 80042c0:	e01f      	b.n	8004302 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	43db      	mvns	r3, r3
 80042cc:	ea02 0103 	and.w	r1, r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b0a      	cmp	r3, #10
 80042ea:	d003      	beq.n	80042f4 <HAL_DMA2D_ConfigLayer+0xf4>
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b09      	cmp	r3, #9
 80042f2:	d106      	bne.n	8004302 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004300:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	ff03000f 	.word	0xff03000f

08004324 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004324:	b480      	push	{r7}
 8004326:	b08b      	sub	sp, #44	; 0x2c
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004338:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	041a      	lsls	r2, r3, #16
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	431a      	orrs	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800435c:	d174      	bne.n	8004448 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004364:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800436c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004374:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d108      	bne.n	8004396 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	431a      	orrs	r2, r3
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	4313      	orrs	r3, r2
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
 8004394:	e053      	b.n	800443e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d106      	bne.n	80043ac <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
 80043aa:	e048      	b.n	800443e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d111      	bne.n	80043d8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	0cdb      	lsrs	r3, r3, #19
 80043b8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	0a9b      	lsrs	r3, r3, #10
 80043be:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	08db      	lsrs	r3, r3, #3
 80043c4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	02db      	lsls	r3, r3, #11
 80043ce:	4313      	orrs	r3, r2
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
 80043d6:	e032      	b.n	800443e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d117      	bne.n	8004410 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	0fdb      	lsrs	r3, r3, #31
 80043e4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	0cdb      	lsrs	r3, r3, #19
 80043ea:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	0adb      	lsrs	r3, r3, #11
 80043f0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	08db      	lsrs	r3, r3, #3
 80043f6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	029b      	lsls	r3, r3, #10
 8004400:	431a      	orrs	r2, r3
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	03db      	lsls	r3, r3, #15
 8004406:	4313      	orrs	r3, r2
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
 800440e:	e016      	b.n	800443e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	0f1b      	lsrs	r3, r3, #28
 8004414:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	0d1b      	lsrs	r3, r3, #20
 800441a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	0b1b      	lsrs	r3, r3, #12
 8004420:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	091b      	lsrs	r3, r3, #4
 8004426:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	011a      	lsls	r2, r3, #4
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	431a      	orrs	r2, r3
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	031b      	lsls	r3, r3, #12
 8004436:	4313      	orrs	r3, r2
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004444:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004446:	e003      	b.n	8004450 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	60da      	str	r2, [r3, #12]
}
 8004450:	bf00      	nop
 8004452:	372c      	adds	r7, #44	; 0x2c
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800445c:	b480      	push	{r7}
 800445e:	b089      	sub	sp, #36	; 0x24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004466:	2300      	movs	r3, #0
 8004468:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800446e:	2300      	movs	r3, #0
 8004470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	e175      	b.n	8004768 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800447c:	2201      	movs	r2, #1
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4013      	ands	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	429a      	cmp	r2, r3
 8004496:	f040 8164 	bne.w	8004762 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d00b      	beq.n	80044ba <HAL_GPIO_Init+0x5e>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d007      	beq.n	80044ba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044ae:	2b11      	cmp	r3, #17
 80044b0:	d003      	beq.n	80044ba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b12      	cmp	r3, #18
 80044b8:	d130      	bne.n	800451c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	2203      	movs	r2, #3
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	43db      	mvns	r3, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4013      	ands	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044f0:	2201      	movs	r2, #1
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	43db      	mvns	r3, r3
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4013      	ands	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 0201 	and.w	r2, r3, #1
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	2203      	movs	r2, #3
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	43db      	mvns	r3, r3
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	4013      	ands	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4313      	orrs	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b02      	cmp	r3, #2
 8004552:	d003      	beq.n	800455c <HAL_GPIO_Init+0x100>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b12      	cmp	r3, #18
 800455a:	d123      	bne.n	80045a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	08da      	lsrs	r2, r3, #3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3208      	adds	r2, #8
 8004564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	220f      	movs	r2, #15
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4013      	ands	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4313      	orrs	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	08da      	lsrs	r2, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3208      	adds	r2, #8
 800459e:	69b9      	ldr	r1, [r7, #24]
 80045a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	2203      	movs	r2, #3
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	43db      	mvns	r3, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	4013      	ands	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 0203 	and.w	r2, r3, #3
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 80be 	beq.w	8004762 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045e6:	4b65      	ldr	r3, [pc, #404]	; (800477c <HAL_GPIO_Init+0x320>)
 80045e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ea:	4a64      	ldr	r2, [pc, #400]	; (800477c <HAL_GPIO_Init+0x320>)
 80045ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045f0:	6453      	str	r3, [r2, #68]	; 0x44
 80045f2:	4b62      	ldr	r3, [pc, #392]	; (800477c <HAL_GPIO_Init+0x320>)
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80045fe:	4a60      	ldr	r2, [pc, #384]	; (8004780 <HAL_GPIO_Init+0x324>)
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	089b      	lsrs	r3, r3, #2
 8004604:	3302      	adds	r3, #2
 8004606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800460a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	220f      	movs	r2, #15
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43db      	mvns	r3, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4013      	ands	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a57      	ldr	r2, [pc, #348]	; (8004784 <HAL_GPIO_Init+0x328>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d037      	beq.n	800469a <HAL_GPIO_Init+0x23e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a56      	ldr	r2, [pc, #344]	; (8004788 <HAL_GPIO_Init+0x32c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d031      	beq.n	8004696 <HAL_GPIO_Init+0x23a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a55      	ldr	r2, [pc, #340]	; (800478c <HAL_GPIO_Init+0x330>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d02b      	beq.n	8004692 <HAL_GPIO_Init+0x236>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a54      	ldr	r2, [pc, #336]	; (8004790 <HAL_GPIO_Init+0x334>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d025      	beq.n	800468e <HAL_GPIO_Init+0x232>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a53      	ldr	r2, [pc, #332]	; (8004794 <HAL_GPIO_Init+0x338>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d01f      	beq.n	800468a <HAL_GPIO_Init+0x22e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a52      	ldr	r2, [pc, #328]	; (8004798 <HAL_GPIO_Init+0x33c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d019      	beq.n	8004686 <HAL_GPIO_Init+0x22a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a51      	ldr	r2, [pc, #324]	; (800479c <HAL_GPIO_Init+0x340>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d013      	beq.n	8004682 <HAL_GPIO_Init+0x226>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a50      	ldr	r2, [pc, #320]	; (80047a0 <HAL_GPIO_Init+0x344>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00d      	beq.n	800467e <HAL_GPIO_Init+0x222>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a4f      	ldr	r2, [pc, #316]	; (80047a4 <HAL_GPIO_Init+0x348>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d007      	beq.n	800467a <HAL_GPIO_Init+0x21e>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a4e      	ldr	r2, [pc, #312]	; (80047a8 <HAL_GPIO_Init+0x34c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d101      	bne.n	8004676 <HAL_GPIO_Init+0x21a>
 8004672:	2309      	movs	r3, #9
 8004674:	e012      	b.n	800469c <HAL_GPIO_Init+0x240>
 8004676:	230a      	movs	r3, #10
 8004678:	e010      	b.n	800469c <HAL_GPIO_Init+0x240>
 800467a:	2308      	movs	r3, #8
 800467c:	e00e      	b.n	800469c <HAL_GPIO_Init+0x240>
 800467e:	2307      	movs	r3, #7
 8004680:	e00c      	b.n	800469c <HAL_GPIO_Init+0x240>
 8004682:	2306      	movs	r3, #6
 8004684:	e00a      	b.n	800469c <HAL_GPIO_Init+0x240>
 8004686:	2305      	movs	r3, #5
 8004688:	e008      	b.n	800469c <HAL_GPIO_Init+0x240>
 800468a:	2304      	movs	r3, #4
 800468c:	e006      	b.n	800469c <HAL_GPIO_Init+0x240>
 800468e:	2303      	movs	r3, #3
 8004690:	e004      	b.n	800469c <HAL_GPIO_Init+0x240>
 8004692:	2302      	movs	r3, #2
 8004694:	e002      	b.n	800469c <HAL_GPIO_Init+0x240>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <HAL_GPIO_Init+0x240>
 800469a:	2300      	movs	r3, #0
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	f002 0203 	and.w	r2, r2, #3
 80046a2:	0092      	lsls	r2, r2, #2
 80046a4:	4093      	lsls	r3, r2
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80046ac:	4934      	ldr	r1, [pc, #208]	; (8004780 <HAL_GPIO_Init+0x324>)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	089b      	lsrs	r3, r3, #2
 80046b2:	3302      	adds	r3, #2
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046ba:	4b3c      	ldr	r3, [pc, #240]	; (80047ac <HAL_GPIO_Init+0x350>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	43db      	mvns	r3, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4013      	ands	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046de:	4a33      	ldr	r2, [pc, #204]	; (80047ac <HAL_GPIO_Init+0x350>)
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046e4:	4b31      	ldr	r3, [pc, #196]	; (80047ac <HAL_GPIO_Init+0x350>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004708:	4a28      	ldr	r2, [pc, #160]	; (80047ac <HAL_GPIO_Init+0x350>)
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800470e:	4b27      	ldr	r3, [pc, #156]	; (80047ac <HAL_GPIO_Init+0x350>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004732:	4a1e      	ldr	r2, [pc, #120]	; (80047ac <HAL_GPIO_Init+0x350>)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004738:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <HAL_GPIO_Init+0x350>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800475c:	4a13      	ldr	r2, [pc, #76]	; (80047ac <HAL_GPIO_Init+0x350>)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	3301      	adds	r3, #1
 8004766:	61fb      	str	r3, [r7, #28]
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	2b0f      	cmp	r3, #15
 800476c:	f67f ae86 	bls.w	800447c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004770:	bf00      	nop
 8004772:	3724      	adds	r7, #36	; 0x24
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	40023800 	.word	0x40023800
 8004780:	40013800 	.word	0x40013800
 8004784:	40020000 	.word	0x40020000
 8004788:	40020400 	.word	0x40020400
 800478c:	40020800 	.word	0x40020800
 8004790:	40020c00 	.word	0x40020c00
 8004794:	40021000 	.word	0x40021000
 8004798:	40021400 	.word	0x40021400
 800479c:	40021800 	.word	0x40021800
 80047a0:	40021c00 	.word	0x40021c00
 80047a4:	40022000 	.word	0x40022000
 80047a8:	40022400 	.word	0x40022400
 80047ac:	40013c00 	.word	0x40013c00

080047b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80047ba:	2300      	movs	r3, #0
 80047bc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	e0d9      	b.n	8004980 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80047cc:	2201      	movs	r2, #1
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4013      	ands	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	f040 80c9 	bne.w	800497a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80047e8:	4a6a      	ldr	r2, [pc, #424]	; (8004994 <HAL_GPIO_DeInit+0x1e4>)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	089b      	lsrs	r3, r3, #2
 80047ee:	3302      	adds	r3, #2
 80047f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	220f      	movs	r2, #15
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	4013      	ands	r3, r2
 8004808:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a62      	ldr	r2, [pc, #392]	; (8004998 <HAL_GPIO_DeInit+0x1e8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d037      	beq.n	8004882 <HAL_GPIO_DeInit+0xd2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a61      	ldr	r2, [pc, #388]	; (800499c <HAL_GPIO_DeInit+0x1ec>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d031      	beq.n	800487e <HAL_GPIO_DeInit+0xce>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a60      	ldr	r2, [pc, #384]	; (80049a0 <HAL_GPIO_DeInit+0x1f0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d02b      	beq.n	800487a <HAL_GPIO_DeInit+0xca>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a5f      	ldr	r2, [pc, #380]	; (80049a4 <HAL_GPIO_DeInit+0x1f4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d025      	beq.n	8004876 <HAL_GPIO_DeInit+0xc6>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a5e      	ldr	r2, [pc, #376]	; (80049a8 <HAL_GPIO_DeInit+0x1f8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01f      	beq.n	8004872 <HAL_GPIO_DeInit+0xc2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a5d      	ldr	r2, [pc, #372]	; (80049ac <HAL_GPIO_DeInit+0x1fc>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d019      	beq.n	800486e <HAL_GPIO_DeInit+0xbe>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a5c      	ldr	r2, [pc, #368]	; (80049b0 <HAL_GPIO_DeInit+0x200>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <HAL_GPIO_DeInit+0xba>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a5b      	ldr	r2, [pc, #364]	; (80049b4 <HAL_GPIO_DeInit+0x204>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00d      	beq.n	8004866 <HAL_GPIO_DeInit+0xb6>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a5a      	ldr	r2, [pc, #360]	; (80049b8 <HAL_GPIO_DeInit+0x208>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d007      	beq.n	8004862 <HAL_GPIO_DeInit+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a59      	ldr	r2, [pc, #356]	; (80049bc <HAL_GPIO_DeInit+0x20c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d101      	bne.n	800485e <HAL_GPIO_DeInit+0xae>
 800485a:	2309      	movs	r3, #9
 800485c:	e012      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 800485e:	230a      	movs	r3, #10
 8004860:	e010      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 8004862:	2308      	movs	r3, #8
 8004864:	e00e      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 8004866:	2307      	movs	r3, #7
 8004868:	e00c      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 800486a:	2306      	movs	r3, #6
 800486c:	e00a      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 800486e:	2305      	movs	r3, #5
 8004870:	e008      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 8004872:	2304      	movs	r3, #4
 8004874:	e006      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 8004876:	2303      	movs	r3, #3
 8004878:	e004      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 800487a:	2302      	movs	r3, #2
 800487c:	e002      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <HAL_GPIO_DeInit+0xd4>
 8004882:	2300      	movs	r3, #0
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	f002 0203 	and.w	r2, r2, #3
 800488a:	0092      	lsls	r2, r2, #2
 800488c:	4093      	lsls	r3, r2
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	429a      	cmp	r2, r3
 8004892:	d132      	bne.n	80048fa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004894:	4b4a      	ldr	r3, [pc, #296]	; (80049c0 <HAL_GPIO_DeInit+0x210>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	43db      	mvns	r3, r3
 800489c:	4948      	ldr	r1, [pc, #288]	; (80049c0 <HAL_GPIO_DeInit+0x210>)
 800489e:	4013      	ands	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80048a2:	4b47      	ldr	r3, [pc, #284]	; (80049c0 <HAL_GPIO_DeInit+0x210>)
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	4945      	ldr	r1, [pc, #276]	; (80049c0 <HAL_GPIO_DeInit+0x210>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80048b0:	4b43      	ldr	r3, [pc, #268]	; (80049c0 <HAL_GPIO_DeInit+0x210>)
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	4941      	ldr	r1, [pc, #260]	; (80049c0 <HAL_GPIO_DeInit+0x210>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80048be:	4b40      	ldr	r3, [pc, #256]	; (80049c0 <HAL_GPIO_DeInit+0x210>)
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	43db      	mvns	r3, r3
 80048c6:	493e      	ldr	r1, [pc, #248]	; (80049c0 <HAL_GPIO_DeInit+0x210>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	220f      	movs	r2, #15
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80048dc:	4a2d      	ldr	r2, [pc, #180]	; (8004994 <HAL_GPIO_DeInit+0x1e4>)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	089b      	lsrs	r3, r3, #2
 80048e2:	3302      	adds	r3, #2
 80048e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	43da      	mvns	r2, r3
 80048ec:	4829      	ldr	r0, [pc, #164]	; (8004994 <HAL_GPIO_DeInit+0x1e4>)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	089b      	lsrs	r3, r3, #2
 80048f2:	400a      	ands	r2, r1
 80048f4:	3302      	adds	r3, #2
 80048f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	2103      	movs	r1, #3
 8004904:	fa01 f303 	lsl.w	r3, r1, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	401a      	ands	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	08da      	lsrs	r2, r3, #3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3208      	adds	r2, #8
 8004918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	220f      	movs	r2, #15
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	08d2      	lsrs	r2, r2, #3
 8004930:	4019      	ands	r1, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3208      	adds	r2, #8
 8004936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	2103      	movs	r1, #3
 8004944:	fa01 f303 	lsl.w	r3, r1, r3
 8004948:	43db      	mvns	r3, r3
 800494a:	401a      	ands	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	2101      	movs	r1, #1
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	fa01 f303 	lsl.w	r3, r1, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	401a      	ands	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	2103      	movs	r1, #3
 800496e:	fa01 f303 	lsl.w	r3, r1, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	401a      	ands	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	3301      	adds	r3, #1
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2b0f      	cmp	r3, #15
 8004984:	f67f af22 	bls.w	80047cc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004988:	bf00      	nop
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	40013800 	.word	0x40013800
 8004998:	40020000 	.word	0x40020000
 800499c:	40020400 	.word	0x40020400
 80049a0:	40020800 	.word	0x40020800
 80049a4:	40020c00 	.word	0x40020c00
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40021400 	.word	0x40021400
 80049b0:	40021800 	.word	0x40021800
 80049b4:	40021c00 	.word	0x40021c00
 80049b8:	40022000 	.word	0x40022000
 80049bc:	40022400 	.word	0x40022400
 80049c0:	40013c00 	.word	0x40013c00

080049c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	887b      	ldrh	r3, [r7, #2]
 80049d6:	4013      	ands	r3, r2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
 80049e0:	e001      	b.n	80049e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049e2:	2300      	movs	r3, #0
 80049e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	807b      	strh	r3, [r7, #2]
 8004a00:	4613      	mov	r3, r2
 8004a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a04:	787b      	ldrb	r3, [r7, #1]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a0a:	887a      	ldrh	r2, [r7, #2]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004a10:	e003      	b.n	8004a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a12:	887b      	ldrh	r3, [r7, #2]
 8004a14:	041a      	lsls	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	619a      	str	r2, [r3, #24]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
	...

08004a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e07f      	b.n	8004b3a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fd fbc6 	bl	80021e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2224      	movs	r2, #36	; 0x24
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0201 	bic.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d107      	bne.n	8004aa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a9e:	609a      	str	r2, [r3, #8]
 8004aa0:	e006      	b.n	8004ab0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004aae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d104      	bne.n	8004ac2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ac0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6859      	ldr	r1, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <HAL_I2C_Init+0x11c>)
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ae0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	ea42 0103 	orr.w	r1, r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	021a      	lsls	r2, r3, #8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69d9      	ldr	r1, [r3, #28]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1a      	ldr	r2, [r3, #32]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	02008000 	.word	0x02008000

08004b48 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e021      	b.n	8004b9e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2224      	movs	r2, #36	; 0x24
 8004b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0201 	bic.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fd fbac 	bl	80022d0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af02      	add	r7, sp, #8
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	4608      	mov	r0, r1
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	817b      	strh	r3, [r7, #10]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	813b      	strh	r3, [r7, #8]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	f040 80f9 	bne.w	8004dc2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_I2C_Mem_Write+0x34>
 8004bd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d105      	bne.n	8004be8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004be2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0ed      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_I2C_Mem_Write+0x4e>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e0e6      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bfe:	f7fe fa4d 	bl	800309c <HAL_GetTick>
 8004c02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	2319      	movs	r3, #25
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fad1 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0d1      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2221      	movs	r2, #33	; 0x21
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2240      	movs	r2, #64	; 0x40
 8004c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a3a      	ldr	r2, [r7, #32]
 8004c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c48:	88f8      	ldrh	r0, [r7, #6]
 8004c4a:	893a      	ldrh	r2, [r7, #8]
 8004c4c:	8979      	ldrh	r1, [r7, #10]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	4603      	mov	r3, r0
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f9e1 	bl	8005020 <I2C_RequestMemoryWrite>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0a9      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2bff      	cmp	r3, #255	; 0xff
 8004c78:	d90e      	bls.n	8004c98 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	22ff      	movs	r2, #255	; 0xff
 8004c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	8979      	ldrh	r1, [r7, #10]
 8004c88:	2300      	movs	r3, #0
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fbb3 	bl	80053fc <I2C_TransferConfig>
 8004c96:	e00f      	b.n	8004cb8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	8979      	ldrh	r1, [r7, #10]
 8004caa:	2300      	movs	r3, #0
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 fba2 	bl	80053fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 fabb 	bl	8005238 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e07b      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	781a      	ldrb	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d034      	beq.n	8004d70 <HAL_I2C_Mem_Write+0x1c8>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d130      	bne.n	8004d70 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	2200      	movs	r2, #0
 8004d16:	2180      	movs	r1, #128	; 0x80
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fa4d 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e04d      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2bff      	cmp	r3, #255	; 0xff
 8004d30:	d90e      	bls.n	8004d50 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	22ff      	movs	r2, #255	; 0xff
 8004d36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	8979      	ldrh	r1, [r7, #10]
 8004d40:	2300      	movs	r3, #0
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 fb57 	bl	80053fc <I2C_TransferConfig>
 8004d4e:	e00f      	b.n	8004d70 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	8979      	ldrh	r1, [r7, #10]
 8004d62:	2300      	movs	r3, #0
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 fb46 	bl	80053fc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d19e      	bne.n	8004cb8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 fa9a 	bl	80052b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e01a      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2220      	movs	r2, #32
 8004d94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <HAL_I2C_Mem_Write+0x224>)
 8004da2:	400b      	ands	r3, r1
 8004da4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e000      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004dc2:	2302      	movs	r3, #2
  }
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	fe00e800 	.word	0xfe00e800

08004dd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	4608      	mov	r0, r1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4603      	mov	r3, r0
 8004de0:	817b      	strh	r3, [r7, #10]
 8004de2:	460b      	mov	r3, r1
 8004de4:	813b      	strh	r3, [r7, #8]
 8004de6:	4613      	mov	r3, r2
 8004de8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	f040 80fd 	bne.w	8004ff2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <HAL_I2C_Mem_Read+0x34>
 8004dfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d105      	bne.n	8004e10 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0f1      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_I2C_Mem_Read+0x4e>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e0ea      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e26:	f7fe f939 	bl	800309c <HAL_GetTick>
 8004e2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	2319      	movs	r3, #25
 8004e32:	2201      	movs	r2, #1
 8004e34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f9bd 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e0d5      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2222      	movs	r2, #34	; 0x22
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2240      	movs	r2, #64	; 0x40
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a3a      	ldr	r2, [r7, #32]
 8004e62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e70:	88f8      	ldrh	r0, [r7, #6]
 8004e72:	893a      	ldrh	r2, [r7, #8]
 8004e74:	8979      	ldrh	r1, [r7, #10]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	4603      	mov	r3, r0
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f921 	bl	80050c8 <I2C_RequestMemoryRead>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d005      	beq.n	8004e98 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0ad      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2bff      	cmp	r3, #255	; 0xff
 8004ea0:	d90e      	bls.n	8004ec0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	22ff      	movs	r2, #255	; 0xff
 8004ea6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	8979      	ldrh	r1, [r7, #10]
 8004eb0:	4b52      	ldr	r3, [pc, #328]	; (8004ffc <HAL_I2C_Mem_Read+0x22c>)
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fa9f 	bl	80053fc <I2C_TransferConfig>
 8004ebe:	e00f      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	8979      	ldrh	r1, [r7, #10]
 8004ed2:	4b4a      	ldr	r3, [pc, #296]	; (8004ffc <HAL_I2C_Mem_Read+0x22c>)
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fa8e 	bl	80053fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2104      	movs	r1, #4
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 f964 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e07c      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d034      	beq.n	8004fa0 <HAL_I2C_Mem_Read+0x1d0>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d130      	bne.n	8004fa0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	2200      	movs	r2, #0
 8004f46:	2180      	movs	r1, #128	; 0x80
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f935 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e04d      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2bff      	cmp	r3, #255	; 0xff
 8004f60:	d90e      	bls.n	8004f80 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	22ff      	movs	r2, #255	; 0xff
 8004f66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	8979      	ldrh	r1, [r7, #10]
 8004f70:	2300      	movs	r3, #0
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fa3f 	bl	80053fc <I2C_TransferConfig>
 8004f7e:	e00f      	b.n	8004fa0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	8979      	ldrh	r1, [r7, #10]
 8004f92:	2300      	movs	r3, #0
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 fa2e 	bl	80053fc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d19a      	bne.n	8004ee0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f982 	bl	80052b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e01a      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6859      	ldr	r1, [r3, #4]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <HAL_I2C_Mem_Read+0x230>)
 8004fd2:	400b      	ands	r3, r1
 8004fd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e000      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ff2:	2302      	movs	r3, #2
  }
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	80002400 	.word	0x80002400
 8005000:	fe00e800 	.word	0xfe00e800

08005004 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005012:	b2db      	uxtb	r3, r3
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	4608      	mov	r0, r1
 800502a:	4611      	mov	r1, r2
 800502c:	461a      	mov	r2, r3
 800502e:	4603      	mov	r3, r0
 8005030:	817b      	strh	r3, [r7, #10]
 8005032:	460b      	mov	r3, r1
 8005034:	813b      	strh	r3, [r7, #8]
 8005036:	4613      	mov	r3, r2
 8005038:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	b2da      	uxtb	r2, r3
 800503e:	8979      	ldrh	r1, [r7, #10]
 8005040:	4b20      	ldr	r3, [pc, #128]	; (80050c4 <I2C_RequestMemoryWrite+0xa4>)
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f9d7 	bl	80053fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	69b9      	ldr	r1, [r7, #24]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f8f0 	bl	8005238 <I2C_WaitOnTXISFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e02c      	b.n	80050bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d105      	bne.n	8005074 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005068:	893b      	ldrh	r3, [r7, #8]
 800506a:	b2da      	uxtb	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	629a      	str	r2, [r3, #40]	; 0x28
 8005072:	e015      	b.n	80050a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005074:	893b      	ldrh	r3, [r7, #8]
 8005076:	0a1b      	lsrs	r3, r3, #8
 8005078:	b29b      	uxth	r3, r3
 800507a:	b2da      	uxtb	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	69b9      	ldr	r1, [r7, #24]
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f8d6 	bl	8005238 <I2C_WaitOnTXISFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e012      	b.n	80050bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005096:	893b      	ldrh	r3, [r7, #8]
 8005098:	b2da      	uxtb	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2200      	movs	r2, #0
 80050a8:	2180      	movs	r1, #128	; 0x80
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 f884 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	80002000 	.word	0x80002000

080050c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	4608      	mov	r0, r1
 80050d2:	4611      	mov	r1, r2
 80050d4:	461a      	mov	r2, r3
 80050d6:	4603      	mov	r3, r0
 80050d8:	817b      	strh	r3, [r7, #10]
 80050da:	460b      	mov	r3, r1
 80050dc:	813b      	strh	r3, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80050e2:	88fb      	ldrh	r3, [r7, #6]
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	8979      	ldrh	r1, [r7, #10]
 80050e8:	4b20      	ldr	r3, [pc, #128]	; (800516c <I2C_RequestMemoryRead+0xa4>)
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	2300      	movs	r3, #0
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f984 	bl	80053fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	69b9      	ldr	r1, [r7, #24]
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f89d 	bl	8005238 <I2C_WaitOnTXISFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e02c      	b.n	8005162 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d105      	bne.n	800511a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800510e:	893b      	ldrh	r3, [r7, #8]
 8005110:	b2da      	uxtb	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	629a      	str	r2, [r3, #40]	; 0x28
 8005118:	e015      	b.n	8005146 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800511a:	893b      	ldrh	r3, [r7, #8]
 800511c:	0a1b      	lsrs	r3, r3, #8
 800511e:	b29b      	uxth	r3, r3
 8005120:	b2da      	uxtb	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	69b9      	ldr	r1, [r7, #24]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f883 	bl	8005238 <I2C_WaitOnTXISFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e012      	b.n	8005162 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800513c:	893b      	ldrh	r3, [r7, #8]
 800513e:	b2da      	uxtb	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2200      	movs	r2, #0
 800514e:	2140      	movs	r1, #64	; 0x40
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f831 	bl	80051b8 <I2C_WaitOnFlagUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	80002000 	.word	0x80002000

08005170 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d103      	bne.n	800518e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2200      	movs	r2, #0
 800518c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b01      	cmp	r3, #1
 800519a:	d007      	beq.n	80051ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	619a      	str	r2, [r3, #24]
  }
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4613      	mov	r3, r2
 80051c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c8:	e022      	b.n	8005210 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d01e      	beq.n	8005210 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d2:	f7fd ff63 	bl	800309c <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d302      	bcc.n	80051e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d113      	bne.n	8005210 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ec:	f043 0220 	orr.w	r2, r3, #32
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e00f      	b.n	8005230 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699a      	ldr	r2, [r3, #24]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	4013      	ands	r3, r2
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	429a      	cmp	r2, r3
 800521e:	bf0c      	ite	eq
 8005220:	2301      	moveq	r3, #1
 8005222:	2300      	movne	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	429a      	cmp	r2, r3
 800522c:	d0cd      	beq.n	80051ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005244:	e02c      	b.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f870 	bl	8005330 <I2C_IsAcknowledgeFailed>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e02a      	b.n	80052b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d01e      	beq.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005262:	f7fd ff1b 	bl	800309c <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	d302      	bcc.n	8005278 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d113      	bne.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527c:	f043 0220 	orr.w	r2, r3, #32
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e007      	b.n	80052b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d1cb      	bne.n	8005246 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052c4:	e028      	b.n	8005318 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f830 	bl	8005330 <I2C_IsAcknowledgeFailed>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e026      	b.n	8005328 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052da:	f7fd fedf 	bl	800309c <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d302      	bcc.n	80052f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d113      	bne.n	8005318 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f4:	f043 0220 	orr.w	r2, r3, #32
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e007      	b.n	8005328 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b20      	cmp	r3, #32
 8005324:	d1cf      	bne.n	80052c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	2b10      	cmp	r3, #16
 8005348:	d151      	bne.n	80053ee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800534a:	e022      	b.n	8005392 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005352:	d01e      	beq.n	8005392 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005354:	f7fd fea2 	bl	800309c <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	429a      	cmp	r2, r3
 8005362:	d302      	bcc.n	800536a <I2C_IsAcknowledgeFailed+0x3a>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d113      	bne.n	8005392 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536e:	f043 0220 	orr.w	r2, r3, #32
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2220      	movs	r2, #32
 800537a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e02e      	b.n	80053f0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b20      	cmp	r3, #32
 800539e:	d1d5      	bne.n	800534c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2210      	movs	r2, #16
 80053a6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2220      	movs	r2, #32
 80053ae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f7ff fedd 	bl	8005170 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6859      	ldr	r1, [r3, #4]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <I2C_IsAcknowledgeFailed+0xc8>)
 80053c2:	400b      	ands	r3, r1
 80053c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	f043 0204 	orr.w	r2, r3, #4
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e000      	b.n	80053f0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	fe00e800 	.word	0xfe00e800

080053fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	607b      	str	r3, [r7, #4]
 8005406:	460b      	mov	r3, r1
 8005408:	817b      	strh	r3, [r7, #10]
 800540a:	4613      	mov	r3, r2
 800540c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	0d5b      	lsrs	r3, r3, #21
 8005418:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800541c:	4b0d      	ldr	r3, [pc, #52]	; (8005454 <I2C_TransferConfig+0x58>)
 800541e:	430b      	orrs	r3, r1
 8005420:	43db      	mvns	r3, r3
 8005422:	ea02 0103 	and.w	r1, r2, r3
 8005426:	897b      	ldrh	r3, [r7, #10]
 8005428:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800542c:	7a7b      	ldrb	r3, [r7, #9]
 800542e:	041b      	lsls	r3, r3, #16
 8005430:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	431a      	orrs	r2, r3
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	431a      	orrs	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	03ff63ff 	.word	0x03ff63ff

08005458 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b20      	cmp	r3, #32
 800546c:	d138      	bne.n	80054e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005478:	2302      	movs	r3, #2
 800547a:	e032      	b.n	80054e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2224      	movs	r2, #36	; 0x24
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0201 	bic.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6819      	ldr	r1, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0201 	orr.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	e000      	b.n	80054e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054e0:	2302      	movs	r3, #2
  }
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b085      	sub	sp, #20
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b20      	cmp	r3, #32
 8005502:	d139      	bne.n	8005578 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800550e:	2302      	movs	r3, #2
 8005510:	e033      	b.n	800557a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2224      	movs	r2, #36	; 0x24
 800551e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0201 	bic.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005540:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	021b      	lsls	r3, r3, #8
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	4313      	orrs	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	e000      	b.n	800557a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005578:	2302      	movs	r3, #2
  }
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
	...

08005588 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e0bf      	b.n	800571a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fc feca 	bl	8002348 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80055ca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6999      	ldr	r1, [r3, #24]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80055e0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6899      	ldr	r1, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b4a      	ldr	r3, [pc, #296]	; (8005724 <HAL_LTDC_Init+0x19c>)
 80055fc:	400b      	ands	r3, r1
 80055fe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	041b      	lsls	r3, r3, #16
 8005606:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6899      	ldr	r1, [r3, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68d9      	ldr	r1, [r3, #12]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	4b3e      	ldr	r3, [pc, #248]	; (8005724 <HAL_LTDC_Init+0x19c>)
 800562a:	400b      	ands	r3, r1
 800562c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	041b      	lsls	r3, r3, #16
 8005634:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68d9      	ldr	r1, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1a      	ldr	r2, [r3, #32]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6919      	ldr	r1, [r3, #16]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	4b33      	ldr	r3, [pc, #204]	; (8005724 <HAL_LTDC_Init+0x19c>)
 8005658:	400b      	ands	r3, r1
 800565a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	041b      	lsls	r3, r3, #16
 8005662:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6919      	ldr	r1, [r3, #16]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6959      	ldr	r1, [r3, #20]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	4b27      	ldr	r3, [pc, #156]	; (8005724 <HAL_LTDC_Init+0x19c>)
 8005686:	400b      	ands	r3, r1
 8005688:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	041b      	lsls	r3, r3, #16
 8005690:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6959      	ldr	r1, [r3, #20]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056ae:	021b      	lsls	r3, r3, #8
 80056b0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80056b8:	041b      	lsls	r3, r3, #16
 80056ba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80056ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0206 	orr.w	r2, r2, #6
 80056f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	f000f800 	.word	0xf000f800

08005728 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	d023      	beq.n	8005792 <HAL_LTDC_IRQHandler+0x6a>
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d01e      	beq.n	8005792 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0204 	bic.w	r2, r2, #4
 8005762:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2204      	movs	r2, #4
 800576a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005772:	f043 0201 	orr.w	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2204      	movs	r2, #4
 8005780:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f86f 	bl	8005870 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d023      	beq.n	80057e4 <HAL_LTDC_IRQHandler+0xbc>
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d01e      	beq.n	80057e4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0202 	bic.w	r2, r2, #2
 80057b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2202      	movs	r2, #2
 80057bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057c4:	f043 0202 	orr.w	r2, r3, #2
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2204      	movs	r2, #4
 80057d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f846 	bl	8005870 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d01b      	beq.n	8005826 <HAL_LTDC_IRQHandler+0xfe>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d016      	beq.n	8005826 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0201 	bic.w	r2, r2, #1
 8005806:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2201      	movs	r2, #1
 800580e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f012 f895 	bl	8017950 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01b      	beq.n	8005868 <HAL_LTDC_IRQHandler+0x140>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d016      	beq.n	8005868 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0208 	bic.w	r2, r2, #8
 8005848:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2208      	movs	r2, #8
 8005850:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f80e 	bl	8005884 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005868:	bf00      	nop
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005898:	b5b0      	push	{r4, r5, r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_LTDC_ConfigLayer+0x1a>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e02c      	b.n	800590c <HAL_LTDC_ConfigLayer+0x74>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2202      	movs	r2, #2
 80058be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2134      	movs	r1, #52	; 0x34
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	4413      	add	r3, r2
 80058ce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	4614      	mov	r4, r2
 80058d6:	461d      	mov	r5, r3
 80058d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058e4:	682b      	ldr	r3, [r5, #0]
 80058e6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f849 	bl	8005984 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2201      	movs	r2, #1
 80058f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bdb0      	pop	{r4, r5, r7, pc}

08005914 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_LTDC_ProgramLineEvent+0x18>
 8005928:	2302      	movs	r3, #2
 800592a:	e023      	b.n	8005974 <HAL_LTDC_ProgramLineEvent+0x60>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0201 	bic.w	r2, r2, #1
 800594a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800594c:	4a0c      	ldr	r2, [pc, #48]	; (8005980 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0201 	orr.w	r2, r2, #1
 8005960:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	40016800 	.word	0x40016800

08005984 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005984:	b480      	push	{r7}
 8005986:	b089      	sub	sp, #36	; 0x24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	0c1b      	lsrs	r3, r3, #16
 800599c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a0:	4413      	add	r3, r2
 80059a2:	041b      	lsls	r3, r3, #16
 80059a4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	01db      	lsls	r3, r3, #7
 80059b0:	4413      	add	r3, r2
 80059b2:	3384      	adds	r3, #132	; 0x84
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	6812      	ldr	r2, [r2, #0]
 80059ba:	4611      	mov	r1, r2
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	01d2      	lsls	r2, r2, #7
 80059c0:	440a      	add	r2, r1
 80059c2:	3284      	adds	r2, #132	; 0x84
 80059c4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80059c8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	0c1b      	lsrs	r3, r3, #16
 80059d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059da:	4413      	add	r3, r2
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4619      	mov	r1, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	01db      	lsls	r3, r3, #7
 80059e8:	440b      	add	r3, r1
 80059ea:	3384      	adds	r3, #132	; 0x84
 80059ec:	4619      	mov	r1, r3
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a02:	4413      	add	r3, r2
 8005a04:	041b      	lsls	r3, r3, #16
 8005a06:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	01db      	lsls	r3, r3, #7
 8005a12:	4413      	add	r3, r2
 8005a14:	3384      	adds	r3, #132	; 0x84
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	01d2      	lsls	r2, r2, #7
 8005a22:	440a      	add	r2, r1
 8005a24:	3284      	adds	r2, #132	; 0x84
 8005a26:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005a2a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a3a:	4413      	add	r3, r2
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4619      	mov	r1, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	01db      	lsls	r3, r3, #7
 8005a48:	440b      	add	r3, r1
 8005a4a:	3384      	adds	r3, #132	; 0x84
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	01db      	lsls	r3, r3, #7
 8005a5e:	4413      	add	r3, r2
 8005a60:	3384      	adds	r3, #132	; 0x84
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	6812      	ldr	r2, [r2, #0]
 8005a68:	4611      	mov	r1, r2
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	01d2      	lsls	r2, r2, #7
 8005a6e:	440a      	add	r2, r1
 8005a70:	3284      	adds	r2, #132	; 0x84
 8005a72:	f023 0307 	bic.w	r3, r3, #7
 8005a76:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	01db      	lsls	r3, r3, #7
 8005a82:	4413      	add	r3, r2
 8005a84:	3384      	adds	r3, #132	; 0x84
 8005a86:	461a      	mov	r2, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a94:	021b      	lsls	r3, r3, #8
 8005a96:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005a9e:	041b      	lsls	r3, r3, #16
 8005aa0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	061b      	lsls	r3, r3, #24
 8005aa8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	01db      	lsls	r3, r3, #7
 8005ab4:	4413      	add	r3, r2
 8005ab6:	3384      	adds	r3, #132	; 0x84
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	01db      	lsls	r3, r3, #7
 8005ac4:	4413      	add	r3, r2
 8005ac6:	3384      	adds	r3, #132	; 0x84
 8005ac8:	461a      	mov	r2, r3
 8005aca:	2300      	movs	r3, #0
 8005acc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	01db      	lsls	r3, r3, #7
 8005ae8:	440b      	add	r3, r1
 8005aea:	3384      	adds	r3, #132	; 0x84
 8005aec:	4619      	mov	r1, r3
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	01db      	lsls	r3, r3, #7
 8005afe:	4413      	add	r3, r2
 8005b00:	3384      	adds	r3, #132	; 0x84
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	6812      	ldr	r2, [r2, #0]
 8005b08:	4611      	mov	r1, r2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	01d2      	lsls	r2, r2, #7
 8005b0e:	440a      	add	r2, r1
 8005b10:	3284      	adds	r2, #132	; 0x84
 8005b12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b16:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	01db      	lsls	r3, r3, #7
 8005b22:	4413      	add	r3, r2
 8005b24:	3384      	adds	r3, #132	; 0x84
 8005b26:	461a      	mov	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	01db      	lsls	r3, r3, #7
 8005b38:	4413      	add	r3, r2
 8005b3a:	3384      	adds	r3, #132	; 0x84
 8005b3c:	69da      	ldr	r2, [r3, #28]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4619      	mov	r1, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	01db      	lsls	r3, r3, #7
 8005b48:	440b      	add	r3, r1
 8005b4a:	3384      	adds	r3, #132	; 0x84
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4b58      	ldr	r3, [pc, #352]	; (8005cb0 <LTDC_SetConfig+0x32c>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	68f9      	ldr	r1, [r7, #12]
 8005b5e:	6809      	ldr	r1, [r1, #0]
 8005b60:	4608      	mov	r0, r1
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	01c9      	lsls	r1, r1, #7
 8005b66:	4401      	add	r1, r0
 8005b68:	3184      	adds	r1, #132	; 0x84
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	01db      	lsls	r3, r3, #7
 8005b78:	4413      	add	r3, r2
 8005b7a:	3384      	adds	r3, #132	; 0x84
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	01db      	lsls	r3, r3, #7
 8005b88:	4413      	add	r3, r2
 8005b8a:	3384      	adds	r3, #132	; 0x84
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	01db      	lsls	r3, r3, #7
 8005b9c:	4413      	add	r3, r2
 8005b9e:	3384      	adds	r3, #132	; 0x84
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d102      	bne.n	8005bb6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	61fb      	str	r3, [r7, #28]
 8005bb4:	e01b      	b.n	8005bee <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d102      	bne.n	8005bc4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	61fb      	str	r3, [r7, #28]
 8005bc2:	e014      	b.n	8005bee <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d00b      	beq.n	8005be4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d007      	beq.n	8005be4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d003      	beq.n	8005be4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005be0:	2b07      	cmp	r3, #7
 8005be2:	d102      	bne.n	8005bea <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005be4:	2302      	movs	r3, #2
 8005be6:	61fb      	str	r3, [r7, #28]
 8005be8:	e001      	b.n	8005bee <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005bea:	2301      	movs	r3, #1
 8005bec:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	01db      	lsls	r3, r3, #7
 8005bf8:	4413      	add	r3, r2
 8005bfa:	3384      	adds	r3, #132	; 0x84
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	6812      	ldr	r2, [r2, #0]
 8005c02:	4611      	mov	r1, r2
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	01d2      	lsls	r2, r2, #7
 8005c08:	440a      	add	r2, r1
 8005c0a:	3284      	adds	r2, #132	; 0x84
 8005c0c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005c10:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	fb02 f303 	mul.w	r3, r2, r3
 8005c1c:	041a      	lsls	r2, r3, #16
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	6859      	ldr	r1, [r3, #4]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	1acb      	subs	r3, r1, r3
 8005c28:	69f9      	ldr	r1, [r7, #28]
 8005c2a:	fb01 f303 	mul.w	r3, r1, r3
 8005c2e:	3303      	adds	r3, #3
 8005c30:	68f9      	ldr	r1, [r7, #12]
 8005c32:	6809      	ldr	r1, [r1, #0]
 8005c34:	4608      	mov	r0, r1
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	01c9      	lsls	r1, r1, #7
 8005c3a:	4401      	add	r1, r0
 8005c3c:	3184      	adds	r1, #132	; 0x84
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	01db      	lsls	r3, r3, #7
 8005c4c:	4413      	add	r3, r2
 8005c4e:	3384      	adds	r3, #132	; 0x84
 8005c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4619      	mov	r1, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	01db      	lsls	r3, r3, #7
 8005c5c:	440b      	add	r3, r1
 8005c5e:	3384      	adds	r3, #132	; 0x84
 8005c60:	4619      	mov	r1, r3
 8005c62:	4b14      	ldr	r3, [pc, #80]	; (8005cb4 <LTDC_SetConfig+0x330>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	01db      	lsls	r3, r3, #7
 8005c72:	4413      	add	r3, r2
 8005c74:	3384      	adds	r3, #132	; 0x84
 8005c76:	461a      	mov	r2, r3
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	01db      	lsls	r3, r3, #7
 8005c88:	4413      	add	r3, r2
 8005c8a:	3384      	adds	r3, #132	; 0x84
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	6812      	ldr	r2, [r2, #0]
 8005c92:	4611      	mov	r1, r2
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	01d2      	lsls	r2, r2, #7
 8005c98:	440a      	add	r2, r1
 8005c9a:	3284      	adds	r2, #132	; 0x84
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	6013      	str	r3, [r2, #0]
}
 8005ca2:	bf00      	nop
 8005ca4:	3724      	adds	r7, #36	; 0x24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	fffff8f8 	.word	0xfffff8f8
 8005cb4:	fffff800 	.word	0xfffff800

08005cb8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a04      	ldr	r2, [pc, #16]	; (8005cd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc6:	6013      	str	r3, [r2, #0]
}
 8005cc8:	bf00      	nop
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40007000 	.word	0x40007000

08005cd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005ce2:	4b23      	ldr	r3, [pc, #140]	; (8005d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	4a22      	ldr	r2, [pc, #136]	; (8005d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cec:	6413      	str	r3, [r2, #64]	; 0x40
 8005cee:	4b20      	ldr	r3, [pc, #128]	; (8005d70 <HAL_PWREx_EnableOverDrive+0x98>)
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005cfa:	4b1e      	ldr	r3, [pc, #120]	; (8005d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a1d      	ldr	r2, [pc, #116]	; (8005d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d06:	f7fd f9c9 	bl	800309c <HAL_GetTick>
 8005d0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d0c:	e009      	b.n	8005d22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d0e:	f7fd f9c5 	bl	800309c <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d1c:	d901      	bls.n	8005d22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e022      	b.n	8005d68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d22:	4b14      	ldr	r3, [pc, #80]	; (8005d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2e:	d1ee      	bne.n	8005d0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d30:	4b10      	ldr	r3, [pc, #64]	; (8005d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a0f      	ldr	r2, [pc, #60]	; (8005d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d3c:	f7fd f9ae 	bl	800309c <HAL_GetTick>
 8005d40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d42:	e009      	b.n	8005d58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d44:	f7fd f9aa 	bl	800309c <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d52:	d901      	bls.n	8005d58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e007      	b.n	8005d68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d58:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d64:	d1ee      	bne.n	8005d44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	40023800 	.word	0x40023800
 8005d74:	40007000 	.word	0x40007000

08005d78 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005d80:	f7fd f98c 	bl	800309c <HAL_GetTick>
 8005d84:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e067      	b.n	8005e60 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10b      	bne.n	8005db4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7fc fb97 	bl	80024d8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005daa:	f241 3188 	movw	r1, #5000	; 0x1388
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f85e 	bl	8005e70 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	021a      	lsls	r2, r3, #8
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	2120      	movs	r1, #32
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f856 	bl	8005e8c <QSPI_WaitFlagStateUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005de4:	7afb      	ldrb	r3, [r7, #11]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d135      	bne.n	8005e56 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	4b1d      	ldr	r3, [pc, #116]	; (8005e68 <HAL_QSPI_Init+0xf0>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6852      	ldr	r2, [r2, #4]
 8005df8:	0611      	lsls	r1, r2, #24
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	68d2      	ldr	r2, [r2, #12]
 8005dfe:	4311      	orrs	r1, r2
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	69d2      	ldr	r2, [r2, #28]
 8005e04:	4311      	orrs	r1, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6a12      	ldr	r2, [r2, #32]
 8005e0a:	4311      	orrs	r1, r2
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6812      	ldr	r2, [r2, #0]
 8005e10:	430b      	orrs	r3, r1
 8005e12:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	4b14      	ldr	r3, [pc, #80]	; (8005e6c <HAL_QSPI_Init+0xf4>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6912      	ldr	r2, [r2, #16]
 8005e22:	0411      	lsls	r1, r2, #16
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6952      	ldr	r2, [r2, #20]
 8005e28:	4311      	orrs	r1, r2
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6992      	ldr	r2, [r2, #24]
 8005e2e:	4311      	orrs	r1, r2
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	430b      	orrs	r3, r1
 8005e36:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005e5e:	7afb      	ldrb	r3, [r7, #11]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	00ffff2f 	.word	0x00ffff2f
 8005e6c:	ffe0f8fe 	.word	0xffe0f8fe

08005e70 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	603b      	str	r3, [r7, #0]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005e9c:	e01a      	b.n	8005ed4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea4:	d016      	beq.n	8005ed4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea6:	f7fd f8f9 	bl	800309c <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d302      	bcc.n	8005ebc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10b      	bne.n	8005ed4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2204      	movs	r2, #4
 8005ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec8:	f043 0201 	orr.w	r2, r3, #1
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e00e      	b.n	8005ef2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	4013      	ands	r3, r2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bf14      	ite	ne
 8005ee2:	2301      	movne	r3, #1
 8005ee4:	2300      	moveq	r3, #0
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	461a      	mov	r2, r3
 8005eea:	79fb      	ldrb	r3, [r7, #7]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d1d6      	bne.n	8005e9e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005f04:	2300      	movs	r3, #0
 8005f06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e291      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 8087 	beq.w	800602e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f20:	4b96      	ldr	r3, [pc, #600]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 030c 	and.w	r3, r3, #12
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	d00c      	beq.n	8005f46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f2c:	4b93      	ldr	r3, [pc, #588]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f003 030c 	and.w	r3, r3, #12
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d112      	bne.n	8005f5e <HAL_RCC_OscConfig+0x62>
 8005f38:	4b90      	ldr	r3, [pc, #576]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f44:	d10b      	bne.n	8005f5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f46:	4b8d      	ldr	r3, [pc, #564]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d06c      	beq.n	800602c <HAL_RCC_OscConfig+0x130>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d168      	bne.n	800602c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e26b      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f66:	d106      	bne.n	8005f76 <HAL_RCC_OscConfig+0x7a>
 8005f68:	4b84      	ldr	r3, [pc, #528]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a83      	ldr	r2, [pc, #524]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	e02e      	b.n	8005fd4 <HAL_RCC_OscConfig+0xd8>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10c      	bne.n	8005f98 <HAL_RCC_OscConfig+0x9c>
 8005f7e:	4b7f      	ldr	r3, [pc, #508]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a7e      	ldr	r2, [pc, #504]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	4b7c      	ldr	r3, [pc, #496]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a7b      	ldr	r2, [pc, #492]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	e01d      	b.n	8005fd4 <HAL_RCC_OscConfig+0xd8>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fa0:	d10c      	bne.n	8005fbc <HAL_RCC_OscConfig+0xc0>
 8005fa2:	4b76      	ldr	r3, [pc, #472]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a75      	ldr	r2, [pc, #468]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	4b73      	ldr	r3, [pc, #460]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a72      	ldr	r2, [pc, #456]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	e00b      	b.n	8005fd4 <HAL_RCC_OscConfig+0xd8>
 8005fbc:	4b6f      	ldr	r3, [pc, #444]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a6e      	ldr	r2, [pc, #440]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	4b6c      	ldr	r3, [pc, #432]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a6b      	ldr	r2, [pc, #428]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d013      	beq.n	8006004 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fdc:	f7fd f85e 	bl	800309c <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fe2:	e008      	b.n	8005ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fe4:	f7fd f85a 	bl	800309c <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b64      	cmp	r3, #100	; 0x64
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e21f      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ff6:	4b61      	ldr	r3, [pc, #388]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0f0      	beq.n	8005fe4 <HAL_RCC_OscConfig+0xe8>
 8006002:	e014      	b.n	800602e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006004:	f7fd f84a 	bl	800309c <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800600c:	f7fd f846 	bl	800309c <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b64      	cmp	r3, #100	; 0x64
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e20b      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800601e:	4b57      	ldr	r3, [pc, #348]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1f0      	bne.n	800600c <HAL_RCC_OscConfig+0x110>
 800602a:	e000      	b.n	800602e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800602c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d069      	beq.n	800610e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800603a:	4b50      	ldr	r3, [pc, #320]	; (800617c <HAL_RCC_OscConfig+0x280>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 030c 	and.w	r3, r3, #12
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00b      	beq.n	800605e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006046:	4b4d      	ldr	r3, [pc, #308]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 030c 	and.w	r3, r3, #12
 800604e:	2b08      	cmp	r3, #8
 8006050:	d11c      	bne.n	800608c <HAL_RCC_OscConfig+0x190>
 8006052:	4b4a      	ldr	r3, [pc, #296]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d116      	bne.n	800608c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800605e:	4b47      	ldr	r3, [pc, #284]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d005      	beq.n	8006076 <HAL_RCC_OscConfig+0x17a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d001      	beq.n	8006076 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e1df      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006076:	4b41      	ldr	r3, [pc, #260]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	493d      	ldr	r1, [pc, #244]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006086:	4313      	orrs	r3, r2
 8006088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800608a:	e040      	b.n	800610e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d023      	beq.n	80060dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006094:	4b39      	ldr	r3, [pc, #228]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a38      	ldr	r2, [pc, #224]	; (800617c <HAL_RCC_OscConfig+0x280>)
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a0:	f7fc fffc 	bl	800309c <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060a8:	f7fc fff8 	bl	800309c <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e1bd      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ba:	4b30      	ldr	r3, [pc, #192]	; (800617c <HAL_RCC_OscConfig+0x280>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c6:	4b2d      	ldr	r3, [pc, #180]	; (800617c <HAL_RCC_OscConfig+0x280>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	4929      	ldr	r1, [pc, #164]	; (800617c <HAL_RCC_OscConfig+0x280>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	600b      	str	r3, [r1, #0]
 80060da:	e018      	b.n	800610e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060dc:	4b27      	ldr	r3, [pc, #156]	; (800617c <HAL_RCC_OscConfig+0x280>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a26      	ldr	r2, [pc, #152]	; (800617c <HAL_RCC_OscConfig+0x280>)
 80060e2:	f023 0301 	bic.w	r3, r3, #1
 80060e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e8:	f7fc ffd8 	bl	800309c <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ee:	e008      	b.n	8006102 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060f0:	f7fc ffd4 	bl	800309c <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e199      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006102:	4b1e      	ldr	r3, [pc, #120]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f0      	bne.n	80060f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0308 	and.w	r3, r3, #8
 8006116:	2b00      	cmp	r3, #0
 8006118:	d038      	beq.n	800618c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d019      	beq.n	8006156 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006122:	4b16      	ldr	r3, [pc, #88]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006126:	4a15      	ldr	r2, [pc, #84]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006128:	f043 0301 	orr.w	r3, r3, #1
 800612c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800612e:	f7fc ffb5 	bl	800309c <HAL_GetTick>
 8006132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006134:	e008      	b.n	8006148 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006136:	f7fc ffb1 	bl	800309c <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	2b02      	cmp	r3, #2
 8006142:	d901      	bls.n	8006148 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e176      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006148:	4b0c      	ldr	r3, [pc, #48]	; (800617c <HAL_RCC_OscConfig+0x280>)
 800614a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0f0      	beq.n	8006136 <HAL_RCC_OscConfig+0x23a>
 8006154:	e01a      	b.n	800618c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006156:	4b09      	ldr	r3, [pc, #36]	; (800617c <HAL_RCC_OscConfig+0x280>)
 8006158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800615a:	4a08      	ldr	r2, [pc, #32]	; (800617c <HAL_RCC_OscConfig+0x280>)
 800615c:	f023 0301 	bic.w	r3, r3, #1
 8006160:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006162:	f7fc ff9b 	bl	800309c <HAL_GetTick>
 8006166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006168:	e00a      	b.n	8006180 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800616a:	f7fc ff97 	bl	800309c <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d903      	bls.n	8006180 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e15c      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
 800617c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006180:	4b91      	ldr	r3, [pc, #580]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1ee      	bne.n	800616a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 80a4 	beq.w	80062e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800619a:	4b8b      	ldr	r3, [pc, #556]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10d      	bne.n	80061c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80061a6:	4b88      	ldr	r3, [pc, #544]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	4a87      	ldr	r2, [pc, #540]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 80061ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b0:	6413      	str	r3, [r2, #64]	; 0x40
 80061b2:	4b85      	ldr	r3, [pc, #532]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ba:	60bb      	str	r3, [r7, #8]
 80061bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061be:	2301      	movs	r3, #1
 80061c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061c2:	4b82      	ldr	r3, [pc, #520]	; (80063cc <HAL_RCC_OscConfig+0x4d0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d118      	bne.n	8006200 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80061ce:	4b7f      	ldr	r3, [pc, #508]	; (80063cc <HAL_RCC_OscConfig+0x4d0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a7e      	ldr	r2, [pc, #504]	; (80063cc <HAL_RCC_OscConfig+0x4d0>)
 80061d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061da:	f7fc ff5f 	bl	800309c <HAL_GetTick>
 80061de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061e0:	e008      	b.n	80061f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061e2:	f7fc ff5b 	bl	800309c <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b64      	cmp	r3, #100	; 0x64
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e120      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061f4:	4b75      	ldr	r3, [pc, #468]	; (80063cc <HAL_RCC_OscConfig+0x4d0>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0f0      	beq.n	80061e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d106      	bne.n	8006216 <HAL_RCC_OscConfig+0x31a>
 8006208:	4b6f      	ldr	r3, [pc, #444]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800620a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620c:	4a6e      	ldr	r2, [pc, #440]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800620e:	f043 0301 	orr.w	r3, r3, #1
 8006212:	6713      	str	r3, [r2, #112]	; 0x70
 8006214:	e02d      	b.n	8006272 <HAL_RCC_OscConfig+0x376>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10c      	bne.n	8006238 <HAL_RCC_OscConfig+0x33c>
 800621e:	4b6a      	ldr	r3, [pc, #424]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006222:	4a69      	ldr	r2, [pc, #420]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006224:	f023 0301 	bic.w	r3, r3, #1
 8006228:	6713      	str	r3, [r2, #112]	; 0x70
 800622a:	4b67      	ldr	r3, [pc, #412]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800622c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622e:	4a66      	ldr	r2, [pc, #408]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006230:	f023 0304 	bic.w	r3, r3, #4
 8006234:	6713      	str	r3, [r2, #112]	; 0x70
 8006236:	e01c      	b.n	8006272 <HAL_RCC_OscConfig+0x376>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	2b05      	cmp	r3, #5
 800623e:	d10c      	bne.n	800625a <HAL_RCC_OscConfig+0x35e>
 8006240:	4b61      	ldr	r3, [pc, #388]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006244:	4a60      	ldr	r2, [pc, #384]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006246:	f043 0304 	orr.w	r3, r3, #4
 800624a:	6713      	str	r3, [r2, #112]	; 0x70
 800624c:	4b5e      	ldr	r3, [pc, #376]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006250:	4a5d      	ldr	r2, [pc, #372]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	6713      	str	r3, [r2, #112]	; 0x70
 8006258:	e00b      	b.n	8006272 <HAL_RCC_OscConfig+0x376>
 800625a:	4b5b      	ldr	r3, [pc, #364]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800625c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625e:	4a5a      	ldr	r2, [pc, #360]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006260:	f023 0301 	bic.w	r3, r3, #1
 8006264:	6713      	str	r3, [r2, #112]	; 0x70
 8006266:	4b58      	ldr	r3, [pc, #352]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626a:	4a57      	ldr	r2, [pc, #348]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800626c:	f023 0304 	bic.w	r3, r3, #4
 8006270:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d015      	beq.n	80062a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800627a:	f7fc ff0f 	bl	800309c <HAL_GetTick>
 800627e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006280:	e00a      	b.n	8006298 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006282:	f7fc ff0b 	bl	800309c <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006290:	4293      	cmp	r3, r2
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e0ce      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006298:	4b4b      	ldr	r3, [pc, #300]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800629a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0ee      	beq.n	8006282 <HAL_RCC_OscConfig+0x386>
 80062a4:	e014      	b.n	80062d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a6:	f7fc fef9 	bl	800309c <HAL_GetTick>
 80062aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ac:	e00a      	b.n	80062c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ae:	f7fc fef5 	bl	800309c <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062bc:	4293      	cmp	r3, r2
 80062be:	d901      	bls.n	80062c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e0b8      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062c4:	4b40      	ldr	r3, [pc, #256]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 80062c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1ee      	bne.n	80062ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d105      	bne.n	80062e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062d6:	4b3c      	ldr	r3, [pc, #240]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	4a3b      	ldr	r2, [pc, #236]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 80062dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 80a4 	beq.w	8006434 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062ec:	4b36      	ldr	r3, [pc, #216]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 030c 	and.w	r3, r3, #12
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d06b      	beq.n	80063d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d149      	bne.n	8006394 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006300:	4b31      	ldr	r3, [pc, #196]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a30      	ldr	r2, [pc, #192]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800630a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630c:	f7fc fec6 	bl	800309c <HAL_GetTick>
 8006310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006314:	f7fc fec2 	bl	800309c <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e087      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006326:	4b28      	ldr	r3, [pc, #160]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1f0      	bne.n	8006314 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69da      	ldr	r2, [r3, #28]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	019b      	lsls	r3, r3, #6
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	085b      	lsrs	r3, r3, #1
 800634a:	3b01      	subs	r3, #1
 800634c:	041b      	lsls	r3, r3, #16
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006354:	061b      	lsls	r3, r3, #24
 8006356:	4313      	orrs	r3, r2
 8006358:	4a1b      	ldr	r2, [pc, #108]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800635a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800635e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006360:	4b19      	ldr	r3, [pc, #100]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a18      	ldr	r2, [pc, #96]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800636a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636c:	f7fc fe96 	bl	800309c <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006374:	f7fc fe92 	bl	800309c <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e057      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006386:	4b10      	ldr	r3, [pc, #64]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0f0      	beq.n	8006374 <HAL_RCC_OscConfig+0x478>
 8006392:	e04f      	b.n	8006434 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006394:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a0b      	ldr	r2, [pc, #44]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 800639a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800639e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a0:	f7fc fe7c 	bl	800309c <HAL_GetTick>
 80063a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063a8:	f7fc fe78 	bl	800309c <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e03d      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ba:	4b03      	ldr	r3, [pc, #12]	; (80063c8 <HAL_RCC_OscConfig+0x4cc>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1f0      	bne.n	80063a8 <HAL_RCC_OscConfig+0x4ac>
 80063c6:	e035      	b.n	8006434 <HAL_RCC_OscConfig+0x538>
 80063c8:	40023800 	.word	0x40023800
 80063cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80063d0:	4b1b      	ldr	r3, [pc, #108]	; (8006440 <HAL_RCC_OscConfig+0x544>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d028      	beq.n	8006430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d121      	bne.n	8006430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d11a      	bne.n	8006430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006400:	4013      	ands	r3, r2
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006406:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006408:	4293      	cmp	r3, r2
 800640a:	d111      	bne.n	8006430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006416:	085b      	lsrs	r3, r3, #1
 8006418:	3b01      	subs	r3, #1
 800641a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800641c:	429a      	cmp	r2, r3
 800641e:	d107      	bne.n	8006430 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800642c:	429a      	cmp	r2, r3
 800642e:	d001      	beq.n	8006434 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40023800 	.word	0x40023800

08006444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e0d0      	b.n	80065fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800645c:	4b6a      	ldr	r3, [pc, #424]	; (8006608 <HAL_RCC_ClockConfig+0x1c4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 030f 	and.w	r3, r3, #15
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	429a      	cmp	r2, r3
 8006468:	d910      	bls.n	800648c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800646a:	4b67      	ldr	r3, [pc, #412]	; (8006608 <HAL_RCC_ClockConfig+0x1c4>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f023 020f 	bic.w	r2, r3, #15
 8006472:	4965      	ldr	r1, [pc, #404]	; (8006608 <HAL_RCC_ClockConfig+0x1c4>)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	4313      	orrs	r3, r2
 8006478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800647a:	4b63      	ldr	r3, [pc, #396]	; (8006608 <HAL_RCC_ClockConfig+0x1c4>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	429a      	cmp	r2, r3
 8006486:	d001      	beq.n	800648c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e0b8      	b.n	80065fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d020      	beq.n	80064da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064a4:	4b59      	ldr	r3, [pc, #356]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	4a58      	ldr	r2, [pc, #352]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80064aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064bc:	4b53      	ldr	r3, [pc, #332]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	4a52      	ldr	r2, [pc, #328]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80064c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064c8:	4b50      	ldr	r3, [pc, #320]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	494d      	ldr	r1, [pc, #308]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d040      	beq.n	8006568 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d107      	bne.n	80064fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ee:	4b47      	ldr	r3, [pc, #284]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d115      	bne.n	8006526 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e07f      	b.n	80065fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b02      	cmp	r3, #2
 8006504:	d107      	bne.n	8006516 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006506:	4b41      	ldr	r3, [pc, #260]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d109      	bne.n	8006526 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e073      	b.n	80065fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006516:	4b3d      	ldr	r3, [pc, #244]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e06b      	b.n	80065fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006526:	4b39      	ldr	r3, [pc, #228]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f023 0203 	bic.w	r2, r3, #3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	4936      	ldr	r1, [pc, #216]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 8006534:	4313      	orrs	r3, r2
 8006536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006538:	f7fc fdb0 	bl	800309c <HAL_GetTick>
 800653c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800653e:	e00a      	b.n	8006556 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006540:	f7fc fdac 	bl	800309c <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	f241 3288 	movw	r2, #5000	; 0x1388
 800654e:	4293      	cmp	r3, r2
 8006550:	d901      	bls.n	8006556 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e053      	b.n	80065fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006556:	4b2d      	ldr	r3, [pc, #180]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 020c 	and.w	r2, r3, #12
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	429a      	cmp	r2, r3
 8006566:	d1eb      	bne.n	8006540 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006568:	4b27      	ldr	r3, [pc, #156]	; (8006608 <HAL_RCC_ClockConfig+0x1c4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d210      	bcs.n	8006598 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006576:	4b24      	ldr	r3, [pc, #144]	; (8006608 <HAL_RCC_ClockConfig+0x1c4>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f023 020f 	bic.w	r2, r3, #15
 800657e:	4922      	ldr	r1, [pc, #136]	; (8006608 <HAL_RCC_ClockConfig+0x1c4>)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	4313      	orrs	r3, r2
 8006584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006586:	4b20      	ldr	r3, [pc, #128]	; (8006608 <HAL_RCC_ClockConfig+0x1c4>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 030f 	and.w	r3, r3, #15
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d001      	beq.n	8006598 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e032      	b.n	80065fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d008      	beq.n	80065b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065a4:	4b19      	ldr	r3, [pc, #100]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	4916      	ldr	r1, [pc, #88]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d009      	beq.n	80065d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80065c2:	4b12      	ldr	r3, [pc, #72]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	490e      	ldr	r1, [pc, #56]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80065d6:	f000 f821 	bl	800661c <HAL_RCC_GetSysClockFreq>
 80065da:	4601      	mov	r1, r0
 80065dc:	4b0b      	ldr	r3, [pc, #44]	; (800660c <HAL_RCC_ClockConfig+0x1c8>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	091b      	lsrs	r3, r3, #4
 80065e2:	f003 030f 	and.w	r3, r3, #15
 80065e6:	4a0a      	ldr	r2, [pc, #40]	; (8006610 <HAL_RCC_ClockConfig+0x1cc>)
 80065e8:	5cd3      	ldrb	r3, [r2, r3]
 80065ea:	fa21 f303 	lsr.w	r3, r1, r3
 80065ee:	4a09      	ldr	r2, [pc, #36]	; (8006614 <HAL_RCC_ClockConfig+0x1d0>)
 80065f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80065f2:	4b09      	ldr	r3, [pc, #36]	; (8006618 <HAL_RCC_ClockConfig+0x1d4>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fc fb90 	bl	8002d1c <HAL_InitTick>

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40023c00 	.word	0x40023c00
 800660c:	40023800 	.word	0x40023800
 8006610:	08029e40 	.word	0x08029e40
 8006614:	2000002c 	.word	0x2000002c
 8006618:	20000030 	.word	0x20000030

0800661c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800661c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	607b      	str	r3, [r7, #4]
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
 800662a:	2300      	movs	r3, #0
 800662c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800662e:	2300      	movs	r3, #0
 8006630:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006632:	4b50      	ldr	r3, [pc, #320]	; (8006774 <HAL_RCC_GetSysClockFreq+0x158>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 030c 	and.w	r3, r3, #12
 800663a:	2b04      	cmp	r3, #4
 800663c:	d007      	beq.n	800664e <HAL_RCC_GetSysClockFreq+0x32>
 800663e:	2b08      	cmp	r3, #8
 8006640:	d008      	beq.n	8006654 <HAL_RCC_GetSysClockFreq+0x38>
 8006642:	2b00      	cmp	r3, #0
 8006644:	f040 808d 	bne.w	8006762 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006648:	4b4b      	ldr	r3, [pc, #300]	; (8006778 <HAL_RCC_GetSysClockFreq+0x15c>)
 800664a:	60bb      	str	r3, [r7, #8]
      break;
 800664c:	e08c      	b.n	8006768 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800664e:	4b4b      	ldr	r3, [pc, #300]	; (800677c <HAL_RCC_GetSysClockFreq+0x160>)
 8006650:	60bb      	str	r3, [r7, #8]
      break;
 8006652:	e089      	b.n	8006768 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006654:	4b47      	ldr	r3, [pc, #284]	; (8006774 <HAL_RCC_GetSysClockFreq+0x158>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800665c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800665e:	4b45      	ldr	r3, [pc, #276]	; (8006774 <HAL_RCC_GetSysClockFreq+0x158>)
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d023      	beq.n	80066b2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800666a:	4b42      	ldr	r3, [pc, #264]	; (8006774 <HAL_RCC_GetSysClockFreq+0x158>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	099b      	lsrs	r3, r3, #6
 8006670:	f04f 0400 	mov.w	r4, #0
 8006674:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	ea03 0501 	and.w	r5, r3, r1
 8006680:	ea04 0602 	and.w	r6, r4, r2
 8006684:	4a3d      	ldr	r2, [pc, #244]	; (800677c <HAL_RCC_GetSysClockFreq+0x160>)
 8006686:	fb02 f106 	mul.w	r1, r2, r6
 800668a:	2200      	movs	r2, #0
 800668c:	fb02 f205 	mul.w	r2, r2, r5
 8006690:	440a      	add	r2, r1
 8006692:	493a      	ldr	r1, [pc, #232]	; (800677c <HAL_RCC_GetSysClockFreq+0x160>)
 8006694:	fba5 0101 	umull	r0, r1, r5, r1
 8006698:	1853      	adds	r3, r2, r1
 800669a:	4619      	mov	r1, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f04f 0400 	mov.w	r4, #0
 80066a2:	461a      	mov	r2, r3
 80066a4:	4623      	mov	r3, r4
 80066a6:	f7f9 fe03 	bl	80002b0 <__aeabi_uldivmod>
 80066aa:	4603      	mov	r3, r0
 80066ac:	460c      	mov	r4, r1
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	e049      	b.n	8006746 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066b2:	4b30      	ldr	r3, [pc, #192]	; (8006774 <HAL_RCC_GetSysClockFreq+0x158>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	099b      	lsrs	r3, r3, #6
 80066b8:	f04f 0400 	mov.w	r4, #0
 80066bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80066c0:	f04f 0200 	mov.w	r2, #0
 80066c4:	ea03 0501 	and.w	r5, r3, r1
 80066c8:	ea04 0602 	and.w	r6, r4, r2
 80066cc:	4629      	mov	r1, r5
 80066ce:	4632      	mov	r2, r6
 80066d0:	f04f 0300 	mov.w	r3, #0
 80066d4:	f04f 0400 	mov.w	r4, #0
 80066d8:	0154      	lsls	r4, r2, #5
 80066da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80066de:	014b      	lsls	r3, r1, #5
 80066e0:	4619      	mov	r1, r3
 80066e2:	4622      	mov	r2, r4
 80066e4:	1b49      	subs	r1, r1, r5
 80066e6:	eb62 0206 	sbc.w	r2, r2, r6
 80066ea:	f04f 0300 	mov.w	r3, #0
 80066ee:	f04f 0400 	mov.w	r4, #0
 80066f2:	0194      	lsls	r4, r2, #6
 80066f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80066f8:	018b      	lsls	r3, r1, #6
 80066fa:	1a5b      	subs	r3, r3, r1
 80066fc:	eb64 0402 	sbc.w	r4, r4, r2
 8006700:	f04f 0100 	mov.w	r1, #0
 8006704:	f04f 0200 	mov.w	r2, #0
 8006708:	00e2      	lsls	r2, r4, #3
 800670a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800670e:	00d9      	lsls	r1, r3, #3
 8006710:	460b      	mov	r3, r1
 8006712:	4614      	mov	r4, r2
 8006714:	195b      	adds	r3, r3, r5
 8006716:	eb44 0406 	adc.w	r4, r4, r6
 800671a:	f04f 0100 	mov.w	r1, #0
 800671e:	f04f 0200 	mov.w	r2, #0
 8006722:	02a2      	lsls	r2, r4, #10
 8006724:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006728:	0299      	lsls	r1, r3, #10
 800672a:	460b      	mov	r3, r1
 800672c:	4614      	mov	r4, r2
 800672e:	4618      	mov	r0, r3
 8006730:	4621      	mov	r1, r4
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f04f 0400 	mov.w	r4, #0
 8006738:	461a      	mov	r2, r3
 800673a:	4623      	mov	r3, r4
 800673c:	f7f9 fdb8 	bl	80002b0 <__aeabi_uldivmod>
 8006740:	4603      	mov	r3, r0
 8006742:	460c      	mov	r4, r1
 8006744:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006746:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <HAL_RCC_GetSysClockFreq+0x158>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	0c1b      	lsrs	r3, r3, #16
 800674c:	f003 0303 	and.w	r3, r3, #3
 8006750:	3301      	adds	r3, #1
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	fbb2 f3f3 	udiv	r3, r2, r3
 800675e:	60bb      	str	r3, [r7, #8]
      break;
 8006760:	e002      	b.n	8006768 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006762:	4b05      	ldr	r3, [pc, #20]	; (8006778 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006764:	60bb      	str	r3, [r7, #8]
      break;
 8006766:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006768:	68bb      	ldr	r3, [r7, #8]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006772:	bf00      	nop
 8006774:	40023800 	.word	0x40023800
 8006778:	00f42400 	.word	0x00f42400
 800677c:	017d7840 	.word	0x017d7840

08006780 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006784:	4b03      	ldr	r3, [pc, #12]	; (8006794 <HAL_RCC_GetHCLKFreq+0x14>)
 8006786:	681b      	ldr	r3, [r3, #0]
}
 8006788:	4618      	mov	r0, r3
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	2000002c 	.word	0x2000002c

08006798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800679c:	f7ff fff0 	bl	8006780 <HAL_RCC_GetHCLKFreq>
 80067a0:	4601      	mov	r1, r0
 80067a2:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	0a9b      	lsrs	r3, r3, #10
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	4a03      	ldr	r2, [pc, #12]	; (80067bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80067ae:	5cd3      	ldrb	r3, [r2, r3]
 80067b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	40023800 	.word	0x40023800
 80067bc:	08029e50 	.word	0x08029e50

080067c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80067c4:	f7ff ffdc 	bl	8006780 <HAL_RCC_GetHCLKFreq>
 80067c8:	4601      	mov	r1, r0
 80067ca:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	0b5b      	lsrs	r3, r3, #13
 80067d0:	f003 0307 	and.w	r3, r3, #7
 80067d4:	4a03      	ldr	r2, [pc, #12]	; (80067e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067d6:	5cd3      	ldrb	r3, [r2, r3]
 80067d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80067dc:	4618      	mov	r0, r3
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40023800 	.word	0x40023800
 80067e4:	08029e50 	.word	0x08029e50

080067e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	220f      	movs	r2, #15
 80067f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80067f8:	4b12      	ldr	r3, [pc, #72]	; (8006844 <HAL_RCC_GetClockConfig+0x5c>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f003 0203 	and.w	r2, r3, #3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006804:	4b0f      	ldr	r3, [pc, #60]	; (8006844 <HAL_RCC_GetClockConfig+0x5c>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006810:	4b0c      	ldr	r3, [pc, #48]	; (8006844 <HAL_RCC_GetClockConfig+0x5c>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800681c:	4b09      	ldr	r3, [pc, #36]	; (8006844 <HAL_RCC_GetClockConfig+0x5c>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	08db      	lsrs	r3, r3, #3
 8006822:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800682a:	4b07      	ldr	r3, [pc, #28]	; (8006848 <HAL_RCC_GetClockConfig+0x60>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 020f 	and.w	r2, r3, #15
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	601a      	str	r2, [r3, #0]
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	40023800 	.word	0x40023800
 8006848:	40023c00 	.word	0x40023c00

0800684c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006864:	2300      	movs	r3, #0
 8006866:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d012      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006874:	4b69      	ldr	r3, [pc, #420]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	4a68      	ldr	r2, [pc, #416]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800687a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800687e:	6093      	str	r3, [r2, #8]
 8006880:	4b66      	ldr	r3, [pc, #408]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006888:	4964      	ldr	r1, [pc, #400]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800688a:	4313      	orrs	r3, r2
 800688c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006896:	2301      	movs	r3, #1
 8006898:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d017      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068a6:	4b5d      	ldr	r3, [pc, #372]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b4:	4959      	ldr	r1, [pc, #356]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068c4:	d101      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80068c6:	2301      	movs	r3, #1
 80068c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80068d2:	2301      	movs	r3, #1
 80068d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d017      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80068e2:	4b4e      	ldr	r3, [pc, #312]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	494a      	ldr	r1, [pc, #296]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006900:	d101      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006902:	2301      	movs	r3, #1
 8006904:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800690e:	2301      	movs	r3, #1
 8006910:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800691e:	2301      	movs	r3, #1
 8006920:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 808b 	beq.w	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006930:	4b3a      	ldr	r3, [pc, #232]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006934:	4a39      	ldr	r2, [pc, #228]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800693a:	6413      	str	r3, [r2, #64]	; 0x40
 800693c:	4b37      	ldr	r3, [pc, #220]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006944:	60bb      	str	r3, [r7, #8]
 8006946:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006948:	4b35      	ldr	r3, [pc, #212]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a34      	ldr	r2, [pc, #208]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800694e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006954:	f7fc fba2 	bl	800309c <HAL_GetTick>
 8006958:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800695a:	e008      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800695c:	f7fc fb9e 	bl	800309c <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b64      	cmp	r3, #100	; 0x64
 8006968:	d901      	bls.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e355      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800696e:	4b2c      	ldr	r3, [pc, #176]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0f0      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800697a:	4b28      	ldr	r3, [pc, #160]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800697c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006982:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d035      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	429a      	cmp	r2, r3
 8006996:	d02e      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006998:	4b20      	ldr	r3, [pc, #128]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800699a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069a2:	4b1e      	ldr	r3, [pc, #120]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a6:	4a1d      	ldr	r2, [pc, #116]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069ae:	4b1b      	ldr	r3, [pc, #108]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b2:	4a1a      	ldr	r2, [pc, #104]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80069ba:	4a18      	ldr	r2, [pc, #96]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069c0:	4b16      	ldr	r3, [pc, #88]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d114      	bne.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069cc:	f7fc fb66 	bl	800309c <HAL_GetTick>
 80069d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d2:	e00a      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069d4:	f7fc fb62 	bl	800309c <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d901      	bls.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e317      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ea:	4b0c      	ldr	r3, [pc, #48]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0ee      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a02:	d111      	bne.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006a04:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a10:	4b04      	ldr	r3, [pc, #16]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006a12:	400b      	ands	r3, r1
 8006a14:	4901      	ldr	r1, [pc, #4]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	608b      	str	r3, [r1, #8]
 8006a1a:	e00b      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	40007000 	.word	0x40007000
 8006a24:	0ffffcff 	.word	0x0ffffcff
 8006a28:	4bb0      	ldr	r3, [pc, #704]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	4aaf      	ldr	r2, [pc, #700]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a32:	6093      	str	r3, [r2, #8]
 8006a34:	4bad      	ldr	r3, [pc, #692]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a40:	49aa      	ldr	r1, [pc, #680]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0310 	and.w	r3, r3, #16
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d010      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a52:	4ba6      	ldr	r3, [pc, #664]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a58:	4aa4      	ldr	r2, [pc, #656]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006a62:	4ba2      	ldr	r3, [pc, #648]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	499f      	ldr	r1, [pc, #636]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a80:	4b9a      	ldr	r3, [pc, #616]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a8e:	4997      	ldr	r1, [pc, #604]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006aa2:	4b92      	ldr	r3, [pc, #584]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ab0:	498e      	ldr	r1, [pc, #568]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ac4:	4b89      	ldr	r3, [pc, #548]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad2:	4986      	ldr	r1, [pc, #536]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ae6:	4b81      	ldr	r3, [pc, #516]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af4:	497d      	ldr	r1, [pc, #500]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b08:	4b78      	ldr	r3, [pc, #480]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0e:	f023 0203 	bic.w	r2, r3, #3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b16:	4975      	ldr	r1, [pc, #468]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b2a:	4b70      	ldr	r3, [pc, #448]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b30:	f023 020c 	bic.w	r2, r3, #12
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b38:	496c      	ldr	r1, [pc, #432]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b4c:	4b67      	ldr	r3, [pc, #412]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5a:	4964      	ldr	r1, [pc, #400]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b6e:	4b5f      	ldr	r3, [pc, #380]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b74:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7c:	495b      	ldr	r1, [pc, #364]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b90:	4b56      	ldr	r3, [pc, #344]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9e:	4953      	ldr	r1, [pc, #332]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006bb2:	4b4e      	ldr	r3, [pc, #312]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc0:	494a      	ldr	r1, [pc, #296]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006bd4:	4b45      	ldr	r3, [pc, #276]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be2:	4942      	ldr	r1, [pc, #264]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006bf6:	4b3d      	ldr	r3, [pc, #244]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c04:	4939      	ldr	r1, [pc, #228]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00a      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c18:	4b34      	ldr	r3, [pc, #208]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c26:	4931      	ldr	r1, [pc, #196]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d011      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c3a:	4b2c      	ldr	r3, [pc, #176]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c40:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c48:	4928      	ldr	r1, [pc, #160]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c58:	d101      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0308 	and.w	r3, r3, #8
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c7a:	4b1c      	ldr	r3, [pc, #112]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c80:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c88:	4918      	ldr	r1, [pc, #96]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006c9c:	4b13      	ldr	r3, [pc, #76]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cac:	490f      	ldr	r1, [pc, #60]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d005      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cc2:	f040 80d8 	bne.w	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006cc6:	4b09      	ldr	r3, [pc, #36]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a08      	ldr	r2, [pc, #32]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ccc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cd2:	f7fc f9e3 	bl	800309c <HAL_GetTick>
 8006cd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cd8:	e00a      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006cda:	f7fc f9df 	bl	800309c <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b64      	cmp	r3, #100	; 0x64
 8006ce6:	d903      	bls.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e196      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006cec:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cf0:	4b6c      	ldr	r3, [pc, #432]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1ee      	bne.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d021      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d11d      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d10:	4b64      	ldr	r3, [pc, #400]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d16:	0c1b      	lsrs	r3, r3, #16
 8006d18:	f003 0303 	and.w	r3, r3, #3
 8006d1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d1e:	4b61      	ldr	r3, [pc, #388]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d24:	0e1b      	lsrs	r3, r3, #24
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	019a      	lsls	r2, r3, #6
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	041b      	lsls	r3, r3, #16
 8006d36:	431a      	orrs	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	061b      	lsls	r3, r3, #24
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	071b      	lsls	r3, r3, #28
 8006d44:	4957      	ldr	r1, [pc, #348]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d60:	d00a      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d02e      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d76:	d129      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d78:	4b4a      	ldr	r3, [pc, #296]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d7e:	0c1b      	lsrs	r3, r3, #16
 8006d80:	f003 0303 	and.w	r3, r3, #3
 8006d84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006d86:	4b47      	ldr	r3, [pc, #284]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d8c:	0f1b      	lsrs	r3, r3, #28
 8006d8e:	f003 0307 	and.w	r3, r3, #7
 8006d92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	019a      	lsls	r2, r3, #6
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	041b      	lsls	r3, r3, #16
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	061b      	lsls	r3, r3, #24
 8006da6:	431a      	orrs	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	071b      	lsls	r3, r3, #28
 8006dac:	493d      	ldr	r1, [pc, #244]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006db4:	4b3b      	ldr	r3, [pc, #236]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dba:	f023 021f 	bic.w	r2, r3, #31
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	4937      	ldr	r1, [pc, #220]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01d      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006dd8:	4b32      	ldr	r3, [pc, #200]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dde:	0e1b      	lsrs	r3, r3, #24
 8006de0:	f003 030f 	and.w	r3, r3, #15
 8006de4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006de6:	4b2f      	ldr	r3, [pc, #188]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dec:	0f1b      	lsrs	r3, r3, #28
 8006dee:	f003 0307 	and.w	r3, r3, #7
 8006df2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	019a      	lsls	r2, r3, #6
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	041b      	lsls	r3, r3, #16
 8006e00:	431a      	orrs	r2, r3
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	061b      	lsls	r3, r3, #24
 8006e06:	431a      	orrs	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	071b      	lsls	r3, r3, #28
 8006e0c:	4925      	ldr	r1, [pc, #148]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d011      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	019a      	lsls	r2, r3, #6
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	041b      	lsls	r3, r3, #16
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	061b      	lsls	r3, r3, #24
 8006e34:	431a      	orrs	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	071b      	lsls	r3, r3, #28
 8006e3c:	4919      	ldr	r1, [pc, #100]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e44:	4b17      	ldr	r3, [pc, #92]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a16      	ldr	r2, [pc, #88]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e50:	f7fc f924 	bl	800309c <HAL_GetTick>
 8006e54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e56:	e008      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e58:	f7fc f920 	bl	800309c <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b64      	cmp	r3, #100	; 0x64
 8006e64:	d901      	bls.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e0d7      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0f0      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	f040 80cd 	bne.w	8007018 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006e7e:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a08      	ldr	r2, [pc, #32]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e8a:	f7fc f907 	bl	800309c <HAL_GetTick>
 8006e8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006e90:	e00a      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006e92:	f7fc f903 	bl	800309c <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b64      	cmp	r3, #100	; 0x64
 8006e9e:	d903      	bls.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e0ba      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006ea4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ea8:	4b5e      	ldr	r3, [pc, #376]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eb4:	d0ed      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d009      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d02e      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d12a      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006ede:	4b51      	ldr	r3, [pc, #324]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee4:	0c1b      	lsrs	r3, r3, #16
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006eec:	4b4d      	ldr	r3, [pc, #308]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef2:	0f1b      	lsrs	r3, r3, #28
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	019a      	lsls	r2, r3, #6
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	041b      	lsls	r3, r3, #16
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	061b      	lsls	r3, r3, #24
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	071b      	lsls	r3, r3, #28
 8006f12:	4944      	ldr	r1, [pc, #272]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f1a:	4b42      	ldr	r3, [pc, #264]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	021b      	lsls	r3, r3, #8
 8006f2c:	493d      	ldr	r1, [pc, #244]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d022      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f48:	d11d      	bne.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f4a:	4b36      	ldr	r3, [pc, #216]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f50:	0e1b      	lsrs	r3, r3, #24
 8006f52:	f003 030f 	and.w	r3, r3, #15
 8006f56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f58:	4b32      	ldr	r3, [pc, #200]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f5e:	0f1b      	lsrs	r3, r3, #28
 8006f60:	f003 0307 	and.w	r3, r3, #7
 8006f64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	019a      	lsls	r2, r3, #6
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	041b      	lsls	r3, r3, #16
 8006f72:	431a      	orrs	r2, r3
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	061b      	lsls	r3, r3, #24
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	071b      	lsls	r3, r3, #28
 8006f7e:	4929      	ldr	r1, [pc, #164]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0308 	and.w	r3, r3, #8
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d028      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f92:	4b24      	ldr	r3, [pc, #144]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f98:	0e1b      	lsrs	r3, r3, #24
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006fa0:	4b20      	ldr	r3, [pc, #128]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa6:	0c1b      	lsrs	r3, r3, #16
 8006fa8:	f003 0303 	and.w	r3, r3, #3
 8006fac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	019a      	lsls	r2, r3, #6
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	041b      	lsls	r3, r3, #16
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	061b      	lsls	r3, r3, #24
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	071b      	lsls	r3, r3, #28
 8006fc6:	4917      	ldr	r1, [pc, #92]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006fce:	4b15      	ldr	r3, [pc, #84]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	4911      	ldr	r1, [pc, #68]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006fe4:	4b0f      	ldr	r3, [pc, #60]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a0e      	ldr	r2, [pc, #56]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ff0:	f7fc f854 	bl	800309c <HAL_GetTick>
 8006ff4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ff6:	e008      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ff8:	f7fc f850 	bl	800309c <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b64      	cmp	r3, #100	; 0x64
 8007004:	d901      	bls.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e007      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800700a:	4b06      	ldr	r3, [pc, #24]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007016:	d1ef      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3720      	adds	r7, #32
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40023800 	.word	0x40023800

08007028 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007030:	2300      	movs	r3, #0
 8007032:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007046:	f040 8086 	bne.w	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800704a:	4b8d      	ldr	r3, [pc, #564]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800704c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007050:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007058:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007060:	d03e      	beq.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007062:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007066:	d073      	beq.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8007068:	2b00      	cmp	r3, #0
 800706a:	d000      	beq.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800706c:	e074      	b.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800706e:	4b84      	ldr	r3, [pc, #528]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d108      	bne.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800707a:	4b81      	ldr	r3, [pc, #516]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007082:	4a80      	ldr	r2, [pc, #512]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007084:	fbb2 f3f3 	udiv	r3, r2, r3
 8007088:	613b      	str	r3, [r7, #16]
 800708a:	e007      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800708c:	4b7c      	ldr	r3, [pc, #496]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007094:	4a7c      	ldr	r2, [pc, #496]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007096:	fbb2 f3f3 	udiv	r3, r2, r3
 800709a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800709c:	4b78      	ldr	r3, [pc, #480]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800709e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a2:	0e1b      	lsrs	r3, r3, #24
 80070a4:	f003 030f 	and.w	r3, r3, #15
 80070a8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80070aa:	4b75      	ldr	r3, [pc, #468]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80070ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b0:	099b      	lsrs	r3, r3, #6
 80070b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	fb02 f203 	mul.w	r2, r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80070c4:	4b6e      	ldr	r3, [pc, #440]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80070c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ca:	0a1b      	lsrs	r3, r3, #8
 80070cc:	f003 031f 	and.w	r3, r3, #31
 80070d0:	3301      	adds	r3, #1
 80070d2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070dc:	617b      	str	r3, [r7, #20]
        break;
 80070de:	e03b      	b.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80070e0:	4b67      	ldr	r3, [pc, #412]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d108      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80070ec:	4b64      	ldr	r3, [pc, #400]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070f4:	4a63      	ldr	r2, [pc, #396]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80070f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fa:	613b      	str	r3, [r7, #16]
 80070fc:	e007      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80070fe:	4b60      	ldr	r3, [pc, #384]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007106:	4a60      	ldr	r2, [pc, #384]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007108:	fbb2 f3f3 	udiv	r3, r2, r3
 800710c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800710e:	4b5c      	ldr	r3, [pc, #368]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007114:	0e1b      	lsrs	r3, r3, #24
 8007116:	f003 030f 	and.w	r3, r3, #15
 800711a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800711c:	4b58      	ldr	r3, [pc, #352]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800711e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007122:	099b      	lsrs	r3, r3, #6
 8007124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	fb02 f203 	mul.w	r2, r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	fbb2 f3f3 	udiv	r3, r2, r3
 8007134:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007136:	4b52      	ldr	r3, [pc, #328]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800713c:	f003 031f 	and.w	r3, r3, #31
 8007140:	3301      	adds	r3, #1
 8007142:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	fbb2 f3f3 	udiv	r3, r2, r3
 800714c:	617b      	str	r3, [r7, #20]
        break;
 800714e:	e003      	b.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007150:	4b4e      	ldr	r3, [pc, #312]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007152:	617b      	str	r3, [r7, #20]
        break;
 8007154:	e000      	b.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8007156:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800715e:	f040 8086 	bne.w	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007162:	4b47      	ldr	r3, [pc, #284]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007168:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007170:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007178:	d03e      	beq.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800717a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800717e:	d073      	beq.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007180:	2b00      	cmp	r3, #0
 8007182:	d000      	beq.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007184:	e074      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007186:	4b3e      	ldr	r3, [pc, #248]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d108      	bne.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007192:	4b3b      	ldr	r3, [pc, #236]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800719a:	4a3a      	ldr	r2, [pc, #232]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800719c:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a0:	613b      	str	r3, [r7, #16]
 80071a2:	e007      	b.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80071a4:	4b36      	ldr	r3, [pc, #216]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071ac:	4a36      	ldr	r2, [pc, #216]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80071ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80071b4:	4b32      	ldr	r3, [pc, #200]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80071b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ba:	0e1b      	lsrs	r3, r3, #24
 80071bc:	f003 030f 	and.w	r3, r3, #15
 80071c0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80071c2:	4b2f      	ldr	r3, [pc, #188]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80071c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071c8:	099b      	lsrs	r3, r3, #6
 80071ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	fb02 f203 	mul.w	r2, r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071da:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80071dc:	4b28      	ldr	r3, [pc, #160]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80071de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071e2:	0a1b      	lsrs	r3, r3, #8
 80071e4:	f003 031f 	and.w	r3, r3, #31
 80071e8:	3301      	adds	r3, #1
 80071ea:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f4:	617b      	str	r3, [r7, #20]
        break;
 80071f6:	e03b      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80071f8:	4b21      	ldr	r3, [pc, #132]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d108      	bne.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007204:	4b1e      	ldr	r3, [pc, #120]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800720c:	4a1d      	ldr	r2, [pc, #116]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800720e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007212:	613b      	str	r3, [r7, #16]
 8007214:	e007      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007216:	4b1a      	ldr	r3, [pc, #104]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800721e:	4a1a      	ldr	r2, [pc, #104]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007220:	fbb2 f3f3 	udiv	r3, r2, r3
 8007224:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007226:	4b16      	ldr	r3, [pc, #88]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800722c:	0e1b      	lsrs	r3, r3, #24
 800722e:	f003 030f 	and.w	r3, r3, #15
 8007232:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007234:	4b12      	ldr	r3, [pc, #72]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800723a:	099b      	lsrs	r3, r3, #6
 800723c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	fb02 f203 	mul.w	r2, r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	fbb2 f3f3 	udiv	r3, r2, r3
 800724c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800724e:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007254:	f003 031f 	and.w	r3, r3, #31
 8007258:	3301      	adds	r3, #1
 800725a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	fbb2 f3f3 	udiv	r3, r2, r3
 8007264:	617b      	str	r3, [r7, #20]
        break;
 8007266:	e003      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007268:	4b08      	ldr	r3, [pc, #32]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800726a:	617b      	str	r3, [r7, #20]
        break;
 800726c:	e000      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800726e:	bf00      	nop

  return frequency;
 8007270:	697b      	ldr	r3, [r7, #20]
}
 8007272:	4618      	mov	r0, r3
 8007274:	371c      	adds	r7, #28
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	40023800 	.word	0x40023800
 8007284:	00f42400 	.word	0x00f42400
 8007288:	017d7840 	.word	0x017d7840
 800728c:	00bb8000 	.word	0x00bb8000

08007290 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e06b      	b.n	800737a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	7f5b      	ldrb	r3, [r3, #29]
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d105      	bne.n	80072b8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7fb f9a0 	bl	80025f8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	22ca      	movs	r2, #202	; 0xca
 80072c4:	625a      	str	r2, [r3, #36]	; 0x24
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2253      	movs	r2, #83	; 0x53
 80072cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fb00 	bl	80078d4 <RTC_EnterInitMode>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d008      	beq.n	80072ec <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	22ff      	movs	r2, #255	; 0xff
 80072e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2204      	movs	r2, #4
 80072e6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e046      	b.n	800737a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6899      	ldr	r1, [r3, #8]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	4b23      	ldr	r3, [pc, #140]	; (8007384 <HAL_RTC_Init+0xf4>)
 80072f8:	400b      	ands	r3, r1
 80072fa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6899      	ldr	r1, [r3, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	431a      	orrs	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	431a      	orrs	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	68d2      	ldr	r2, [r2, #12]
 8007322:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6919      	ldr	r1, [r3, #16]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	041a      	lsls	r2, r3, #16
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007346:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0208 	bic.w	r2, r2, #8
 8007356:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	22ff      	movs	r2, #255	; 0xff
 8007370:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007378:	2300      	movs	r3, #0
  }
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	ff8fffbf 	.word	0xff8fffbf

08007388 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007388:	b590      	push	{r4, r7, lr}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	7f1b      	ldrb	r3, [r3, #28]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d101      	bne.n	80073a4 <HAL_RTC_SetTime+0x1c>
 80073a0:	2302      	movs	r3, #2
 80073a2:	e0a8      	b.n	80074f6 <HAL_RTC_SetTime+0x16e>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2201      	movs	r2, #1
 80073a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2202      	movs	r2, #2
 80073ae:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d126      	bne.n	8007404 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d102      	bne.n	80073ca <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	2200      	movs	r2, #0
 80073c8:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 faac 	bl	800792c <RTC_ByteToBcd2>
 80073d4:	4603      	mov	r3, r0
 80073d6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	785b      	ldrb	r3, [r3, #1]
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 faa5 	bl	800792c <RTC_ByteToBcd2>
 80073e2:	4603      	mov	r3, r0
 80073e4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80073e6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	789b      	ldrb	r3, [r3, #2]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fa9d 	bl	800792c <RTC_ByteToBcd2>
 80073f2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80073f4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	7b1b      	ldrb	r3, [r3, #12]
 80073fc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80073fe:	4313      	orrs	r3, r2
 8007400:	617b      	str	r3, [r7, #20]
 8007402:	e018      	b.n	8007436 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800740e:	2b00      	cmp	r3, #0
 8007410:	d102      	bne.n	8007418 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2200      	movs	r2, #0
 8007416:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	785b      	ldrb	r3, [r3, #1]
 8007422:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007424:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800742a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	7b1b      	ldrb	r3, [r3, #12]
 8007430:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	22ca      	movs	r2, #202	; 0xca
 800743c:	625a      	str	r2, [r3, #36]	; 0x24
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2253      	movs	r2, #83	; 0x53
 8007444:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 fa44 	bl	80078d4 <RTC_EnterInitMode>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00b      	beq.n	800746a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	22ff      	movs	r2, #255	; 0xff
 8007458:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2204      	movs	r2, #4
 800745e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e045      	b.n	80074f6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	6979      	ldr	r1, [r7, #20]
 8007470:	4b23      	ldr	r3, [pc, #140]	; (8007500 <HAL_RTC_SetTime+0x178>)
 8007472:	400b      	ands	r3, r1
 8007474:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007484:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6899      	ldr	r1, [r3, #8]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	691a      	ldr	r2, [r3, #16]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	431a      	orrs	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074ac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f003 0320 	and.w	r3, r3, #32
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d111      	bne.n	80074e0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f9e1 	bl	8007884 <HAL_RTC_WaitForSynchro>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00b      	beq.n	80074e0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	22ff      	movs	r2, #255	; 0xff
 80074ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2204      	movs	r2, #4
 80074d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e00a      	b.n	80074f6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	22ff      	movs	r2, #255	; 0xff
 80074e6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2201      	movs	r2, #1
 80074ec:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80074f4:	2300      	movs	r3, #0
  }
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd90      	pop	{r4, r7, pc}
 80074fe:	bf00      	nop
 8007500:	007f7f7f 	.word	0x007f7f7f

08007504 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007504:	b590      	push	{r4, r7, lr}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	7f1b      	ldrb	r3, [r3, #28]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d101      	bne.n	8007520 <HAL_RTC_SetDate+0x1c>
 800751c:	2302      	movs	r3, #2
 800751e:	e092      	b.n	8007646 <HAL_RTC_SetDate+0x142>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2201      	movs	r2, #1
 8007524:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2202      	movs	r2, #2
 800752a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10e      	bne.n	8007550 <HAL_RTC_SetDate+0x4c>
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	785b      	ldrb	r3, [r3, #1]
 8007536:	f003 0310 	and.w	r3, r3, #16
 800753a:	2b00      	cmp	r3, #0
 800753c:	d008      	beq.n	8007550 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	785b      	ldrb	r3, [r3, #1]
 8007542:	f023 0310 	bic.w	r3, r3, #16
 8007546:	b2db      	uxtb	r3, r3
 8007548:	330a      	adds	r3, #10
 800754a:	b2da      	uxtb	r2, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d11c      	bne.n	8007590 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	78db      	ldrb	r3, [r3, #3]
 800755a:	4618      	mov	r0, r3
 800755c:	f000 f9e6 	bl	800792c <RTC_ByteToBcd2>
 8007560:	4603      	mov	r3, r0
 8007562:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	785b      	ldrb	r3, [r3, #1]
 8007568:	4618      	mov	r0, r3
 800756a:	f000 f9df 	bl	800792c <RTC_ByteToBcd2>
 800756e:	4603      	mov	r3, r0
 8007570:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007572:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	789b      	ldrb	r3, [r3, #2]
 8007578:	4618      	mov	r0, r3
 800757a:	f000 f9d7 	bl	800792c <RTC_ByteToBcd2>
 800757e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007580:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800758a:	4313      	orrs	r3, r2
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	e00e      	b.n	80075ae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	78db      	ldrb	r3, [r3, #3]
 8007594:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800759c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80075a2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80075aa:	4313      	orrs	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	22ca      	movs	r2, #202	; 0xca
 80075b4:	625a      	str	r2, [r3, #36]	; 0x24
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2253      	movs	r2, #83	; 0x53
 80075bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 f988 	bl	80078d4 <RTC_EnterInitMode>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00b      	beq.n	80075e2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	22ff      	movs	r2, #255	; 0xff
 80075d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2204      	movs	r2, #4
 80075d6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e031      	b.n	8007646 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	6979      	ldr	r1, [r7, #20]
 80075e8:	4b19      	ldr	r3, [pc, #100]	; (8007650 <HAL_RTC_SetDate+0x14c>)
 80075ea:	400b      	ands	r3, r1
 80075ec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075fc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f003 0320 	and.w	r3, r3, #32
 8007608:	2b00      	cmp	r3, #0
 800760a:	d111      	bne.n	8007630 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 f939 	bl	8007884 <HAL_RTC_WaitForSynchro>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00b      	beq.n	8007630 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	22ff      	movs	r2, #255	; 0xff
 800761e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2204      	movs	r2, #4
 8007624:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e00a      	b.n	8007646 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	22ff      	movs	r2, #255	; 0xff
 8007636:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2201      	movs	r2, #1
 800763c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007644:	2300      	movs	r3, #0
  }
}
 8007646:	4618      	mov	r0, r3
 8007648:	371c      	adds	r7, #28
 800764a:	46bd      	mov	sp, r7
 800764c:	bd90      	pop	{r4, r7, pc}
 800764e:	bf00      	nop
 8007650:	00ffff3f 	.word	0x00ffff3f

08007654 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007654:	b590      	push	{r4, r7, lr}
 8007656:	b089      	sub	sp, #36	; 0x24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007660:	2300      	movs	r3, #0
 8007662:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007664:	2300      	movs	r3, #0
 8007666:	61fb      	str	r3, [r7, #28]
 8007668:	2300      	movs	r3, #0
 800766a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	7f1b      	ldrb	r3, [r3, #28]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d101      	bne.n	8007678 <HAL_RTC_SetAlarm+0x24>
 8007674:	2302      	movs	r3, #2
 8007676:	e101      	b.n	800787c <HAL_RTC_SetAlarm+0x228>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2201      	movs	r2, #1
 800767c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2202      	movs	r2, #2
 8007682:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d137      	bne.n	80076fa <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	d102      	bne.n	800769e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2200      	movs	r2, #0
 800769c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 f942 	bl	800792c <RTC_ByteToBcd2>
 80076a8:	4603      	mov	r3, r0
 80076aa:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	785b      	ldrb	r3, [r3, #1]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 f93b 	bl	800792c <RTC_ByteToBcd2>
 80076b6:	4603      	mov	r3, r0
 80076b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80076ba:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	789b      	ldrb	r3, [r3, #2]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 f933 	bl	800792c <RTC_ByteToBcd2>
 80076c6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80076c8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	7b1b      	ldrb	r3, [r3, #12]
 80076d0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80076d2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 f925 	bl	800792c <RTC_ByteToBcd2>
 80076e2:	4603      	mov	r3, r0
 80076e4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80076e6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80076ee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80076f4:	4313      	orrs	r3, r2
 80076f6:	61fb      	str	r3, [r7, #28]
 80076f8:	e023      	b.n	8007742 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007704:	2b00      	cmp	r3, #0
 8007706:	d102      	bne.n	800770e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2200      	movs	r2, #0
 800770c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	785b      	ldrb	r3, [r3, #1]
 8007718:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800771a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007720:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	7b1b      	ldrb	r3, [r3, #12]
 8007726:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007728:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007730:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007732:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007738:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800773e:	4313      	orrs	r3, r2
 8007740:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	4313      	orrs	r3, r2
 800774c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	22ca      	movs	r2, #202	; 0xca
 8007754:	625a      	str	r2, [r3, #36]	; 0x24
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2253      	movs	r2, #83	; 0x53
 800775c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007766:	d13f      	bne.n	80077e8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689a      	ldr	r2, [r3, #8]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007776:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007786:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007788:	f7fb fc88 	bl	800309c <HAL_GetTick>
 800778c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800778e:	e013      	b.n	80077b8 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007790:	f7fb fc84 	bl	800309c <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800779e:	d90b      	bls.n	80077b8 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	22ff      	movs	r2, #255	; 0xff
 80077a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2203      	movs	r2, #3
 80077ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e061      	b.n	800787c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d0e4      	beq.n	8007790 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69fa      	ldr	r2, [r7, #28]
 80077cc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077e4:	609a      	str	r2, [r3, #8]
 80077e6:	e03e      	b.n	8007866 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80077f6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689a      	ldr	r2, [r3, #8]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007806:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007808:	f7fb fc48 	bl	800309c <HAL_GetTick>
 800780c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800780e:	e013      	b.n	8007838 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007810:	f7fb fc44 	bl	800309c <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800781e:	d90b      	bls.n	8007838 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	22ff      	movs	r2, #255	; 0xff
 8007826:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2203      	movs	r2, #3
 800782c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e021      	b.n	800787c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0e4      	beq.n	8007810 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69fa      	ldr	r2, [r7, #28]
 800784c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007864:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	22ff      	movs	r2, #255	; 0xff
 800786c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3724      	adds	r7, #36	; 0x24
 8007880:	46bd      	mov	sp, r7
 8007882:	bd90      	pop	{r4, r7, pc}

08007884 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800788c:	2300      	movs	r3, #0
 800788e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68da      	ldr	r2, [r3, #12]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800789e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078a0:	f7fb fbfc 	bl	800309c <HAL_GetTick>
 80078a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80078a6:	e009      	b.n	80078bc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80078a8:	f7fb fbf8 	bl	800309c <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078b6:	d901      	bls.n	80078bc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e007      	b.n	80078cc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f003 0320 	and.w	r3, r3, #32
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0ee      	beq.n	80078a8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80078dc:	2300      	movs	r3, #0
 80078de:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d119      	bne.n	8007922 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f04f 32ff 	mov.w	r2, #4294967295
 80078f6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078f8:	f7fb fbd0 	bl	800309c <HAL_GetTick>
 80078fc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80078fe:	e009      	b.n	8007914 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007900:	f7fb fbcc 	bl	800309c <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800790e:	d901      	bls.n	8007914 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e007      	b.n	8007924 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0ee      	beq.n	8007900 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	4603      	mov	r3, r0
 8007934:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800793a:	e005      	b.n	8007948 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3301      	adds	r3, #1
 8007940:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	3b0a      	subs	r3, #10
 8007946:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007948:	79fb      	ldrb	r3, [r7, #7]
 800794a:	2b09      	cmp	r3, #9
 800794c:	d8f6      	bhi.n	800793c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	b2da      	uxtb	r2, r3
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	4313      	orrs	r3, r2
 800795a:	b2db      	uxtb	r3, r3
}
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	7f1b      	ldrb	r3, [r3, #28]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d101      	bne.n	8007984 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007980:	2302      	movs	r3, #2
 8007982:	e03e      	b.n	8007a02 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2201      	movs	r2, #1
 8007988:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2202      	movs	r2, #2
 800798e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689a      	ldr	r2, [r3, #8]
 8007996:	4b1e      	ldr	r3, [pc, #120]	; (8007a10 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007998:	4013      	ands	r3, r2
 800799a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	22ca      	movs	r2, #202	; 0xca
 80079aa:	625a      	str	r2, [r3, #36]	; 0x24
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2253      	movs	r2, #83	; 0x53
 80079b2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0206 	bic.w	r2, r2, #6
 80079c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689a      	ldr	r2, [r3, #8]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079ea:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	22ff      	movs	r2, #255	; 0xff
 80079f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2201      	movs	r2, #1
 80079f8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	371c      	adds	r7, #28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	fffff7f7 	.word	0xfffff7f7

08007a14 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b088      	sub	sp, #32
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007a20:	2300      	movs	r3, #0
 8007a22:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e149      	b.n	8007cc6 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d106      	bne.n	8007a4c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7fb f8fe 	bl	8002c48 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f94f 	bl	8007cf8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d007      	beq.n	8007a72 <HAL_SAI_Init+0x5e>
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d302      	bcc.n	8007a6c <HAL_SAI_Init+0x58>
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d006      	beq.n	8007a78 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8007a6a:	e008      	b.n	8007a7e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	61fb      	str	r3, [r7, #28]
      break;
 8007a70:	e005      	b.n	8007a7e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007a72:	2310      	movs	r3, #16
 8007a74:	61fb      	str	r3, [r7, #28]
      break;
 8007a76:	e002      	b.n	8007a7e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007a78:	2320      	movs	r3, #32
 8007a7a:	61fb      	str	r3, [r7, #28]
      break;
 8007a7c:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d81d      	bhi.n	8007ac2 <HAL_SAI_Init+0xae>
 8007a86:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <HAL_SAI_Init+0x78>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007a9d 	.word	0x08007a9d
 8007a90:	08007aa3 	.word	0x08007aa3
 8007a94:	08007aab 	.word	0x08007aab
 8007a98:	08007ab3 	.word	0x08007ab3
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007aa0:	e010      	b.n	8007ac4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aa6:	617b      	str	r3, [r7, #20]
      }
      break;
 8007aa8:	e00c      	b.n	8007ac4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007aaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007aae:	617b      	str	r3, [r7, #20]
      }
      break;
 8007ab0:	e008      	b.n	8007ac4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ab6:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	f043 0301 	orr.w	r3, r3, #1
 8007abe:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007ac0:	e000      	b.n	8007ac4 <HAL_SAI_Init+0xb0>
  default:
    break;
 8007ac2:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a81      	ldr	r2, [pc, #516]	; (8007cd0 <HAL_SAI_Init+0x2bc>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d004      	beq.n	8007ad8 <HAL_SAI_Init+0xc4>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a80      	ldr	r2, [pc, #512]	; (8007cd4 <HAL_SAI_Init+0x2c0>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d103      	bne.n	8007ae0 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007ad8:	4a7f      	ldr	r2, [pc, #508]	; (8007cd8 <HAL_SAI_Init+0x2c4>)
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	6013      	str	r3, [r2, #0]
 8007ade:	e002      	b.n	8007ae6 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007ae0:	4a7e      	ldr	r2, [pc, #504]	; (8007cdc <HAL_SAI_Init+0x2c8>)
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d043      	beq.n	8007b76 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a76      	ldr	r2, [pc, #472]	; (8007cd0 <HAL_SAI_Init+0x2bc>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d004      	beq.n	8007b06 <HAL_SAI_Init+0xf2>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a74      	ldr	r2, [pc, #464]	; (8007cd4 <HAL_SAI_Init+0x2c0>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d104      	bne.n	8007b10 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007b06:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007b0a:	f7ff fa8d 	bl	8007028 <HAL_RCCEx_GetPeriphCLKFreq>
 8007b0e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a72      	ldr	r2, [pc, #456]	; (8007ce0 <HAL_SAI_Init+0x2cc>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d004      	beq.n	8007b24 <HAL_SAI_Init+0x110>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a71      	ldr	r2, [pc, #452]	; (8007ce4 <HAL_SAI_Init+0x2d0>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d104      	bne.n	8007b2e <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007b24:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007b28:	f7ff fa7e 	bl	8007028 <HAL_RCCEx_GetPeriphCLKFreq>
 8007b2c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4613      	mov	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	005b      	lsls	r3, r3, #1
 8007b38:	461a      	mov	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	025b      	lsls	r3, r3, #9
 8007b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b44:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	4a67      	ldr	r2, [pc, #412]	; (8007ce8 <HAL_SAI_Init+0x2d4>)
 8007b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4e:	08da      	lsrs	r2, r3, #3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8007b54:	68f9      	ldr	r1, [r7, #12]
 8007b56:	4b64      	ldr	r3, [pc, #400]	; (8007ce8 <HAL_SAI_Init+0x2d4>)
 8007b58:	fba3 2301 	umull	r2, r3, r3, r1
 8007b5c:	08da      	lsrs	r2, r3, #3
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	1aca      	subs	r2, r1, r3
 8007b68:	2a08      	cmp	r2, #8
 8007b6a:	d904      	bls.n	8007b76 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <HAL_SAI_Init+0x172>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d109      	bne.n	8007b9a <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d101      	bne.n	8007b92 <HAL_SAI_Init+0x17e>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e001      	b.n	8007b96 <HAL_SAI_Init+0x182>
 8007b92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b96:	61bb      	str	r3, [r7, #24]
 8007b98:	e008      	b.n	8007bac <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d102      	bne.n	8007ba8 <HAL_SAI_Init+0x194>
 8007ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ba6:	e000      	b.n	8007baa <HAL_SAI_Init+0x196>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6819      	ldr	r1, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	4b4d      	ldr	r3, [pc, #308]	; (8007cec <HAL_SAI_Init+0x2d8>)
 8007bb8:	400b      	ands	r3, r1
 8007bba:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6819      	ldr	r1, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bca:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007bd0:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	431a      	orrs	r2, r3
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8007be4:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007bf0:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	051b      	lsls	r3, r3, #20
 8007bf8:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6859      	ldr	r1, [r3, #4]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	4b38      	ldr	r3, [pc, #224]	; (8007cf0 <HAL_SAI_Init+0x2dc>)
 8007c0e:	400b      	ands	r3, r1
 8007c10:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6859      	ldr	r1, [r3, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699a      	ldr	r2, [r3, #24]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c20:	431a      	orrs	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6899      	ldr	r1, [r3, #8]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	4b2e      	ldr	r3, [pc, #184]	; (8007cf4 <HAL_SAI_Init+0x2e0>)
 8007c3c:	400b      	ands	r3, r1
 8007c3e:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6899      	ldr	r1, [r3, #8]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007c50:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8007c56:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8007c5c:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c62:	3b01      	subs	r3, #1
 8007c64:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8007c66:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68d9      	ldr	r1, [r3, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007c7e:	400b      	ands	r3, r1
 8007c80:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68d9      	ldr	r1, [r3, #12]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c90:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c96:	041b      	lsls	r3, r3, #16
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3720      	adds	r7, #32
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	40015804 	.word	0x40015804
 8007cd4:	40015824 	.word	0x40015824
 8007cd8:	40015800 	.word	0x40015800
 8007cdc:	40015c00 	.word	0x40015c00
 8007ce0:	40015c04 	.word	0x40015c04
 8007ce4:	40015c24 	.word	0x40015c24
 8007ce8:	cccccccd 	.word	0xcccccccd
 8007cec:	ff05c010 	.word	0xff05c010
 8007cf0:	ffff1ff0 	.word	0xffff1ff0
 8007cf4:	fff88000 	.word	0xfff88000

08007cf8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007cf8:	b490      	push	{r4, r7}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8007d00:	4b16      	ldr	r3, [pc, #88]	; (8007d5c <SAI_Disable+0x64>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a16      	ldr	r2, [pc, #88]	; (8007d60 <SAI_Disable+0x68>)
 8007d06:	fba2 2303 	umull	r2, r3, r2, r3
 8007d0a:	0b1b      	lsrs	r3, r3, #12
 8007d0c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007d20:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007d22:	4623      	mov	r3, r4
 8007d24:	1e5c      	subs	r4, r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10a      	bne.n	8007d40 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d3e:	e006      	b.n	8007d4e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e9      	bne.n	8007d22 <SAI_Disable+0x2a>

  return status;
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bc90      	pop	{r4, r7}
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	2000002c 	.word	0x2000002c
 8007d60:	95cbec1b 	.word	0x95cbec1b

08007d64 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e022      	b.n	8007dbc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d105      	bne.n	8007d8e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7fa fc4f 	bl	800262c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2203      	movs	r2, #3
 8007d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f814 	bl	8007dc4 <HAL_SD_InitCard>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d001      	beq.n	8007da6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e00a      	b.n	8007dbc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007dc4:	b5b0      	push	{r4, r5, r7, lr}
 8007dc6:	b08e      	sub	sp, #56	; 0x38
 8007dc8:	af04      	add	r7, sp, #16
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007de0:	2376      	movs	r3, #118	; 0x76
 8007de2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681d      	ldr	r5, [r3, #0]
 8007de8:	466c      	mov	r4, sp
 8007dea:	f107 0314 	add.w	r3, r7, #20
 8007dee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007df2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007df6:	f107 0308 	add.w	r3, r7, #8
 8007dfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f003 f869 	bl	800aed4 <SDMMC_Init>
 8007e02:	4603      	mov	r3, r0
 8007e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e03b      	b.n	8007e8c <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e22:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f003 f88c 	bl	800af46 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e3c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fde6 	bl	8008a10 <SD_PowerON>
 8007e44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00b      	beq.n	8007e64 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e013      	b.n	8007e8c <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fd05 	bl	8008874 <SD_InitCard>
 8007e6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00b      	beq.n	8007e8a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	431a      	orrs	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e000      	b.n	8007e8c <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3728      	adds	r7, #40	; 0x28
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bdb0      	pop	{r4, r5, r7, pc}

08007e94 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08c      	sub	sp, #48	; 0x30
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d107      	bne.n	8007ebc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e0cc      	b.n	8008056 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	f040 80c5 	bne.w	8008054 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	441a      	add	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d907      	bls.n	8007eee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e0b3      	b.n	8008056 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2203      	movs	r2, #3
 8007ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2200      	movs	r2, #0
 8007efc:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007f0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f12:	4a53      	ldr	r2, [pc, #332]	; (8008060 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8007f14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	4a52      	ldr	r2, [pc, #328]	; (8008064 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8007f1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	2200      	movs	r2, #0
 8007f24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3380      	adds	r3, #128	; 0x80
 8007f30:	4619      	mov	r1, r3
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	025b      	lsls	r3, r3, #9
 8007f38:	089b      	lsrs	r3, r3, #2
 8007f3a:	f7fb fddb 	bl	8003af4 <HAL_DMA_Start_IT>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d017      	beq.n	8007f74 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007f52:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a43      	ldr	r2, [pc, #268]	; (8008068 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007f5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e070      	b.n	8008056 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f042 0208 	orr.w	r2, r2, #8
 8007f82:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d002      	beq.n	8007f92 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	025b      	lsls	r3, r3, #9
 8007f90:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f003 f866 	bl	800b06c <SDMMC_CmdBlockLength>
 8007fa0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00f      	beq.n	8007fc8 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a2e      	ldr	r2, [pc, #184]	; (8008068 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8007fae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e046      	b.n	8008056 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fcc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	025b      	lsls	r3, r3, #9
 8007fd2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007fd4:	2390      	movs	r3, #144	; 0x90
 8007fd6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007fd8:	2302      	movs	r3, #2
 8007fda:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f107 0210 	add.w	r2, r7, #16
 8007fec:	4611      	mov	r1, r2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f003 f810 	bl	800b014 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d90a      	bls.n	8008010 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2282      	movs	r2, #130	; 0x82
 8007ffe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008006:	4618      	mov	r0, r3
 8008008:	f003 f874 	bl	800b0f4 <SDMMC_CmdReadMultiBlock>
 800800c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800800e:	e009      	b.n	8008024 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2281      	movs	r2, #129	; 0x81
 8008014:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800801c:	4618      	mov	r0, r3
 800801e:	f003 f847 	bl	800b0b0 <SDMMC_CmdReadSingleBlock>
 8008022:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008026:	2b00      	cmp	r3, #0
 8008028:	d012      	beq.n	8008050 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a0e      	ldr	r2, [pc, #56]	; (8008068 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008030:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008038:	431a      	orrs	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e002      	b.n	8008056 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	e000      	b.n	8008056 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008054:	2302      	movs	r3, #2
  }
}
 8008056:	4618      	mov	r0, r3
 8008058:	3730      	adds	r7, #48	; 0x30
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	0800875f 	.word	0x0800875f
 8008064:	080087d1 	.word	0x080087d1
 8008068:	004005ff 	.word	0x004005ff

0800806c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08c      	sub	sp, #48	; 0x30
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d107      	bne.n	8008094 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008088:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e0cf      	b.n	8008234 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b01      	cmp	r3, #1
 800809e:	f040 80c8 	bne.w	8008232 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80080a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	441a      	add	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d907      	bls.n	80080c6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e0b6      	b.n	8008234 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2203      	movs	r2, #3
 80080ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2200      	movs	r2, #0
 80080d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f042 021a 	orr.w	r2, r2, #26
 80080e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ea:	4a54      	ldr	r2, [pc, #336]	; (800823c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80080ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f2:	4a53      	ldr	r2, [pc, #332]	; (8008240 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80080f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fa:	2200      	movs	r2, #0
 80080fc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008102:	2b01      	cmp	r3, #1
 8008104:	d002      	beq.n	800810c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008108:	025b      	lsls	r3, r3, #9
 800810a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008114:	4618      	mov	r0, r3
 8008116:	f002 ffa9 	bl	800b06c <SDMMC_CmdBlockLength>
 800811a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800811c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00f      	beq.n	8008142 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a47      	ldr	r2, [pc, #284]	; (8008244 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008128:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008130:	431a      	orrs	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e078      	b.n	8008234 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d90a      	bls.n	800815e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	22a0      	movs	r2, #160	; 0xa0
 800814c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008154:	4618      	mov	r0, r3
 8008156:	f003 f811 	bl	800b17c <SDMMC_CmdWriteMultiBlock>
 800815a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800815c:	e009      	b.n	8008172 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2290      	movs	r2, #144	; 0x90
 8008162:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800816a:	4618      	mov	r0, r3
 800816c:	f002 ffe4 	bl	800b138 <SDMMC_CmdWriteSingleBlock>
 8008170:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008174:	2b00      	cmp	r3, #0
 8008176:	d012      	beq.n	800819e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a31      	ldr	r2, [pc, #196]	; (8008244 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800817e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008186:	431a      	orrs	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e04a      	b.n	8008234 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f042 0208 	orr.w	r2, r2, #8
 80081ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80081b2:	68b9      	ldr	r1, [r7, #8]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3380      	adds	r3, #128	; 0x80
 80081ba:	461a      	mov	r2, r3
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	025b      	lsls	r3, r3, #9
 80081c0:	089b      	lsrs	r3, r3, #2
 80081c2:	f7fb fc97 	bl	8003af4 <HAL_DMA_Start_IT>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d01a      	beq.n	8008202 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 021a 	bic.w	r2, r2, #26
 80081da:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a18      	ldr	r2, [pc, #96]	; (8008244 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80081e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e018      	b.n	8008234 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008202:	f04f 33ff 	mov.w	r3, #4294967295
 8008206:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	025b      	lsls	r3, r3, #9
 800820c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800820e:	2390      	movs	r3, #144	; 0x90
 8008210:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008212:	2300      	movs	r3, #0
 8008214:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008216:	2300      	movs	r3, #0
 8008218:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800821a:	2301      	movs	r3, #1
 800821c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f107 0210 	add.w	r2, r7, #16
 8008226:	4611      	mov	r1, r2
 8008228:	4618      	mov	r0, r3
 800822a:	f002 fef3 	bl	800b014 <SDMMC_ConfigData>

      return HAL_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	e000      	b.n	8008234 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8008232:	2302      	movs	r3, #2
  }
}
 8008234:	4618      	mov	r0, r3
 8008236:	3730      	adds	r7, #48	; 0x30
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	08008735 	.word	0x08008735
 8008240:	080087d1 	.word	0x080087d1
 8008244:	004005ff 	.word	0x004005ff

08008248 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800826a:	0f9b      	lsrs	r3, r3, #30
 800826c:	b2da      	uxtb	r2, r3
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008276:	0e9b      	lsrs	r3, r3, #26
 8008278:	b2db      	uxtb	r3, r3
 800827a:	f003 030f 	and.w	r3, r3, #15
 800827e:	b2da      	uxtb	r2, r3
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008288:	0e1b      	lsrs	r3, r3, #24
 800828a:	b2db      	uxtb	r3, r3
 800828c:	f003 0303 	and.w	r3, r3, #3
 8008290:	b2da      	uxtb	r2, r3
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800829a:	0c1b      	lsrs	r3, r3, #16
 800829c:	b2da      	uxtb	r2, r3
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082a6:	0a1b      	lsrs	r3, r3, #8
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082bc:	0d1b      	lsrs	r3, r3, #20
 80082be:	b29a      	uxth	r2, r3
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082c8:	0c1b      	lsrs	r3, r3, #16
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	f003 030f 	and.w	r3, r3, #15
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082da:	0bdb      	lsrs	r3, r3, #15
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082ec:	0b9b      	lsrs	r3, r3, #14
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	f003 0301 	and.w	r3, r3, #1
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082fe:	0b5b      	lsrs	r3, r3, #13
 8008300:	b2db      	uxtb	r3, r3
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	b2da      	uxtb	r2, r3
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008310:	0b1b      	lsrs	r3, r3, #12
 8008312:	b2db      	uxtb	r3, r3
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	b2da      	uxtb	r2, r3
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2200      	movs	r2, #0
 8008322:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008328:	2b00      	cmp	r3, #0
 800832a:	d163      	bne.n	80083f4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008330:	009a      	lsls	r2, r3, #2
 8008332:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008336:	4013      	ands	r3, r2
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800833c:	0f92      	lsrs	r2, r2, #30
 800833e:	431a      	orrs	r2, r3
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008348:	0edb      	lsrs	r3, r3, #27
 800834a:	b2db      	uxtb	r3, r3
 800834c:	f003 0307 	and.w	r3, r3, #7
 8008350:	b2da      	uxtb	r2, r3
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800835a:	0e1b      	lsrs	r3, r3, #24
 800835c:	b2db      	uxtb	r3, r3
 800835e:	f003 0307 	and.w	r3, r3, #7
 8008362:	b2da      	uxtb	r2, r3
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800836c:	0d5b      	lsrs	r3, r3, #21
 800836e:	b2db      	uxtb	r3, r3
 8008370:	f003 0307 	and.w	r3, r3, #7
 8008374:	b2da      	uxtb	r2, r3
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800837e:	0c9b      	lsrs	r3, r3, #18
 8008380:	b2db      	uxtb	r3, r3
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	b2da      	uxtb	r2, r3
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008390:	0bdb      	lsrs	r3, r3, #15
 8008392:	b2db      	uxtb	r3, r3
 8008394:	f003 0307 	and.w	r3, r3, #7
 8008398:	b2da      	uxtb	r2, r3
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	1c5a      	adds	r2, r3, #1
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	7e1b      	ldrb	r3, [r3, #24]
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	f003 0307 	and.w	r3, r3, #7
 80083b2:	3302      	adds	r3, #2
 80083b4:	2201      	movs	r2, #1
 80083b6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80083be:	fb02 f203 	mul.w	r2, r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	7a1b      	ldrb	r3, [r3, #8]
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	f003 030f 	and.w	r3, r3, #15
 80083d0:	2201      	movs	r2, #1
 80083d2:	409a      	lsls	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80083e0:	0a52      	lsrs	r2, r2, #9
 80083e2:	fb02 f203 	mul.w	r2, r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083f0:	661a      	str	r2, [r3, #96]	; 0x60
 80083f2:	e031      	b.n	8008458 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d11d      	bne.n	8008438 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008400:	041b      	lsls	r3, r3, #16
 8008402:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800840a:	0c1b      	lsrs	r3, r3, #16
 800840c:	431a      	orrs	r2, r3
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	3301      	adds	r3, #1
 8008418:	029a      	lsls	r2, r3, #10
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800842c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	661a      	str	r2, [r3, #96]	; 0x60
 8008436:	e00f      	b.n	8008458 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a58      	ldr	r2, [pc, #352]	; (80085a0 <HAL_SD_GetCardCSD+0x344>)
 800843e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008444:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e09d      	b.n	8008594 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800845c:	0b9b      	lsrs	r3, r3, #14
 800845e:	b2db      	uxtb	r3, r3
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	b2da      	uxtb	r2, r3
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800846e:	09db      	lsrs	r3, r3, #7
 8008470:	b2db      	uxtb	r3, r3
 8008472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008476:	b2da      	uxtb	r2, r3
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008480:	b2db      	uxtb	r3, r3
 8008482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008486:	b2da      	uxtb	r2, r3
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008490:	0fdb      	lsrs	r3, r3, #31
 8008492:	b2da      	uxtb	r2, r3
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849c:	0f5b      	lsrs	r3, r3, #29
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	f003 0303 	and.w	r3, r3, #3
 80084a4:	b2da      	uxtb	r2, r3
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ae:	0e9b      	lsrs	r3, r3, #26
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c0:	0d9b      	lsrs	r3, r3, #22
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	f003 030f 	and.w	r3, r3, #15
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d2:	0d5b      	lsrs	r3, r3, #21
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ee:	0c1b      	lsrs	r3, r3, #16
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008502:	0bdb      	lsrs	r3, r3, #15
 8008504:	b2db      	uxtb	r3, r3
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	b2da      	uxtb	r2, r3
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008516:	0b9b      	lsrs	r3, r3, #14
 8008518:	b2db      	uxtb	r3, r3
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	b2da      	uxtb	r2, r3
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800852a:	0b5b      	lsrs	r3, r3, #13
 800852c:	b2db      	uxtb	r3, r3
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	b2da      	uxtb	r2, r3
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800853e:	0b1b      	lsrs	r3, r3, #12
 8008540:	b2db      	uxtb	r3, r3
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	b2da      	uxtb	r2, r3
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008552:	0a9b      	lsrs	r3, r3, #10
 8008554:	b2db      	uxtb	r3, r3
 8008556:	f003 0303 	and.w	r3, r3, #3
 800855a:	b2da      	uxtb	r2, r3
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008566:	0a1b      	lsrs	r3, r3, #8
 8008568:	b2db      	uxtb	r3, r3
 800856a:	f003 0303 	and.w	r3, r3, #3
 800856e:	b2da      	uxtb	r2, r3
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857a:	085b      	lsrs	r3, r3, #1
 800857c:	b2db      	uxtb	r3, r3
 800857e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008582:	b2da      	uxtb	r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	004005ff 	.word	0x004005ff

080085a4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80085fc:	b5b0      	push	{r4, r5, r7, lr}
 80085fe:	b08e      	sub	sp, #56	; 0x38
 8008600:	af04      	add	r7, sp, #16
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2203      	movs	r2, #3
 800860a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008612:	2b03      	cmp	r3, #3
 8008614:	d02e      	beq.n	8008674 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800861c:	d106      	bne.n	800862c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008622:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	639a      	str	r2, [r3, #56]	; 0x38
 800862a:	e029      	b.n	8008680 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008632:	d10a      	bne.n	800864a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 faa1 	bl	8008b7c <SD_WideBus_Enable>
 800863a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	431a      	orrs	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	639a      	str	r2, [r3, #56]	; 0x38
 8008648:	e01a      	b.n	8008680 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fade 	bl	8008c12 <SD_WideBus_Disable>
 8008656:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	431a      	orrs	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	639a      	str	r2, [r3, #56]	; 0x38
 8008664:	e00c      	b.n	8008680 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	639a      	str	r2, [r3, #56]	; 0x38
 8008672:	e005      	b.n	8008680 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008684:	2b00      	cmp	r3, #0
 8008686:	d009      	beq.n	800869c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a18      	ldr	r2, [pc, #96]	; (80086f0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800868e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e024      	b.n	80086e6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681d      	ldr	r5, [r3, #0]
 80086c2:	466c      	mov	r4, sp
 80086c4:	f107 0318 	add.w	r3, r7, #24
 80086c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80086cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086d0:	f107 030c 	add.w	r3, r7, #12
 80086d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086d6:	4628      	mov	r0, r5
 80086d8:	f002 fbfc 	bl	800aed4 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3728      	adds	r7, #40	; 0x28
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bdb0      	pop	{r4, r5, r7, pc}
 80086ee:	bf00      	nop
 80086f0:	004005ff 	.word	0x004005ff

080086f4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008700:	f107 030c 	add.w	r3, r7, #12
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fa10 	bl	8008b2c <SD_SendStatus>
 800870c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d005      	beq.n	8008720 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	431a      	orrs	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	0a5b      	lsrs	r3, r3, #9
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800872a:	693b      	ldr	r3, [r7, #16]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008740:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008750:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008752:	bf00      	nop
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008770:	2b82      	cmp	r3, #130	; 0x82
 8008772:	d111      	bne.n	8008798 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4618      	mov	r0, r3
 800877a:	f002 fd21 	bl	800b1c0 <SDMMC_CmdStopTransfer>
 800877e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d008      	beq.n	8008798 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	431a      	orrs	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f7ff fd58 	bl	8008248 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f022 0208 	bic.w	r2, r2, #8
 80087a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f240 523a 	movw	r2, #1338	; 0x53a
 80087b0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f003 f967 	bl	800ba94 <HAL_SD_RxCpltCallback>
#endif
}
 80087c6:	bf00      	nop
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
	...

080087d0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087dc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7fb fa0a 	bl	8003bf8 <HAL_DMA_GetError>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d03e      	beq.n	8008868 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d002      	beq.n	8008806 <SD_DMAError+0x36>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d12d      	bne.n	8008862 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a19      	ldr	r2, [pc, #100]	; (8008870 <SD_DMAError+0xa0>)
 800880c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800881c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008822:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800882a:	6978      	ldr	r0, [r7, #20]
 800882c:	f7ff ff62 	bl	80086f4 <HAL_SD_GetCardState>
 8008830:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2b06      	cmp	r3, #6
 8008836:	d002      	beq.n	800883e <SD_DMAError+0x6e>
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2b05      	cmp	r3, #5
 800883c:	d10a      	bne.n	8008854 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4618      	mov	r0, r3
 8008844:	f002 fcbc 	bl	800b1c0 <SDMMC_CmdStopTransfer>
 8008848:	4602      	mov	r2, r0
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884e:	431a      	orrs	r2, r3
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	2200      	movs	r2, #0
 8008860:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008862:	6978      	ldr	r0, [r7, #20]
 8008864:	f7ff fcf0 	bl	8008248 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008868:	bf00      	nop
 800886a:	3718      	adds	r7, #24
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	004005ff 	.word	0x004005ff

08008874 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008874:	b5b0      	push	{r4, r5, r7, lr}
 8008876:	b094      	sub	sp, #80	; 0x50
 8008878:	af04      	add	r7, sp, #16
 800887a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800887c:	2301      	movs	r3, #1
 800887e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4618      	mov	r0, r3
 8008886:	f002 fb6d 	bl	800af64 <SDMMC_GetPowerState>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d102      	bne.n	8008896 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008890:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008894:	e0b7      	b.n	8008a06 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800889a:	2b03      	cmp	r3, #3
 800889c:	d02f      	beq.n	80088fe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f002 fd97 	bl	800b3d6 <SDMMC_CmdSendCID>
 80088a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80088aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <SD_InitCard+0x40>
    {
      return errorstate;
 80088b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b2:	e0a8      	b.n	8008a06 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2100      	movs	r1, #0
 80088ba:	4618      	mov	r0, r3
 80088bc:	f002 fb97 	bl	800afee <SDMMC_GetResponse>
 80088c0:	4602      	mov	r2, r0
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2104      	movs	r1, #4
 80088cc:	4618      	mov	r0, r3
 80088ce:	f002 fb8e 	bl	800afee <SDMMC_GetResponse>
 80088d2:	4602      	mov	r2, r0
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2108      	movs	r1, #8
 80088de:	4618      	mov	r0, r3
 80088e0:	f002 fb85 	bl	800afee <SDMMC_GetResponse>
 80088e4:	4602      	mov	r2, r0
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	210c      	movs	r1, #12
 80088f0:	4618      	mov	r0, r3
 80088f2:	f002 fb7c 	bl	800afee <SDMMC_GetResponse>
 80088f6:	4602      	mov	r2, r0
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008902:	2b03      	cmp	r3, #3
 8008904:	d00d      	beq.n	8008922 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f107 020e 	add.w	r2, r7, #14
 800890e:	4611      	mov	r1, r2
 8008910:	4618      	mov	r0, r3
 8008912:	f002 fd9d 	bl	800b450 <SDMMC_CmdSetRelAdd>
 8008916:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <SD_InitCard+0xae>
    {
      return errorstate;
 800891e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008920:	e071      	b.n	8008a06 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008926:	2b03      	cmp	r3, #3
 8008928:	d036      	beq.n	8008998 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800892a:	89fb      	ldrh	r3, [r7, #14]
 800892c:	461a      	mov	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800893a:	041b      	lsls	r3, r3, #16
 800893c:	4619      	mov	r1, r3
 800893e:	4610      	mov	r0, r2
 8008940:	f002 fd67 	bl	800b412 <SDMMC_CmdSendCSD>
 8008944:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008948:	2b00      	cmp	r3, #0
 800894a:	d001      	beq.n	8008950 <SD_InitCard+0xdc>
    {
      return errorstate;
 800894c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800894e:	e05a      	b.n	8008a06 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2100      	movs	r1, #0
 8008956:	4618      	mov	r0, r3
 8008958:	f002 fb49 	bl	800afee <SDMMC_GetResponse>
 800895c:	4602      	mov	r2, r0
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2104      	movs	r1, #4
 8008968:	4618      	mov	r0, r3
 800896a:	f002 fb40 	bl	800afee <SDMMC_GetResponse>
 800896e:	4602      	mov	r2, r0
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2108      	movs	r1, #8
 800897a:	4618      	mov	r0, r3
 800897c:	f002 fb37 	bl	800afee <SDMMC_GetResponse>
 8008980:	4602      	mov	r2, r0
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	210c      	movs	r1, #12
 800898c:	4618      	mov	r0, r3
 800898e:	f002 fb2e 	bl	800afee <SDMMC_GetResponse>
 8008992:	4602      	mov	r2, r0
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2104      	movs	r1, #4
 800899e:	4618      	mov	r0, r3
 80089a0:	f002 fb25 	bl	800afee <SDMMC_GetResponse>
 80089a4:	4603      	mov	r3, r0
 80089a6:	0d1a      	lsrs	r2, r3, #20
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80089ac:	f107 0310 	add.w	r3, r7, #16
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f7ff fc52 	bl	800825c <HAL_SD_GetCardCSD>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d002      	beq.n	80089c4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80089c2:	e020      	b.n	8008a06 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6819      	ldr	r1, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089cc:	041b      	lsls	r3, r3, #16
 80089ce:	f04f 0400 	mov.w	r4, #0
 80089d2:	461a      	mov	r2, r3
 80089d4:	4623      	mov	r3, r4
 80089d6:	4608      	mov	r0, r1
 80089d8:	f002 fc14 	bl	800b204 <SDMMC_CmdSelDesel>
 80089dc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80089de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <SD_InitCard+0x174>
  {
    return errorstate;
 80089e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e6:	e00e      	b.n	8008a06 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681d      	ldr	r5, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	466c      	mov	r4, sp
 80089f0:	f103 0210 	add.w	r2, r3, #16
 80089f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80089f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80089fa:	3304      	adds	r3, #4
 80089fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089fe:	4628      	mov	r0, r5
 8008a00:	f002 fa68 	bl	800aed4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3740      	adds	r7, #64	; 0x40
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008a10 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	617b      	str	r3, [r7, #20]
 8008a20:	2300      	movs	r3, #0
 8008a22:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f002 fc0e 	bl	800b24a <SDMMC_CmdGoIdleState>
 8008a2e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	e072      	b.n	8008b20 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f002 fc21 	bl	800b286 <SDMMC_CmdOperCond>
 8008a44:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00d      	beq.n	8008a68 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f002 fbf7 	bl	800b24a <SDMMC_CmdGoIdleState>
 8008a5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d004      	beq.n	8008a6e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	e05b      	b.n	8008b20 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d137      	bne.n	8008ae6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f002 fc21 	bl	800b2c4 <SDMMC_CmdAppCommand>
 8008a82:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d02d      	beq.n	8008ae6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a8e:	e047      	b.n	8008b20 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2100      	movs	r1, #0
 8008a96:	4618      	mov	r0, r3
 8008a98:	f002 fc14 	bl	800b2c4 <SDMMC_CmdAppCommand>
 8008a9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <SD_PowerON+0x98>
    {
      return errorstate;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	e03b      	b.n	8008b20 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	491e      	ldr	r1, [pc, #120]	; (8008b28 <SD_PowerON+0x118>)
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f002 fc2a 	bl	800b308 <SDMMC_CmdAppOperCommand>
 8008ab4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008abc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ac0:	e02e      	b.n	8008b20 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f002 fa90 	bl	800afee <SDMMC_GetResponse>
 8008ace:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	0fdb      	lsrs	r3, r3, #31
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d101      	bne.n	8008adc <SD_PowerON+0xcc>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e000      	b.n	8008ade <SD_PowerON+0xce>
 8008adc:	2300      	movs	r3, #0
 8008ade:	613b      	str	r3, [r7, #16]

    count++;
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d802      	bhi.n	8008af6 <SD_PowerON+0xe6>
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d0cc      	beq.n	8008a90 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d902      	bls.n	8008b06 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008b00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b04:	e00c      	b.n	8008b20 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	645a      	str	r2, [r3, #68]	; 0x44
 8008b16:	e002      	b.n	8008b1e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3718      	adds	r7, #24
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	c1100000 	.word	0xc1100000

08008b2c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d102      	bne.n	8008b42 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008b3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b40:	e018      	b.n	8008b74 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b4a:	041b      	lsls	r3, r3, #16
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	4610      	mov	r0, r2
 8008b50:	f002 fc9f 	bl	800b492 <SDMMC_CmdSendStatus>
 8008b54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	e009      	b.n	8008b74 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2100      	movs	r1, #0
 8008b66:	4618      	mov	r0, r3
 8008b68:	f002 fa41 	bl	800afee <SDMMC_GetResponse>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008b84:	2300      	movs	r3, #0
 8008b86:	60fb      	str	r3, [r7, #12]
 8008b88:	2300      	movs	r3, #0
 8008b8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2100      	movs	r1, #0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f002 fa2b 	bl	800afee <SDMMC_GetResponse>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ba2:	d102      	bne.n	8008baa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ba4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ba8:	e02f      	b.n	8008c0a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008baa:	f107 030c 	add.w	r3, r7, #12
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f879 	bl	8008ca8 <SD_FindSCR>
 8008bb6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	e023      	b.n	8008c0a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d01c      	beq.n	8008c06 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd4:	041b      	lsls	r3, r3, #16
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	4610      	mov	r0, r2
 8008bda:	f002 fb73 	bl	800b2c4 <SDMMC_CmdAppCommand>
 8008bde:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	e00f      	b.n	8008c0a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2102      	movs	r1, #2
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f002 fbad 	bl	800b350 <SDMMC_CmdBusWidth>
 8008bf6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	e003      	b.n	8008c0a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008c02:	2300      	movs	r3, #0
 8008c04:	e001      	b.n	8008c0a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b086      	sub	sp, #24
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	60fb      	str	r3, [r7, #12]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2100      	movs	r1, #0
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f002 f9e0 	bl	800afee <SDMMC_GetResponse>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c38:	d102      	bne.n	8008c40 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c3e:	e02f      	b.n	8008ca0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008c40:	f107 030c 	add.w	r3, r7, #12
 8008c44:	4619      	mov	r1, r3
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f82e 	bl	8008ca8 <SD_FindSCR>
 8008c4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	e023      	b.n	8008ca0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d01c      	beq.n	8008c9c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c6a:	041b      	lsls	r3, r3, #16
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	4610      	mov	r0, r2
 8008c70:	f002 fb28 	bl	800b2c4 <SDMMC_CmdAppCommand>
 8008c74:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	e00f      	b.n	8008ca0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2100      	movs	r1, #0
 8008c86:	4618      	mov	r0, r3
 8008c88:	f002 fb62 	bl	800b350 <SDMMC_CmdBusWidth>
 8008c8c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d001      	beq.n	8008c98 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	e003      	b.n	8008ca0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	e001      	b.n	8008ca0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3718      	adds	r7, #24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008ca8:	b590      	push	{r4, r7, lr}
 8008caa:	b08f      	sub	sp, #60	; 0x3c
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008cb2:	f7fa f9f3 	bl	800309c <HAL_GetTick>
 8008cb6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60bb      	str	r3, [r7, #8]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2108      	movs	r1, #8
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f002 f9cc 	bl	800b06c <SDMMC_CmdBlockLength>
 8008cd4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cde:	e0a9      	b.n	8008e34 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce8:	041b      	lsls	r3, r3, #16
 8008cea:	4619      	mov	r1, r3
 8008cec:	4610      	mov	r0, r2
 8008cee:	f002 fae9 	bl	800b2c4 <SDMMC_CmdAppCommand>
 8008cf2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <SD_FindSCR+0x56>
  {
    return errorstate;
 8008cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfc:	e09a      	b.n	8008e34 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008d02:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008d04:	2308      	movs	r3, #8
 8008d06:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008d08:	2330      	movs	r3, #48	; 0x30
 8008d0a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008d14:	2301      	movs	r3, #1
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f107 0210 	add.w	r2, r7, #16
 8008d20:	4611      	mov	r1, r2
 8008d22:	4618      	mov	r0, r3
 8008d24:	f002 f976 	bl	800b014 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f002 fb31 	bl	800b394 <SDMMC_CmdSendSCR>
 8008d32:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d022      	beq.n	8008d80 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3c:	e07a      	b.n	8008e34 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00e      	beq.n	8008d6a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6819      	ldr	r1, [r3, #0]
 8008d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	f107 0208 	add.w	r2, r7, #8
 8008d58:	18d4      	adds	r4, r2, r3
 8008d5a:	4608      	mov	r0, r1
 8008d5c:	f002 f8e6 	bl	800af2c <SDMMC_ReadFIFO>
 8008d60:	4603      	mov	r3, r0
 8008d62:	6023      	str	r3, [r4, #0]
      index++;
 8008d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d66:	3301      	adds	r3, #1
 8008d68:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d6a:	f7fa f997 	bl	800309c <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d78:	d102      	bne.n	8008d80 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008d7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d7e:	e059      	b.n	8008e34 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d86:	f240 432a 	movw	r3, #1066	; 0x42a
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0d6      	beq.n	8008d3e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d96:	f003 0308 	and.w	r3, r3, #8
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d005      	beq.n	8008daa <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2208      	movs	r2, #8
 8008da4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008da6:	2308      	movs	r3, #8
 8008da8:	e044      	b.n	8008e34 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db0:	f003 0302 	and.w	r3, r3, #2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d005      	beq.n	8008dc4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e037      	b.n	8008e34 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dca:	f003 0320 	and.w	r3, r3, #32
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d005      	beq.n	8008dde <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2220      	movs	r2, #32
 8008dd8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008dda:	2320      	movs	r3, #32
 8008ddc:	e02a      	b.n	8008e34 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f240 523a 	movw	r2, #1338	; 0x53a
 8008de6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	061a      	lsls	r2, r3, #24
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	021b      	lsls	r3, r3, #8
 8008df0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008df4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	0a1b      	lsrs	r3, r3, #8
 8008dfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008dfe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	0e1b      	lsrs	r3, r3, #24
 8008e04:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e08:	601a      	str	r2, [r3, #0]
    scr++;
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	061a      	lsls	r2, r3, #24
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	021b      	lsls	r3, r3, #8
 8008e18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008e1c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	0a1b      	lsrs	r3, r3, #8
 8008e22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008e26:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	0e1b      	lsrs	r3, r3, #24
 8008e2c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	373c      	adds	r7, #60	; 0x3c
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd90      	pop	{r4, r7, pc}

08008e3c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e025      	b.n	8008e9c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d106      	bne.n	8008e6a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7f9 fee5 	bl	8002c34 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	3304      	adds	r3, #4
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	f001 ff03 	bl	800ac88 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6818      	ldr	r0, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	f001 ff6d 	bl	800ad6c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d101      	bne.n	8008ec0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	e018      	b.n	8008ef2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	68b9      	ldr	r1, [r7, #8]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f001 ffcb 	bl	800ae6c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d104      	bne.n	8008ee8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2205      	movs	r2, #5
 8008ee2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008ee6:	e003      	b.n	8008ef0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b082      	sub	sp, #8
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d101      	bne.n	8008f14 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008f10:	2302      	movs	r3, #2
 8008f12:	e00e      	b.n	8008f32 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f001 ffc3 	bl	800aeae <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e04c      	b.n	8008fe8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d106      	bne.n	8008f68 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7f9 fbc4 	bl	80026f0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f022 0203 	bic.w	r2, r2, #3
 8008f7e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	4b19      	ldr	r3, [pc, #100]	; (8008ff0 <HAL_SPDIFRX_Init+0xb4>)
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008f98:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008f9e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008fa4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008faa:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008fb0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008fb6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008fbc:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008fc2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008fc8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	fff88407 	.word	0xfff88407

08008ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e084      	b.n	8009110 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009012:	b2db      	uxtb	r3, r3
 8009014:	2b00      	cmp	r3, #0
 8009016:	d106      	bne.n	8009026 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f7f9 fba7 	bl	8002774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2202      	movs	r2, #2
 800902a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800903c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009046:	d902      	bls.n	800904e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009048:	2300      	movs	r3, #0
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	e002      	b.n	8009054 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800904e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009052:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800905c:	d007      	beq.n	800906e <HAL_SPI_Init+0x7a>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009066:	d002      	beq.n	800906e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10b      	bne.n	800908e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800907e:	d903      	bls.n	8009088 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2202      	movs	r2, #2
 8009084:	631a      	str	r2, [r3, #48]	; 0x30
 8009086:	e002      	b.n	800908e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	431a      	orrs	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	431a      	orrs	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	431a      	orrs	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090ac:	431a      	orrs	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	431a      	orrs	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a1b      	ldr	r3, [r3, #32]
 80090b8:	ea42 0103 	orr.w	r1, r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	430a      	orrs	r2, r1
 80090c6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	0c1b      	lsrs	r3, r3, #16
 80090ce:	f003 0204 	and.w	r2, r3, #4
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d6:	431a      	orrs	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090dc:	431a      	orrs	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	ea42 0103 	orr.w	r1, r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	430a      	orrs	r2, r1
 80090ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	69da      	ldr	r2, [r3, #28]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e01d      	b.n	8009166 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7f9 fb7a 	bl	8002838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2202      	movs	r2, #2
 8009148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3304      	adds	r3, #4
 8009154:	4619      	mov	r1, r3
 8009156:	4610      	mov	r0, r2
 8009158:	f000 fb78 	bl	800984c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68da      	ldr	r2, [r3, #12]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f042 0201 	orr.w	r2, r2, #1
 8009186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	4b0c      	ldr	r3, [pc, #48]	; (80091c0 <HAL_TIM_Base_Start_IT+0x50>)
 8009190:	4013      	ands	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b06      	cmp	r3, #6
 8009198:	d00b      	beq.n	80091b2 <HAL_TIM_Base_Start_IT+0x42>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091a0:	d007      	beq.n	80091b2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f042 0201 	orr.w	r2, r2, #1
 80091b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	00010007 	.word	0x00010007

080091c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d101      	bne.n	80091d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e01d      	b.n	8009212 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d106      	bne.n	80091f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7f9 fb7e 	bl	80028ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	3304      	adds	r3, #4
 8009200:	4619      	mov	r1, r3
 8009202:	4610      	mov	r0, r2
 8009204:	f000 fb22 	bl	800984c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b082      	sub	sp, #8
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	f003 0302 	and.w	r3, r3, #2
 800922c:	2b02      	cmp	r3, #2
 800922e:	d122      	bne.n	8009276 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	f003 0302 	and.w	r3, r3, #2
 800923a:	2b02      	cmp	r3, #2
 800923c:	d11b      	bne.n	8009276 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f06f 0202 	mvn.w	r2, #2
 8009246:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	f003 0303 	and.w	r3, r3, #3
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fad7 	bl	8009810 <HAL_TIM_IC_CaptureCallback>
 8009262:	e005      	b.n	8009270 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fac9 	bl	80097fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fada 	bl	8009824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	f003 0304 	and.w	r3, r3, #4
 8009280:	2b04      	cmp	r3, #4
 8009282:	d122      	bne.n	80092ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	f003 0304 	and.w	r3, r3, #4
 800928e:	2b04      	cmp	r3, #4
 8009290:	d11b      	bne.n	80092ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f06f 0204 	mvn.w	r2, #4
 800929a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2202      	movs	r2, #2
 80092a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d003      	beq.n	80092b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 faad 	bl	8009810 <HAL_TIM_IC_CaptureCallback>
 80092b6:	e005      	b.n	80092c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fa9f 	bl	80097fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fab0 	bl	8009824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	f003 0308 	and.w	r3, r3, #8
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	d122      	bne.n	800931e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	f003 0308 	and.w	r3, r3, #8
 80092e2:	2b08      	cmp	r3, #8
 80092e4:	d11b      	bne.n	800931e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f06f 0208 	mvn.w	r2, #8
 80092ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2204      	movs	r2, #4
 80092f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	69db      	ldr	r3, [r3, #28]
 80092fc:	f003 0303 	and.w	r3, r3, #3
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fa83 	bl	8009810 <HAL_TIM_IC_CaptureCallback>
 800930a:	e005      	b.n	8009318 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 fa75 	bl	80097fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fa86 	bl	8009824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	f003 0310 	and.w	r3, r3, #16
 8009328:	2b10      	cmp	r3, #16
 800932a:	d122      	bne.n	8009372 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	f003 0310 	and.w	r3, r3, #16
 8009336:	2b10      	cmp	r3, #16
 8009338:	d11b      	bne.n	8009372 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f06f 0210 	mvn.w	r2, #16
 8009342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2208      	movs	r2, #8
 8009348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	69db      	ldr	r3, [r3, #28]
 8009350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009354:	2b00      	cmp	r3, #0
 8009356:	d003      	beq.n	8009360 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fa59 	bl	8009810 <HAL_TIM_IC_CaptureCallback>
 800935e:	e005      	b.n	800936c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fa4b 	bl	80097fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa5c 	bl	8009824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	f003 0301 	and.w	r3, r3, #1
 800937c:	2b01      	cmp	r3, #1
 800937e:	d10e      	bne.n	800939e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b01      	cmp	r3, #1
 800938c:	d107      	bne.n	800939e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f06f 0201 	mvn.w	r2, #1
 8009396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7f8 fd67 	bl	8001e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093a8:	2b80      	cmp	r3, #128	; 0x80
 80093aa:	d10e      	bne.n	80093ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093b6:	2b80      	cmp	r3, #128	; 0x80
 80093b8:	d107      	bne.n	80093ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fe71 	bl	800a0ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093d8:	d10e      	bne.n	80093f8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e4:	2b80      	cmp	r3, #128	; 0x80
 80093e6:	d107      	bne.n	80093f8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80093f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fe64 	bl	800a0c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009402:	2b40      	cmp	r3, #64	; 0x40
 8009404:	d10e      	bne.n	8009424 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009410:	2b40      	cmp	r3, #64	; 0x40
 8009412:	d107      	bne.n	8009424 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800941c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fa0a 	bl	8009838 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	f003 0320 	and.w	r3, r3, #32
 800942e:	2b20      	cmp	r3, #32
 8009430:	d10e      	bne.n	8009450 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	f003 0320 	and.w	r3, r3, #32
 800943c:	2b20      	cmp	r3, #32
 800943e:	d107      	bne.n	8009450 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f06f 0220 	mvn.w	r2, #32
 8009448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fe24 	bl	800a098 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800946a:	2b01      	cmp	r3, #1
 800946c:	d101      	bne.n	8009472 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800946e:	2302      	movs	r3, #2
 8009470:	e105      	b.n	800967e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2202      	movs	r2, #2
 800947e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b14      	cmp	r3, #20
 8009486:	f200 80f0 	bhi.w	800966a <HAL_TIM_PWM_ConfigChannel+0x212>
 800948a:	a201      	add	r2, pc, #4	; (adr r2, 8009490 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009490:	080094e5 	.word	0x080094e5
 8009494:	0800966b 	.word	0x0800966b
 8009498:	0800966b 	.word	0x0800966b
 800949c:	0800966b 	.word	0x0800966b
 80094a0:	08009525 	.word	0x08009525
 80094a4:	0800966b 	.word	0x0800966b
 80094a8:	0800966b 	.word	0x0800966b
 80094ac:	0800966b 	.word	0x0800966b
 80094b0:	08009567 	.word	0x08009567
 80094b4:	0800966b 	.word	0x0800966b
 80094b8:	0800966b 	.word	0x0800966b
 80094bc:	0800966b 	.word	0x0800966b
 80094c0:	080095a7 	.word	0x080095a7
 80094c4:	0800966b 	.word	0x0800966b
 80094c8:	0800966b 	.word	0x0800966b
 80094cc:	0800966b 	.word	0x0800966b
 80094d0:	080095e9 	.word	0x080095e9
 80094d4:	0800966b 	.word	0x0800966b
 80094d8:	0800966b 	.word	0x0800966b
 80094dc:	0800966b 	.word	0x0800966b
 80094e0:	08009629 	.word	0x08009629
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68b9      	ldr	r1, [r7, #8]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 fa4e 	bl	800998c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	699a      	ldr	r2, [r3, #24]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f042 0208 	orr.w	r2, r2, #8
 80094fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	699a      	ldr	r2, [r3, #24]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 0204 	bic.w	r2, r2, #4
 800950e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6999      	ldr	r1, [r3, #24]
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	691a      	ldr	r2, [r3, #16]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	430a      	orrs	r2, r1
 8009520:	619a      	str	r2, [r3, #24]
      break;
 8009522:	e0a3      	b.n	800966c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68b9      	ldr	r1, [r7, #8]
 800952a:	4618      	mov	r0, r3
 800952c:	f000 faa0 	bl	8009a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	699a      	ldr	r2, [r3, #24]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800953e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	699a      	ldr	r2, [r3, #24]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800954e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6999      	ldr	r1, [r3, #24]
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	021a      	lsls	r2, r3, #8
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	430a      	orrs	r2, r1
 8009562:	619a      	str	r2, [r3, #24]
      break;
 8009564:	e082      	b.n	800966c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68b9      	ldr	r1, [r7, #8]
 800956c:	4618      	mov	r0, r3
 800956e:	f000 faf7 	bl	8009b60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69da      	ldr	r2, [r3, #28]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f042 0208 	orr.w	r2, r2, #8
 8009580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69da      	ldr	r2, [r3, #28]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f022 0204 	bic.w	r2, r2, #4
 8009590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69d9      	ldr	r1, [r3, #28]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	691a      	ldr	r2, [r3, #16]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	430a      	orrs	r2, r1
 80095a2:	61da      	str	r2, [r3, #28]
      break;
 80095a4:	e062      	b.n	800966c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68b9      	ldr	r1, [r7, #8]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 fb4d 	bl	8009c4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	69da      	ldr	r2, [r3, #28]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	69da      	ldr	r2, [r3, #28]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	69d9      	ldr	r1, [r3, #28]
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	021a      	lsls	r2, r3, #8
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	430a      	orrs	r2, r1
 80095e4:	61da      	str	r2, [r3, #28]
      break;
 80095e6:	e041      	b.n	800966c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68b9      	ldr	r1, [r7, #8]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 fb84 	bl	8009cfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f042 0208 	orr.w	r2, r2, #8
 8009602:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f022 0204 	bic.w	r2, r2, #4
 8009612:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	691a      	ldr	r2, [r3, #16]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	430a      	orrs	r2, r1
 8009624:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009626:	e021      	b.n	800966c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68b9      	ldr	r1, [r7, #8]
 800962e:	4618      	mov	r0, r3
 8009630:	f000 fbb6 	bl	8009da0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009642:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009652:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	021a      	lsls	r2, r3, #8
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	430a      	orrs	r2, r1
 8009666:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009668:	e000      	b.n	800966c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800966a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop

08009688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009698:	2b01      	cmp	r3, #1
 800969a:	d101      	bne.n	80096a0 <HAL_TIM_ConfigClockSource+0x18>
 800969c:	2302      	movs	r3, #2
 800969e:	e0a6      	b.n	80097ee <HAL_TIM_ConfigClockSource+0x166>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2202      	movs	r2, #2
 80096ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	4b4f      	ldr	r3, [pc, #316]	; (80097f8 <HAL_TIM_ConfigClockSource+0x170>)
 80096bc:	4013      	ands	r3, r2
 80096be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b40      	cmp	r3, #64	; 0x40
 80096d6:	d067      	beq.n	80097a8 <HAL_TIM_ConfigClockSource+0x120>
 80096d8:	2b40      	cmp	r3, #64	; 0x40
 80096da:	d80b      	bhi.n	80096f4 <HAL_TIM_ConfigClockSource+0x6c>
 80096dc:	2b10      	cmp	r3, #16
 80096de:	d073      	beq.n	80097c8 <HAL_TIM_ConfigClockSource+0x140>
 80096e0:	2b10      	cmp	r3, #16
 80096e2:	d802      	bhi.n	80096ea <HAL_TIM_ConfigClockSource+0x62>
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d06f      	beq.n	80097c8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80096e8:	e078      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80096ea:	2b20      	cmp	r3, #32
 80096ec:	d06c      	beq.n	80097c8 <HAL_TIM_ConfigClockSource+0x140>
 80096ee:	2b30      	cmp	r3, #48	; 0x30
 80096f0:	d06a      	beq.n	80097c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80096f2:	e073      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80096f4:	2b70      	cmp	r3, #112	; 0x70
 80096f6:	d00d      	beq.n	8009714 <HAL_TIM_ConfigClockSource+0x8c>
 80096f8:	2b70      	cmp	r3, #112	; 0x70
 80096fa:	d804      	bhi.n	8009706 <HAL_TIM_ConfigClockSource+0x7e>
 80096fc:	2b50      	cmp	r3, #80	; 0x50
 80096fe:	d033      	beq.n	8009768 <HAL_TIM_ConfigClockSource+0xe0>
 8009700:	2b60      	cmp	r3, #96	; 0x60
 8009702:	d041      	beq.n	8009788 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009704:	e06a      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800970a:	d066      	beq.n	80097da <HAL_TIM_ConfigClockSource+0x152>
 800970c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009710:	d017      	beq.n	8009742 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009712:	e063      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6818      	ldr	r0, [r3, #0]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	6899      	ldr	r1, [r3, #8]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	f000 fc0a 	bl	8009f3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009736:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	609a      	str	r2, [r3, #8]
      break;
 8009740:	e04c      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6818      	ldr	r0, [r3, #0]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	6899      	ldr	r1, [r3, #8]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f000 fbf3 	bl	8009f3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009764:	609a      	str	r2, [r3, #8]
      break;
 8009766:	e039      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6818      	ldr	r0, [r3, #0]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	6859      	ldr	r1, [r3, #4]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	461a      	mov	r2, r3
 8009776:	f000 fb67 	bl	8009e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2150      	movs	r1, #80	; 0x50
 8009780:	4618      	mov	r0, r3
 8009782:	f000 fbc0 	bl	8009f06 <TIM_ITRx_SetConfig>
      break;
 8009786:	e029      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	6859      	ldr	r1, [r3, #4]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	461a      	mov	r2, r3
 8009796:	f000 fb86 	bl	8009ea6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2160      	movs	r1, #96	; 0x60
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 fbb0 	bl	8009f06 <TIM_ITRx_SetConfig>
      break;
 80097a6:	e019      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6818      	ldr	r0, [r3, #0]
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	6859      	ldr	r1, [r3, #4]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	461a      	mov	r2, r3
 80097b6:	f000 fb47 	bl	8009e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2140      	movs	r1, #64	; 0x40
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 fba0 	bl	8009f06 <TIM_ITRx_SetConfig>
      break;
 80097c6:	e009      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4619      	mov	r1, r3
 80097d2:	4610      	mov	r0, r2
 80097d4:	f000 fb97 	bl	8009f06 <TIM_ITRx_SetConfig>
      break;
 80097d8:	e000      	b.n	80097dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80097da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	fffeff88 	.word	0xfffeff88

080097fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a40      	ldr	r2, [pc, #256]	; (8009960 <TIM_Base_SetConfig+0x114>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d013      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800986a:	d00f      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a3d      	ldr	r2, [pc, #244]	; (8009964 <TIM_Base_SetConfig+0x118>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d00b      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a3c      	ldr	r2, [pc, #240]	; (8009968 <TIM_Base_SetConfig+0x11c>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d007      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a3b      	ldr	r2, [pc, #236]	; (800996c <TIM_Base_SetConfig+0x120>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d003      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a3a      	ldr	r2, [pc, #232]	; (8009970 <TIM_Base_SetConfig+0x124>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d108      	bne.n	800989e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	4313      	orrs	r3, r2
 800989c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a2f      	ldr	r2, [pc, #188]	; (8009960 <TIM_Base_SetConfig+0x114>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d02b      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ac:	d027      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a2c      	ldr	r2, [pc, #176]	; (8009964 <TIM_Base_SetConfig+0x118>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d023      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a2b      	ldr	r2, [pc, #172]	; (8009968 <TIM_Base_SetConfig+0x11c>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d01f      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a2a      	ldr	r2, [pc, #168]	; (800996c <TIM_Base_SetConfig+0x120>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d01b      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a29      	ldr	r2, [pc, #164]	; (8009970 <TIM_Base_SetConfig+0x124>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d017      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a28      	ldr	r2, [pc, #160]	; (8009974 <TIM_Base_SetConfig+0x128>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d013      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a27      	ldr	r2, [pc, #156]	; (8009978 <TIM_Base_SetConfig+0x12c>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d00f      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a26      	ldr	r2, [pc, #152]	; (800997c <TIM_Base_SetConfig+0x130>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d00b      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a25      	ldr	r2, [pc, #148]	; (8009980 <TIM_Base_SetConfig+0x134>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d007      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a24      	ldr	r2, [pc, #144]	; (8009984 <TIM_Base_SetConfig+0x138>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d003      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a23      	ldr	r2, [pc, #140]	; (8009988 <TIM_Base_SetConfig+0x13c>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d108      	bne.n	8009910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	4313      	orrs	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	4313      	orrs	r3, r2
 800991c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	689a      	ldr	r2, [r3, #8]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a0a      	ldr	r2, [pc, #40]	; (8009960 <TIM_Base_SetConfig+0x114>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d003      	beq.n	8009944 <TIM_Base_SetConfig+0xf8>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a0c      	ldr	r2, [pc, #48]	; (8009970 <TIM_Base_SetConfig+0x124>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d103      	bne.n	800994c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	691a      	ldr	r2, [r3, #16]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	615a      	str	r2, [r3, #20]
}
 8009952:	bf00      	nop
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	40010000 	.word	0x40010000
 8009964:	40000400 	.word	0x40000400
 8009968:	40000800 	.word	0x40000800
 800996c:	40000c00 	.word	0x40000c00
 8009970:	40010400 	.word	0x40010400
 8009974:	40014000 	.word	0x40014000
 8009978:	40014400 	.word	0x40014400
 800997c:	40014800 	.word	0x40014800
 8009980:	40001800 	.word	0x40001800
 8009984:	40001c00 	.word	0x40001c00
 8009988:	40002000 	.word	0x40002000

0800998c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800998c:	b480      	push	{r7}
 800998e:	b087      	sub	sp, #28
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	f023 0201 	bic.w	r2, r3, #1
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	4b2b      	ldr	r3, [pc, #172]	; (8009a64 <TIM_OC1_SetConfig+0xd8>)
 80099b8:	4013      	ands	r3, r2
 80099ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f023 0303 	bic.w	r3, r3, #3
 80099c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f023 0302 	bic.w	r3, r3, #2
 80099d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	4313      	orrs	r3, r2
 80099de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a21      	ldr	r2, [pc, #132]	; (8009a68 <TIM_OC1_SetConfig+0xdc>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d003      	beq.n	80099f0 <TIM_OC1_SetConfig+0x64>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a20      	ldr	r2, [pc, #128]	; (8009a6c <TIM_OC1_SetConfig+0xe0>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d10c      	bne.n	8009a0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	f023 0308 	bic.w	r3, r3, #8
 80099f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	697a      	ldr	r2, [r7, #20]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f023 0304 	bic.w	r3, r3, #4
 8009a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a16      	ldr	r2, [pc, #88]	; (8009a68 <TIM_OC1_SetConfig+0xdc>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d003      	beq.n	8009a1a <TIM_OC1_SetConfig+0x8e>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a15      	ldr	r2, [pc, #84]	; (8009a6c <TIM_OC1_SetConfig+0xe0>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d111      	bne.n	8009a3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	685a      	ldr	r2, [r3, #4]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	621a      	str	r2, [r3, #32]
}
 8009a58:	bf00      	nop
 8009a5a:	371c      	adds	r7, #28
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	fffeff8f 	.word	0xfffeff8f
 8009a68:	40010000 	.word	0x40010000
 8009a6c:	40010400 	.word	0x40010400

08009a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b087      	sub	sp, #28
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a1b      	ldr	r3, [r3, #32]
 8009a7e:	f023 0210 	bic.w	r2, r3, #16
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a1b      	ldr	r3, [r3, #32]
 8009a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	4b2e      	ldr	r3, [pc, #184]	; (8009b54 <TIM_OC2_SetConfig+0xe4>)
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	021b      	lsls	r3, r3, #8
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	f023 0320 	bic.w	r3, r3, #32
 8009aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	011b      	lsls	r3, r3, #4
 8009ac2:	697a      	ldr	r2, [r7, #20]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a23      	ldr	r2, [pc, #140]	; (8009b58 <TIM_OC2_SetConfig+0xe8>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d003      	beq.n	8009ad8 <TIM_OC2_SetConfig+0x68>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a22      	ldr	r2, [pc, #136]	; (8009b5c <TIM_OC2_SetConfig+0xec>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d10d      	bne.n	8009af4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	011b      	lsls	r3, r3, #4
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009af2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a18      	ldr	r2, [pc, #96]	; (8009b58 <TIM_OC2_SetConfig+0xe8>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d003      	beq.n	8009b04 <TIM_OC2_SetConfig+0x94>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a17      	ldr	r2, [pc, #92]	; (8009b5c <TIM_OC2_SetConfig+0xec>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d113      	bne.n	8009b2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	695b      	ldr	r3, [r3, #20]
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	697a      	ldr	r2, [r7, #20]
 8009b44:	621a      	str	r2, [r3, #32]
}
 8009b46:	bf00      	nop
 8009b48:	371c      	adds	r7, #28
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	feff8fff 	.word	0xfeff8fff
 8009b58:	40010000 	.word	0x40010000
 8009b5c:	40010400 	.word	0x40010400

08009b60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	69db      	ldr	r3, [r3, #28]
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	4b2d      	ldr	r3, [pc, #180]	; (8009c40 <TIM_OC3_SetConfig+0xe0>)
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f023 0303 	bic.w	r3, r3, #3
 8009b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	021b      	lsls	r3, r3, #8
 8009bb0:	697a      	ldr	r2, [r7, #20]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a22      	ldr	r2, [pc, #136]	; (8009c44 <TIM_OC3_SetConfig+0xe4>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d003      	beq.n	8009bc6 <TIM_OC3_SetConfig+0x66>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4a21      	ldr	r2, [pc, #132]	; (8009c48 <TIM_OC3_SetConfig+0xe8>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d10d      	bne.n	8009be2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	021b      	lsls	r3, r3, #8
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a17      	ldr	r2, [pc, #92]	; (8009c44 <TIM_OC3_SetConfig+0xe4>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d003      	beq.n	8009bf2 <TIM_OC3_SetConfig+0x92>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a16      	ldr	r2, [pc, #88]	; (8009c48 <TIM_OC3_SetConfig+0xe8>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d113      	bne.n	8009c1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	693a      	ldr	r2, [r7, #16]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	011b      	lsls	r3, r3, #4
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	621a      	str	r2, [r3, #32]
}
 8009c34:	bf00      	nop
 8009c36:	371c      	adds	r7, #28
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr
 8009c40:	fffeff8f 	.word	0xfffeff8f
 8009c44:	40010000 	.word	0x40010000
 8009c48:	40010400 	.word	0x40010400

08009c4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b087      	sub	sp, #28
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	69db      	ldr	r3, [r3, #28]
 8009c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	4b1e      	ldr	r3, [pc, #120]	; (8009cf0 <TIM_OC4_SetConfig+0xa4>)
 8009c78:	4013      	ands	r3, r2
 8009c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	021b      	lsls	r3, r3, #8
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	031b      	lsls	r3, r3, #12
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a13      	ldr	r2, [pc, #76]	; (8009cf4 <TIM_OC4_SetConfig+0xa8>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d003      	beq.n	8009cb4 <TIM_OC4_SetConfig+0x68>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a12      	ldr	r2, [pc, #72]	; (8009cf8 <TIM_OC4_SetConfig+0xac>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d109      	bne.n	8009cc8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	019b      	lsls	r3, r3, #6
 8009cc2:	697a      	ldr	r2, [r7, #20]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	621a      	str	r2, [r3, #32]
}
 8009ce2:	bf00      	nop
 8009ce4:	371c      	adds	r7, #28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	feff8fff 	.word	0xfeff8fff
 8009cf4:	40010000 	.word	0x40010000
 8009cf8:	40010400 	.word	0x40010400

08009cfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b087      	sub	sp, #28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	4b1b      	ldr	r3, [pc, #108]	; (8009d94 <TIM_OC5_SetConfig+0x98>)
 8009d28:	4013      	ands	r3, r2
 8009d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	041b      	lsls	r3, r3, #16
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a12      	ldr	r2, [pc, #72]	; (8009d98 <TIM_OC5_SetConfig+0x9c>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d003      	beq.n	8009d5a <TIM_OC5_SetConfig+0x5e>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a11      	ldr	r2, [pc, #68]	; (8009d9c <TIM_OC5_SetConfig+0xa0>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d109      	bne.n	8009d6e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	021b      	lsls	r3, r3, #8
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	685a      	ldr	r2, [r3, #4]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	621a      	str	r2, [r3, #32]
}
 8009d88:	bf00      	nop
 8009d8a:	371c      	adds	r7, #28
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	fffeff8f 	.word	0xfffeff8f
 8009d98:	40010000 	.word	0x40010000
 8009d9c:	40010400 	.word	0x40010400

08009da0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	4b1c      	ldr	r3, [pc, #112]	; (8009e3c <TIM_OC6_SetConfig+0x9c>)
 8009dcc:	4013      	ands	r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	021b      	lsls	r3, r3, #8
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	051b      	lsls	r3, r3, #20
 8009dea:	693a      	ldr	r2, [r7, #16]
 8009dec:	4313      	orrs	r3, r2
 8009dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a13      	ldr	r2, [pc, #76]	; (8009e40 <TIM_OC6_SetConfig+0xa0>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d003      	beq.n	8009e00 <TIM_OC6_SetConfig+0x60>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a12      	ldr	r2, [pc, #72]	; (8009e44 <TIM_OC6_SetConfig+0xa4>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d109      	bne.n	8009e14 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	695b      	ldr	r3, [r3, #20]
 8009e0c:	029b      	lsls	r3, r3, #10
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	685a      	ldr	r2, [r3, #4]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	621a      	str	r2, [r3, #32]
}
 8009e2e:	bf00      	nop
 8009e30:	371c      	adds	r7, #28
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	feff8fff 	.word	0xfeff8fff
 8009e40:	40010000 	.word	0x40010000
 8009e44:	40010400 	.word	0x40010400

08009e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b087      	sub	sp, #28
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6a1b      	ldr	r3, [r3, #32]
 8009e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	f023 0201 	bic.w	r2, r3, #1
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	011b      	lsls	r3, r3, #4
 8009e78:	693a      	ldr	r2, [r7, #16]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	f023 030a 	bic.w	r3, r3, #10
 8009e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	697a      	ldr	r2, [r7, #20]
 8009e98:	621a      	str	r2, [r3, #32]
}
 8009e9a:	bf00      	nop
 8009e9c:	371c      	adds	r7, #28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b087      	sub	sp, #28
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	60f8      	str	r0, [r7, #12]
 8009eae:	60b9      	str	r1, [r7, #8]
 8009eb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	f023 0210 	bic.w	r2, r3, #16
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6a1b      	ldr	r3, [r3, #32]
 8009ec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	031b      	lsls	r3, r3, #12
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ee2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	011b      	lsls	r3, r3, #4
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	697a      	ldr	r2, [r7, #20]
 8009ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	621a      	str	r2, [r3, #32]
}
 8009efa:	bf00      	nop
 8009efc:	371c      	adds	r7, #28
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b085      	sub	sp, #20
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	f043 0307 	orr.w	r3, r3, #7
 8009f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	609a      	str	r2, [r3, #8]
}
 8009f30:	bf00      	nop
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	021a      	lsls	r2, r3, #8
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	431a      	orrs	r2, r3
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	697a      	ldr	r2, [r7, #20]
 8009f6e:	609a      	str	r2, [r3, #8]
}
 8009f70:	bf00      	nop
 8009f72:	371c      	adds	r7, #28
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b085      	sub	sp, #20
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d101      	bne.n	8009f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f90:	2302      	movs	r3, #2
 8009f92:	e06d      	b.n	800a070 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a30      	ldr	r2, [pc, #192]	; (800a07c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d004      	beq.n	8009fc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a2f      	ldr	r2, [pc, #188]	; (800a080 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d108      	bne.n	8009fda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009fce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a20      	ldr	r2, [pc, #128]	; (800a07c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d022      	beq.n	800a044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a006:	d01d      	beq.n	800a044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a1d      	ldr	r2, [pc, #116]	; (800a084 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d018      	beq.n	800a044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a1c      	ldr	r2, [pc, #112]	; (800a088 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d013      	beq.n	800a044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a1a      	ldr	r2, [pc, #104]	; (800a08c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d00e      	beq.n	800a044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a15      	ldr	r2, [pc, #84]	; (800a080 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d009      	beq.n	800a044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a16      	ldr	r2, [pc, #88]	; (800a090 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d004      	beq.n	800a044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a15      	ldr	r2, [pc, #84]	; (800a094 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d10c      	bne.n	800a05e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a04a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	4313      	orrs	r3, r2
 800a054:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	40010000 	.word	0x40010000
 800a080:	40010400 	.word	0x40010400
 800a084:	40000400 	.word	0x40000400
 800a088:	40000800 	.word	0x40000800
 800a08c:	40000c00 	.word	0x40000c00
 800a090:	40014000 	.word	0x40014000
 800a094:	40001800 	.word	0x40001800

0800a098 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e040      	b.n	800a168 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d106      	bne.n	800a0fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7f8 fcc0 	bl	8002a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2224      	movs	r2, #36	; 0x24
 800a100:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f022 0201 	bic.w	r2, r2, #1
 800a110:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f972 	bl	800a3fc <UART_SetConfig>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d101      	bne.n	800a122 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e022      	b.n	800a168 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	2b00      	cmp	r3, #0
 800a128:	d002      	beq.n	800a130 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fc10 	bl	800a950 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a13e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	689a      	ldr	r2, [r3, #8]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a14e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f042 0201 	orr.w	r2, r2, #1
 800a15e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fc97 	bl	800aa94 <UART_CheckIdleState>
 800a166:	4603      	mov	r3, r0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a190:	69fa      	ldr	r2, [r7, #28]
 800a192:	f640 030f 	movw	r3, #2063	; 0x80f
 800a196:	4013      	ands	r3, r2
 800a198:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d113      	bne.n	800a1c8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	f003 0320 	and.w	r3, r3, #32
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00e      	beq.n	800a1c8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	f003 0320 	and.w	r3, r3, #32
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d009      	beq.n	800a1c8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 8100 	beq.w	800a3be <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	4798      	blx	r3
      }
      return;
 800a1c6:	e0fa      	b.n	800a3be <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	f000 80d5 	beq.w	800a37a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d105      	bne.n	800a1e6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f000 80ca 	beq.w	800a37a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00e      	beq.n	800a20e <HAL_UART_IRQHandler+0x9e>
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d009      	beq.n	800a20e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2201      	movs	r2, #1
 800a200:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a206:	f043 0201 	orr.w	r2, r3, #1
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	f003 0302 	and.w	r3, r3, #2
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00e      	beq.n	800a236 <HAL_UART_IRQHandler+0xc6>
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d009      	beq.n	800a236 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2202      	movs	r2, #2
 800a228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a22e:	f043 0204 	orr.w	r2, r3, #4
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	f003 0304 	and.w	r3, r3, #4
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00e      	beq.n	800a25e <HAL_UART_IRQHandler+0xee>
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	f003 0301 	and.w	r3, r3, #1
 800a246:	2b00      	cmp	r3, #0
 800a248:	d009      	beq.n	800a25e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2204      	movs	r2, #4
 800a250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a256:	f043 0202 	orr.w	r2, r3, #2
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	f003 0308 	and.w	r3, r3, #8
 800a264:	2b00      	cmp	r3, #0
 800a266:	d013      	beq.n	800a290 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	f003 0320 	and.w	r3, r3, #32
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d104      	bne.n	800a27c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d009      	beq.n	800a290 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2208      	movs	r2, #8
 800a282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a288:	f043 0208 	orr.w	r2, r3, #8
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00f      	beq.n	800a2ba <HAL_UART_IRQHandler+0x14a>
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00a      	beq.n	800a2ba <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2b2:	f043 0220 	orr.w	r2, r3, #32
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d07f      	beq.n	800a3c2 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	f003 0320 	and.w	r3, r3, #32
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00c      	beq.n	800a2e6 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	f003 0320 	and.w	r3, r3, #32
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d007      	beq.n	800a2e6 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d003      	beq.n	800a2e6 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2ea:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f6:	2b40      	cmp	r3, #64	; 0x40
 800a2f8:	d004      	beq.n	800a304 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a300:	2b00      	cmp	r3, #0
 800a302:	d031      	beq.n	800a368 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fc6f 	bl	800abe8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a314:	2b40      	cmp	r3, #64	; 0x40
 800a316:	d123      	bne.n	800a360 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	689a      	ldr	r2, [r3, #8]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a326:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d013      	beq.n	800a358 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a334:	4a26      	ldr	r2, [pc, #152]	; (800a3d0 <HAL_UART_IRQHandler+0x260>)
 800a336:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7f9 fc39 	bl	8003bb4 <HAL_DMA_Abort_IT>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d016      	beq.n	800a376 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a34c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a352:	4610      	mov	r0, r2
 800a354:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a356:	e00e      	b.n	800a376 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 f845 	bl	800a3e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a35e:	e00a      	b.n	800a376 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 f841 	bl	800a3e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a366:	e006      	b.n	800a376 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f83d 	bl	800a3e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a374:	e025      	b.n	800a3c2 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a376:	bf00      	nop
    return;
 800a378:	e023      	b.n	800a3c2 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00d      	beq.n	800a3a0 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d008      	beq.n	800a3a0 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a392:	2b00      	cmp	r3, #0
 800a394:	d017      	beq.n	800a3c6 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	4798      	blx	r3
    }
    return;
 800a39e:	e012      	b.n	800a3c6 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00e      	beq.n	800a3c8 <HAL_UART_IRQHandler+0x258>
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d009      	beq.n	800a3c8 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fc4d 	bl	800ac54 <UART_EndTransmit_IT>
    return;
 800a3ba:	bf00      	nop
 800a3bc:	e004      	b.n	800a3c8 <HAL_UART_IRQHandler+0x258>
      return;
 800a3be:	bf00      	nop
 800a3c0:	e002      	b.n	800a3c8 <HAL_UART_IRQHandler+0x258>
    return;
 800a3c2:	bf00      	nop
 800a3c4:	e000      	b.n	800a3c8 <HAL_UART_IRQHandler+0x258>
    return;
 800a3c6:	bf00      	nop
  }

}
 800a3c8:	3720      	adds	r7, #32
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	0800ac29 	.word	0x0800ac29

0800a3d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a3dc:	bf00      	nop
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a3f0:	bf00      	nop
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b088      	sub	sp, #32
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a404:	2300      	movs	r3, #0
 800a406:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	689a      	ldr	r2, [r3, #8]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	431a      	orrs	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	431a      	orrs	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	69db      	ldr	r3, [r3, #28]
 800a420:	4313      	orrs	r3, r2
 800a422:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	4bb1      	ldr	r3, [pc, #708]	; (800a6f0 <UART_SetConfig+0x2f4>)
 800a42c:	4013      	ands	r3, r2
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	6812      	ldr	r2, [r2, #0]
 800a432:	6939      	ldr	r1, [r7, #16]
 800a434:	430b      	orrs	r3, r1
 800a436:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68da      	ldr	r2, [r3, #12]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	430a      	orrs	r2, r1
 800a44c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a1b      	ldr	r3, [r3, #32]
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	430a      	orrs	r2, r1
 800a470:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a9f      	ldr	r2, [pc, #636]	; (800a6f4 <UART_SetConfig+0x2f8>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d121      	bne.n	800a4c0 <UART_SetConfig+0xc4>
 800a47c:	4b9e      	ldr	r3, [pc, #632]	; (800a6f8 <UART_SetConfig+0x2fc>)
 800a47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a482:	f003 0303 	and.w	r3, r3, #3
 800a486:	2b03      	cmp	r3, #3
 800a488:	d816      	bhi.n	800a4b8 <UART_SetConfig+0xbc>
 800a48a:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <UART_SetConfig+0x94>)
 800a48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a490:	0800a4a1 	.word	0x0800a4a1
 800a494:	0800a4ad 	.word	0x0800a4ad
 800a498:	0800a4a7 	.word	0x0800a4a7
 800a49c:	0800a4b3 	.word	0x0800a4b3
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	77fb      	strb	r3, [r7, #31]
 800a4a4:	e151      	b.n	800a74a <UART_SetConfig+0x34e>
 800a4a6:	2302      	movs	r3, #2
 800a4a8:	77fb      	strb	r3, [r7, #31]
 800a4aa:	e14e      	b.n	800a74a <UART_SetConfig+0x34e>
 800a4ac:	2304      	movs	r3, #4
 800a4ae:	77fb      	strb	r3, [r7, #31]
 800a4b0:	e14b      	b.n	800a74a <UART_SetConfig+0x34e>
 800a4b2:	2308      	movs	r3, #8
 800a4b4:	77fb      	strb	r3, [r7, #31]
 800a4b6:	e148      	b.n	800a74a <UART_SetConfig+0x34e>
 800a4b8:	2310      	movs	r3, #16
 800a4ba:	77fb      	strb	r3, [r7, #31]
 800a4bc:	bf00      	nop
 800a4be:	e144      	b.n	800a74a <UART_SetConfig+0x34e>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a8d      	ldr	r2, [pc, #564]	; (800a6fc <UART_SetConfig+0x300>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d134      	bne.n	800a534 <UART_SetConfig+0x138>
 800a4ca:	4b8b      	ldr	r3, [pc, #556]	; (800a6f8 <UART_SetConfig+0x2fc>)
 800a4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4d0:	f003 030c 	and.w	r3, r3, #12
 800a4d4:	2b0c      	cmp	r3, #12
 800a4d6:	d829      	bhi.n	800a52c <UART_SetConfig+0x130>
 800a4d8:	a201      	add	r2, pc, #4	; (adr r2, 800a4e0 <UART_SetConfig+0xe4>)
 800a4da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4de:	bf00      	nop
 800a4e0:	0800a515 	.word	0x0800a515
 800a4e4:	0800a52d 	.word	0x0800a52d
 800a4e8:	0800a52d 	.word	0x0800a52d
 800a4ec:	0800a52d 	.word	0x0800a52d
 800a4f0:	0800a521 	.word	0x0800a521
 800a4f4:	0800a52d 	.word	0x0800a52d
 800a4f8:	0800a52d 	.word	0x0800a52d
 800a4fc:	0800a52d 	.word	0x0800a52d
 800a500:	0800a51b 	.word	0x0800a51b
 800a504:	0800a52d 	.word	0x0800a52d
 800a508:	0800a52d 	.word	0x0800a52d
 800a50c:	0800a52d 	.word	0x0800a52d
 800a510:	0800a527 	.word	0x0800a527
 800a514:	2300      	movs	r3, #0
 800a516:	77fb      	strb	r3, [r7, #31]
 800a518:	e117      	b.n	800a74a <UART_SetConfig+0x34e>
 800a51a:	2302      	movs	r3, #2
 800a51c:	77fb      	strb	r3, [r7, #31]
 800a51e:	e114      	b.n	800a74a <UART_SetConfig+0x34e>
 800a520:	2304      	movs	r3, #4
 800a522:	77fb      	strb	r3, [r7, #31]
 800a524:	e111      	b.n	800a74a <UART_SetConfig+0x34e>
 800a526:	2308      	movs	r3, #8
 800a528:	77fb      	strb	r3, [r7, #31]
 800a52a:	e10e      	b.n	800a74a <UART_SetConfig+0x34e>
 800a52c:	2310      	movs	r3, #16
 800a52e:	77fb      	strb	r3, [r7, #31]
 800a530:	bf00      	nop
 800a532:	e10a      	b.n	800a74a <UART_SetConfig+0x34e>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a71      	ldr	r2, [pc, #452]	; (800a700 <UART_SetConfig+0x304>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d120      	bne.n	800a580 <UART_SetConfig+0x184>
 800a53e:	4b6e      	ldr	r3, [pc, #440]	; (800a6f8 <UART_SetConfig+0x2fc>)
 800a540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a544:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a548:	2b10      	cmp	r3, #16
 800a54a:	d00f      	beq.n	800a56c <UART_SetConfig+0x170>
 800a54c:	2b10      	cmp	r3, #16
 800a54e:	d802      	bhi.n	800a556 <UART_SetConfig+0x15a>
 800a550:	2b00      	cmp	r3, #0
 800a552:	d005      	beq.n	800a560 <UART_SetConfig+0x164>
 800a554:	e010      	b.n	800a578 <UART_SetConfig+0x17c>
 800a556:	2b20      	cmp	r3, #32
 800a558:	d005      	beq.n	800a566 <UART_SetConfig+0x16a>
 800a55a:	2b30      	cmp	r3, #48	; 0x30
 800a55c:	d009      	beq.n	800a572 <UART_SetConfig+0x176>
 800a55e:	e00b      	b.n	800a578 <UART_SetConfig+0x17c>
 800a560:	2300      	movs	r3, #0
 800a562:	77fb      	strb	r3, [r7, #31]
 800a564:	e0f1      	b.n	800a74a <UART_SetConfig+0x34e>
 800a566:	2302      	movs	r3, #2
 800a568:	77fb      	strb	r3, [r7, #31]
 800a56a:	e0ee      	b.n	800a74a <UART_SetConfig+0x34e>
 800a56c:	2304      	movs	r3, #4
 800a56e:	77fb      	strb	r3, [r7, #31]
 800a570:	e0eb      	b.n	800a74a <UART_SetConfig+0x34e>
 800a572:	2308      	movs	r3, #8
 800a574:	77fb      	strb	r3, [r7, #31]
 800a576:	e0e8      	b.n	800a74a <UART_SetConfig+0x34e>
 800a578:	2310      	movs	r3, #16
 800a57a:	77fb      	strb	r3, [r7, #31]
 800a57c:	bf00      	nop
 800a57e:	e0e4      	b.n	800a74a <UART_SetConfig+0x34e>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a5f      	ldr	r2, [pc, #380]	; (800a704 <UART_SetConfig+0x308>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d120      	bne.n	800a5cc <UART_SetConfig+0x1d0>
 800a58a:	4b5b      	ldr	r3, [pc, #364]	; (800a6f8 <UART_SetConfig+0x2fc>)
 800a58c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a590:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a594:	2b40      	cmp	r3, #64	; 0x40
 800a596:	d00f      	beq.n	800a5b8 <UART_SetConfig+0x1bc>
 800a598:	2b40      	cmp	r3, #64	; 0x40
 800a59a:	d802      	bhi.n	800a5a2 <UART_SetConfig+0x1a6>
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d005      	beq.n	800a5ac <UART_SetConfig+0x1b0>
 800a5a0:	e010      	b.n	800a5c4 <UART_SetConfig+0x1c8>
 800a5a2:	2b80      	cmp	r3, #128	; 0x80
 800a5a4:	d005      	beq.n	800a5b2 <UART_SetConfig+0x1b6>
 800a5a6:	2bc0      	cmp	r3, #192	; 0xc0
 800a5a8:	d009      	beq.n	800a5be <UART_SetConfig+0x1c2>
 800a5aa:	e00b      	b.n	800a5c4 <UART_SetConfig+0x1c8>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	77fb      	strb	r3, [r7, #31]
 800a5b0:	e0cb      	b.n	800a74a <UART_SetConfig+0x34e>
 800a5b2:	2302      	movs	r3, #2
 800a5b4:	77fb      	strb	r3, [r7, #31]
 800a5b6:	e0c8      	b.n	800a74a <UART_SetConfig+0x34e>
 800a5b8:	2304      	movs	r3, #4
 800a5ba:	77fb      	strb	r3, [r7, #31]
 800a5bc:	e0c5      	b.n	800a74a <UART_SetConfig+0x34e>
 800a5be:	2308      	movs	r3, #8
 800a5c0:	77fb      	strb	r3, [r7, #31]
 800a5c2:	e0c2      	b.n	800a74a <UART_SetConfig+0x34e>
 800a5c4:	2310      	movs	r3, #16
 800a5c6:	77fb      	strb	r3, [r7, #31]
 800a5c8:	bf00      	nop
 800a5ca:	e0be      	b.n	800a74a <UART_SetConfig+0x34e>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a4d      	ldr	r2, [pc, #308]	; (800a708 <UART_SetConfig+0x30c>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d124      	bne.n	800a620 <UART_SetConfig+0x224>
 800a5d6:	4b48      	ldr	r3, [pc, #288]	; (800a6f8 <UART_SetConfig+0x2fc>)
 800a5d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5e4:	d012      	beq.n	800a60c <UART_SetConfig+0x210>
 800a5e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ea:	d802      	bhi.n	800a5f2 <UART_SetConfig+0x1f6>
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d007      	beq.n	800a600 <UART_SetConfig+0x204>
 800a5f0:	e012      	b.n	800a618 <UART_SetConfig+0x21c>
 800a5f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5f6:	d006      	beq.n	800a606 <UART_SetConfig+0x20a>
 800a5f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5fc:	d009      	beq.n	800a612 <UART_SetConfig+0x216>
 800a5fe:	e00b      	b.n	800a618 <UART_SetConfig+0x21c>
 800a600:	2300      	movs	r3, #0
 800a602:	77fb      	strb	r3, [r7, #31]
 800a604:	e0a1      	b.n	800a74a <UART_SetConfig+0x34e>
 800a606:	2302      	movs	r3, #2
 800a608:	77fb      	strb	r3, [r7, #31]
 800a60a:	e09e      	b.n	800a74a <UART_SetConfig+0x34e>
 800a60c:	2304      	movs	r3, #4
 800a60e:	77fb      	strb	r3, [r7, #31]
 800a610:	e09b      	b.n	800a74a <UART_SetConfig+0x34e>
 800a612:	2308      	movs	r3, #8
 800a614:	77fb      	strb	r3, [r7, #31]
 800a616:	e098      	b.n	800a74a <UART_SetConfig+0x34e>
 800a618:	2310      	movs	r3, #16
 800a61a:	77fb      	strb	r3, [r7, #31]
 800a61c:	bf00      	nop
 800a61e:	e094      	b.n	800a74a <UART_SetConfig+0x34e>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a39      	ldr	r2, [pc, #228]	; (800a70c <UART_SetConfig+0x310>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d124      	bne.n	800a674 <UART_SetConfig+0x278>
 800a62a:	4b33      	ldr	r3, [pc, #204]	; (800a6f8 <UART_SetConfig+0x2fc>)
 800a62c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a630:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a638:	d012      	beq.n	800a660 <UART_SetConfig+0x264>
 800a63a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a63e:	d802      	bhi.n	800a646 <UART_SetConfig+0x24a>
 800a640:	2b00      	cmp	r3, #0
 800a642:	d007      	beq.n	800a654 <UART_SetConfig+0x258>
 800a644:	e012      	b.n	800a66c <UART_SetConfig+0x270>
 800a646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a64a:	d006      	beq.n	800a65a <UART_SetConfig+0x25e>
 800a64c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a650:	d009      	beq.n	800a666 <UART_SetConfig+0x26a>
 800a652:	e00b      	b.n	800a66c <UART_SetConfig+0x270>
 800a654:	2301      	movs	r3, #1
 800a656:	77fb      	strb	r3, [r7, #31]
 800a658:	e077      	b.n	800a74a <UART_SetConfig+0x34e>
 800a65a:	2302      	movs	r3, #2
 800a65c:	77fb      	strb	r3, [r7, #31]
 800a65e:	e074      	b.n	800a74a <UART_SetConfig+0x34e>
 800a660:	2304      	movs	r3, #4
 800a662:	77fb      	strb	r3, [r7, #31]
 800a664:	e071      	b.n	800a74a <UART_SetConfig+0x34e>
 800a666:	2308      	movs	r3, #8
 800a668:	77fb      	strb	r3, [r7, #31]
 800a66a:	e06e      	b.n	800a74a <UART_SetConfig+0x34e>
 800a66c:	2310      	movs	r3, #16
 800a66e:	77fb      	strb	r3, [r7, #31]
 800a670:	bf00      	nop
 800a672:	e06a      	b.n	800a74a <UART_SetConfig+0x34e>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a25      	ldr	r2, [pc, #148]	; (800a710 <UART_SetConfig+0x314>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d124      	bne.n	800a6c8 <UART_SetConfig+0x2cc>
 800a67e:	4b1e      	ldr	r3, [pc, #120]	; (800a6f8 <UART_SetConfig+0x2fc>)
 800a680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a684:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a68c:	d012      	beq.n	800a6b4 <UART_SetConfig+0x2b8>
 800a68e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a692:	d802      	bhi.n	800a69a <UART_SetConfig+0x29e>
 800a694:	2b00      	cmp	r3, #0
 800a696:	d007      	beq.n	800a6a8 <UART_SetConfig+0x2ac>
 800a698:	e012      	b.n	800a6c0 <UART_SetConfig+0x2c4>
 800a69a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a69e:	d006      	beq.n	800a6ae <UART_SetConfig+0x2b2>
 800a6a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6a4:	d009      	beq.n	800a6ba <UART_SetConfig+0x2be>
 800a6a6:	e00b      	b.n	800a6c0 <UART_SetConfig+0x2c4>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	77fb      	strb	r3, [r7, #31]
 800a6ac:	e04d      	b.n	800a74a <UART_SetConfig+0x34e>
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	77fb      	strb	r3, [r7, #31]
 800a6b2:	e04a      	b.n	800a74a <UART_SetConfig+0x34e>
 800a6b4:	2304      	movs	r3, #4
 800a6b6:	77fb      	strb	r3, [r7, #31]
 800a6b8:	e047      	b.n	800a74a <UART_SetConfig+0x34e>
 800a6ba:	2308      	movs	r3, #8
 800a6bc:	77fb      	strb	r3, [r7, #31]
 800a6be:	e044      	b.n	800a74a <UART_SetConfig+0x34e>
 800a6c0:	2310      	movs	r3, #16
 800a6c2:	77fb      	strb	r3, [r7, #31]
 800a6c4:	bf00      	nop
 800a6c6:	e040      	b.n	800a74a <UART_SetConfig+0x34e>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a11      	ldr	r2, [pc, #68]	; (800a714 <UART_SetConfig+0x318>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d139      	bne.n	800a746 <UART_SetConfig+0x34a>
 800a6d2:	4b09      	ldr	r3, [pc, #36]	; (800a6f8 <UART_SetConfig+0x2fc>)
 800a6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a6dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6e0:	d027      	beq.n	800a732 <UART_SetConfig+0x336>
 800a6e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6e6:	d817      	bhi.n	800a718 <UART_SetConfig+0x31c>
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d01c      	beq.n	800a726 <UART_SetConfig+0x32a>
 800a6ec:	e027      	b.n	800a73e <UART_SetConfig+0x342>
 800a6ee:	bf00      	nop
 800a6f0:	efff69f3 	.word	0xefff69f3
 800a6f4:	40011000 	.word	0x40011000
 800a6f8:	40023800 	.word	0x40023800
 800a6fc:	40004400 	.word	0x40004400
 800a700:	40004800 	.word	0x40004800
 800a704:	40004c00 	.word	0x40004c00
 800a708:	40005000 	.word	0x40005000
 800a70c:	40011400 	.word	0x40011400
 800a710:	40007800 	.word	0x40007800
 800a714:	40007c00 	.word	0x40007c00
 800a718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a71c:	d006      	beq.n	800a72c <UART_SetConfig+0x330>
 800a71e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a722:	d009      	beq.n	800a738 <UART_SetConfig+0x33c>
 800a724:	e00b      	b.n	800a73e <UART_SetConfig+0x342>
 800a726:	2300      	movs	r3, #0
 800a728:	77fb      	strb	r3, [r7, #31]
 800a72a:	e00e      	b.n	800a74a <UART_SetConfig+0x34e>
 800a72c:	2302      	movs	r3, #2
 800a72e:	77fb      	strb	r3, [r7, #31]
 800a730:	e00b      	b.n	800a74a <UART_SetConfig+0x34e>
 800a732:	2304      	movs	r3, #4
 800a734:	77fb      	strb	r3, [r7, #31]
 800a736:	e008      	b.n	800a74a <UART_SetConfig+0x34e>
 800a738:	2308      	movs	r3, #8
 800a73a:	77fb      	strb	r3, [r7, #31]
 800a73c:	e005      	b.n	800a74a <UART_SetConfig+0x34e>
 800a73e:	2310      	movs	r3, #16
 800a740:	77fb      	strb	r3, [r7, #31]
 800a742:	bf00      	nop
 800a744:	e001      	b.n	800a74a <UART_SetConfig+0x34e>
 800a746:	2310      	movs	r3, #16
 800a748:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	69db      	ldr	r3, [r3, #28]
 800a74e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a752:	d17f      	bne.n	800a854 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a754:	7ffb      	ldrb	r3, [r7, #31]
 800a756:	2b08      	cmp	r3, #8
 800a758:	d85c      	bhi.n	800a814 <UART_SetConfig+0x418>
 800a75a:	a201      	add	r2, pc, #4	; (adr r2, 800a760 <UART_SetConfig+0x364>)
 800a75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a760:	0800a785 	.word	0x0800a785
 800a764:	0800a7a5 	.word	0x0800a7a5
 800a768:	0800a7c5 	.word	0x0800a7c5
 800a76c:	0800a815 	.word	0x0800a815
 800a770:	0800a7dd 	.word	0x0800a7dd
 800a774:	0800a815 	.word	0x0800a815
 800a778:	0800a815 	.word	0x0800a815
 800a77c:	0800a815 	.word	0x0800a815
 800a780:	0800a7fd 	.word	0x0800a7fd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a784:	f7fc f808 	bl	8006798 <HAL_RCC_GetPCLK1Freq>
 800a788:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	005a      	lsls	r2, r3, #1
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	085b      	lsrs	r3, r3, #1
 800a794:	441a      	add	r2, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	61bb      	str	r3, [r7, #24]
        break;
 800a7a2:	e03a      	b.n	800a81a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7a4:	f7fc f80c 	bl	80067c0 <HAL_RCC_GetPCLK2Freq>
 800a7a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	005a      	lsls	r2, r3, #1
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	085b      	lsrs	r3, r3, #1
 800a7b4:	441a      	add	r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	61bb      	str	r3, [r7, #24]
        break;
 800a7c2:	e02a      	b.n	800a81a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	085a      	lsrs	r2, r3, #1
 800a7ca:	4b5f      	ldr	r3, [pc, #380]	; (800a948 <UART_SetConfig+0x54c>)
 800a7cc:	4413      	add	r3, r2
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	6852      	ldr	r2, [r2, #4]
 800a7d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	61bb      	str	r3, [r7, #24]
        break;
 800a7da:	e01e      	b.n	800a81a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7dc:	f7fb ff1e 	bl	800661c <HAL_RCC_GetSysClockFreq>
 800a7e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	005a      	lsls	r2, r3, #1
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	085b      	lsrs	r3, r3, #1
 800a7ec:	441a      	add	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	61bb      	str	r3, [r7, #24]
        break;
 800a7fa:	e00e      	b.n	800a81a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	085b      	lsrs	r3, r3, #1
 800a802:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a80e:	b29b      	uxth	r3, r3
 800a810:	61bb      	str	r3, [r7, #24]
        break;
 800a812:	e002      	b.n	800a81a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	75fb      	strb	r3, [r7, #23]
        break;
 800a818:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	2b0f      	cmp	r3, #15
 800a81e:	d916      	bls.n	800a84e <UART_SetConfig+0x452>
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a826:	d212      	bcs.n	800a84e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	f023 030f 	bic.w	r3, r3, #15
 800a830:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	085b      	lsrs	r3, r3, #1
 800a836:	b29b      	uxth	r3, r3
 800a838:	f003 0307 	and.w	r3, r3, #7
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	897b      	ldrh	r3, [r7, #10]
 800a840:	4313      	orrs	r3, r2
 800a842:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	897a      	ldrh	r2, [r7, #10]
 800a84a:	60da      	str	r2, [r3, #12]
 800a84c:	e070      	b.n	800a930 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	75fb      	strb	r3, [r7, #23]
 800a852:	e06d      	b.n	800a930 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a854:	7ffb      	ldrb	r3, [r7, #31]
 800a856:	2b08      	cmp	r3, #8
 800a858:	d859      	bhi.n	800a90e <UART_SetConfig+0x512>
 800a85a:	a201      	add	r2, pc, #4	; (adr r2, 800a860 <UART_SetConfig+0x464>)
 800a85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a860:	0800a885 	.word	0x0800a885
 800a864:	0800a8a3 	.word	0x0800a8a3
 800a868:	0800a8c1 	.word	0x0800a8c1
 800a86c:	0800a90f 	.word	0x0800a90f
 800a870:	0800a8d9 	.word	0x0800a8d9
 800a874:	0800a90f 	.word	0x0800a90f
 800a878:	0800a90f 	.word	0x0800a90f
 800a87c:	0800a90f 	.word	0x0800a90f
 800a880:	0800a8f7 	.word	0x0800a8f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a884:	f7fb ff88 	bl	8006798 <HAL_RCC_GetPCLK1Freq>
 800a888:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	085a      	lsrs	r2, r3, #1
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	441a      	add	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	fbb2 f3f3 	udiv	r3, r2, r3
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	61bb      	str	r3, [r7, #24]
        break;
 800a8a0:	e038      	b.n	800a914 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8a2:	f7fb ff8d 	bl	80067c0 <HAL_RCC_GetPCLK2Freq>
 800a8a6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	085a      	lsrs	r2, r3, #1
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	441a      	add	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	61bb      	str	r3, [r7, #24]
        break;
 800a8be:	e029      	b.n	800a914 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	085a      	lsrs	r2, r3, #1
 800a8c6:	4b21      	ldr	r3, [pc, #132]	; (800a94c <UART_SetConfig+0x550>)
 800a8c8:	4413      	add	r3, r2
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	6852      	ldr	r2, [r2, #4]
 800a8ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	61bb      	str	r3, [r7, #24]
        break;
 800a8d6:	e01d      	b.n	800a914 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8d8:	f7fb fea0 	bl	800661c <HAL_RCC_GetSysClockFreq>
 800a8dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	085a      	lsrs	r2, r3, #1
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	441a      	add	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	61bb      	str	r3, [r7, #24]
        break;
 800a8f4:	e00e      	b.n	800a914 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	085b      	lsrs	r3, r3, #1
 800a8fc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	fbb2 f3f3 	udiv	r3, r2, r3
 800a908:	b29b      	uxth	r3, r3
 800a90a:	61bb      	str	r3, [r7, #24]
        break;
 800a90c:	e002      	b.n	800a914 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	75fb      	strb	r3, [r7, #23]
        break;
 800a912:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	2b0f      	cmp	r3, #15
 800a918:	d908      	bls.n	800a92c <UART_SetConfig+0x530>
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a920:	d204      	bcs.n	800a92c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	69ba      	ldr	r2, [r7, #24]
 800a928:	60da      	str	r2, [r3, #12]
 800a92a:	e001      	b.n	800a930 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a93c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3720      	adds	r7, #32
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	01e84800 	.word	0x01e84800
 800a94c:	00f42400 	.word	0x00f42400

0800a950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00a      	beq.n	800a97a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	430a      	orrs	r2, r1
 800a978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97e:	f003 0302 	and.w	r3, r3, #2
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00a      	beq.n	800a99c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	430a      	orrs	r2, r1
 800a99a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a0:	f003 0304 	and.w	r3, r3, #4
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00a      	beq.n	800a9be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	430a      	orrs	r2, r1
 800a9bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c2:	f003 0308 	and.w	r3, r3, #8
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00a      	beq.n	800a9e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	430a      	orrs	r2, r1
 800a9de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e4:	f003 0310 	and.w	r3, r3, #16
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00a      	beq.n	800aa02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	430a      	orrs	r2, r1
 800aa00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa06:	f003 0320 	and.w	r3, r3, #32
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00a      	beq.n	800aa24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	430a      	orrs	r2, r1
 800aa22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d01a      	beq.n	800aa66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	430a      	orrs	r2, r1
 800aa44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa4e:	d10a      	bne.n	800aa66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	430a      	orrs	r2, r1
 800aa64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00a      	beq.n	800aa88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	430a      	orrs	r2, r1
 800aa86:	605a      	str	r2, [r3, #4]
  }
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af02      	add	r7, sp, #8
 800aa9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800aaa2:	f7f8 fafb 	bl	800309c <HAL_GetTick>
 800aaa6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f003 0308 	and.w	r3, r3, #8
 800aab2:	2b08      	cmp	r3, #8
 800aab4:	d10e      	bne.n	800aad4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aab6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 f814 	bl	800aaf2 <UART_WaitOnFlagUntilTimeout>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aad0:	2303      	movs	r3, #3
 800aad2:	e00a      	b.n	800aaea <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2220      	movs	r2, #32
 800aad8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2220      	movs	r2, #32
 800aade:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b084      	sub	sp, #16
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	60f8      	str	r0, [r7, #12]
 800aafa:	60b9      	str	r1, [r7, #8]
 800aafc:	603b      	str	r3, [r7, #0]
 800aafe:	4613      	mov	r3, r2
 800ab00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab02:	e05d      	b.n	800abc0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab0a:	d059      	beq.n	800abc0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab0c:	f7f8 fac6 	bl	800309c <HAL_GetTick>
 800ab10:	4602      	mov	r2, r0
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	1ad3      	subs	r3, r2, r3
 800ab16:	69ba      	ldr	r2, [r7, #24]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d302      	bcc.n	800ab22 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d11b      	bne.n	800ab5a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab30:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	689a      	ldr	r2, [r3, #8]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f022 0201 	bic.w	r2, r2, #1
 800ab40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2220      	movs	r2, #32
 800ab46:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2220      	movs	r2, #32
 800ab4c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ab56:	2303      	movs	r3, #3
 800ab58:	e042      	b.n	800abe0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 0304 	and.w	r3, r3, #4
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d02b      	beq.n	800abc0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	69db      	ldr	r3, [r3, #28]
 800ab6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab76:	d123      	bne.n	800abc0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab80:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab90:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	689a      	ldr	r2, [r3, #8]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f022 0201 	bic.w	r2, r2, #1
 800aba0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2220      	movs	r2, #32
 800aba6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2220      	movs	r2, #32
 800abac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2220      	movs	r2, #32
 800abb2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800abbc:	2303      	movs	r3, #3
 800abbe:	e00f      	b.n	800abe0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	69da      	ldr	r2, [r3, #28]
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	4013      	ands	r3, r2
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	429a      	cmp	r2, r3
 800abce:	bf0c      	ite	eq
 800abd0:	2301      	moveq	r3, #1
 800abd2:	2300      	movne	r3, #0
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	461a      	mov	r2, r3
 800abd8:	79fb      	ldrb	r3, [r7, #7]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d092      	beq.n	800ab04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800abfe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	689a      	ldr	r2, [r3, #8]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f022 0201 	bic.w	r2, r2, #1
 800ac0e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2220      	movs	r2, #32
 800ac14:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800ac1c:	bf00      	nop
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f7ff fbce 	bl	800a3e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac4c:	bf00      	nop
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac6a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2220      	movs	r2, #32
 800ac70:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7ff fbab 	bl	800a3d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac7e:	bf00      	nop
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800ac92:	2300      	movs	r3, #0
 800ac94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800ac96:	2300      	movs	r3, #0
 800ac98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d027      	beq.n	800acf2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	4b2f      	ldr	r3, [pc, #188]	; (800ad68 <FMC_SDRAM_Init+0xe0>)
 800acac:	4013      	ands	r3, r2
 800acae:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800acb8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800acbe:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800acc4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800acca:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800acd0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800acd6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800acdc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ace2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	601a      	str	r2, [r3, #0]
 800acf0:	e032      	b.n	800ad58 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800acfe:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ad08:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ad0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	4b12      	ldr	r3, [pc, #72]	; (800ad68 <FMC_SDRAM_Init+0xe0>)
 800ad20:	4013      	ands	r3, r2
 800ad22:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad2c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800ad32:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800ad38:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800ad3e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800ad44:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	68ba      	ldr	r2, [r7, #8]
 800ad56:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	ffff8000 	.word	0xffff8000

0800ad6c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b087      	sub	sp, #28
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d02e      	beq.n	800ade4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ad92:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ada2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800adac:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	3b01      	subs	r3, #1
 800adb4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800adb6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	3b01      	subs	r3, #1
 800adbe:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800adc0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	3b01      	subs	r3, #1
 800adc8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800adca:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	3b01      	subs	r3, #1
 800add2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800add4:	4313      	orrs	r3, r2
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	4313      	orrs	r3, r2
 800adda:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	609a      	str	r2, [r3, #8]
 800ade2:	e039      	b.n	800ae58 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800adea:	697a      	ldr	r2, [r7, #20]
 800adec:	4b1e      	ldr	r3, [pc, #120]	; (800ae68 <FMC_SDRAM_Timing_Init+0xfc>)
 800adee:	4013      	ands	r3, r2
 800adf0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	3b01      	subs	r3, #1
 800adf8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	3b01      	subs	r3, #1
 800ae00:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ae02:	4313      	orrs	r3, r2
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ae16:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	3b01      	subs	r3, #1
 800ae24:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ae26:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ae30:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	3b01      	subs	r3, #1
 800ae38:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ae3a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	3b01      	subs	r3, #1
 800ae42:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ae44:	4313      	orrs	r3, r2
 800ae46:	693a      	ldr	r2, [r7, #16]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	693a      	ldr	r2, [r7, #16]
 800ae56:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	371c      	adds	r7, #28
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	ff0f0fff 	.word	0xff0f0fff

0800ae6c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b087      	sub	sp, #28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ae84:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800ae8e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ae96:	4313      	orrs	r3, r2
 800ae98:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	371c      	adds	r7, #28
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr

0800aeae <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800aeae:	b480      	push	{r7}
 800aeb0:	b083      	sub	sp, #12
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	695a      	ldr	r2, [r3, #20]
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	005b      	lsls	r3, r3, #1
 800aec0:	431a      	orrs	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	370c      	adds	r7, #12
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aed4:	b084      	sub	sp, #16
 800aed6:	b480      	push	{r7}
 800aed8:	b085      	sub	sp, #20
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	f107 001c 	add.w	r0, r7, #28
 800aee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aee6:	2300      	movs	r3, #0
 800aee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aeea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aeec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aeee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800aef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800aef2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800aef6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800aefa:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800aefe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	4313      	orrs	r3, r2
 800af04:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	685a      	ldr	r2, [r3, #4]
 800af0a:	4b07      	ldr	r3, [pc, #28]	; (800af28 <SDMMC_Init+0x54>)
 800af0c:	4013      	ands	r3, r2
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	431a      	orrs	r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3714      	adds	r7, #20
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	b004      	add	sp, #16
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	ffff8100 	.word	0xffff8100

0800af2c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800af46:	b580      	push	{r7, lr}
 800af48:	b082      	sub	sp, #8
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2203      	movs	r2, #3
 800af52:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800af54:	2002      	movs	r0, #2
 800af56:	f7f8 f8ad 	bl	80030b4 <HAL_Delay>
  
  return HAL_OK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f003 0303 	and.w	r3, r3, #3
}
 800af74:	4618      	mov	r0, r3
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800af9e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800afa4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800afaa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	4313      	orrs	r3, r2
 800afb0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	68da      	ldr	r2, [r3, #12]
 800afb6:	4b06      	ldr	r3, [pc, #24]	; (800afd0 <SDMMC_SendCommand+0x50>)
 800afb8:	4013      	ands	r3, r2
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	431a      	orrs	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	fffff000 	.word	0xfffff000

0800afd4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	b2db      	uxtb	r3, r3
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	370c      	adds	r7, #12
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800afee:	b480      	push	{r7}
 800aff0:	b085      	sub	sp, #20
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
 800aff6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	3314      	adds	r3, #20
 800affc:	461a      	mov	r2, r3
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	4413      	add	r3, r2
 800b002:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
}  
 800b008:	4618      	mov	r0, r3
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b01e:	2300      	movs	r3, #0
 800b020:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	685a      	ldr	r2, [r3, #4]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b03a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b040:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b046:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b052:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	431a      	orrs	r2, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b05e:	2300      	movs	r3, #0

}
 800b060:	4618      	mov	r0, r3
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b088      	sub	sp, #32
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b07a:	2310      	movs	r3, #16
 800b07c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b07e:	2340      	movs	r3, #64	; 0x40
 800b080:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b082:	2300      	movs	r3, #0
 800b084:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b08a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b08c:	f107 0308 	add.w	r3, r7, #8
 800b090:	4619      	mov	r1, r3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7ff ff74 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b098:	f241 3288 	movw	r2, #5000	; 0x1388
 800b09c:	2110      	movs	r1, #16
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fa42 	bl	800b528 <SDMMC_GetCmdResp1>
 800b0a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0a6:	69fb      	ldr	r3, [r7, #28]
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3720      	adds	r7, #32
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b088      	sub	sp, #32
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b0be:	2311      	movs	r3, #17
 800b0c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0c2:	2340      	movs	r3, #64	; 0x40
 800b0c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0d0:	f107 0308 	add.w	r3, r7, #8
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f7ff ff52 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b0dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0e0:	2111      	movs	r1, #17
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f000 fa20 	bl	800b528 <SDMMC_GetCmdResp1>
 800b0e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0ea:	69fb      	ldr	r3, [r7, #28]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3720      	adds	r7, #32
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b088      	sub	sp, #32
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b102:	2312      	movs	r3, #18
 800b104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b106:	2340      	movs	r3, #64	; 0x40
 800b108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b10a:	2300      	movs	r3, #0
 800b10c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b10e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b112:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b114:	f107 0308 	add.w	r3, r7, #8
 800b118:	4619      	mov	r1, r3
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7ff ff30 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b120:	f241 3288 	movw	r2, #5000	; 0x1388
 800b124:	2112      	movs	r1, #18
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f9fe 	bl	800b528 <SDMMC_GetCmdResp1>
 800b12c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b12e:	69fb      	ldr	r3, [r7, #28]
}
 800b130:	4618      	mov	r0, r3
 800b132:	3720      	adds	r7, #32
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b088      	sub	sp, #32
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b146:	2318      	movs	r3, #24
 800b148:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b14a:	2340      	movs	r3, #64	; 0x40
 800b14c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b14e:	2300      	movs	r3, #0
 800b150:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b156:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b158:	f107 0308 	add.w	r3, r7, #8
 800b15c:	4619      	mov	r1, r3
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f7ff ff0e 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b164:	f241 3288 	movw	r2, #5000	; 0x1388
 800b168:	2118      	movs	r1, #24
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f9dc 	bl	800b528 <SDMMC_GetCmdResp1>
 800b170:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b172:	69fb      	ldr	r3, [r7, #28]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3720      	adds	r7, #32
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b088      	sub	sp, #32
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b18a:	2319      	movs	r3, #25
 800b18c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b18e:	2340      	movs	r3, #64	; 0x40
 800b190:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b192:	2300      	movs	r3, #0
 800b194:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b19a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b19c:	f107 0308 	add.w	r3, r7, #8
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f7ff feec 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b1a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ac:	2119      	movs	r1, #25
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f9ba 	bl	800b528 <SDMMC_GetCmdResp1>
 800b1b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1b6:	69fb      	ldr	r3, [r7, #28]
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3720      	adds	r7, #32
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b088      	sub	sp, #32
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b1cc:	230c      	movs	r3, #12
 800b1ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1d0:	2340      	movs	r3, #64	; 0x40
 800b1d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1de:	f107 0308 	add.w	r3, r7, #8
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7ff fecb 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b1ea:	4a05      	ldr	r2, [pc, #20]	; (800b200 <SDMMC_CmdStopTransfer+0x40>)
 800b1ec:	210c      	movs	r1, #12
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 f99a 	bl	800b528 <SDMMC_GetCmdResp1>
 800b1f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1f6:	69fb      	ldr	r3, [r7, #28]
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3720      	adds	r7, #32
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	05f5e100 	.word	0x05f5e100

0800b204 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b08a      	sub	sp, #40	; 0x28
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b214:	2307      	movs	r3, #7
 800b216:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b218:	2340      	movs	r3, #64	; 0x40
 800b21a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b21c:	2300      	movs	r3, #0
 800b21e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b224:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b226:	f107 0310 	add.w	r3, r7, #16
 800b22a:	4619      	mov	r1, r3
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f7ff fea7 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b232:	f241 3288 	movw	r2, #5000	; 0x1388
 800b236:	2107      	movs	r1, #7
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f000 f975 	bl	800b528 <SDMMC_GetCmdResp1>
 800b23e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b242:	4618      	mov	r0, r3
 800b244:	3728      	adds	r7, #40	; 0x28
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b088      	sub	sp, #32
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b252:	2300      	movs	r3, #0
 800b254:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b256:	2300      	movs	r3, #0
 800b258:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b25a:	2300      	movs	r3, #0
 800b25c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b25e:	2300      	movs	r3, #0
 800b260:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b266:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b268:	f107 0308 	add.w	r3, r7, #8
 800b26c:	4619      	mov	r1, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7ff fe86 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f92f 	bl	800b4d8 <SDMMC_GetCmdError>
 800b27a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b27c:	69fb      	ldr	r3, [r7, #28]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3720      	adds	r7, #32
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b088      	sub	sp, #32
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b28e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b292:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b294:	2308      	movs	r3, #8
 800b296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b298:	2340      	movs	r3, #64	; 0x40
 800b29a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b29c:	2300      	movs	r3, #0
 800b29e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2a6:	f107 0308 	add.w	r3, r7, #8
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f7ff fe67 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fb18 	bl	800b8e8 <SDMMC_GetCmdResp7>
 800b2b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2ba:	69fb      	ldr	r3, [r7, #28]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3720      	adds	r7, #32
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b088      	sub	sp, #32
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b2d2:	2337      	movs	r3, #55	; 0x37
 800b2d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2d6:	2340      	movs	r3, #64	; 0x40
 800b2d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2e4:	f107 0308 	add.w	r3, r7, #8
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f7ff fe48 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b2f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2f4:	2137      	movs	r1, #55	; 0x37
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 f916 	bl	800b528 <SDMMC_GetCmdResp1>
 800b2fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2fe:	69fb      	ldr	r3, [r7, #28]
}
 800b300:	4618      	mov	r0, r3
 800b302:	3720      	adds	r7, #32
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b088      	sub	sp, #32
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	4b0d      	ldr	r3, [pc, #52]	; (800b34c <SDMMC_CmdAppOperCommand+0x44>)
 800b316:	4313      	orrs	r3, r2
 800b318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b31a:	2329      	movs	r3, #41	; 0x29
 800b31c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b31e:	2340      	movs	r3, #64	; 0x40
 800b320:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b322:	2300      	movs	r3, #0
 800b324:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b32a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b32c:	f107 0308 	add.w	r3, r7, #8
 800b330:	4619      	mov	r1, r3
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7ff fe24 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fa27 	bl	800b78c <SDMMC_GetCmdResp3>
 800b33e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b340:	69fb      	ldr	r3, [r7, #28]
}
 800b342:	4618      	mov	r0, r3
 800b344:	3720      	adds	r7, #32
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	80100000 	.word	0x80100000

0800b350 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b088      	sub	sp, #32
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b35e:	2306      	movs	r3, #6
 800b360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b362:	2340      	movs	r3, #64	; 0x40
 800b364:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b366:	2300      	movs	r3, #0
 800b368:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b36a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b36e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b370:	f107 0308 	add.w	r3, r7, #8
 800b374:	4619      	mov	r1, r3
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f7ff fe02 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b37c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b380:	2106      	movs	r1, #6
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 f8d0 	bl	800b528 <SDMMC_GetCmdResp1>
 800b388:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b38a:	69fb      	ldr	r3, [r7, #28]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3720      	adds	r7, #32
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b088      	sub	sp, #32
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b39c:	2300      	movs	r3, #0
 800b39e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b3a0:	2333      	movs	r3, #51	; 0x33
 800b3a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3a4:	2340      	movs	r3, #64	; 0x40
 800b3a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3b2:	f107 0308 	add.w	r3, r7, #8
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f7ff fde1 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b3be:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3c2:	2133      	movs	r1, #51	; 0x33
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 f8af 	bl	800b528 <SDMMC_GetCmdResp1>
 800b3ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3cc:	69fb      	ldr	r3, [r7, #28]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3720      	adds	r7, #32
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b088      	sub	sp, #32
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b3e2:	2302      	movs	r3, #2
 800b3e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b3e6:	23c0      	movs	r3, #192	; 0xc0
 800b3e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3f4:	f107 0308 	add.w	r3, r7, #8
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7ff fdc0 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 f97d 	bl	800b700 <SDMMC_GetCmdResp2>
 800b406:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b408:	69fb      	ldr	r3, [r7, #28]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3720      	adds	r7, #32
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b088      	sub	sp, #32
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b420:	2309      	movs	r3, #9
 800b422:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b424:	23c0      	movs	r3, #192	; 0xc0
 800b426:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b428:	2300      	movs	r3, #0
 800b42a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b42c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b430:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b432:	f107 0308 	add.w	r3, r7, #8
 800b436:	4619      	mov	r1, r3
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f7ff fda1 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f95e 	bl	800b700 <SDMMC_GetCmdResp2>
 800b444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b446:	69fb      	ldr	r3, [r7, #28]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3720      	adds	r7, #32
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b088      	sub	sp, #32
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b45a:	2300      	movs	r3, #0
 800b45c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b45e:	2303      	movs	r3, #3
 800b460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b462:	2340      	movs	r3, #64	; 0x40
 800b464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b466:	2300      	movs	r3, #0
 800b468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b46a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b46e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b470:	f107 0308 	add.w	r3, r7, #8
 800b474:	4619      	mov	r1, r3
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f7ff fd82 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b47c:	683a      	ldr	r2, [r7, #0]
 800b47e:	2103      	movs	r1, #3
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f9bd 	bl	800b800 <SDMMC_GetCmdResp6>
 800b486:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b488:	69fb      	ldr	r3, [r7, #28]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3720      	adds	r7, #32
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b088      	sub	sp, #32
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
 800b49a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b4a0:	230d      	movs	r3, #13
 800b4a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4a4:	2340      	movs	r3, #64	; 0x40
 800b4a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4b2:	f107 0308 	add.w	r3, r7, #8
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7ff fd61 	bl	800af80 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b4be:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4c2:	210d      	movs	r1, #13
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 f82f 	bl	800b528 <SDMMC_GetCmdResp1>
 800b4ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4cc:	69fb      	ldr	r3, [r7, #28]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3720      	adds	r7, #32
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
	...

0800b4d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b4d8:	b490      	push	{r4, r7}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4e0:	4b0f      	ldr	r3, [pc, #60]	; (800b520 <SDMMC_GetCmdError+0x48>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a0f      	ldr	r2, [pc, #60]	; (800b524 <SDMMC_GetCmdError+0x4c>)
 800b4e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ea:	0a5b      	lsrs	r3, r3, #9
 800b4ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b4f4:	4623      	mov	r3, r4
 800b4f6:	1e5c      	subs	r4, r3, #1
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d102      	bne.n	800b502 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b500:	e009      	b.n	800b516 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d0f2      	beq.n	800b4f4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	22c5      	movs	r2, #197	; 0xc5
 800b512:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bc90      	pop	{r4, r7}
 800b51e:	4770      	bx	lr
 800b520:	2000002c 	.word	0x2000002c
 800b524:	10624dd3 	.word	0x10624dd3

0800b528 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b528:	b590      	push	{r4, r7, lr}
 800b52a:	b087      	sub	sp, #28
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	460b      	mov	r3, r1
 800b532:	607a      	str	r2, [r7, #4]
 800b534:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b536:	4b6f      	ldr	r3, [pc, #444]	; (800b6f4 <SDMMC_GetCmdResp1+0x1cc>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a6f      	ldr	r2, [pc, #444]	; (800b6f8 <SDMMC_GetCmdResp1+0x1d0>)
 800b53c:	fba2 2303 	umull	r2, r3, r2, r3
 800b540:	0a5b      	lsrs	r3, r3, #9
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b548:	4623      	mov	r3, r4
 800b54a:	1e5c      	subs	r4, r3, #1
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d102      	bne.n	800b556 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b550:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b554:	e0c9      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b55a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0f0      	beq.n	800b548 <SDMMC_GetCmdResp1+0x20>
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1eb      	bne.n	800b548 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b574:	f003 0304 	and.w	r3, r3, #4
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d004      	beq.n	800b586 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2204      	movs	r2, #4
 800b580:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b582:	2304      	movs	r3, #4
 800b584:	e0b1      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b58a:	f003 0301 	and.w	r3, r3, #1
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d004      	beq.n	800b59c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2201      	movs	r2, #1
 800b596:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b598:	2301      	movs	r3, #1
 800b59a:	e0a6      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	22c5      	movs	r2, #197	; 0xc5
 800b5a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f7ff fd16 	bl	800afd4 <SDMMC_GetCommandResponse>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	7afb      	ldrb	r3, [r7, #11]
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d001      	beq.n	800b5b6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e099      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f7ff fd18 	bl	800afee <SDMMC_GetResponse>
 800b5be:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b5c0:	693a      	ldr	r2, [r7, #16]
 800b5c2:	4b4e      	ldr	r3, [pc, #312]	; (800b6fc <SDMMC_GetCmdResp1+0x1d4>)
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	e08d      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	da02      	bge.n	800b5da <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b5d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b5d8:	e087      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d001      	beq.n	800b5e8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b5e4:	2340      	movs	r3, #64	; 0x40
 800b5e6:	e080      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b5f2:	2380      	movs	r3, #128	; 0x80
 800b5f4:	e079      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b600:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b604:	e071      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d002      	beq.n	800b616 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b610:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b614:	e069      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d002      	beq.n	800b626 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b624:	e061      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d002      	beq.n	800b636 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b630:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b634:	e059      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d002      	beq.n	800b646 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b644:	e051      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b654:	e049      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b660:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b664:	e041      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b674:	e039      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d002      	beq.n	800b686 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b680:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b684:	e031      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d002      	beq.n	800b696 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b690:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b694:	e029      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b6a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b6a4:	e021      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d002      	beq.n	800b6b6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b6b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b6b4:	e019      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d002      	beq.n	800b6c6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b6c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b6c4:	e011      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d002      	beq.n	800b6d6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b6d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b6d4:	e009      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	f003 0308 	and.w	r3, r3, #8
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d002      	beq.n	800b6e6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b6e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b6e4:	e001      	b.n	800b6ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b6e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	371c      	adds	r7, #28
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd90      	pop	{r4, r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	2000002c 	.word	0x2000002c
 800b6f8:	10624dd3 	.word	0x10624dd3
 800b6fc:	fdffe008 	.word	0xfdffe008

0800b700 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b700:	b490      	push	{r4, r7}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b708:	4b1e      	ldr	r3, [pc, #120]	; (800b784 <SDMMC_GetCmdResp2+0x84>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a1e      	ldr	r2, [pc, #120]	; (800b788 <SDMMC_GetCmdResp2+0x88>)
 800b70e:	fba2 2303 	umull	r2, r3, r2, r3
 800b712:	0a5b      	lsrs	r3, r3, #9
 800b714:	f241 3288 	movw	r2, #5000	; 0x1388
 800b718:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b71c:	4623      	mov	r3, r4
 800b71e:	1e5c      	subs	r4, r3, #1
 800b720:	2b00      	cmp	r3, #0
 800b722:	d102      	bne.n	800b72a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b724:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b728:	e026      	b.n	800b778 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b72e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b736:	2b00      	cmp	r3, #0
 800b738:	d0f0      	beq.n	800b71c <SDMMC_GetCmdResp2+0x1c>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1eb      	bne.n	800b71c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b748:	f003 0304 	and.w	r3, r3, #4
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d004      	beq.n	800b75a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2204      	movs	r2, #4
 800b754:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b756:	2304      	movs	r3, #4
 800b758:	e00e      	b.n	800b778 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b75e:	f003 0301 	and.w	r3, r3, #1
 800b762:	2b00      	cmp	r3, #0
 800b764:	d004      	beq.n	800b770 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b76c:	2301      	movs	r3, #1
 800b76e:	e003      	b.n	800b778 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	22c5      	movs	r2, #197	; 0xc5
 800b774:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b776:	2300      	movs	r3, #0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bc90      	pop	{r4, r7}
 800b780:	4770      	bx	lr
 800b782:	bf00      	nop
 800b784:	2000002c 	.word	0x2000002c
 800b788:	10624dd3 	.word	0x10624dd3

0800b78c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b78c:	b490      	push	{r4, r7}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b794:	4b18      	ldr	r3, [pc, #96]	; (800b7f8 <SDMMC_GetCmdResp3+0x6c>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4a18      	ldr	r2, [pc, #96]	; (800b7fc <SDMMC_GetCmdResp3+0x70>)
 800b79a:	fba2 2303 	umull	r2, r3, r2, r3
 800b79e:	0a5b      	lsrs	r3, r3, #9
 800b7a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b7a8:	4623      	mov	r3, r4
 800b7aa:	1e5c      	subs	r4, r3, #1
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d102      	bne.n	800b7b6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7b4:	e01b      	b.n	800b7ee <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d0f0      	beq.n	800b7a8 <SDMMC_GetCmdResp3+0x1c>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1eb      	bne.n	800b7a8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d4:	f003 0304 	and.w	r3, r3, #4
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d004      	beq.n	800b7e6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2204      	movs	r2, #4
 800b7e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7e2:	2304      	movs	r3, #4
 800b7e4:	e003      	b.n	800b7ee <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	22c5      	movs	r2, #197	; 0xc5
 800b7ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bc90      	pop	{r4, r7}
 800b7f6:	4770      	bx	lr
 800b7f8:	2000002c 	.word	0x2000002c
 800b7fc:	10624dd3 	.word	0x10624dd3

0800b800 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b800:	b590      	push	{r4, r7, lr}
 800b802:	b087      	sub	sp, #28
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	460b      	mov	r3, r1
 800b80a:	607a      	str	r2, [r7, #4]
 800b80c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b80e:	4b34      	ldr	r3, [pc, #208]	; (800b8e0 <SDMMC_GetCmdResp6+0xe0>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a34      	ldr	r2, [pc, #208]	; (800b8e4 <SDMMC_GetCmdResp6+0xe4>)
 800b814:	fba2 2303 	umull	r2, r3, r2, r3
 800b818:	0a5b      	lsrs	r3, r3, #9
 800b81a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b81e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b822:	4623      	mov	r3, r4
 800b824:	1e5c      	subs	r4, r3, #1
 800b826:	2b00      	cmp	r3, #0
 800b828:	d102      	bne.n	800b830 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b82a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b82e:	e052      	b.n	800b8d6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b834:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d0f0      	beq.n	800b822 <SDMMC_GetCmdResp6+0x22>
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b846:	2b00      	cmp	r3, #0
 800b848:	d1eb      	bne.n	800b822 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b84e:	f003 0304 	and.w	r3, r3, #4
 800b852:	2b00      	cmp	r3, #0
 800b854:	d004      	beq.n	800b860 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2204      	movs	r2, #4
 800b85a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b85c:	2304      	movs	r3, #4
 800b85e:	e03a      	b.n	800b8d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b864:	f003 0301 	and.w	r3, r3, #1
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d004      	beq.n	800b876 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2201      	movs	r2, #1
 800b870:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b872:	2301      	movs	r3, #1
 800b874:	e02f      	b.n	800b8d6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f7ff fbac 	bl	800afd4 <SDMMC_GetCommandResponse>
 800b87c:	4603      	mov	r3, r0
 800b87e:	461a      	mov	r2, r3
 800b880:	7afb      	ldrb	r3, [r7, #11]
 800b882:	4293      	cmp	r3, r2
 800b884:	d001      	beq.n	800b88a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b886:	2301      	movs	r3, #1
 800b888:	e025      	b.n	800b8d6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	22c5      	movs	r2, #197	; 0xc5
 800b88e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b890:	2100      	movs	r1, #0
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f7ff fbab 	bl	800afee <SDMMC_GetResponse>
 800b898:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d106      	bne.n	800b8b2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	0c1b      	lsrs	r3, r3, #16
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	e011      	b.n	800b8d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d002      	beq.n	800b8c2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b8bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b8c0:	e009      	b.n	800b8d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d002      	beq.n	800b8d2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b8cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8d0:	e001      	b.n	800b8d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b8d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	371c      	adds	r7, #28
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd90      	pop	{r4, r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	2000002c 	.word	0x2000002c
 800b8e4:	10624dd3 	.word	0x10624dd3

0800b8e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b8e8:	b490      	push	{r4, r7}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b8f0:	4b21      	ldr	r3, [pc, #132]	; (800b978 <SDMMC_GetCmdResp7+0x90>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4a21      	ldr	r2, [pc, #132]	; (800b97c <SDMMC_GetCmdResp7+0x94>)
 800b8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b8fa:	0a5b      	lsrs	r3, r3, #9
 800b8fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b900:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b904:	4623      	mov	r3, r4
 800b906:	1e5c      	subs	r4, r3, #1
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d102      	bne.n	800b912 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b90c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b910:	e02c      	b.n	800b96c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b916:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d0f0      	beq.n	800b904 <SDMMC_GetCmdResp7+0x1c>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d1eb      	bne.n	800b904 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b930:	f003 0304 	and.w	r3, r3, #4
 800b934:	2b00      	cmp	r3, #0
 800b936:	d004      	beq.n	800b942 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2204      	movs	r2, #4
 800b93c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b93e:	2304      	movs	r3, #4
 800b940:	e014      	b.n	800b96c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b946:	f003 0301 	and.w	r3, r3, #1
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d004      	beq.n	800b958 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2201      	movs	r2, #1
 800b952:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b954:	2301      	movs	r3, #1
 800b956:	e009      	b.n	800b96c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2240      	movs	r2, #64	; 0x40
 800b968:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b96a:	2300      	movs	r3, #0
  
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3710      	adds	r7, #16
 800b970:	46bd      	mov	sp, r7
 800b972:	bc90      	pop	{r4, r7}
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	2000002c 	.word	0x2000002c
 800b97c:	10624dd3 	.word	0x10624dd3

0800b980 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b984:	4904      	ldr	r1, [pc, #16]	; (800b998 <MX_FATFS_Init+0x18>)
 800b986:	4805      	ldr	r0, [pc, #20]	; (800b99c <MX_FATFS_Init+0x1c>)
 800b988:	f000 fa96 	bl	800beb8 <FATFS_LinkDriver>
 800b98c:	4603      	mov	r3, r0
 800b98e:	461a      	mov	r2, r3
 800b990:	4b03      	ldr	r3, [pc, #12]	; (800b9a0 <MX_FATFS_Init+0x20>)
 800b992:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b994:	bf00      	nop
 800b996:	bd80      	pop	{r7, pc}
 800b998:	2000c25c 	.word	0x2000c25c
 800b99c:	08029e58 	.word	0x08029e58
 800b9a0:	2000c260 	.word	0x2000c260

0800b9a4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b9ae:	f000 f87b 	bl	800baa8 <BSP_SD_IsDetected>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d001      	beq.n	800b9bc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	e012      	b.n	800b9e2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b9bc:	480b      	ldr	r0, [pc, #44]	; (800b9ec <BSP_SD_Init+0x48>)
 800b9be:	f7fc f9d1 	bl	8007d64 <HAL_SD_Init>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b9c6:	79fb      	ldrb	r3, [r7, #7]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d109      	bne.n	800b9e0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b9cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b9d0:	4806      	ldr	r0, [pc, #24]	; (800b9ec <BSP_SD_Init+0x48>)
 800b9d2:	f7fc fe13 	bl	80085fc <HAL_SD_ConfigWideBusOperation>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b9e0:	79fb      	ldrb	r3, [r7, #7]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	2000b6d8 	.word	0x2000b6d8

0800b9f0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b086      	sub	sp, #24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	68ba      	ldr	r2, [r7, #8]
 800ba04:	68f9      	ldr	r1, [r7, #12]
 800ba06:	4806      	ldr	r0, [pc, #24]	; (800ba20 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ba08:	f7fc fa44 	bl	8007e94 <HAL_SD_ReadBlocks_DMA>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ba16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3718      	adds	r7, #24
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	2000b6d8 	.word	0x2000b6d8

0800ba24 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	68ba      	ldr	r2, [r7, #8]
 800ba38:	68f9      	ldr	r1, [r7, #12]
 800ba3a:	4806      	ldr	r0, [pc, #24]	; (800ba54 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ba3c:	f7fc fb16 	bl	800806c <HAL_SD_WriteBlocks_DMA>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d001      	beq.n	800ba4a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ba4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3718      	adds	r7, #24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	2000b6d8 	.word	0x2000b6d8

0800ba58 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ba5c:	4805      	ldr	r0, [pc, #20]	; (800ba74 <BSP_SD_GetCardState+0x1c>)
 800ba5e:	f7fc fe49 	bl	80086f4 <HAL_SD_GetCardState>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b04      	cmp	r3, #4
 800ba66:	bf14      	ite	ne
 800ba68:	2301      	movne	r3, #1
 800ba6a:	2300      	moveq	r3, #0
 800ba6c:	b2db      	uxtb	r3, r3
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	2000b6d8 	.word	0x2000b6d8

0800ba78 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ba80:	6879      	ldr	r1, [r7, #4]
 800ba82:	4803      	ldr	r0, [pc, #12]	; (800ba90 <BSP_SD_GetCardInfo+0x18>)
 800ba84:	f7fc fd8e 	bl	80085a4 <HAL_SD_GetCardInfo>
}
 800ba88:	bf00      	nop
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	2000b6d8 	.word	0x2000b6d8

0800ba94 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ba9c:	f000 f9b2 	bl	800be04 <BSP_SD_ReadCpltCallback>
}
 800baa0:	bf00      	nop
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800baae:	2301      	movs	r3, #1
 800bab0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bab2:	f000 f80b 	bl	800bacc <BSP_PlatformIsDetected>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d101      	bne.n	800bac0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800babc:	2300      	movs	r3, #0
 800babe:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bac0:	79fb      	ldrb	r3, [r7, #7]
 800bac2:	b2db      	uxtb	r3, r3
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bad2:	2301      	movs	r3, #1
 800bad4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bad6:	2110      	movs	r1, #16
 800bad8:	4806      	ldr	r0, [pc, #24]	; (800baf4 <BSP_PlatformIsDetected+0x28>)
 800bada:	f7f8 ff73 	bl	80049c4 <HAL_GPIO_ReadPin>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d001      	beq.n	800bae8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800bae4:	2300      	movs	r3, #0
 800bae6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bae8:	79fb      	ldrb	r3, [r7, #7]
}
 800baea:	4618      	mov	r0, r3
 800baec:	3708      	adds	r7, #8
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	40020c00 	.word	0x40020c00

0800baf8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800bb00:	f000 fa26 	bl	800bf50 <osKernelSysTick>
 800bb04:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800bb06:	e006      	b.n	800bb16 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bb08:	f7ff ffa6 	bl	800ba58 <BSP_SD_GetCardState>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d101      	bne.n	800bb16 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	e009      	b.n	800bb2a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800bb16:	f000 fa1b 	bl	800bf50 <osKernelSysTick>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	1ad3      	subs	r3, r2, r3
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d8f0      	bhi.n	800bb08 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bb26:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
	...

0800bb34 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bb3e:	4b0b      	ldr	r3, [pc, #44]	; (800bb6c <SD_CheckStatus+0x38>)
 800bb40:	2201      	movs	r2, #1
 800bb42:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bb44:	f7ff ff88 	bl	800ba58 <BSP_SD_GetCardState>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d107      	bne.n	800bb5e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bb4e:	4b07      	ldr	r3, [pc, #28]	; (800bb6c <SD_CheckStatus+0x38>)
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	f023 0301 	bic.w	r3, r3, #1
 800bb58:	b2da      	uxtb	r2, r3
 800bb5a:	4b04      	ldr	r3, [pc, #16]	; (800bb6c <SD_CheckStatus+0x38>)
 800bb5c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bb5e:	4b03      	ldr	r3, [pc, #12]	; (800bb6c <SD_CheckStatus+0x38>)
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	b2db      	uxtb	r3, r3
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	20000035 	.word	0x20000035

0800bb70 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bb70:	b590      	push	{r4, r7, lr}
 800bb72:	b087      	sub	sp, #28
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	4603      	mov	r3, r0
 800bb78:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bb7a:	4b20      	ldr	r3, [pc, #128]	; (800bbfc <SD_initialize+0x8c>)
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800bb80:	f000 f9da 	bl	800bf38 <osKernelRunning>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d030      	beq.n	800bbec <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800bb8a:	f7ff ff0b 	bl	800b9a4 <BSP_SD_Init>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d107      	bne.n	800bba4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800bb94:	79fb      	ldrb	r3, [r7, #7]
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7ff ffcc 	bl	800bb34 <SD_CheckStatus>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	461a      	mov	r2, r3
 800bba0:	4b16      	ldr	r3, [pc, #88]	; (800bbfc <SD_initialize+0x8c>)
 800bba2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800bba4:	4b15      	ldr	r3, [pc, #84]	; (800bbfc <SD_initialize+0x8c>)
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d01e      	beq.n	800bbec <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800bbae:	4b14      	ldr	r3, [pc, #80]	; (800bc00 <SD_initialize+0x90>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10e      	bne.n	800bbd4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800bbb6:	4b13      	ldr	r3, [pc, #76]	; (800bc04 <SD_initialize+0x94>)
 800bbb8:	f107 0408 	add.w	r4, r7, #8
 800bbbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bbbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800bbc2:	f107 0308 	add.w	r3, r7, #8
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f000 faf5 	bl	800c1b8 <osMessageCreate>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	4b0b      	ldr	r3, [pc, #44]	; (800bc00 <SD_initialize+0x90>)
 800bbd2:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800bbd4:	4b0a      	ldr	r3, [pc, #40]	; (800bc00 <SD_initialize+0x90>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d107      	bne.n	800bbec <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800bbdc:	4b07      	ldr	r3, [pc, #28]	; (800bbfc <SD_initialize+0x8c>)
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	f043 0301 	orr.w	r3, r3, #1
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	4b04      	ldr	r3, [pc, #16]	; (800bbfc <SD_initialize+0x8c>)
 800bbea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800bbec:	4b03      	ldr	r3, [pc, #12]	; (800bbfc <SD_initialize+0x8c>)
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	b2db      	uxtb	r3, r3
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	371c      	adds	r7, #28
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd90      	pop	{r4, r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	20000035 	.word	0x20000035
 800bc00:	20000394 	.word	0x20000394
 800bc04:	080294d0 	.word	0x080294d0

0800bc08 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	4603      	mov	r3, r0
 800bc10:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bc12:	79fb      	ldrb	r3, [r7, #7]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7ff ff8d 	bl	800bb34 <SD_CheckStatus>
 800bc1a:	4603      	mov	r3, r0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b08a      	sub	sp, #40	; 0x28
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60b9      	str	r1, [r7, #8]
 800bc2c:	607a      	str	r2, [r7, #4]
 800bc2e:	603b      	str	r3, [r7, #0]
 800bc30:	4603      	mov	r3, r0
 800bc32:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bc3a:	f247 5030 	movw	r0, #30000	; 0x7530
 800bc3e:	f7ff ff5b 	bl	800baf8 <SD_CheckStatusWithTimeout>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	da02      	bge.n	800bc4e <SD_read+0x2a>
  {
    return res;
 800bc48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc4c:	e032      	b.n	800bcb4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	6879      	ldr	r1, [r7, #4]
 800bc52:	68b8      	ldr	r0, [r7, #8]
 800bc54:	f7ff fecc 	bl	800b9f0 <BSP_SD_ReadBlocks_DMA>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800bc5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d124      	bne.n	800bcb0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bc66:	4b15      	ldr	r3, [pc, #84]	; (800bcbc <SD_read+0x98>)
 800bc68:	6819      	ldr	r1, [r3, #0]
 800bc6a:	f107 0314 	add.w	r3, r7, #20
 800bc6e:	f247 5230 	movw	r2, #30000	; 0x7530
 800bc72:	4618      	mov	r0, r3
 800bc74:	f000 fb0a 	bl	800c28c <osMessageGet>

    if (event.status == osEventMessage)
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	2b10      	cmp	r3, #16
 800bc7c:	d118      	bne.n	800bcb0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d115      	bne.n	800bcb0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800bc84:	f000 f964 	bl	800bf50 <osKernelSysTick>
 800bc88:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bc8a:	e008      	b.n	800bc9e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bc8c:	f7ff fee4 	bl	800ba58 <BSP_SD_GetCardState>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d103      	bne.n	800bc9e <SD_read+0x7a>
              {
                res = RES_OK;
 800bc96:	2300      	movs	r3, #0
 800bc98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bc9c:	e008      	b.n	800bcb0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bc9e:	f000 f957 	bl	800bf50 <osKernelSysTick>
 800bca2:	4602      	mov	r2, r0
 800bca4:	6a3b      	ldr	r3, [r7, #32]
 800bca6:	1ad3      	subs	r3, r2, r3
 800bca8:	f247 522f 	movw	r2, #29999	; 0x752f
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d9ed      	bls.n	800bc8c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bcb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3728      	adds	r7, #40	; 0x28
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	20000394 	.word	0x20000394

0800bcc0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b08a      	sub	sp, #40	; 0x28
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60b9      	str	r1, [r7, #8]
 800bcc8:	607a      	str	r2, [r7, #4]
 800bcca:	603b      	str	r3, [r7, #0]
 800bccc:	4603      	mov	r3, r0
 800bcce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bcd6:	f247 5030 	movw	r0, #30000	; 0x7530
 800bcda:	f7ff ff0d 	bl	800baf8 <SD_CheckStatusWithTimeout>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	da02      	bge.n	800bcea <SD_write+0x2a>
  {
    return res;
 800bce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bce8:	e02e      	b.n	800bd48 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bcea:	683a      	ldr	r2, [r7, #0]
 800bcec:	6879      	ldr	r1, [r7, #4]
 800bcee:	68b8      	ldr	r0, [r7, #8]
 800bcf0:	f7ff fe98 	bl	800ba24 <BSP_SD_WriteBlocks_DMA>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d124      	bne.n	800bd44 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bcfa:	4b15      	ldr	r3, [pc, #84]	; (800bd50 <SD_write+0x90>)
 800bcfc:	6819      	ldr	r1, [r3, #0]
 800bcfe:	f107 0314 	add.w	r3, r7, #20
 800bd02:	f247 5230 	movw	r2, #30000	; 0x7530
 800bd06:	4618      	mov	r0, r3
 800bd08:	f000 fac0 	bl	800c28c <osMessageGet>

    if (event.status == osEventMessage)
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	2b10      	cmp	r3, #16
 800bd10:	d118      	bne.n	800bd44 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d115      	bne.n	800bd44 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800bd18:	f000 f91a 	bl	800bf50 <osKernelSysTick>
 800bd1c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800bd1e:	e008      	b.n	800bd32 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bd20:	f7ff fe9a 	bl	800ba58 <BSP_SD_GetCardState>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d103      	bne.n	800bd32 <SD_write+0x72>
          {
            res = RES_OK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800bd30:	e008      	b.n	800bd44 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800bd32:	f000 f90d 	bl	800bf50 <osKernelSysTick>
 800bd36:	4602      	mov	r2, r0
 800bd38:	6a3b      	ldr	r3, [r7, #32]
 800bd3a:	1ad3      	subs	r3, r2, r3
 800bd3c:	f247 522f 	movw	r2, #29999	; 0x752f
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d9ed      	bls.n	800bd20 <SD_write+0x60>
    }

  }
#endif

  return res;
 800bd44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3728      	adds	r7, #40	; 0x28
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	20000394 	.word	0x20000394

0800bd54 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b08c      	sub	sp, #48	; 0x30
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	603a      	str	r2, [r7, #0]
 800bd5e:	71fb      	strb	r3, [r7, #7]
 800bd60:	460b      	mov	r3, r1
 800bd62:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bd6a:	4b25      	ldr	r3, [pc, #148]	; (800be00 <SD_ioctl+0xac>)
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	f003 0301 	and.w	r3, r3, #1
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d001      	beq.n	800bd7c <SD_ioctl+0x28>
 800bd78:	2303      	movs	r3, #3
 800bd7a:	e03c      	b.n	800bdf6 <SD_ioctl+0xa2>

  switch (cmd)
 800bd7c:	79bb      	ldrb	r3, [r7, #6]
 800bd7e:	2b03      	cmp	r3, #3
 800bd80:	d834      	bhi.n	800bdec <SD_ioctl+0x98>
 800bd82:	a201      	add	r2, pc, #4	; (adr r2, 800bd88 <SD_ioctl+0x34>)
 800bd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd88:	0800bd99 	.word	0x0800bd99
 800bd8c:	0800bda1 	.word	0x0800bda1
 800bd90:	0800bdb9 	.word	0x0800bdb9
 800bd94:	0800bdd3 	.word	0x0800bdd3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bd9e:	e028      	b.n	800bdf2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bda0:	f107 030c 	add.w	r3, r7, #12
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7ff fe67 	bl	800ba78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bdaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bdb6:	e01c      	b.n	800bdf2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bdb8:	f107 030c 	add.w	r3, r7, #12
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7ff fe5b 	bl	800ba78 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc4:	b29a      	uxth	r2, r3
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bdd0:	e00f      	b.n	800bdf2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bdd2:	f107 030c 	add.w	r3, r7, #12
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7ff fe4e 	bl	800ba78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdde:	0a5a      	lsrs	r2, r3, #9
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bdea:	e002      	b.n	800bdf2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bdec:	2304      	movs	r3, #4
 800bdee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bdf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3730      	adds	r7, #48	; 0x30
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	20000035 	.word	0x20000035

0800be04 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800be08:	4b04      	ldr	r3, [pc, #16]	; (800be1c <BSP_SD_ReadCpltCallback+0x18>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2200      	movs	r2, #0
 800be0e:	2101      	movs	r1, #1
 800be10:	4618      	mov	r0, r3
 800be12:	f000 f9fb 	bl	800c20c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800be16:	bf00      	nop
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	20000394 	.word	0x20000394

0800be20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800be20:	b480      	push	{r7}
 800be22:	b087      	sub	sp, #28
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	4613      	mov	r3, r2
 800be2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800be2e:	2301      	movs	r3, #1
 800be30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800be32:	2300      	movs	r3, #0
 800be34:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800be36:	4b1f      	ldr	r3, [pc, #124]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be38:	7a5b      	ldrb	r3, [r3, #9]
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d131      	bne.n	800bea4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800be40:	4b1c      	ldr	r3, [pc, #112]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be42:	7a5b      	ldrb	r3, [r3, #9]
 800be44:	b2db      	uxtb	r3, r3
 800be46:	461a      	mov	r2, r3
 800be48:	4b1a      	ldr	r3, [pc, #104]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be4a:	2100      	movs	r1, #0
 800be4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800be4e:	4b19      	ldr	r3, [pc, #100]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be50:	7a5b      	ldrb	r3, [r3, #9]
 800be52:	b2db      	uxtb	r3, r3
 800be54:	4a17      	ldr	r2, [pc, #92]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4413      	add	r3, r2
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800be5e:	4b15      	ldr	r3, [pc, #84]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be60:	7a5b      	ldrb	r3, [r3, #9]
 800be62:	b2db      	uxtb	r3, r3
 800be64:	461a      	mov	r2, r3
 800be66:	4b13      	ldr	r3, [pc, #76]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be68:	4413      	add	r3, r2
 800be6a:	79fa      	ldrb	r2, [r7, #7]
 800be6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800be6e:	4b11      	ldr	r3, [pc, #68]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be70:	7a5b      	ldrb	r3, [r3, #9]
 800be72:	b2db      	uxtb	r3, r3
 800be74:	1c5a      	adds	r2, r3, #1
 800be76:	b2d1      	uxtb	r1, r2
 800be78:	4a0e      	ldr	r2, [pc, #56]	; (800beb4 <FATFS_LinkDriverEx+0x94>)
 800be7a:	7251      	strb	r1, [r2, #9]
 800be7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800be7e:	7dbb      	ldrb	r3, [r7, #22]
 800be80:	3330      	adds	r3, #48	; 0x30
 800be82:	b2da      	uxtb	r2, r3
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	3301      	adds	r3, #1
 800be8c:	223a      	movs	r2, #58	; 0x3a
 800be8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	3302      	adds	r3, #2
 800be94:	222f      	movs	r2, #47	; 0x2f
 800be96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	3303      	adds	r3, #3
 800be9c:	2200      	movs	r2, #0
 800be9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bea4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	371c      	adds	r7, #28
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	20000398 	.word	0x20000398

0800beb8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bec2:	2200      	movs	r2, #0
 800bec4:	6839      	ldr	r1, [r7, #0]
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7ff ffaa 	bl	800be20 <FATFS_LinkDriverEx>
 800becc:	4603      	mov	r3, r0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3708      	adds	r7, #8
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bed6:	b480      	push	{r7}
 800bed8:	b085      	sub	sp, #20
 800beda:	af00      	add	r7, sp, #0
 800bedc:	4603      	mov	r3, r0
 800bede:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bee0:	2300      	movs	r3, #0
 800bee2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bee4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bee8:	2b84      	cmp	r3, #132	; 0x84
 800beea:	d005      	beq.n	800bef8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800beec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	4413      	add	r3, r2
 800bef4:	3303      	adds	r3, #3
 800bef6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bef8:	68fb      	ldr	r3, [r7, #12]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr

0800bf06 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bf06:	b480      	push	{r7}
 800bf08:	b083      	sub	sp, #12
 800bf0a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf0c:	f3ef 8305 	mrs	r3, IPSR
 800bf10:	607b      	str	r3, [r7, #4]
  return(result);
 800bf12:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	bf14      	ite	ne
 800bf18:	2301      	movne	r3, #1
 800bf1a:	2300      	moveq	r3, #0
 800bf1c:	b2db      	uxtb	r3, r3
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	370c      	adds	r7, #12
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr

0800bf2a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bf2e:	f001 fc31 	bl	800d794 <vTaskStartScheduler>
  
  return osOK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800bf3c:	f002 f87c 	bl	800e038 <xTaskGetSchedulerState>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d101      	bne.n	800bf4a <osKernelRunning+0x12>
    return 0;
 800bf46:	2300      	movs	r3, #0
 800bf48:	e000      	b.n	800bf4c <osKernelRunning+0x14>
  else
    return 1;
 800bf4a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bf54:	f7ff ffd7 	bl	800bf06 <inHandlerMode>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bf5e:	f001 fd37 	bl	800d9d0 <xTaskGetTickCountFromISR>
 800bf62:	4603      	mov	r3, r0
 800bf64:	e002      	b.n	800bf6c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bf66:	f001 fd23 	bl	800d9b0 <xTaskGetTickCount>
 800bf6a:	4603      	mov	r3, r0
  }
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bf70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf72:	b089      	sub	sp, #36	; 0x24
 800bf74:	af04      	add	r7, sp, #16
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	695b      	ldr	r3, [r3, #20]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d020      	beq.n	800bfc4 <osThreadCreate+0x54>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	699b      	ldr	r3, [r3, #24]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d01c      	beq.n	800bfc4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	685c      	ldr	r4, [r3, #4]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681d      	ldr	r5, [r3, #0]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	691e      	ldr	r6, [r3, #16]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7ff ff9a 	bl	800bed6 <makeFreeRtosPriority>
 800bfa2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	695b      	ldr	r3, [r3, #20]
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bfac:	9202      	str	r2, [sp, #8]
 800bfae:	9301      	str	r3, [sp, #4]
 800bfb0:	9100      	str	r1, [sp, #0]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	4632      	mov	r2, r6
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	4620      	mov	r0, r4
 800bfba:	f001 fa12 	bl	800d3e2 <xTaskCreateStatic>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	60fb      	str	r3, [r7, #12]
 800bfc2:	e01c      	b.n	800bffe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	685c      	ldr	r4, [r3, #4]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bfd0:	b29e      	uxth	r6, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7ff ff7c 	bl	800bed6 <makeFreeRtosPriority>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	f107 030c 	add.w	r3, r7, #12
 800bfe4:	9301      	str	r3, [sp, #4]
 800bfe6:	9200      	str	r2, [sp, #0]
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	4632      	mov	r2, r6
 800bfec:	4629      	mov	r1, r5
 800bfee:	4620      	mov	r0, r4
 800bff0:	f001 fa57 	bl	800d4a2 <xTaskCreate>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d001      	beq.n	800bffe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bffa:	2300      	movs	r3, #0
 800bffc:	e000      	b.n	800c000 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bffe:	68fb      	ldr	r3, [r7, #12]
}
 800c000:	4618      	mov	r0, r3
 800c002:	3714      	adds	r7, #20
 800c004:	46bd      	mov	sp, r7
 800c006:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c008 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d001      	beq.n	800c01e <osDelay+0x16>
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	e000      	b.n	800c020 <osDelay+0x18>
 800c01e:	2301      	movs	r3, #1
 800c020:	4618      	mov	r0, r3
 800c022:	f001 fb81 	bl	800d728 <vTaskDelay>
  
  return osOK;
 800c026:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3710      	adds	r7, #16
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c030:	b580      	push	{r7, lr}
 800c032:	b086      	sub	sp, #24
 800c034:	af02      	add	r7, sp, #8
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d017      	beq.n	800c072 <osSemaphoreCreate+0x42>
    if (count == 1) {
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b01      	cmp	r3, #1
 800c046:	d10b      	bne.n	800c060 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	685a      	ldr	r2, [r3, #4]
 800c04c:	2303      	movs	r3, #3
 800c04e:	9300      	str	r3, [sp, #0]
 800c050:	4613      	mov	r3, r2
 800c052:	2200      	movs	r2, #0
 800c054:	2100      	movs	r1, #0
 800c056:	2001      	movs	r0, #1
 800c058:	f000 faaa 	bl	800c5b0 <xQueueGenericCreateStatic>
 800c05c:	4603      	mov	r3, r0
 800c05e:	e023      	b.n	800c0a8 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800c060:	6838      	ldr	r0, [r7, #0]
 800c062:	6839      	ldr	r1, [r7, #0]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	461a      	mov	r2, r3
 800c06a:	f000 fb7e 	bl	800c76a <xQueueCreateCountingSemaphoreStatic>
 800c06e:	4603      	mov	r3, r0
 800c070:	e01a      	b.n	800c0a8 <osSemaphoreCreate+0x78>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d110      	bne.n	800c09a <osSemaphoreCreate+0x6a>
      vSemaphoreCreateBinary(sema);
 800c078:	2203      	movs	r2, #3
 800c07a:	2100      	movs	r1, #0
 800c07c:	2001      	movs	r0, #1
 800c07e:	f000 fb14 	bl	800c6aa <xQueueGenericCreate>
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d005      	beq.n	800c096 <osSemaphoreCreate+0x66>
 800c08a:	2300      	movs	r3, #0
 800c08c:	2200      	movs	r2, #0
 800c08e:	2100      	movs	r1, #0
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f000 fbd9 	bl	800c848 <xQueueGenericSend>
      return sema;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	e006      	b.n	800c0a8 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	683a      	ldr	r2, [r7, #0]
 800c09e:	4611      	mov	r1, r2
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f000 fb9b 	bl	800c7dc <xQueueCreateCountingSemaphore>
 800c0a6:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d101      	bne.n	800c0c8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c0c4:	2380      	movs	r3, #128	; 0x80
 800c0c6:	e03a      	b.n	800c13e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d2:	d103      	bne.n	800c0dc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d8:	60fb      	str	r3, [r7, #12]
 800c0da:	e009      	b.n	800c0f0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d006      	beq.n	800c0f0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d101      	bne.n	800c0f0 <osSemaphoreWait+0x40>
      ticks = 1;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c0f0:	f7ff ff09 	bl	800bf06 <inHandlerMode>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d017      	beq.n	800c12a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c0fa:	f107 0308 	add.w	r3, r7, #8
 800c0fe:	461a      	mov	r2, r3
 800c100:	2100      	movs	r1, #0
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 ffc2 	bl	800d08c <xQueueReceiveFromISR>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d001      	beq.n	800c112 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c10e:	23ff      	movs	r3, #255	; 0xff
 800c110:	e015      	b.n	800c13e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d011      	beq.n	800c13c <osSemaphoreWait+0x8c>
 800c118:	4b0b      	ldr	r3, [pc, #44]	; (800c148 <osSemaphoreWait+0x98>)
 800c11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c11e:	601a      	str	r2, [r3, #0]
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	e008      	b.n	800c13c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c12a:	68f9      	ldr	r1, [r7, #12]
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 fe9d 	bl	800ce6c <xQueueSemaphoreTake>
 800c132:	4603      	mov	r3, r0
 800c134:	2b01      	cmp	r3, #1
 800c136:	d001      	beq.n	800c13c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c138:	23ff      	movs	r3, #255	; 0xff
 800c13a:	e000      	b.n	800c13e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	e000ed04 	.word	0xe000ed04

0800c14c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c154:	2300      	movs	r3, #0
 800c156:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c158:	2300      	movs	r3, #0
 800c15a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c15c:	f7ff fed3 	bl	800bf06 <inHandlerMode>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d016      	beq.n	800c194 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c166:	f107 0308 	add.w	r3, r7, #8
 800c16a:	4619      	mov	r1, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 fd09 	bl	800cb84 <xQueueGiveFromISR>
 800c172:	4603      	mov	r3, r0
 800c174:	2b01      	cmp	r3, #1
 800c176:	d001      	beq.n	800c17c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c178:	23ff      	movs	r3, #255	; 0xff
 800c17a:	e017      	b.n	800c1ac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d013      	beq.n	800c1aa <osSemaphoreRelease+0x5e>
 800c182:	4b0c      	ldr	r3, [pc, #48]	; (800c1b4 <osSemaphoreRelease+0x68>)
 800c184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c188:	601a      	str	r2, [r3, #0]
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	e00a      	b.n	800c1aa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c194:	2300      	movs	r3, #0
 800c196:	2200      	movs	r2, #0
 800c198:	2100      	movs	r1, #0
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 fb54 	bl	800c848 <xQueueGenericSend>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d001      	beq.n	800c1aa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c1a6:	23ff      	movs	r3, #255	; 0xff
 800c1a8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3710      	adds	r7, #16
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	e000ed04 	.word	0xe000ed04

0800c1b8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c1b8:	b590      	push	{r4, r7, lr}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af02      	add	r7, sp, #8
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d012      	beq.n	800c1f0 <osMessageCreate+0x38>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00e      	beq.n	800c1f0 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6818      	ldr	r0, [r3, #0]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6859      	ldr	r1, [r3, #4]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	689a      	ldr	r2, [r3, #8]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	68dc      	ldr	r4, [r3, #12]
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	4623      	mov	r3, r4
 800c1e8:	f000 f9e2 	bl	800c5b0 <xQueueGenericCreateStatic>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	e008      	b.n	800c202 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6818      	ldr	r0, [r3, #0]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	f000 fa55 	bl	800c6aa <xQueueGenericCreate>
 800c200:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c202:	4618      	mov	r0, r3
 800c204:	370c      	adds	r7, #12
 800c206:	46bd      	mov	sp, r7
 800c208:	bd90      	pop	{r4, r7, pc}
	...

0800c20c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b086      	sub	sp, #24
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c218:	2300      	movs	r3, #0
 800c21a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d101      	bne.n	800c22a <osMessagePut+0x1e>
    ticks = 1;
 800c226:	2301      	movs	r3, #1
 800c228:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c22a:	f7ff fe6c 	bl	800bf06 <inHandlerMode>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b00      	cmp	r3, #0
 800c232:	d018      	beq.n	800c266 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c234:	f107 0210 	add.w	r2, r7, #16
 800c238:	f107 0108 	add.w	r1, r7, #8
 800c23c:	2300      	movs	r3, #0
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f000 fc04 	bl	800ca4c <xQueueGenericSendFromISR>
 800c244:	4603      	mov	r3, r0
 800c246:	2b01      	cmp	r3, #1
 800c248:	d001      	beq.n	800c24e <osMessagePut+0x42>
      return osErrorOS;
 800c24a:	23ff      	movs	r3, #255	; 0xff
 800c24c:	e018      	b.n	800c280 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d014      	beq.n	800c27e <osMessagePut+0x72>
 800c254:	4b0c      	ldr	r3, [pc, #48]	; (800c288 <osMessagePut+0x7c>)
 800c256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c25a:	601a      	str	r2, [r3, #0]
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	e00b      	b.n	800c27e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c266:	f107 0108 	add.w	r1, r7, #8
 800c26a:	2300      	movs	r3, #0
 800c26c:	697a      	ldr	r2, [r7, #20]
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f000 faea 	bl	800c848 <xQueueGenericSend>
 800c274:	4603      	mov	r3, r0
 800c276:	2b01      	cmp	r3, #1
 800c278:	d001      	beq.n	800c27e <osMessagePut+0x72>
      return osErrorOS;
 800c27a:	23ff      	movs	r3, #255	; 0xff
 800c27c:	e000      	b.n	800c280 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3718      	adds	r7, #24
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	e000ed04 	.word	0xe000ed04

0800c28c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c28c:	b590      	push	{r4, r7, lr}
 800c28e:	b08b      	sub	sp, #44	; 0x2c
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c29c:	2300      	movs	r3, #0
 800c29e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10a      	bne.n	800c2bc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c2a6:	2380      	movs	r3, #128	; 0x80
 800c2a8:	617b      	str	r3, [r7, #20]
    return event;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	461c      	mov	r4, r3
 800c2ae:	f107 0314 	add.w	r3, r7, #20
 800c2b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c2b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c2ba:	e054      	b.n	800c366 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ca:	d103      	bne.n	800c2d4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c2cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c2d0:	627b      	str	r3, [r7, #36]	; 0x24
 800c2d2:	e009      	b.n	800c2e8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d006      	beq.n	800c2e8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d101      	bne.n	800c2e8 <osMessageGet+0x5c>
      ticks = 1;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c2e8:	f7ff fe0d 	bl	800bf06 <inHandlerMode>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d01c      	beq.n	800c32c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c2f2:	f107 0220 	add.w	r2, r7, #32
 800c2f6:	f107 0314 	add.w	r3, r7, #20
 800c2fa:	3304      	adds	r3, #4
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	68b8      	ldr	r0, [r7, #8]
 800c300:	f000 fec4 	bl	800d08c <xQueueReceiveFromISR>
 800c304:	4603      	mov	r3, r0
 800c306:	2b01      	cmp	r3, #1
 800c308:	d102      	bne.n	800c310 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c30a:	2310      	movs	r3, #16
 800c30c:	617b      	str	r3, [r7, #20]
 800c30e:	e001      	b.n	800c314 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c310:	2300      	movs	r3, #0
 800c312:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c314:	6a3b      	ldr	r3, [r7, #32]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d01d      	beq.n	800c356 <osMessageGet+0xca>
 800c31a:	4b15      	ldr	r3, [pc, #84]	; (800c370 <osMessageGet+0xe4>)
 800c31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c320:	601a      	str	r2, [r3, #0]
 800c322:	f3bf 8f4f 	dsb	sy
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	e014      	b.n	800c356 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c32c:	f107 0314 	add.w	r3, r7, #20
 800c330:	3304      	adds	r3, #4
 800c332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c334:	4619      	mov	r1, r3
 800c336:	68b8      	ldr	r0, [r7, #8]
 800c338:	f000 fcb6 	bl	800cca8 <xQueueReceive>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d102      	bne.n	800c348 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c342:	2310      	movs	r3, #16
 800c344:	617b      	str	r3, [r7, #20]
 800c346:	e006      	b.n	800c356 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d101      	bne.n	800c352 <osMessageGet+0xc6>
 800c34e:	2300      	movs	r3, #0
 800c350:	e000      	b.n	800c354 <osMessageGet+0xc8>
 800c352:	2340      	movs	r3, #64	; 0x40
 800c354:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	461c      	mov	r4, r3
 800c35a:	f107 0314 	add.w	r3, r7, #20
 800c35e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c362:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c366:	68f8      	ldr	r0, [r7, #12]
 800c368:	372c      	adds	r7, #44	; 0x2c
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd90      	pop	{r4, r7, pc}
 800c36e:	bf00      	nop
 800c370:	e000ed04 	.word	0xe000ed04

0800c374 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f103 0208 	add.w	r2, r3, #8
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f04f 32ff 	mov.w	r2, #4294967295
 800c38c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f103 0208 	add.w	r2, r3, #8
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f103 0208 	add.w	r2, r3, #8
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c3c2:	bf00      	nop
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b085      	sub	sp, #20
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	689a      	ldr	r2, [r3, #8]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	683a      	ldr	r2, [r7, #0]
 800c3f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	683a      	ldr	r2, [r7, #0]
 800c3f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	1c5a      	adds	r2, r3, #1
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	601a      	str	r2, [r3, #0]
}
 800c40a:	bf00      	nop
 800c40c:	3714      	adds	r7, #20
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c416:	b480      	push	{r7}
 800c418:	b085      	sub	sp, #20
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
 800c41e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c42c:	d103      	bne.n	800c436 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	691b      	ldr	r3, [r3, #16]
 800c432:	60fb      	str	r3, [r7, #12]
 800c434:	e00c      	b.n	800c450 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	3308      	adds	r3, #8
 800c43a:	60fb      	str	r3, [r7, #12]
 800c43c:	e002      	b.n	800c444 <vListInsert+0x2e>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	60fb      	str	r3, [r7, #12]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	68ba      	ldr	r2, [r7, #8]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d2f6      	bcs.n	800c43e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	685a      	ldr	r2, [r3, #4]
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	683a      	ldr	r2, [r7, #0]
 800c45e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	683a      	ldr	r2, [r7, #0]
 800c46a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	601a      	str	r2, [r3, #0]
}
 800c47c:	bf00      	nop
 800c47e:	3714      	adds	r7, #20
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	6892      	ldr	r2, [r2, #8]
 800c49e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	6852      	ldr	r2, [r2, #4]
 800c4a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d103      	bne.n	800c4bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	689a      	ldr	r2, [r3, #8]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	1e5a      	subs	r2, r3, #1
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3714      	adds	r7, #20
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10b      	bne.n	800c508 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f4:	b672      	cpsid	i
 800c4f6:	f383 8811 	msr	BASEPRI, r3
 800c4fa:	f3bf 8f6f 	isb	sy
 800c4fe:	f3bf 8f4f 	dsb	sy
 800c502:	b662      	cpsie	i
 800c504:	60bb      	str	r3, [r7, #8]
 800c506:	e7fe      	b.n	800c506 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800c508:	f002 f8de 	bl	800e6c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c514:	68f9      	ldr	r1, [r7, #12]
 800c516:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c518:	fb01 f303 	mul.w	r3, r1, r3
 800c51c:	441a      	add	r2, r3
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2200      	movs	r2, #0
 800c526:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c538:	3b01      	subs	r3, #1
 800c53a:	68f9      	ldr	r1, [r7, #12]
 800c53c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c53e:	fb01 f303 	mul.w	r3, r1, r3
 800c542:	441a      	add	r2, r3
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	22ff      	movs	r2, #255	; 0xff
 800c54c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	22ff      	movs	r2, #255	; 0xff
 800c554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d114      	bne.n	800c588 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d01a      	beq.n	800c59c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	3310      	adds	r3, #16
 800c56a:	4618      	mov	r0, r3
 800c56c:	f001 fba4 	bl	800dcb8 <xTaskRemoveFromEventList>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d012      	beq.n	800c59c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c576:	4b0d      	ldr	r3, [pc, #52]	; (800c5ac <xQueueGenericReset+0xd0>)
 800c578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c57c:	601a      	str	r2, [r3, #0]
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	f3bf 8f6f 	isb	sy
 800c586:	e009      	b.n	800c59c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	3310      	adds	r3, #16
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7ff fef1 	bl	800c374 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	3324      	adds	r3, #36	; 0x24
 800c596:	4618      	mov	r0, r3
 800c598:	f7ff feec 	bl	800c374 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c59c:	f002 f8c6 	bl	800e72c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c5a0:	2301      	movs	r3, #1
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	e000ed04 	.word	0xe000ed04

0800c5b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b08e      	sub	sp, #56	; 0x38
 800c5b4:	af02      	add	r7, sp, #8
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	607a      	str	r2, [r7, #4]
 800c5bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d10b      	bne.n	800c5dc <xQueueGenericCreateStatic+0x2c>
 800c5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c8:	b672      	cpsid	i
 800c5ca:	f383 8811 	msr	BASEPRI, r3
 800c5ce:	f3bf 8f6f 	isb	sy
 800c5d2:	f3bf 8f4f 	dsb	sy
 800c5d6:	b662      	cpsie	i
 800c5d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5da:	e7fe      	b.n	800c5da <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d10b      	bne.n	800c5fa <xQueueGenericCreateStatic+0x4a>
 800c5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e6:	b672      	cpsid	i
 800c5e8:	f383 8811 	msr	BASEPRI, r3
 800c5ec:	f3bf 8f6f 	isb	sy
 800c5f0:	f3bf 8f4f 	dsb	sy
 800c5f4:	b662      	cpsie	i
 800c5f6:	627b      	str	r3, [r7, #36]	; 0x24
 800c5f8:	e7fe      	b.n	800c5f8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d002      	beq.n	800c606 <xQueueGenericCreateStatic+0x56>
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d001      	beq.n	800c60a <xQueueGenericCreateStatic+0x5a>
 800c606:	2301      	movs	r3, #1
 800c608:	e000      	b.n	800c60c <xQueueGenericCreateStatic+0x5c>
 800c60a:	2300      	movs	r3, #0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10b      	bne.n	800c628 <xQueueGenericCreateStatic+0x78>
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	b672      	cpsid	i
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	b662      	cpsie	i
 800c624:	623b      	str	r3, [r7, #32]
 800c626:	e7fe      	b.n	800c626 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d102      	bne.n	800c634 <xQueueGenericCreateStatic+0x84>
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d101      	bne.n	800c638 <xQueueGenericCreateStatic+0x88>
 800c634:	2301      	movs	r3, #1
 800c636:	e000      	b.n	800c63a <xQueueGenericCreateStatic+0x8a>
 800c638:	2300      	movs	r3, #0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d10b      	bne.n	800c656 <xQueueGenericCreateStatic+0xa6>
 800c63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c642:	b672      	cpsid	i
 800c644:	f383 8811 	msr	BASEPRI, r3
 800c648:	f3bf 8f6f 	isb	sy
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	b662      	cpsie	i
 800c652:	61fb      	str	r3, [r7, #28]
 800c654:	e7fe      	b.n	800c654 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c656:	2348      	movs	r3, #72	; 0x48
 800c658:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	2b48      	cmp	r3, #72	; 0x48
 800c65e:	d00b      	beq.n	800c678 <xQueueGenericCreateStatic+0xc8>
 800c660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c664:	b672      	cpsid	i
 800c666:	f383 8811 	msr	BASEPRI, r3
 800c66a:	f3bf 8f6f 	isb	sy
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	b662      	cpsie	i
 800c674:	61bb      	str	r3, [r7, #24]
 800c676:	e7fe      	b.n	800c676 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c678:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00d      	beq.n	800c6a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c686:	2201      	movs	r2, #1
 800c688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c68c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c692:	9300      	str	r3, [sp, #0]
 800c694:	4613      	mov	r3, r2
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	68b9      	ldr	r1, [r7, #8]
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	f000 f846 	bl	800c72c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3730      	adds	r7, #48	; 0x30
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b08a      	sub	sp, #40	; 0x28
 800c6ae:	af02      	add	r7, sp, #8
 800c6b0:	60f8      	str	r0, [r7, #12]
 800c6b2:	60b9      	str	r1, [r7, #8]
 800c6b4:	4613      	mov	r3, r2
 800c6b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10b      	bne.n	800c6d6 <xQueueGenericCreate+0x2c>
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	b672      	cpsid	i
 800c6c4:	f383 8811 	msr	BASEPRI, r3
 800c6c8:	f3bf 8f6f 	isb	sy
 800c6cc:	f3bf 8f4f 	dsb	sy
 800c6d0:	b662      	cpsie	i
 800c6d2:	613b      	str	r3, [r7, #16]
 800c6d4:	e7fe      	b.n	800c6d4 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d102      	bne.n	800c6e2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	61fb      	str	r3, [r7, #28]
 800c6e0:	e004      	b.n	800c6ec <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	68ba      	ldr	r2, [r7, #8]
 800c6e6:	fb02 f303 	mul.w	r3, r2, r3
 800c6ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	3348      	adds	r3, #72	; 0x48
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f002 f90b 	bl	800e90c <pvPortMalloc>
 800c6f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d011      	beq.n	800c722 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	3348      	adds	r3, #72	; 0x48
 800c706:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c710:	79fa      	ldrb	r2, [r7, #7]
 800c712:	69bb      	ldr	r3, [r7, #24]
 800c714:	9300      	str	r3, [sp, #0]
 800c716:	4613      	mov	r3, r2
 800c718:	697a      	ldr	r2, [r7, #20]
 800c71a:	68b9      	ldr	r1, [r7, #8]
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f000 f805 	bl	800c72c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c722:	69bb      	ldr	r3, [r7, #24]
	}
 800c724:	4618      	mov	r0, r3
 800c726:	3720      	adds	r7, #32
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
 800c738:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d103      	bne.n	800c748 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	69ba      	ldr	r2, [r7, #24]
 800c744:	601a      	str	r2, [r3, #0]
 800c746:	e002      	b.n	800c74e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	68ba      	ldr	r2, [r7, #8]
 800c758:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c75a:	2101      	movs	r1, #1
 800c75c:	69b8      	ldr	r0, [r7, #24]
 800c75e:	f7ff febd 	bl	800c4dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c762:	bf00      	nop
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b08a      	sub	sp, #40	; 0x28
 800c76e:	af02      	add	r7, sp, #8
 800c770:	60f8      	str	r0, [r7, #12]
 800c772:	60b9      	str	r1, [r7, #8]
 800c774:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d10b      	bne.n	800c794 <xQueueCreateCountingSemaphoreStatic+0x2a>
 800c77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c780:	b672      	cpsid	i
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	b662      	cpsie	i
 800c790:	61bb      	str	r3, [r7, #24]
 800c792:	e7fe      	b.n	800c792 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c794:	68ba      	ldr	r2, [r7, #8]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d90b      	bls.n	800c7b4 <xQueueCreateCountingSemaphoreStatic+0x4a>
 800c79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a0:	b672      	cpsid	i
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	b662      	cpsie	i
 800c7b0:	617b      	str	r3, [r7, #20]
 800c7b2:	e7fe      	b.n	800c7b2 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c7b4:	2302      	movs	r3, #2
 800c7b6:	9300      	str	r3, [sp, #0]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	2100      	movs	r1, #0
 800c7be:	68f8      	ldr	r0, [r7, #12]
 800c7c0:	f7ff fef6 	bl	800c5b0 <xQueueGenericCreateStatic>
 800c7c4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d002      	beq.n	800c7d2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	68ba      	ldr	r2, [r7, #8]
 800c7d0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c7d2:	69fb      	ldr	r3, [r7, #28]
	}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3720      	adds	r7, #32
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b086      	sub	sp, #24
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d10b      	bne.n	800c804 <xQueueCreateCountingSemaphore+0x28>
 800c7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f0:	b672      	cpsid	i
 800c7f2:	f383 8811 	msr	BASEPRI, r3
 800c7f6:	f3bf 8f6f 	isb	sy
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	b662      	cpsie	i
 800c800:	613b      	str	r3, [r7, #16]
 800c802:	e7fe      	b.n	800c802 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c804:	683a      	ldr	r2, [r7, #0]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d90b      	bls.n	800c824 <xQueueCreateCountingSemaphore+0x48>
 800c80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c810:	b672      	cpsid	i
 800c812:	f383 8811 	msr	BASEPRI, r3
 800c816:	f3bf 8f6f 	isb	sy
 800c81a:	f3bf 8f4f 	dsb	sy
 800c81e:	b662      	cpsie	i
 800c820:	60fb      	str	r3, [r7, #12]
 800c822:	e7fe      	b.n	800c822 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c824:	2202      	movs	r2, #2
 800c826:	2100      	movs	r1, #0
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7ff ff3e 	bl	800c6aa <xQueueGenericCreate>
 800c82e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d002      	beq.n	800c83c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	683a      	ldr	r2, [r7, #0]
 800c83a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c83c:	697b      	ldr	r3, [r7, #20]
	}
 800c83e:	4618      	mov	r0, r3
 800c840:	3718      	adds	r7, #24
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
	...

0800c848 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b08e      	sub	sp, #56	; 0x38
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	607a      	str	r2, [r7, #4]
 800c854:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c856:	2300      	movs	r3, #0
 800c858:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c860:	2b00      	cmp	r3, #0
 800c862:	d10b      	bne.n	800c87c <xQueueGenericSend+0x34>
 800c864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c868:	b672      	cpsid	i
 800c86a:	f383 8811 	msr	BASEPRI, r3
 800c86e:	f3bf 8f6f 	isb	sy
 800c872:	f3bf 8f4f 	dsb	sy
 800c876:	b662      	cpsie	i
 800c878:	62bb      	str	r3, [r7, #40]	; 0x28
 800c87a:	e7fe      	b.n	800c87a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d103      	bne.n	800c88a <xQueueGenericSend+0x42>
 800c882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c886:	2b00      	cmp	r3, #0
 800c888:	d101      	bne.n	800c88e <xQueueGenericSend+0x46>
 800c88a:	2301      	movs	r3, #1
 800c88c:	e000      	b.n	800c890 <xQueueGenericSend+0x48>
 800c88e:	2300      	movs	r3, #0
 800c890:	2b00      	cmp	r3, #0
 800c892:	d10b      	bne.n	800c8ac <xQueueGenericSend+0x64>
 800c894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c898:	b672      	cpsid	i
 800c89a:	f383 8811 	msr	BASEPRI, r3
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	b662      	cpsie	i
 800c8a8:	627b      	str	r3, [r7, #36]	; 0x24
 800c8aa:	e7fe      	b.n	800c8aa <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	d103      	bne.n	800c8ba <xQueueGenericSend+0x72>
 800c8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d101      	bne.n	800c8be <xQueueGenericSend+0x76>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e000      	b.n	800c8c0 <xQueueGenericSend+0x78>
 800c8be:	2300      	movs	r3, #0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10b      	bne.n	800c8dc <xQueueGenericSend+0x94>
 800c8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c8:	b672      	cpsid	i
 800c8ca:	f383 8811 	msr	BASEPRI, r3
 800c8ce:	f3bf 8f6f 	isb	sy
 800c8d2:	f3bf 8f4f 	dsb	sy
 800c8d6:	b662      	cpsie	i
 800c8d8:	623b      	str	r3, [r7, #32]
 800c8da:	e7fe      	b.n	800c8da <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8dc:	f001 fbac 	bl	800e038 <xTaskGetSchedulerState>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d102      	bne.n	800c8ec <xQueueGenericSend+0xa4>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d101      	bne.n	800c8f0 <xQueueGenericSend+0xa8>
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	e000      	b.n	800c8f2 <xQueueGenericSend+0xaa>
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d10b      	bne.n	800c90e <xQueueGenericSend+0xc6>
 800c8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fa:	b672      	cpsid	i
 800c8fc:	f383 8811 	msr	BASEPRI, r3
 800c900:	f3bf 8f6f 	isb	sy
 800c904:	f3bf 8f4f 	dsb	sy
 800c908:	b662      	cpsie	i
 800c90a:	61fb      	str	r3, [r7, #28]
 800c90c:	e7fe      	b.n	800c90c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c90e:	f001 fedb 	bl	800e6c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d302      	bcc.n	800c924 <xQueueGenericSend+0xdc>
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	2b02      	cmp	r3, #2
 800c922:	d129      	bne.n	800c978 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c924:	683a      	ldr	r2, [r7, #0]
 800c926:	68b9      	ldr	r1, [r7, #8]
 800c928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c92a:	f000 fc4a 	bl	800d1c2 <prvCopyDataToQueue>
 800c92e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c934:	2b00      	cmp	r3, #0
 800c936:	d010      	beq.n	800c95a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c93a:	3324      	adds	r3, #36	; 0x24
 800c93c:	4618      	mov	r0, r3
 800c93e:	f001 f9bb 	bl	800dcb8 <xTaskRemoveFromEventList>
 800c942:	4603      	mov	r3, r0
 800c944:	2b00      	cmp	r3, #0
 800c946:	d013      	beq.n	800c970 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c948:	4b3f      	ldr	r3, [pc, #252]	; (800ca48 <xQueueGenericSend+0x200>)
 800c94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c94e:	601a      	str	r2, [r3, #0]
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	f3bf 8f6f 	isb	sy
 800c958:	e00a      	b.n	800c970 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d007      	beq.n	800c970 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c960:	4b39      	ldr	r3, [pc, #228]	; (800ca48 <xQueueGenericSend+0x200>)
 800c962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c966:	601a      	str	r2, [r3, #0]
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c970:	f001 fedc 	bl	800e72c <vPortExitCritical>
				return pdPASS;
 800c974:	2301      	movs	r3, #1
 800c976:	e063      	b.n	800ca40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d103      	bne.n	800c986 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c97e:	f001 fed5 	bl	800e72c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c982:	2300      	movs	r3, #0
 800c984:	e05c      	b.n	800ca40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d106      	bne.n	800c99a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c98c:	f107 0314 	add.w	r3, r7, #20
 800c990:	4618      	mov	r0, r3
 800c992:	f001 f9f5 	bl	800dd80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c996:	2301      	movs	r3, #1
 800c998:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c99a:	f001 fec7 	bl	800e72c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c99e:	f000 ff5b 	bl	800d858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c9a2:	f001 fe91 	bl	800e6c8 <vPortEnterCritical>
 800c9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9ac:	b25b      	sxtb	r3, r3
 800c9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b2:	d103      	bne.n	800c9bc <xQueueGenericSend+0x174>
 800c9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9c2:	b25b      	sxtb	r3, r3
 800c9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c8:	d103      	bne.n	800c9d2 <xQueueGenericSend+0x18a>
 800c9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9d2:	f001 feab 	bl	800e72c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c9d6:	1d3a      	adds	r2, r7, #4
 800c9d8:	f107 0314 	add.w	r3, r7, #20
 800c9dc:	4611      	mov	r1, r2
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f001 f9e4 	bl	800ddac <xTaskCheckForTimeOut>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d124      	bne.n	800ca34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c9ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9ec:	f000 fce1 	bl	800d3b2 <prvIsQueueFull>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d018      	beq.n	800ca28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f8:	3310      	adds	r3, #16
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	4611      	mov	r1, r2
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f001 f934 	bl	800dc6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ca04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca06:	f000 fc6c 	bl	800d2e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ca0a:	f000 ff33 	bl	800d874 <xTaskResumeAll>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	f47f af7c 	bne.w	800c90e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ca16:	4b0c      	ldr	r3, [pc, #48]	; (800ca48 <xQueueGenericSend+0x200>)
 800ca18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca1c:	601a      	str	r2, [r3, #0]
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	f3bf 8f6f 	isb	sy
 800ca26:	e772      	b.n	800c90e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ca28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca2a:	f000 fc5a 	bl	800d2e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca2e:	f000 ff21 	bl	800d874 <xTaskResumeAll>
 800ca32:	e76c      	b.n	800c90e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ca34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca36:	f000 fc54 	bl	800d2e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca3a:	f000 ff1b 	bl	800d874 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ca3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3738      	adds	r7, #56	; 0x38
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	e000ed04 	.word	0xe000ed04

0800ca4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b08e      	sub	sp, #56	; 0x38
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
 800ca58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ca5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d10b      	bne.n	800ca7c <xQueueGenericSendFromISR+0x30>
 800ca64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca68:	b672      	cpsid	i
 800ca6a:	f383 8811 	msr	BASEPRI, r3
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	f3bf 8f4f 	dsb	sy
 800ca76:	b662      	cpsie	i
 800ca78:	627b      	str	r3, [r7, #36]	; 0x24
 800ca7a:	e7fe      	b.n	800ca7a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d103      	bne.n	800ca8a <xQueueGenericSendFromISR+0x3e>
 800ca82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d101      	bne.n	800ca8e <xQueueGenericSendFromISR+0x42>
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e000      	b.n	800ca90 <xQueueGenericSendFromISR+0x44>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10b      	bne.n	800caac <xQueueGenericSendFromISR+0x60>
 800ca94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca98:	b672      	cpsid	i
 800ca9a:	f383 8811 	msr	BASEPRI, r3
 800ca9e:	f3bf 8f6f 	isb	sy
 800caa2:	f3bf 8f4f 	dsb	sy
 800caa6:	b662      	cpsie	i
 800caa8:	623b      	str	r3, [r7, #32]
 800caaa:	e7fe      	b.n	800caaa <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	2b02      	cmp	r3, #2
 800cab0:	d103      	bne.n	800caba <xQueueGenericSendFromISR+0x6e>
 800cab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d101      	bne.n	800cabe <xQueueGenericSendFromISR+0x72>
 800caba:	2301      	movs	r3, #1
 800cabc:	e000      	b.n	800cac0 <xQueueGenericSendFromISR+0x74>
 800cabe:	2300      	movs	r3, #0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d10b      	bne.n	800cadc <xQueueGenericSendFromISR+0x90>
 800cac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac8:	b672      	cpsid	i
 800caca:	f383 8811 	msr	BASEPRI, r3
 800cace:	f3bf 8f6f 	isb	sy
 800cad2:	f3bf 8f4f 	dsb	sy
 800cad6:	b662      	cpsie	i
 800cad8:	61fb      	str	r3, [r7, #28]
 800cada:	e7fe      	b.n	800cada <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cadc:	f001 fed4 	bl	800e888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cae0:	f3ef 8211 	mrs	r2, BASEPRI
 800cae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae8:	b672      	cpsid	i
 800caea:	f383 8811 	msr	BASEPRI, r3
 800caee:	f3bf 8f6f 	isb	sy
 800caf2:	f3bf 8f4f 	dsb	sy
 800caf6:	b662      	cpsie	i
 800caf8:	61ba      	str	r2, [r7, #24]
 800cafa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cafc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cafe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d302      	bcc.n	800cb12 <xQueueGenericSendFromISR+0xc6>
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d12c      	bne.n	800cb6c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb1c:	683a      	ldr	r2, [r7, #0]
 800cb1e:	68b9      	ldr	r1, [r7, #8]
 800cb20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb22:	f000 fb4e 	bl	800d1c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cb26:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800cb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb2e:	d112      	bne.n	800cb56 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d016      	beq.n	800cb66 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3a:	3324      	adds	r3, #36	; 0x24
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f001 f8bb 	bl	800dcb8 <xTaskRemoveFromEventList>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d00e      	beq.n	800cb66 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00b      	beq.n	800cb66 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2201      	movs	r2, #1
 800cb52:	601a      	str	r2, [r3, #0]
 800cb54:	e007      	b.n	800cb66 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cb56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	b25a      	sxtb	r2, r3
 800cb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cb66:	2301      	movs	r3, #1
 800cb68:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800cb6a:	e001      	b.n	800cb70 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	637b      	str	r3, [r7, #52]	; 0x34
 800cb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb72:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3738      	adds	r7, #56	; 0x38
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b08e      	sub	sp, #56	; 0x38
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10b      	bne.n	800cbb0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9c:	b672      	cpsid	i
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	b662      	cpsie	i
 800cbac:	623b      	str	r3, [r7, #32]
 800cbae:	e7fe      	b.n	800cbae <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d00b      	beq.n	800cbd0 <xQueueGiveFromISR+0x4c>
 800cbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbbc:	b672      	cpsid	i
 800cbbe:	f383 8811 	msr	BASEPRI, r3
 800cbc2:	f3bf 8f6f 	isb	sy
 800cbc6:	f3bf 8f4f 	dsb	sy
 800cbca:	b662      	cpsie	i
 800cbcc:	61fb      	str	r3, [r7, #28]
 800cbce:	e7fe      	b.n	800cbce <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d103      	bne.n	800cbe0 <xQueueGiveFromISR+0x5c>
 800cbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d101      	bne.n	800cbe4 <xQueueGiveFromISR+0x60>
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	e000      	b.n	800cbe6 <xQueueGiveFromISR+0x62>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d10b      	bne.n	800cc02 <xQueueGiveFromISR+0x7e>
 800cbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbee:	b672      	cpsid	i
 800cbf0:	f383 8811 	msr	BASEPRI, r3
 800cbf4:	f3bf 8f6f 	isb	sy
 800cbf8:	f3bf 8f4f 	dsb	sy
 800cbfc:	b662      	cpsie	i
 800cbfe:	61bb      	str	r3, [r7, #24]
 800cc00:	e7fe      	b.n	800cc00 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc02:	f001 fe41 	bl	800e888 <vPortValidateInterruptPriority>
	__asm volatile
 800cc06:	f3ef 8211 	mrs	r2, BASEPRI
 800cc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0e:	b672      	cpsid	i
 800cc10:	f383 8811 	msr	BASEPRI, r3
 800cc14:	f3bf 8f6f 	isb	sy
 800cc18:	f3bf 8f4f 	dsb	sy
 800cc1c:	b662      	cpsie	i
 800cc1e:	617a      	str	r2, [r7, #20]
 800cc20:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cc22:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d22b      	bcs.n	800cc8e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc42:	1c5a      	adds	r2, r3, #1
 800cc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc46:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc50:	d112      	bne.n	800cc78 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d016      	beq.n	800cc88 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5c:	3324      	adds	r3, #36	; 0x24
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f001 f82a 	bl	800dcb8 <xTaskRemoveFromEventList>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00e      	beq.n	800cc88 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00b      	beq.n	800cc88 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	2201      	movs	r2, #1
 800cc74:	601a      	str	r2, [r3, #0]
 800cc76:	e007      	b.n	800cc88 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	b25a      	sxtb	r2, r3
 800cc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	637b      	str	r3, [r7, #52]	; 0x34
 800cc8c:	e001      	b.n	800cc92 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	637b      	str	r3, [r7, #52]	; 0x34
 800cc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc94:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3738      	adds	r7, #56	; 0x38
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
	...

0800cca8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b08c      	sub	sp, #48	; 0x30
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ccbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10b      	bne.n	800ccda <xQueueReceive+0x32>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc6:	b672      	cpsid	i
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	b662      	cpsie	i
 800ccd6:	623b      	str	r3, [r7, #32]
 800ccd8:	e7fe      	b.n	800ccd8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d103      	bne.n	800cce8 <xQueueReceive+0x40>
 800cce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d101      	bne.n	800ccec <xQueueReceive+0x44>
 800cce8:	2301      	movs	r3, #1
 800ccea:	e000      	b.n	800ccee <xQueueReceive+0x46>
 800ccec:	2300      	movs	r3, #0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10b      	bne.n	800cd0a <xQueueReceive+0x62>
 800ccf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf6:	b672      	cpsid	i
 800ccf8:	f383 8811 	msr	BASEPRI, r3
 800ccfc:	f3bf 8f6f 	isb	sy
 800cd00:	f3bf 8f4f 	dsb	sy
 800cd04:	b662      	cpsie	i
 800cd06:	61fb      	str	r3, [r7, #28]
 800cd08:	e7fe      	b.n	800cd08 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd0a:	f001 f995 	bl	800e038 <xTaskGetSchedulerState>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d102      	bne.n	800cd1a <xQueueReceive+0x72>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d101      	bne.n	800cd1e <xQueueReceive+0x76>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e000      	b.n	800cd20 <xQueueReceive+0x78>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10b      	bne.n	800cd3c <xQueueReceive+0x94>
 800cd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd28:	b672      	cpsid	i
 800cd2a:	f383 8811 	msr	BASEPRI, r3
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	f3bf 8f4f 	dsb	sy
 800cd36:	b662      	cpsie	i
 800cd38:	61bb      	str	r3, [r7, #24]
 800cd3a:	e7fe      	b.n	800cd3a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd3c:	f001 fcc4 	bl	800e6c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd44:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d01f      	beq.n	800cd8c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd4c:	68b9      	ldr	r1, [r7, #8]
 800cd4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd50:	f000 faa1 	bl	800d296 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd56:	1e5a      	subs	r2, r3, #1
 800cd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5e:	691b      	ldr	r3, [r3, #16]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00f      	beq.n	800cd84 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd66:	3310      	adds	r3, #16
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f000 ffa5 	bl	800dcb8 <xTaskRemoveFromEventList>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d007      	beq.n	800cd84 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cd74:	4b3c      	ldr	r3, [pc, #240]	; (800ce68 <xQueueReceive+0x1c0>)
 800cd76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd7a:	601a      	str	r2, [r3, #0]
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cd84:	f001 fcd2 	bl	800e72c <vPortExitCritical>
				return pdPASS;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	e069      	b.n	800ce60 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d103      	bne.n	800cd9a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd92:	f001 fccb 	bl	800e72c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cd96:	2300      	movs	r3, #0
 800cd98:	e062      	b.n	800ce60 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d106      	bne.n	800cdae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cda0:	f107 0310 	add.w	r3, r7, #16
 800cda4:	4618      	mov	r0, r3
 800cda6:	f000 ffeb 	bl	800dd80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cdae:	f001 fcbd 	bl	800e72c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cdb2:	f000 fd51 	bl	800d858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cdb6:	f001 fc87 	bl	800e6c8 <vPortEnterCritical>
 800cdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdc0:	b25b      	sxtb	r3, r3
 800cdc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc6:	d103      	bne.n	800cdd0 <xQueueReceive+0x128>
 800cdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdd6:	b25b      	sxtb	r3, r3
 800cdd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cddc:	d103      	bne.n	800cde6 <xQueueReceive+0x13e>
 800cdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde0:	2200      	movs	r2, #0
 800cde2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cde6:	f001 fca1 	bl	800e72c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdea:	1d3a      	adds	r2, r7, #4
 800cdec:	f107 0310 	add.w	r3, r7, #16
 800cdf0:	4611      	mov	r1, r2
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f000 ffda 	bl	800ddac <xTaskCheckForTimeOut>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d123      	bne.n	800ce46 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cdfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce00:	f000 fac1 	bl	800d386 <prvIsQueueEmpty>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d017      	beq.n	800ce3a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0c:	3324      	adds	r3, #36	; 0x24
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	4611      	mov	r1, r2
 800ce12:	4618      	mov	r0, r3
 800ce14:	f000 ff2a 	bl	800dc6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce1a:	f000 fa62 	bl	800d2e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce1e:	f000 fd29 	bl	800d874 <xTaskResumeAll>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d189      	bne.n	800cd3c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ce28:	4b0f      	ldr	r3, [pc, #60]	; (800ce68 <xQueueReceive+0x1c0>)
 800ce2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce2e:	601a      	str	r2, [r3, #0]
 800ce30:	f3bf 8f4f 	dsb	sy
 800ce34:	f3bf 8f6f 	isb	sy
 800ce38:	e780      	b.n	800cd3c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ce3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce3c:	f000 fa51 	bl	800d2e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce40:	f000 fd18 	bl	800d874 <xTaskResumeAll>
 800ce44:	e77a      	b.n	800cd3c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ce46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce48:	f000 fa4b 	bl	800d2e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce4c:	f000 fd12 	bl	800d874 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce52:	f000 fa98 	bl	800d386 <prvIsQueueEmpty>
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	f43f af6f 	beq.w	800cd3c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3730      	adds	r7, #48	; 0x30
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	e000ed04 	.word	0xe000ed04

0800ce6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b08e      	sub	sp, #56	; 0x38
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce76:	2300      	movs	r3, #0
 800ce78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d10b      	bne.n	800cea0 <xQueueSemaphoreTake+0x34>
 800ce88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8c:	b672      	cpsid	i
 800ce8e:	f383 8811 	msr	BASEPRI, r3
 800ce92:	f3bf 8f6f 	isb	sy
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	b662      	cpsie	i
 800ce9c:	623b      	str	r3, [r7, #32]
 800ce9e:	e7fe      	b.n	800ce9e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d00b      	beq.n	800cec0 <xQueueSemaphoreTake+0x54>
 800cea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceac:	b672      	cpsid	i
 800ceae:	f383 8811 	msr	BASEPRI, r3
 800ceb2:	f3bf 8f6f 	isb	sy
 800ceb6:	f3bf 8f4f 	dsb	sy
 800ceba:	b662      	cpsie	i
 800cebc:	61fb      	str	r3, [r7, #28]
 800cebe:	e7fe      	b.n	800cebe <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cec0:	f001 f8ba 	bl	800e038 <xTaskGetSchedulerState>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d102      	bne.n	800ced0 <xQueueSemaphoreTake+0x64>
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d101      	bne.n	800ced4 <xQueueSemaphoreTake+0x68>
 800ced0:	2301      	movs	r3, #1
 800ced2:	e000      	b.n	800ced6 <xQueueSemaphoreTake+0x6a>
 800ced4:	2300      	movs	r3, #0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d10b      	bne.n	800cef2 <xQueueSemaphoreTake+0x86>
 800ceda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cede:	b672      	cpsid	i
 800cee0:	f383 8811 	msr	BASEPRI, r3
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	b662      	cpsie	i
 800ceee:	61bb      	str	r3, [r7, #24]
 800cef0:	e7fe      	b.n	800cef0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cef2:	f001 fbe9 	bl	800e6c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d024      	beq.n	800cf4c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf04:	1e5a      	subs	r2, r3, #1
 800cf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf08:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d104      	bne.n	800cf1c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cf12:	f001 fa53 	bl	800e3bc <pvTaskIncrementMutexHeldCount>
 800cf16:	4602      	mov	r2, r0
 800cf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1e:	691b      	ldr	r3, [r3, #16]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d00f      	beq.n	800cf44 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf26:	3310      	adds	r3, #16
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 fec5 	bl	800dcb8 <xTaskRemoveFromEventList>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d007      	beq.n	800cf44 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf34:	4b54      	ldr	r3, [pc, #336]	; (800d088 <xQueueSemaphoreTake+0x21c>)
 800cf36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf3a:	601a      	str	r2, [r3, #0]
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf44:	f001 fbf2 	bl	800e72c <vPortExitCritical>
				return pdPASS;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	e098      	b.n	800d07e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d112      	bne.n	800cf78 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d00b      	beq.n	800cf70 <xQueueSemaphoreTake+0x104>
 800cf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5c:	b672      	cpsid	i
 800cf5e:	f383 8811 	msr	BASEPRI, r3
 800cf62:	f3bf 8f6f 	isb	sy
 800cf66:	f3bf 8f4f 	dsb	sy
 800cf6a:	b662      	cpsie	i
 800cf6c:	617b      	str	r3, [r7, #20]
 800cf6e:	e7fe      	b.n	800cf6e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cf70:	f001 fbdc 	bl	800e72c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf74:	2300      	movs	r3, #0
 800cf76:	e082      	b.n	800d07e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d106      	bne.n	800cf8c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf7e:	f107 030c 	add.w	r3, r7, #12
 800cf82:	4618      	mov	r0, r3
 800cf84:	f000 fefc 	bl	800dd80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf8c:	f001 fbce 	bl	800e72c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf90:	f000 fc62 	bl	800d858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf94:	f001 fb98 	bl	800e6c8 <vPortEnterCritical>
 800cf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf9e:	b25b      	sxtb	r3, r3
 800cfa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa4:	d103      	bne.n	800cfae <xQueueSemaphoreTake+0x142>
 800cfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfb4:	b25b      	sxtb	r3, r3
 800cfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfba:	d103      	bne.n	800cfc4 <xQueueSemaphoreTake+0x158>
 800cfbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfc4:	f001 fbb2 	bl	800e72c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfc8:	463a      	mov	r2, r7
 800cfca:	f107 030c 	add.w	r3, r7, #12
 800cfce:	4611      	mov	r1, r2
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f000 feeb 	bl	800ddac <xTaskCheckForTimeOut>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d132      	bne.n	800d042 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfde:	f000 f9d2 	bl	800d386 <prvIsQueueEmpty>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d026      	beq.n	800d036 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d109      	bne.n	800d004 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800cff0:	f001 fb6a 	bl	800e6c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	4618      	mov	r0, r3
 800cffa:	f001 f83b 	bl	800e074 <xTaskPriorityInherit>
 800cffe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d000:	f001 fb94 	bl	800e72c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d006:	3324      	adds	r3, #36	; 0x24
 800d008:	683a      	ldr	r2, [r7, #0]
 800d00a:	4611      	mov	r1, r2
 800d00c:	4618      	mov	r0, r3
 800d00e:	f000 fe2d 	bl	800dc6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d012:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d014:	f000 f965 	bl	800d2e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d018:	f000 fc2c 	bl	800d874 <xTaskResumeAll>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f47f af67 	bne.w	800cef2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d024:	4b18      	ldr	r3, [pc, #96]	; (800d088 <xQueueSemaphoreTake+0x21c>)
 800d026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d02a:	601a      	str	r2, [r3, #0]
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	e75d      	b.n	800cef2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d038:	f000 f953 	bl	800d2e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d03c:	f000 fc1a 	bl	800d874 <xTaskResumeAll>
 800d040:	e757      	b.n	800cef2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d042:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d044:	f000 f94d 	bl	800d2e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d048:	f000 fc14 	bl	800d874 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d04c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d04e:	f000 f99a 	bl	800d386 <prvIsQueueEmpty>
 800d052:	4603      	mov	r3, r0
 800d054:	2b00      	cmp	r3, #0
 800d056:	f43f af4c 	beq.w	800cef2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d00d      	beq.n	800d07c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d060:	f001 fb32 	bl	800e6c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d066:	f000 f894 	bl	800d192 <prvGetDisinheritPriorityAfterTimeout>
 800d06a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06e:	689b      	ldr	r3, [r3, #8]
 800d070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d072:	4618      	mov	r0, r3
 800d074:	f001 f906 	bl	800e284 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d078:	f001 fb58 	bl	800e72c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d07c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3738      	adds	r7, #56	; 0x38
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	e000ed04 	.word	0xe000ed04

0800d08c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b08e      	sub	sp, #56	; 0x38
 800d090:	af00      	add	r7, sp, #0
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d10b      	bne.n	800d0ba <xQueueReceiveFromISR+0x2e>
 800d0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a6:	b672      	cpsid	i
 800d0a8:	f383 8811 	msr	BASEPRI, r3
 800d0ac:	f3bf 8f6f 	isb	sy
 800d0b0:	f3bf 8f4f 	dsb	sy
 800d0b4:	b662      	cpsie	i
 800d0b6:	623b      	str	r3, [r7, #32]
 800d0b8:	e7fe      	b.n	800d0b8 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d103      	bne.n	800d0c8 <xQueueReceiveFromISR+0x3c>
 800d0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d101      	bne.n	800d0cc <xQueueReceiveFromISR+0x40>
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e000      	b.n	800d0ce <xQueueReceiveFromISR+0x42>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10b      	bne.n	800d0ea <xQueueReceiveFromISR+0x5e>
 800d0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d6:	b672      	cpsid	i
 800d0d8:	f383 8811 	msr	BASEPRI, r3
 800d0dc:	f3bf 8f6f 	isb	sy
 800d0e0:	f3bf 8f4f 	dsb	sy
 800d0e4:	b662      	cpsie	i
 800d0e6:	61fb      	str	r3, [r7, #28]
 800d0e8:	e7fe      	b.n	800d0e8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0ea:	f001 fbcd 	bl	800e888 <vPortValidateInterruptPriority>
	__asm volatile
 800d0ee:	f3ef 8211 	mrs	r2, BASEPRI
 800d0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f6:	b672      	cpsid	i
 800d0f8:	f383 8811 	msr	BASEPRI, r3
 800d0fc:	f3bf 8f6f 	isb	sy
 800d100:	f3bf 8f4f 	dsb	sy
 800d104:	b662      	cpsie	i
 800d106:	61ba      	str	r2, [r7, #24]
 800d108:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d10a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d10c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d112:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d116:	2b00      	cmp	r3, #0
 800d118:	d02f      	beq.n	800d17a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d124:	68b9      	ldr	r1, [r7, #8]
 800d126:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d128:	f000 f8b5 	bl	800d296 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12e:	1e5a      	subs	r2, r3, #1
 800d130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d132:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d134:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d13c:	d112      	bne.n	800d164 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d140:	691b      	ldr	r3, [r3, #16]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d016      	beq.n	800d174 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d148:	3310      	adds	r3, #16
 800d14a:	4618      	mov	r0, r3
 800d14c:	f000 fdb4 	bl	800dcb8 <xTaskRemoveFromEventList>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d00e      	beq.n	800d174 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00b      	beq.n	800d174 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2201      	movs	r2, #1
 800d160:	601a      	str	r2, [r3, #0]
 800d162:	e007      	b.n	800d174 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d168:	3301      	adds	r3, #1
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	b25a      	sxtb	r2, r3
 800d16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d174:	2301      	movs	r3, #1
 800d176:	637b      	str	r3, [r7, #52]	; 0x34
 800d178:	e001      	b.n	800d17e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d17a:	2300      	movs	r3, #0
 800d17c:	637b      	str	r3, [r7, #52]	; 0x34
 800d17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d180:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3738      	adds	r7, #56	; 0x38
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d192:	b480      	push	{r7}
 800d194:	b085      	sub	sp, #20
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d006      	beq.n	800d1b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f1c3 0307 	rsb	r3, r3, #7
 800d1ac:	60fb      	str	r3, [r7, #12]
 800d1ae:	e001      	b.n	800d1b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
	}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3714      	adds	r7, #20
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr

0800d1c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b086      	sub	sp, #24
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	60f8      	str	r0, [r7, #12]
 800d1ca:	60b9      	str	r1, [r7, #8]
 800d1cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d10d      	bne.n	800d1fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d14d      	bne.n	800d284 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f000 ffc1 	bl	800e174 <xTaskPriorityDisinherit>
 800d1f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	609a      	str	r2, [r3, #8]
 800d1fa:	e043      	b.n	800d284 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d119      	bne.n	800d236 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6858      	ldr	r0, [r3, #4]
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d20a:	461a      	mov	r2, r3
 800d20c:	68b9      	ldr	r1, [r7, #8]
 800d20e:	f01b f9b7 	bl	8028580 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d21a:	441a      	add	r2, r3
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	685a      	ldr	r2, [r3, #4]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d32b      	bcc.n	800d284 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681a      	ldr	r2, [r3, #0]
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	605a      	str	r2, [r3, #4]
 800d234:	e026      	b.n	800d284 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	68d8      	ldr	r0, [r3, #12]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d23e:	461a      	mov	r2, r3
 800d240:	68b9      	ldr	r1, [r7, #8]
 800d242:	f01b f99d 	bl	8028580 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	68da      	ldr	r2, [r3, #12]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d24e:	425b      	negs	r3, r3
 800d250:	441a      	add	r2, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	68da      	ldr	r2, [r3, #12]
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d207      	bcs.n	800d272 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	689a      	ldr	r2, [r3, #8]
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26a:	425b      	negs	r3, r3
 800d26c:	441a      	add	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2b02      	cmp	r3, #2
 800d276:	d105      	bne.n	800d284 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d002      	beq.n	800d284 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	3b01      	subs	r3, #1
 800d282:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	1c5a      	adds	r2, r3, #1
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d28c:	697b      	ldr	r3, [r7, #20]
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3718      	adds	r7, #24
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b082      	sub	sp, #8
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
 800d29e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d018      	beq.n	800d2da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	68da      	ldr	r2, [r3, #12]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b0:	441a      	add	r2, r3
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	68da      	ldr	r2, [r3, #12]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d303      	bcc.n	800d2ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	68d9      	ldr	r1, [r3, #12]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	6838      	ldr	r0, [r7, #0]
 800d2d6:	f01b f953 	bl	8028580 <memcpy>
	}
}
 800d2da:	bf00      	nop
 800d2dc:	3708      	adds	r7, #8
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}

0800d2e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b084      	sub	sp, #16
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d2ea:	f001 f9ed 	bl	800e6c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d2f6:	e011      	b.n	800d31c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d012      	beq.n	800d326 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	3324      	adds	r3, #36	; 0x24
 800d304:	4618      	mov	r0, r3
 800d306:	f000 fcd7 	bl	800dcb8 <xTaskRemoveFromEventList>
 800d30a:	4603      	mov	r3, r0
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d001      	beq.n	800d314 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d310:	f000 fdb0 	bl	800de74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d314:	7bfb      	ldrb	r3, [r7, #15]
 800d316:	3b01      	subs	r3, #1
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d31c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d320:	2b00      	cmp	r3, #0
 800d322:	dce9      	bgt.n	800d2f8 <prvUnlockQueue+0x16>
 800d324:	e000      	b.n	800d328 <prvUnlockQueue+0x46>
					break;
 800d326:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	22ff      	movs	r2, #255	; 0xff
 800d32c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d330:	f001 f9fc 	bl	800e72c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d334:	f001 f9c8 	bl	800e6c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d33e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d340:	e011      	b.n	800d366 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	691b      	ldr	r3, [r3, #16]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d012      	beq.n	800d370 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	3310      	adds	r3, #16
 800d34e:	4618      	mov	r0, r3
 800d350:	f000 fcb2 	bl	800dcb8 <xTaskRemoveFromEventList>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d001      	beq.n	800d35e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d35a:	f000 fd8b 	bl	800de74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d35e:	7bbb      	ldrb	r3, [r7, #14]
 800d360:	3b01      	subs	r3, #1
 800d362:	b2db      	uxtb	r3, r3
 800d364:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d366:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	dce9      	bgt.n	800d342 <prvUnlockQueue+0x60>
 800d36e:	e000      	b.n	800d372 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d370:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	22ff      	movs	r2, #255	; 0xff
 800d376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d37a:	f001 f9d7 	bl	800e72c <vPortExitCritical>
}
 800d37e:	bf00      	nop
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}

0800d386 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d386:	b580      	push	{r7, lr}
 800d388:	b084      	sub	sp, #16
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d38e:	f001 f99b 	bl	800e6c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d396:	2b00      	cmp	r3, #0
 800d398:	d102      	bne.n	800d3a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d39a:	2301      	movs	r3, #1
 800d39c:	60fb      	str	r3, [r7, #12]
 800d39e:	e001      	b.n	800d3a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d3a4:	f001 f9c2 	bl	800e72c <vPortExitCritical>

	return xReturn;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3710      	adds	r7, #16
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b084      	sub	sp, #16
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3ba:	f001 f985 	bl	800e6c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d102      	bne.n	800d3d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	60fb      	str	r3, [r7, #12]
 800d3ce:	e001      	b.n	800d3d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d3d4:	f001 f9aa 	bl	800e72c <vPortExitCritical>

	return xReturn;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3710      	adds	r7, #16
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b08e      	sub	sp, #56	; 0x38
 800d3e6:	af04      	add	r7, sp, #16
 800d3e8:	60f8      	str	r0, [r7, #12]
 800d3ea:	60b9      	str	r1, [r7, #8]
 800d3ec:	607a      	str	r2, [r7, #4]
 800d3ee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d10b      	bne.n	800d40e <xTaskCreateStatic+0x2c>
	__asm volatile
 800d3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fa:	b672      	cpsid	i
 800d3fc:	f383 8811 	msr	BASEPRI, r3
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	b662      	cpsie	i
 800d40a:	623b      	str	r3, [r7, #32]
 800d40c:	e7fe      	b.n	800d40c <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800d40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10b      	bne.n	800d42c <xTaskCreateStatic+0x4a>
 800d414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d418:	b672      	cpsid	i
 800d41a:	f383 8811 	msr	BASEPRI, r3
 800d41e:	f3bf 8f6f 	isb	sy
 800d422:	f3bf 8f4f 	dsb	sy
 800d426:	b662      	cpsie	i
 800d428:	61fb      	str	r3, [r7, #28]
 800d42a:	e7fe      	b.n	800d42a <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d42c:	2358      	movs	r3, #88	; 0x58
 800d42e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	2b58      	cmp	r3, #88	; 0x58
 800d434:	d00b      	beq.n	800d44e <xTaskCreateStatic+0x6c>
 800d436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43a:	b672      	cpsid	i
 800d43c:	f383 8811 	msr	BASEPRI, r3
 800d440:	f3bf 8f6f 	isb	sy
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	b662      	cpsie	i
 800d44a:	61bb      	str	r3, [r7, #24]
 800d44c:	e7fe      	b.n	800d44c <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d44e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d452:	2b00      	cmp	r3, #0
 800d454:	d01e      	beq.n	800d494 <xTaskCreateStatic+0xb2>
 800d456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d01b      	beq.n	800d494 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d464:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d468:	2202      	movs	r2, #2
 800d46a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d46e:	2300      	movs	r3, #0
 800d470:	9303      	str	r3, [sp, #12]
 800d472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d474:	9302      	str	r3, [sp, #8]
 800d476:	f107 0314 	add.w	r3, r7, #20
 800d47a:	9301      	str	r3, [sp, #4]
 800d47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47e:	9300      	str	r3, [sp, #0]
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	68b9      	ldr	r1, [r7, #8]
 800d486:	68f8      	ldr	r0, [r7, #12]
 800d488:	f000 f850 	bl	800d52c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d48c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d48e:	f000 f8e1 	bl	800d654 <prvAddNewTaskToReadyList>
 800d492:	e001      	b.n	800d498 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d494:	2300      	movs	r3, #0
 800d496:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d498:	697b      	ldr	r3, [r7, #20]
	}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3728      	adds	r7, #40	; 0x28
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b08c      	sub	sp, #48	; 0x30
 800d4a6:	af04      	add	r7, sp, #16
 800d4a8:	60f8      	str	r0, [r7, #12]
 800d4aa:	60b9      	str	r1, [r7, #8]
 800d4ac:	603b      	str	r3, [r7, #0]
 800d4ae:	4613      	mov	r3, r2
 800d4b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d4b2:	88fb      	ldrh	r3, [r7, #6]
 800d4b4:	009b      	lsls	r3, r3, #2
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f001 fa28 	bl	800e90c <pvPortMalloc>
 800d4bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d00e      	beq.n	800d4e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d4c4:	2058      	movs	r0, #88	; 0x58
 800d4c6:	f001 fa21 	bl	800e90c <pvPortMalloc>
 800d4ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d003      	beq.n	800d4da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	697a      	ldr	r2, [r7, #20]
 800d4d6:	631a      	str	r2, [r3, #48]	; 0x30
 800d4d8:	e005      	b.n	800d4e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d4da:	6978      	ldr	r0, [r7, #20]
 800d4dc:	f001 fae2 	bl	800eaa4 <vPortFree>
 800d4e0:	e001      	b.n	800d4e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d017      	beq.n	800d51c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d4f4:	88fa      	ldrh	r2, [r7, #6]
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	9303      	str	r3, [sp, #12]
 800d4fa:	69fb      	ldr	r3, [r7, #28]
 800d4fc:	9302      	str	r3, [sp, #8]
 800d4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d500:	9301      	str	r3, [sp, #4]
 800d502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d504:	9300      	str	r3, [sp, #0]
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	68b9      	ldr	r1, [r7, #8]
 800d50a:	68f8      	ldr	r0, [r7, #12]
 800d50c:	f000 f80e 	bl	800d52c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d510:	69f8      	ldr	r0, [r7, #28]
 800d512:	f000 f89f 	bl	800d654 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d516:	2301      	movs	r3, #1
 800d518:	61bb      	str	r3, [r7, #24]
 800d51a:	e002      	b.n	800d522 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d51c:	f04f 33ff 	mov.w	r3, #4294967295
 800d520:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d522:	69bb      	ldr	r3, [r7, #24]
	}
 800d524:	4618      	mov	r0, r3
 800d526:	3720      	adds	r7, #32
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b088      	sub	sp, #32
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]
 800d538:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	461a      	mov	r2, r3
 800d544:	21a5      	movs	r1, #165	; 0xa5
 800d546:	f01b f826 	bl	8028596 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d54e:	6879      	ldr	r1, [r7, #4]
 800d550:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d554:	440b      	add	r3, r1
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	4413      	add	r3, r2
 800d55a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	f023 0307 	bic.w	r3, r3, #7
 800d562:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d564:	69bb      	ldr	r3, [r7, #24]
 800d566:	f003 0307 	and.w	r3, r3, #7
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d00b      	beq.n	800d586 <prvInitialiseNewTask+0x5a>
 800d56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d572:	b672      	cpsid	i
 800d574:	f383 8811 	msr	BASEPRI, r3
 800d578:	f3bf 8f6f 	isb	sy
 800d57c:	f3bf 8f4f 	dsb	sy
 800d580:	b662      	cpsie	i
 800d582:	617b      	str	r3, [r7, #20]
 800d584:	e7fe      	b.n	800d584 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d01f      	beq.n	800d5cc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d58c:	2300      	movs	r3, #0
 800d58e:	61fb      	str	r3, [r7, #28]
 800d590:	e012      	b.n	800d5b8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d592:	68ba      	ldr	r2, [r7, #8]
 800d594:	69fb      	ldr	r3, [r7, #28]
 800d596:	4413      	add	r3, r2
 800d598:	7819      	ldrb	r1, [r3, #0]
 800d59a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	4413      	add	r3, r2
 800d5a0:	3334      	adds	r3, #52	; 0x34
 800d5a2:	460a      	mov	r2, r1
 800d5a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d5a6:	68ba      	ldr	r2, [r7, #8]
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	4413      	add	r3, r2
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d006      	beq.n	800d5c0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	61fb      	str	r3, [r7, #28]
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	2b0f      	cmp	r3, #15
 800d5bc:	d9e9      	bls.n	800d592 <prvInitialiseNewTask+0x66>
 800d5be:	e000      	b.n	800d5c2 <prvInitialiseNewTask+0x96>
			{
				break;
 800d5c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d5ca:	e003      	b.n	800d5d4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d6:	2b06      	cmp	r3, #6
 800d5d8:	d901      	bls.n	800d5de <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d5da:	2306      	movs	r3, #6
 800d5dc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5e2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5e8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f2:	3304      	adds	r3, #4
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7fe fedd 	bl	800c3b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fc:	3318      	adds	r3, #24
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7fe fed8 	bl	800c3b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d608:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d60c:	f1c3 0207 	rsb	r2, r3, #7
 800d610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d612:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d618:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61c:	2200      	movs	r2, #0
 800d61e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d622:	2200      	movs	r2, #0
 800d624:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d628:	2200      	movs	r2, #0
 800d62a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d62e:	683a      	ldr	r2, [r7, #0]
 800d630:	68f9      	ldr	r1, [r7, #12]
 800d632:	69b8      	ldr	r0, [r7, #24]
 800d634:	f000 ff3c 	bl	800e4b0 <pxPortInitialiseStack>
 800d638:	4602      	mov	r2, r0
 800d63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d640:	2b00      	cmp	r3, #0
 800d642:	d002      	beq.n	800d64a <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d648:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d64a:	bf00      	nop
 800d64c:	3720      	adds	r7, #32
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
	...

0800d654 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d65c:	f001 f834 	bl	800e6c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d660:	4b2a      	ldr	r3, [pc, #168]	; (800d70c <prvAddNewTaskToReadyList+0xb8>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	3301      	adds	r3, #1
 800d666:	4a29      	ldr	r2, [pc, #164]	; (800d70c <prvAddNewTaskToReadyList+0xb8>)
 800d668:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d66a:	4b29      	ldr	r3, [pc, #164]	; (800d710 <prvAddNewTaskToReadyList+0xbc>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d109      	bne.n	800d686 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d672:	4a27      	ldr	r2, [pc, #156]	; (800d710 <prvAddNewTaskToReadyList+0xbc>)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d678:	4b24      	ldr	r3, [pc, #144]	; (800d70c <prvAddNewTaskToReadyList+0xb8>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	d110      	bne.n	800d6a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d680:	f000 fc1e 	bl	800dec0 <prvInitialiseTaskLists>
 800d684:	e00d      	b.n	800d6a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d686:	4b23      	ldr	r3, [pc, #140]	; (800d714 <prvAddNewTaskToReadyList+0xc0>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d109      	bne.n	800d6a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d68e:	4b20      	ldr	r3, [pc, #128]	; (800d710 <prvAddNewTaskToReadyList+0xbc>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d698:	429a      	cmp	r2, r3
 800d69a:	d802      	bhi.n	800d6a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d69c:	4a1c      	ldr	r2, [pc, #112]	; (800d710 <prvAddNewTaskToReadyList+0xbc>)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d6a2:	4b1d      	ldr	r3, [pc, #116]	; (800d718 <prvAddNewTaskToReadyList+0xc4>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	4a1b      	ldr	r2, [pc, #108]	; (800d718 <prvAddNewTaskToReadyList+0xc4>)
 800d6aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	409a      	lsls	r2, r3
 800d6b4:	4b19      	ldr	r3, [pc, #100]	; (800d71c <prvAddNewTaskToReadyList+0xc8>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	4a18      	ldr	r2, [pc, #96]	; (800d71c <prvAddNewTaskToReadyList+0xc8>)
 800d6bc:	6013      	str	r3, [r2, #0]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	4413      	add	r3, r2
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	4a15      	ldr	r2, [pc, #84]	; (800d720 <prvAddNewTaskToReadyList+0xcc>)
 800d6cc:	441a      	add	r2, r3
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	3304      	adds	r3, #4
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	4610      	mov	r0, r2
 800d6d6:	f7fe fe7a 	bl	800c3ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d6da:	f001 f827 	bl	800e72c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d6de:	4b0d      	ldr	r3, [pc, #52]	; (800d714 <prvAddNewTaskToReadyList+0xc0>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00e      	beq.n	800d704 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d6e6:	4b0a      	ldr	r3, [pc, #40]	; (800d710 <prvAddNewTaskToReadyList+0xbc>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d207      	bcs.n	800d704 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d6f4:	4b0b      	ldr	r3, [pc, #44]	; (800d724 <prvAddNewTaskToReadyList+0xd0>)
 800d6f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6fa:	601a      	str	r2, [r3, #0]
 800d6fc:	f3bf 8f4f 	dsb	sy
 800d700:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d704:	bf00      	nop
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	200004a4 	.word	0x200004a4
 800d710:	200003a4 	.word	0x200003a4
 800d714:	200004b0 	.word	0x200004b0
 800d718:	200004c0 	.word	0x200004c0
 800d71c:	200004ac 	.word	0x200004ac
 800d720:	200003a8 	.word	0x200003a8
 800d724:	e000ed04 	.word	0xe000ed04

0800d728 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d730:	2300      	movs	r3, #0
 800d732:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d018      	beq.n	800d76c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d73a:	4b14      	ldr	r3, [pc, #80]	; (800d78c <vTaskDelay+0x64>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00b      	beq.n	800d75a <vTaskDelay+0x32>
 800d742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d746:	b672      	cpsid	i
 800d748:	f383 8811 	msr	BASEPRI, r3
 800d74c:	f3bf 8f6f 	isb	sy
 800d750:	f3bf 8f4f 	dsb	sy
 800d754:	b662      	cpsie	i
 800d756:	60bb      	str	r3, [r7, #8]
 800d758:	e7fe      	b.n	800d758 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800d75a:	f000 f87d 	bl	800d858 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d75e:	2100      	movs	r1, #0
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 fe3f 	bl	800e3e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d766:	f000 f885 	bl	800d874 <xTaskResumeAll>
 800d76a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d107      	bne.n	800d782 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d772:	4b07      	ldr	r3, [pc, #28]	; (800d790 <vTaskDelay+0x68>)
 800d774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d778:	601a      	str	r2, [r3, #0]
 800d77a:	f3bf 8f4f 	dsb	sy
 800d77e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d782:	bf00      	nop
 800d784:	3710      	adds	r7, #16
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	200004cc 	.word	0x200004cc
 800d790:	e000ed04 	.word	0xe000ed04

0800d794 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b08a      	sub	sp, #40	; 0x28
 800d798:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d79a:	2300      	movs	r3, #0
 800d79c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d7a2:	463a      	mov	r2, r7
 800d7a4:	1d39      	adds	r1, r7, #4
 800d7a6:	f107 0308 	add.w	r3, r7, #8
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7f3 f8f6 	bl	800099c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d7b0:	6839      	ldr	r1, [r7, #0]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	68ba      	ldr	r2, [r7, #8]
 800d7b6:	9202      	str	r2, [sp, #8]
 800d7b8:	9301      	str	r3, [sp, #4]
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	9300      	str	r3, [sp, #0]
 800d7be:	2300      	movs	r3, #0
 800d7c0:	460a      	mov	r2, r1
 800d7c2:	491f      	ldr	r1, [pc, #124]	; (800d840 <vTaskStartScheduler+0xac>)
 800d7c4:	481f      	ldr	r0, [pc, #124]	; (800d844 <vTaskStartScheduler+0xb0>)
 800d7c6:	f7ff fe0c 	bl	800d3e2 <xTaskCreateStatic>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	4b1e      	ldr	r3, [pc, #120]	; (800d848 <vTaskStartScheduler+0xb4>)
 800d7ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d7d0:	4b1d      	ldr	r3, [pc, #116]	; (800d848 <vTaskStartScheduler+0xb4>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d002      	beq.n	800d7de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	617b      	str	r3, [r7, #20]
 800d7dc:	e001      	b.n	800d7e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d117      	bne.n	800d818 <vTaskStartScheduler+0x84>
 800d7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ec:	b672      	cpsid	i
 800d7ee:	f383 8811 	msr	BASEPRI, r3
 800d7f2:	f3bf 8f6f 	isb	sy
 800d7f6:	f3bf 8f4f 	dsb	sy
 800d7fa:	b662      	cpsie	i
 800d7fc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d7fe:	4b13      	ldr	r3, [pc, #76]	; (800d84c <vTaskStartScheduler+0xb8>)
 800d800:	f04f 32ff 	mov.w	r2, #4294967295
 800d804:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d806:	4b12      	ldr	r3, [pc, #72]	; (800d850 <vTaskStartScheduler+0xbc>)
 800d808:	2201      	movs	r2, #1
 800d80a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d80c:	4b11      	ldr	r3, [pc, #68]	; (800d854 <vTaskStartScheduler+0xc0>)
 800d80e:	2200      	movs	r2, #0
 800d810:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d812:	f000 fedd 	bl	800e5d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d816:	e00f      	b.n	800d838 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d81e:	d10b      	bne.n	800d838 <vTaskStartScheduler+0xa4>
 800d820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d824:	b672      	cpsid	i
 800d826:	f383 8811 	msr	BASEPRI, r3
 800d82a:	f3bf 8f6f 	isb	sy
 800d82e:	f3bf 8f4f 	dsb	sy
 800d832:	b662      	cpsie	i
 800d834:	60fb      	str	r3, [r7, #12]
 800d836:	e7fe      	b.n	800d836 <vTaskStartScheduler+0xa2>
}
 800d838:	bf00      	nop
 800d83a:	3718      	adds	r7, #24
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	080294e0 	.word	0x080294e0
 800d844:	0800de8d 	.word	0x0800de8d
 800d848:	200004c8 	.word	0x200004c8
 800d84c:	200004c4 	.word	0x200004c4
 800d850:	200004b0 	.word	0x200004b0
 800d854:	200004a8 	.word	0x200004a8

0800d858 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d858:	b480      	push	{r7}
 800d85a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d85c:	4b04      	ldr	r3, [pc, #16]	; (800d870 <vTaskSuspendAll+0x18>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	3301      	adds	r3, #1
 800d862:	4a03      	ldr	r2, [pc, #12]	; (800d870 <vTaskSuspendAll+0x18>)
 800d864:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d866:	bf00      	nop
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr
 800d870:	200004cc 	.word	0x200004cc

0800d874 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d87a:	2300      	movs	r3, #0
 800d87c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d87e:	2300      	movs	r3, #0
 800d880:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d882:	4b42      	ldr	r3, [pc, #264]	; (800d98c <xTaskResumeAll+0x118>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d10b      	bne.n	800d8a2 <xTaskResumeAll+0x2e>
 800d88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d88e:	b672      	cpsid	i
 800d890:	f383 8811 	msr	BASEPRI, r3
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	f3bf 8f4f 	dsb	sy
 800d89c:	b662      	cpsie	i
 800d89e:	603b      	str	r3, [r7, #0]
 800d8a0:	e7fe      	b.n	800d8a0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d8a2:	f000 ff11 	bl	800e6c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d8a6:	4b39      	ldr	r3, [pc, #228]	; (800d98c <xTaskResumeAll+0x118>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	4a37      	ldr	r2, [pc, #220]	; (800d98c <xTaskResumeAll+0x118>)
 800d8ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8b0:	4b36      	ldr	r3, [pc, #216]	; (800d98c <xTaskResumeAll+0x118>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d161      	bne.n	800d97c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d8b8:	4b35      	ldr	r3, [pc, #212]	; (800d990 <xTaskResumeAll+0x11c>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d05d      	beq.n	800d97c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d8c0:	e02e      	b.n	800d920 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8c2:	4b34      	ldr	r3, [pc, #208]	; (800d994 <xTaskResumeAll+0x120>)
 800d8c4:	68db      	ldr	r3, [r3, #12]
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	3318      	adds	r3, #24
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7fe fdda 	bl	800c488 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	3304      	adds	r3, #4
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7fe fdd5 	bl	800c488 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	409a      	lsls	r2, r3
 800d8e6:	4b2c      	ldr	r3, [pc, #176]	; (800d998 <xTaskResumeAll+0x124>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	4a2a      	ldr	r2, [pc, #168]	; (800d998 <xTaskResumeAll+0x124>)
 800d8ee:	6013      	str	r3, [r2, #0]
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	4413      	add	r3, r2
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	4a27      	ldr	r2, [pc, #156]	; (800d99c <xTaskResumeAll+0x128>)
 800d8fe:	441a      	add	r2, r3
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	3304      	adds	r3, #4
 800d904:	4619      	mov	r1, r3
 800d906:	4610      	mov	r0, r2
 800d908:	f7fe fd61 	bl	800c3ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d910:	4b23      	ldr	r3, [pc, #140]	; (800d9a0 <xTaskResumeAll+0x12c>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d916:	429a      	cmp	r2, r3
 800d918:	d302      	bcc.n	800d920 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d91a:	4b22      	ldr	r3, [pc, #136]	; (800d9a4 <xTaskResumeAll+0x130>)
 800d91c:	2201      	movs	r2, #1
 800d91e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d920:	4b1c      	ldr	r3, [pc, #112]	; (800d994 <xTaskResumeAll+0x120>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d1cc      	bne.n	800d8c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d001      	beq.n	800d932 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d92e:	f000 fb63 	bl	800dff8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d932:	4b1d      	ldr	r3, [pc, #116]	; (800d9a8 <xTaskResumeAll+0x134>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d010      	beq.n	800d960 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d93e:	f000 f859 	bl	800d9f4 <xTaskIncrementTick>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d002      	beq.n	800d94e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d948:	4b16      	ldr	r3, [pc, #88]	; (800d9a4 <xTaskResumeAll+0x130>)
 800d94a:	2201      	movs	r2, #1
 800d94c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	3b01      	subs	r3, #1
 800d952:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d1f1      	bne.n	800d93e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800d95a:	4b13      	ldr	r3, [pc, #76]	; (800d9a8 <xTaskResumeAll+0x134>)
 800d95c:	2200      	movs	r2, #0
 800d95e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d960:	4b10      	ldr	r3, [pc, #64]	; (800d9a4 <xTaskResumeAll+0x130>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d009      	beq.n	800d97c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d968:	2301      	movs	r3, #1
 800d96a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d96c:	4b0f      	ldr	r3, [pc, #60]	; (800d9ac <xTaskResumeAll+0x138>)
 800d96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d972:	601a      	str	r2, [r3, #0]
 800d974:	f3bf 8f4f 	dsb	sy
 800d978:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d97c:	f000 fed6 	bl	800e72c <vPortExitCritical>

	return xAlreadyYielded;
 800d980:	68bb      	ldr	r3, [r7, #8]
}
 800d982:	4618      	mov	r0, r3
 800d984:	3710      	adds	r7, #16
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	200004cc 	.word	0x200004cc
 800d990:	200004a4 	.word	0x200004a4
 800d994:	20000464 	.word	0x20000464
 800d998:	200004ac 	.word	0x200004ac
 800d99c:	200003a8 	.word	0x200003a8
 800d9a0:	200003a4 	.word	0x200003a4
 800d9a4:	200004b8 	.word	0x200004b8
 800d9a8:	200004b4 	.word	0x200004b4
 800d9ac:	e000ed04 	.word	0xe000ed04

0800d9b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b083      	sub	sp, #12
 800d9b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d9b6:	4b05      	ldr	r3, [pc, #20]	; (800d9cc <xTaskGetTickCount+0x1c>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d9bc:	687b      	ldr	r3, [r7, #4]
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	370c      	adds	r7, #12
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr
 800d9ca:	bf00      	nop
 800d9cc:	200004a8 	.word	0x200004a8

0800d9d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d9d6:	f000 ff57 	bl	800e888 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d9da:	2300      	movs	r3, #0
 800d9dc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d9de:	4b04      	ldr	r3, [pc, #16]	; (800d9f0 <xTaskGetTickCountFromISR+0x20>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d9e4:	683b      	ldr	r3, [r7, #0]
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3708      	adds	r7, #8
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	200004a8 	.word	0x200004a8

0800d9f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b086      	sub	sp, #24
 800d9f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9fe:	4b4f      	ldr	r3, [pc, #316]	; (800db3c <xTaskIncrementTick+0x148>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	f040 8089 	bne.w	800db1a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800da08:	4b4d      	ldr	r3, [pc, #308]	; (800db40 <xTaskIncrementTick+0x14c>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	3301      	adds	r3, #1
 800da0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800da10:	4a4b      	ldr	r2, [pc, #300]	; (800db40 <xTaskIncrementTick+0x14c>)
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d121      	bne.n	800da60 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800da1c:	4b49      	ldr	r3, [pc, #292]	; (800db44 <xTaskIncrementTick+0x150>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00b      	beq.n	800da3e <xTaskIncrementTick+0x4a>
 800da26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da2a:	b672      	cpsid	i
 800da2c:	f383 8811 	msr	BASEPRI, r3
 800da30:	f3bf 8f6f 	isb	sy
 800da34:	f3bf 8f4f 	dsb	sy
 800da38:	b662      	cpsie	i
 800da3a:	603b      	str	r3, [r7, #0]
 800da3c:	e7fe      	b.n	800da3c <xTaskIncrementTick+0x48>
 800da3e:	4b41      	ldr	r3, [pc, #260]	; (800db44 <xTaskIncrementTick+0x150>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	60fb      	str	r3, [r7, #12]
 800da44:	4b40      	ldr	r3, [pc, #256]	; (800db48 <xTaskIncrementTick+0x154>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a3e      	ldr	r2, [pc, #248]	; (800db44 <xTaskIncrementTick+0x150>)
 800da4a:	6013      	str	r3, [r2, #0]
 800da4c:	4a3e      	ldr	r2, [pc, #248]	; (800db48 <xTaskIncrementTick+0x154>)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6013      	str	r3, [r2, #0]
 800da52:	4b3e      	ldr	r3, [pc, #248]	; (800db4c <xTaskIncrementTick+0x158>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	3301      	adds	r3, #1
 800da58:	4a3c      	ldr	r2, [pc, #240]	; (800db4c <xTaskIncrementTick+0x158>)
 800da5a:	6013      	str	r3, [r2, #0]
 800da5c:	f000 facc 	bl	800dff8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800da60:	4b3b      	ldr	r3, [pc, #236]	; (800db50 <xTaskIncrementTick+0x15c>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	693a      	ldr	r2, [r7, #16]
 800da66:	429a      	cmp	r2, r3
 800da68:	d348      	bcc.n	800dafc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da6a:	4b36      	ldr	r3, [pc, #216]	; (800db44 <xTaskIncrementTick+0x150>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d104      	bne.n	800da7e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da74:	4b36      	ldr	r3, [pc, #216]	; (800db50 <xTaskIncrementTick+0x15c>)
 800da76:	f04f 32ff 	mov.w	r2, #4294967295
 800da7a:	601a      	str	r2, [r3, #0]
					break;
 800da7c:	e03e      	b.n	800dafc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da7e:	4b31      	ldr	r3, [pc, #196]	; (800db44 <xTaskIncrementTick+0x150>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800da8e:	693a      	ldr	r2, [r7, #16]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	429a      	cmp	r2, r3
 800da94:	d203      	bcs.n	800da9e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800da96:	4a2e      	ldr	r2, [pc, #184]	; (800db50 <xTaskIncrementTick+0x15c>)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800da9c:	e02e      	b.n	800dafc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	3304      	adds	r3, #4
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7fe fcf0 	bl	800c488 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daac:	2b00      	cmp	r3, #0
 800daae:	d004      	beq.n	800daba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	3318      	adds	r3, #24
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7fe fce7 	bl	800c488 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dabe:	2201      	movs	r2, #1
 800dac0:	409a      	lsls	r2, r3
 800dac2:	4b24      	ldr	r3, [pc, #144]	; (800db54 <xTaskIncrementTick+0x160>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4313      	orrs	r3, r2
 800dac8:	4a22      	ldr	r2, [pc, #136]	; (800db54 <xTaskIncrementTick+0x160>)
 800daca:	6013      	str	r3, [r2, #0]
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dad0:	4613      	mov	r3, r2
 800dad2:	009b      	lsls	r3, r3, #2
 800dad4:	4413      	add	r3, r2
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	4a1f      	ldr	r2, [pc, #124]	; (800db58 <xTaskIncrementTick+0x164>)
 800dada:	441a      	add	r2, r3
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	3304      	adds	r3, #4
 800dae0:	4619      	mov	r1, r3
 800dae2:	4610      	mov	r0, r2
 800dae4:	f7fe fc73 	bl	800c3ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daec:	4b1b      	ldr	r3, [pc, #108]	; (800db5c <xTaskIncrementTick+0x168>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d3b9      	bcc.n	800da6a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800daf6:	2301      	movs	r3, #1
 800daf8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dafa:	e7b6      	b.n	800da6a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dafc:	4b17      	ldr	r3, [pc, #92]	; (800db5c <xTaskIncrementTick+0x168>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db02:	4915      	ldr	r1, [pc, #84]	; (800db58 <xTaskIncrementTick+0x164>)
 800db04:	4613      	mov	r3, r2
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	4413      	add	r3, r2
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	440b      	add	r3, r1
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b01      	cmp	r3, #1
 800db12:	d907      	bls.n	800db24 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800db14:	2301      	movs	r3, #1
 800db16:	617b      	str	r3, [r7, #20]
 800db18:	e004      	b.n	800db24 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800db1a:	4b11      	ldr	r3, [pc, #68]	; (800db60 <xTaskIncrementTick+0x16c>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	3301      	adds	r3, #1
 800db20:	4a0f      	ldr	r2, [pc, #60]	; (800db60 <xTaskIncrementTick+0x16c>)
 800db22:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800db24:	4b0f      	ldr	r3, [pc, #60]	; (800db64 <xTaskIncrementTick+0x170>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d001      	beq.n	800db30 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800db2c:	2301      	movs	r3, #1
 800db2e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800db30:	697b      	ldr	r3, [r7, #20]
}
 800db32:	4618      	mov	r0, r3
 800db34:	3718      	adds	r7, #24
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	200004cc 	.word	0x200004cc
 800db40:	200004a8 	.word	0x200004a8
 800db44:	2000045c 	.word	0x2000045c
 800db48:	20000460 	.word	0x20000460
 800db4c:	200004bc 	.word	0x200004bc
 800db50:	200004c4 	.word	0x200004c4
 800db54:	200004ac 	.word	0x200004ac
 800db58:	200003a8 	.word	0x200003a8
 800db5c:	200003a4 	.word	0x200003a4
 800db60:	200004b4 	.word	0x200004b4
 800db64:	200004b8 	.word	0x200004b8

0800db68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b088      	sub	sp, #32
 800db6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800db6e:	4b3a      	ldr	r3, [pc, #232]	; (800dc58 <vTaskSwitchContext+0xf0>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d003      	beq.n	800db7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800db76:	4b39      	ldr	r3, [pc, #228]	; (800dc5c <vTaskSwitchContext+0xf4>)
 800db78:	2201      	movs	r2, #1
 800db7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800db7c:	e067      	b.n	800dc4e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800db7e:	4b37      	ldr	r3, [pc, #220]	; (800dc5c <vTaskSwitchContext+0xf4>)
 800db80:	2200      	movs	r2, #0
 800db82:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800db84:	4b36      	ldr	r3, [pc, #216]	; (800dc60 <vTaskSwitchContext+0xf8>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db8a:	61fb      	str	r3, [r7, #28]
 800db8c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800db90:	61bb      	str	r3, [r7, #24]
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	69ba      	ldr	r2, [r7, #24]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d111      	bne.n	800dbc0 <vTaskSwitchContext+0x58>
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	3304      	adds	r3, #4
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	69ba      	ldr	r2, [r7, #24]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d10b      	bne.n	800dbc0 <vTaskSwitchContext+0x58>
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	3308      	adds	r3, #8
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	69ba      	ldr	r2, [r7, #24]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d105      	bne.n	800dbc0 <vTaskSwitchContext+0x58>
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	330c      	adds	r3, #12
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	69ba      	ldr	r2, [r7, #24]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d008      	beq.n	800dbd2 <vTaskSwitchContext+0x6a>
 800dbc0:	4b27      	ldr	r3, [pc, #156]	; (800dc60 <vTaskSwitchContext+0xf8>)
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	4b26      	ldr	r3, [pc, #152]	; (800dc60 <vTaskSwitchContext+0xf8>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	3334      	adds	r3, #52	; 0x34
 800dbca:	4619      	mov	r1, r3
 800dbcc:	4610      	mov	r0, r2
 800dbce:	f7f2 fed2 	bl	8000976 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbd2:	4b24      	ldr	r3, [pc, #144]	; (800dc64 <vTaskSwitchContext+0xfc>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	fab3 f383 	clz	r3, r3
 800dbde:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dbe0:	7afb      	ldrb	r3, [r7, #11]
 800dbe2:	f1c3 031f 	rsb	r3, r3, #31
 800dbe6:	617b      	str	r3, [r7, #20]
 800dbe8:	491f      	ldr	r1, [pc, #124]	; (800dc68 <vTaskSwitchContext+0x100>)
 800dbea:	697a      	ldr	r2, [r7, #20]
 800dbec:	4613      	mov	r3, r2
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	4413      	add	r3, r2
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	440b      	add	r3, r1
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d10b      	bne.n	800dc14 <vTaskSwitchContext+0xac>
	__asm volatile
 800dbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc00:	b672      	cpsid	i
 800dc02:	f383 8811 	msr	BASEPRI, r3
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	b662      	cpsie	i
 800dc10:	607b      	str	r3, [r7, #4]
 800dc12:	e7fe      	b.n	800dc12 <vTaskSwitchContext+0xaa>
 800dc14:	697a      	ldr	r2, [r7, #20]
 800dc16:	4613      	mov	r3, r2
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	4413      	add	r3, r2
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	4a12      	ldr	r2, [pc, #72]	; (800dc68 <vTaskSwitchContext+0x100>)
 800dc20:	4413      	add	r3, r2
 800dc22:	613b      	str	r3, [r7, #16]
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	685a      	ldr	r2, [r3, #4]
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	605a      	str	r2, [r3, #4]
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	685a      	ldr	r2, [r3, #4]
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	3308      	adds	r3, #8
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d104      	bne.n	800dc44 <vTaskSwitchContext+0xdc>
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	685a      	ldr	r2, [r3, #4]
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	605a      	str	r2, [r3, #4]
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	685b      	ldr	r3, [r3, #4]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	4a05      	ldr	r2, [pc, #20]	; (800dc60 <vTaskSwitchContext+0xf8>)
 800dc4c:	6013      	str	r3, [r2, #0]
}
 800dc4e:	bf00      	nop
 800dc50:	3720      	adds	r7, #32
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	200004cc 	.word	0x200004cc
 800dc5c:	200004b8 	.word	0x200004b8
 800dc60:	200003a4 	.word	0x200003a4
 800dc64:	200004ac 	.word	0x200004ac
 800dc68:	200003a8 	.word	0x200003a8

0800dc6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d10b      	bne.n	800dc94 <vTaskPlaceOnEventList+0x28>
 800dc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc80:	b672      	cpsid	i
 800dc82:	f383 8811 	msr	BASEPRI, r3
 800dc86:	f3bf 8f6f 	isb	sy
 800dc8a:	f3bf 8f4f 	dsb	sy
 800dc8e:	b662      	cpsie	i
 800dc90:	60fb      	str	r3, [r7, #12]
 800dc92:	e7fe      	b.n	800dc92 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc94:	4b07      	ldr	r3, [pc, #28]	; (800dcb4 <vTaskPlaceOnEventList+0x48>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	3318      	adds	r3, #24
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f7fe fbba 	bl	800c416 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dca2:	2101      	movs	r1, #1
 800dca4:	6838      	ldr	r0, [r7, #0]
 800dca6:	f000 fb9d 	bl	800e3e4 <prvAddCurrentTaskToDelayedList>
}
 800dcaa:	bf00      	nop
 800dcac:	3710      	adds	r7, #16
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	200003a4 	.word	0x200003a4

0800dcb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b086      	sub	sp, #24
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d10b      	bne.n	800dce6 <xTaskRemoveFromEventList+0x2e>
 800dcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd2:	b672      	cpsid	i
 800dcd4:	f383 8811 	msr	BASEPRI, r3
 800dcd8:	f3bf 8f6f 	isb	sy
 800dcdc:	f3bf 8f4f 	dsb	sy
 800dce0:	b662      	cpsie	i
 800dce2:	60fb      	str	r3, [r7, #12]
 800dce4:	e7fe      	b.n	800dce4 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	3318      	adds	r3, #24
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fe fbcc 	bl	800c488 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcf0:	4b1d      	ldr	r3, [pc, #116]	; (800dd68 <xTaskRemoveFromEventList+0xb0>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d11c      	bne.n	800dd32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	3304      	adds	r3, #4
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7fe fbc3 	bl	800c488 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd06:	2201      	movs	r2, #1
 800dd08:	409a      	lsls	r2, r3
 800dd0a:	4b18      	ldr	r3, [pc, #96]	; (800dd6c <xTaskRemoveFromEventList+0xb4>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	4a16      	ldr	r2, [pc, #88]	; (800dd6c <xTaskRemoveFromEventList+0xb4>)
 800dd12:	6013      	str	r3, [r2, #0]
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd18:	4613      	mov	r3, r2
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	4413      	add	r3, r2
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	4a13      	ldr	r2, [pc, #76]	; (800dd70 <xTaskRemoveFromEventList+0xb8>)
 800dd22:	441a      	add	r2, r3
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	3304      	adds	r3, #4
 800dd28:	4619      	mov	r1, r3
 800dd2a:	4610      	mov	r0, r2
 800dd2c:	f7fe fb4f 	bl	800c3ce <vListInsertEnd>
 800dd30:	e005      	b.n	800dd3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	3318      	adds	r3, #24
 800dd36:	4619      	mov	r1, r3
 800dd38:	480e      	ldr	r0, [pc, #56]	; (800dd74 <xTaskRemoveFromEventList+0xbc>)
 800dd3a:	f7fe fb48 	bl	800c3ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd42:	4b0d      	ldr	r3, [pc, #52]	; (800dd78 <xTaskRemoveFromEventList+0xc0>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d905      	bls.n	800dd58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dd50:	4b0a      	ldr	r3, [pc, #40]	; (800dd7c <xTaskRemoveFromEventList+0xc4>)
 800dd52:	2201      	movs	r2, #1
 800dd54:	601a      	str	r2, [r3, #0]
 800dd56:	e001      	b.n	800dd5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dd5c:	697b      	ldr	r3, [r7, #20]
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3718      	adds	r7, #24
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	200004cc 	.word	0x200004cc
 800dd6c:	200004ac 	.word	0x200004ac
 800dd70:	200003a8 	.word	0x200003a8
 800dd74:	20000464 	.word	0x20000464
 800dd78:	200003a4 	.word	0x200003a4
 800dd7c:	200004b8 	.word	0x200004b8

0800dd80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dd88:	4b06      	ldr	r3, [pc, #24]	; (800dda4 <vTaskInternalSetTimeOutState+0x24>)
 800dd8a:	681a      	ldr	r2, [r3, #0]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd90:	4b05      	ldr	r3, [pc, #20]	; (800dda8 <vTaskInternalSetTimeOutState+0x28>)
 800dd92:	681a      	ldr	r2, [r3, #0]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	605a      	str	r2, [r3, #4]
}
 800dd98:	bf00      	nop
 800dd9a:	370c      	adds	r7, #12
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr
 800dda4:	200004bc 	.word	0x200004bc
 800dda8:	200004a8 	.word	0x200004a8

0800ddac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b088      	sub	sp, #32
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d10b      	bne.n	800ddd4 <xTaskCheckForTimeOut+0x28>
 800ddbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc0:	b672      	cpsid	i
 800ddc2:	f383 8811 	msr	BASEPRI, r3
 800ddc6:	f3bf 8f6f 	isb	sy
 800ddca:	f3bf 8f4f 	dsb	sy
 800ddce:	b662      	cpsie	i
 800ddd0:	613b      	str	r3, [r7, #16]
 800ddd2:	e7fe      	b.n	800ddd2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d10b      	bne.n	800ddf2 <xTaskCheckForTimeOut+0x46>
 800ddda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddde:	b672      	cpsid	i
 800dde0:	f383 8811 	msr	BASEPRI, r3
 800dde4:	f3bf 8f6f 	isb	sy
 800dde8:	f3bf 8f4f 	dsb	sy
 800ddec:	b662      	cpsie	i
 800ddee:	60fb      	str	r3, [r7, #12]
 800ddf0:	e7fe      	b.n	800ddf0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800ddf2:	f000 fc69 	bl	800e6c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ddf6:	4b1d      	ldr	r3, [pc, #116]	; (800de6c <xTaskCheckForTimeOut+0xc0>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	69ba      	ldr	r2, [r7, #24]
 800de02:	1ad3      	subs	r3, r2, r3
 800de04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de0e:	d102      	bne.n	800de16 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800de10:	2300      	movs	r3, #0
 800de12:	61fb      	str	r3, [r7, #28]
 800de14:	e023      	b.n	800de5e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	4b15      	ldr	r3, [pc, #84]	; (800de70 <xTaskCheckForTimeOut+0xc4>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d007      	beq.n	800de32 <xTaskCheckForTimeOut+0x86>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	69ba      	ldr	r2, [r7, #24]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d302      	bcc.n	800de32 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800de2c:	2301      	movs	r3, #1
 800de2e:	61fb      	str	r3, [r7, #28]
 800de30:	e015      	b.n	800de5e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	697a      	ldr	r2, [r7, #20]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d20b      	bcs.n	800de54 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	681a      	ldr	r2, [r3, #0]
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	1ad2      	subs	r2, r2, r3
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f7ff ff99 	bl	800dd80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800de4e:	2300      	movs	r3, #0
 800de50:	61fb      	str	r3, [r7, #28]
 800de52:	e004      	b.n	800de5e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	2200      	movs	r2, #0
 800de58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800de5a:	2301      	movs	r3, #1
 800de5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800de5e:	f000 fc65 	bl	800e72c <vPortExitCritical>

	return xReturn;
 800de62:	69fb      	ldr	r3, [r7, #28]
}
 800de64:	4618      	mov	r0, r3
 800de66:	3720      	adds	r7, #32
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	200004a8 	.word	0x200004a8
 800de70:	200004bc 	.word	0x200004bc

0800de74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800de74:	b480      	push	{r7}
 800de76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800de78:	4b03      	ldr	r3, [pc, #12]	; (800de88 <vTaskMissedYield+0x14>)
 800de7a:	2201      	movs	r2, #1
 800de7c:	601a      	str	r2, [r3, #0]
}
 800de7e:	bf00      	nop
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr
 800de88:	200004b8 	.word	0x200004b8

0800de8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800de94:	f000 f854 	bl	800df40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de98:	4b07      	ldr	r3, [pc, #28]	; (800deb8 <prvIdleTask+0x2c>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d907      	bls.n	800deb0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800dea0:	4b06      	ldr	r3, [pc, #24]	; (800debc <prvIdleTask+0x30>)
 800dea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dea6:	601a      	str	r2, [r3, #0]
 800dea8:	f3bf 8f4f 	dsb	sy
 800deac:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800deb0:	f7f2 fd5a 	bl	8000968 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800deb4:	e7ee      	b.n	800de94 <prvIdleTask+0x8>
 800deb6:	bf00      	nop
 800deb8:	200003a8 	.word	0x200003a8
 800debc:	e000ed04 	.word	0xe000ed04

0800dec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dec6:	2300      	movs	r3, #0
 800dec8:	607b      	str	r3, [r7, #4]
 800deca:	e00c      	b.n	800dee6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	4613      	mov	r3, r2
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	4413      	add	r3, r2
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	4a12      	ldr	r2, [pc, #72]	; (800df20 <prvInitialiseTaskLists+0x60>)
 800ded8:	4413      	add	r3, r2
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fe fa4a 	bl	800c374 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	3301      	adds	r3, #1
 800dee4:	607b      	str	r3, [r7, #4]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2b06      	cmp	r3, #6
 800deea:	d9ef      	bls.n	800decc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800deec:	480d      	ldr	r0, [pc, #52]	; (800df24 <prvInitialiseTaskLists+0x64>)
 800deee:	f7fe fa41 	bl	800c374 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800def2:	480d      	ldr	r0, [pc, #52]	; (800df28 <prvInitialiseTaskLists+0x68>)
 800def4:	f7fe fa3e 	bl	800c374 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800def8:	480c      	ldr	r0, [pc, #48]	; (800df2c <prvInitialiseTaskLists+0x6c>)
 800defa:	f7fe fa3b 	bl	800c374 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800defe:	480c      	ldr	r0, [pc, #48]	; (800df30 <prvInitialiseTaskLists+0x70>)
 800df00:	f7fe fa38 	bl	800c374 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800df04:	480b      	ldr	r0, [pc, #44]	; (800df34 <prvInitialiseTaskLists+0x74>)
 800df06:	f7fe fa35 	bl	800c374 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800df0a:	4b0b      	ldr	r3, [pc, #44]	; (800df38 <prvInitialiseTaskLists+0x78>)
 800df0c:	4a05      	ldr	r2, [pc, #20]	; (800df24 <prvInitialiseTaskLists+0x64>)
 800df0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800df10:	4b0a      	ldr	r3, [pc, #40]	; (800df3c <prvInitialiseTaskLists+0x7c>)
 800df12:	4a05      	ldr	r2, [pc, #20]	; (800df28 <prvInitialiseTaskLists+0x68>)
 800df14:	601a      	str	r2, [r3, #0]
}
 800df16:	bf00      	nop
 800df18:	3708      	adds	r7, #8
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	200003a8 	.word	0x200003a8
 800df24:	20000434 	.word	0x20000434
 800df28:	20000448 	.word	0x20000448
 800df2c:	20000464 	.word	0x20000464
 800df30:	20000478 	.word	0x20000478
 800df34:	20000490 	.word	0x20000490
 800df38:	2000045c 	.word	0x2000045c
 800df3c:	20000460 	.word	0x20000460

0800df40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df46:	e019      	b.n	800df7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800df48:	f000 fbbe 	bl	800e6c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df4c:	4b0f      	ldr	r3, [pc, #60]	; (800df8c <prvCheckTasksWaitingTermination+0x4c>)
 800df4e:	68db      	ldr	r3, [r3, #12]
 800df50:	68db      	ldr	r3, [r3, #12]
 800df52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	3304      	adds	r3, #4
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fe fa95 	bl	800c488 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800df5e:	4b0c      	ldr	r3, [pc, #48]	; (800df90 <prvCheckTasksWaitingTermination+0x50>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	3b01      	subs	r3, #1
 800df64:	4a0a      	ldr	r2, [pc, #40]	; (800df90 <prvCheckTasksWaitingTermination+0x50>)
 800df66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800df68:	4b0a      	ldr	r3, [pc, #40]	; (800df94 <prvCheckTasksWaitingTermination+0x54>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	3b01      	subs	r3, #1
 800df6e:	4a09      	ldr	r2, [pc, #36]	; (800df94 <prvCheckTasksWaitingTermination+0x54>)
 800df70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800df72:	f000 fbdb 	bl	800e72c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 f80e 	bl	800df98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df7c:	4b05      	ldr	r3, [pc, #20]	; (800df94 <prvCheckTasksWaitingTermination+0x54>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d1e1      	bne.n	800df48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800df84:	bf00      	nop
 800df86:	3708      	adds	r7, #8
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	20000478 	.word	0x20000478
 800df90:	200004a4 	.word	0x200004a4
 800df94:	2000048c 	.word	0x2000048c

0800df98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d108      	bne.n	800dfbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f000 fd78 	bl	800eaa4 <vPortFree>
				vPortFree( pxTCB );
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 fd75 	bl	800eaa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dfba:	e019      	b.n	800dff0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d103      	bne.n	800dfce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 fd6c 	bl	800eaa4 <vPortFree>
	}
 800dfcc:	e010      	b.n	800dff0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dfd4:	2b02      	cmp	r3, #2
 800dfd6:	d00b      	beq.n	800dff0 <prvDeleteTCB+0x58>
 800dfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfdc:	b672      	cpsid	i
 800dfde:	f383 8811 	msr	BASEPRI, r3
 800dfe2:	f3bf 8f6f 	isb	sy
 800dfe6:	f3bf 8f4f 	dsb	sy
 800dfea:	b662      	cpsie	i
 800dfec:	60fb      	str	r3, [r7, #12]
 800dfee:	e7fe      	b.n	800dfee <prvDeleteTCB+0x56>
	}
 800dff0:	bf00      	nop
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dffe:	4b0c      	ldr	r3, [pc, #48]	; (800e030 <prvResetNextTaskUnblockTime+0x38>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d104      	bne.n	800e012 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e008:	4b0a      	ldr	r3, [pc, #40]	; (800e034 <prvResetNextTaskUnblockTime+0x3c>)
 800e00a:	f04f 32ff 	mov.w	r2, #4294967295
 800e00e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e010:	e008      	b.n	800e024 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e012:	4b07      	ldr	r3, [pc, #28]	; (800e030 <prvResetNextTaskUnblockTime+0x38>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	4a04      	ldr	r2, [pc, #16]	; (800e034 <prvResetNextTaskUnblockTime+0x3c>)
 800e022:	6013      	str	r3, [r2, #0]
}
 800e024:	bf00      	nop
 800e026:	370c      	adds	r7, #12
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr
 800e030:	2000045c 	.word	0x2000045c
 800e034:	200004c4 	.word	0x200004c4

0800e038 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e03e:	4b0b      	ldr	r3, [pc, #44]	; (800e06c <xTaskGetSchedulerState+0x34>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d102      	bne.n	800e04c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e046:	2301      	movs	r3, #1
 800e048:	607b      	str	r3, [r7, #4]
 800e04a:	e008      	b.n	800e05e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e04c:	4b08      	ldr	r3, [pc, #32]	; (800e070 <xTaskGetSchedulerState+0x38>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d102      	bne.n	800e05a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e054:	2302      	movs	r3, #2
 800e056:	607b      	str	r3, [r7, #4]
 800e058:	e001      	b.n	800e05e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e05a:	2300      	movs	r3, #0
 800e05c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e05e:	687b      	ldr	r3, [r7, #4]
	}
 800e060:	4618      	mov	r0, r3
 800e062:	370c      	adds	r7, #12
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr
 800e06c:	200004b0 	.word	0x200004b0
 800e070:	200004cc 	.word	0x200004cc

0800e074 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e074:	b580      	push	{r7, lr}
 800e076:	b084      	sub	sp, #16
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e080:	2300      	movs	r3, #0
 800e082:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d069      	beq.n	800e15e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e08e:	4b36      	ldr	r3, [pc, #216]	; (800e168 <xTaskPriorityInherit+0xf4>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e094:	429a      	cmp	r2, r3
 800e096:	d259      	bcs.n	800e14c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	699b      	ldr	r3, [r3, #24]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	db06      	blt.n	800e0ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0a0:	4b31      	ldr	r3, [pc, #196]	; (800e168 <xTaskPriorityInherit+0xf4>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a6:	f1c3 0207 	rsb	r2, r3, #7
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	6959      	ldr	r1, [r3, #20]
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b6:	4613      	mov	r3, r2
 800e0b8:	009b      	lsls	r3, r3, #2
 800e0ba:	4413      	add	r3, r2
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	4a2b      	ldr	r2, [pc, #172]	; (800e16c <xTaskPriorityInherit+0xf8>)
 800e0c0:	4413      	add	r3, r2
 800e0c2:	4299      	cmp	r1, r3
 800e0c4:	d13a      	bne.n	800e13c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	3304      	adds	r3, #4
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7fe f9dc 	bl	800c488 <uxListRemove>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d115      	bne.n	800e102 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0da:	4924      	ldr	r1, [pc, #144]	; (800e16c <xTaskPriorityInherit+0xf8>)
 800e0dc:	4613      	mov	r3, r2
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	4413      	add	r3, r2
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	440b      	add	r3, r1
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d10a      	bne.n	800e102 <xTaskPriorityInherit+0x8e>
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e0f6:	43da      	mvns	r2, r3
 800e0f8:	4b1d      	ldr	r3, [pc, #116]	; (800e170 <xTaskPriorityInherit+0xfc>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4013      	ands	r3, r2
 800e0fe:	4a1c      	ldr	r2, [pc, #112]	; (800e170 <xTaskPriorityInherit+0xfc>)
 800e100:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e102:	4b19      	ldr	r3, [pc, #100]	; (800e168 <xTaskPriorityInherit+0xf4>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e110:	2201      	movs	r2, #1
 800e112:	409a      	lsls	r2, r3
 800e114:	4b16      	ldr	r3, [pc, #88]	; (800e170 <xTaskPriorityInherit+0xfc>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4313      	orrs	r3, r2
 800e11a:	4a15      	ldr	r2, [pc, #84]	; (800e170 <xTaskPriorityInherit+0xfc>)
 800e11c:	6013      	str	r3, [r2, #0]
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e122:	4613      	mov	r3, r2
 800e124:	009b      	lsls	r3, r3, #2
 800e126:	4413      	add	r3, r2
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	4a10      	ldr	r2, [pc, #64]	; (800e16c <xTaskPriorityInherit+0xf8>)
 800e12c:	441a      	add	r2, r3
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	3304      	adds	r3, #4
 800e132:	4619      	mov	r1, r3
 800e134:	4610      	mov	r0, r2
 800e136:	f7fe f94a 	bl	800c3ce <vListInsertEnd>
 800e13a:	e004      	b.n	800e146 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e13c:	4b0a      	ldr	r3, [pc, #40]	; (800e168 <xTaskPriorityInherit+0xf4>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e146:	2301      	movs	r3, #1
 800e148:	60fb      	str	r3, [r7, #12]
 800e14a:	e008      	b.n	800e15e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e150:	4b05      	ldr	r3, [pc, #20]	; (800e168 <xTaskPriorityInherit+0xf4>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e156:	429a      	cmp	r2, r3
 800e158:	d201      	bcs.n	800e15e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e15a:	2301      	movs	r3, #1
 800e15c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e15e:	68fb      	ldr	r3, [r7, #12]
	}
 800e160:	4618      	mov	r0, r3
 800e162:	3710      	adds	r7, #16
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	200003a4 	.word	0x200003a4
 800e16c:	200003a8 	.word	0x200003a8
 800e170:	200004ac 	.word	0x200004ac

0800e174 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e174:	b580      	push	{r7, lr}
 800e176:	b086      	sub	sp, #24
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e180:	2300      	movs	r3, #0
 800e182:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d070      	beq.n	800e26c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e18a:	4b3b      	ldr	r3, [pc, #236]	; (800e278 <xTaskPriorityDisinherit+0x104>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	693a      	ldr	r2, [r7, #16]
 800e190:	429a      	cmp	r2, r3
 800e192:	d00b      	beq.n	800e1ac <xTaskPriorityDisinherit+0x38>
 800e194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e198:	b672      	cpsid	i
 800e19a:	f383 8811 	msr	BASEPRI, r3
 800e19e:	f3bf 8f6f 	isb	sy
 800e1a2:	f3bf 8f4f 	dsb	sy
 800e1a6:	b662      	cpsie	i
 800e1a8:	60fb      	str	r3, [r7, #12]
 800e1aa:	e7fe      	b.n	800e1aa <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d10b      	bne.n	800e1cc <xTaskPriorityDisinherit+0x58>
 800e1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b8:	b672      	cpsid	i
 800e1ba:	f383 8811 	msr	BASEPRI, r3
 800e1be:	f3bf 8f6f 	isb	sy
 800e1c2:	f3bf 8f4f 	dsb	sy
 800e1c6:	b662      	cpsie	i
 800e1c8:	60bb      	str	r3, [r7, #8]
 800e1ca:	e7fe      	b.n	800e1ca <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1d0:	1e5a      	subs	r2, r3, #1
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d044      	beq.n	800e26c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d140      	bne.n	800e26c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	3304      	adds	r3, #4
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fe f94a 	bl	800c488 <uxListRemove>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d115      	bne.n	800e226 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1fe:	491f      	ldr	r1, [pc, #124]	; (800e27c <xTaskPriorityDisinherit+0x108>)
 800e200:	4613      	mov	r3, r2
 800e202:	009b      	lsls	r3, r3, #2
 800e204:	4413      	add	r3, r2
 800e206:	009b      	lsls	r3, r3, #2
 800e208:	440b      	add	r3, r1
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d10a      	bne.n	800e226 <xTaskPriorityDisinherit+0xb2>
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e214:	2201      	movs	r2, #1
 800e216:	fa02 f303 	lsl.w	r3, r2, r3
 800e21a:	43da      	mvns	r2, r3
 800e21c:	4b18      	ldr	r3, [pc, #96]	; (800e280 <xTaskPriorityDisinherit+0x10c>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4013      	ands	r3, r2
 800e222:	4a17      	ldr	r2, [pc, #92]	; (800e280 <xTaskPriorityDisinherit+0x10c>)
 800e224:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e232:	f1c3 0207 	rsb	r2, r3, #7
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e23e:	2201      	movs	r2, #1
 800e240:	409a      	lsls	r2, r3
 800e242:	4b0f      	ldr	r3, [pc, #60]	; (800e280 <xTaskPriorityDisinherit+0x10c>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4313      	orrs	r3, r2
 800e248:	4a0d      	ldr	r2, [pc, #52]	; (800e280 <xTaskPriorityDisinherit+0x10c>)
 800e24a:	6013      	str	r3, [r2, #0]
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e250:	4613      	mov	r3, r2
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	4413      	add	r3, r2
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	4a08      	ldr	r2, [pc, #32]	; (800e27c <xTaskPriorityDisinherit+0x108>)
 800e25a:	441a      	add	r2, r3
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	3304      	adds	r3, #4
 800e260:	4619      	mov	r1, r3
 800e262:	4610      	mov	r0, r2
 800e264:	f7fe f8b3 	bl	800c3ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e268:	2301      	movs	r3, #1
 800e26a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e26c:	697b      	ldr	r3, [r7, #20]
	}
 800e26e:	4618      	mov	r0, r3
 800e270:	3718      	adds	r7, #24
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	200003a4 	.word	0x200003a4
 800e27c:	200003a8 	.word	0x200003a8
 800e280:	200004ac 	.word	0x200004ac

0800e284 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e284:	b580      	push	{r7, lr}
 800e286:	b088      	sub	sp, #32
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e292:	2301      	movs	r3, #1
 800e294:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	f000 8085 	beq.w	800e3a8 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e29e:	69bb      	ldr	r3, [r7, #24]
 800e2a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d10b      	bne.n	800e2be <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800e2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2aa:	b672      	cpsid	i
 800e2ac:	f383 8811 	msr	BASEPRI, r3
 800e2b0:	f3bf 8f6f 	isb	sy
 800e2b4:	f3bf 8f4f 	dsb	sy
 800e2b8:	b662      	cpsie	i
 800e2ba:	60fb      	str	r3, [r7, #12]
 800e2bc:	e7fe      	b.n	800e2bc <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e2be:	69bb      	ldr	r3, [r7, #24]
 800e2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2c2:	683a      	ldr	r2, [r7, #0]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d902      	bls.n	800e2ce <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	61fb      	str	r3, [r7, #28]
 800e2cc:	e002      	b.n	800e2d4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e2d4:	69bb      	ldr	r3, [r7, #24]
 800e2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d8:	69fa      	ldr	r2, [r7, #28]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d064      	beq.n	800e3a8 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e2de:	69bb      	ldr	r3, [r7, #24]
 800e2e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2e2:	697a      	ldr	r2, [r7, #20]
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d15f      	bne.n	800e3a8 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e2e8:	4b31      	ldr	r3, [pc, #196]	; (800e3b0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	69ba      	ldr	r2, [r7, #24]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d10b      	bne.n	800e30a <vTaskPriorityDisinheritAfterTimeout+0x86>
 800e2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f6:	b672      	cpsid	i
 800e2f8:	f383 8811 	msr	BASEPRI, r3
 800e2fc:	f3bf 8f6f 	isb	sy
 800e300:	f3bf 8f4f 	dsb	sy
 800e304:	b662      	cpsie	i
 800e306:	60bb      	str	r3, [r7, #8]
 800e308:	e7fe      	b.n	800e308 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e30a:	69bb      	ldr	r3, [r7, #24]
 800e30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e30e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e310:	69bb      	ldr	r3, [r7, #24]
 800e312:	69fa      	ldr	r2, [r7, #28]
 800e314:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e316:	69bb      	ldr	r3, [r7, #24]
 800e318:	699b      	ldr	r3, [r3, #24]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	db04      	blt.n	800e328 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e31e:	69fb      	ldr	r3, [r7, #28]
 800e320:	f1c3 0207 	rsb	r2, r3, #7
 800e324:	69bb      	ldr	r3, [r7, #24]
 800e326:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e328:	69bb      	ldr	r3, [r7, #24]
 800e32a:	6959      	ldr	r1, [r3, #20]
 800e32c:	693a      	ldr	r2, [r7, #16]
 800e32e:	4613      	mov	r3, r2
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	4413      	add	r3, r2
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	4a1f      	ldr	r2, [pc, #124]	; (800e3b4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e338:	4413      	add	r3, r2
 800e33a:	4299      	cmp	r1, r3
 800e33c:	d134      	bne.n	800e3a8 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e33e:	69bb      	ldr	r3, [r7, #24]
 800e340:	3304      	adds	r3, #4
 800e342:	4618      	mov	r0, r3
 800e344:	f7fe f8a0 	bl	800c488 <uxListRemove>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d115      	bne.n	800e37a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e34e:	69bb      	ldr	r3, [r7, #24]
 800e350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e352:	4918      	ldr	r1, [pc, #96]	; (800e3b4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e354:	4613      	mov	r3, r2
 800e356:	009b      	lsls	r3, r3, #2
 800e358:	4413      	add	r3, r2
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	440b      	add	r3, r1
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d10a      	bne.n	800e37a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800e364:	69bb      	ldr	r3, [r7, #24]
 800e366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e368:	2201      	movs	r2, #1
 800e36a:	fa02 f303 	lsl.w	r3, r2, r3
 800e36e:	43da      	mvns	r2, r3
 800e370:	4b11      	ldr	r3, [pc, #68]	; (800e3b8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	4013      	ands	r3, r2
 800e376:	4a10      	ldr	r2, [pc, #64]	; (800e3b8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e378:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e37a:	69bb      	ldr	r3, [r7, #24]
 800e37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e37e:	2201      	movs	r2, #1
 800e380:	409a      	lsls	r2, r3
 800e382:	4b0d      	ldr	r3, [pc, #52]	; (800e3b8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4313      	orrs	r3, r2
 800e388:	4a0b      	ldr	r2, [pc, #44]	; (800e3b8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e38a:	6013      	str	r3, [r2, #0]
 800e38c:	69bb      	ldr	r3, [r7, #24]
 800e38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e390:	4613      	mov	r3, r2
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	4413      	add	r3, r2
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	4a06      	ldr	r2, [pc, #24]	; (800e3b4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e39a:	441a      	add	r2, r3
 800e39c:	69bb      	ldr	r3, [r7, #24]
 800e39e:	3304      	adds	r3, #4
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	4610      	mov	r0, r2
 800e3a4:	f7fe f813 	bl	800c3ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e3a8:	bf00      	nop
 800e3aa:	3720      	adds	r7, #32
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	200003a4 	.word	0x200003a4
 800e3b4:	200003a8 	.word	0x200003a8
 800e3b8:	200004ac 	.word	0x200004ac

0800e3bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e3bc:	b480      	push	{r7}
 800e3be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e3c0:	4b07      	ldr	r3, [pc, #28]	; (800e3e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d004      	beq.n	800e3d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e3c8:	4b05      	ldr	r3, [pc, #20]	; (800e3e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3ce:	3201      	adds	r2, #1
 800e3d0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e3d2:	4b03      	ldr	r3, [pc, #12]	; (800e3e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
	}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr
 800e3e0:	200003a4 	.word	0x200003a4

0800e3e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e3ee:	4b29      	ldr	r3, [pc, #164]	; (800e494 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3f4:	4b28      	ldr	r3, [pc, #160]	; (800e498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	3304      	adds	r3, #4
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fe f844 	bl	800c488 <uxListRemove>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d10b      	bne.n	800e41e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e406:	4b24      	ldr	r3, [pc, #144]	; (800e498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e40c:	2201      	movs	r2, #1
 800e40e:	fa02 f303 	lsl.w	r3, r2, r3
 800e412:	43da      	mvns	r2, r3
 800e414:	4b21      	ldr	r3, [pc, #132]	; (800e49c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4013      	ands	r3, r2
 800e41a:	4a20      	ldr	r2, [pc, #128]	; (800e49c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e41c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e424:	d10a      	bne.n	800e43c <prvAddCurrentTaskToDelayedList+0x58>
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d007      	beq.n	800e43c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e42c:	4b1a      	ldr	r3, [pc, #104]	; (800e498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	3304      	adds	r3, #4
 800e432:	4619      	mov	r1, r3
 800e434:	481a      	ldr	r0, [pc, #104]	; (800e4a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e436:	f7fd ffca 	bl	800c3ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e43a:	e026      	b.n	800e48a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	4413      	add	r3, r2
 800e442:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e444:	4b14      	ldr	r3, [pc, #80]	; (800e498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	68ba      	ldr	r2, [r7, #8]
 800e44a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e44c:	68ba      	ldr	r2, [r7, #8]
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	429a      	cmp	r2, r3
 800e452:	d209      	bcs.n	800e468 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e454:	4b13      	ldr	r3, [pc, #76]	; (800e4a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	4b0f      	ldr	r3, [pc, #60]	; (800e498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	3304      	adds	r3, #4
 800e45e:	4619      	mov	r1, r3
 800e460:	4610      	mov	r0, r2
 800e462:	f7fd ffd8 	bl	800c416 <vListInsert>
}
 800e466:	e010      	b.n	800e48a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e468:	4b0f      	ldr	r3, [pc, #60]	; (800e4a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	4b0a      	ldr	r3, [pc, #40]	; (800e498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	3304      	adds	r3, #4
 800e472:	4619      	mov	r1, r3
 800e474:	4610      	mov	r0, r2
 800e476:	f7fd ffce 	bl	800c416 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e47a:	4b0c      	ldr	r3, [pc, #48]	; (800e4ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	68ba      	ldr	r2, [r7, #8]
 800e480:	429a      	cmp	r2, r3
 800e482:	d202      	bcs.n	800e48a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e484:	4a09      	ldr	r2, [pc, #36]	; (800e4ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	6013      	str	r3, [r2, #0]
}
 800e48a:	bf00      	nop
 800e48c:	3710      	adds	r7, #16
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	200004a8 	.word	0x200004a8
 800e498:	200003a4 	.word	0x200003a4
 800e49c:	200004ac 	.word	0x200004ac
 800e4a0:	20000490 	.word	0x20000490
 800e4a4:	20000460 	.word	0x20000460
 800e4a8:	2000045c 	.word	0x2000045c
 800e4ac:	200004c4 	.word	0x200004c4

0800e4b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b085      	sub	sp, #20
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	60f8      	str	r0, [r7, #12]
 800e4b8:	60b9      	str	r1, [r7, #8]
 800e4ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	3b04      	subs	r3, #4
 800e4c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e4c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	3b04      	subs	r3, #4
 800e4ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	f023 0201 	bic.w	r2, r3, #1
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	3b04      	subs	r3, #4
 800e4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e4e0:	4a0c      	ldr	r2, [pc, #48]	; (800e514 <pxPortInitialiseStack+0x64>)
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	3b14      	subs	r3, #20
 800e4ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	3b04      	subs	r3, #4
 800e4f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f06f 0202 	mvn.w	r2, #2
 800e4fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	3b20      	subs	r3, #32
 800e504:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e506:	68fb      	ldr	r3, [r7, #12]
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3714      	adds	r7, #20
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr
 800e514:	0800e519 	.word	0x0800e519

0800e518 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e518:	b480      	push	{r7}
 800e51a:	b085      	sub	sp, #20
 800e51c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e51e:	2300      	movs	r3, #0
 800e520:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e522:	4b13      	ldr	r3, [pc, #76]	; (800e570 <prvTaskExitError+0x58>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e52a:	d00b      	beq.n	800e544 <prvTaskExitError+0x2c>
 800e52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e530:	b672      	cpsid	i
 800e532:	f383 8811 	msr	BASEPRI, r3
 800e536:	f3bf 8f6f 	isb	sy
 800e53a:	f3bf 8f4f 	dsb	sy
 800e53e:	b662      	cpsie	i
 800e540:	60fb      	str	r3, [r7, #12]
 800e542:	e7fe      	b.n	800e542 <prvTaskExitError+0x2a>
 800e544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e548:	b672      	cpsid	i
 800e54a:	f383 8811 	msr	BASEPRI, r3
 800e54e:	f3bf 8f6f 	isb	sy
 800e552:	f3bf 8f4f 	dsb	sy
 800e556:	b662      	cpsie	i
 800e558:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e55a:	bf00      	nop
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d0fc      	beq.n	800e55c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e562:	bf00      	nop
 800e564:	3714      	adds	r7, #20
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr
 800e56e:	bf00      	nop
 800e570:	20000038 	.word	0x20000038
	...

0800e580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e580:	4b07      	ldr	r3, [pc, #28]	; (800e5a0 <pxCurrentTCBConst2>)
 800e582:	6819      	ldr	r1, [r3, #0]
 800e584:	6808      	ldr	r0, [r1, #0]
 800e586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e58a:	f380 8809 	msr	PSP, r0
 800e58e:	f3bf 8f6f 	isb	sy
 800e592:	f04f 0000 	mov.w	r0, #0
 800e596:	f380 8811 	msr	BASEPRI, r0
 800e59a:	4770      	bx	lr
 800e59c:	f3af 8000 	nop.w

0800e5a0 <pxCurrentTCBConst2>:
 800e5a0:	200003a4 	.word	0x200003a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e5a4:	bf00      	nop
 800e5a6:	bf00      	nop

0800e5a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e5a8:	4808      	ldr	r0, [pc, #32]	; (800e5cc <prvPortStartFirstTask+0x24>)
 800e5aa:	6800      	ldr	r0, [r0, #0]
 800e5ac:	6800      	ldr	r0, [r0, #0]
 800e5ae:	f380 8808 	msr	MSP, r0
 800e5b2:	f04f 0000 	mov.w	r0, #0
 800e5b6:	f380 8814 	msr	CONTROL, r0
 800e5ba:	b662      	cpsie	i
 800e5bc:	b661      	cpsie	f
 800e5be:	f3bf 8f4f 	dsb	sy
 800e5c2:	f3bf 8f6f 	isb	sy
 800e5c6:	df00      	svc	0
 800e5c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e5ca:	bf00      	nop
 800e5cc:	e000ed08 	.word	0xe000ed08

0800e5d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b084      	sub	sp, #16
 800e5d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e5d6:	4b36      	ldr	r3, [pc, #216]	; (800e6b0 <xPortStartScheduler+0xe0>)
 800e5d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	22ff      	movs	r2, #255	; 0xff
 800e5e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e5f0:	78fb      	ldrb	r3, [r7, #3]
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	4b2e      	ldr	r3, [pc, #184]	; (800e6b4 <xPortStartScheduler+0xe4>)
 800e5fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e5fe:	4b2e      	ldr	r3, [pc, #184]	; (800e6b8 <xPortStartScheduler+0xe8>)
 800e600:	2207      	movs	r2, #7
 800e602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e604:	e009      	b.n	800e61a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e606:	4b2c      	ldr	r3, [pc, #176]	; (800e6b8 <xPortStartScheduler+0xe8>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	3b01      	subs	r3, #1
 800e60c:	4a2a      	ldr	r2, [pc, #168]	; (800e6b8 <xPortStartScheduler+0xe8>)
 800e60e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e610:	78fb      	ldrb	r3, [r7, #3]
 800e612:	b2db      	uxtb	r3, r3
 800e614:	005b      	lsls	r3, r3, #1
 800e616:	b2db      	uxtb	r3, r3
 800e618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e61a:	78fb      	ldrb	r3, [r7, #3]
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e622:	2b80      	cmp	r3, #128	; 0x80
 800e624:	d0ef      	beq.n	800e606 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e626:	4b24      	ldr	r3, [pc, #144]	; (800e6b8 <xPortStartScheduler+0xe8>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f1c3 0307 	rsb	r3, r3, #7
 800e62e:	2b04      	cmp	r3, #4
 800e630:	d00b      	beq.n	800e64a <xPortStartScheduler+0x7a>
 800e632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e636:	b672      	cpsid	i
 800e638:	f383 8811 	msr	BASEPRI, r3
 800e63c:	f3bf 8f6f 	isb	sy
 800e640:	f3bf 8f4f 	dsb	sy
 800e644:	b662      	cpsie	i
 800e646:	60bb      	str	r3, [r7, #8]
 800e648:	e7fe      	b.n	800e648 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e64a:	4b1b      	ldr	r3, [pc, #108]	; (800e6b8 <xPortStartScheduler+0xe8>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	021b      	lsls	r3, r3, #8
 800e650:	4a19      	ldr	r2, [pc, #100]	; (800e6b8 <xPortStartScheduler+0xe8>)
 800e652:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e654:	4b18      	ldr	r3, [pc, #96]	; (800e6b8 <xPortStartScheduler+0xe8>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e65c:	4a16      	ldr	r2, [pc, #88]	; (800e6b8 <xPortStartScheduler+0xe8>)
 800e65e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	b2da      	uxtb	r2, r3
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e668:	4b14      	ldr	r3, [pc, #80]	; (800e6bc <xPortStartScheduler+0xec>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4a13      	ldr	r2, [pc, #76]	; (800e6bc <xPortStartScheduler+0xec>)
 800e66e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e672:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e674:	4b11      	ldr	r3, [pc, #68]	; (800e6bc <xPortStartScheduler+0xec>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4a10      	ldr	r2, [pc, #64]	; (800e6bc <xPortStartScheduler+0xec>)
 800e67a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e67e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e680:	f000 f8d4 	bl	800e82c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e684:	4b0e      	ldr	r3, [pc, #56]	; (800e6c0 <xPortStartScheduler+0xf0>)
 800e686:	2200      	movs	r2, #0
 800e688:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e68a:	f000 f8f3 	bl	800e874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e68e:	4b0d      	ldr	r3, [pc, #52]	; (800e6c4 <xPortStartScheduler+0xf4>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	4a0c      	ldr	r2, [pc, #48]	; (800e6c4 <xPortStartScheduler+0xf4>)
 800e694:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e698:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e69a:	f7ff ff85 	bl	800e5a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e69e:	f7ff fa63 	bl	800db68 <vTaskSwitchContext>
	prvTaskExitError();
 800e6a2:	f7ff ff39 	bl	800e518 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e6a6:	2300      	movs	r3, #0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3710      	adds	r7, #16
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	e000e400 	.word	0xe000e400
 800e6b4:	200004d0 	.word	0x200004d0
 800e6b8:	200004d4 	.word	0x200004d4
 800e6bc:	e000ed20 	.word	0xe000ed20
 800e6c0:	20000038 	.word	0x20000038
 800e6c4:	e000ef34 	.word	0xe000ef34

0800e6c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d2:	b672      	cpsid	i
 800e6d4:	f383 8811 	msr	BASEPRI, r3
 800e6d8:	f3bf 8f6f 	isb	sy
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	b662      	cpsie	i
 800e6e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e6e4:	4b0f      	ldr	r3, [pc, #60]	; (800e724 <vPortEnterCritical+0x5c>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	4a0e      	ldr	r2, [pc, #56]	; (800e724 <vPortEnterCritical+0x5c>)
 800e6ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e6ee:	4b0d      	ldr	r3, [pc, #52]	; (800e724 <vPortEnterCritical+0x5c>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d110      	bne.n	800e718 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e6f6:	4b0c      	ldr	r3, [pc, #48]	; (800e728 <vPortEnterCritical+0x60>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d00b      	beq.n	800e718 <vPortEnterCritical+0x50>
 800e700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e704:	b672      	cpsid	i
 800e706:	f383 8811 	msr	BASEPRI, r3
 800e70a:	f3bf 8f6f 	isb	sy
 800e70e:	f3bf 8f4f 	dsb	sy
 800e712:	b662      	cpsie	i
 800e714:	603b      	str	r3, [r7, #0]
 800e716:	e7fe      	b.n	800e716 <vPortEnterCritical+0x4e>
	}
}
 800e718:	bf00      	nop
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr
 800e724:	20000038 	.word	0x20000038
 800e728:	e000ed04 	.word	0xe000ed04

0800e72c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e732:	4b12      	ldr	r3, [pc, #72]	; (800e77c <vPortExitCritical+0x50>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d10b      	bne.n	800e752 <vPortExitCritical+0x26>
 800e73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73e:	b672      	cpsid	i
 800e740:	f383 8811 	msr	BASEPRI, r3
 800e744:	f3bf 8f6f 	isb	sy
 800e748:	f3bf 8f4f 	dsb	sy
 800e74c:	b662      	cpsie	i
 800e74e:	607b      	str	r3, [r7, #4]
 800e750:	e7fe      	b.n	800e750 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800e752:	4b0a      	ldr	r3, [pc, #40]	; (800e77c <vPortExitCritical+0x50>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	3b01      	subs	r3, #1
 800e758:	4a08      	ldr	r2, [pc, #32]	; (800e77c <vPortExitCritical+0x50>)
 800e75a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e75c:	4b07      	ldr	r3, [pc, #28]	; (800e77c <vPortExitCritical+0x50>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d104      	bne.n	800e76e <vPortExitCritical+0x42>
 800e764:	2300      	movs	r3, #0
 800e766:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e76e:	bf00      	nop
 800e770:	370c      	adds	r7, #12
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr
 800e77a:	bf00      	nop
 800e77c:	20000038 	.word	0x20000038

0800e780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e780:	f3ef 8009 	mrs	r0, PSP
 800e784:	f3bf 8f6f 	isb	sy
 800e788:	4b15      	ldr	r3, [pc, #84]	; (800e7e0 <pxCurrentTCBConst>)
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	f01e 0f10 	tst.w	lr, #16
 800e790:	bf08      	it	eq
 800e792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79a:	6010      	str	r0, [r2, #0]
 800e79c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e7a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e7a4:	b672      	cpsid	i
 800e7a6:	f380 8811 	msr	BASEPRI, r0
 800e7aa:	f3bf 8f4f 	dsb	sy
 800e7ae:	f3bf 8f6f 	isb	sy
 800e7b2:	b662      	cpsie	i
 800e7b4:	f7ff f9d8 	bl	800db68 <vTaskSwitchContext>
 800e7b8:	f04f 0000 	mov.w	r0, #0
 800e7bc:	f380 8811 	msr	BASEPRI, r0
 800e7c0:	bc09      	pop	{r0, r3}
 800e7c2:	6819      	ldr	r1, [r3, #0]
 800e7c4:	6808      	ldr	r0, [r1, #0]
 800e7c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ca:	f01e 0f10 	tst.w	lr, #16
 800e7ce:	bf08      	it	eq
 800e7d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e7d4:	f380 8809 	msr	PSP, r0
 800e7d8:	f3bf 8f6f 	isb	sy
 800e7dc:	4770      	bx	lr
 800e7de:	bf00      	nop

0800e7e0 <pxCurrentTCBConst>:
 800e7e0:	200003a4 	.word	0x200003a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e7e4:	bf00      	nop
 800e7e6:	bf00      	nop

0800e7e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f2:	b672      	cpsid	i
 800e7f4:	f383 8811 	msr	BASEPRI, r3
 800e7f8:	f3bf 8f6f 	isb	sy
 800e7fc:	f3bf 8f4f 	dsb	sy
 800e800:	b662      	cpsie	i
 800e802:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e804:	f7ff f8f6 	bl	800d9f4 <xTaskIncrementTick>
 800e808:	4603      	mov	r3, r0
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d003      	beq.n	800e816 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e80e:	4b06      	ldr	r3, [pc, #24]	; (800e828 <SysTick_Handler+0x40>)
 800e810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e814:	601a      	str	r2, [r3, #0]
 800e816:	2300      	movs	r3, #0
 800e818:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e820:	bf00      	nop
 800e822:	3708      	adds	r7, #8
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	e000ed04 	.word	0xe000ed04

0800e82c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e82c:	b480      	push	{r7}
 800e82e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e830:	4b0b      	ldr	r3, [pc, #44]	; (800e860 <vPortSetupTimerInterrupt+0x34>)
 800e832:	2200      	movs	r2, #0
 800e834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e836:	4b0b      	ldr	r3, [pc, #44]	; (800e864 <vPortSetupTimerInterrupt+0x38>)
 800e838:	2200      	movs	r2, #0
 800e83a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e83c:	4b0a      	ldr	r3, [pc, #40]	; (800e868 <vPortSetupTimerInterrupt+0x3c>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4a0a      	ldr	r2, [pc, #40]	; (800e86c <vPortSetupTimerInterrupt+0x40>)
 800e842:	fba2 2303 	umull	r2, r3, r2, r3
 800e846:	099b      	lsrs	r3, r3, #6
 800e848:	4a09      	ldr	r2, [pc, #36]	; (800e870 <vPortSetupTimerInterrupt+0x44>)
 800e84a:	3b01      	subs	r3, #1
 800e84c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e84e:	4b04      	ldr	r3, [pc, #16]	; (800e860 <vPortSetupTimerInterrupt+0x34>)
 800e850:	2207      	movs	r2, #7
 800e852:	601a      	str	r2, [r3, #0]
}
 800e854:	bf00      	nop
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop
 800e860:	e000e010 	.word	0xe000e010
 800e864:	e000e018 	.word	0xe000e018
 800e868:	2000002c 	.word	0x2000002c
 800e86c:	10624dd3 	.word	0x10624dd3
 800e870:	e000e014 	.word	0xe000e014

0800e874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e884 <vPortEnableVFP+0x10>
 800e878:	6801      	ldr	r1, [r0, #0]
 800e87a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e87e:	6001      	str	r1, [r0, #0]
 800e880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e882:	bf00      	nop
 800e884:	e000ed88 	.word	0xe000ed88

0800e888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e888:	b480      	push	{r7}
 800e88a:	b085      	sub	sp, #20
 800e88c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e88e:	f3ef 8305 	mrs	r3, IPSR
 800e892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2b0f      	cmp	r3, #15
 800e898:	d915      	bls.n	800e8c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e89a:	4a18      	ldr	r2, [pc, #96]	; (800e8fc <vPortValidateInterruptPriority+0x74>)
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	4413      	add	r3, r2
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e8a4:	4b16      	ldr	r3, [pc, #88]	; (800e900 <vPortValidateInterruptPriority+0x78>)
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	7afa      	ldrb	r2, [r7, #11]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d20b      	bcs.n	800e8c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b2:	b672      	cpsid	i
 800e8b4:	f383 8811 	msr	BASEPRI, r3
 800e8b8:	f3bf 8f6f 	isb	sy
 800e8bc:	f3bf 8f4f 	dsb	sy
 800e8c0:	b662      	cpsie	i
 800e8c2:	607b      	str	r3, [r7, #4]
 800e8c4:	e7fe      	b.n	800e8c4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e8c6:	4b0f      	ldr	r3, [pc, #60]	; (800e904 <vPortValidateInterruptPriority+0x7c>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e8ce:	4b0e      	ldr	r3, [pc, #56]	; (800e908 <vPortValidateInterruptPriority+0x80>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d90b      	bls.n	800e8ee <vPortValidateInterruptPriority+0x66>
 800e8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8da:	b672      	cpsid	i
 800e8dc:	f383 8811 	msr	BASEPRI, r3
 800e8e0:	f3bf 8f6f 	isb	sy
 800e8e4:	f3bf 8f4f 	dsb	sy
 800e8e8:	b662      	cpsie	i
 800e8ea:	603b      	str	r3, [r7, #0]
 800e8ec:	e7fe      	b.n	800e8ec <vPortValidateInterruptPriority+0x64>
	}
 800e8ee:	bf00      	nop
 800e8f0:	3714      	adds	r7, #20
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f8:	4770      	bx	lr
 800e8fa:	bf00      	nop
 800e8fc:	e000e3f0 	.word	0xe000e3f0
 800e900:	200004d0 	.word	0x200004d0
 800e904:	e000ed0c 	.word	0xe000ed0c
 800e908:	200004d4 	.word	0x200004d4

0800e90c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b08a      	sub	sp, #40	; 0x28
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e914:	2300      	movs	r3, #0
 800e916:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e918:	f7fe ff9e 	bl	800d858 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e91c:	4b5c      	ldr	r3, [pc, #368]	; (800ea90 <pvPortMalloc+0x184>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d101      	bne.n	800e928 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e924:	f000 f91a 	bl	800eb5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e928:	4b5a      	ldr	r3, [pc, #360]	; (800ea94 <pvPortMalloc+0x188>)
 800e92a:	681a      	ldr	r2, [r3, #0]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	4013      	ands	r3, r2
 800e930:	2b00      	cmp	r3, #0
 800e932:	f040 8090 	bne.w	800ea56 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d01e      	beq.n	800e97a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e93c:	2208      	movs	r2, #8
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	4413      	add	r3, r2
 800e942:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f003 0307 	and.w	r3, r3, #7
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d015      	beq.n	800e97a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f023 0307 	bic.w	r3, r3, #7
 800e954:	3308      	adds	r3, #8
 800e956:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f003 0307 	and.w	r3, r3, #7
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d00b      	beq.n	800e97a <pvPortMalloc+0x6e>
 800e962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e966:	b672      	cpsid	i
 800e968:	f383 8811 	msr	BASEPRI, r3
 800e96c:	f3bf 8f6f 	isb	sy
 800e970:	f3bf 8f4f 	dsb	sy
 800e974:	b662      	cpsie	i
 800e976:	617b      	str	r3, [r7, #20]
 800e978:	e7fe      	b.n	800e978 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d06a      	beq.n	800ea56 <pvPortMalloc+0x14a>
 800e980:	4b45      	ldr	r3, [pc, #276]	; (800ea98 <pvPortMalloc+0x18c>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	429a      	cmp	r2, r3
 800e988:	d865      	bhi.n	800ea56 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e98a:	4b44      	ldr	r3, [pc, #272]	; (800ea9c <pvPortMalloc+0x190>)
 800e98c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e98e:	4b43      	ldr	r3, [pc, #268]	; (800ea9c <pvPortMalloc+0x190>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e994:	e004      	b.n	800e9a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e998:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d903      	bls.n	800e9b2 <pvPortMalloc+0xa6>
 800e9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d1f1      	bne.n	800e996 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e9b2:	4b37      	ldr	r3, [pc, #220]	; (800ea90 <pvPortMalloc+0x184>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d04c      	beq.n	800ea56 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e9bc:	6a3b      	ldr	r3, [r7, #32]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	2208      	movs	r2, #8
 800e9c2:	4413      	add	r3, r2
 800e9c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	6a3b      	ldr	r3, [r7, #32]
 800e9cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d0:	685a      	ldr	r2, [r3, #4]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	1ad2      	subs	r2, r2, r3
 800e9d6:	2308      	movs	r3, #8
 800e9d8:	005b      	lsls	r3, r3, #1
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d920      	bls.n	800ea20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e9de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4413      	add	r3, r2
 800e9e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9e6:	69bb      	ldr	r3, [r7, #24]
 800e9e8:	f003 0307 	and.w	r3, r3, #7
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d00b      	beq.n	800ea08 <pvPortMalloc+0xfc>
 800e9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f4:	b672      	cpsid	i
 800e9f6:	f383 8811 	msr	BASEPRI, r3
 800e9fa:	f3bf 8f6f 	isb	sy
 800e9fe:	f3bf 8f4f 	dsb	sy
 800ea02:	b662      	cpsie	i
 800ea04:	613b      	str	r3, [r7, #16]
 800ea06:	e7fe      	b.n	800ea06 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0a:	685a      	ldr	r2, [r3, #4]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	1ad2      	subs	r2, r2, r3
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea16:	687a      	ldr	r2, [r7, #4]
 800ea18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea1a:	69b8      	ldr	r0, [r7, #24]
 800ea1c:	f000 f900 	bl	800ec20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ea20:	4b1d      	ldr	r3, [pc, #116]	; (800ea98 <pvPortMalloc+0x18c>)
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	1ad3      	subs	r3, r2, r3
 800ea2a:	4a1b      	ldr	r2, [pc, #108]	; (800ea98 <pvPortMalloc+0x18c>)
 800ea2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ea2e:	4b1a      	ldr	r3, [pc, #104]	; (800ea98 <pvPortMalloc+0x18c>)
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	4b1b      	ldr	r3, [pc, #108]	; (800eaa0 <pvPortMalloc+0x194>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d203      	bcs.n	800ea42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea3a:	4b17      	ldr	r3, [pc, #92]	; (800ea98 <pvPortMalloc+0x18c>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	4a18      	ldr	r2, [pc, #96]	; (800eaa0 <pvPortMalloc+0x194>)
 800ea40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea44:	685a      	ldr	r2, [r3, #4]
 800ea46:	4b13      	ldr	r3, [pc, #76]	; (800ea94 <pvPortMalloc+0x188>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	431a      	orrs	r2, r3
 800ea4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea52:	2200      	movs	r2, #0
 800ea54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea56:	f7fe ff0d 	bl	800d874 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d101      	bne.n	800ea64 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ea60:	f7f1 ff94 	bl	800098c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea64:	69fb      	ldr	r3, [r7, #28]
 800ea66:	f003 0307 	and.w	r3, r3, #7
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d00b      	beq.n	800ea86 <pvPortMalloc+0x17a>
 800ea6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea72:	b672      	cpsid	i
 800ea74:	f383 8811 	msr	BASEPRI, r3
 800ea78:	f3bf 8f6f 	isb	sy
 800ea7c:	f3bf 8f4f 	dsb	sy
 800ea80:	b662      	cpsie	i
 800ea82:	60fb      	str	r3, [r7, #12]
 800ea84:	e7fe      	b.n	800ea84 <pvPortMalloc+0x178>
	return pvReturn;
 800ea86:	69fb      	ldr	r3, [r7, #28]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3728      	adds	r7, #40	; 0x28
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	200084e0 	.word	0x200084e0
 800ea94:	200084ec 	.word	0x200084ec
 800ea98:	200084e4 	.word	0x200084e4
 800ea9c:	200084d8 	.word	0x200084d8
 800eaa0:	200084e8 	.word	0x200084e8

0800eaa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b086      	sub	sp, #24
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d04a      	beq.n	800eb4c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eab6:	2308      	movs	r3, #8
 800eab8:	425b      	negs	r3, r3
 800eaba:	697a      	ldr	r2, [r7, #20]
 800eabc:	4413      	add	r3, r2
 800eabe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	685a      	ldr	r2, [r3, #4]
 800eac8:	4b22      	ldr	r3, [pc, #136]	; (800eb54 <vPortFree+0xb0>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4013      	ands	r3, r2
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d10b      	bne.n	800eaea <vPortFree+0x46>
 800ead2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead6:	b672      	cpsid	i
 800ead8:	f383 8811 	msr	BASEPRI, r3
 800eadc:	f3bf 8f6f 	isb	sy
 800eae0:	f3bf 8f4f 	dsb	sy
 800eae4:	b662      	cpsie	i
 800eae6:	60fb      	str	r3, [r7, #12]
 800eae8:	e7fe      	b.n	800eae8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d00b      	beq.n	800eb0a <vPortFree+0x66>
 800eaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf6:	b672      	cpsid	i
 800eaf8:	f383 8811 	msr	BASEPRI, r3
 800eafc:	f3bf 8f6f 	isb	sy
 800eb00:	f3bf 8f4f 	dsb	sy
 800eb04:	b662      	cpsie	i
 800eb06:	60bb      	str	r3, [r7, #8]
 800eb08:	e7fe      	b.n	800eb08 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	685a      	ldr	r2, [r3, #4]
 800eb0e:	4b11      	ldr	r3, [pc, #68]	; (800eb54 <vPortFree+0xb0>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	4013      	ands	r3, r2
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d019      	beq.n	800eb4c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d115      	bne.n	800eb4c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	685a      	ldr	r2, [r3, #4]
 800eb24:	4b0b      	ldr	r3, [pc, #44]	; (800eb54 <vPortFree+0xb0>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	43db      	mvns	r3, r3
 800eb2a:	401a      	ands	r2, r3
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb30:	f7fe fe92 	bl	800d858 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	685a      	ldr	r2, [r3, #4]
 800eb38:	4b07      	ldr	r3, [pc, #28]	; (800eb58 <vPortFree+0xb4>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	4a06      	ldr	r2, [pc, #24]	; (800eb58 <vPortFree+0xb4>)
 800eb40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb42:	6938      	ldr	r0, [r7, #16]
 800eb44:	f000 f86c 	bl	800ec20 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eb48:	f7fe fe94 	bl	800d874 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb4c:	bf00      	nop
 800eb4e:	3718      	adds	r7, #24
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	200084ec 	.word	0x200084ec
 800eb58:	200084e4 	.word	0x200084e4

0800eb5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b085      	sub	sp, #20
 800eb60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eb62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eb68:	4b27      	ldr	r3, [pc, #156]	; (800ec08 <prvHeapInit+0xac>)
 800eb6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f003 0307 	and.w	r3, r3, #7
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d00c      	beq.n	800eb90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	3307      	adds	r3, #7
 800eb7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f023 0307 	bic.w	r3, r3, #7
 800eb82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eb84:	68ba      	ldr	r2, [r7, #8]
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	1ad3      	subs	r3, r2, r3
 800eb8a:	4a1f      	ldr	r2, [pc, #124]	; (800ec08 <prvHeapInit+0xac>)
 800eb8c:	4413      	add	r3, r2
 800eb8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb94:	4a1d      	ldr	r2, [pc, #116]	; (800ec0c <prvHeapInit+0xb0>)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb9a:	4b1c      	ldr	r3, [pc, #112]	; (800ec0c <prvHeapInit+0xb0>)
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	68ba      	ldr	r2, [r7, #8]
 800eba4:	4413      	add	r3, r2
 800eba6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eba8:	2208      	movs	r2, #8
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	1a9b      	subs	r3, r3, r2
 800ebae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f023 0307 	bic.w	r3, r3, #7
 800ebb6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	4a15      	ldr	r2, [pc, #84]	; (800ec10 <prvHeapInit+0xb4>)
 800ebbc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ebbe:	4b14      	ldr	r3, [pc, #80]	; (800ec10 <prvHeapInit+0xb4>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ebc6:	4b12      	ldr	r3, [pc, #72]	; (800ec10 <prvHeapInit+0xb4>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	68fa      	ldr	r2, [r7, #12]
 800ebd6:	1ad2      	subs	r2, r2, r3
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ebdc:	4b0c      	ldr	r3, [pc, #48]	; (800ec10 <prvHeapInit+0xb4>)
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	685b      	ldr	r3, [r3, #4]
 800ebe8:	4a0a      	ldr	r2, [pc, #40]	; (800ec14 <prvHeapInit+0xb8>)
 800ebea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	4a09      	ldr	r2, [pc, #36]	; (800ec18 <prvHeapInit+0xbc>)
 800ebf2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ebf4:	4b09      	ldr	r3, [pc, #36]	; (800ec1c <prvHeapInit+0xc0>)
 800ebf6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ebfa:	601a      	str	r2, [r3, #0]
}
 800ebfc:	bf00      	nop
 800ebfe:	3714      	adds	r7, #20
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr
 800ec08:	200004d8 	.word	0x200004d8
 800ec0c:	200084d8 	.word	0x200084d8
 800ec10:	200084e0 	.word	0x200084e0
 800ec14:	200084e8 	.word	0x200084e8
 800ec18:	200084e4 	.word	0x200084e4
 800ec1c:	200084ec 	.word	0x200084ec

0800ec20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec20:	b480      	push	{r7}
 800ec22:	b085      	sub	sp, #20
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec28:	4b28      	ldr	r3, [pc, #160]	; (800eccc <prvInsertBlockIntoFreeList+0xac>)
 800ec2a:	60fb      	str	r3, [r7, #12]
 800ec2c:	e002      	b.n	800ec34 <prvInsertBlockIntoFreeList+0x14>
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	60fb      	str	r3, [r7, #12]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d8f7      	bhi.n	800ec2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	685b      	ldr	r3, [r3, #4]
 800ec46:	68ba      	ldr	r2, [r7, #8]
 800ec48:	4413      	add	r3, r2
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d108      	bne.n	800ec62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	685a      	ldr	r2, [r3, #4]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	441a      	add	r2, r3
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	68ba      	ldr	r2, [r7, #8]
 800ec6c:	441a      	add	r2, r3
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d118      	bne.n	800eca8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	4b15      	ldr	r3, [pc, #84]	; (800ecd0 <prvInsertBlockIntoFreeList+0xb0>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d00d      	beq.n	800ec9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	685a      	ldr	r2, [r3, #4]
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	441a      	add	r2, r3
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	681a      	ldr	r2, [r3, #0]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	601a      	str	r2, [r3, #0]
 800ec9c:	e008      	b.n	800ecb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec9e:	4b0c      	ldr	r3, [pc, #48]	; (800ecd0 <prvInsertBlockIntoFreeList+0xb0>)
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	601a      	str	r2, [r3, #0]
 800eca6:	e003      	b.n	800ecb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ecb0:	68fa      	ldr	r2, [r7, #12]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d002      	beq.n	800ecbe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	687a      	ldr	r2, [r7, #4]
 800ecbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ecbe:	bf00      	nop
 800ecc0:	3714      	adds	r7, #20
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc8:	4770      	bx	lr
 800ecca:	bf00      	nop
 800eccc:	200084d8 	.word	0x200084d8
 800ecd0:	200084e0 	.word	0x200084e0

0800ecd4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b08c      	sub	sp, #48	; 0x30
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	4a51      	ldr	r2, [pc, #324]	; (800ee24 <I2Cx_MspInit+0x150>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d14d      	bne.n	800ed80 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800ece4:	4b50      	ldr	r3, [pc, #320]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ece6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ece8:	4a4f      	ldr	r2, [pc, #316]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ecea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecee:	6313      	str	r3, [r2, #48]	; 0x30
 800ecf0:	4b4d      	ldr	r3, [pc, #308]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ecf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecf8:	61bb      	str	r3, [r7, #24]
 800ecfa:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800ecfc:	2380      	movs	r3, #128	; 0x80
 800ecfe:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800ed00:	2312      	movs	r3, #18
 800ed02:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800ed04:	2300      	movs	r3, #0
 800ed06:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800ed08:	2302      	movs	r3, #2
 800ed0a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800ed0c:	2304      	movs	r3, #4
 800ed0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800ed10:	f107 031c 	add.w	r3, r7, #28
 800ed14:	4619      	mov	r1, r3
 800ed16:	4845      	ldr	r0, [pc, #276]	; (800ee2c <I2Cx_MspInit+0x158>)
 800ed18:	f7f5 fba0 	bl	800445c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800ed1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800ed22:	f107 031c 	add.w	r3, r7, #28
 800ed26:	4619      	mov	r1, r3
 800ed28:	4840      	ldr	r0, [pc, #256]	; (800ee2c <I2Cx_MspInit+0x158>)
 800ed2a:	f7f5 fb97 	bl	800445c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800ed2e:	4b3e      	ldr	r3, [pc, #248]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed32:	4a3d      	ldr	r2, [pc, #244]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ed38:	6413      	str	r3, [r2, #64]	; 0x40
 800ed3a:	4b3b      	ldr	r3, [pc, #236]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed42:	617b      	str	r3, [r7, #20]
 800ed44:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800ed46:	4b38      	ldr	r3, [pc, #224]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed48:	6a1b      	ldr	r3, [r3, #32]
 800ed4a:	4a37      	ldr	r2, [pc, #220]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ed50:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800ed52:	4b35      	ldr	r3, [pc, #212]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed54:	6a1b      	ldr	r3, [r3, #32]
 800ed56:	4a34      	ldr	r2, [pc, #208]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ed5c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800ed5e:	2200      	movs	r2, #0
 800ed60:	210f      	movs	r1, #15
 800ed62:	2048      	movs	r0, #72	; 0x48
 800ed64:	f7f4 fd2a 	bl	80037bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800ed68:	2048      	movs	r0, #72	; 0x48
 800ed6a:	f7f4 fd43 	bl	80037f4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800ed6e:	2200      	movs	r2, #0
 800ed70:	210f      	movs	r1, #15
 800ed72:	2049      	movs	r0, #73	; 0x49
 800ed74:	f7f4 fd22 	bl	80037bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800ed78:	2049      	movs	r0, #73	; 0x49
 800ed7a:	f7f4 fd3b 	bl	80037f4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800ed7e:	e04d      	b.n	800ee1c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800ed80:	4b29      	ldr	r3, [pc, #164]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed84:	4a28      	ldr	r2, [pc, #160]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed86:	f043 0302 	orr.w	r3, r3, #2
 800ed8a:	6313      	str	r3, [r2, #48]	; 0x30
 800ed8c:	4b26      	ldr	r3, [pc, #152]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ed8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed90:	f003 0302 	and.w	r3, r3, #2
 800ed94:	613b      	str	r3, [r7, #16]
 800ed96:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800ed98:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed9c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800ed9e:	2312      	movs	r3, #18
 800eda0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800eda2:	2300      	movs	r3, #0
 800eda4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800eda6:	2302      	movs	r3, #2
 800eda8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800edaa:	2304      	movs	r3, #4
 800edac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800edae:	f107 031c 	add.w	r3, r7, #28
 800edb2:	4619      	mov	r1, r3
 800edb4:	481e      	ldr	r0, [pc, #120]	; (800ee30 <I2Cx_MspInit+0x15c>)
 800edb6:	f7f5 fb51 	bl	800445c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800edba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800edbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800edc0:	f107 031c 	add.w	r3, r7, #28
 800edc4:	4619      	mov	r1, r3
 800edc6:	481a      	ldr	r0, [pc, #104]	; (800ee30 <I2Cx_MspInit+0x15c>)
 800edc8:	f7f5 fb48 	bl	800445c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800edcc:	4b16      	ldr	r3, [pc, #88]	; (800ee28 <I2Cx_MspInit+0x154>)
 800edce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edd0:	4a15      	ldr	r2, [pc, #84]	; (800ee28 <I2Cx_MspInit+0x154>)
 800edd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800edd6:	6413      	str	r3, [r2, #64]	; 0x40
 800edd8:	4b13      	ldr	r3, [pc, #76]	; (800ee28 <I2Cx_MspInit+0x154>)
 800edda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ede0:	60fb      	str	r3, [r7, #12]
 800ede2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800ede4:	4b10      	ldr	r3, [pc, #64]	; (800ee28 <I2Cx_MspInit+0x154>)
 800ede6:	6a1b      	ldr	r3, [r3, #32]
 800ede8:	4a0f      	ldr	r2, [pc, #60]	; (800ee28 <I2Cx_MspInit+0x154>)
 800edea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800edee:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800edf0:	4b0d      	ldr	r3, [pc, #52]	; (800ee28 <I2Cx_MspInit+0x154>)
 800edf2:	6a1b      	ldr	r3, [r3, #32]
 800edf4:	4a0c      	ldr	r2, [pc, #48]	; (800ee28 <I2Cx_MspInit+0x154>)
 800edf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800edfa:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800edfc:	2200      	movs	r2, #0
 800edfe:	210f      	movs	r1, #15
 800ee00:	201f      	movs	r0, #31
 800ee02:	f7f4 fcdb 	bl	80037bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800ee06:	201f      	movs	r0, #31
 800ee08:	f7f4 fcf4 	bl	80037f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	210f      	movs	r1, #15
 800ee10:	2020      	movs	r0, #32
 800ee12:	f7f4 fcd3 	bl	80037bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800ee16:	2020      	movs	r0, #32
 800ee18:	f7f4 fcec 	bl	80037f4 <HAL_NVIC_EnableIRQ>
}
 800ee1c:	bf00      	nop
 800ee1e:	3730      	adds	r7, #48	; 0x30
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}
 800ee24:	200084f0 	.word	0x200084f0
 800ee28:	40023800 	.word	0x40023800
 800ee2c:	40021c00 	.word	0x40021c00
 800ee30:	40020400 	.word	0x40020400

0800ee34 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f7f6 f8e1 	bl	8005004 <HAL_I2C_GetState>
 800ee42:	4603      	mov	r3, r0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d125      	bne.n	800ee94 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	4a14      	ldr	r2, [pc, #80]	; (800ee9c <I2Cx_Init+0x68>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d103      	bne.n	800ee58 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	4a13      	ldr	r2, [pc, #76]	; (800eea0 <I2Cx_Init+0x6c>)
 800ee54:	601a      	str	r2, [r3, #0]
 800ee56:	e002      	b.n	800ee5e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	4a12      	ldr	r2, [pc, #72]	; (800eea4 <I2Cx_Init+0x70>)
 800ee5c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	4a11      	ldr	r2, [pc, #68]	; (800eea8 <I2Cx_Init+0x74>)
 800ee62:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2200      	movs	r2, #0
 800ee68:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2201      	movs	r2, #1
 800ee6e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2200      	movs	r2, #0
 800ee86:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f7ff ff23 	bl	800ecd4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	f7f5 fdca 	bl	8004a28 <HAL_I2C_Init>
  }
}
 800ee94:	bf00      	nop
 800ee96:	3708      	adds	r7, #8
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	200084f0 	.word	0x200084f0
 800eea0:	40005c00 	.word	0x40005c00
 800eea4:	40005400 	.word	0x40005400
 800eea8:	40912732 	.word	0x40912732

0800eeac <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b08a      	sub	sp, #40	; 0x28
 800eeb0:	af04      	add	r7, sp, #16
 800eeb2:	60f8      	str	r0, [r7, #12]
 800eeb4:	4608      	mov	r0, r1
 800eeb6:	4611      	mov	r1, r2
 800eeb8:	461a      	mov	r2, r3
 800eeba:	4603      	mov	r3, r0
 800eebc:	72fb      	strb	r3, [r7, #11]
 800eebe:	460b      	mov	r3, r1
 800eec0:	813b      	strh	r3, [r7, #8]
 800eec2:	4613      	mov	r3, r2
 800eec4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800eec6:	2300      	movs	r3, #0
 800eec8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800eeca:	7afb      	ldrb	r3, [r7, #11]
 800eecc:	b299      	uxth	r1, r3
 800eece:	88f8      	ldrh	r0, [r7, #6]
 800eed0:	893a      	ldrh	r2, [r7, #8]
 800eed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eed6:	9302      	str	r3, [sp, #8]
 800eed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eeda:	9301      	str	r3, [sp, #4]
 800eedc:	6a3b      	ldr	r3, [r7, #32]
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	4603      	mov	r3, r0
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	f7f5 ff74 	bl	8004dd0 <HAL_I2C_Mem_Read>
 800eee8:	4603      	mov	r3, r0
 800eeea:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800eeec:	7dfb      	ldrb	r3, [r7, #23]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d004      	beq.n	800eefc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800eef2:	7afb      	ldrb	r3, [r7, #11]
 800eef4:	4619      	mov	r1, r3
 800eef6:	68f8      	ldr	r0, [r7, #12]
 800eef8:	f000 f832 	bl	800ef60 <I2Cx_Error>
  }
  return status;    
 800eefc:	7dfb      	ldrb	r3, [r7, #23]
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3718      	adds	r7, #24
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}

0800ef06 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800ef06:	b580      	push	{r7, lr}
 800ef08:	b08a      	sub	sp, #40	; 0x28
 800ef0a:	af04      	add	r7, sp, #16
 800ef0c:	60f8      	str	r0, [r7, #12]
 800ef0e:	4608      	mov	r0, r1
 800ef10:	4611      	mov	r1, r2
 800ef12:	461a      	mov	r2, r3
 800ef14:	4603      	mov	r3, r0
 800ef16:	72fb      	strb	r3, [r7, #11]
 800ef18:	460b      	mov	r3, r1
 800ef1a:	813b      	strh	r3, [r7, #8]
 800ef1c:	4613      	mov	r3, r2
 800ef1e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800ef20:	2300      	movs	r3, #0
 800ef22:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800ef24:	7afb      	ldrb	r3, [r7, #11]
 800ef26:	b299      	uxth	r1, r3
 800ef28:	88f8      	ldrh	r0, [r7, #6]
 800ef2a:	893a      	ldrh	r2, [r7, #8]
 800ef2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ef30:	9302      	str	r3, [sp, #8]
 800ef32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef34:	9301      	str	r3, [sp, #4]
 800ef36:	6a3b      	ldr	r3, [r7, #32]
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	68f8      	ldr	r0, [r7, #12]
 800ef3e:	f7f5 fe33 	bl	8004ba8 <HAL_I2C_Mem_Write>
 800ef42:	4603      	mov	r3, r0
 800ef44:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800ef46:	7dfb      	ldrb	r3, [r7, #23]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d004      	beq.n	800ef56 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800ef4c:	7afb      	ldrb	r3, [r7, #11]
 800ef4e:	4619      	mov	r1, r3
 800ef50:	68f8      	ldr	r0, [r7, #12]
 800ef52:	f000 f805 	bl	800ef60 <I2Cx_Error>
  }
  return status;
 800ef56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3718      	adds	r7, #24
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	460b      	mov	r3, r1
 800ef6a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f7f5 fdeb 	bl	8004b48 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f7ff ff5e 	bl	800ee34 <I2Cx_Init>
}
 800ef78:	bf00      	nop
 800ef7a:	3708      	adds	r7, #8
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800ef84:	4802      	ldr	r0, [pc, #8]	; (800ef90 <TS_IO_Init+0x10>)
 800ef86:	f7ff ff55 	bl	800ee34 <I2Cx_Init>
}
 800ef8a:	bf00      	nop
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	200084f0 	.word	0x200084f0

0800ef94 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b084      	sub	sp, #16
 800ef98:	af02      	add	r7, sp, #8
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	71fb      	strb	r3, [r7, #7]
 800ef9e:	460b      	mov	r3, r1
 800efa0:	71bb      	strb	r3, [r7, #6]
 800efa2:	4613      	mov	r3, r2
 800efa4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800efa6:	79bb      	ldrb	r3, [r7, #6]
 800efa8:	b29a      	uxth	r2, r3
 800efaa:	79f9      	ldrb	r1, [r7, #7]
 800efac:	2301      	movs	r3, #1
 800efae:	9301      	str	r3, [sp, #4]
 800efb0:	1d7b      	adds	r3, r7, #5
 800efb2:	9300      	str	r3, [sp, #0]
 800efb4:	2301      	movs	r3, #1
 800efb6:	4803      	ldr	r0, [pc, #12]	; (800efc4 <TS_IO_Write+0x30>)
 800efb8:	f7ff ffa5 	bl	800ef06 <I2Cx_WriteMultiple>
}
 800efbc:	bf00      	nop
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	200084f0 	.word	0x200084f0

0800efc8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b086      	sub	sp, #24
 800efcc:	af02      	add	r7, sp, #8
 800efce:	4603      	mov	r3, r0
 800efd0:	460a      	mov	r2, r1
 800efd2:	71fb      	strb	r3, [r7, #7]
 800efd4:	4613      	mov	r3, r2
 800efd6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800efd8:	2300      	movs	r3, #0
 800efda:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800efdc:	79bb      	ldrb	r3, [r7, #6]
 800efde:	b29a      	uxth	r2, r3
 800efe0:	79f9      	ldrb	r1, [r7, #7]
 800efe2:	2301      	movs	r3, #1
 800efe4:	9301      	str	r3, [sp, #4]
 800efe6:	f107 030f 	add.w	r3, r7, #15
 800efea:	9300      	str	r3, [sp, #0]
 800efec:	2301      	movs	r3, #1
 800efee:	4804      	ldr	r0, [pc, #16]	; (800f000 <TS_IO_Read+0x38>)
 800eff0:	f7ff ff5c 	bl	800eeac <I2Cx_ReadMultiple>

  return read_value;
 800eff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3710      	adds	r7, #16
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	200084f0 	.word	0x200084f0

0800f004 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f7f4 f851 	bl	80030b4 <HAL_Delay>
}
 800f012:	bf00      	nop
 800f014:	3708      	adds	r7, #8
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800f01a:	b580      	push	{r7, lr}
 800f01c:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800f01e:	f008 f8c1 	bl	80171a4 <touchgfx_init>
}
 800f022:	bf00      	nop
 800f024:	bd80      	pop	{r7, pc}

0800f026 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800f026:	b580      	push	{r7, lr}
 800f028:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800f02a:	f008 f8e5 	bl	80171f8 <touchgfx_taskEntry>
}
 800f02e:	bf00      	nop
 800f030:	bd80      	pop	{r7, pc}
	...

0800f034 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800f034:	b480      	push	{r7}
 800f036:	b083      	sub	sp, #12
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
    {
 800f03c:	4a04      	ldr	r2, [pc, #16]	; (800f050 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	601a      	str	r2, [r3, #0]
    }
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	4618      	mov	r0, r3
 800f046:	370c      	adds	r7, #12
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr
 800f050:	08029e88 	.word	0x08029e88

0800f054 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f054:	b580      	push	{r7, lr}
 800f056:	b082      	sub	sp, #8
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
    }
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f7ff ffe9 	bl	800f034 <_ZN8touchgfx12FontProviderD1Ev>
 800f062:	2104      	movs	r1, #4
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f019 f9e1 	bl	802842c <_ZdlPvj>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	4618      	mov	r0, r3
 800f06e:	3708      	adds	r7, #8
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	460b      	mov	r3, r1
 800f07e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f080:	887b      	ldrh	r3, [r7, #2]
 800f082:	2b01      	cmp	r3, #1
 800f084:	d008      	beq.n	800f098 <_ZN23ApplicationFontProvider7getFontEt+0x24>
 800f086:	2b02      	cmp	r3, #2
 800f088:	d00b      	beq.n	800f0a2 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d10e      	bne.n	800f0ac <_ZN23ApplicationFontProvider7getFontEt+0x38>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f08e:	f005 ff93 	bl	8014fb8 <_ZN17TypedTextDatabase8getFontsEv>
 800f092:	4603      	mov	r3, r0
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	e00a      	b.n	800f0ae <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f098:	f005 ff8e 	bl	8014fb8 <_ZN17TypedTextDatabase8getFontsEv>
 800f09c:	4603      	mov	r3, r0
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	e005      	b.n	800f0ae <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f0a2:	f005 ff89 	bl	8014fb8 <_ZN17TypedTextDatabase8getFontsEv>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	689b      	ldr	r3, [r3, #8]
 800f0aa:	e000      	b.n	800f0ae <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    default:
        return 0;
 800f0ac:	2300      	movs	r3, #0
    }
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3708      	adds	r7, #8
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
	...

0800f0b8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	4a05      	ldr	r2, [pc, #20]	; (800f0d8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	601a      	str	r2, [r3, #0]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7ff ffb3 	bl	800f034 <_ZN8touchgfx12FontProviderD1Ev>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3708      	adds	r7, #8
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}
 800f0d8:	08029e74 	.word	0x08029e74

0800f0dc <_ZN23ApplicationFontProviderD0Ev>:
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7ff ffe7 	bl	800f0b8 <_ZN23ApplicationFontProviderD1Ev>
 800f0ea:	2104      	movs	r1, #4
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f019 f99d 	bl	802842c <_ZdlPvj>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3708      	adds	r7, #8
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
    {
 800f104:	4a04      	ldr	r2, [pc, #16]	; (800f118 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	601a      	str	r2, [r3, #0]
    }
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	4618      	mov	r0, r3
 800f10e:	370c      	adds	r7, #12
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr
 800f118:	0802abf0 	.word	0x0802abf0

0800f11c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b082      	sub	sp, #8
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
    }
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f7ff ffe9 	bl	800f0fc <_ZN8touchgfx4FontD1Ev>
 800f12a:	2110      	movs	r1, #16
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f019 f97d 	bl	802842c <_ZdlPvj>
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	4618      	mov	r0, r3
 800f136:	3708      	adds	r7, #8
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f13c:	b590      	push	{r4, r7, lr}
 800f13e:	b087      	sub	sp, #28
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	460b      	mov	r3, r1
 800f146:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800f148:	887b      	ldrh	r3, [r7, #2]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d101      	bne.n	800f152 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800f14e:	2300      	movs	r3, #0
 800f150:	e010      	b.n	800f174 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800f152:	2300      	movs	r3, #0
 800f154:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f156:	2300      	movs	r3, #0
 800f158:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	3308      	adds	r3, #8
 800f160:	681c      	ldr	r4, [r3, #0]
 800f162:	f107 030f 	add.w	r3, r7, #15
 800f166:	f107 0210 	add.w	r2, r7, #16
 800f16a:	8879      	ldrh	r1, [r7, #2]
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	47a0      	blx	r4
 800f170:	6178      	str	r0, [r7, #20]
        return glyph;
 800f172:	697b      	ldr	r3, [r7, #20]
    }
 800f174:	4618      	mov	r0, r3
 800f176:	371c      	adds	r7, #28
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd90      	pop	{r4, r7, pc}

0800f17c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f17c:	b480      	push	{r7}
 800f17e:	b083      	sub	sp, #12
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	895b      	ldrh	r3, [r3, #10]
    }
 800f188:	4618      	mov	r0, r3
 800f18a:	370c      	adds	r7, #12
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr

0800f194 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f194:	b480      	push	{r7}
 800f196:	b083      	sub	sp, #12
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	899b      	ldrh	r3, [r3, #12]
    }
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	889b      	ldrh	r3, [r3, #4]
    }
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	370c      	adds	r7, #12
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr

0800f1c4 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800f1c4:	b480      	push	{r7}
 800f1c6:	b083      	sub	sp, #12
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	889a      	ldrh	r2, [r3, #4]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	799b      	ldrb	r3, [r3, #6]
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	4413      	add	r3, r2
 800f1d8:	b29b      	uxth	r3, r3
    }
 800f1da:	4618      	mov	r0, r3
 800f1dc:	370c      	adds	r7, #12
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e4:	4770      	bx	lr

0800f1e6 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800f1e6:	b480      	push	{r7}
 800f1e8:	b083      	sub	sp, #12
 800f1ea:	af00      	add	r7, sp, #0
 800f1ec:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	79db      	ldrb	r3, [r3, #7]
 800f1f2:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f1f6:	b2db      	uxtb	r3, r3
    }
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	370c      	adds	r7, #12
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800f204:	b480      	push	{r7}
 800f206:	b083      	sub	sp, #12
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	79db      	ldrb	r3, [r3, #7]
 800f210:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f214:	b2db      	uxtb	r3, r3
    }
 800f216:	4618      	mov	r0, r3
 800f218:	370c      	adds	r7, #12
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr
	...

0800f224 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800f224:	b580      	push	{r7, lr}
 800f226:	b082      	sub	sp, #8
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	4a05      	ldr	r2, [pc, #20]	; (800f244 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	601a      	str	r2, [r3, #0]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	4618      	mov	r0, r3
 800f236:	f7ff ff61 	bl	800f0fc <_ZN8touchgfx4FontD1Ev>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	4618      	mov	r0, r3
 800f23e:	3708      	adds	r7, #8
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	0802d0d8 	.word	0x0802d0d8

0800f248 <_ZN8touchgfx9ConstFontD0Ev>:
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f7ff ffe7 	bl	800f224 <_ZN8touchgfx9ConstFontD1Ev>
 800f256:	2118      	movs	r1, #24
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f019 f8e7 	bl	802842c <_ZdlPvj>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	4618      	mov	r0, r3
 800f262:	3708      	adds	r7, #8
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	4a05      	ldr	r2, [pc, #20]	; (800f288 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	601a      	str	r2, [r3, #0]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	4618      	mov	r0, r3
 800f27a:	f7ff ffd3 	bl	800f224 <_ZN8touchgfx9ConstFontD1Ev>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	4618      	mov	r0, r3
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}
 800f288:	08029eac 	.word	0x08029eac

0800f28c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7ff ffe7 	bl	800f268 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f29a:	2124      	movs	r1, #36	; 0x24
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f019 f8c5 	bl	802842c <_ZdlPvj>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3708      	adds	r7, #8
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800f2ac:	b480      	push	{r7}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
    {
 800f2b4:	4a04      	ldr	r2, [pc, #16]	; (800f2c8 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	601a      	str	r2, [r3, #0]
    }
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	4618      	mov	r0, r3
 800f2be:	370c      	adds	r7, #12
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr
 800f2c8:	08029e9c 	.word	0x08029e9c

0800f2cc <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b082      	sub	sp, #8
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
    }
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f7ff ffe9 	bl	800f2ac <_ZN8touchgfx9TypedTextD1Ev>
 800f2da:	2108      	movs	r1, #8
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f019 f8a5 	bl	802842c <_ZdlPvj>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3708      	adds	r7, #8
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}

0800f2ec <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800f2ec:	b480      	push	{r7}
 800f2ee:	b083      	sub	sp, #12
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6a1b      	ldr	r3, [r3, #32]
    }
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	370c      	adds	r7, #12
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr

0800f304 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800f304:	b580      	push	{r7, lr}
 800f306:	b08c      	sub	sp, #48	; 0x30
 800f308:	af08      	add	r7, sp, #32
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	60b9      	str	r1, [r7, #8]
 800f30e:	4611      	mov	r1, r2
 800f310:	461a      	mov	r2, r3
 800f312:	460b      	mov	r3, r1
 800f314:	80fb      	strh	r3, [r7, #6]
 800f316:	4613      	mov	r3, r2
 800f318:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800f31a:	68f8      	ldr	r0, [r7, #12]
 800f31c:	88b9      	ldrh	r1, [r7, #4]
 800f31e:	88fa      	ldrh	r2, [r7, #6]
 800f320:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f322:	9306      	str	r3, [sp, #24]
 800f324:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f326:	9305      	str	r3, [sp, #20]
 800f328:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f32c:	9304      	str	r3, [sp, #16]
 800f32e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f332:	9303      	str	r3, [sp, #12]
 800f334:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f338:	9302      	str	r3, [sp, #8]
 800f33a:	7f3b      	ldrb	r3, [r7, #28]
 800f33c:	9301      	str	r3, [sp, #4]
 800f33e:	7e3b      	ldrb	r3, [r7, #24]
 800f340:	9300      	str	r3, [sp, #0]
 800f342:	460b      	mov	r3, r1
 800f344:	68b9      	ldr	r1, [r7, #8]
 800f346:	f00d fbfb 	bl	801cb40 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800f34a:	4a08      	ldr	r2, [pc, #32]	; (800f36c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	601a      	str	r2, [r3, #0]
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f354:	619a      	str	r2, [r3, #24]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f35a:	61da      	str	r2, [r3, #28]
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f360:	621a      	str	r2, [r3, #32]
{
}
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	4618      	mov	r0, r3
 800f366:	3710      	adds	r7, #16
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	08029eac 	.word	0x08029eac

0800f370 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f370:	b480      	push	{r7}
 800f372:	b085      	sub	sp, #20
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	699b      	ldr	r3, [r3, #24]
 800f37e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	889b      	ldrh	r3, [r3, #4]
 800f384:	0adb      	lsrs	r3, r3, #11
 800f386:	b29b      	uxth	r3, r3
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	68fa      	ldr	r2, [r7, #12]
 800f38c:	4413      	add	r3, r2
 800f38e:	681a      	ldr	r2, [r3, #0]
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	4413      	add	r3, r2
}
 800f396:	4618      	mov	r0, r3
 800f398:	3714      	adds	r7, #20
 800f39a:	46bd      	mov	sp, r7
 800f39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a0:	4770      	bx	lr

0800f3a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f3a2:	b480      	push	{r7}
 800f3a4:	b089      	sub	sp, #36	; 0x24
 800f3a6:	af00      	add	r7, sp, #0
 800f3a8:	60f8      	str	r0, [r7, #12]
 800f3aa:	460b      	mov	r3, r1
 800f3ac:	607a      	str	r2, [r7, #4]
 800f3ae:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d003      	beq.n	800f3be <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	7b1b      	ldrb	r3, [r3, #12]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d101      	bne.n	800f3c2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	e030      	b.n	800f424 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	69da      	ldr	r2, [r3, #28]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	7b5b      	ldrb	r3, [r3, #13]
 800f3ce:	021b      	lsls	r3, r3, #8
 800f3d0:	b21b      	sxth	r3, r3
 800f3d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f3d6:	b219      	sxth	r1, r3
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	7adb      	ldrb	r3, [r3, #11]
 800f3dc:	b21b      	sxth	r3, r3
 800f3de:	430b      	orrs	r3, r1
 800f3e0:	b21b      	sxth	r3, r3
 800f3e2:	b29b      	uxth	r3, r3
 800f3e4:	009b      	lsls	r3, r3, #2
 800f3e6:	4413      	add	r3, r2
 800f3e8:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	7b1b      	ldrb	r3, [r3, #12]
 800f3ee:	837b      	strh	r3, [r7, #26]
 800f3f0:	8b7b      	ldrh	r3, [r7, #26]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d015      	beq.n	800f422 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800f3f6:	69fb      	ldr	r3, [r7, #28]
 800f3f8:	881b      	ldrh	r3, [r3, #0]
 800f3fa:	897a      	ldrh	r2, [r7, #10]
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d103      	bne.n	800f408 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f406:	e00d      	b.n	800f424 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800f408:	69fb      	ldr	r3, [r7, #28]
 800f40a:	881b      	ldrh	r3, [r3, #0]
 800f40c:	897a      	ldrh	r2, [r7, #10]
 800f40e:	429a      	cmp	r2, r3
 800f410:	d306      	bcc.n	800f420 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f412:	8b7b      	ldrh	r3, [r7, #26]
 800f414:	3b01      	subs	r3, #1
 800f416:	837b      	strh	r3, [r7, #26]
 800f418:	69fb      	ldr	r3, [r7, #28]
 800f41a:	3304      	adds	r3, #4
 800f41c:	61fb      	str	r3, [r7, #28]
 800f41e:	e7e7      	b.n	800f3f0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800f420:	bf00      	nop
        }
    }
    return 0;
 800f422:	2300      	movs	r3, #0
}
 800f424:	4618      	mov	r0, r3
 800f426:	3724      	adds	r7, #36	; 0x24
 800f428:	46bd      	mov	sp, r7
 800f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42e:	4770      	bx	lr

0800f430 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800f430:	b580      	push	{r7, lr}
 800f432:	af00      	add	r7, sp, #0
 800f434:	4801      	ldr	r0, [pc, #4]	; (800f43c <__tcf_0+0xc>)
 800f436:	f7ff ff17 	bl	800f268 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f43a:	bd80      	pop	{r7, pc}
 800f43c:	2000853c 	.word	0x2000853c

0800f440 <_Z23getFont_verdana_10_4bppv>:
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b08a      	sub	sp, #40	; 0x28
 800f444:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800f446:	4b15      	ldr	r3, [pc, #84]	; (800f49c <_Z23getFont_verdana_10_4bppv+0x5c>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f003 0301 	and.w	r3, r3, #1
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d11f      	bne.n	800f492 <_Z23getFont_verdana_10_4bppv+0x52>
 800f452:	2300      	movs	r3, #0
 800f454:	9309      	str	r3, [sp, #36]	; 0x24
 800f456:	2300      	movs	r3, #0
 800f458:	9308      	str	r3, [sp, #32]
 800f45a:	233f      	movs	r3, #63	; 0x3f
 800f45c:	9307      	str	r3, [sp, #28]
 800f45e:	4b10      	ldr	r3, [pc, #64]	; (800f4a0 <_Z23getFont_verdana_10_4bppv+0x60>)
 800f460:	9306      	str	r3, [sp, #24]
 800f462:	4b10      	ldr	r3, [pc, #64]	; (800f4a4 <_Z23getFont_verdana_10_4bppv+0x64>)
 800f464:	9305      	str	r3, [sp, #20]
 800f466:	2300      	movs	r3, #0
 800f468:	9304      	str	r3, [sp, #16]
 800f46a:	2300      	movs	r3, #0
 800f46c:	9303      	str	r3, [sp, #12]
 800f46e:	2301      	movs	r3, #1
 800f470:	9302      	str	r3, [sp, #8]
 800f472:	2304      	movs	r3, #4
 800f474:	9301      	str	r3, [sp, #4]
 800f476:	2300      	movs	r3, #0
 800f478:	9300      	str	r3, [sp, #0]
 800f47a:	230a      	movs	r3, #10
 800f47c:	2201      	movs	r2, #1
 800f47e:	490a      	ldr	r1, [pc, #40]	; (800f4a8 <_Z23getFont_verdana_10_4bppv+0x68>)
 800f480:	480a      	ldr	r0, [pc, #40]	; (800f4ac <_Z23getFont_verdana_10_4bppv+0x6c>)
 800f482:	f7ff ff3f 	bl	800f304 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f486:	4b05      	ldr	r3, [pc, #20]	; (800f49c <_Z23getFont_verdana_10_4bppv+0x5c>)
 800f488:	2201      	movs	r2, #1
 800f48a:	601a      	str	r2, [r3, #0]
 800f48c:	4808      	ldr	r0, [pc, #32]	; (800f4b0 <_Z23getFont_verdana_10_4bppv+0x70>)
 800f48e:	f019 f817 	bl	80284c0 <atexit>
    return verdana_10_4bpp;
 800f492:	4b06      	ldr	r3, [pc, #24]	; (800f4ac <_Z23getFont_verdana_10_4bppv+0x6c>)
}
 800f494:	4618      	mov	r0, r3
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
 800f49a:	bf00      	nop
 800f49c:	20008560 	.word	0x20008560
 800f4a0:	08030168 	.word	0x08030168
 800f4a4:	08029ef8 	.word	0x08029ef8
 800f4a8:	080301e0 	.word	0x080301e0
 800f4ac:	2000853c 	.word	0x2000853c
 800f4b0:	0800f431 	.word	0x0800f431

0800f4b4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 34, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	af00      	add	r7, sp, #0
 800f4b8:	4801      	ldr	r0, [pc, #4]	; (800f4c0 <__tcf_0+0xc>)
 800f4ba:	f7ff fed5 	bl	800f268 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f4be:	bd80      	pop	{r7, pc}
 800f4c0:	20008564 	.word	0x20008564

0800f4c4 <_Z23getFont_verdana_20_4bppv>:
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b08a      	sub	sp, #40	; 0x28
 800f4c8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 34, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800f4ca:	4b15      	ldr	r3, [pc, #84]	; (800f520 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f003 0301 	and.w	r3, r3, #1
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d11f      	bne.n	800f516 <_Z23getFont_verdana_20_4bppv+0x52>
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f4da:	2300      	movs	r3, #0
 800f4dc:	9308      	str	r3, [sp, #32]
 800f4de:	233f      	movs	r3, #63	; 0x3f
 800f4e0:	9307      	str	r3, [sp, #28]
 800f4e2:	4b10      	ldr	r3, [pc, #64]	; (800f524 <_Z23getFont_verdana_20_4bppv+0x60>)
 800f4e4:	9306      	str	r3, [sp, #24]
 800f4e6:	4b10      	ldr	r3, [pc, #64]	; (800f528 <_Z23getFont_verdana_20_4bppv+0x64>)
 800f4e8:	9305      	str	r3, [sp, #20]
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	9304      	str	r3, [sp, #16]
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	9303      	str	r3, [sp, #12]
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	9302      	str	r3, [sp, #8]
 800f4f6:	2304      	movs	r3, #4
 800f4f8:	9301      	str	r3, [sp, #4]
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	9300      	str	r3, [sp, #0]
 800f4fe:	2314      	movs	r3, #20
 800f500:	2222      	movs	r2, #34	; 0x22
 800f502:	490a      	ldr	r1, [pc, #40]	; (800f52c <_Z23getFont_verdana_20_4bppv+0x68>)
 800f504:	480a      	ldr	r0, [pc, #40]	; (800f530 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800f506:	f7ff fefd 	bl	800f304 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f50a:	4b05      	ldr	r3, [pc, #20]	; (800f520 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800f50c:	2201      	movs	r2, #1
 800f50e:	601a      	str	r2, [r3, #0]
 800f510:	4808      	ldr	r0, [pc, #32]	; (800f534 <_Z23getFont_verdana_20_4bppv+0x70>)
 800f512:	f018 ffd5 	bl	80284c0 <atexit>
    return verdana_20_4bpp;
 800f516:	4b06      	ldr	r3, [pc, #24]	; (800f530 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 800f518:	4618      	mov	r0, r3
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	20008588 	.word	0x20008588
 800f524:	0803016c 	.word	0x0803016c
 800f528:	08029efc 	.word	0x08029efc
 800f52c:	080301f0 	.word	0x080301f0
 800f530:	20008564 	.word	0x20008564
 800f534:	0800f4b5 	.word	0x0800f4b5

0800f538 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 18, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800f538:	b580      	push	{r7, lr}
 800f53a:	af00      	add	r7, sp, #0
 800f53c:	4801      	ldr	r0, [pc, #4]	; (800f544 <__tcf_0+0xc>)
 800f53e:	f7ff fe93 	bl	800f268 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f542:	bd80      	pop	{r7, pc}
 800f544:	2000858c 	.word	0x2000858c

0800f548 <_Z23getFont_verdana_40_4bppv>:
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b08a      	sub	sp, #40	; 0x28
 800f54c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 18, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800f54e:	4b15      	ldr	r3, [pc, #84]	; (800f5a4 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f003 0301 	and.w	r3, r3, #1
 800f556:	2b00      	cmp	r3, #0
 800f558:	d11f      	bne.n	800f59a <_Z23getFont_verdana_40_4bppv+0x52>
 800f55a:	2300      	movs	r3, #0
 800f55c:	9309      	str	r3, [sp, #36]	; 0x24
 800f55e:	2300      	movs	r3, #0
 800f560:	9308      	str	r3, [sp, #32]
 800f562:	233f      	movs	r3, #63	; 0x3f
 800f564:	9307      	str	r3, [sp, #28]
 800f566:	4b10      	ldr	r3, [pc, #64]	; (800f5a8 <_Z23getFont_verdana_40_4bppv+0x60>)
 800f568:	9306      	str	r3, [sp, #24]
 800f56a:	4b10      	ldr	r3, [pc, #64]	; (800f5ac <_Z23getFont_verdana_40_4bppv+0x64>)
 800f56c:	9305      	str	r3, [sp, #20]
 800f56e:	2301      	movs	r3, #1
 800f570:	9304      	str	r3, [sp, #16]
 800f572:	2300      	movs	r3, #0
 800f574:	9303      	str	r3, [sp, #12]
 800f576:	2301      	movs	r3, #1
 800f578:	9302      	str	r3, [sp, #8]
 800f57a:	2304      	movs	r3, #4
 800f57c:	9301      	str	r3, [sp, #4]
 800f57e:	2308      	movs	r3, #8
 800f580:	9300      	str	r3, [sp, #0]
 800f582:	2328      	movs	r3, #40	; 0x28
 800f584:	2212      	movs	r2, #18
 800f586:	490a      	ldr	r1, [pc, #40]	; (800f5b0 <_Z23getFont_verdana_40_4bppv+0x68>)
 800f588:	480a      	ldr	r0, [pc, #40]	; (800f5b4 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800f58a:	f7ff febb 	bl	800f304 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f58e:	4b05      	ldr	r3, [pc, #20]	; (800f5a4 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800f590:	2201      	movs	r2, #1
 800f592:	601a      	str	r2, [r3, #0]
 800f594:	4808      	ldr	r0, [pc, #32]	; (800f5b8 <_Z23getFont_verdana_40_4bppv+0x70>)
 800f596:	f018 ff93 	bl	80284c0 <atexit>
    return verdana_40_4bpp;
 800f59a:	4b06      	ldr	r3, [pc, #24]	; (800f5b4 <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}
 800f5a2:	bf00      	nop
 800f5a4:	200085b0 	.word	0x200085b0
 800f5a8:	080301a0 	.word	0x080301a0
 800f5ac:	08029f00 	.word	0x08029f00
 800f5b0:	080303cc 	.word	0x080303cc
 800f5b4:	2000858c 	.word	0x2000858c
 800f5b8:	0800f539 	.word	0x0800f539

0800f5bc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f5bc:	b480      	push	{r7}
 800f5be:	b083      	sub	sp, #12
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	370c      	adds	r7, #12
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d2:	4770      	bx	lr

0800f5d4 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800f5d4:	b480      	push	{r7}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	80da      	strh	r2, [r3, #6]
    }
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	370c      	adds	r7, #12
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr

0800f602 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800f602:	b480      	push	{r7}
 800f604:	b085      	sub	sp, #20
 800f606:	af00      	add	r7, sp, #0
 800f608:	60f8      	str	r0, [r7, #12]
 800f60a:	4608      	mov	r0, r1
 800f60c:	4611      	mov	r1, r2
 800f60e:	461a      	mov	r2, r3
 800f610:	4603      	mov	r3, r0
 800f612:	817b      	strh	r3, [r7, #10]
 800f614:	460b      	mov	r3, r1
 800f616:	813b      	strh	r3, [r7, #8]
 800f618:	4613      	mov	r3, r2
 800f61a:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	897a      	ldrh	r2, [r7, #10]
 800f620:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	893a      	ldrh	r2, [r7, #8]
 800f626:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	88fa      	ldrh	r2, [r7, #6]
 800f62c:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	8b3a      	ldrh	r2, [r7, #24]
 800f632:	80da      	strh	r2, [r3, #6]
    }
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	4618      	mov	r0, r3
 800f638:	3714      	adds	r7, #20
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr

0800f642 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f642:	b480      	push	{r7}
 800f644:	b083      	sub	sp, #12
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
 800f64a:	6039      	str	r1, [r7, #0]
    {
    }
 800f64c:	bf00      	nop
 800f64e:	370c      	adds	r7, #12
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr

0800f658 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f658:	b480      	push	{r7}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
    {
    }
 800f662:	bf00      	nop
 800f664:	370c      	adds	r7, #12
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr

0800f66e <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f66e:	b480      	push	{r7}
 800f670:	b083      	sub	sp, #12
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]
 800f676:	6039      	str	r1, [r7, #0]
    {
    }
 800f678:	bf00      	nop
 800f67a:	370c      	adds	r7, #12
 800f67c:	46bd      	mov	sp, r7
 800f67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f682:	4770      	bx	lr

0800f684 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f684:	b480      	push	{r7}
 800f686:	b083      	sub	sp, #12
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	460b      	mov	r3, r1
 800f68e:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f690:	bf00      	nop
 800f692:	370c      	adds	r7, #12
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr

0800f69c <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f69c:	b480      	push	{r7}
 800f69e:	b083      	sub	sp, #12
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
    {
    }
 800f6a4:	bf00      	nop
 800f6a6:	370c      	adds	r7, #12
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr

0800f6b0 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
    {
    }
 800f6b8:	bf00      	nop
 800f6ba:	370c      	adds	r7, #12
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr

0800f6c4 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
    {
 800f6cc:	4a04      	ldr	r2, [pc, #16]	; (800f6e0 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	601a      	str	r2, [r3, #0]
    }
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	370c      	adds	r7, #12
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr
 800f6e0:	0802a16c 	.word	0x0802a16c

0800f6e4 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
    }
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f7ff ffe9 	bl	800f6c4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f6f2:	2104      	movs	r1, #4
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f018 fe99 	bl	802842c <_ZdlPvj>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3708      	adds	r7, #8
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}

0800f704 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800f704:	b480      	push	{r7}
 800f706:	b083      	sub	sp, #12
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800f70c:	4a07      	ldr	r2, [pc, #28]	; (800f72c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	601a      	str	r2, [r3, #0]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2200      	movs	r2, #0
 800f716:	605a      	str	r2, [r3, #4]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2200      	movs	r2, #0
 800f71c:	721a      	strb	r2, [r3, #8]
    {
    }
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	4618      	mov	r0, r3
 800f722:	370c      	adds	r7, #12
 800f724:	46bd      	mov	sp, r7
 800f726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72a:	4770      	bx	lr
 800f72c:	0802a14c 	.word	0x0802a14c

0800f730 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800f730:	b480      	push	{r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
    {
 800f738:	4a04      	ldr	r2, [pc, #16]	; (800f74c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	601a      	str	r2, [r3, #0]
    }
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	4618      	mov	r0, r3
 800f742:	370c      	adds	r7, #12
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr
 800f74c:	0802a14c 	.word	0x0802a14c

0800f750 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800f750:	b580      	push	{r7, lr}
 800f752:	b082      	sub	sp, #8
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
    }
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f7ff ffe9 	bl	800f730 <_ZN8touchgfx10TransitionD1Ev>
 800f75e:	210c      	movs	r1, #12
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f018 fe63 	bl	802842c <_ZdlPvj>
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	4618      	mov	r0, r3
 800f76a:	3708      	adds	r7, #8
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800f770:	b480      	push	{r7}
 800f772:	b083      	sub	sp, #12
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
    {
    }
 800f778:	bf00      	nop
 800f77a:	370c      	adds	r7, #12
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr

0800f784 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800f784:	b480      	push	{r7}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
    {
    }
 800f78c:	bf00      	nop
 800f78e:	370c      	adds	r7, #12
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr

0800f798 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800f798:	b480      	push	{r7}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
    {
    }
 800f7a0:	bf00      	nop
 800f7a2:	370c      	adds	r7, #12
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr

0800f7ac <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800f7ac:	b480      	push	{r7}
 800f7ae:	b083      	sub	sp, #12
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	683a      	ldr	r2, [r7, #0]
 800f7ba:	605a      	str	r2, [r3, #4]
    }
 800f7bc:	bf00      	nop
 800f7be:	370c      	adds	r7, #12
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c6:	4770      	bx	lr

0800f7c8 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f7c8:	b480      	push	{r7}
 800f7ca:	b083      	sub	sp, #12
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	460b      	mov	r3, r1
 800f7d2:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f7d4:	bf00      	nop
 800f7d6:	370c      	adds	r7, #12
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7de:	4770      	bx	lr

0800f7e0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800f7e0:	b480      	push	{r7}
 800f7e2:	b083      	sub	sp, #12
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
 800f7e8:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	683a      	ldr	r2, [r7, #0]
 800f7ee:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800f7f2:	6810      	ldr	r0, [r2, #0]
 800f7f4:	6851      	ldr	r1, [r2, #4]
 800f7f6:	c303      	stmia	r3!, {r0, r1}
    };
 800f7f8:	bf00      	nop
 800f7fa:	370c      	adds	r7, #12
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr

0800f804 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800f804:	b480      	push	{r7}
 800f806:	b083      	sub	sp, #12
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
    {
 800f80c:	4a04      	ldr	r2, [pc, #16]	; (800f820 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	601a      	str	r2, [r3, #0]
    }
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4618      	mov	r0, r3
 800f816:	370c      	adds	r7, #12
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr
 800f820:	0802a134 	.word	0x0802a134

0800f824 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800f824:	b580      	push	{r7, lr}
 800f826:	b082      	sub	sp, #8
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
    }
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7ff ffe9 	bl	800f804 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f832:	2104      	movs	r1, #4
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f018 fdf9 	bl	802842c <_ZdlPvj>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	4618      	mov	r0, r3
 800f83e:	3708      	adds	r7, #8
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800f844:	b580      	push	{r7, lr}
 800f846:	b084      	sub	sp, #16
 800f848:	af02      	add	r7, sp, #8
 800f84a:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 800f84c:	4a13      	ldr	r2, [pc, #76]	; (800f89c <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	601a      	str	r2, [r3, #0]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	1d18      	adds	r0, r3, #4
 800f856:	2300      	movs	r3, #0
 800f858:	9300      	str	r3, [sp, #0]
 800f85a:	2300      	movs	r3, #0
 800f85c:	2200      	movs	r2, #0
 800f85e:	2100      	movs	r1, #0
 800f860:	f7ff fecf 	bl	800f602 <_ZN8touchgfx4RectC1Essss>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	330c      	adds	r3, #12
 800f868:	4618      	mov	r0, r3
 800f86a:	f7ff feb3 	bl	800f5d4 <_ZN8touchgfx4RectC1Ev>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2200      	movs	r2, #0
 800f872:	615a      	str	r2, [r3, #20]
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2200      	movs	r2, #0
 800f878:	619a      	str	r2, [r3, #24]
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2200      	movs	r2, #0
 800f87e:	61da      	str	r2, [r3, #28]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2200      	movs	r2, #0
 800f884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2201      	movs	r2, #1
 800f88c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	4618      	mov	r0, r3
 800f894:	3708      	adds	r7, #8
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop
 800f89c:	0802d070 	.word	0x0802d070

0800f8a0 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800f8a0:	b480      	push	{r7}
 800f8a2:	b083      	sub	sp, #12
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
    {
 800f8a8:	4a04      	ldr	r2, [pc, #16]	; (800f8bc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	601a      	str	r2, [r3, #0]
    }
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	370c      	adds	r7, #12
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr
 800f8bc:	0802d070 	.word	0x0802d070

0800f8c0 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
    }
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f7ff ffe9 	bl	800f8a0 <_ZN8touchgfx8DrawableD1Ev>
 800f8ce:	2128      	movs	r1, #40	; 0x28
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f018 fdab 	bl	802842c <_ZdlPvj>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3708      	adds	r7, #8
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b084      	sub	sp, #16
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	4608      	mov	r0, r1
 800f8ea:	4611      	mov	r1, r2
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	817b      	strh	r3, [r7, #10]
 800f8f2:	460b      	mov	r3, r1
 800f8f4:	813b      	strh	r3, [r7, #8]
 800f8f6:	4613      	mov	r3, r2
 800f8f8:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	3334      	adds	r3, #52	; 0x34
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f906:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800f90a:	68f8      	ldr	r0, [r7, #12]
 800f90c:	4798      	blx	r3
        setWidth(width);
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	3338      	adds	r3, #56	; 0x38
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f91a:	4611      	mov	r1, r2
 800f91c:	68f8      	ldr	r0, [r7, #12]
 800f91e:	4798      	blx	r3
        setHeight(height);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	333c      	adds	r3, #60	; 0x3c
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800f92c:	4611      	mov	r1, r2
 800f92e:	68f8      	ldr	r0, [r7, #12]
 800f930:	4798      	blx	r3
    }
 800f932:	bf00      	nop
 800f934:	3710      	adds	r7, #16
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}

0800f93a <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800f93a:	b480      	push	{r7}
 800f93c:	b083      	sub	sp, #12
 800f93e:	af00      	add	r7, sp, #0
 800f940:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800f948:	4618      	mov	r0, r3
 800f94a:	370c      	adds	r7, #12
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr

0800f954 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800f962:	4618      	mov	r0, r3
 800f964:	370c      	adds	r7, #12
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr

0800f96e <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800f96e:	b480      	push	{r7}
 800f970:	b083      	sub	sp, #12
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
 800f976:	460b      	mov	r3, r1
 800f978:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	887a      	ldrh	r2, [r7, #2]
 800f97e:	809a      	strh	r2, [r3, #4]
    }
 800f980:	bf00      	nop
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr

0800f98c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800f98c:	b480      	push	{r7}
 800f98e:	b083      	sub	sp, #12
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	460b      	mov	r3, r1
 800f996:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	887a      	ldrh	r2, [r7, #2]
 800f99c:	80da      	strh	r2, [r3, #6]
    }
 800f99e:	bf00      	nop
 800f9a0:	370c      	adds	r7, #12
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr

0800f9aa <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setXY(int16_t x, int16_t y)
 800f9aa:	b580      	push	{r7, lr}
 800f9ac:	b082      	sub	sp, #8
 800f9ae:	af00      	add	r7, sp, #0
 800f9b0:	6078      	str	r0, [r7, #4]
 800f9b2:	460b      	mov	r3, r1
 800f9b4:	807b      	strh	r3, [r7, #2]
 800f9b6:	4613      	mov	r3, r2
 800f9b8:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	332c      	adds	r3, #44	; 0x2c
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f9c6:	4611      	mov	r1, r2
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	4798      	blx	r3
        setY(y);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	3330      	adds	r3, #48	; 0x30
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f9d8:	4611      	mov	r1, r2
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	4798      	blx	r3
    }
 800f9de:	bf00      	nop
 800f9e0:	3708      	adds	r7, #8
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}

0800f9e6 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800f9e6:	b480      	push	{r7}
 800f9e8:	b083      	sub	sp, #12
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	6078      	str	r0, [r7, #4]
 800f9ee:	460b      	mov	r3, r1
 800f9f0:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	887a      	ldrh	r2, [r7, #2]
 800f9f6:	811a      	strh	r2, [r3, #8]
    }
 800f9f8:	bf00      	nop
 800f9fa:	370c      	adds	r7, #12
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa02:	4770      	bx	lr

0800fa04 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800fa04:	b480      	push	{r7}
 800fa06:	b083      	sub	sp, #12
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	887a      	ldrh	r2, [r7, #2]
 800fa14:	815a      	strh	r2, [r3, #10]
    }
 800fa16:	bf00      	nop
 800fa18:	370c      	adds	r7, #12
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa20:	4770      	bx	lr

0800fa22 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800fa22:	b480      	push	{r7}
 800fa24:	b083      	sub	sp, #12
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	6078      	str	r0, [r7, #4]
    {
    }
 800fa2a:	bf00      	nop
 800fa2c:	370c      	adds	r7, #12
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa34:	4770      	bx	lr

0800fa36 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * Defines the event handler interface for ClickEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 800fa36:	b480      	push	{r7}
 800fa38:	b083      	sub	sp, #12
 800fa3a:	af00      	add	r7, sp, #0
 800fa3c:	6078      	str	r0, [r7, #4]
 800fa3e:	6039      	str	r1, [r7, #0]
    {
    }
 800fa40:	bf00      	nop
 800fa42:	370c      	adds	r7, #12
 800fa44:	46bd      	mov	sp, r7
 800fa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4a:	4770      	bx	lr

0800fa4c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * Defines the event handler interface for GestureEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 800fa4c:	b480      	push	{r7}
 800fa4e:	b083      	sub	sp, #12
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	6039      	str	r1, [r7, #0]
    {
    }
 800fa56:	bf00      	nop
 800fa58:	370c      	adds	r7, #12
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr

0800fa62 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * Defines the event handler interface for DragEvents. The default implementation
     * ignores the event. The event is only received if the drawable is touchable and visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 800fa62:	b480      	push	{r7}
 800fa64:	b083      	sub	sp, #12
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	6078      	str	r0, [r7, #4]
 800fa6a:	6039      	str	r1, [r7, #0]
    {
    }
 800fa6c:	bf00      	nop
 800fa6e:	370c      	adds	r7, #12
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr

0800fa78 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800fa78:	b480      	push	{r7}
 800fa7a:	b083      	sub	sp, #12
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
    {
    }
 800fa80:	bf00      	nop
 800fa82:	370c      	adds	r7, #12
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr

0800fa8c <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	370c      	adds	r7, #12
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa4:	4770      	bx	lr

0800faa6 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800faa6:	b480      	push	{r7}
 800faa8:	b083      	sub	sp, #12
 800faaa:	af00      	add	r7, sp, #0
 800faac:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800fab4:	4618      	mov	r0, r3
 800fab6:	370c      	adds	r7, #12
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr

0800fac0 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b082      	sub	sp, #8
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	460b      	mov	r3, r1
 800faca:	807b      	strh	r3, [r7, #2]
 800facc:	4613      	mov	r3, r2
 800face:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	3354      	adds	r3, #84	; 0x54
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	8879      	ldrh	r1, [r7, #2]
 800fada:	687a      	ldr	r2, [r7, #4]
 800fadc:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800fae0:	b292      	uxth	r2, r2
 800fae2:	1a8a      	subs	r2, r1, r2
 800fae4:	b292      	uxth	r2, r2
 800fae6:	b210      	sxth	r0, r2
 800fae8:	8839      	ldrh	r1, [r7, #0]
 800faea:	687a      	ldr	r2, [r7, #4]
 800faec:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800faf0:	b292      	uxth	r2, r2
 800faf2:	1a8a      	subs	r2, r1, r2
 800faf4:	b292      	uxth	r2, r2
 800faf6:	b212      	sxth	r2, r2
 800faf8:	4601      	mov	r1, r0
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	4798      	blx	r3
    }
 800fafe:	bf00      	nop
 800fb00:	3708      	adds	r7, #8
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}

0800fb06 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800fb06:	b480      	push	{r7}
 800fb08:	b083      	sub	sp, #12
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb14:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb1c:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb24:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800fb26:	bf00      	nop
 800fb28:	370c      	adds	r7, #12
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb30:	4770      	bx	lr

0800fb32 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800fb32:	b580      	push	{r7, lr}
 800fb34:	b084      	sub	sp, #16
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	60f8      	str	r0, [r7, #12]
 800fb3a:	60b9      	str	r1, [r7, #8]
 800fb3c:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800fb3e:	68f8      	ldr	r0, [r7, #12]
 800fb40:	f7ff ffe1 	bl	800fb06 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681a      	ldr	r2, [r3, #0]
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	68fa      	ldr	r2, [r7, #12]
 800fb50:	601a      	str	r2, [r3, #0]
    }
 800fb52:	bf00      	nop
 800fb54:	3710      	adds	r7, #16
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
	...

0800fb5c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800fb5c:	b480      	push	{r7}
 800fb5e:	af00      	add	r7, sp, #0
    {
        return instance;
 800fb60:	4b03      	ldr	r3, [pc, #12]	; (800fb70 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800fb62:	681b      	ldr	r3, [r3, #0]
    }
 800fb64:	4618      	mov	r0, r3
 800fb66:	46bd      	mov	sp, r7
 800fb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6c:	4770      	bx	lr
 800fb6e:	bf00      	nop
 800fb70:	2000b41c 	.word	0x2000b41c

0800fb74 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800fb74:	b480      	push	{r7}
 800fb76:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800fb78:	4b0b      	ldr	r3, [pc, #44]	; (800fba8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d008      	beq.n	800fb96 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800fb84:	4b08      	ldr	r3, [pc, #32]	; (800fba8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d003      	beq.n	800fb96 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800fb8e:	4b06      	ldr	r3, [pc, #24]	; (800fba8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb94:	e002      	b.n	800fb9c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800fb96:	4b04      	ldr	r3, [pc, #16]	; (800fba8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	689b      	ldr	r3, [r3, #8]
        }
    }
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba4:	4770      	bx	lr
 800fba6:	bf00      	nop
 800fba8:	2000b41c 	.word	0x2000b41c

0800fbac <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	4a05      	ldr	r2, [pc, #20]	; (800fbcc <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	601a      	str	r2, [r3, #0]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7ff fd81 	bl	800f6c4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3708      	adds	r7, #8
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}
 800fbcc:	0802cf80 	.word	0x0802cf80

0800fbd0 <_ZN8touchgfx11ApplicationD0Ev>:
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f7ff ffe7 	bl	800fbac <_ZN8touchgfx11ApplicationD1Ev>
 800fbde:	f44f 719c 	mov.w	r1, #312	; 0x138
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f018 fc22 	bl	802842c <_ZdlPvj>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	4618      	mov	r0, r3
 800fbec:	3708      	adds	r7, #8
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
	...

0800fbf4 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f00c faf8 	bl	801c1f4 <_ZN8touchgfx11ApplicationC1Ev>
 800fc04:	4a09      	ldr	r2, [pc, #36]	; (800fc2c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	601a      	str	r2, [r3, #0]
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2200      	movs	r2, #0
 800fc16:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	4a04      	ldr	r2, [pc, #16]	; (800fc30 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800fc1e:	6013      	str	r3, [r2, #0]
    }
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	4618      	mov	r0, r3
 800fc24:	3708      	adds	r7, #8
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	0802a0f0 	.word	0x0802a0f0
 800fc30:	2000b4a8 	.word	0x2000b4a8

0800fc34 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f000 f804 	bl	800fc4a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800fc42:	bf00      	nop
 800fc44:	3708      	adds	r7, #8
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}

0800fc4a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800fc4a:	b580      	push	{r7, lr}
 800fc4c:	b082      	sub	sp, #8
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d00f      	beq.n	800fc7c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	330c      	adds	r3, #12
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	4610      	mov	r0, r2
 800fc70:	4798      	blx	r3
 800fc72:	4603      	mov	r3, r0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d001      	beq.n	800fc7c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fc78:	2301      	movs	r3, #1
 800fc7a:	e000      	b.n	800fc7e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d00e      	beq.n	800fca0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	3308      	adds	r3, #8
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	4610      	mov	r0, r2
 800fc96:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800fca0:	bf00      	nop
 800fca2:	3708      	adds	r7, #8
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800fca8:	b480      	push	{r7}
 800fcaa:	b083      	sub	sp, #12
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	683a      	ldr	r2, [r7, #0]
 800fcb6:	601a      	str	r2, [r3, #0]
    }
 800fcb8:	bf00      	nop
 800fcba:	370c      	adds	r7, #12
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc2:	4770      	bx	lr

0800fcc4 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b082      	sub	sp, #8
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	4a05      	ldr	r2, [pc, #20]	; (800fce4 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	601a      	str	r2, [r3, #0]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7ff ff69 	bl	800fbac <_ZN8touchgfx11ApplicationD1Ev>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3708      	adds	r7, #8
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	0802a0f0 	.word	0x0802a0f0

0800fce8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f7ff ffe7 	bl	800fcc4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fcf6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f018 fb96 	bl	802842c <_ZdlPvj>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	4618      	mov	r0, r3
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}
	...

0800fd0c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	4a08      	ldr	r2, [pc, #32]	; (800fd38 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	601a      	str	r2, [r3, #0]
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800fd20:	4618      	mov	r0, r3
 800fd22:	f001 fc97 	bl	8011654 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7ff ffcb 	bl	800fcc4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	4618      	mov	r0, r3
 800fd32:	3708      	adds	r7, #8
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	0802a094 	.word	0x0802a094

0800fd3c <_ZN23FrontendApplicationBaseD0Ev>:
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f7ff ffe1 	bl	800fd0c <_ZN23FrontendApplicationBaseD1Ev>
 800fd4a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f018 fb6c 	bl	802842c <_ZdlPvj>
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	4618      	mov	r0, r3
 800fd58:	3708      	adds	r7, #8
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}

0800fd5e <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800fd5e:	b480      	push	{r7}
 800fd60:	b083      	sub	sp, #12
 800fd62:	af00      	add	r7, sp, #0
 800fd64:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2201      	movs	r2, #1
 800fd6a:	721a      	strb	r2, [r3, #8]
    }
 800fd6c:	bf00      	nop
 800fd6e:	370c      	adds	r7, #12
 800fd70:	46bd      	mov	sp, r7
 800fd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd76:	4770      	bx	lr

0800fd78 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	60f8      	str	r0, [r7, #12]
 800fd80:	607b      	str	r3, [r7, #4]
 800fd82:	460b      	mov	r3, r1
 800fd84:	817b      	strh	r3, [r7, #10]
 800fd86:	4613      	mov	r3, r2
 800fd88:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7ff fe7d 	bl	800fa8c <_ZNK8touchgfx8Drawable9isVisibleEv>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d008      	beq.n	800fdaa <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7ff fe83 	bl	800faa6 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d001      	beq.n	800fdaa <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800fda6:	2301      	movs	r3, #1
 800fda8:	e000      	b.n	800fdac <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800fdaa:	2300      	movs	r3, #0
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d002      	beq.n	800fdb6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800fdb0:	68fa      	ldr	r2, [r7, #12]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	601a      	str	r2, [r3, #0]
        }
    }
 800fdb6:	bf00      	nop
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}

0800fdbe <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800fdbe:	b480      	push	{r7}
 800fdc0:	b083      	sub	sp, #12
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
 800fdc6:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	683a      	ldr	r2, [r7, #0]
 800fdcc:	605a      	str	r2, [r3, #4]
    }
 800fdce:	bf00      	nop
 800fdd0:	370c      	adds	r7, #12
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr
	...

0800fddc <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b082      	sub	sp, #8
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7ff fd2c 	bl	800f844 <_ZN8touchgfx8DrawableC1Ev>
 800fdec:	4a03      	ldr	r2, [pc, #12]	; (800fdfc <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	601a      	str	r2, [r3, #0]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3708      	adds	r7, #8
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}
 800fdfc:	0802a00c 	.word	0x0802a00c

0800fe00 <_ZN8touchgfx6WidgetD1Ev>:
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b082      	sub	sp, #8
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	4a05      	ldr	r2, [pc, #20]	; (800fe20 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	601a      	str	r2, [r3, #0]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7ff fd45 	bl	800f8a0 <_ZN8touchgfx8DrawableD1Ev>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3708      	adds	r7, #8
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	0802a00c 	.word	0x0802a00c

0800fe24 <_ZN8touchgfx6WidgetD0Ev>:
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b082      	sub	sp, #8
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7ff ffe7 	bl	800fe00 <_ZN8touchgfx6WidgetD1Ev>
 800fe32:	2128      	movs	r1, #40	; 0x28
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f018 faf9 	bl	802842c <_ZdlPvj>
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	3708      	adds	r7, #8
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}

0800fe44 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/pong_screen/PongView.hpp>
#include <gui/pong_screen/PongPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b084      	sub	sp, #16
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	60f8      	str	r0, [r7, #12]
 800fe4c:	60b9      	str	r1, [r7, #8]
 800fe4e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7ff fece 	bl	800fbf4 <_ZN8touchgfx14MVPApplicationC1Ev>
 800fe58:	4a13      	ldr	r2, [pc, #76]	; (800fea8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	601a      	str	r2, [r3, #0]
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800fe64:	4618      	mov	r0, r3
 800fe66:	f000 f9b7 	bl	80101d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	687a      	ldr	r2, [r7, #4]
 800fe6e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	68ba      	ldr	r2, [r7, #8]
 800fe76:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800fe7a:	f7ff fe6f 	bl	800fb5c <_ZN8touchgfx3HAL11getInstanceEv>
 800fe7e:	4602      	mov	r2, r0
 800fe80:	6813      	ldr	r3, [r2, #0]
 800fe82:	3308      	adds	r3, #8
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	2100      	movs	r1, #0
 800fe88:	4610      	mov	r0, r2
 800fe8a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800fe8c:	2000      	movs	r0, #0
 800fe8e:	f005 f81b 	bl	8014ec8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800fe92:	f7ff fe6f 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 800fe96:	4603      	mov	r3, r0
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f011 ffcc 	bl	8021e36 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	4618      	mov	r0, r3
 800fea2:	3710      	adds	r7, #16
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}
 800fea8:	0802a094 	.word	0x0802a094

0800feac <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800feac:	b480      	push	{r7}
 800feae:	b083      	sub	sp, #12
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	6039      	str	r1, [r7, #0]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4618      	mov	r0, r3
 800feba:	370c      	adds	r7, #12
 800febc:	46bd      	mov	sp, r7
 800febe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec2:	4770      	bx	lr

0800fec4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	6039      	str	r1, [r7, #0]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	683a      	ldr	r2, [r7, #0]
 800fed2:	4611      	mov	r1, r2
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7ff ffe9 	bl	800feac <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	685a      	ldr	r2, [r3, #4]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	605a      	str	r2, [r3, #4]
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	683a      	ldr	r2, [r7, #0]
 800fee6:	3308      	adds	r3, #8
 800fee8:	3208      	adds	r2, #8
 800feea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800feee:	e883 0003 	stmia.w	r3, {r0, r1}
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	4618      	mov	r0, r3
 800fef6:	3708      	adds	r7, #8
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800fefc:	b590      	push	{r4, r7, lr}
 800fefe:	b089      	sub	sp, #36	; 0x24
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ff0a:	4b10      	ldr	r3, [pc, #64]	; (800ff4c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800ff0c:	61bb      	str	r3, [r7, #24]
 800ff0e:	2300      	movs	r3, #0
 800ff10:	61fb      	str	r3, [r7, #28]
 800ff12:	f107 0008 	add.w	r0, r7, #8
 800ff16:	f107 0318 	add.w	r3, r7, #24
 800ff1a:	cb0c      	ldmia	r3, {r2, r3}
 800ff1c:	6879      	ldr	r1, [r7, #4]
 800ff1e:	f000 f977 	bl	8010210 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ff22:	f107 0308 	add.w	r3, r7, #8
 800ff26:	4619      	mov	r1, r3
 800ff28:	4620      	mov	r0, r4
 800ff2a:	f7ff ffcb 	bl	800fec4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ff2e:	f107 0308 	add.w	r3, r7, #8
 800ff32:	4618      	mov	r0, r3
 800ff34:	f001 fb8e 	bl	8011654 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ff44:	bf00      	nop
 800ff46:	3724      	adds	r7, #36	; 0x24
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd90      	pop	{r4, r7, pc}
 800ff4c:	0800ff51 	.word	0x0800ff51

0800ff50 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af02      	add	r7, sp, #8
 800ff56:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ff64:	461a      	mov	r2, r3
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ff6c:	9300      	str	r3, [sp, #0]
 800ff6e:	4b04      	ldr	r3, [pc, #16]	; (800ff80 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800ff70:	4804      	ldr	r0, [pc, #16]	; (800ff84 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800ff72:	f000 f97f 	bl	8010274 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ff76:	bf00      	nop
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	2000b49c 	.word	0x2000b49c
 800ff84:	2000b498 	.word	0x2000b498

0800ff88 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv>:

void FrontendApplicationBase::gotoscreenScreenSlideTransitionEast()
{
 800ff88:	b590      	push	{r4, r7, lr}
 800ff8a:	b089      	sub	sp, #36	; 0x24
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenSlideTransitionEastImpl);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ff96:	4b10      	ldr	r3, [pc, #64]	; (800ffd8 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv+0x50>)
 800ff98:	61bb      	str	r3, [r7, #24]
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	61fb      	str	r3, [r7, #28]
 800ff9e:	f107 0008 	add.w	r0, r7, #8
 800ffa2:	f107 0318 	add.w	r3, r7, #24
 800ffa6:	cb0c      	ldmia	r3, {r2, r3}
 800ffa8:	6879      	ldr	r1, [r7, #4]
 800ffaa:	f000 f931 	bl	8010210 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ffae:	f107 0308 	add.w	r3, r7, #8
 800ffb2:	4619      	mov	r1, r3
 800ffb4:	4620      	mov	r0, r4
 800ffb6:	f7ff ff85 	bl	800fec4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ffba:	f107 0308 	add.w	r3, r7, #8
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f001 fb48 	bl	8011654 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ffd0:	bf00      	nop
 800ffd2:	3724      	adds	r7, #36	; 0x24
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd90      	pop	{r4, r7, pc}
 800ffd8:	0800ffdd 	.word	0x0800ffdd

0800ffdc <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoscreenScreenSlideTransitionEastImpl()
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b084      	sub	sp, #16
 800ffe0:	af02      	add	r7, sp, #8
 800ffe2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800fff0:	461a      	mov	r2, r3
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fff8:	9300      	str	r3, [sp, #0]
 800fffa:	4b04      	ldr	r3, [pc, #16]	; (801000c <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv+0x30>)
 800fffc:	4804      	ldr	r0, [pc, #16]	; (8010010 <_ZN23FrontendApplicationBase39gotoscreenScreenSlideTransitionEastImplEv+0x34>)
 800fffe:	f000 fa65 	bl	80104cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8010002:	bf00      	nop
 8010004:	3708      	adds	r7, #8
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
 801000a:	bf00      	nop
 801000c:	2000b49c 	.word	0x2000b49c
 8010010:	2000b498 	.word	0x2000b498

08010014 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
 8010014:	b590      	push	{r4, r7, lr}
 8010016:	b089      	sub	sp, #36	; 0x24
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8010022:	4b10      	ldr	r3, [pc, #64]	; (8010064 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x50>)
 8010024:	61bb      	str	r3, [r7, #24]
 8010026:	2300      	movs	r3, #0
 8010028:	61fb      	str	r3, [r7, #28]
 801002a:	f107 0008 	add.w	r0, r7, #8
 801002e:	f107 0318 	add.w	r3, r7, #24
 8010032:	cb0c      	ldmia	r3, {r2, r3}
 8010034:	6879      	ldr	r1, [r7, #4]
 8010036:	f000 f8eb 	bl	8010210 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801003a:	f107 0308 	add.w	r3, r7, #8
 801003e:	4619      	mov	r1, r3
 8010040:	4620      	mov	r0, r4
 8010042:	f7ff ff3f 	bl	800fec4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8010046:	f107 0308 	add.w	r3, r7, #8
 801004a:	4618      	mov	r0, r3
 801004c:	f001 fb02 	bl	8011654 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 801005c:	bf00      	nop
 801005e:	3724      	adds	r7, #36	; 0x24
 8010060:	46bd      	mov	sp, r7
 8010062:	bd90      	pop	{r4, r7, pc}
 8010064:	08010069 	.word	0x08010069

08010068 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	af02      	add	r7, sp, #8
 801006e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 801007c:	461a      	mov	r2, r3
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8010084:	9300      	str	r3, [sp, #0]
 8010086:	4b04      	ldr	r3, [pc, #16]	; (8010098 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x30>)
 8010088:	4804      	ldr	r0, [pc, #16]	; (801009c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x34>)
 801008a:	f000 fb4b 	bl	8010724 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801008e:	bf00      	nop
 8010090:	3708      	adds	r7, #8
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	2000b49c 	.word	0x2000b49c
 801009c:	2000b498 	.word	0x2000b498

080100a0 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>:

// Screen3

void FrontendApplicationBase::gotoScreen3ScreenNoTransition()
{
 80100a0:	b590      	push	{r4, r7, lr}
 80100a2:	b089      	sub	sp, #36	; 0x24
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen3ScreenNoTransitionImpl);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80100ae:	4b10      	ldr	r3, [pc, #64]	; (80100f0 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv+0x50>)
 80100b0:	61bb      	str	r3, [r7, #24]
 80100b2:	2300      	movs	r3, #0
 80100b4:	61fb      	str	r3, [r7, #28]
 80100b6:	f107 0008 	add.w	r0, r7, #8
 80100ba:	f107 0318 	add.w	r3, r7, #24
 80100be:	cb0c      	ldmia	r3, {r2, r3}
 80100c0:	6879      	ldr	r1, [r7, #4]
 80100c2:	f000 f8a5 	bl	8010210 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80100c6:	f107 0308 	add.w	r3, r7, #8
 80100ca:	4619      	mov	r1, r3
 80100cc:	4620      	mov	r0, r4
 80100ce:	f7ff fef9 	bl	800fec4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80100d2:	f107 0308 	add.w	r3, r7, #8
 80100d6:	4618      	mov	r0, r3
 80100d8:	f001 fabc 	bl	8011654 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80100e8:	bf00      	nop
 80100ea:	3724      	adds	r7, #36	; 0x24
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd90      	pop	{r4, r7, pc}
 80100f0:	080100f5 	.word	0x080100f5

080100f4 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen3ScreenNoTransitionImpl()
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b084      	sub	sp, #16
 80100f8:	af02      	add	r7, sp, #8
 80100fa:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen3View, Screen3Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8010108:	461a      	mov	r2, r3
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8010110:	9300      	str	r3, [sp, #0]
 8010112:	4b04      	ldr	r3, [pc, #16]	; (8010124 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x30>)
 8010114:	4804      	ldr	r0, [pc, #16]	; (8010128 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x34>)
 8010116:	f000 fc31 	bl	801097c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801011a:	bf00      	nop
 801011c:	3708      	adds	r7, #8
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
 8010122:	bf00      	nop
 8010124:	2000b49c 	.word	0x2000b49c
 8010128:	2000b498 	.word	0x2000b498

0801012c <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv>:

// Pong

void FrontendApplicationBase::gotoPongScreenCoverTransitionEast()
{
 801012c:	b590      	push	{r4, r7, lr}
 801012e:	b089      	sub	sp, #36	; 0x24
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoPongScreenCoverTransitionEastImpl);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 801013a:	4b10      	ldr	r3, [pc, #64]	; (801017c <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv+0x50>)
 801013c:	61bb      	str	r3, [r7, #24]
 801013e:	2300      	movs	r3, #0
 8010140:	61fb      	str	r3, [r7, #28]
 8010142:	f107 0008 	add.w	r0, r7, #8
 8010146:	f107 0318 	add.w	r3, r7, #24
 801014a:	cb0c      	ldmia	r3, {r2, r3}
 801014c:	6879      	ldr	r1, [r7, #4]
 801014e:	f000 f85f 	bl	8010210 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8010152:	f107 0308 	add.w	r3, r7, #8
 8010156:	4619      	mov	r1, r3
 8010158:	4620      	mov	r0, r4
 801015a:	f7ff feb3 	bl	800fec4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801015e:	f107 0308 	add.w	r3, r7, #8
 8010162:	4618      	mov	r0, r3
 8010164:	f001 fa76 	bl	8011654 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8010174:	bf00      	nop
 8010176:	3724      	adds	r7, #36	; 0x24
 8010178:	46bd      	mov	sp, r7
 801017a:	bd90      	pop	{r4, r7, pc}
 801017c:	08010181 	.word	0x08010181

08010180 <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoPongScreenCoverTransitionEastImpl()
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b084      	sub	sp, #16
 8010184:	af02      	add	r7, sp, #8
 8010186:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<PongView, PongPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8010194:	461a      	mov	r2, r3
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 801019c:	9300      	str	r3, [sp, #0]
 801019e:	4b04      	ldr	r3, [pc, #16]	; (80101b0 <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv+0x30>)
 80101a0:	4804      	ldr	r0, [pc, #16]	; (80101b4 <_ZN23FrontendApplicationBase37gotoPongScreenCoverTransitionEastImplEv+0x34>)
 80101a2:	f000 fd17 	bl	8010bd4 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80101a6:	bf00      	nop
 80101a8:	3708      	adds	r7, #8
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	bf00      	nop
 80101b0:	2000b49c 	.word	0x2000b49c
 80101b4:	2000b498 	.word	0x2000b498

080101b8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80101b8:	b480      	push	{r7}
 80101ba:	b083      	sub	sp, #12
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
 80101c0:	4a04      	ldr	r2, [pc, #16]	; (80101d4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	601a      	str	r2, [r3, #0]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	4618      	mov	r0, r3
 80101ca:	370c      	adds	r7, #12
 80101cc:	46bd      	mov	sp, r7
 80101ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d2:	4770      	bx	lr
 80101d4:	0802a134 	.word	0x0802a134

080101d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7ff ffe8 	bl	80101b8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80101e8:	4a08      	ldr	r2, [pc, #32]	; (801020c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	601a      	str	r2, [r3, #0]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2200      	movs	r2, #0
 80101f2:	605a      	str	r2, [r3, #4]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2200      	movs	r2, #0
 80101f8:	609a      	str	r2, [r3, #8]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2200      	movs	r2, #0
 80101fe:	60da      	str	r2, [r3, #12]
    {
    }
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	4618      	mov	r0, r3
 8010204:	3708      	adds	r7, #8
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}
 801020a:	bf00      	nop
 801020c:	0802a0d8 	.word	0x0802a0d8

08010210 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8010210:	b580      	push	{r7, lr}
 8010212:	b084      	sub	sp, #16
 8010214:	af00      	add	r7, sp, #0
 8010216:	60f8      	str	r0, [r7, #12]
 8010218:	60b9      	str	r1, [r7, #8]
 801021a:	4639      	mov	r1, r7
 801021c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	4618      	mov	r0, r3
 8010224:	f7ff ffc8 	bl	80101b8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8010228:	4a08      	ldr	r2, [pc, #32]	; (801024c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	68ba      	ldr	r2, [r7, #8]
 8010232:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	3308      	adds	r3, #8
 8010238:	463a      	mov	r2, r7
 801023a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801023e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	4618      	mov	r0, r3
 8010246:	3710      	adds	r7, #16
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}
 801024c:	0802a0d8 	.word	0x0802a0d8

08010250 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8010250:	b580      	push	{r7, lr}
 8010252:	b082      	sub	sp, #8
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	4618      	mov	r0, r3
 801025c:	f7ff fa52 	bl	800f704 <_ZN8touchgfx10TransitionC1Ev>
 8010260:	4a03      	ldr	r2, [pc, #12]	; (8010270 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	601a      	str	r2, [r3, #0]
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	4618      	mov	r0, r3
 801026a:	3708      	adds	r7, #8
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}
 8010270:	0802a074 	.word	0x0802a074

08010274 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010274:	b590      	push	{r4, r7, lr}
 8010276:	b08f      	sub	sp, #60	; 0x3c
 8010278:	af00      	add	r7, sp, #0
 801027a:	60f8      	str	r0, [r7, #12]
 801027c:	60b9      	str	r1, [r7, #8]
 801027e:	607a      	str	r2, [r7, #4]
 8010280:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	689a      	ldr	r2, [r3, #8]
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	689b      	ldr	r3, [r3, #8]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	3320      	adds	r3, #32
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	4610      	mov	r0, r2
 8010292:	4798      	blx	r3
 8010294:	4603      	mov	r3, r0
 8010296:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 801029a:	d205      	bcs.n	80102a8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 801029c:	4b86      	ldr	r3, [pc, #536]	; (80104b8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 801029e:	4a87      	ldr	r2, [pc, #540]	; (80104bc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 80102a0:	21a7      	movs	r1, #167	; 0xa7
 80102a2:	4887      	ldr	r0, [pc, #540]	; (80104c0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80102a4:	f018 f8ee 	bl	8028484 <__assert_func>
 80102a8:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	685a      	ldr	r2, [r3, #4]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	3320      	adds	r3, #32
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	4610      	mov	r0, r2
 80102ba:	4798      	blx	r3
 80102bc:	4603      	mov	r3, r0
 80102be:	2b0f      	cmp	r3, #15
 80102c0:	d805      	bhi.n	80102ce <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80102c2:	4b80      	ldr	r3, [pc, #512]	; (80104c4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 80102c4:	4a7d      	ldr	r2, [pc, #500]	; (80104bc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 80102c6:	21a8      	movs	r1, #168	; 0xa8
 80102c8:	487d      	ldr	r0, [pc, #500]	; (80104c0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80102ca:	f018 f8db 	bl	8028484 <__assert_func>
 80102ce:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	68da      	ldr	r2, [r3, #12]
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	68db      	ldr	r3, [r3, #12]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	3320      	adds	r3, #32
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	4610      	mov	r0, r2
 80102e0:	4798      	blx	r3
 80102e2:	4603      	mov	r3, r0
 80102e4:	2b0b      	cmp	r3, #11
 80102e6:	d805      	bhi.n	80102f4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80102e8:	4b77      	ldr	r3, [pc, #476]	; (80104c8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 80102ea:	4a74      	ldr	r2, [pc, #464]	; (80104bc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 80102ec:	21a9      	movs	r1, #169	; 0xa9
 80102ee:	4874      	ldr	r0, [pc, #464]	; (80104c0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80102f0:	f018 f8c8 	bl	8028484 <__assert_func>
 80102f4:	bf00      	nop
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	627b      	str	r3, [r7, #36]	; 0x24
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8010302:	f00b ff3f 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 8010306:	4603      	mov	r3, r0
 8010308:	4618      	mov	r0, r3
 801030a:	f00b ff57 	bl	801c1bc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 801030e:	6a3b      	ldr	r3, [r7, #32]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d008      	beq.n	8010328 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8010316:	6a3b      	ldr	r3, [r7, #32]
 8010318:	681a      	ldr	r2, [r3, #0]
 801031a:	6a3b      	ldr	r3, [r7, #32]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	330c      	adds	r3, #12
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	4610      	mov	r0, r2
 8010326:	4798      	blx	r3
    if (*currentTrans)
 8010328:	6a3b      	ldr	r3, [r7, #32]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d007      	beq.n	8010340 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8010330:	6a3b      	ldr	r3, [r7, #32]
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	6a3b      	ldr	r3, [r7, #32]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	4610      	mov	r0, r2
 801033e:	4798      	blx	r3
    if (*currentScreen)
 8010340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d008      	beq.n	801035a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8010348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801034a:	681a      	ldr	r2, [r3, #0]
 801034c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	3314      	adds	r3, #20
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	4610      	mov	r0, r2
 8010358:	4798      	blx	r3
    if (*currentPresenter)
 801035a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d008      	beq.n	8010374 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8010362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010364:	681a      	ldr	r2, [r3, #0]
 8010366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	3304      	adds	r3, #4
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	4610      	mov	r0, r2
 8010372:	4798      	blx	r3
    if (*currentScreen)
 8010374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d007      	beq.n	801038c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 801037c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801037e:	681a      	ldr	r2, [r3, #0]
 8010380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	4610      	mov	r0, r2
 801038a:	4798      	blx	r3
    if (*currentPresenter)
 801038c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d008      	beq.n	80103a6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8010394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010396:	681a      	ldr	r2, [r3, #0]
 8010398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	3308      	adds	r3, #8
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	4610      	mov	r0, r2
 80103a4:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	68db      	ldr	r3, [r3, #12]
 80103aa:	2100      	movs	r1, #0
 80103ac:	4618      	mov	r0, r3
 80103ae:	f000 fd3f 	bl	8010e30 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80103b2:	4603      	mov	r3, r0
 80103b4:	4619      	mov	r1, r3
 80103b6:	200c      	movs	r0, #12
 80103b8:	f7ff f900 	bl	800f5bc <_ZnwjPv>
 80103bc:	4604      	mov	r4, r0
 80103be:	2c00      	cmp	r4, #0
 80103c0:	d004      	beq.n	80103cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 80103c2:	4620      	mov	r0, r4
 80103c4:	f7ff ff44 	bl	8010250 <_ZN8touchgfx12NoTransitionC1Ev>
 80103c8:	4623      	mov	r3, r4
 80103ca:	e000      	b.n	80103ce <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 80103cc:	4623      	mov	r3, r4
 80103ce:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	689b      	ldr	r3, [r3, #8]
 80103d4:	2100      	movs	r1, #0
 80103d6:	4618      	mov	r0, r3
 80103d8:	f000 fd3d 	bl	8010e56 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 80103dc:	4603      	mov	r3, r0
 80103de:	4619      	mov	r1, r3
 80103e0:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80103e4:	f7ff f8ea 	bl	800f5bc <_ZnwjPv>
 80103e8:	4604      	mov	r4, r0
 80103ea:	2c00      	cmp	r4, #0
 80103ec:	d004      	beq.n	80103f8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 80103ee:	4620      	mov	r0, r4
 80103f0:	f005 fc20 	bl	8015c34 <_ZN10screenViewC1Ev>
 80103f4:	4623      	mov	r3, r4
 80103f6:	e000      	b.n	80103fa <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 80103f8:	4623      	mov	r3, r4
 80103fa:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	685b      	ldr	r3, [r3, #4]
 8010400:	2100      	movs	r1, #0
 8010402:	4618      	mov	r0, r3
 8010404:	f000 fd3a 	bl	8010e7c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 8010408:	4603      	mov	r3, r0
 801040a:	4619      	mov	r1, r3
 801040c:	2010      	movs	r0, #16
 801040e:	f7ff f8d5 	bl	800f5bc <_ZnwjPv>
 8010412:	4604      	mov	r4, r0
 8010414:	2c00      	cmp	r4, #0
 8010416:	d005      	beq.n	8010424 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 8010418:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801041a:	4620      	mov	r0, r4
 801041c:	f005 fbb2 	bl	8015b84 <_ZN15screenPresenterC1ER10screenView>
 8010420:	4623      	mov	r3, r4
 8010422:	e000      	b.n	8010426 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8010424:	4623      	mov	r3, r4
 8010426:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801042c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010432:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010438:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801043a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801043c:	2b00      	cmp	r3, #0
 801043e:	d002      	beq.n	8010446 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 8010440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010442:	3304      	adds	r3, #4
 8010444:	e000      	b.n	8010448 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 8010446:	2300      	movs	r3, #0
 8010448:	4619      	mov	r1, r3
 801044a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801044c:	f7ff fc2c 	bl	800fca8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010452:	3304      	adds	r3, #4
 8010454:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010456:	4618      	mov	r0, r3
 8010458:	f7ff fcb1 	bl	800fdbe <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801045c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801045e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010460:	4618      	mov	r0, r3
 8010462:	f000 fd1e 	bl	8010ea2 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 8010466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010468:	61fb      	str	r3, [r7, #28]
 801046a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046c:	61bb      	str	r3, [r7, #24]
 801046e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010470:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010472:	69fb      	ldr	r3, [r7, #28]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	330c      	adds	r3, #12
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	69f8      	ldr	r0, [r7, #28]
 801047c:	4798      	blx	r3
    newPresenter->activate();
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	69b8      	ldr	r0, [r7, #24]
 8010486:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010488:	6979      	ldr	r1, [r7, #20]
 801048a:	69f8      	ldr	r0, [r7, #28]
 801048c:	f00c ffac 	bl	801d3e8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	3310      	adds	r3, #16
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	6978      	ldr	r0, [r7, #20]
 801049a:	4798      	blx	r3
    Application::getInstance()->draw();
 801049c:	f00b fe72 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 80104a0:	4602      	mov	r2, r0
 80104a2:	6813      	ldr	r3, [r2, #0]
 80104a4:	3330      	adds	r3, #48	; 0x30
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4610      	mov	r0, r2
 80104aa:	4798      	blx	r3

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80104ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	373c      	adds	r7, #60	; 0x3c
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd90      	pop	{r4, r7, pc}
 80104b6:	bf00      	nop
 80104b8:	080294e8 	.word	0x080294e8
 80104bc:	0802a18c 	.word	0x0802a18c
 80104c0:	08029578 	.word	0x08029578
 80104c4:	080295bc 	.word	0x080295bc
 80104c8:	08029660 	.word	0x08029660

080104cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80104cc:	b590      	push	{r4, r7, lr}
 80104ce:	b08f      	sub	sp, #60	; 0x3c
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	60f8      	str	r0, [r7, #12]
 80104d4:	60b9      	str	r1, [r7, #8]
 80104d6:	607a      	str	r2, [r7, #4]
 80104d8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	689a      	ldr	r2, [r3, #8]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	689b      	ldr	r3, [r3, #8]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	3320      	adds	r3, #32
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	4610      	mov	r0, r2
 80104ea:	4798      	blx	r3
 80104ec:	4603      	mov	r3, r0
 80104ee:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 80104f2:	d205      	bcs.n	8010500 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80104f4:	4b86      	ldr	r3, [pc, #536]	; (8010710 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 80104f6:	4a87      	ldr	r2, [pc, #540]	; (8010714 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 80104f8:	21a7      	movs	r1, #167	; 0xa7
 80104fa:	4887      	ldr	r0, [pc, #540]	; (8010718 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80104fc:	f017 ffc2 	bl	8028484 <__assert_func>
 8010500:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	685a      	ldr	r2, [r3, #4]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	3320      	adds	r3, #32
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	4610      	mov	r0, r2
 8010512:	4798      	blx	r3
 8010514:	4603      	mov	r3, r0
 8010516:	2b0f      	cmp	r3, #15
 8010518:	d805      	bhi.n	8010526 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801051a:	4b80      	ldr	r3, [pc, #512]	; (801071c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 801051c:	4a7d      	ldr	r2, [pc, #500]	; (8010714 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 801051e:	21a8      	movs	r1, #168	; 0xa8
 8010520:	487d      	ldr	r0, [pc, #500]	; (8010718 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010522:	f017 ffaf 	bl	8028484 <__assert_func>
 8010526:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	68da      	ldr	r2, [r3, #12]
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	68db      	ldr	r3, [r3, #12]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	3320      	adds	r3, #32
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	4610      	mov	r0, r2
 8010538:	4798      	blx	r3
 801053a:	4603      	mov	r3, r0
 801053c:	2b53      	cmp	r3, #83	; 0x53
 801053e:	d805      	bhi.n	801054c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8010540:	4b77      	ldr	r3, [pc, #476]	; (8010720 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 8010542:	4a74      	ldr	r2, [pc, #464]	; (8010714 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010544:	21a9      	movs	r1, #169	; 0xa9
 8010546:	4874      	ldr	r0, [pc, #464]	; (8010718 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010548:	f017 ff9c 	bl	8028484 <__assert_func>
 801054c:	bf00      	nop
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	62bb      	str	r3, [r7, #40]	; 0x28
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	627b      	str	r3, [r7, #36]	; 0x24
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 801055a:	f00b fe13 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 801055e:	4603      	mov	r3, r0
 8010560:	4618      	mov	r0, r3
 8010562:	f00b fe2b 	bl	801c1bc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8010566:	6a3b      	ldr	r3, [r7, #32]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d008      	beq.n	8010580 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 801056e:	6a3b      	ldr	r3, [r7, #32]
 8010570:	681a      	ldr	r2, [r3, #0]
 8010572:	6a3b      	ldr	r3, [r7, #32]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	330c      	adds	r3, #12
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	4610      	mov	r0, r2
 801057e:	4798      	blx	r3
    if (*currentTrans)
 8010580:	6a3b      	ldr	r3, [r7, #32]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d007      	beq.n	8010598 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8010588:	6a3b      	ldr	r3, [r7, #32]
 801058a:	681a      	ldr	r2, [r3, #0]
 801058c:	6a3b      	ldr	r3, [r7, #32]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	4610      	mov	r0, r2
 8010596:	4798      	blx	r3
    if (*currentScreen)
 8010598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d008      	beq.n	80105b2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 80105a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	3314      	adds	r3, #20
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	4610      	mov	r0, r2
 80105b0:	4798      	blx	r3
    if (*currentPresenter)
 80105b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d008      	beq.n	80105cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 80105ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105bc:	681a      	ldr	r2, [r3, #0]
 80105be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	3304      	adds	r3, #4
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	4610      	mov	r0, r2
 80105ca:	4798      	blx	r3
    if (*currentScreen)
 80105cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d007      	beq.n	80105e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 80105d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d6:	681a      	ldr	r2, [r3, #0]
 80105d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4610      	mov	r0, r2
 80105e2:	4798      	blx	r3
    if (*currentPresenter)
 80105e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d008      	beq.n	80105fe <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 80105ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ee:	681a      	ldr	r2, [r3, #0]
 80105f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	3308      	adds	r3, #8
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	4610      	mov	r0, r2
 80105fc:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	68db      	ldr	r3, [r3, #12]
 8010602:	2100      	movs	r1, #0
 8010604:	4618      	mov	r0, r3
 8010606:	f000 fc5a 	bl	8010ebe <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 801060a:	4603      	mov	r3, r0
 801060c:	4619      	mov	r1, r3
 801060e:	2054      	movs	r0, #84	; 0x54
 8010610:	f7fe ffd4 	bl	800f5bc <_ZnwjPv>
 8010614:	4604      	mov	r4, r0
 8010616:	2c00      	cmp	r4, #0
 8010618:	d005      	beq.n	8010626 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 801061a:	2114      	movs	r1, #20
 801061c:	4620      	mov	r0, r4
 801061e:	f000 fca5 	bl	8010f6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 8010622:	4623      	mov	r3, r4
 8010624:	e000      	b.n	8010628 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 8010626:	4623      	mov	r3, r4
 8010628:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	689b      	ldr	r3, [r3, #8]
 801062e:	2100      	movs	r1, #0
 8010630:	4618      	mov	r0, r3
 8010632:	f000 fc10 	bl	8010e56 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 8010636:	4603      	mov	r3, r0
 8010638:	4619      	mov	r1, r3
 801063a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 801063e:	f7fe ffbd 	bl	800f5bc <_ZnwjPv>
 8010642:	4604      	mov	r4, r0
 8010644:	2c00      	cmp	r4, #0
 8010646:	d004      	beq.n	8010652 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 8010648:	4620      	mov	r0, r4
 801064a:	f005 faf3 	bl	8015c34 <_ZN10screenViewC1Ev>
 801064e:	4623      	mov	r3, r4
 8010650:	e000      	b.n	8010654 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 8010652:	4623      	mov	r3, r4
 8010654:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	2100      	movs	r1, #0
 801065c:	4618      	mov	r0, r3
 801065e:	f000 fc0d 	bl	8010e7c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 8010662:	4603      	mov	r3, r0
 8010664:	4619      	mov	r1, r3
 8010666:	2010      	movs	r0, #16
 8010668:	f7fe ffa8 	bl	800f5bc <_ZnwjPv>
 801066c:	4604      	mov	r4, r0
 801066e:	2c00      	cmp	r4, #0
 8010670:	d005      	beq.n	801067e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8010672:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010674:	4620      	mov	r0, r4
 8010676:	f005 fa85 	bl	8015b84 <_ZN15screenPresenterC1ER10screenView>
 801067a:	4623      	mov	r3, r4
 801067c:	e000      	b.n	8010680 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 801067e:	4623      	mov	r3, r4
 8010680:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010686:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801068c:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010692:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010696:	2b00      	cmp	r3, #0
 8010698:	d002      	beq.n	80106a0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 801069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069c:	3304      	adds	r3, #4
 801069e:	e000      	b.n	80106a2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 80106a0:	2300      	movs	r3, #0
 80106a2:	4619      	mov	r1, r3
 80106a4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80106a6:	f7ff faff 	bl	800fca8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80106aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ac:	3304      	adds	r3, #4
 80106ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80106b0:	4618      	mov	r0, r3
 80106b2:	f7ff fb84 	bl	800fdbe <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80106b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80106ba:	4618      	mov	r0, r3
 80106bc:	f000 fbf1 	bl	8010ea2 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 80106c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c2:	61fb      	str	r3, [r7, #28]
 80106c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c6:	61bb      	str	r3, [r7, #24]
 80106c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ca:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80106cc:	69fb      	ldr	r3, [r7, #28]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	330c      	adds	r3, #12
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	69f8      	ldr	r0, [r7, #28]
 80106d6:	4798      	blx	r3
    newPresenter->activate();
 80106d8:	69bb      	ldr	r3, [r7, #24]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	69b8      	ldr	r0, [r7, #24]
 80106e0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80106e2:	6979      	ldr	r1, [r7, #20]
 80106e4:	69f8      	ldr	r0, [r7, #28]
 80106e6:	f00c fe7f 	bl	801d3e8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	3310      	adds	r3, #16
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	6978      	ldr	r0, [r7, #20]
 80106f4:	4798      	blx	r3
    Application::getInstance()->draw();
 80106f6:	f00b fd45 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 80106fa:	4602      	mov	r2, r0
 80106fc:	6813      	ldr	r3, [r2, #0]
 80106fe:	3330      	adds	r3, #48	; 0x30
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	4610      	mov	r0, r2
 8010704:	4798      	blx	r3
    return newPresenter;
 8010706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010708:	4618      	mov	r0, r3
 801070a:	373c      	adds	r7, #60	; 0x3c
 801070c:	46bd      	mov	sp, r7
 801070e:	bd90      	pop	{r4, r7, pc}
 8010710:	080294e8 	.word	0x080294e8
 8010714:	0802a290 	.word	0x0802a290
 8010718:	08029578 	.word	0x08029578
 801071c:	080295bc 	.word	0x080295bc
 8010720:	08029660 	.word	0x08029660

08010724 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010724:	b590      	push	{r4, r7, lr}
 8010726:	b08f      	sub	sp, #60	; 0x3c
 8010728:	af00      	add	r7, sp, #0
 801072a:	60f8      	str	r0, [r7, #12]
 801072c:	60b9      	str	r1, [r7, #8]
 801072e:	607a      	str	r2, [r7, #4]
 8010730:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	689a      	ldr	r2, [r3, #8]
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	689b      	ldr	r3, [r3, #8]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	3320      	adds	r3, #32
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	4610      	mov	r0, r2
 8010742:	4798      	blx	r3
 8010744:	4602      	mov	r2, r0
 8010746:	f641 7347 	movw	r3, #8007	; 0x1f47
 801074a:	429a      	cmp	r2, r3
 801074c:	d805      	bhi.n	801075a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 801074e:	4b86      	ldr	r3, [pc, #536]	; (8010968 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 8010750:	4a86      	ldr	r2, [pc, #536]	; (801096c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010752:	21a7      	movs	r1, #167	; 0xa7
 8010754:	4886      	ldr	r0, [pc, #536]	; (8010970 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010756:	f017 fe95 	bl	8028484 <__assert_func>
 801075a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	685a      	ldr	r2, [r3, #4]
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	685b      	ldr	r3, [r3, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	3320      	adds	r3, #32
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	4610      	mov	r0, r2
 801076c:	4798      	blx	r3
 801076e:	4603      	mov	r3, r0
 8010770:	2b0f      	cmp	r3, #15
 8010772:	d805      	bhi.n	8010780 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8010774:	4b7f      	ldr	r3, [pc, #508]	; (8010974 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8010776:	4a7d      	ldr	r2, [pc, #500]	; (801096c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010778:	21a8      	movs	r1, #168	; 0xa8
 801077a:	487d      	ldr	r0, [pc, #500]	; (8010970 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 801077c:	f017 fe82 	bl	8028484 <__assert_func>
 8010780:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	68da      	ldr	r2, [r3, #12]
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	68db      	ldr	r3, [r3, #12]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	3320      	adds	r3, #32
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	4610      	mov	r0, r2
 8010792:	4798      	blx	r3
 8010794:	4603      	mov	r3, r0
 8010796:	2b0b      	cmp	r3, #11
 8010798:	d805      	bhi.n	80107a6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 801079a:	4b77      	ldr	r3, [pc, #476]	; (8010978 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 801079c:	4a73      	ldr	r2, [pc, #460]	; (801096c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 801079e:	21a9      	movs	r1, #169	; 0xa9
 80107a0:	4873      	ldr	r0, [pc, #460]	; (8010970 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80107a2:	f017 fe6f 	bl	8028484 <__assert_func>
 80107a6:	bf00      	nop
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	627b      	str	r3, [r7, #36]	; 0x24
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80107b4:	f00b fce6 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 80107b8:	4603      	mov	r3, r0
 80107ba:	4618      	mov	r0, r3
 80107bc:	f00b fcfe 	bl	801c1bc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80107c0:	6a3b      	ldr	r3, [r7, #32]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d008      	beq.n	80107da <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 80107c8:	6a3b      	ldr	r3, [r7, #32]
 80107ca:	681a      	ldr	r2, [r3, #0]
 80107cc:	6a3b      	ldr	r3, [r7, #32]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	330c      	adds	r3, #12
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	4610      	mov	r0, r2
 80107d8:	4798      	blx	r3
    if (*currentTrans)
 80107da:	6a3b      	ldr	r3, [r7, #32]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d007      	beq.n	80107f2 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 80107e2:	6a3b      	ldr	r3, [r7, #32]
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	6a3b      	ldr	r3, [r7, #32]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	4610      	mov	r0, r2
 80107f0:	4798      	blx	r3
    if (*currentScreen)
 80107f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d008      	beq.n	801080c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 80107fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107fc:	681a      	ldr	r2, [r3, #0]
 80107fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	3314      	adds	r3, #20
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	4610      	mov	r0, r2
 801080a:	4798      	blx	r3
    if (*currentPresenter)
 801080c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d008      	beq.n	8010826 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 8010814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010816:	681a      	ldr	r2, [r3, #0]
 8010818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	3304      	adds	r3, #4
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	4610      	mov	r0, r2
 8010824:	4798      	blx	r3
    if (*currentScreen)
 8010826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d007      	beq.n	801083e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 801082e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010830:	681a      	ldr	r2, [r3, #0]
 8010832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	4610      	mov	r0, r2
 801083c:	4798      	blx	r3
    if (*currentPresenter)
 801083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d008      	beq.n	8010858 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 8010846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010848:	681a      	ldr	r2, [r3, #0]
 801084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	3308      	adds	r3, #8
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	4610      	mov	r0, r2
 8010856:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	68db      	ldr	r3, [r3, #12]
 801085c:	2100      	movs	r1, #0
 801085e:	4618      	mov	r0, r3
 8010860:	f000 fae6 	bl	8010e30 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8010864:	4603      	mov	r3, r0
 8010866:	4619      	mov	r1, r3
 8010868:	200c      	movs	r0, #12
 801086a:	f7fe fea7 	bl	800f5bc <_ZnwjPv>
 801086e:	4604      	mov	r4, r0
 8010870:	2c00      	cmp	r4, #0
 8010872:	d004      	beq.n	801087e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 8010874:	4620      	mov	r0, r4
 8010876:	f7ff fceb 	bl	8010250 <_ZN8touchgfx12NoTransitionC1Ev>
 801087a:	4623      	mov	r3, r4
 801087c:	e000      	b.n	8010880 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 801087e:	4623      	mov	r3, r4
 8010880:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	689b      	ldr	r3, [r3, #8]
 8010886:	2100      	movs	r1, #0
 8010888:	4618      	mov	r0, r3
 801088a:	f000 fc03 	bl	8011094 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 801088e:	4603      	mov	r3, r0
 8010890:	4619      	mov	r1, r3
 8010892:	f641 7048 	movw	r0, #8008	; 0x1f48
 8010896:	f7fe fe91 	bl	800f5bc <_ZnwjPv>
 801089a:	4604      	mov	r4, r0
 801089c:	2c00      	cmp	r4, #0
 801089e:	d004      	beq.n	80108aa <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 80108a0:	4620      	mov	r0, r4
 80108a2:	f005 f85b 	bl	801595c <_ZN11Screen2ViewC1Ev>
 80108a6:	4623      	mov	r3, r4
 80108a8:	e000      	b.n	80108ac <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 80108aa:	4623      	mov	r3, r4
 80108ac:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	685b      	ldr	r3, [r3, #4]
 80108b2:	2100      	movs	r1, #0
 80108b4:	4618      	mov	r0, r3
 80108b6:	f000 fc00 	bl	80110ba <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 80108ba:	4603      	mov	r3, r0
 80108bc:	4619      	mov	r1, r3
 80108be:	2010      	movs	r0, #16
 80108c0:	f7fe fe7c 	bl	800f5bc <_ZnwjPv>
 80108c4:	4604      	mov	r4, r0
 80108c6:	2c00      	cmp	r4, #0
 80108c8:	d005      	beq.n	80108d6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 80108ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80108cc:	4620      	mov	r0, r4
 80108ce:	f004 ffed 	bl	80158ac <_ZN16Screen2PresenterC1ER11Screen2View>
 80108d2:	4623      	mov	r3, r4
 80108d4:	e000      	b.n	80108d8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 80108d6:	4623      	mov	r3, r4
 80108d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108de:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108e4:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108ea:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80108ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d002      	beq.n	80108f8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 80108f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f4:	3304      	adds	r3, #4
 80108f6:	e000      	b.n	80108fa <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 80108f8:	2300      	movs	r3, #0
 80108fa:	4619      	mov	r1, r3
 80108fc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80108fe:	f7ff f9d3 	bl	800fca8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010904:	3304      	adds	r3, #4
 8010906:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010908:	4618      	mov	r0, r3
 801090a:	f7ff fa58 	bl	800fdbe <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801090e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010910:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010912:	4618      	mov	r0, r3
 8010914:	f000 fbe4 	bl	80110e0 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 8010918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801091a:	61fb      	str	r3, [r7, #28]
 801091c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801091e:	61bb      	str	r3, [r7, #24]
 8010920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010922:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010924:	69fb      	ldr	r3, [r7, #28]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	330c      	adds	r3, #12
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	69f8      	ldr	r0, [r7, #28]
 801092e:	4798      	blx	r3
    newPresenter->activate();
 8010930:	69bb      	ldr	r3, [r7, #24]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	69b8      	ldr	r0, [r7, #24]
 8010938:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 801093a:	6979      	ldr	r1, [r7, #20]
 801093c:	69f8      	ldr	r0, [r7, #28]
 801093e:	f00c fd53 	bl	801d3e8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	3310      	adds	r3, #16
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	6978      	ldr	r0, [r7, #20]
 801094c:	4798      	blx	r3
    Application::getInstance()->draw();
 801094e:	f00b fc19 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 8010952:	4602      	mov	r2, r0
 8010954:	6813      	ldr	r3, [r2, #0]
 8010956:	3330      	adds	r3, #48	; 0x30
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	4610      	mov	r0, r2
 801095c:	4798      	blx	r3
    return newPresenter;
 801095e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010960:	4618      	mov	r0, r3
 8010962:	373c      	adds	r7, #60	; 0x3c
 8010964:	46bd      	mov	sp, r7
 8010966:	bd90      	pop	{r4, r7, pc}
 8010968:	080294e8 	.word	0x080294e8
 801096c:	0802a3b0 	.word	0x0802a3b0
 8010970:	08029578 	.word	0x08029578
 8010974:	080295bc 	.word	0x080295bc
 8010978:	08029660 	.word	0x08029660

0801097c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801097c:	b590      	push	{r4, r7, lr}
 801097e:	b08f      	sub	sp, #60	; 0x3c
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	607a      	str	r2, [r7, #4]
 8010988:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	689a      	ldr	r2, [r3, #8]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	689b      	ldr	r3, [r3, #8]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	3320      	adds	r3, #32
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	4610      	mov	r0, r2
 801099a:	4798      	blx	r3
 801099c:	4603      	mov	r3, r0
 801099e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80109a2:	d205      	bcs.n	80109b0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80109a4:	4b86      	ldr	r3, [pc, #536]	; (8010bc0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 80109a6:	4a87      	ldr	r2, [pc, #540]	; (8010bc4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 80109a8:	21a7      	movs	r1, #167	; 0xa7
 80109aa:	4887      	ldr	r0, [pc, #540]	; (8010bc8 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80109ac:	f017 fd6a 	bl	8028484 <__assert_func>
 80109b0:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	685a      	ldr	r2, [r3, #4]
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	685b      	ldr	r3, [r3, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	3320      	adds	r3, #32
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	4610      	mov	r0, r2
 80109c2:	4798      	blx	r3
 80109c4:	4603      	mov	r3, r0
 80109c6:	2b0f      	cmp	r3, #15
 80109c8:	d805      	bhi.n	80109d6 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80109ca:	4b80      	ldr	r3, [pc, #512]	; (8010bcc <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 80109cc:	4a7d      	ldr	r2, [pc, #500]	; (8010bc4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 80109ce:	21a8      	movs	r1, #168	; 0xa8
 80109d0:	487d      	ldr	r0, [pc, #500]	; (8010bc8 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80109d2:	f017 fd57 	bl	8028484 <__assert_func>
 80109d6:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	68da      	ldr	r2, [r3, #12]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	68db      	ldr	r3, [r3, #12]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	3320      	adds	r3, #32
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	4610      	mov	r0, r2
 80109e8:	4798      	blx	r3
 80109ea:	4603      	mov	r3, r0
 80109ec:	2b0b      	cmp	r3, #11
 80109ee:	d805      	bhi.n	80109fc <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80109f0:	4b77      	ldr	r3, [pc, #476]	; (8010bd0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 80109f2:	4a74      	ldr	r2, [pc, #464]	; (8010bc4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 80109f4:	21a9      	movs	r1, #169	; 0xa9
 80109f6:	4874      	ldr	r0, [pc, #464]	; (8010bc8 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80109f8:	f017 fd44 	bl	8028484 <__assert_func>
 80109fc:	bf00      	nop
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	627b      	str	r3, [r7, #36]	; 0x24
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8010a0a:	f00b fbbb 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	4618      	mov	r0, r3
 8010a12:	f00b fbd3 	bl	801c1bc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8010a16:	6a3b      	ldr	r3, [r7, #32]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d008      	beq.n	8010a30 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8010a1e:	6a3b      	ldr	r3, [r7, #32]
 8010a20:	681a      	ldr	r2, [r3, #0]
 8010a22:	6a3b      	ldr	r3, [r7, #32]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	330c      	adds	r3, #12
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	4610      	mov	r0, r2
 8010a2e:	4798      	blx	r3
    if (*currentTrans)
 8010a30:	6a3b      	ldr	r3, [r7, #32]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d007      	beq.n	8010a48 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8010a38:	6a3b      	ldr	r3, [r7, #32]
 8010a3a:	681a      	ldr	r2, [r3, #0]
 8010a3c:	6a3b      	ldr	r3, [r7, #32]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	4610      	mov	r0, r2
 8010a46:	4798      	blx	r3
    if (*currentScreen)
 8010a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d008      	beq.n	8010a62 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8010a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	3314      	adds	r3, #20
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	4610      	mov	r0, r2
 8010a60:	4798      	blx	r3
    if (*currentPresenter)
 8010a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d008      	beq.n	8010a7c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8010a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6c:	681a      	ldr	r2, [r3, #0]
 8010a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	3304      	adds	r3, #4
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	4610      	mov	r0, r2
 8010a7a:	4798      	blx	r3
    if (*currentScreen)
 8010a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d007      	beq.n	8010a94 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8010a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a86:	681a      	ldr	r2, [r3, #0]
 8010a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	4610      	mov	r0, r2
 8010a92:	4798      	blx	r3
    if (*currentPresenter)
 8010a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d008      	beq.n	8010aae <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8010a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9e:	681a      	ldr	r2, [r3, #0]
 8010aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	3308      	adds	r3, #8
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	4610      	mov	r0, r2
 8010aac:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	68db      	ldr	r3, [r3, #12]
 8010ab2:	2100      	movs	r1, #0
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f000 f9bb 	bl	8010e30 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8010aba:	4603      	mov	r3, r0
 8010abc:	4619      	mov	r1, r3
 8010abe:	200c      	movs	r0, #12
 8010ac0:	f7fe fd7c 	bl	800f5bc <_ZnwjPv>
 8010ac4:	4604      	mov	r4, r0
 8010ac6:	2c00      	cmp	r4, #0
 8010ac8:	d004      	beq.n	8010ad4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 8010aca:	4620      	mov	r0, r4
 8010acc:	f7ff fbc0 	bl	8010250 <_ZN8touchgfx12NoTransitionC1Ev>
 8010ad0:	4623      	mov	r3, r4
 8010ad2:	e000      	b.n	8010ad6 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 8010ad4:	4623      	mov	r3, r4
 8010ad6:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	689b      	ldr	r3, [r3, #8]
 8010adc:	2100      	movs	r1, #0
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f000 fb0c 	bl	80110fc <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010aec:	f7fe fd66 	bl	800f5bc <_ZnwjPv>
 8010af0:	4604      	mov	r4, r0
 8010af2:	2c00      	cmp	r4, #0
 8010af4:	d004      	beq.n	8010b00 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 8010af6:	4620      	mov	r0, r4
 8010af8:	f004 ffe6 	bl	8015ac8 <_ZN11Screen3ViewC1Ev>
 8010afc:	4623      	mov	r3, r4
 8010afe:	e000      	b.n	8010b02 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 8010b00:	4623      	mov	r3, r4
 8010b02:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	685b      	ldr	r3, [r3, #4]
 8010b08:	2100      	movs	r1, #0
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f000 fb09 	bl	8011122 <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>
 8010b10:	4603      	mov	r3, r0
 8010b12:	4619      	mov	r1, r3
 8010b14:	2010      	movs	r0, #16
 8010b16:	f7fe fd51 	bl	800f5bc <_ZnwjPv>
 8010b1a:	4604      	mov	r4, r0
 8010b1c:	2c00      	cmp	r4, #0
 8010b1e:	d005      	beq.n	8010b2c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 8010b20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010b22:	4620      	mov	r0, r4
 8010b24:	f004 ff78 	bl	8015a18 <_ZN16Screen3PresenterC1ER11Screen3View>
 8010b28:	4623      	mov	r3, r4
 8010b2a:	e000      	b.n	8010b2e <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8010b2c:	4623      	mov	r3, r4
 8010b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b34:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b3a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b40:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d002      	beq.n	8010b4e <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 8010b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b4a:	3304      	adds	r3, #4
 8010b4c:	e000      	b.n	8010b50 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 8010b4e:	2300      	movs	r3, #0
 8010b50:	4619      	mov	r1, r3
 8010b52:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010b54:	f7ff f8a8 	bl	800fca8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b5a:	3304      	adds	r3, #4
 8010b5c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7ff f92d 	bl	800fdbe <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f000 faed 	bl	8011148 <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>
 8010b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b70:	61fb      	str	r3, [r7, #28]
 8010b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b74:	61bb      	str	r3, [r7, #24]
 8010b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b78:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010b7a:	69fb      	ldr	r3, [r7, #28]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	330c      	adds	r3, #12
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	69f8      	ldr	r0, [r7, #28]
 8010b84:	4798      	blx	r3
    newPresenter->activate();
 8010b86:	69bb      	ldr	r3, [r7, #24]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	69b8      	ldr	r0, [r7, #24]
 8010b8e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010b90:	6979      	ldr	r1, [r7, #20]
 8010b92:	69f8      	ldr	r0, [r7, #28]
 8010b94:	f00c fc28 	bl	801d3e8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	3310      	adds	r3, #16
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	6978      	ldr	r0, [r7, #20]
 8010ba2:	4798      	blx	r3
    Application::getInstance()->draw();
 8010ba4:	f00b faee 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 8010ba8:	4602      	mov	r2, r0
 8010baa:	6813      	ldr	r3, [r2, #0]
 8010bac:	3330      	adds	r3, #48	; 0x30
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	4610      	mov	r0, r2
 8010bb2:	4798      	blx	r3
    return newPresenter;
 8010bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	373c      	adds	r7, #60	; 0x3c
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd90      	pop	{r4, r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	080294e8 	.word	0x080294e8
 8010bc4:	0802a4b4 	.word	0x0802a4b4
 8010bc8:	08029578 	.word	0x08029578
 8010bcc:	080295bc 	.word	0x080295bc
 8010bd0:	08029660 	.word	0x08029660

08010bd4 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010bd4:	b590      	push	{r4, r7, lr}
 8010bd6:	b08f      	sub	sp, #60	; 0x3c
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	607a      	str	r2, [r7, #4]
 8010be0:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	689a      	ldr	r2, [r3, #8]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	689b      	ldr	r3, [r3, #8]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	3320      	adds	r3, #32
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	4610      	mov	r0, r2
 8010bf2:	4798      	blx	r3
 8010bf4:	4602      	mov	r2, r0
 8010bf6:	f641 631b 	movw	r3, #7707	; 0x1e1b
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d805      	bhi.n	8010c0a <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8010bfe:	4b87      	ldr	r3, [pc, #540]	; (8010e1c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010c00:	4a87      	ldr	r2, [pc, #540]	; (8010e20 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010c02:	21a7      	movs	r1, #167	; 0xa7
 8010c04:	4887      	ldr	r0, [pc, #540]	; (8010e24 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8010c06:	f017 fc3d 	bl	8028484 <__assert_func>
 8010c0a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	685a      	ldr	r2, [r3, #4]
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	685b      	ldr	r3, [r3, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	3320      	adds	r3, #32
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	4610      	mov	r0, r2
 8010c1c:	4798      	blx	r3
 8010c1e:	4603      	mov	r3, r0
 8010c20:	2b0f      	cmp	r3, #15
 8010c22:	d805      	bhi.n	8010c30 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8010c24:	4b80      	ldr	r3, [pc, #512]	; (8010e28 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 8010c26:	4a7e      	ldr	r2, [pc, #504]	; (8010e20 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010c28:	21a8      	movs	r1, #168	; 0xa8
 8010c2a:	487e      	ldr	r0, [pc, #504]	; (8010e24 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8010c2c:	f017 fc2a 	bl	8028484 <__assert_func>
 8010c30:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	68da      	ldr	r2, [r3, #12]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	68db      	ldr	r3, [r3, #12]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	3320      	adds	r3, #32
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	4610      	mov	r0, r2
 8010c42:	4798      	blx	r3
 8010c44:	4603      	mov	r3, r0
 8010c46:	2b4f      	cmp	r3, #79	; 0x4f
 8010c48:	d805      	bhi.n	8010c56 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8010c4a:	4b78      	ldr	r3, [pc, #480]	; (8010e2c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x258>)
 8010c4c:	4a74      	ldr	r2, [pc, #464]	; (8010e20 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010c4e:	21a9      	movs	r1, #169	; 0xa9
 8010c50:	4874      	ldr	r0, [pc, #464]	; (8010e24 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8010c52:	f017 fc17 	bl	8028484 <__assert_func>
 8010c56:	bf00      	nop
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8010c64:	f00b fa8e 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f00b faa6 	bl	801c1bc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8010c70:	6a3b      	ldr	r3, [r7, #32]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d008      	beq.n	8010c8a <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 8010c78:	6a3b      	ldr	r3, [r7, #32]
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	6a3b      	ldr	r3, [r7, #32]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	330c      	adds	r3, #12
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	4610      	mov	r0, r2
 8010c88:	4798      	blx	r3
    if (*currentTrans)
 8010c8a:	6a3b      	ldr	r3, [r7, #32]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d007      	beq.n	8010ca2 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 8010c92:	6a3b      	ldr	r3, [r7, #32]
 8010c94:	681a      	ldr	r2, [r3, #0]
 8010c96:	6a3b      	ldr	r3, [r7, #32]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	4610      	mov	r0, r2
 8010ca0:	4798      	blx	r3
    if (*currentScreen)
 8010ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d008      	beq.n	8010cbc <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 8010caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cac:	681a      	ldr	r2, [r3, #0]
 8010cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	3314      	adds	r3, #20
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	4610      	mov	r0, r2
 8010cba:	4798      	blx	r3
    if (*currentPresenter)
 8010cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d008      	beq.n	8010cd6 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 8010cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc6:	681a      	ldr	r2, [r3, #0]
 8010cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	3304      	adds	r3, #4
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	4610      	mov	r0, r2
 8010cd4:	4798      	blx	r3
    if (*currentScreen)
 8010cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d007      	beq.n	8010cee <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 8010cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce0:	681a      	ldr	r2, [r3, #0]
 8010ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	4610      	mov	r0, r2
 8010cec:	4798      	blx	r3
    if (*currentPresenter)
 8010cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d008      	beq.n	8010d08 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 8010cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf8:	681a      	ldr	r2, [r3, #0]
 8010cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	3308      	adds	r3, #8
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	4610      	mov	r0, r2
 8010d06:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	68db      	ldr	r3, [r3, #12]
 8010d0c:	2100      	movs	r1, #0
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f000 fa28 	bl	8011164 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 8010d14:	4603      	mov	r3, r0
 8010d16:	4619      	mov	r1, r3
 8010d18:	2050      	movs	r0, #80	; 0x50
 8010d1a:	f7fe fc4f 	bl	800f5bc <_ZnwjPv>
 8010d1e:	4604      	mov	r4, r0
 8010d20:	2c00      	cmp	r4, #0
 8010d22:	d005      	beq.n	8010d30 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 8010d24:	2114      	movs	r1, #20
 8010d26:	4620      	mov	r0, r4
 8010d28:	f000 fa86 	bl	8011238 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 8010d2c:	4623      	mov	r3, r4
 8010d2e:	e000      	b.n	8010d32 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15e>
 8010d30:	4623      	mov	r3, r4
 8010d32:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	689b      	ldr	r3, [r3, #8]
 8010d38:	2100      	movs	r1, #0
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f000 fb00 	bl	8011340 <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>
 8010d40:	4603      	mov	r3, r0
 8010d42:	4619      	mov	r1, r3
 8010d44:	f641 601c 	movw	r0, #7708	; 0x1e1c
 8010d48:	f7fe fc38 	bl	800f5bc <_ZnwjPv>
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	2c00      	cmp	r4, #0
 8010d50:	d004      	beq.n	8010d5c <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 8010d52:	4620      	mov	r0, r4
 8010d54:	f004 fae6 	bl	8015324 <_ZN8PongViewC1Ev>
 8010d58:	4623      	mov	r3, r4
 8010d5a:	e000      	b.n	8010d5e <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x18a>
 8010d5c:	4623      	mov	r3, r4
 8010d5e:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	685b      	ldr	r3, [r3, #4]
 8010d64:	2100      	movs	r1, #0
 8010d66:	4618      	mov	r0, r3
 8010d68:	f000 fafd 	bl	8011366 <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	4619      	mov	r1, r3
 8010d70:	2010      	movs	r0, #16
 8010d72:	f7fe fc23 	bl	800f5bc <_ZnwjPv>
 8010d76:	4604      	mov	r4, r0
 8010d78:	2c00      	cmp	r4, #0
 8010d7a:	d005      	beq.n	8010d88 <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8010d7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010d7e:	4620      	mov	r0, r4
 8010d80:	f004 fa5e 	bl	8015240 <_ZN13PongPresenterC1ER8PongView>
 8010d84:	4623      	mov	r3, r4
 8010d86:	e000      	b.n	8010d8a <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8010d88:	4623      	mov	r3, r4
 8010d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d90:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d96:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d9c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d002      	beq.n	8010daa <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 8010da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010da6:	3304      	adds	r3, #4
 8010da8:	e000      	b.n	8010dac <_ZN8touchgfx14makeTransitionI8PongView13PongPresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d8>
 8010daa:	2300      	movs	r3, #0
 8010dac:	4619      	mov	r1, r3
 8010dae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010db0:	f7fe ff7a 	bl	800fca8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db6:	3304      	adds	r3, #4
 8010db8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7fe ffff 	bl	800fdbe <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f000 fae1 	bl	801138c <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>
 8010dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dcc:	61fb      	str	r3, [r7, #28]
 8010dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd0:	61bb      	str	r3, [r7, #24]
 8010dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dd4:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010dd6:	69fb      	ldr	r3, [r7, #28]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	330c      	adds	r3, #12
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	69f8      	ldr	r0, [r7, #28]
 8010de0:	4798      	blx	r3
    newPresenter->activate();
 8010de2:	69bb      	ldr	r3, [r7, #24]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	69b8      	ldr	r0, [r7, #24]
 8010dea:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010dec:	6979      	ldr	r1, [r7, #20]
 8010dee:	69f8      	ldr	r0, [r7, #28]
 8010df0:	f00c fafa 	bl	801d3e8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	3310      	adds	r3, #16
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	6978      	ldr	r0, [r7, #20]
 8010dfe:	4798      	blx	r3
    Application::getInstance()->draw();
 8010e00:	f00b f9c0 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 8010e04:	4602      	mov	r2, r0
 8010e06:	6813      	ldr	r3, [r2, #0]
 8010e08:	3330      	adds	r3, #48	; 0x30
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	4610      	mov	r0, r2
 8010e0e:	4798      	blx	r3
    return newPresenter;
 8010e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	373c      	adds	r7, #60	; 0x3c
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd90      	pop	{r4, r7, pc}
 8010e1a:	bf00      	nop
 8010e1c:	080294e8 	.word	0x080294e8
 8010e20:	0802a5b8 	.word	0x0802a5b8
 8010e24:	08029578 	.word	0x08029578
 8010e28:	080295bc 	.word	0x080295bc
 8010e2c:	08029660 	.word	0x08029660

08010e30 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	460b      	mov	r3, r1
 8010e3a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	3324      	adds	r3, #36	; 0x24
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	887a      	ldrh	r2, [r7, #2]
 8010e46:	4611      	mov	r1, r2
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	4798      	blx	r3
 8010e4c:	4603      	mov	r3, r0
    }
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3708      	adds	r7, #8
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}

08010e56 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 8010e56:	b580      	push	{r7, lr}
 8010e58:	b082      	sub	sp, #8
 8010e5a:	af00      	add	r7, sp, #0
 8010e5c:	6078      	str	r0, [r7, #4]
 8010e5e:	460b      	mov	r3, r1
 8010e60:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	3324      	adds	r3, #36	; 0x24
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	887a      	ldrh	r2, [r7, #2]
 8010e6c:	4611      	mov	r1, r2
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	4798      	blx	r3
 8010e72:	4603      	mov	r3, r0
    }
 8010e74:	4618      	mov	r0, r3
 8010e76:	3708      	adds	r7, #8
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	460b      	mov	r3, r1
 8010e86:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	3324      	adds	r3, #36	; 0x24
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	887a      	ldrh	r2, [r7, #2]
 8010e92:	4611      	mov	r1, r2
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	4798      	blx	r3
 8010e98:	4603      	mov	r3, r0
    }
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	3708      	adds	r7, #8
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}

08010ea2 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8010ea2:	b480      	push	{r7}
 8010ea4:	b083      	sub	sp, #12
 8010ea6:	af00      	add	r7, sp, #0
 8010ea8:	6078      	str	r0, [r7, #4]
 8010eaa:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	683a      	ldr	r2, [r7, #0]
 8010eb0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010eb2:	bf00      	nop
 8010eb4:	370c      	adds	r7, #12
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebc:	4770      	bx	lr

08010ebe <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8010ebe:	b580      	push	{r7, lr}
 8010ec0:	b082      	sub	sp, #8
 8010ec2:	af00      	add	r7, sp, #0
 8010ec4:	6078      	str	r0, [r7, #4]
 8010ec6:	460b      	mov	r3, r1
 8010ec8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	3324      	adds	r3, #36	; 0x24
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	887a      	ldrh	r2, [r7, #2]
 8010ed4:	4611      	mov	r1, r2
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	4798      	blx	r3
 8010eda:	4603      	mov	r3, r0
    }
 8010edc:	4618      	mov	r0, r3
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b082      	sub	sp, #8
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	4a05      	ldr	r2, [pc, #20]	; (8010f04 <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	601a      	str	r2, [r3, #0]
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7fe ff83 	bl	800fe00 <_ZN8touchgfx6WidgetD1Ev>
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	4618      	mov	r0, r3
 8010efe:	3708      	adds	r7, #8
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}
 8010f04:	0802c890 	.word	0x0802c890

08010f08 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b082      	sub	sp, #8
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f7ff ffe7 	bl	8010ee4 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8010f16:	212c      	movs	r1, #44	; 0x2c
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f017 fa87 	bl	802842c <_ZdlPvj>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	4618      	mov	r0, r3
 8010f22:	3708      	adds	r7, #8
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}

08010f28 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b082      	sub	sp, #8
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
 8010f30:	4a05      	ldr	r2, [pc, #20]	; (8010f48 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	601a      	str	r2, [r3, #0]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f000 fa9f 	bl	801147c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	4618      	mov	r0, r3
 8010f42:	3708      	adds	r7, #8
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}
 8010f48:	08029f34 	.word	0x08029f34

08010f4c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f7ff ffe7 	bl	8010f28 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8010f5a:	2110      	movs	r1, #16
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f017 fa65 	bl	802842c <_ZdlPvj>
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	4618      	mov	r0, r3
 8010f66:	3708      	adds	r7, #8
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}

08010f6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 8010f6c:	b590      	push	{r4, r7, lr}
 8010f6e:	b087      	sub	sp, #28
 8010f70:	af02      	add	r7, sp, #8
 8010f72:	6078      	str	r0, [r7, #4]
 8010f74:	460b      	mov	r3, r1
 8010f76:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7fe fbc2 	bl	800f704 <_ZN8touchgfx10TransitionC1Ev>
 8010f80:	4a3f      	ldr	r2, [pc, #252]	; (8011080 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	601a      	str	r2, [r3, #0]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	330c      	adds	r3, #12
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f009 fb66 	bl	801a65c <_ZN8touchgfx14SnapshotWidgetC1Ev>
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f103 020c 	add.w	r2, r3, #12
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	639a      	str	r2, [r3, #56]	; 0x38
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8010fa0:	4a38      	ldr	r2, [pc, #224]	; (8011084 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 8010fa2:	f107 0308 	add.w	r3, r7, #8
 8010fa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010faa:	e883 0003 	stmia.w	r3, {r0, r1}
 8010fae:	f107 0308 	add.w	r3, r7, #8
 8010fb2:	cb0c      	ldmia	r3, {r2, r3}
 8010fb4:	6879      	ldr	r1, [r7, #4]
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	f000 fa40 	bl	801143c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2202      	movs	r2, #2
 8010fc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	78fa      	ldrb	r2, [r7, #3]
 8010fc8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2200      	movs	r2, #0
 8010fd0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8010fdc:	4b2a      	ldr	r3, [pc, #168]	; (8011088 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 8010fde:	781b      	ldrb	r3, [r3, #0]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d047      	beq.n	8011074 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f103 000c 	add.w	r0, r3, #12
 8010fea:	4b28      	ldr	r3, [pc, #160]	; (801108c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8010fec:	881b      	ldrh	r3, [r3, #0]
 8010fee:	b21a      	sxth	r2, r3
 8010ff0:	4b27      	ldr	r3, [pc, #156]	; (8011090 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8010ff2:	881b      	ldrh	r3, [r3, #0]
 8010ff4:	b21b      	sxth	r3, r3
 8010ff6:	9300      	str	r3, [sp, #0]
 8010ff8:	4613      	mov	r3, r2
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	2100      	movs	r1, #0
 8010ffe:	f7fe fc6f 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	330c      	adds	r3, #12
 8011006:	4618      	mov	r0, r3
 8011008:	f009 faab 	bl	801a562 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011012:	2b03      	cmp	r3, #3
 8011014:	d82a      	bhi.n	801106c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 8011016:	a201      	add	r2, pc, #4	; (adr r2, 801101c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 8011018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801101c:	0801104d 	.word	0x0801104d
 8011020:	0801105b 	.word	0x0801105b
 8011024:	0801102d 	.word	0x0801102d
 8011028:	0801103f 	.word	0x0801103f
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 801102c:	4b17      	ldr	r3, [pc, #92]	; (801108c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 801102e:	881b      	ldrh	r3, [r3, #0]
 8011030:	425b      	negs	r3, r3
 8011032:	b29b      	uxth	r3, r3
 8011034:	b21a      	sxth	r2, r3
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 801103c:	e01a      	b.n	8011074 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 801103e:	4b13      	ldr	r3, [pc, #76]	; (801108c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011040:	881b      	ldrh	r3, [r3, #0]
 8011042:	b21a      	sxth	r2, r3
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 801104a:	e013      	b.n	8011074 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 801104c:	4b10      	ldr	r3, [pc, #64]	; (8011090 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 801104e:	881b      	ldrh	r3, [r3, #0]
 8011050:	b21a      	sxth	r2, r3
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011058:	e00c      	b.n	8011074 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 801105a:	4b0d      	ldr	r3, [pc, #52]	; (8011090 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 801105c:	881b      	ldrh	r3, [r3, #0]
 801105e:	425b      	negs	r3, r3
 8011060:	b29b      	uxth	r3, r3
 8011062:	b21a      	sxth	r2, r3
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 801106a:	e003      	b.n	8011074 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            default:
                done = true;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2201      	movs	r2, #1
 8011070:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 8011072:	bf00      	nop
            }
        }
    }
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	4618      	mov	r0, r3
 8011078:	3714      	adds	r7, #20
 801107a:	46bd      	mov	sp, r7
 801107c:	bd90      	pop	{r4, r7, pc}
 801107e:	bf00      	nop
 8011080:	08029f0c 	.word	0x08029f0c
 8011084:	08029704 	.word	0x08029704
 8011088:	2000b41b 	.word	0x2000b41b
 801108c:	2000b410 	.word	0x2000b410
 8011090:	2000b412 	.word	0x2000b412

08011094 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 8011094:	b580      	push	{r7, lr}
 8011096:	b082      	sub	sp, #8
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	460b      	mov	r3, r1
 801109e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	3324      	adds	r3, #36	; 0x24
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	887a      	ldrh	r2, [r7, #2]
 80110aa:	4611      	mov	r1, r2
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	4798      	blx	r3
 80110b0:	4603      	mov	r3, r0
    }
 80110b2:	4618      	mov	r0, r3
 80110b4:	3708      	adds	r7, #8
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}

080110ba <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 80110ba:	b580      	push	{r7, lr}
 80110bc:	b082      	sub	sp, #8
 80110be:	af00      	add	r7, sp, #0
 80110c0:	6078      	str	r0, [r7, #4]
 80110c2:	460b      	mov	r3, r1
 80110c4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	3324      	adds	r3, #36	; 0x24
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	887a      	ldrh	r2, [r7, #2]
 80110d0:	4611      	mov	r1, r2
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	4798      	blx	r3
 80110d6:	4603      	mov	r3, r0
    }
 80110d8:	4618      	mov	r0, r3
 80110da:	3708      	adds	r7, #8
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}

080110e0 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& presenter)
 80110e0:	b480      	push	{r7}
 80110e2:	b083      	sub	sp, #12
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	683a      	ldr	r2, [r7, #0]
 80110ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80110f0:	bf00      	nop
 80110f2:	370c      	adds	r7, #12
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr

080110fc <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>:
    T& at(const uint16_t index)
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	460b      	mov	r3, r1
 8011106:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	3324      	adds	r3, #36	; 0x24
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	887a      	ldrh	r2, [r7, #2]
 8011112:	4611      	mov	r1, r2
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	4798      	blx	r3
 8011118:	4603      	mov	r3, r0
    }
 801111a:	4618      	mov	r0, r3
 801111c:	3708      	adds	r7, #8
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}

08011122 <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>:
    T& at(const uint16_t index)
 8011122:	b580      	push	{r7, lr}
 8011124:	b082      	sub	sp, #8
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
 801112a:	460b      	mov	r3, r1
 801112c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	3324      	adds	r3, #36	; 0x24
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	887a      	ldrh	r2, [r7, #2]
 8011138:	4611      	mov	r1, r2
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	4798      	blx	r3
 801113e:	4603      	mov	r3, r0
    }
 8011140:	4618      	mov	r0, r3
 8011142:	3708      	adds	r7, #8
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}

08011148 <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>:
    void bind(T& presenter)
 8011148:	b480      	push	{r7}
 801114a:	b083      	sub	sp, #12
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	683a      	ldr	r2, [r7, #0]
 8011156:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011158:	bf00      	nop
 801115a:	370c      	adds	r7, #12
 801115c:	46bd      	mov	sp, r7
 801115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011162:	4770      	bx	lr

08011164 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8011164:	b580      	push	{r7, lr}
 8011166:	b082      	sub	sp, #8
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
 801116c:	460b      	mov	r3, r1
 801116e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	3324      	adds	r3, #36	; 0x24
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	887a      	ldrh	r2, [r7, #2]
 801117a:	4611      	mov	r1, r2
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	4798      	blx	r3
 8011180:	4603      	mov	r3, r0
    }
 8011182:	4618      	mov	r0, r3
 8011184:	3708      	adds	r7, #8
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}
	...

0801118c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 801118c:	b580      	push	{r7, lr}
 801118e:	b082      	sub	sp, #8
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	4a05      	ldr	r2, [pc, #20]	; (80111ac <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	601a      	str	r2, [r3, #0]
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	4618      	mov	r0, r3
 801119e:	f000 f96d 	bl	801147c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	4618      	mov	r0, r3
 80111a6:	3708      	adds	r7, #8
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	08029fdc 	.word	0x08029fdc

080111b0 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b082      	sub	sp, #8
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f7ff ffe7 	bl	801118c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 80111be:	2110      	movs	r1, #16
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f017 f933 	bl	802842c <_ZdlPvj>
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	4618      	mov	r0, r3
 80111ca:	3708      	adds	r7, #8
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}

080111d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>:
public:
    /**
     * A Widget that returns a solid rect of the same size as the application (i.e. the size
     * of the display).
     */
    class FullSolidRect : public Widget
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b082      	sub	sp, #8
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	4618      	mov	r0, r3
 80111dc:	f7fe fdfe 	bl	800fddc <_ZN8touchgfx6WidgetC1Ev>
 80111e0:	4a03      	ldr	r2, [pc, #12]	; (80111f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev+0x20>)
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	601a      	str	r2, [r3, #0]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	4618      	mov	r0, r3
 80111ea:	3708      	adds	r7, #8
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}
 80111f0:	08029f74 	.word	0x08029f74

080111f4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>:
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b082      	sub	sp, #8
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
 80111fc:	4a05      	ldr	r2, [pc, #20]	; (8011214 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev+0x20>)
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	601a      	str	r2, [r3, #0]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	4618      	mov	r0, r3
 8011206:	f7fe fdfb 	bl	800fe00 <_ZN8touchgfx6WidgetD1Ev>
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	4618      	mov	r0, r3
 801120e:	3708      	adds	r7, #8
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}
 8011214:	08029f74 	.word	0x08029f74

08011218 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD0Ev>:
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f7ff ffe7 	bl	80111f4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 8011226:	2128      	movs	r1, #40	; 0x28
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f017 f8ff 	bl	802842c <_ZdlPvj>
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	4618      	mov	r0, r3
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the CoverTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    CoverTransition(const uint8_t transitionSteps = 20)
 8011238:	b590      	push	{r4, r7, lr}
 801123a:	b087      	sub	sp, #28
 801123c:	af02      	add	r7, sp, #8
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	460b      	mov	r3, r1
 8011242:	70fb      	strb	r3, [r7, #3]
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          movedToPos(0),
          solid()
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	4618      	mov	r0, r3
 8011248:	f7fe fa5c 	bl	800f704 <_ZN8touchgfx10TransitionC1Ev>
 801124c:	4a38      	ldr	r2, [pc, #224]	; (8011330 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xf8>)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	601a      	str	r2, [r3, #0]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f103 040c 	add.w	r4, r3, #12
 8011258:	4a36      	ldr	r2, [pc, #216]	; (8011334 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xfc>)
 801125a:	f107 0308 	add.w	r3, r7, #8
 801125e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011262:	e883 0003 	stmia.w	r3, {r0, r1}
 8011266:	f107 0308 	add.w	r3, r7, #8
 801126a:	cb0c      	ldmia	r3, {r2, r3}
 801126c:	6879      	ldr	r1, [r7, #4]
 801126e:	4620      	mov	r0, r4
 8011270:	f000 f956 	bl	8011520 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2202      	movs	r2, #2
 8011278:	771a      	strb	r2, [r3, #28]
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	78fa      	ldrb	r2, [r7, #3]
 801127e:	775a      	strb	r2, [r3, #29]
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2200      	movs	r2, #0
 8011284:	779a      	strb	r2, [r3, #30]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	2200      	movs	r2, #0
 801128a:	845a      	strh	r2, [r3, #34]	; 0x22
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2200      	movs	r2, #0
 8011290:	849a      	strh	r2, [r3, #36]	; 0x24
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	3328      	adds	r3, #40	; 0x28
 8011296:	2228      	movs	r2, #40	; 0x28
 8011298:	2100      	movs	r1, #0
 801129a:	4618      	mov	r0, r3
 801129c:	f017 f97b 	bl	8028596 <memset>
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	3328      	adds	r3, #40	; 0x28
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7ff ff93 	bl	80111d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>
    {
        switch (direction)
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	7f1b      	ldrb	r3, [r3, #28]
 80112ae:	2b03      	cmp	r3, #3
 80112b0:	d826      	bhi.n	8011300 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xc8>
 80112b2:	a201      	add	r2, pc, #4	; (adr r2, 80112b8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x80>)
 80112b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112b8:	080112e5 	.word	0x080112e5
 80112bc:	080112f1 	.word	0x080112f1
 80112c0:	080112c9 	.word	0x080112c9
 80112c4:	080112d9 	.word	0x080112d9
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 80112c8:	4b1b      	ldr	r3, [pc, #108]	; (8011338 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 80112ca:	881b      	ldrh	r3, [r3, #0]
 80112cc:	425b      	negs	r3, r3
 80112ce:	b29b      	uxth	r3, r3
 80112d0:	b21a      	sxth	r2, r3
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	841a      	strh	r2, [r3, #32]
            break;
 80112d6:	e017      	b.n	8011308 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 80112d8:	4b17      	ldr	r3, [pc, #92]	; (8011338 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 80112da:	881b      	ldrh	r3, [r3, #0]
 80112dc:	b21a      	sxth	r2, r3
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	841a      	strh	r2, [r3, #32]
            break;
 80112e2:	e011      	b.n	8011308 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case NORTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 80112e4:	4b15      	ldr	r3, [pc, #84]	; (801133c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 80112e6:	881b      	ldrh	r3, [r3, #0]
 80112e8:	b21a      	sxth	r2, r3
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	841a      	strh	r2, [r3, #32]
            break;
 80112ee:	e00b      	b.n	8011308 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
 80112f0:	4b12      	ldr	r3, [pc, #72]	; (801133c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 80112f2:	881b      	ldrh	r3, [r3, #0]
 80112f4:	425b      	negs	r3, r3
 80112f6:	b29b      	uxth	r3, r3
 80112f8:	b21a      	sxth	r2, r3
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	841a      	strh	r2, [r3, #32]
            break;
 80112fe:	e003      	b.n	8011308 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xd0>
        default:
            done = true;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2201      	movs	r2, #1
 8011304:	721a      	strb	r2, [r3, #8]
            // Nothing to do here
            break;
 8011306:	bf00      	nop
        }

        //Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 801130e:	4b0a      	ldr	r3, [pc, #40]	; (8011338 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x100>)
 8011310:	881b      	ldrh	r3, [r3, #0]
 8011312:	b21a      	sxth	r2, r3
 8011314:	4b09      	ldr	r3, [pc, #36]	; (801133c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x104>)
 8011316:	881b      	ldrh	r3, [r3, #0]
 8011318:	b21b      	sxth	r3, r3
 801131a:	9300      	str	r3, [sp, #0]
 801131c:	4613      	mov	r3, r2
 801131e:	2200      	movs	r2, #0
 8011320:	2100      	movs	r1, #0
 8011322:	f7fe fadd 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	4618      	mov	r0, r3
 801132a:	3714      	adds	r7, #20
 801132c:	46bd      	mov	sp, r7
 801132e:	bd90      	pop	{r4, r7, pc}
 8011330:	08029f4c 	.word	0x08029f4c
 8011334:	0802970c 	.word	0x0802970c
 8011338:	2000b410 	.word	0x2000b410
 801133c:	2000b412 	.word	0x2000b412

08011340 <_ZN8touchgfx17AbstractPartition2atI8PongViewEERT_t>:
    T& at(const uint16_t index)
 8011340:	b580      	push	{r7, lr}
 8011342:	b082      	sub	sp, #8
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
 8011348:	460b      	mov	r3, r1
 801134a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	3324      	adds	r3, #36	; 0x24
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	887a      	ldrh	r2, [r7, #2]
 8011356:	4611      	mov	r1, r2
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	4798      	blx	r3
 801135c:	4603      	mov	r3, r0
    }
 801135e:	4618      	mov	r0, r3
 8011360:	3708      	adds	r7, #8
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}

08011366 <_ZN8touchgfx17AbstractPartition2atI13PongPresenterEERT_t>:
    T& at(const uint16_t index)
 8011366:	b580      	push	{r7, lr}
 8011368:	b082      	sub	sp, #8
 801136a:	af00      	add	r7, sp, #0
 801136c:	6078      	str	r0, [r7, #4]
 801136e:	460b      	mov	r3, r1
 8011370:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	3324      	adds	r3, #36	; 0x24
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	887a      	ldrh	r2, [r7, #2]
 801137c:	4611      	mov	r1, r2
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	4798      	blx	r3
 8011382:	4603      	mov	r3, r0
    }
 8011384:	4618      	mov	r0, r3
 8011386:	3708      	adds	r7, #8
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}

0801138c <_ZN8touchgfx4ViewI13PongPresenterE4bindERS1_>:
    void bind(T& presenter)
 801138c:	b480      	push	{r7}
 801138e:	b083      	sub	sp, #12
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	683a      	ldr	r2, [r7, #0]
 801139a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801139c:	bf00      	nop
 801139e:	370c      	adds	r7, #12
 80113a0:	46bd      	mov	sp, r7
 80113a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a6:	4770      	bx	lr

080113a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b082      	sub	sp, #8
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113b6:	683a      	ldr	r2, [r7, #0]
 80113b8:	429a      	cmp	r2, r3
 80113ba:	d02a      	beq.n	8011412 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80113c2:	2b03      	cmp	r3, #3
 80113c4:	d820      	bhi.n	8011408 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 80113c6:	a201      	add	r2, pc, #4	; (adr r2, 80113cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 80113c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113cc:	080113f3 	.word	0x080113f3
 80113d0:	080113f3 	.word	0x080113f3
 80113d4:	080113dd 	.word	0x080113dd
 80113d8:	080113dd 	.word	0x080113dd
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	3354      	adds	r3, #84	; 0x54
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 80113ea:	2200      	movs	r2, #0
 80113ec:	6838      	ldr	r0, [r7, #0]
 80113ee:	4798      	blx	r3
            break;
 80113f0:	e010      	b.n	8011414 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	3354      	adds	r3, #84	; 0x54
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	687a      	ldr	r2, [r7, #4]
 80113fc:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011400:	2100      	movs	r1, #0
 8011402:	6838      	ldr	r0, [r7, #0]
 8011404:	4798      	blx	r3
            break;
 8011406:	e005      	b.n	8011414 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2201      	movs	r2, #1
 801140c:	721a      	strb	r2, [r3, #8]
            break;
 801140e:	bf00      	nop
 8011410:	e000      	b.n	8011414 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 8011412:	bf00      	nop
        }
    }
 8011414:	3708      	adds	r7, #8
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop

0801141c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 801141c:	b480      	push	{r7}
 801141e:	b083      	sub	sp, #12
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	4a04      	ldr	r2, [pc, #16]	; (8011438 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	601a      	str	r2, [r3, #0]
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	4618      	mov	r0, r3
 801142e:	370c      	adds	r7, #12
 8011430:	46bd      	mov	sp, r7
 8011432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011436:	4770      	bx	lr
 8011438:	08029ff4 	.word	0x08029ff4

0801143c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801143c:	b580      	push	{r7, lr}
 801143e:	b084      	sub	sp, #16
 8011440:	af00      	add	r7, sp, #0
 8011442:	60f8      	str	r0, [r7, #12]
 8011444:	60b9      	str	r1, [r7, #8]
 8011446:	4639      	mov	r1, r7
 8011448:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	4618      	mov	r0, r3
 8011450:	f7ff ffe4 	bl	801141c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8011454:	4a08      	ldr	r2, [pc, #32]	; (8011478 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	68ba      	ldr	r2, [r7, #8]
 801145e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	3308      	adds	r3, #8
 8011464:	463a      	mov	r2, r7
 8011466:	e892 0003 	ldmia.w	r2, {r0, r1}
 801146a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	4618      	mov	r0, r3
 8011472:	3710      	adds	r7, #16
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}
 8011478:	08029f34 	.word	0x08029f34

0801147c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 801147c:	b480      	push	{r7}
 801147e:	b083      	sub	sp, #12
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
    }
 8011484:	4a04      	ldr	r2, [pc, #16]	; (8011498 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	601a      	str	r2, [r3, #0]
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	4618      	mov	r0, r3
 801148e:	370c      	adds	r7, #12
 8011490:	46bd      	mov	sp, r7
 8011492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011496:	4770      	bx	lr
 8011498:	08029ff4 	.word	0x08029ff4

0801149c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 801149c:	b580      	push	{r7, lr}
 801149e:	b082      	sub	sp, #8
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
    }
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f7ff ffe9 	bl	801147c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 80114aa:	2104      	movs	r1, #4
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f016 ffbd 	bl	802842c <_ZdlPvj>
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	4618      	mov	r0, r3
 80114b6:	3708      	adds	r7, #8
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable to the new position as calculated in handleTickEvent().
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 80114bc:	b580      	push	{r7, lr}
 80114be:	b082      	sub	sp, #8
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
 80114c4:	6039      	str	r1, [r7, #0]
    {
        switch (direction)
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	7f1b      	ldrb	r3, [r3, #28]
 80114ca:	2b03      	cmp	r3, #3
 80114cc:	d820      	bhi.n	8011510 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x54>
 80114ce:	a201      	add	r2, pc, #4	; (adr r2, 80114d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x18>)
 80114d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114d4:	080114fb 	.word	0x080114fb
 80114d8:	080114fb 	.word	0x080114fb
 80114dc:	080114e5 	.word	0x080114e5
 80114e0:	080114e5 	.word	0x080114e5
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	3354      	adds	r3, #84	; 0x54
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	687a      	ldr	r2, [r7, #4]
 80114ee:	f9b2 1022 	ldrsh.w	r1, [r2, #34]	; 0x22
 80114f2:	2200      	movs	r2, #0
 80114f4:	6838      	ldr	r0, [r7, #0]
 80114f6:	4798      	blx	r3
            break;
 80114f8:	e00e      	b.n	8011518 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	3354      	adds	r3, #84	; 0x54
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	687a      	ldr	r2, [r7, #4]
 8011504:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 8011508:	2100      	movs	r1, #0
 801150a:	6838      	ldr	r0, [r7, #0]
 801150c:	4798      	blx	r3
            break;
 801150e:	e003      	b.n	8011518 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2201      	movs	r2, #1
 8011514:	721a      	strb	r2, [r3, #8]
            break;
 8011516:	bf00      	nop
        }
    }
 8011518:	bf00      	nop
 801151a:	3708      	adds	r7, #8
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}

08011520 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011520:	b580      	push	{r7, lr}
 8011522:	b084      	sub	sp, #16
 8011524:	af00      	add	r7, sp, #0
 8011526:	60f8      	str	r0, [r7, #12]
 8011528:	60b9      	str	r1, [r7, #8]
 801152a:	4639      	mov	r1, r7
 801152c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	4618      	mov	r0, r3
 8011534:	f7ff ff72 	bl	801141c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8011538:	4a08      	ldr	r2, [pc, #32]	; (801155c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	68ba      	ldr	r2, [r7, #8]
 8011542:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	3308      	adds	r3, #8
 8011548:	463a      	mov	r2, r7
 801154a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801154e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	4618      	mov	r0, r3
 8011556:	3710      	adds	r7, #16
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}
 801155c:	08029fdc 	.word	0x08029fdc

08011560 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
class SlideTransition : public Transition
 8011560:	b580      	push	{r7, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	4a0a      	ldr	r2, [pc, #40]	; (8011594 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	601a      	str	r2, [r3, #0]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	333c      	adds	r3, #60	; 0x3c
 8011572:	4618      	mov	r0, r3
 8011574:	f7ff fcd8 	bl	8010f28 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	330c      	adds	r3, #12
 801157c:	4618      	mov	r0, r3
 801157e:	f7ff fcb1 	bl	8010ee4 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	4618      	mov	r0, r3
 8011586:	f7fe f8d3 	bl	800f730 <_ZN8touchgfx10TransitionD1Ev>
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	4618      	mov	r0, r3
 801158e:	3708      	adds	r7, #8
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}
 8011594:	08029f0c 	.word	0x08029f0c

08011598 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 8011598:	b580      	push	{r7, lr}
 801159a:	b082      	sub	sp, #8
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f7ff ffdd 	bl	8011560 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 80115a6:	2154      	movs	r1, #84	; 0x54
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f016 ff3f 	bl	802842c <_ZdlPvj>
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	4618      	mov	r0, r3
 80115b2:	3708      	adds	r7, #8
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}

080115b8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
class CoverTransition : public Transition
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	4a0a      	ldr	r2, [pc, #40]	; (80115ec <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev+0x34>)
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	601a      	str	r2, [r3, #0]
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	3328      	adds	r3, #40	; 0x28
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7ff fe12 	bl	80111f4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	330c      	adds	r3, #12
 80115d4:	4618      	mov	r0, r3
 80115d6:	f7ff fdd9 	bl	801118c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	4618      	mov	r0, r3
 80115de:	f7fe f8a7 	bl	800f730 <_ZN8touchgfx10TransitionD1Ev>
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	4618      	mov	r0, r3
 80115e6:	3708      	adds	r7, #8
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	08029f4c 	.word	0x08029f4c

080115f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b082      	sub	sp, #8
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f7ff ffdd 	bl	80115b8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>
 80115fe:	2150      	movs	r1, #80	; 0x50
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f016 ff13 	bl	802842c <_ZdlPvj>
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	4618      	mov	r0, r3
 801160a:	3708      	adds	r7, #8
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}

08011610 <_ZN8touchgfx12NoTransitionD1Ev>:
 8011610:	b580      	push	{r7, lr}
 8011612:	b082      	sub	sp, #8
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
 8011618:	4a05      	ldr	r2, [pc, #20]	; (8011630 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	601a      	str	r2, [r3, #0]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	4618      	mov	r0, r3
 8011622:	f7fe f885 	bl	800f730 <_ZN8touchgfx10TransitionD1Ev>
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	4618      	mov	r0, r3
 801162a:	3708      	adds	r7, #8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	0802a074 	.word	0x0802a074

08011634 <_ZN8touchgfx12NoTransitionD0Ev>:
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f7ff ffe7 	bl	8011610 <_ZN8touchgfx12NoTransitionD1Ev>
 8011642:	210c      	movs	r1, #12
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f016 fef1 	bl	802842c <_ZdlPvj>
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	4618      	mov	r0, r3
 801164e:	3708      	adds	r7, #8
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}

08011654 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8011654:	b580      	push	{r7, lr}
 8011656:	b082      	sub	sp, #8
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	4a05      	ldr	r2, [pc, #20]	; (8011674 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	601a      	str	r2, [r3, #0]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	4618      	mov	r0, r3
 8011666:	f7fe f8cd 	bl	800f804 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	4618      	mov	r0, r3
 801166e:	3708      	adds	r7, #8
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}
 8011674:	0802a0d8 	.word	0x0802a0d8

08011678 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8011678:	b580      	push	{r7, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	f7ff ffe7 	bl	8011654 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8011686:	2110      	movs	r1, #16
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f016 fecf 	bl	802842c <_ZdlPvj>
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	4618      	mov	r0, r3
 8011692:	3708      	adds	r7, #8
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}

08011698 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8011698:	b580      	push	{r7, lr}
 801169a:	b082      	sub	sp, #8
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 80116a0:	4b59      	ldr	r3, [pc, #356]	; (8011808 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 80116a2:	781b      	ldrb	r3, [r3, #0]
 80116a4:	f083 0301 	eor.w	r3, r3, #1
 80116a8:	b2db      	uxtb	r3, r3
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d003      	beq.n	80116b6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	2201      	movs	r2, #1
 80116b2:	721a      	strb	r2, [r3, #8]
            return;
 80116b4:	e0a5      	b.n	8011802 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	4618      	mov	r0, r3
 80116ba:	f7fe f859 	bl	800f770 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80116c4:	3301      	adds	r3, #1
 80116c6:	b2da      	uxtb	r2, r3
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80116da:	429a      	cmp	r2, r3
 80116dc:	d82f      	bhi.n	801173e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80116e4:	b298      	uxth	r0, r3
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	2100      	movs	r1, #0
 80116f6:	f00b fe7d 	bl	801d3f4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80116fa:	4603      	mov	r3, r0
 80116fc:	461a      	mov	r2, r3
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801170a:	b29b      	uxth	r3, r3
 801170c:	f003 0301 	and.w	r3, r3, #1
 8011710:	b29b      	uxth	r3, r3
 8011712:	2b00      	cmp	r3, #0
 8011714:	d01b      	beq.n	801174e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801171c:	b29b      	uxth	r3, r3
 801171e:	687a      	ldr	r2, [r7, #4]
 8011720:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011724:	2a00      	cmp	r2, #0
 8011726:	dd01      	ble.n	801172c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 8011728:	2201      	movs	r2, #1
 801172a:	e001      	b.n	8011730 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 801172c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011730:	4413      	add	r3, r2
 8011732:	b29b      	uxth	r3, r3
 8011734:	b21a      	sxth	r2, r3
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 801173c:	e007      	b.n	801174e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2201      	movs	r2, #1
 8011742:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2200      	movs	r2, #0
 8011748:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 801174c:	e059      	b.n	8011802 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011754:	2b03      	cmp	r3, #3
 8011756:	d845      	bhi.n	80117e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 8011758:	a201      	add	r2, pc, #4	; (adr r2, 8011760 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 801175a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801175e:	bf00      	nop
 8011760:	080117ab 	.word	0x080117ab
 8011764:	080117ab 	.word	0x080117ab
 8011768:	08011771 	.word	0x08011771
 801176c:	08011771 	.word	0x08011771
            calculatedValue -= snapshot.getX();
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	330c      	adds	r3, #12
 8011774:	4618      	mov	r0, r3
 8011776:	f7fe f8e0 	bl	800f93a <_ZNK8touchgfx8Drawable4getXEv>
 801177a:	4603      	mov	r3, r0
 801177c:	4619      	mov	r1, r3
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011784:	b29a      	uxth	r2, r3
 8011786:	b28b      	uxth	r3, r1
 8011788:	1ad3      	subs	r3, r2, r3
 801178a:	b29b      	uxth	r3, r3
 801178c:	b21a      	sxth	r2, r3
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f103 000c 	add.w	r0, r3, #12
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80117a0:	2200      	movs	r2, #0
 80117a2:	4619      	mov	r1, r3
 80117a4:	f00b f940 	bl	801ca28 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 80117a8:	e020      	b.n	80117ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	330c      	adds	r3, #12
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7fe f8d0 	bl	800f954 <_ZNK8touchgfx8Drawable4getYEv>
 80117b4:	4603      	mov	r3, r0
 80117b6:	4619      	mov	r1, r3
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80117be:	b29a      	uxth	r2, r3
 80117c0:	b28b      	uxth	r3, r1
 80117c2:	1ad3      	subs	r3, r2, r3
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	b21a      	sxth	r2, r3
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f103 000c 	add.w	r0, r3, #12
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80117da:	461a      	mov	r2, r3
 80117dc:	2100      	movs	r1, #0
 80117de:	f00b f923 	bl	801ca28 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 80117e2:	e003      	b.n	80117ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2201      	movs	r2, #1
 80117e8:	721a      	strb	r2, [r3, #8]
            break;
 80117ea:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	6858      	ldr	r0, [r3, #4]
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	685b      	ldr	r3, [r3, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	3378      	adds	r3, #120	; 0x78
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	687a      	ldr	r2, [r7, #4]
 80117fc:	323c      	adds	r2, #60	; 0x3c
 80117fe:	4611      	mov	r1, r2
 8011800:	4798      	blx	r3
    }
 8011802:	3708      	adds	r7, #8
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}
 8011808:	2000b41b 	.word	0x2000b41b

0801180c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 801180c:	b580      	push	{r7, lr}
 801180e:	b082      	sub	sp, #8
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8011814:	4b0b      	ldr	r3, [pc, #44]	; (8011844 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d00e      	beq.n	801183a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	685b      	ldr	r3, [r3, #4]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d00a      	beq.n	801183a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6858      	ldr	r0, [r3, #4]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	685b      	ldr	r3, [r3, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	3364      	adds	r3, #100	; 0x64
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	687a      	ldr	r2, [r7, #4]
 8011834:	320c      	adds	r2, #12
 8011836:	4611      	mov	r1, r2
 8011838:	4798      	blx	r3
    }
 801183a:	bf00      	nop
 801183c:	3708      	adds	r7, #8
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}
 8011842:	bf00      	nop
 8011844:	2000b41b 	.word	0x2000b41b

08011848 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8011848:	b580      	push	{r7, lr}
 801184a:	b088      	sub	sp, #32
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 8011850:	4b1a      	ldr	r3, [pc, #104]	; (80118bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 8011852:	781b      	ldrb	r3, [r3, #0]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d02d      	beq.n	80118b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	4618      	mov	r0, r3
 801185c:	f7fd ff9c 	bl	800f798 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8011860:	4a17      	ldr	r2, [pc, #92]	; (80118c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 8011862:	f107 0318 	add.w	r3, r7, #24
 8011866:	e892 0003 	ldmia.w	r2, {r0, r1}
 801186a:	e883 0003 	stmia.w	r3, {r0, r1}
 801186e:	f107 0008 	add.w	r0, r7, #8
 8011872:	f107 0318 	add.w	r3, r7, #24
 8011876:	cb0c      	ldmia	r3, {r2, r3}
 8011878:	6879      	ldr	r1, [r7, #4]
 801187a:	f7ff fddf 	bl	801143c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	685a      	ldr	r2, [r3, #4]
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	685b      	ldr	r3, [r3, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	3378      	adds	r3, #120	; 0x78
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	f107 0108 	add.w	r1, r7, #8
 8011890:	4610      	mov	r0, r2
 8011892:	4798      	blx	r3
            screenContainer->add(snapshot);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	6858      	ldr	r0, [r3, #4]
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	685b      	ldr	r3, [r3, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	3360      	adds	r3, #96	; 0x60
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	687a      	ldr	r2, [r7, #4]
 80118a4:	320c      	adds	r2, #12
 80118a6:	4611      	mov	r1, r2
 80118a8:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 80118aa:	f107 0308 	add.w	r3, r7, #8
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7ff fb3a 	bl	8010f28 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 80118b4:	bf00      	nop
 80118b6:	3720      	adds	r7, #32
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}
 80118bc:	2000b41b 	.word	0x2000b41b
 80118c0:	08029714 	.word	0x08029714

080118c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b082      	sub	sp, #8
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
 80118cc:	6039      	str	r1, [r7, #0]
        switch (direction)
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80118d4:	2b03      	cmp	r3, #3
 80118d6:	d83b      	bhi.n	8011950 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 80118d8:	a201      	add	r2, pc, #4	; (adr r2, 80118e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 80118da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118de:	bf00      	nop
 80118e0:	08011921 	.word	0x08011921
 80118e4:	0801193b 	.word	0x0801193b
 80118e8:	080118f1 	.word	0x080118f1
 80118ec:	08011907 	.word	0x08011907
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	3354      	adds	r3, #84	; 0x54
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	4a18      	ldr	r2, [pc, #96]	; (801195c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 80118fa:	8812      	ldrh	r2, [r2, #0]
 80118fc:	b211      	sxth	r1, r2
 80118fe:	2200      	movs	r2, #0
 8011900:	6838      	ldr	r0, [r7, #0]
 8011902:	4798      	blx	r3
            break;
 8011904:	e025      	b.n	8011952 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	3354      	adds	r3, #84	; 0x54
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	4a13      	ldr	r2, [pc, #76]	; (801195c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011910:	8812      	ldrh	r2, [r2, #0]
 8011912:	4252      	negs	r2, r2
 8011914:	b292      	uxth	r2, r2
 8011916:	b211      	sxth	r1, r2
 8011918:	2200      	movs	r2, #0
 801191a:	6838      	ldr	r0, [r7, #0]
 801191c:	4798      	blx	r3
            break;
 801191e:	e018      	b.n	8011952 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	3354      	adds	r3, #84	; 0x54
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	4a0d      	ldr	r2, [pc, #52]	; (8011960 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 801192a:	8812      	ldrh	r2, [r2, #0]
 801192c:	4252      	negs	r2, r2
 801192e:	b292      	uxth	r2, r2
 8011930:	b212      	sxth	r2, r2
 8011932:	2100      	movs	r1, #0
 8011934:	6838      	ldr	r0, [r7, #0]
 8011936:	4798      	blx	r3
            break;
 8011938:	e00b      	b.n	8011952 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	3354      	adds	r3, #84	; 0x54
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	4a07      	ldr	r2, [pc, #28]	; (8011960 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8011944:	8812      	ldrh	r2, [r2, #0]
 8011946:	b212      	sxth	r2, r2
 8011948:	2100      	movs	r1, #0
 801194a:	6838      	ldr	r0, [r7, #0]
 801194c:	4798      	blx	r3
            break;
 801194e:	e000      	b.n	8011952 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 8011950:	bf00      	nop
    }
 8011952:	bf00      	nop
 8011954:	3708      	adds	r7, #8
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}
 801195a:	bf00      	nop
 801195c:	2000b410 	.word	0x2000b410
 8011960:	2000b412 	.word	0x2000b412

08011964 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8011964:	b580      	push	{r7, lr}
 8011966:	b082      	sub	sp, #8
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	687a      	ldr	r2, [r7, #4]
 8011974:	68d2      	ldr	r2, [r2, #12]
 8011976:	1052      	asrs	r2, r2, #1
 8011978:	1898      	adds	r0, r3, r2
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	68db      	ldr	r3, [r3, #12]
 801197e:	f003 0301 	and.w	r3, r3, #1
 8011982:	2b00      	cmp	r3, #0
 8011984:	d102      	bne.n	801198c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	689b      	ldr	r3, [r3, #8]
 801198a:	e00a      	b.n	80119a2 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	687a      	ldr	r2, [r7, #4]
 8011992:	68d2      	ldr	r2, [r2, #12]
 8011994:	1052      	asrs	r2, r2, #1
 8011996:	4413      	add	r3, r2
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	687a      	ldr	r2, [r7, #4]
 801199c:	6892      	ldr	r2, [r2, #8]
 801199e:	4413      	add	r3, r2
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	6839      	ldr	r1, [r7, #0]
 80119a4:	4798      	blx	r3
    }
 80119a6:	bf00      	nop
 80119a8:	3708      	adds	r7, #8
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}

080119ae <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 80119ae:	b480      	push	{r7}
 80119b0:	b083      	sub	sp, #12
 80119b2:	af00      	add	r7, sp, #0
 80119b4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	685b      	ldr	r3, [r3, #4]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d010      	beq.n	80119e0 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	689b      	ldr	r3, [r3, #8]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d107      	bne.n	80119d6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	68db      	ldr	r3, [r3, #12]
 80119ca:	f003 0301 	and.w	r3, r3, #1
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d101      	bne.n	80119d6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 80119d2:	2301      	movs	r3, #1
 80119d4:	e000      	b.n	80119d8 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 80119d6:	2300      	movs	r3, #0
 80119d8:	2b01      	cmp	r3, #1
 80119da:	d001      	beq.n	80119e0 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 80119dc:	2301      	movs	r3, #1
 80119de:	e000      	b.n	80119e2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 80119e0:	2300      	movs	r3, #0
    }
 80119e2:	4618      	mov	r0, r3
 80119e4:	370c      	adds	r7, #12
 80119e6:	46bd      	mov	sp, r7
 80119e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ec:	4770      	bx	lr
	...

080119f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80119f0:	b590      	push	{r4, r7, lr}
 80119f2:	b08b      	sub	sp, #44	; 0x2c
 80119f4:	af02      	add	r7, sp, #8
 80119f6:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7fd feb8 	bl	800f770 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	7f9b      	ldrb	r3, [r3, #30]
 8011a04:	3301      	adds	r3, #1
 8011a06:	b2da      	uxtb	r2, r3
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	779a      	strb	r2, [r3, #30]
        if (animationCounter <= animationSteps)
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	7f9a      	ldrb	r2, [r3, #30]
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	7f5b      	ldrb	r3, [r3, #29]
 8011a14:	429a      	cmp	r2, r3
 8011a16:	d82b      	bhi.n	8011a70 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	7f9b      	ldrb	r3, [r3, #30]
 8011a1c:	b298      	uxth	r0, r3
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	7f5b      	ldrb	r3, [r3, #29]
 8011a28:	b29b      	uxth	r3, r3
 8011a2a:	2100      	movs	r1, #0
 8011a2c:	f00b fce2 	bl	801d3f4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8011a30:	4603      	mov	r3, r0
 8011a32:	461a      	mov	r2, r3
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	845a      	strh	r2, [r3, #34]	; 0x22
            if (calculatedValue % 2)
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011a3e:	b29b      	uxth	r3, r3
 8011a40:	f003 0301 	and.w	r3, r3, #1
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d019      	beq.n	8011a7e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011a50:	b29b      	uxth	r3, r3
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 8011a58:	2a00      	cmp	r2, #0
 8011a5a:	dd01      	ble.n	8011a60 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x70>
 8011a5c:	2201      	movs	r2, #1
 8011a5e:	e001      	b.n	8011a64 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
 8011a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a64:	4413      	add	r3, r2
 8011a66:	b29b      	uxth	r3, r3
 8011a68:	b21a      	sxth	r2, r3
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	845a      	strh	r2, [r3, #34]	; 0x22
 8011a6e:	e006      	b.n	8011a7e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            done = true;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2201      	movs	r2, #1
 8011a74:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2200      	movs	r2, #0
 8011a7a:	779a      	strb	r2, [r3, #30]
            return;
 8011a7c:	e0c0      	b.n	8011c00 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x210>
        calculatedValue -= movedToPos;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011a84:	b29a      	uxth	r2, r3
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	1ad3      	subs	r3, r2, r3
 8011a90:	b29b      	uxth	r3, r3
 8011a92:	b21a      	sxth	r2, r3
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	845a      	strh	r2, [r3, #34]	; 0x22
        movedToPos += calculatedValue;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8011a9e:	b29a      	uxth	r2, r3
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	4413      	add	r3, r2
 8011aaa:	b29b      	uxth	r3, r3
 8011aac:	b21a      	sxth	r2, r3
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	849a      	strh	r2, [r3, #36]	; 0x24
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	7f9b      	ldrb	r3, [r3, #30]
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	f040 8097 	bne.w	8011bea <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
 8011abc:	4b52      	ldr	r3, [pc, #328]	; (8011c08 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x218>)
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	f000 8092 	beq.w	8011bea <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1fa>
            Rect rect;
 8011ac6:	f107 0314 	add.w	r3, r7, #20
 8011aca:	4618      	mov	r0, r3
 8011acc:	f7fd fd82 	bl	800f5d4 <_ZN8touchgfx4RectC1Ev>
            switch (direction)
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	7f1b      	ldrb	r3, [r3, #28]
 8011ad4:	2b03      	cmp	r3, #3
 8011ad6:	d85b      	bhi.n	8011b90 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a0>
 8011ad8:	a201      	add	r2, pc, #4	; (adr r2, 8011ae0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xf0>)
 8011ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ade:	bf00      	nop
 8011ae0:	08011b41 	.word	0x08011b41
 8011ae4:	08011b6b 	.word	0x08011b6b
 8011ae8:	08011af1 	.word	0x08011af1
 8011aec:	08011b17 	.word	0x08011b17
                rect.x = 0;
 8011af0:	2300      	movs	r3, #0
 8011af2:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 8011af4:	2300      	movs	r3, #0
 8011af6:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH + calculatedValue;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011afe:	b29a      	uxth	r2, r3
 8011b00:	4b42      	ldr	r3, [pc, #264]	; (8011c0c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8011b02:	881b      	ldrh	r3, [r3, #0]
 8011b04:	4413      	add	r3, r2
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	b21b      	sxth	r3, r3
 8011b0a:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 8011b0c:	4b40      	ldr	r3, [pc, #256]	; (8011c10 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8011b0e:	881b      	ldrh	r3, [r3, #0]
 8011b10:	b21b      	sxth	r3, r3
 8011b12:	837b      	strh	r3, [r7, #26]
                break;
 8011b14:	e03d      	b.n	8011b92 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = calculatedValue;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011b1c:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH - calculatedValue;
 8011b22:	4b3a      	ldr	r3, [pc, #232]	; (8011c0c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8011b24:	881a      	ldrh	r2, [r3, #0]
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	1ad3      	subs	r3, r2, r3
 8011b30:	b29b      	uxth	r3, r3
 8011b32:	b21b      	sxth	r3, r3
 8011b34:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 8011b36:	4b36      	ldr	r3, [pc, #216]	; (8011c10 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8011b38:	881b      	ldrh	r3, [r3, #0]
 8011b3a:	b21b      	sxth	r3, r3
 8011b3c:	837b      	strh	r3, [r7, #26]
                break;
 8011b3e:	e028      	b.n	8011b92 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 8011b40:	2300      	movs	r3, #0
 8011b42:	82bb      	strh	r3, [r7, #20]
                rect.y = calculatedValue;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011b4a:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 8011b4c:	4b2f      	ldr	r3, [pc, #188]	; (8011c0c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8011b4e:	881b      	ldrh	r3, [r3, #0]
 8011b50:	b21b      	sxth	r3, r3
 8011b52:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT - calculatedValue;
 8011b54:	4b2e      	ldr	r3, [pc, #184]	; (8011c10 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8011b56:	881a      	ldrh	r2, [r3, #0]
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	1ad3      	subs	r3, r2, r3
 8011b62:	b29b      	uxth	r3, r3
 8011b64:	b21b      	sxth	r3, r3
 8011b66:	837b      	strh	r3, [r7, #26]
                break;
 8011b68:	e013      	b.n	8011b92 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 8011b72:	4b26      	ldr	r3, [pc, #152]	; (8011c0c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8011b74:	881b      	ldrh	r3, [r3, #0]
 8011b76:	b21b      	sxth	r3, r3
 8011b78:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT + calculatedValue;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8011b80:	b29a      	uxth	r2, r3
 8011b82:	4b23      	ldr	r3, [pc, #140]	; (8011c10 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8011b84:	881b      	ldrh	r3, [r3, #0]
 8011b86:	4413      	add	r3, r2
 8011b88:	b29b      	uxth	r3, r3
 8011b8a:	b21b      	sxth	r3, r3
 8011b8c:	837b      	strh	r3, [r7, #26]
                break;
 8011b8e:	e000      	b.n	8011b92 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a2>
                break;
 8011b90:	bf00      	nop
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 8011b92:	f7fd ffe3 	bl	800fb5c <_ZN8touchgfx3HAL11getInstanceEv>
 8011b96:	4602      	mov	r2, r0
 8011b98:	6813      	ldr	r3, [r2, #0]
 8011b9a:	3328      	adds	r3, #40	; 0x28
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	4610      	mov	r0, r2
 8011ba0:	4798      	blx	r3
 8011ba2:	61f8      	str	r0, [r7, #28]
            Rect source;
 8011ba4:	f107 030c 	add.w	r3, r7, #12
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7fd fd13 	bl	800f5d4 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	81bb      	strh	r3, [r7, #12]
            source.y = 0;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	81fb      	strh	r3, [r7, #14]
            source.width = HAL::DISPLAY_WIDTH;
 8011bb6:	4b15      	ldr	r3, [pc, #84]	; (8011c0c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x21c>)
 8011bb8:	881b      	ldrh	r3, [r3, #0]
 8011bba:	b21b      	sxth	r3, r3
 8011bbc:	823b      	strh	r3, [r7, #16]
            source.height = HAL::DISPLAY_HEIGHT;
 8011bbe:	4b14      	ldr	r3, [pc, #80]	; (8011c10 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x220>)
 8011bc0:	881b      	ldrh	r3, [r3, #0]
 8011bc2:	b21b      	sxth	r3, r3
 8011bc4:	827b      	strh	r3, [r7, #18]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 8011bc6:	f7fd ffc9 	bl	800fb5c <_ZN8touchgfx3HAL11getInstanceEv>
 8011bca:	f7fd ffd3 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 8011bce:	6803      	ldr	r3, [r0, #0]
 8011bd0:	330c      	adds	r3, #12
 8011bd2:	681c      	ldr	r4, [r3, #0]
 8011bd4:	f107 0114 	add.w	r1, r7, #20
 8011bd8:	f107 020c 	add.w	r2, r7, #12
 8011bdc:	2300      	movs	r3, #0
 8011bde:	9301      	str	r3, [sp, #4]
 8011be0:	23ff      	movs	r3, #255	; 0xff
 8011be2:	9300      	str	r3, [sp, #0]
 8011be4:	460b      	mov	r3, r1
 8011be6:	69f9      	ldr	r1, [r7, #28]
 8011be8:	47a0      	blx	r4
        screenContainer->forEachChild(&handleTickCallback);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	6858      	ldr	r0, [r3, #4]
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	685b      	ldr	r3, [r3, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	3378      	adds	r3, #120	; 0x78
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	320c      	adds	r2, #12
 8011bfc:	4611      	mov	r1, r2
 8011bfe:	4798      	blx	r3
    }
 8011c00:	3724      	adds	r7, #36	; 0x24
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd90      	pop	{r4, r7, pc}
 8011c06:	bf00      	nop
 8011c08:	2000b41a 	.word	0x2000b41a
 8011c0c:	2000b410 	.word	0x2000b410
 8011c10:	2000b412 	.word	0x2000b412

08011c14 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b082      	sub	sp, #8
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6858      	ldr	r0, [r3, #4]
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	685b      	ldr	r3, [r3, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	3364      	adds	r3, #100	; 0x64
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	687a      	ldr	r2, [r7, #4]
 8011c2c:	3228      	adds	r2, #40	; 0x28
 8011c2e:	4611      	mov	r1, r2
 8011c30:	4798      	blx	r3
    }
 8011c32:	bf00      	nop
 8011c34:	3708      	adds	r7, #8
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}
	...

08011c3c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b088      	sub	sp, #32
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
        Transition::init();
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7fd fda6 	bl	800f798 <_ZN8touchgfx10Transition4initEv>
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 8011c4c:	4a16      	ldr	r2, [pc, #88]	; (8011ca8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x6c>)
 8011c4e:	f107 0318 	add.w	r3, r7, #24
 8011c52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c56:	e883 0003 	stmia.w	r3, {r0, r1}
 8011c5a:	f107 0008 	add.w	r0, r7, #8
 8011c5e:	f107 0318 	add.w	r3, r7, #24
 8011c62:	cb0c      	ldmia	r3, {r2, r3}
 8011c64:	6879      	ldr	r1, [r7, #4]
 8011c66:	f7ff fc5b 	bl	8011520 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
        screenContainer->forEachChild(&initCallback);
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	685a      	ldr	r2, [r3, #4]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	3378      	adds	r3, #120	; 0x78
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	f107 0108 	add.w	r1, r7, #8
 8011c7c:	4610      	mov	r0, r2
 8011c7e:	4798      	blx	r3
        screenContainer->add(solid);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	6858      	ldr	r0, [r3, #4]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	685b      	ldr	r3, [r3, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	3360      	adds	r3, #96	; 0x60
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	687a      	ldr	r2, [r7, #4]
 8011c90:	3228      	adds	r2, #40	; 0x28
 8011c92:	4611      	mov	r1, r2
 8011c94:	4798      	blx	r3
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 8011c96:	f107 0308 	add.w	r3, r7, #8
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7ff fa76 	bl	801118c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8011ca0:	bf00      	nop
 8011ca2:	3720      	adds	r7, #32
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	0802971c 	.word	0x0802971c

08011cac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b082      	sub	sp, #8
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	6039      	str	r1, [r7, #0]
        switch (direction)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	7f1b      	ldrb	r3, [r3, #28]
 8011cba:	2b03      	cmp	r3, #3
 8011cbc:	d83a      	bhi.n	8011d34 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x88>
 8011cbe:	a201      	add	r2, pc, #4	; (adr r2, 8011cc4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x18>)
 8011cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cc4:	08011d05 	.word	0x08011d05
 8011cc8:	08011d1f 	.word	0x08011d1f
 8011ccc:	08011cd5 	.word	0x08011cd5
 8011cd0:	08011ceb 	.word	0x08011ceb
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	3354      	adds	r3, #84	; 0x54
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	4a18      	ldr	r2, [pc, #96]	; (8011d40 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 8011cde:	8812      	ldrh	r2, [r2, #0]
 8011ce0:	b211      	sxth	r1, r2
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	6838      	ldr	r0, [r7, #0]
 8011ce6:	4798      	blx	r3
            break;
 8011ce8:	e025      	b.n	8011d36 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	3354      	adds	r3, #84	; 0x54
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	4a13      	ldr	r2, [pc, #76]	; (8011d40 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x94>)
 8011cf4:	8812      	ldrh	r2, [r2, #0]
 8011cf6:	4252      	negs	r2, r2
 8011cf8:	b292      	uxth	r2, r2
 8011cfa:	b211      	sxth	r1, r2
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	6838      	ldr	r0, [r7, #0]
 8011d00:	4798      	blx	r3
            break;
 8011d02:	e018      	b.n	8011d36 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	3354      	adds	r3, #84	; 0x54
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	4a0d      	ldr	r2, [pc, #52]	; (8011d44 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011d0e:	8812      	ldrh	r2, [r2, #0]
 8011d10:	4252      	negs	r2, r2
 8011d12:	b292      	uxth	r2, r2
 8011d14:	b212      	sxth	r2, r2
 8011d16:	2100      	movs	r1, #0
 8011d18:	6838      	ldr	r0, [r7, #0]
 8011d1a:	4798      	blx	r3
            break;
 8011d1c:	e00b      	b.n	8011d36 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	3354      	adds	r3, #84	; 0x54
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	4a07      	ldr	r2, [pc, #28]	; (8011d44 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011d28:	8812      	ldrh	r2, [r2, #0]
 8011d2a:	b212      	sxth	r2, r2
 8011d2c:	2100      	movs	r1, #0
 8011d2e:	6838      	ldr	r0, [r7, #0]
 8011d30:	4798      	blx	r3
            break;
 8011d32:	e000      	b.n	8011d36 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8a>
            break;
 8011d34:	bf00      	nop
    }
 8011d36:	bf00      	nop
 8011d38:	3708      	adds	r7, #8
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	bd80      	pop	{r7, pc}
 8011d3e:	bf00      	nop
 8011d40:	2000b410 	.word	0x2000b410
 8011d44:	2000b412 	.word	0x2000b412

08011d48 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 8011d48:	b480      	push	{r7}
 8011d4a:	b083      	sub	sp, #12
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	6039      	str	r1, [r7, #0]
        }
 8011d52:	bf00      	nop
 8011d54:	370c      	adds	r7, #12
 8011d56:	46bd      	mov	sp, r7
 8011d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5c:	4770      	bx	lr
	...

08011d60 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b084      	sub	sp, #16
 8011d64:	af02      	add	r7, sp, #8
 8011d66:	6078      	str	r0, [r7, #4]
 8011d68:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8011d6a:	4b08      	ldr	r3, [pc, #32]	; (8011d8c <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x2c>)
 8011d6c:	881b      	ldrh	r3, [r3, #0]
 8011d6e:	b21a      	sxth	r2, r3
 8011d70:	4b07      	ldr	r3, [pc, #28]	; (8011d90 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv+0x30>)
 8011d72:	881b      	ldrh	r3, [r3, #0]
 8011d74:	b21b      	sxth	r3, r3
 8011d76:	9300      	str	r3, [sp, #0]
 8011d78:	4613      	mov	r3, r2
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	2100      	movs	r1, #0
 8011d7e:	6878      	ldr	r0, [r7, #4]
 8011d80:	f7fd fc3f 	bl	800f602 <_ZN8touchgfx4RectC1Essss>
        }
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	3708      	adds	r7, #8
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}
 8011d8c:	2000b410 	.word	0x2000b410
 8011d90:	2000b412 	.word	0x2000b412

08011d94 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b082      	sub	sp, #8
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	685b      	ldr	r3, [r3, #4]
 8011da2:	687a      	ldr	r2, [r7, #4]
 8011da4:	68d2      	ldr	r2, [r2, #12]
 8011da6:	1052      	asrs	r2, r2, #1
 8011da8:	1898      	adds	r0, r3, r2
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	68db      	ldr	r3, [r3, #12]
 8011dae:	f003 0301 	and.w	r3, r3, #1
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d102      	bne.n	8011dbc <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	689b      	ldr	r3, [r3, #8]
 8011dba:	e00a      	b.n	8011dd2 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	687a      	ldr	r2, [r7, #4]
 8011dc2:	68d2      	ldr	r2, [r2, #12]
 8011dc4:	1052      	asrs	r2, r2, #1
 8011dc6:	4413      	add	r3, r2
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	687a      	ldr	r2, [r7, #4]
 8011dcc:	6892      	ldr	r2, [r2, #8]
 8011dce:	4413      	add	r3, r2
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	6839      	ldr	r1, [r7, #0]
 8011dd4:	4798      	blx	r3
    }
 8011dd6:	bf00      	nop
 8011dd8:	3708      	adds	r7, #8
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}

08011dde <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8011dde:	b480      	push	{r7}
 8011de0:	b083      	sub	sp, #12
 8011de2:	af00      	add	r7, sp, #0
 8011de4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	685b      	ldr	r3, [r3, #4]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d010      	beq.n	8011e10 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	689b      	ldr	r3, [r3, #8]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d107      	bne.n	8011e06 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	68db      	ldr	r3, [r3, #12]
 8011dfa:	f003 0301 	and.w	r3, r3, #1
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d101      	bne.n	8011e06 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8011e02:	2301      	movs	r3, #1
 8011e04:	e000      	b.n	8011e08 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 8011e06:	2300      	movs	r3, #0
 8011e08:	2b01      	cmp	r3, #1
 8011e0a:	d001      	beq.n	8011e10 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	e000      	b.n	8011e12 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8011e10:	2300      	movs	r3, #0
    }
 8011e12:	4618      	mov	r0, r3
 8011e14:	370c      	adds	r7, #12
 8011e16:	46bd      	mov	sp, r7
 8011e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1c:	4770      	bx	lr

08011e1e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8011e1e:	b580      	push	{r7, lr}
 8011e20:	b082      	sub	sp, #8
 8011e22:	af00      	add	r7, sp, #0
 8011e24:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	68d2      	ldr	r2, [r2, #12]
 8011e2e:	1052      	asrs	r2, r2, #1
 8011e30:	1899      	adds	r1, r3, r2
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	68db      	ldr	r3, [r3, #12]
 8011e36:	f003 0301 	and.w	r3, r3, #1
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d102      	bne.n	8011e44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	689b      	ldr	r3, [r3, #8]
 8011e42:	e00a      	b.n	8011e5a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	685b      	ldr	r3, [r3, #4]
 8011e48:	687a      	ldr	r2, [r7, #4]
 8011e4a:	68d2      	ldr	r2, [r2, #12]
 8011e4c:	1052      	asrs	r2, r2, #1
 8011e4e:	4413      	add	r3, r2
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	687a      	ldr	r2, [r7, #4]
 8011e54:	6892      	ldr	r2, [r2, #8]
 8011e56:	4413      	add	r3, r2
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	4608      	mov	r0, r1
 8011e5c:	4798      	blx	r3
    }
 8011e5e:	bf00      	nop
 8011e60:	3708      	adds	r7, #8
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}

08011e66 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8011e66:	b480      	push	{r7}
 8011e68:	b083      	sub	sp, #12
 8011e6a:	af00      	add	r7, sp, #0
 8011e6c:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	685b      	ldr	r3, [r3, #4]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d010      	beq.n	8011e98 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	689b      	ldr	r3, [r3, #8]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d107      	bne.n	8011e8e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	68db      	ldr	r3, [r3, #12]
 8011e82:	f003 0301 	and.w	r3, r3, #1
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d101      	bne.n	8011e8e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	e000      	b.n	8011e90 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8011e8e:	2300      	movs	r3, #0
 8011e90:	2b01      	cmp	r3, #1
 8011e92:	d001      	beq.n	8011e98 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8011e94:	2301      	movs	r3, #1
 8011e96:	e000      	b.n	8011e9a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8011e98:	2300      	movs	r3, #0
    }
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	370c      	adds	r7, #12
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea4:	4770      	bx	lr

08011ea6 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8011ea6:	b480      	push	{r7}
 8011ea8:	b083      	sub	sp, #12
 8011eaa:	af00      	add	r7, sp, #0
 8011eac:	6078      	str	r0, [r7, #4]
 8011eae:	6039      	str	r1, [r7, #0]
        color = col;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	683a      	ldr	r2, [r7, #0]
 8011eb4:	601a      	str	r2, [r3, #0]
    }
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	4618      	mov	r0, r3
 8011eba:	370c      	adds	r7, #12
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr

08011ec4 <_ZNK8touchgfx9DragEvent9getDeltaXEv>:
    /**
     * Gets the distance in x coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaX() const
 8011ec4:	b480      	push	{r7}
 8011ec6:	b083      	sub	sp, #12
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
    {
        return _newX - _oldX;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011ed2:	b29a      	uxth	r2, r3
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	1ad3      	subs	r3, r2, r3
 8011ede:	b29b      	uxth	r3, r3
 8011ee0:	b21b      	sxth	r3, r3
    }
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	370c      	adds	r7, #12
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eec:	4770      	bx	lr

08011eee <_ZNK8touchgfx9DragEvent9getDeltaYEv>:
    /**
     * Gets the distance in y coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaY() const
 8011eee:	b480      	push	{r7}
 8011ef0:	b083      	sub	sp, #12
 8011ef2:	af00      	add	r7, sp, #0
 8011ef4:	6078      	str	r0, [r7, #4]
    {
        return _newY - _oldY;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011efc:	b29a      	uxth	r2, r3
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011f04:	b29b      	uxth	r3, r3
 8011f06:	1ad3      	subs	r3, r2, r3
 8011f08:	b29b      	uxth	r3, r3
 8011f0a:	b21b      	sxth	r3, r3
    }
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	370c      	adds	r7, #12
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr

08011f18 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8011f18:	b480      	push	{r7}
 8011f1a:	b083      	sub	sp, #12
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
 8011f20:	460b      	mov	r3, r1
 8011f22:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	887a      	ldrh	r2, [r7, #2]
 8011f28:	801a      	strh	r2, [r3, #0]
    {
    }
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	370c      	adds	r7, #12
 8011f30:	46bd      	mov	sp, r7
 8011f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f36:	4770      	bx	lr

08011f38 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 8011f38:	b480      	push	{r7}
 8011f3a:	b083      	sub	sp, #12
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	460b      	mov	r3, r1
 8011f42:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	78fa      	ldrb	r2, [r7, #3]
 8011f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8011f4c:	bf00      	nop
 8011f4e:	370c      	adds	r7, #12
 8011f50:	46bd      	mov	sp, r7
 8011f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f56:	4770      	bx	lr

08011f58 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
    {
 8011f60:	4a06      	ldr	r2, [pc, #24]	; (8011f7c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	601a      	str	r2, [r3, #0]
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	3304      	adds	r3, #4
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f001 f806 	bl	8012f7c <_ZN8touchgfx9ContainerD1Ev>
    }
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	4618      	mov	r0, r3
 8011f74:	3708      	adds	r7, #8
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
 8011f7a:	bf00      	nop
 8011f7c:	0802d168 	.word	0x0802d168

08011f80 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b082      	sub	sp, #8
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
    }
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f7ff ffe5 	bl	8011f58 <_ZN8touchgfx6ScreenD1Ev>
 8011f8e:	213c      	movs	r1, #60	; 0x3c
 8011f90:	6878      	ldr	r0, [r7, #4]
 8011f92:	f016 fa4b 	bl	802842c <_ZdlPvj>
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3708      	adds	r7, #8
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}

08011fa0 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8011fa0:	b480      	push	{r7}
 8011fa2:	b083      	sub	sp, #12
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
    {
    }
 8011fa8:	bf00      	nop
 8011faa:	370c      	adds	r7, #12
 8011fac:	46bd      	mov	sp, r7
 8011fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb2:	4770      	bx	lr

08011fb4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8011fb4:	b480      	push	{r7}
 8011fb6:	b083      	sub	sp, #12
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
    {
    }
 8011fbc:	bf00      	nop
 8011fbe:	370c      	adds	r7, #12
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc6:	4770      	bx	lr

08011fc8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see touchgfx::Application::switchScreen
     */
    virtual void tearDownScreen()
 8011fc8:	b480      	push	{r7}
 8011fca:	b083      	sub	sp, #12
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
    {
    }
 8011fd0:	bf00      	nop
 8011fd2:	370c      	adds	r7, #12
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fda:	4770      	bx	lr

08011fdc <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8011fdc:	b480      	push	{r7}
 8011fde:	b083      	sub	sp, #12
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
    {
    }
 8011fe4:	bf00      	nop
 8011fe6:	370c      	adds	r7, #12
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fee:	4770      	bx	lr

08011ff0 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8011ff0:	b480      	push	{r7}
 8011ff2:	b083      	sub	sp, #12
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	460b      	mov	r3, r1
 8011ffa:	70fb      	strb	r3, [r7, #3]
    {
    }
 8011ffc:	bf00      	nop
 8011ffe:	370c      	adds	r7, #12
 8012000:	46bd      	mov	sp, r7
 8012002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012006:	4770      	bx	lr

08012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	3304      	adds	r3, #4
 8012016:	6839      	ldr	r1, [r7, #0]
 8012018:	4618      	mov	r0, r3
 801201a:	f006 f8c5 	bl	80181a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801201e:	bf00      	nop
 8012020:	3708      	adds	r7, #8
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}

08012026 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 8012026:	b480      	push	{r7}
 8012028:	b083      	sub	sp, #12
 801202a:	af00      	add	r7, sp, #0
 801202c:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8012032:	4618      	mov	r0, r3
 8012034:	370c      	adds	r7, #12
 8012036:	46bd      	mov	sp, r7
 8012038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203c:	4770      	bx	lr

0801203e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 801203e:	b480      	push	{r7}
 8012040:	b083      	sub	sp, #12
 8012042:	af00      	add	r7, sp, #0
 8012044:	6078      	str	r0, [r7, #4]
 8012046:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	683a      	ldr	r2, [r7, #0]
 801204c:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801204e:	bf00      	nop
 8012050:	370c      	adds	r7, #12
 8012052:	46bd      	mov	sp, r7
 8012054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012058:	4770      	bx	lr
	...

0801205c <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 801205c:	b580      	push	{r7, lr}
 801205e:	b082      	sub	sp, #8
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
 8012064:	4a05      	ldr	r2, [pc, #20]	; (801207c <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	601a      	str	r2, [r3, #0]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	4618      	mov	r0, r3
 801206e:	f7fd fec7 	bl	800fe00 <_ZN8touchgfx6WidgetD1Ev>
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	4618      	mov	r0, r3
 8012076:	3708      	adds	r7, #8
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}
 801207c:	0802c824 	.word	0x0802c824

08012080 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8012080:	b580      	push	{r7, lr}
 8012082:	b082      	sub	sp, #8
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
 8012088:	6878      	ldr	r0, [r7, #4]
 801208a:	f7ff ffe7 	bl	801205c <_ZN8touchgfx14AbstractButtonD1Ev>
 801208e:	2130      	movs	r1, #48	; 0x30
 8012090:	6878      	ldr	r0, [r7, #4]
 8012092:	f016 f9cb 	bl	802842c <_ZdlPvj>
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	4618      	mov	r0, r3
 801209a:	3708      	adds	r7, #8
 801209c:	46bd      	mov	sp, r7
 801209e:	bd80      	pop	{r7, pc}

080120a0 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b082      	sub	sp, #8
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0), reportAsSolid(false)
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	4618      	mov	r0, r3
 80120ac:	2326      	movs	r3, #38	; 0x26
 80120ae:	461a      	mov	r2, r3
 80120b0:	2100      	movs	r1, #0
 80120b2:	f016 fa70 	bl	8028596 <memset>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	4618      	mov	r0, r3
 80120ba:	f7fd fe8f 	bl	800fddc <_ZN8touchgfx6WidgetC1Ev>
 80120be:	4a0b      	ldr	r2, [pc, #44]	; (80120ec <_ZN8touchgfx3BoxC1Ev+0x4c>)
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	601a      	str	r2, [r3, #0]
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	22ff      	movs	r2, #255	; 0xff
 80120c8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	3328      	adds	r3, #40	; 0x28
 80120d0:	2100      	movs	r1, #0
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7ff fee7 	bl	8011ea6 <_ZN8touchgfx9colortypeC1Em>
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2200      	movs	r2, #0
 80120dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	4618      	mov	r0, r3
 80120e4:	3708      	adds	r7, #8
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}
 80120ea:	bf00      	nop
 80120ec:	0802ca6c 	.word	0x0802ca6c

080120f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 80120f0:	b480      	push	{r7}
 80120f2:	b083      	sub	sp, #12
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
 80120f8:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	683a      	ldr	r2, [r7, #0]
 80120fe:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012100:	bf00      	nop
 8012102:	370c      	adds	r7, #12
 8012104:	46bd      	mov	sp, r7
 8012106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210a:	4770      	bx	lr

0801210c <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 801210c:	b480      	push	{r7}
 801210e:	b083      	sub	sp, #12
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255),
          painterAlpha(255)
 8012114:	4a0a      	ldr	r2, [pc, #40]	; (8012140 <_ZN8touchgfx15AbstractPainterC1Ev+0x34>)
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	601a      	str	r2, [r3, #0]
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	2200      	movs	r2, #0
 801211e:	809a      	strh	r2, [r3, #4]
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2200      	movs	r2, #0
 8012124:	80da      	strh	r2, [r3, #6]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	22ff      	movs	r2, #255	; 0xff
 801212a:	721a      	strb	r2, [r3, #8]
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	22ff      	movs	r2, #255	; 0xff
 8012130:	725a      	strb	r2, [r3, #9]
    {
    }
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	4618      	mov	r0, r3
 8012136:	370c      	adds	r7, #12
 8012138:	46bd      	mov	sp, r7
 801213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213e:	4770      	bx	lr
 8012140:	0802a84c 	.word	0x0802a84c

08012144 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8012144:	b480      	push	{r7}
 8012146:	b083      	sub	sp, #12
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
    {
 801214c:	4a04      	ldr	r2, [pc, #16]	; (8012160 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	601a      	str	r2, [r3, #0]
    }
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	4618      	mov	r0, r3
 8012156:	370c      	adds	r7, #12
 8012158:	46bd      	mov	sp, r7
 801215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215e:	4770      	bx	lr
 8012160:	0802a84c 	.word	0x0802a84c

08012164 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8012164:	b580      	push	{r7, lr}
 8012166:	b082      	sub	sp, #8
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
    }
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f7ff ffe9 	bl	8012144 <_ZN8touchgfx15AbstractPainterD1Ev>
 8012172:	210c      	movs	r1, #12
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	f016 f959 	bl	802842c <_ZdlPvj>
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	4618      	mov	r0, r3
 801217e:	3708      	adds	r7, #8
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}

08012184 <_ZN8touchgfx15AbstractPainter8setAlphaEh>:
     *       AbstractPainter for better performance.
     */
    virtual void render(uint8_t* ptr, int x, int xAdjust, int y, unsigned count, const uint8_t* covers) = 0;

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 8012184:	b480      	push	{r7}
 8012186:	b083      	sub	sp, #12
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
 801218c:	460b      	mov	r3, r1
 801218e:	70fb      	strb	r3, [r7, #3]
    {
        painterAlpha = newAlpha;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	78fa      	ldrb	r2, [r7, #3]
 8012194:	725a      	strb	r2, [r3, #9]
    }
 8012196:	bf00      	nop
 8012198:	370c      	adds	r7, #12
 801219a:	46bd      	mov	sp, r7
 801219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a0:	4770      	bx	lr

080121a2 <_ZNK8touchgfx15AbstractPainter8getAlphaEv>:

    /** @copydoc Image::getAlpha */
    virtual uint8_t getAlpha() const
 80121a2:	b480      	push	{r7}
 80121a4:	b083      	sub	sp, #12
 80121a6:	af00      	add	r7, sp, #0
 80121a8:	6078      	str	r0, [r7, #4]
    {
        return painterAlpha;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	7a5b      	ldrb	r3, [r3, #9]
    }
 80121ae:	4618      	mov	r0, r3
 80121b0:	370c      	adds	r7, #12
 80121b2:	46bd      	mov	sp, r7
 80121b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b8:	4770      	bx	lr

080121ba <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 80121ba:	b480      	push	{r7}
 80121bc:	b083      	sub	sp, #12
 80121be:	af00      	add	r7, sp, #0
 80121c0:	6078      	str	r0, [r7, #4]
 80121c2:	6039      	str	r1, [r7, #0]
            : v(i)
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	683a      	ldr	r2, [r7, #0]
 80121c8:	601a      	str	r2, [r3, #0]
        {
        }
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	4618      	mov	r0, r3
 80121ce:	370c      	adds	r7, #12
 80121d0:	46bd      	mov	sp, r7
 80121d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d6:	4770      	bx	lr

080121d8 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
     *
     * @note The painter set with setPainter() can also have an alpha value. The alpha value of
     *       the painter and the alpha value of the CanvasWidget are combine to a single
     *       alpha value.
     */
    virtual void setAlpha(uint8_t alpha)
 80121d8:	b480      	push	{r7}
 80121da:	b083      	sub	sp, #12
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
 80121e0:	460b      	mov	r3, r1
 80121e2:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	78fa      	ldrb	r2, [r7, #3]
 80121e8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
 80121ec:	bf00      	nop
 80121ee:	370c      	adds	r7, #12
 80121f0:	46bd      	mov	sp, r7
 80121f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f6:	4770      	bx	lr

080121f8 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
     *
     * @return Gets the current alpha value of the Box.
     *
     * @see setAlpha
     */
    virtual uint8_t getAlpha() const
 80121f8:	b480      	push	{r7}
 80121fa:	b083      	sub	sp, #12
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    }
 8012206:	4618      	mov	r0, r3
 8012208:	370c      	adds	r7, #12
 801220a:	46bd      	mov	sp, r7
 801220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012210:	4770      	bx	lr
	...

08012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8012214:	b590      	push	{r4, r7, lr}
 8012216:	b083      	sub	sp, #12
 8012218:	af00      	add	r7, sp, #0
 801221a:	4603      	mov	r3, r0
 801221c:	71fb      	strb	r3, [r7, #7]
 801221e:	460b      	mov	r3, r1
 8012220:	71bb      	strb	r3, [r7, #6]
 8012222:	4613      	mov	r3, r2
 8012224:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8012226:	f7fd fc99 	bl	800fb5c <_ZN8touchgfx3HAL11getInstanceEv>
 801222a:	4603      	mov	r3, r0
 801222c:	2b00      	cmp	r3, #0
 801222e:	d105      	bne.n	801223c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8012230:	4b0a      	ldr	r3, [pc, #40]	; (801225c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8012232:	4a0b      	ldr	r2, [pc, #44]	; (8012260 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8012234:	2135      	movs	r1, #53	; 0x35
 8012236:	480b      	ldr	r0, [pc, #44]	; (8012264 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8012238:	f016 f924 	bl	8028484 <__assert_func>
 801223c:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 801223e:	f7fd fc99 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 8012242:	6803      	ldr	r3, [r0, #0]
 8012244:	3328      	adds	r3, #40	; 0x28
 8012246:	681c      	ldr	r4, [r3, #0]
 8012248:	797b      	ldrb	r3, [r7, #5]
 801224a:	79ba      	ldrb	r2, [r7, #6]
 801224c:	79f9      	ldrb	r1, [r7, #7]
 801224e:	47a0      	blx	r4
 8012250:	4603      	mov	r3, r0
    }
 8012252:	4618      	mov	r0, r3
 8012254:	370c      	adds	r7, #12
 8012256:	46bd      	mov	sp, r7
 8012258:	bd90      	pop	{r4, r7, pc}
 801225a:	bf00      	nop
 801225c:	08029724 	.word	0x08029724
 8012260:	0802a8e4 	.word	0x0802a8e4
 8012264:	08029768 	.word	0x08029768

08012268 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8012268:	b580      	push	{r7, lr}
 801226a:	b084      	sub	sp, #16
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	4618      	mov	r0, r3
 8012274:	f7ff ff4a 	bl	801210c <_ZN8touchgfx15AbstractPainterC1Ev>
 8012278:	4a27      	ldr	r2, [pc, #156]	; (8012318 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb0>)
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	601a      	str	r2, [r3, #0]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2200      	movs	r2, #0
 8012282:	60da      	str	r2, [r3, #12]
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2200      	movs	r2, #0
 8012288:	611a      	str	r2, [r3, #16]
 801228a:	2301      	movs	r3, #1
 801228c:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 801228e:	f7fd fc71 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 8012292:	4602      	mov	r2, r0
 8012294:	6813      	ldr	r3, [r2, #0]
 8012296:	3320      	adds	r3, #32
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	4610      	mov	r0, r2
 801229c:	4798      	blx	r3
 801229e:	4603      	mov	r3, r0
 80122a0:	461a      	mov	r2, r3
 80122a2:	7bfb      	ldrb	r3, [r7, #15]
 80122a4:	4293      	cmp	r3, r2
 80122a6:	bf0c      	ite	eq
 80122a8:	2301      	moveq	r3, #1
 80122aa:	2300      	movne	r3, #0
 80122ac:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 80122ae:	f7fd fc55 	bl	800fb5c <_ZN8touchgfx3HAL11getInstanceEv>
 80122b2:	4603      	mov	r3, r0
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7ff feb6 	bl	8012026 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80122ba:	4603      	mov	r3, r0
 80122bc:	2b00      	cmp	r3, #0
 80122be:	bf14      	ite	ne
 80122c0:	2301      	movne	r3, #1
 80122c2:	2300      	moveq	r3, #0
 80122c4:	b2db      	uxtb	r3, r3
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d016      	beq.n	80122f8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x90>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80122ca:	f7fd fc47 	bl	800fb5c <_ZN8touchgfx3HAL11getInstanceEv>
 80122ce:	4603      	mov	r3, r0
 80122d0:	4618      	mov	r0, r3
 80122d2:	f7ff fea8 	bl	8012026 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80122d6:	4602      	mov	r2, r0
 80122d8:	6813      	ldr	r3, [r2, #0]
 80122da:	3320      	adds	r3, #32
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	4610      	mov	r0, r2
 80122e0:	4798      	blx	r3
 80122e2:	4603      	mov	r3, r0
 80122e4:	461a      	mov	r2, r3
 80122e6:	7bfb      	ldrb	r3, [r7, #15]
 80122e8:	4293      	cmp	r3, r2
 80122ea:	bf0c      	ite	eq
 80122ec:	2301      	moveq	r3, #1
 80122ee:	2300      	movne	r3, #0
 80122f0:	b2da      	uxtb	r2, r3
 80122f2:	7bbb      	ldrb	r3, [r7, #14]
 80122f4:	4313      	orrs	r3, r2
 80122f6:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 80122f8:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d105      	bne.n	801230a <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xa2>
 80122fe:	4b07      	ldr	r3, [pc, #28]	; (801231c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb4>)
 8012300:	4a07      	ldr	r2, [pc, #28]	; (8012320 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 8012302:	212b      	movs	r1, #43	; 0x2b
 8012304:	4807      	ldr	r0, [pc, #28]	; (8012324 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 8012306:	f016 f8bd 	bl	8028484 <__assert_func>
 801230a:	bf00      	nop
    }
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	4618      	mov	r0, r3
 8012310:	3710      	adds	r7, #16
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	0802c494 	.word	0x0802c494
 801231c:	080297a8 	.word	0x080297a8
 8012320:	0802a878 	.word	0x0802a878
 8012324:	08029808 	.word	0x08029808

08012328 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 8012328:	b580      	push	{r7, lr}
 801232a:	b082      	sub	sp, #8
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
 8012330:	4a05      	ldr	r2, [pc, #20]	; (8012348 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	601a      	str	r2, [r3, #0]
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	4618      	mov	r0, r3
 801233a:	f7ff ff03 	bl	8012144 <_ZN8touchgfx15AbstractPainterD1Ev>
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	4618      	mov	r0, r3
 8012342:	3708      	adds	r7, #8
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}
 8012348:	0802c494 	.word	0x0802c494

0801234c <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 801234c:	b580      	push	{r7, lr}
 801234e:	b082      	sub	sp, #8
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f7ff ffe7 	bl	8012328 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 801235a:	2114      	movs	r1, #20
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	f016 f865 	bl	802842c <_ZdlPvj>
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	4618      	mov	r0, r3
 8012366:	3708      	adds	r7, #8
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     * @param  alpha (Optional) the alpha, default is 255 i.e. solid.
     */
    PainterRGB888(colortype color = 0, uint8_t alpha = 255)
 801236c:	b580      	push	{r7, lr}
 801236e:	b084      	sub	sp, #16
 8012370:	af00      	add	r7, sp, #0
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	60b9      	str	r1, [r7, #8]
 8012376:	4613      	mov	r3, r2
 8012378:	71fb      	strb	r3, [r7, #7]
        : AbstractPainterRGB888()
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	4618      	mov	r0, r3
 801237e:	f7ff ff73 	bl	8012268 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8012382:	4a09      	ldr	r2, [pc, #36]	; (80123a8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x3c>)
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	601a      	str	r2, [r3, #0]
    {
        setColor(color);
 8012388:	68b9      	ldr	r1, [r7, #8]
 801238a:	68f8      	ldr	r0, [r7, #12]
 801238c:	f000 f80e 	bl	80123ac <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
        setAlpha(alpha);
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	79fa      	ldrb	r2, [r7, #7]
 8012394:	4611      	mov	r1, r2
 8012396:	4618      	mov	r0, r3
 8012398:	f7ff fef4 	bl	8012184 <_ZN8touchgfx15AbstractPainter8setAlphaEh>
    }
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	4618      	mov	r0, r3
 80123a0:	3710      	adds	r7, #16
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}
 80123a6:	bf00      	nop
 80123a8:	0802c53c 	.word	0x0802c53c

080123ac <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color and alpha to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b086      	sub	sp, #24
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
 80123b4:	6039      	str	r1, [r7, #0]
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	617b      	str	r3, [r7, #20]
     *
     * @see LCD16bpp::getRedFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getRedColor(colortype color)
    {
        return HAL::lcd().getRedColor(color);
 80123ba:	f7fd fbdb 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 80123be:	4602      	mov	r2, r0
 80123c0:	6813      	ldr	r3, [r2, #0]
 80123c2:	332c      	adds	r3, #44	; 0x2c
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	6979      	ldr	r1, [r7, #20]
 80123c8:	4610      	mov	r0, r2
 80123ca:	4798      	blx	r3
 80123cc:	4603      	mov	r3, r0
 80123ce:	461a      	mov	r2, r3
    {
        painterRed = Color::getRedColor(color);
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	751a      	strb	r2, [r3, #20]
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	613b      	str	r3, [r7, #16]
     *
     * @see LCD16bpp::getGreenFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreenColor(colortype color)
    {
        return HAL::lcd().getGreenColor(color);
 80123d8:	f7fd fbcc 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 80123dc:	4602      	mov	r2, r0
 80123de:	6813      	ldr	r3, [r2, #0]
 80123e0:	3330      	adds	r3, #48	; 0x30
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	6939      	ldr	r1, [r7, #16]
 80123e6:	4610      	mov	r0, r2
 80123e8:	4798      	blx	r3
 80123ea:	4603      	mov	r3, r0
 80123ec:	461a      	mov	r2, r3
        painterGreen = Color::getGreenColor(color);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	755a      	strb	r2, [r3, #21]
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	60fb      	str	r3, [r7, #12]
     *
     * @see LCD16bpp::getBlueFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlueColor(colortype color)
    {
        return HAL::lcd().getBlueColor(color);
 80123f6:	f7fd fbbd 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 80123fa:	4602      	mov	r2, r0
 80123fc:	6813      	ldr	r3, [r2, #0]
 80123fe:	3334      	adds	r3, #52	; 0x34
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	68f9      	ldr	r1, [r7, #12]
 8012404:	4610      	mov	r0, r2
 8012406:	4798      	blx	r3
 8012408:	4603      	mov	r3, r0
 801240a:	461a      	mov	r2, r3
        painterBlue = Color::getBlueColor(color);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	759a      	strb	r2, [r3, #22]
    }
 8012410:	bf00      	nop
 8012412:	3718      	adds	r7, #24
 8012414:	46bd      	mov	sp, r7
 8012416:	bd80      	pop	{r7, pc}

08012418 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8012418:	b480      	push	{r7}
 801241a:	b083      	sub	sp, #12
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	460b      	mov	r3, r1
 8012422:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8012424:	4a06      	ldr	r2, [pc, #24]	; (8012440 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	601a      	str	r2, [r3, #0]
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	887a      	ldrh	r2, [r7, #2]
 801242e:	809a      	strh	r2, [r3, #4]
    }
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	4618      	mov	r0, r3
 8012434:	370c      	adds	r7, #12
 8012436:	46bd      	mov	sp, r7
 8012438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243c:	4770      	bx	lr
 801243e:	bf00      	nop
 8012440:	08029e9c 	.word	0x08029e9c

08012444 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 8012444:	b480      	push	{r7}
 8012446:	b083      	sub	sp, #12
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
 801244c:	6039      	str	r1, [r7, #0]
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	889a      	ldrh	r2, [r3, #4]
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	809a      	strh	r2, [r3, #4]
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	4618      	mov	r0, r3
 801245a:	370c      	adds	r7, #12
 801245c:	46bd      	mov	sp, r7
 801245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012462:	4770      	bx	lr

08012464 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 8012464:	b580      	push	{r7, lr}
 8012466:	b082      	sub	sp, #8
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	3334      	adds	r3, #52	; 0x34
 8012472:	6839      	ldr	r1, [r7, #0]
 8012474:	4618      	mov	r0, r3
 8012476:	f7ff ffe5 	bl	8012444 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	f000 f820 	bl	80124c0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 8012480:	bf00      	nop
 8012482:	3708      	adds	r7, #8
 8012484:	46bd      	mov	sp, r7
 8012486:	bd80      	pop	{r7, pc}

08012488 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 8012488:	b480      	push	{r7}
 801248a:	b083      	sub	sp, #12
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
 8012490:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	683a      	ldr	r2, [r7, #0]
 8012496:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012498:	bf00      	nop
 801249a:	370c      	adds	r7, #12
 801249c:	46bd      	mov	sp, r7
 801249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a2:	4770      	bx	lr

080124a4 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 80124a4:	b480      	push	{r7}
 80124a6:	b083      	sub	sp, #12
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
 80124ac:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	683a      	ldr	r2, [r7, #0]
 80124b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
 80124b4:	bf00      	nop
 80124b6:	370c      	adds	r7, #12
 80124b8:	46bd      	mov	sp, r7
 80124ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124be:	4770      	bx	lr

080124c0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 80124c0:	b590      	push	{r4, r7, lr}
 80124c2:	b08b      	sub	sp, #44	; 0x2c
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	3334      	adds	r3, #52	; 0x34
 80124cc:	61fb      	str	r3, [r7, #28]
     *
     * @return Is the id valid.
     */
    FORCE_INLINE_FUNCTION bool hasValidId() const
    {
        return typedTextId != TYPED_TEXT_INVALID;
 80124ce:	69fb      	ldr	r3, [r7, #28]
 80124d0:	889b      	ldrh	r3, [r3, #4]
 80124d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124d6:	4293      	cmp	r3, r2
 80124d8:	bf14      	ite	ne
 80124da:	2301      	movne	r3, #1
 80124dc:	2300      	moveq	r3, #0
 80124de:	b2db      	uxtb	r3, r3
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d06f      	beq.n	80125c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x104>
        {
            const Font* f = typedText.getFont();
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	3334      	adds	r3, #52	; 0x34
 80124e8:	613b      	str	r3, [r7, #16]
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	60fb      	str	r3, [r7, #12]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80124ee:	4b39      	ldr	r3, [pc, #228]	; (80125d4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d105      	bne.n	8012502 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 80124f6:	4b38      	ldr	r3, [pc, #224]	; (80125d8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 80124f8:	4a38      	ldr	r2, [pc, #224]	; (80125dc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 80124fa:	21b1      	movs	r1, #177	; 0xb1
 80124fc:	4838      	ldr	r0, [pc, #224]	; (80125e0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 80124fe:	f015 ffc1 	bl	8028484 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	889a      	ldrh	r2, [r3, #4]
 8012506:	4b37      	ldr	r3, [pc, #220]	; (80125e4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8012508:	881b      	ldrh	r3, [r3, #0]
 801250a:	429a      	cmp	r2, r3
 801250c:	d305      	bcc.n	801251a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 801250e:	4b36      	ldr	r3, [pc, #216]	; (80125e8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8012510:	4a32      	ldr	r2, [pc, #200]	; (80125dc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8012512:	21b2      	movs	r1, #178	; 0xb2
 8012514:	4832      	ldr	r0, [pc, #200]	; (80125e0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8012516:	f015 ffb5 	bl	8028484 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 801251a:	4b34      	ldr	r3, [pc, #208]	; (80125ec <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 801251c:	681a      	ldr	r2, [r3, #0]
 801251e:	4b2d      	ldr	r3, [pc, #180]	; (80125d4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 8012520:	6819      	ldr	r1, [r3, #0]
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	889b      	ldrh	r3, [r3, #4]
 8012526:	005b      	lsls	r3, r3, #1
 8012528:	440b      	add	r3, r1
 801252a:	781b      	ldrb	r3, [r3, #0]
 801252c:	009b      	lsls	r3, r3, #2
 801252e:	4413      	add	r3, r2
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	3334      	adds	r3, #52	; 0x34
 8012538:	61bb      	str	r3, [r7, #24]
 801253a:	69bb      	ldr	r3, [r7, #24]
 801253c:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801253e:	4b25      	ldr	r3, [pc, #148]	; (80125d4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d105      	bne.n	8012552 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x92>
 8012546:	4b24      	ldr	r3, [pc, #144]	; (80125d8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 8012548:	4a24      	ldr	r2, [pc, #144]	; (80125dc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 801254a:	21b1      	movs	r1, #177	; 0xb1
 801254c:	4824      	ldr	r0, [pc, #144]	; (80125e0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 801254e:	f015 ff99 	bl	8028484 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	889a      	ldrh	r2, [r3, #4]
 8012556:	4b23      	ldr	r3, [pc, #140]	; (80125e4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8012558:	881b      	ldrh	r3, [r3, #0]
 801255a:	429a      	cmp	r2, r3
 801255c:	d305      	bcc.n	801256a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xaa>
 801255e:	4b22      	ldr	r3, [pc, #136]	; (80125e8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8012560:	4a1e      	ldr	r2, [pc, #120]	; (80125dc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8012562:	21b2      	movs	r1, #178	; 0xb2
 8012564:	481e      	ldr	r0, [pc, #120]	; (80125e0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8012566:	f015 ff8d 	bl	8028484 <__assert_func>
        return texts->getText(typedTextId);
 801256a:	4b21      	ldr	r3, [pc, #132]	; (80125f0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 801256c:	681a      	ldr	r2, [r3, #0]
 801256e:	69bb      	ldr	r3, [r7, #24]
 8012570:	889b      	ldrh	r3, [r3, #4]
 8012572:	4619      	mov	r1, r3
 8012574:	4610      	mov	r0, r2
 8012576:	f002 fcfd 	bl	8014f74 <_ZNK8touchgfx5Texts7getTextEt>
 801257a:	4603      	mov	r3, r0
 801257c:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 801257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	3328      	adds	r3, #40	; 0x28
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	6a39      	ldr	r1, [r7, #32]
 8012588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801258a:	4798      	blx	r3
 801258c:	4603      	mov	r3, r0
 801258e:	b2dc      	uxtb	r4, r3
 8012590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	3340      	adds	r3, #64	; 0x40
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	6a39      	ldr	r1, [r7, #32]
 801259a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801259c:	4798      	blx	r3
 801259e:	4603      	mov	r3, r0
 80125a0:	b2db      	uxtb	r3, r3
 80125a2:	fb14 f303 	smulbb	r3, r4, r3
 80125a6:	b2dc      	uxtb	r4, r3
 80125a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	3324      	adds	r3, #36	; 0x24
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	6a39      	ldr	r1, [r7, #32]
 80125b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125b4:	4798      	blx	r3
 80125b6:	4603      	mov	r3, r0
 80125b8:	4423      	add	r3, r4
 80125ba:	b2da      	uxtb	r2, r3
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 80125c2:	e003      	b.n	80125cc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10c>
            textHeightIncludingSpacing = 0;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2200      	movs	r2, #0
 80125c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 80125cc:	bf00      	nop
 80125ce:	372c      	adds	r7, #44	; 0x2c
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd90      	pop	{r4, r7, pc}
 80125d4:	2000b4ac 	.word	0x2000b4ac
 80125d8:	08029868 	.word	0x08029868
 80125dc:	0802a8b4 	.word	0x0802a8b4
 80125e0:	080298ac 	.word	0x080298ac
 80125e4:	2000b4b0 	.word	0x2000b4b0
 80125e8:	080298f0 	.word	0x080298f0
 80125ec:	2000b4b4 	.word	0x2000b4b4
 80125f0:	2000b4b8 	.word	0x2000b4b8

080125f4 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b082      	sub	sp, #8
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	4618      	mov	r0, r3
 8012600:	2326      	movs	r3, #38	; 0x26
 8012602:	461a      	mov	r2, r3
 8012604:	2100      	movs	r1, #0
 8012606:	f015 ffc6 	bl	8028596 <memset>
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	4618      	mov	r0, r3
 801260e:	f7fd fbe5 	bl	800fddc <_ZN8touchgfx6WidgetC1Ev>
 8012612:	4a14      	ldr	r2, [pc, #80]	; (8012664 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	601a      	str	r2, [r3, #0]
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	3328      	adds	r3, #40	; 0x28
 801261c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012620:	4618      	mov	r0, r3
 8012622:	f7ff fef9 	bl	8012418 <_ZN8touchgfx9TypedTextC1Et>
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	3330      	adds	r3, #48	; 0x30
 801262a:	2100      	movs	r1, #0
 801262c:	4618      	mov	r0, r3
 801262e:	f7ff fc3a 	bl	8011ea6 <_ZN8touchgfx9colortypeC1Em>
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2200      	movs	r2, #0
 8012636:	869a      	strh	r2, [r3, #52]	; 0x34
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	22ff      	movs	r2, #255	; 0xff
 801263c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2200      	movs	r2, #0
 8012644:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2200      	movs	r2, #0
 801264c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2200      	movs	r2, #0
 8012654:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	4618      	mov	r0, r3
 801265c:	3708      	adds	r7, #8
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}
 8012662:	bf00      	nop
 8012664:	0802c9c0 	.word	0x0802c9c0

08012668 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	4a08      	ldr	r2, [pc, #32]	; (8012694 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	601a      	str	r2, [r3, #0]
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	3328      	adds	r3, #40	; 0x28
 801267a:	4618      	mov	r0, r3
 801267c:	f7fc fe16 	bl	800f2ac <_ZN8touchgfx9TypedTextD1Ev>
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	4618      	mov	r0, r3
 8012684:	f7fd fbbc 	bl	800fe00 <_ZN8touchgfx6WidgetD1Ev>
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	4618      	mov	r0, r3
 801268c:	3708      	adds	r7, #8
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	0802c9c0 	.word	0x0802c9c0

08012698 <_ZN8touchgfx8TextAreaD0Ev>:
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f7ff ffe1 	bl	8012668 <_ZN8touchgfx8TextAreaD1Ev>
 80126a6:	213c      	movs	r1, #60	; 0x3c
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f015 febf 	bl	802842c <_ZdlPvj>
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	4618      	mov	r0, r3
 80126b2:	3708      	adds	r7, #8
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}

080126b8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	4618      	mov	r0, r3
 80126c4:	f7ff ff96 	bl	80125f4 <_ZN8touchgfx8TextAreaC1Ev>
 80126c8:	4a05      	ldr	r2, [pc, #20]	; (80126e0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	601a      	str	r2, [r3, #0]
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2200      	movs	r2, #0
 80126d2:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	4618      	mov	r0, r3
 80126d8:	3708      	adds	r7, #8
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}
 80126de:	bf00      	nop
 80126e0:	0802cbdc 	.word	0x0802cbdc

080126e4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 80126e4:	b480      	push	{r7}
 80126e6:	b083      	sub	sp, #12
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	683a      	ldr	r2, [r7, #0]
 80126f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80126f4:	bf00      	nop
 80126f6:	370c      	adds	r7, #12
 80126f8:	46bd      	mov	sp, r7
 80126fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fe:	4770      	bx	lr

08012700 <_ZN8touchgfx4ViewI13PongPresenterED1Ev>:
class View : public Screen
 8012700:	b580      	push	{r7, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	4a05      	ldr	r2, [pc, #20]	; (8012720 <_ZN8touchgfx4ViewI13PongPresenterED1Ev+0x20>)
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	601a      	str	r2, [r3, #0]
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	4618      	mov	r0, r3
 8012712:	f7ff fc21 	bl	8011f58 <_ZN8touchgfx6ScreenD1Ev>
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	4618      	mov	r0, r3
 801271a:	3708      	adds	r7, #8
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}
 8012720:	0802a818 	.word	0x0802a818

08012724 <_ZN8touchgfx4ViewI13PongPresenterED0Ev>:
 8012724:	b580      	push	{r7, lr}
 8012726:	b082      	sub	sp, #8
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f7ff ffe7 	bl	8012700 <_ZN8touchgfx4ViewI13PongPresenterED1Ev>
 8012732:	2140      	movs	r1, #64	; 0x40
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f015 fe79 	bl	802842c <_ZdlPvj>
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	4618      	mov	r0, r3
 801273e:	3708      	adds	r7, #8
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <_ZN12PongViewBaseD1Ev>:

class PongViewBase : public touchgfx::View<PongPresenter>
{
public:
    PongViewBase();
    virtual ~PongViewBase() {}
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
 801274c:	4a18      	ldr	r2, [pc, #96]	; (80127b0 <_ZN12PongViewBaseD1Ev+0x6c>)
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	601a      	str	r2, [r3, #0]
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8012758:	4618      	mov	r0, r3
 801275a:	f000 fba9 	bl	8012eb0 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8012764:	4618      	mov	r0, r3
 8012766:	f000 fc97 	bl	8013098 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012770:	4618      	mov	r0, r3
 8012772:	f000 fc69 	bl	8013048 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	33f0      	adds	r3, #240	; 0xf0
 801277a:	4618      	mov	r0, r3
 801277c:	f000 fbba 	bl	8012ef4 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	33d8      	adds	r3, #216	; 0xd8
 8012784:	4618      	mov	r0, r3
 8012786:	f000 fc1b 	bl	8012fc0 <_ZN8touchgfx13PainterRGB888D1Ev>
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	3370      	adds	r3, #112	; 0x70
 801278e:	4618      	mov	r0, r3
 8012790:	f000 fbd2 	bl	8012f38 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	3340      	adds	r3, #64	; 0x40
 8012798:	4618      	mov	r0, r3
 801279a:	f000 fad1 	bl	8012d40 <_ZN8touchgfx3BoxD1Ev>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7ff ffad 	bl	8012700 <_ZN8touchgfx4ViewI13PongPresenterED1Ev>
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	4618      	mov	r0, r3
 80127aa:	3708      	adds	r7, #8
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}
 80127b0:	0802a6dc 	.word	0x0802a6dc

080127b4 <_ZN12PongViewBaseD0Ev>:
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b082      	sub	sp, #8
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f7ff ffc1 	bl	8012744 <_ZN12PongViewBaseD1Ev>
 80127c2:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f015 fe30 	bl	802842c <_ZdlPvj>
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	4618      	mov	r0, r3
 80127d0:	3708      	adds	r7, #8
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}

080127d6 <_ZN12PongViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80127d6:	b580      	push	{r7, lr}
 80127d8:	b082      	sub	sp, #8
 80127da:	af00      	add	r7, sp, #0
 80127dc:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80127de:	f009 fcd1 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 80127e2:	4603      	mov	r3, r0
    }
 80127e4:	4618      	mov	r0, r3
 80127e6:	3708      	adds	r7, #8
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}

080127ec <_ZN12PongViewBaseC1Ev>:
#include <gui_generated/pong_screen/PongViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

PongViewBase::PongViewBase() :
 80127ec:	b590      	push	{r4, r7, lr}
 80127ee:	b095      	sub	sp, #84	; 0x54
 80127f0:	af02      	add	r7, sp, #8
 80127f2:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &PongViewBase::buttonCallbackHandler)
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	4618      	mov	r0, r3
 80127f8:	f000 fa26 	bl	8012c48 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev>
 80127fc:	4ad2      	ldr	r2, [pc, #840]	; (8012b48 <_ZN12PongViewBaseC1Ev+0x35c>)
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	601a      	str	r2, [r3, #0]
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	3340      	adds	r3, #64	; 0x40
 8012806:	4618      	mov	r0, r3
 8012808:	f7ff fc4a 	bl	80120a0 <_ZN8touchgfx3BoxC1Ev>
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	3370      	adds	r3, #112	; 0x70
 8012810:	4618      	mov	r0, r3
 8012812:	f000 fa73 	bl	8012cfc <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev>
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801281c:	f107 030c 	add.w	r3, r7, #12
 8012820:	2100      	movs	r1, #0
 8012822:	4618      	mov	r0, r3
 8012824:	f7ff fb3f 	bl	8011ea6 <_ZN8touchgfx9colortypeC1Em>
 8012828:	22ff      	movs	r2, #255	; 0xff
 801282a:	68f9      	ldr	r1, [r7, #12]
 801282c:	4620      	mov	r0, r4
 801282e:	f7ff fd9d 	bl	801236c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	33f0      	adds	r3, #240	; 0xf0
 8012836:	4618      	mov	r0, r3
 8012838:	f000 faa4 	bl	8012d84 <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev>
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012842:	4618      	mov	r0, r3
 8012844:	f008 fc30 	bl	801b0a8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801284e:	4618      	mov	r0, r3
 8012850:	f7ff ff32 	bl	80126b8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f503 70e8 	add.w	r0, r3, #464	; 0x1d0
 801285a:	4bbc      	ldr	r3, [pc, #752]	; (8012b4c <_ZN12PongViewBaseC1Ev+0x360>)
 801285c:	613b      	str	r3, [r7, #16]
 801285e:	2300      	movs	r3, #0
 8012860:	617b      	str	r3, [r7, #20]
 8012862:	f107 0310 	add.w	r3, r7, #16
 8012866:	cb0c      	ldmia	r3, {r2, r3}
 8012868:	6879      	ldr	r1, [r7, #4]
 801286a:	f000 fab3 	bl	8012dd4 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8012874:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8012878:	4618      	mov	r0, r3
 801287a:	f008 fc41 	bl	801b100 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    background.setPosition(0, 0, 480, 272);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8012884:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012888:	9300      	str	r3, [sp, #0]
 801288a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801288e:	2200      	movs	r2, #0
 8012890:	2100      	movs	r1, #0
 8012892:	f7fd f825 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801289c:	22ff      	movs	r2, #255	; 0xff
 801289e:	21ff      	movs	r1, #255	; 0xff
 80128a0:	20ff      	movs	r0, #255	; 0xff
 80128a2:	f7ff fcb7 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80128a6:	4603      	mov	r3, r0
 80128a8:	4619      	mov	r1, r3
 80128aa:	4620      	mov	r0, r4
 80128ac:	f7ff fc20 	bl	80120f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    ball.setPosition(200, 85, 80, 80);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80128b6:	2350      	movs	r3, #80	; 0x50
 80128b8:	9300      	str	r3, [sp, #0]
 80128ba:	2350      	movs	r3, #80	; 0x50
 80128bc:	2255      	movs	r2, #85	; 0x55
 80128be:	21c8      	movs	r1, #200	; 0xc8
 80128c0:	f7fd f80e 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
    ball.setCenter(40, 40);
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	3370      	adds	r3, #112	; 0x70
 80128c8:	2228      	movs	r2, #40	; 0x28
 80128ca:	2128      	movs	r1, #40	; 0x28
 80128cc:	4618      	mov	r0, r3
 80128ce:	f000 f96f 	bl	8012bb0 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    ball.setRadius(20);
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	3370      	adds	r3, #112	; 0x70
 80128d6:	2114      	movs	r1, #20
 80128d8:	4618      	mov	r0, r3
 80128da:	f000 fa9b 	bl	8012e14 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    ball.setLineWidth(0);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	3370      	adds	r3, #112	; 0x70
 80128e2:	2100      	movs	r1, #0
 80128e4:	4618      	mov	r0, r3
 80128e6:	f000 faac 	bl	8012e42 <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    ball.setArc(0, 360);
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	3370      	adds	r3, #112	; 0x70
 80128ee:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80128f2:	2100      	movs	r1, #0
 80128f4:	4618      	mov	r0, r3
 80128f6:	f000 f981 	bl	8012bfc <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    ballPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8012900:	22ff      	movs	r2, #255	; 0xff
 8012902:	2180      	movs	r1, #128	; 0x80
 8012904:	2006      	movs	r0, #6
 8012906:	f7ff fc85 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801290a:	4603      	mov	r3, r0
 801290c:	4619      	mov	r1, r3
 801290e:	4620      	mov	r0, r4
 8012910:	f7ff fd4c 	bl	80123ac <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    ball.setPainter(ballPainter);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f103 0270 	add.w	r2, r3, #112	; 0x70
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	33d8      	adds	r3, #216	; 0xd8
 801291e:	4619      	mov	r1, r3
 8012920:	4610      	mov	r0, r2
 8012922:	f007 fa47 	bl	8019db4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

    paddle1.setPosition(66, 212, 134, 29);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 801292c:	231d      	movs	r3, #29
 801292e:	9300      	str	r3, [sp, #0]
 8012930:	2386      	movs	r3, #134	; 0x86
 8012932:	22d4      	movs	r2, #212	; 0xd4
 8012934:	2142      	movs	r1, #66	; 0x42
 8012936:	f7fc ffd3 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
    paddle1.setColor(touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8012940:	22ff      	movs	r2, #255	; 0xff
 8012942:	2180      	movs	r1, #128	; 0x80
 8012944:	2006      	movs	r0, #6
 8012946:	f7ff fc65 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801294a:	4603      	mov	r3, r0
 801294c:	4619      	mov	r1, r3
 801294e:	4620      	mov	r0, r4
 8012950:	f7ff fbce 	bl	80120f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    back_button.setXY(0, 0);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	f503 7390 	add.w	r3, r3, #288	; 0x120
 801295a:	2200      	movs	r2, #0
 801295c:	2100      	movs	r1, #0
 801295e:	4618      	mov	r0, r3
 8012960:	f7fd f823 	bl	800f9aa <_ZN8touchgfx8Drawable5setXYEss>
    back_button.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f503 7490 	add.w	r4, r3, #288	; 0x120
 801296a:	f107 0318 	add.w	r3, r7, #24
 801296e:	2102      	movs	r1, #2
 8012970:	4618      	mov	r0, r3
 8012972:	f7ff fad1 	bl	8011f18 <_ZN8touchgfx6BitmapC1Et>
 8012976:	f107 031c 	add.w	r3, r7, #28
 801297a:	2103      	movs	r1, #3
 801297c:	4618      	mov	r0, r3
 801297e:	f7ff facb 	bl	8011f18 <_ZN8touchgfx6BitmapC1Et>
 8012982:	f107 021c 	add.w	r2, r7, #28
 8012986:	f107 0318 	add.w	r3, r7, #24
 801298a:	4619      	mov	r1, r3
 801298c:	4620      	mov	r0, r4
 801298e:	f008 f8a3 	bl	801aad8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    back_button.setLabelText(touchgfx::TypedText(T_SINGLEUSEID22));
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8012998:	f107 0320 	add.w	r3, r7, #32
 801299c:	210d      	movs	r1, #13
 801299e:	4618      	mov	r0, r3
 80129a0:	f7ff fd3a 	bl	8012418 <_ZN8touchgfx9TypedTextC1Et>
 80129a4:	f107 0320 	add.w	r3, r7, #32
 80129a8:	4619      	mov	r1, r3
 80129aa:	4620      	mov	r0, r4
 80129ac:	f7ff fd5a 	bl	8012464 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80129b0:	f107 0320 	add.w	r3, r7, #32
 80129b4:	4618      	mov	r0, r3
 80129b6:	f7fc fc79 	bl	800f2ac <_ZN8touchgfx9TypedTextD1Ev>
    back_button.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f503 7490 	add.w	r4, r3, #288	; 0x120
 80129c0:	22ff      	movs	r2, #255	; 0xff
 80129c2:	21ff      	movs	r1, #255	; 0xff
 80129c4:	20ff      	movs	r0, #255	; 0xff
 80129c6:	f7ff fc25 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80129ca:	4603      	mov	r3, r0
 80129cc:	4619      	mov	r1, r3
 80129ce:	4620      	mov	r0, r4
 80129d0:	f7ff fd5a 	bl	8012488 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    back_button.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f503 7490 	add.w	r4, r3, #288	; 0x120
 80129da:	22ff      	movs	r2, #255	; 0xff
 80129dc:	21ff      	movs	r1, #255	; 0xff
 80129de:	20ff      	movs	r0, #255	; 0xff
 80129e0:	f7ff fc18 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80129e4:	4603      	mov	r3, r0
 80129e6:	4619      	mov	r1, r3
 80129e8:	4620      	mov	r0, r4
 80129ea:	f7ff fd5b 	bl	80124a4 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    back_button.setAction(buttonCallback);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	f503 7290 	add.w	r2, r3, #288	; 0x120
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80129fa:	4619      	mov	r1, r3
 80129fc:	4610      	mov	r0, r2
 80129fe:	f7ff fb1e 	bl	801203e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    score.setXY(299, 0);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8012a08:	2200      	movs	r2, #0
 8012a0a:	f240 112b 	movw	r1, #299	; 0x12b
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7fc ffcb 	bl	800f9aa <_ZN8touchgfx8Drawable5setXYEss>
    score.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 173, 173));
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 8012a1a:	22ad      	movs	r2, #173	; 0xad
 8012a1c:	21ad      	movs	r1, #173	; 0xad
 8012a1e:	2000      	movs	r0, #0
 8012a20:	f7ff fbf8 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012a24:	4603      	mov	r3, r0
 8012a26:	63bc      	str	r4, [r7, #56]	; 0x38
 8012a28:	60bb      	str	r3, [r7, #8]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8012a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a2c:	68ba      	ldr	r2, [r7, #8]
 8012a2e:	631a      	str	r2, [r3, #48]	; 0x30
    score.setLinespacing(0);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8012a36:	643b      	str	r3, [r7, #64]	; 0x40
 8012a38:	2300      	movs	r3, #0
 8012a3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8012a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a3e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012a40:	869a      	strh	r2, [r3, #52]	; 0x34
    Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID29).getText());
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8012a48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012a4c:	2111      	movs	r1, #17
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f7ff fce2 	bl	8012418 <_ZN8touchgfx9TypedTextC1Et>
 8012a54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012a58:	647b      	str	r3, [r7, #68]	; 0x44
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012a5a:	4b3d      	ldr	r3, [pc, #244]	; (8012b50 <_ZN12PongViewBaseC1Ev+0x364>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d105      	bne.n	8012a6e <_ZN12PongViewBaseC1Ev+0x282>
 8012a62:	4b3c      	ldr	r3, [pc, #240]	; (8012b54 <_ZN12PongViewBaseC1Ev+0x368>)
 8012a64:	4a3c      	ldr	r2, [pc, #240]	; (8012b58 <_ZN12PongViewBaseC1Ev+0x36c>)
 8012a66:	21b1      	movs	r1, #177	; 0xb1
 8012a68:	483c      	ldr	r0, [pc, #240]	; (8012b5c <_ZN12PongViewBaseC1Ev+0x370>)
 8012a6a:	f015 fd0b 	bl	8028484 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a70:	889a      	ldrh	r2, [r3, #4]
 8012a72:	4b3b      	ldr	r3, [pc, #236]	; (8012b60 <_ZN12PongViewBaseC1Ev+0x374>)
 8012a74:	881b      	ldrh	r3, [r3, #0]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d305      	bcc.n	8012a86 <_ZN12PongViewBaseC1Ev+0x29a>
 8012a7a:	4b3a      	ldr	r3, [pc, #232]	; (8012b64 <_ZN12PongViewBaseC1Ev+0x378>)
 8012a7c:	4a36      	ldr	r2, [pc, #216]	; (8012b58 <_ZN12PongViewBaseC1Ev+0x36c>)
 8012a7e:	21b2      	movs	r1, #178	; 0xb2
 8012a80:	4836      	ldr	r0, [pc, #216]	; (8012b5c <_ZN12PongViewBaseC1Ev+0x370>)
 8012a82:	f015 fcff 	bl	8028484 <__assert_func>
        return texts->getText(typedTextId);
 8012a86:	4b38      	ldr	r3, [pc, #224]	; (8012b68 <_ZN12PongViewBaseC1Ev+0x37c>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8012a8c:	4611      	mov	r1, r2
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f002 fa70 	bl	8014f74 <_ZNK8touchgfx5Texts7getTextEt>
 8012a94:	4603      	mov	r3, r0
 8012a96:	4a35      	ldr	r2, [pc, #212]	; (8012b6c <_ZN12PongViewBaseC1Ev+0x380>)
 8012a98:	2114      	movs	r1, #20
 8012a9a:	4620      	mov	r0, r4
 8012a9c:	f00b fdcc 	bl	801e638 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012aa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f7fc fc01 	bl	800f2ac <_ZN8touchgfx9TypedTextD1Ev>
    score.setWildcard(scoreBuffer);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012ab6:	4619      	mov	r1, r3
 8012ab8:	4610      	mov	r0, r2
 8012aba:	f7ff fe13 	bl	80126e4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    score.resizeToCurrentText();
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f007 ffa3 	bl	801aa10 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    score.setTypedText(touchgfx::TypedText(T_SINGLEUSEID28));
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 8012ad0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012ad4:	2110      	movs	r1, #16
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	f7ff fc9e 	bl	8012418 <_ZN8touchgfx9TypedTextC1Et>
 8012adc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	4620      	mov	r0, r4
 8012ae4:	f007 ffbe 	bl	801aa64 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8012ae8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7fc fbdd 	bl	800f2ac <_ZN8touchgfx9TypedTextD1Ev>

    add(background);
 8012af2:	687a      	ldr	r2, [r7, #4]
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	3340      	adds	r3, #64	; 0x40
 8012af8:	4619      	mov	r1, r3
 8012afa:	4610      	mov	r0, r2
 8012afc:	f7ff fa84 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ball);
 8012b00:	687a      	ldr	r2, [r7, #4]
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	3370      	adds	r3, #112	; 0x70
 8012b06:	4619      	mov	r1, r3
 8012b08:	4610      	mov	r0, r2
 8012b0a:	f7ff fa7d 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(paddle1);
 8012b0e:	687a      	ldr	r2, [r7, #4]
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	33f0      	adds	r3, #240	; 0xf0
 8012b14:	4619      	mov	r1, r3
 8012b16:	4610      	mov	r0, r2
 8012b18:	f7ff fa76 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(back_button);
 8012b1c:	687a      	ldr	r2, [r7, #4]
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012b24:	4619      	mov	r1, r3
 8012b26:	4610      	mov	r0, r2
 8012b28:	f7ff fa6e 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(score);
 8012b2c:	687a      	ldr	r2, [r7, #4]
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8012b34:	4619      	mov	r1, r3
 8012b36:	4610      	mov	r0, r2
 8012b38:	f7ff fa66 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	4618      	mov	r0, r3
 8012b40:	374c      	adds	r7, #76	; 0x4c
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd90      	pop	{r4, r7, pc}
 8012b46:	bf00      	nop
 8012b48:	0802a6dc 	.word	0x0802a6dc
 8012b4c:	08012b85 	.word	0x08012b85
 8012b50:	2000b4ac 	.word	0x2000b4ac
 8012b54:	08029868 	.word	0x08029868
 8012b58:	0802a8b4 	.word	0x0802a8b4
 8012b5c:	080298ac 	.word	0x080298ac
 8012b60:	2000b4b0 	.word	0x2000b4b0
 8012b64:	080298f0 	.word	0x080298f0
 8012b68:	2000b4b8 	.word	0x2000b4b8
 8012b6c:	08029944 	.word	0x08029944

08012b70 <_ZN12PongViewBase11setupScreenEv>:

void PongViewBase::setupScreen()
{
 8012b70:	b480      	push	{r7}
 8012b72:	b083      	sub	sp, #12
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]

}
 8012b78:	bf00      	nop
 8012b7a:	370c      	adds	r7, #12
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b82:	4770      	bx	lr

08012b84 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void PongViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b082      	sub	sp, #8
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
 8012b8c:	6039      	str	r1, [r7, #0]
    if (&src == &back_button)
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012b94:	683a      	ldr	r2, [r7, #0]
 8012b96:	429a      	cmp	r2, r3
 8012b98:	d106      	bne.n	8012ba8 <_ZN12PongViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //back_to_main_screen
        //When back_button clicked change screen to screen
        //Go to screen with screen transition towards East
        application().gotoscreenScreenSlideTransitionEast();
 8012b9a:	6878      	ldr	r0, [r7, #4]
 8012b9c:	f7ff fe1b 	bl	80127d6 <_ZN12PongViewBase11applicationEv>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7fd f9f0 	bl	800ff88 <_ZN23FrontendApplicationBase35gotoscreenScreenSlideTransitionEastEv>
    }
}
 8012ba8:	bf00      	nop
 8012baa:	3708      	adds	r7, #8
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>:
     * @see setRadius, setCircle, getCenter
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b088      	sub	sp, #32
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	60f8      	str	r0, [r7, #12]
 8012bb8:	60b9      	str	r1, [r7, #8]
 8012bba:	607a      	str	r2, [r7, #4]
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8012bc0:	69bb      	ldr	r3, [r7, #24]
 8012bc2:	015a      	lsls	r2, r3, #5
 8012bc4:	f107 0314 	add.w	r3, r7, #20
 8012bc8:	4611      	mov	r1, r2
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f7ff faf5 	bl	80121ba <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012bd0:	697b      	ldr	r3, [r7, #20]
 8012bd2:	461a      	mov	r2, r3
    {
        this->circleCenterX = CWRUtil::toQ5<T>(x);
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	61fb      	str	r3, [r7, #28]
 8012bdc:	69fb      	ldr	r3, [r7, #28]
 8012bde:	015a      	lsls	r2, r3, #5
 8012be0:	f107 0310 	add.w	r3, r7, #16
 8012be4:	4611      	mov	r1, r2
 8012be6:	4618      	mov	r0, r3
 8012be8:	f7ff fae7 	bl	80121ba <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012bec:	693b      	ldr	r3, [r7, #16]
 8012bee:	461a      	mov	r2, r3
        this->circleCenterY = CWRUtil::toQ5<T>(y);
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8012bf4:	bf00      	nop
 8012bf6:	3720      	adds	r7, #32
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}

08012bfc <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>:
     * @see getArc, updateArcStart, updateArcEnd, updateArc
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setArc(const T startAngle, const T endAngle)
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b088      	sub	sp, #32
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	60f8      	str	r0, [r7, #12]
 8012c04:	60b9      	str	r1, [r7, #8]
 8012c06:	607a      	str	r2, [r7, #4]
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	61bb      	str	r3, [r7, #24]
 8012c0c:	69bb      	ldr	r3, [r7, #24]
 8012c0e:	015a      	lsls	r2, r3, #5
 8012c10:	f107 0314 	add.w	r3, r7, #20
 8012c14:	4611      	mov	r1, r2
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7ff facf 	bl	80121ba <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012c1c:	697b      	ldr	r3, [r7, #20]
 8012c1e:	461a      	mov	r2, r3
    {
        circleArcAngleStart = CWRUtil::toQ5<T>(startAngle);
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	63da      	str	r2, [r3, #60]	; 0x3c
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	61fb      	str	r3, [r7, #28]
 8012c28:	69fb      	ldr	r3, [r7, #28]
 8012c2a:	015a      	lsls	r2, r3, #5
 8012c2c:	f107 0310 	add.w	r3, r7, #16
 8012c30:	4611      	mov	r1, r2
 8012c32:	4618      	mov	r0, r3
 8012c34:	f7ff fac1 	bl	80121ba <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012c38:	693b      	ldr	r3, [r7, #16]
 8012c3a:	461a      	mov	r2, r3
        circleArcAngleEnd = CWRUtil::toQ5<T>(endAngle);
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8012c40:	bf00      	nop
 8012c42:	3720      	adds	r7, #32
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}

08012c48 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev>:
    View()
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	4618      	mov	r0, r3
 8012c54:	f00a fa4c 	bl	801d0f0 <_ZN8touchgfx6ScreenC1Ev>
 8012c58:	4a05      	ldr	r2, [pc, #20]	; (8012c70 <_ZN8touchgfx4ViewI13PongPresenterEC1Ev+0x28>)
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	601a      	str	r2, [r3, #0]
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	2200      	movs	r2, #0
 8012c62:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	4618      	mov	r0, r3
 8012c68:	3708      	adds	r7, #8
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd80      	pop	{r7, pc}
 8012c6e:	bf00      	nop
 8012c70:	0802a818 	.word	0x0802a818

08012c74 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b082      	sub	sp, #8
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
 8012c7c:	4a05      	ldr	r2, [pc, #20]	; (8012c94 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	601a      	str	r2, [r3, #0]
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	4618      	mov	r0, r3
 8012c86:	f7fd f8bb 	bl	800fe00 <_ZN8touchgfx6WidgetD1Ev>
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	3708      	adds	r7, #8
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}
 8012c94:	0802c5c8 	.word	0x0802c5c8

08012c98 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f7ff ffe7 	bl	8012c74 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8012ca6:	2130      	movs	r1, #48	; 0x30
 8012ca8:	6878      	ldr	r0, [r7, #4]
 8012caa:	f015 fbbf 	bl	802842c <_ZdlPvj>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	3708      	adds	r7, #8
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd80      	pop	{r7, pc}

08012cb8 <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	4a05      	ldr	r2, [pc, #20]	; (8012cd8 <_ZN8touchgfx6CircleD1Ev+0x20>)
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	601a      	str	r2, [r3, #0]
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f7ff ffd3 	bl	8012c74 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	3708      	adds	r7, #8
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}
 8012cd8:	0802c4bc 	.word	0x0802c4bc

08012cdc <_ZN8touchgfx6CircleD0Ev>:
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f7ff ffe7 	bl	8012cb8 <_ZN8touchgfx6CircleD1Ev>
 8012cea:	214c      	movs	r1, #76	; 0x4c
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f015 fb9d 	bl	802842c <_ZdlPvj>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3708      	adds	r7, #8
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}

08012cfc <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev>:
 */
template <class T>
class MoveAnimator : public T
{
public:
    MoveAnimator()
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b082      	sub	sp, #8
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
        : T(),
          moveAnimationRunning(false),
          moveAnimationCounter(0),
          moveAnimationDelay(0),
          moveAnimationEndedCallback(0)
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	4618      	mov	r0, r3
 8012d08:	f006 fc2e 	bl	8019568 <_ZN8touchgfx6CircleC1Ev>
 8012d0c:	4a0b      	ldr	r2, [pc, #44]	; (8012d3c <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev+0x40>)
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	601a      	str	r2, [r3, #0]
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2200      	movs	r2, #0
 8012d16:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	2200      	movs	r2, #0
 8012d26:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	665a      	str	r2, [r3, #100]	; 0x64
    {
    }
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	4618      	mov	r0, r3
 8012d34:	3708      	adds	r7, #8
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}
 8012d3a:	bf00      	nop
 8012d3c:	0802a790 	.word	0x0802a790

08012d40 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	4a05      	ldr	r2, [pc, #20]	; (8012d60 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	601a      	str	r2, [r3, #0]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7fd f855 	bl	800fe00 <_ZN8touchgfx6WidgetD1Ev>
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	4618      	mov	r0, r3
 8012d5a:	3708      	adds	r7, #8
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	0802ca6c 	.word	0x0802ca6c

08012d64 <_ZN8touchgfx3BoxD0Ev>:
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b082      	sub	sp, #8
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	6878      	ldr	r0, [r7, #4]
 8012d6e:	f7ff ffe7 	bl	8012d40 <_ZN8touchgfx3BoxD1Ev>
 8012d72:	2130      	movs	r1, #48	; 0x30
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f015 fb59 	bl	802842c <_ZdlPvj>
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	3708      	adds	r7, #8
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}

08012d84 <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev>:
template <class T>
class Draggable : public T
{
public:
    /** Initializes a new instance of the Draggable class. Make the object touchable. */
    Draggable()
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b082      	sub	sp, #8
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
        : T()
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f7ff f986 	bl	80120a0 <_ZN8touchgfx3BoxC1Ev>
 8012d94:	4a06      	ldr	r2, [pc, #24]	; (8012db0 <_ZN8touchgfx9DraggableINS_3BoxEEC1Ev+0x2c>)
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	601a      	str	r2, [r3, #0]
    {
        T::setTouchable(true);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	2101      	movs	r1, #1
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f7ff f8ca 	bl	8011f38 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	4618      	mov	r0, r3
 8012da8:	3708      	adds	r7, #8
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}
 8012dae:	bf00      	nop
 8012db0:	0802a728 	.word	0x0802a728

08012db4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8012db4:	b480      	push	{r7}
 8012db6:	b083      	sub	sp, #12
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	4a04      	ldr	r2, [pc, #16]	; (8012dd0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	601a      	str	r2, [r3, #0]
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	370c      	adds	r7, #12
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dce:	4770      	bx	lr
 8012dd0:	0802a868 	.word	0x0802a868

08012dd4 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b084      	sub	sp, #16
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	60f8      	str	r0, [r7, #12]
 8012ddc:	60b9      	str	r1, [r7, #8]
 8012dde:	4639      	mov	r1, r7
 8012de0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	4618      	mov	r0, r3
 8012de8:	f7ff ffe4 	bl	8012db4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8012dec:	4a08      	ldr	r2, [pc, #32]	; (8012e10 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	68ba      	ldr	r2, [r7, #8]
 8012df6:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	3308      	adds	r3, #8
 8012dfc:	463a      	mov	r2, r7
 8012dfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e02:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	4618      	mov	r0, r3
 8012e0a:	3710      	adds	r7, #16
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}
 8012e10:	0802a710 	.word	0x0802a710

08012e14 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>:
    void setRadius(const T r)
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b084      	sub	sp, #16
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
 8012e1c:	6039      	str	r1, [r7, #0]
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	60fb      	str	r3, [r7, #12]
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	015a      	lsls	r2, r3, #5
 8012e26:	f107 0308 	add.w	r3, r7, #8
 8012e2a:	4611      	mov	r1, r2
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7ff f9c4 	bl	80121ba <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	461a      	mov	r2, r3
        this->circleRadius = CWRUtil::toQ5<T>(r);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8012e3a:	bf00      	nop
 8012e3c:	3710      	adds	r7, #16
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}

08012e42 <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>:
     * @note The area containing the Circle is not invalidated.
     * @note if the new line with is smaller than the old width, the circle should be invalidated
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
 8012e42:	b580      	push	{r7, lr}
 8012e44:	b084      	sub	sp, #16
 8012e46:	af00      	add	r7, sp, #0
 8012e48:	6078      	str	r0, [r7, #4]
 8012e4a:	6039      	str	r1, [r7, #0]
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	60fb      	str	r3, [r7, #12]
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	015a      	lsls	r2, r3, #5
 8012e54:	f107 0308 	add.w	r3, r7, #8
 8012e58:	4611      	mov	r1, r2
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7ff f9ad 	bl	80121ba <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	461a      	mov	r2, r3
    {
        this->circleLineWidth = CWRUtil::toQ5<T>(width);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8012e68:	bf00      	nop
 8012e6a:	3710      	adds	r7, #16
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	bd80      	pop	{r7, pc}

08012e70 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8012e70:	b480      	push	{r7}
 8012e72:	b083      	sub	sp, #12
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
    }
 8012e78:	4a04      	ldr	r2, [pc, #16]	; (8012e8c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	601a      	str	r2, [r3, #0]
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	4618      	mov	r0, r3
 8012e82:	370c      	adds	r7, #12
 8012e84:	46bd      	mov	sp, r7
 8012e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8a:	4770      	bx	lr
 8012e8c:	0802a868 	.word	0x0802a868

08012e90 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b082      	sub	sp, #8
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
    }
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f7ff ffe9 	bl	8012e70 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8012e9e:	2104      	movs	r1, #4
 8012ea0:	6878      	ldr	r0, [r7, #4]
 8012ea2:	f015 fac3 	bl	802842c <_ZdlPvj>
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	3708      	adds	r7, #8
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}

08012eb0 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b082      	sub	sp, #8
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
 8012eb8:	4a05      	ldr	r2, [pc, #20]	; (8012ed0 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	601a      	str	r2, [r3, #0]
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f7ff ffd5 	bl	8012e70 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	4618      	mov	r0, r3
 8012eca:	3708      	adds	r7, #8
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	bd80      	pop	{r7, pc}
 8012ed0:	0802a710 	.word	0x0802a710

08012ed4 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b082      	sub	sp, #8
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
 8012edc:	6878      	ldr	r0, [r7, #4]
 8012ede:	f7ff ffe7 	bl	8012eb0 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8012ee2:	2110      	movs	r1, #16
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f015 faa1 	bl	802842c <_ZdlPvj>
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	4618      	mov	r0, r3
 8012eee:	3708      	adds	r7, #8
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}

08012ef4 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>:
class Draggable : public T
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b082      	sub	sp, #8
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
 8012efc:	4a05      	ldr	r2, [pc, #20]	; (8012f14 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev+0x20>)
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	601a      	str	r2, [r3, #0]
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	4618      	mov	r0, r3
 8012f06:	f7ff ff1b 	bl	8012d40 <_ZN8touchgfx3BoxD1Ev>
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	3708      	adds	r7, #8
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}
 8012f14:	0802a728 	.word	0x0802a728

08012f18 <_ZN8touchgfx9DraggableINS_3BoxEED0Ev>:
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b082      	sub	sp, #8
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
 8012f20:	6878      	ldr	r0, [r7, #4]
 8012f22:	f7ff ffe7 	bl	8012ef4 <_ZN8touchgfx9DraggableINS_3BoxEED1Ev>
 8012f26:	2130      	movs	r1, #48	; 0x30
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f015 fa7f 	bl	802842c <_ZdlPvj>
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	4618      	mov	r0, r3
 8012f32:	3708      	adds	r7, #8
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}

08012f38 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>:
class MoveAnimator : public T
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b082      	sub	sp, #8
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
 8012f40:	4a05      	ldr	r2, [pc, #20]	; (8012f58 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev+0x20>)
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	601a      	str	r2, [r3, #0]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f7ff feb5 	bl	8012cb8 <_ZN8touchgfx6CircleD1Ev>
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	4618      	mov	r0, r3
 8012f52:	3708      	adds	r7, #8
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}
 8012f58:	0802a790 	.word	0x0802a790

08012f5c <_ZN8touchgfx12MoveAnimatorINS_6CircleEED0Ev>:
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f7ff ffe7 	bl	8012f38 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>
 8012f6a:	2168      	movs	r1, #104	; 0x68
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f015 fa5d 	bl	802842c <_ZdlPvj>
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	4618      	mov	r0, r3
 8012f76:	3708      	adds	r7, #8
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}

08012f7c <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b082      	sub	sp, #8
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
 8012f84:	4a05      	ldr	r2, [pc, #20]	; (8012f9c <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	601a      	str	r2, [r3, #0]
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f7fc fc87 	bl	800f8a0 <_ZN8touchgfx8DrawableD1Ev>
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	4618      	mov	r0, r3
 8012f96:	3708      	adds	r7, #8
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}
 8012f9c:	0802bb34 	.word	0x0802bb34

08012fa0 <_ZN8touchgfx9ContainerD0Ev>:
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b082      	sub	sp, #8
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	6878      	ldr	r0, [r7, #4]
 8012faa:	f7ff ffe7 	bl	8012f7c <_ZN8touchgfx9ContainerD1Ev>
 8012fae:	212c      	movs	r1, #44	; 0x2c
 8012fb0:	6878      	ldr	r0, [r7, #4]
 8012fb2:	f015 fa3b 	bl	802842c <_ZdlPvj>
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	4618      	mov	r0, r3
 8012fba:	3708      	adds	r7, #8
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}

08012fc0 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
 8012fc8:	4a05      	ldr	r2, [pc, #20]	; (8012fe0 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	601a      	str	r2, [r3, #0]
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f7ff f9a9 	bl	8012328 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3708      	adds	r7, #8
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	0802c53c 	.word	0x0802c53c

08012fe4 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b082      	sub	sp, #8
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
 8012fec:	6878      	ldr	r0, [r7, #4]
 8012fee:	f7ff ffe7 	bl	8012fc0 <_ZN8touchgfx13PainterRGB888D1Ev>
 8012ff2:	2118      	movs	r1, #24
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f015 fa19 	bl	802842c <_ZdlPvj>
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	3708      	adds	r7, #8
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}

08013004 <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 8013004:	b580      	push	{r7, lr}
 8013006:	b082      	sub	sp, #8
 8013008:	af00      	add	r7, sp, #0
 801300a:	6078      	str	r0, [r7, #4]
 801300c:	4a05      	ldr	r2, [pc, #20]	; (8013024 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	601a      	str	r2, [r3, #0]
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	4618      	mov	r0, r3
 8013016:	f7ff f821 	bl	801205c <_ZN8touchgfx14AbstractButtonD1Ev>
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	4618      	mov	r0, r3
 801301e:	3708      	adds	r7, #8
 8013020:	46bd      	mov	sp, r7
 8013022:	bd80      	pop	{r7, pc}
 8013024:	0802cb38 	.word	0x0802cb38

08013028 <_ZN8touchgfx6ButtonD0Ev>:
 8013028:	b580      	push	{r7, lr}
 801302a:	b082      	sub	sp, #8
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	6878      	ldr	r0, [r7, #4]
 8013032:	f7ff ffe7 	bl	8013004 <_ZN8touchgfx6ButtonD1Ev>
 8013036:	2134      	movs	r1, #52	; 0x34
 8013038:	6878      	ldr	r0, [r7, #4]
 801303a:	f015 f9f7 	bl	802842c <_ZdlPvj>
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	4618      	mov	r0, r3
 8013042:	3708      	adds	r7, #8
 8013044:	46bd      	mov	sp, r7
 8013046:	bd80      	pop	{r7, pc}

08013048 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 8013048:	b580      	push	{r7, lr}
 801304a:	b082      	sub	sp, #8
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
 8013050:	4a08      	ldr	r2, [pc, #32]	; (8013074 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	601a      	str	r2, [r3, #0]
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	3334      	adds	r3, #52	; 0x34
 801305a:	4618      	mov	r0, r3
 801305c:	f7fc f926 	bl	800f2ac <_ZN8touchgfx9TypedTextD1Ev>
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	4618      	mov	r0, r3
 8013064:	f7ff ffce 	bl	8013004 <_ZN8touchgfx6ButtonD1Ev>
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	4618      	mov	r0, r3
 801306c:	3708      	adds	r7, #8
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	0802ccf4 	.word	0x0802ccf4

08013078 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8013078:	b580      	push	{r7, lr}
 801307a:	b082      	sub	sp, #8
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
 8013080:	6878      	ldr	r0, [r7, #4]
 8013082:	f7ff ffe1 	bl	8013048 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8013086:	2148      	movs	r1, #72	; 0x48
 8013088:	6878      	ldr	r0, [r7, #4]
 801308a:	f015 f9cf 	bl	802842c <_ZdlPvj>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	4618      	mov	r0, r3
 8013092:	3708      	adds	r7, #8
 8013094:	46bd      	mov	sp, r7
 8013096:	bd80      	pop	{r7, pc}

08013098 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8013098:	b580      	push	{r7, lr}
 801309a:	b082      	sub	sp, #8
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
 80130a0:	4a05      	ldr	r2, [pc, #20]	; (80130b8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	601a      	str	r2, [r3, #0]
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	4618      	mov	r0, r3
 80130aa:	f7ff fadd 	bl	8012668 <_ZN8touchgfx8TextAreaD1Ev>
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	4618      	mov	r0, r3
 80130b2:	3708      	adds	r7, #8
 80130b4:	46bd      	mov	sp, r7
 80130b6:	bd80      	pop	{r7, pc}
 80130b8:	0802cbdc 	.word	0x0802cbdc

080130bc <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80130bc:	b580      	push	{r7, lr}
 80130be:	b082      	sub	sp, #8
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
 80130c4:	6878      	ldr	r0, [r7, #4]
 80130c6:	f7ff ffe7 	bl	8013098 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80130ca:	2140      	movs	r1, #64	; 0x40
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f015 f9ad 	bl	802842c <_ZdlPvj>
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	4618      	mov	r0, r3
 80130d6:	3708      	adds	r7, #8
 80130d8:	46bd      	mov	sp, r7
 80130da:	bd80      	pop	{r7, pc}

080130dc <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80130dc:	b580      	push	{r7, lr}
 80130de:	b082      	sub	sp, #8
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
 80130e4:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	685b      	ldr	r3, [r3, #4]
 80130ea:	687a      	ldr	r2, [r7, #4]
 80130ec:	68d2      	ldr	r2, [r2, #12]
 80130ee:	1052      	asrs	r2, r2, #1
 80130f0:	1898      	adds	r0, r3, r2
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	68db      	ldr	r3, [r3, #12]
 80130f6:	f003 0301 	and.w	r3, r3, #1
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d102      	bne.n	8013104 <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	689b      	ldr	r3, [r3, #8]
 8013102:	e00a      	b.n	801311a <_ZN8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	687a      	ldr	r2, [r7, #4]
 801310a:	68d2      	ldr	r2, [r2, #12]
 801310c:	1052      	asrs	r2, r2, #1
 801310e:	4413      	add	r3, r2
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	687a      	ldr	r2, [r7, #4]
 8013114:	6892      	ldr	r2, [r2, #8]
 8013116:	4413      	add	r3, r2
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	6839      	ldr	r1, [r7, #0]
 801311c:	4798      	blx	r3
    }
 801311e:	bf00      	nop
 8013120:	3708      	adds	r7, #8
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}

08013126 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8013126:	b480      	push	{r7}
 8013128:	b083      	sub	sp, #12
 801312a:	af00      	add	r7, sp, #0
 801312c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	685b      	ldr	r3, [r3, #4]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d010      	beq.n	8013158 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	689b      	ldr	r3, [r3, #8]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d107      	bne.n	801314e <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	68db      	ldr	r3, [r3, #12]
 8013142:	f003 0301 	and.w	r3, r3, #1
 8013146:	2b00      	cmp	r3, #0
 8013148:	d101      	bne.n	801314e <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801314a:	2301      	movs	r3, #1
 801314c:	e000      	b.n	8013150 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801314e:	2300      	movs	r3, #0
 8013150:	2b01      	cmp	r3, #1
 8013152:	d001      	beq.n	8013158 <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8013154:	2301      	movs	r3, #1
 8013156:	e000      	b.n	801315a <_ZNK8touchgfx8CallbackI12PongViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8013158:	2300      	movs	r3, #0
    }
 801315a:	4618      	mov	r0, r3
 801315c:	370c      	adds	r7, #12
 801315e:	46bd      	mov	sp, r7
 8013160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013164:	4770      	bx	lr

08013166 <_ZN8touchgfx9DraggableINS_3BoxEE15handleDragEventERKNS_9DragEventE>:
     * Called when dragging the Draggable object. The object is moved according to the drag
     * event.
     *
     * @param  evt The drag event.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 8013166:	b5b0      	push	{r4, r5, r7, lr}
 8013168:	b082      	sub	sp, #8
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
 801316e:	6039      	str	r1, [r7, #0]
    {
        T::handleDragEvent(evt);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	6839      	ldr	r1, [r7, #0]
 8013174:	4618      	mov	r0, r3
 8013176:	f7fc fc74 	bl	800fa62 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>
        T::moveRelative(evt.getDeltaX(), evt.getDeltaY());
 801317a:	687c      	ldr	r4, [r7, #4]
 801317c:	6838      	ldr	r0, [r7, #0]
 801317e:	f7fe fea1 	bl	8011ec4 <_ZNK8touchgfx9DragEvent9getDeltaXEv>
 8013182:	4603      	mov	r3, r0
 8013184:	461d      	mov	r5, r3
 8013186:	6838      	ldr	r0, [r7, #0]
 8013188:	f7fe feb1 	bl	8011eee <_ZNK8touchgfx9DragEvent9getDeltaYEv>
 801318c:	4603      	mov	r3, r0
 801318e:	461a      	mov	r2, r3
 8013190:	4629      	mov	r1, r5
 8013192:	4620      	mov	r0, r4
 8013194:	f009 fc48 	bl	801ca28 <_ZN8touchgfx8Drawable12moveRelativeEss>
    }
 8013198:	bf00      	nop
 801319a:	3708      	adds	r7, #8
 801319c:	46bd      	mov	sp, r7
 801319e:	bdb0      	pop	{r4, r5, r7, pc}

080131a0 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE15handleTickEventEv>:
        }
    }

protected:
    /** The tick handler that handles the actual animation steps. */
    virtual void handleTickEvent()
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b082      	sub	sp, #8
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
    {
        T::handleTickEvent();
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7fc fc64 	bl	800fa78 <_ZN8touchgfx8Drawable15handleTickEventEv>

        nextMoveAnimationStep();
 80131b0:	6878      	ldr	r0, [r7, #4]
 80131b2:	f000 f821 	bl	80131f8 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv>
    }
 80131b6:	bf00      	nop
 80131b8:	3708      	adds	r7, #8
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd80      	pop	{r7, pc}

080131be <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 80131be:	b480      	push	{r7}
 80131c0:	b083      	sub	sp, #12
 80131c2:	af00      	add	r7, sp, #0
 80131c4:	6078      	str	r0, [r7, #4]
 80131c6:	460b      	mov	r3, r1
 80131c8:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	887a      	ldrh	r2, [r7, #2]
 80131ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    }
 80131d2:	bf00      	nop
 80131d4:	370c      	adds	r7, #12
 80131d6:	46bd      	mov	sp, r7
 80131d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131dc:	4770      	bx	lr

080131de <_ZNK8touchgfx12MoveAnimatorINS_6CircleEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 80131de:	b480      	push	{r7}
 80131e0:	b083      	sub	sp, #12
 80131e2:	af00      	add	r7, sp, #0
 80131e4:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    }
 80131ec:	4618      	mov	r0, r3
 80131ee:	370c      	adds	r7, #12
 80131f0:	46bd      	mov	sp, r7
 80131f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f6:	4770      	bx	lr

080131f8 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv>:

    /** Execute next step in move animation and stop the timer if the animation has finished. */
    void nextMoveAnimationStep()
 80131f8:	b590      	push	{r4, r7, lr}
 80131fa:	b085      	sub	sp, #20
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
    {
        if (moveAnimationRunning)
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8013206:	2b00      	cmp	r3, #0
 8013208:	f000 80ad 	beq.w	8013366 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
        {
            if (moveAnimationCounter < moveAnimationDelay)
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8013218:	429a      	cmp	r2, r3
 801321a:	d208      	bcs.n	801322e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x36>
            {
                // Just wait for the delay time to pass
                moveAnimationCounter++;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8013222:	3301      	adds	r3, #1
 8013224:	b29a      	uxth	r2, r3
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                        moveAnimationEndedCallback->execute(*this);
                    }
                }
            }
        }
    }
 801322c:	e09b      	b.n	8013366 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8013234:	461a      	mov	r2, r3
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801323c:	4619      	mov	r1, r3
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013244:	440b      	add	r3, r1
 8013246:	429a      	cmp	r2, r3
 8013248:	d850      	bhi.n	80132ec <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0xf4>
                    uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8013250:	461a      	mov	r2, r3
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8013258:	1ad3      	subs	r3, r2, r3
 801325a:	60fb      	str	r3, [r7, #12]
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	b298      	uxth	r0, r3
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 801326a:	b29a      	uxth	r2, r3
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8013272:	b29b      	uxth	r3, r3
 8013274:	1ad3      	subs	r3, r2, r3
 8013276:	b29b      	uxth	r3, r3
 8013278:	b21a      	sxth	r2, r3
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013280:	2100      	movs	r1, #0
 8013282:	47a0      	blx	r4
 8013284:	4603      	mov	r3, r0
 8013286:	817b      	strh	r3, [r7, #10]
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	b298      	uxth	r0, r3
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8013296:	b29a      	uxth	r2, r3
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 801329e:	b29b      	uxth	r3, r3
 80132a0:	1ad3      	subs	r3, r2, r3
 80132a2:	b29b      	uxth	r3, r3
 80132a4:	b21a      	sxth	r2, r3
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80132ac:	2100      	movs	r1, #0
 80132ae:	47a0      	blx	r4
 80132b0:	4603      	mov	r3, r0
 80132b2:	813b      	strh	r3, [r7, #8]
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80132bc:	b29a      	uxth	r2, r3
 80132be:	897b      	ldrh	r3, [r7, #10]
 80132c0:	4413      	add	r3, r2
 80132c2:	b29b      	uxth	r3, r3
 80132c4:	b219      	sxth	r1, r3
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80132cc:	b29a      	uxth	r2, r3
 80132ce:	893b      	ldrh	r3, [r7, #8]
 80132d0:	4413      	add	r3, r2
 80132d2:	b29b      	uxth	r3, r3
 80132d4:	b21b      	sxth	r3, r3
 80132d6:	461a      	mov	r2, r3
 80132d8:	f7fc fbf2 	bl	800fac0 <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80132e2:	3301      	adds	r3, #1
 80132e4:	b29a      	uxth	r2, r3
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80132f2:	461a      	mov	r2, r3
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80132fa:	4619      	mov	r1, r3
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013302:	440b      	add	r3, r1
 8013304:	429a      	cmp	r2, r3
 8013306:	d92e      	bls.n	8013366 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                    moveAnimationRunning = false;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2200      	movs	r2, #0
 801330c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                    moveAnimationCounter = 0;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2200      	movs	r2, #0
 8013314:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                    Application::getInstance()->unregisterTimerWidget(this);
 8013318:	f008 ff34 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 801331c:	4602      	mov	r2, r0
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	4619      	mov	r1, r3
 8013322:	4610      	mov	r0, r2
 8013324:	f008 ff34 	bl	801c190 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801332c:	2b00      	cmp	r3, #0
 801332e:	d00d      	beq.n	801334c <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x154>
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	330c      	adds	r3, #12
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	4610      	mov	r0, r2
 8013340:	4798      	blx	r3
 8013342:	4603      	mov	r3, r0
 8013344:	2b00      	cmp	r3, #0
 8013346:	d001      	beq.n	801334c <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x154>
 8013348:	2301      	movs	r3, #1
 801334a:	e000      	b.n	801334e <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x156>
 801334c:	2300      	movs	r3, #0
 801334e:	2b00      	cmp	r3, #0
 8013350:	d009      	beq.n	8013366 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                        moveAnimationEndedCallback->execute(*this);
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	3308      	adds	r3, #8
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	6879      	ldr	r1, [r7, #4]
 8013362:	4610      	mov	r0, r2
 8013364:	4798      	blx	r3
    }
 8013366:	bf00      	nop
 8013368:	3714      	adds	r7, #20
 801336a:	46bd      	mov	sp, r7
 801336c:	bd90      	pop	{r4, r7, pc}

0801336e <_ZN8touchgfx7CWRUtil2Q5C1Ev>:
        Q5()
 801336e:	b480      	push	{r7}
 8013370:	b083      	sub	sp, #12
 8013372:	af00      	add	r7, sp, #0
 8013374:	6078      	str	r0, [r7, #4]
            : v(0)
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	2200      	movs	r2, #0
 801337a:	601a      	str	r2, [r3, #0]
        }
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	4618      	mov	r0, r3
 8013380:	370c      	adds	r7, #12
 8013382:	46bd      	mov	sp, r7
 8013384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013388:	4770      	bx	lr

0801338a <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        operator int() const
 801338a:	b480      	push	{r7}
 801338c:	b083      	sub	sp, #12
 801338e:	af00      	add	r7, sp, #0
 8013390:	6078      	str	r0, [r7, #4]
            return v;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	681b      	ldr	r3, [r3, #0]
        }
 8013396:	4618      	mov	r0, r3
 8013398:	370c      	adds	r7, #12
 801339a:	46bd      	mov	sp, r7
 801339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a0:	4770      	bx	lr

080133a2 <_ZN8touchgfx7CWRUtil3Q10C1Ei>:
        explicit Q10(int i)
 80133a2:	b480      	push	{r7}
 80133a4:	b083      	sub	sp, #12
 80133a6:	af00      	add	r7, sp, #0
 80133a8:	6078      	str	r0, [r7, #4]
 80133aa:	6039      	str	r1, [r7, #0]
            : v(i)
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	683a      	ldr	r2, [r7, #0]
 80133b0:	601a      	str	r2, [r3, #0]
        }
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	4618      	mov	r0, r3
 80133b6:	370c      	adds	r7, #12
 80133b8:	46bd      	mov	sp, r7
 80133ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133be:	4770      	bx	lr

080133c0 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b082      	sub	sp, #8
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	4a05      	ldr	r2, [pc, #20]	; (80133e0 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	601a      	str	r2, [r3, #0]
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7fe fdc1 	bl	8011f58 <_ZN8touchgfx6ScreenD1Ev>
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	4618      	mov	r0, r3
 80133da:	3708      	adds	r7, #8
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}
 80133e0:	0802aa30 	.word	0x0802aa30

080133e4 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b082      	sub	sp, #8
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f7ff ffe7 	bl	80133c0 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 80133f2:	2140      	movs	r1, #64	; 0x40
 80133f4:	6878      	ldr	r0, [r7, #4]
 80133f6:	f015 f819 	bl	802842c <_ZdlPvj>
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	4618      	mov	r0, r3
 80133fe:	3708      	adds	r7, #8
 8013400:	46bd      	mov	sp, r7
 8013402:	bd80      	pop	{r7, pc}

08013404 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8013404:	b580      	push	{r7, lr}
 8013406:	b082      	sub	sp, #8
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
 801340c:	4a22      	ldr	r2, [pc, #136]	; (8013498 <_ZN15Screen2ViewBaseD1Ev+0x94>)
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	601a      	str	r2, [r3, #0]
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8013418:	4618      	mov	r0, r3
 801341a:	f000 fc87 	bl	8013d2c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8013424:	4618      	mov	r0, r3
 8013426:	f7ff fdcb 	bl	8012fc0 <_ZN8touchgfx13PainterRGB888D1Ev>
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013430:	4618      	mov	r0, r3
 8013432:	f000 fc9d 	bl	8013d70 <_ZN8touchgfx5ShapeILt3EED1Ev>
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 801343c:	4618      	mov	r0, r3
 801343e:	f7ff fdbf 	bl	8012fc0 <_ZN8touchgfx13PainterRGB888D1Ev>
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8013448:	4618      	mov	r0, r3
 801344a:	f7ff fc35 	bl	8012cb8 <_ZN8touchgfx6CircleD1Ev>
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013454:	4618      	mov	r0, r3
 8013456:	f7ff f907 	bl	8012668 <_ZN8touchgfx8TextAreaD1Ev>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8013460:	4618      	mov	r0, r3
 8013462:	f7ff fdad 	bl	8012fc0 <_ZN8touchgfx13PainterRGB888D1Ev>
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	33b8      	adds	r3, #184	; 0xb8
 801346a:	4618      	mov	r0, r3
 801346c:	f000 fd12 	bl	8013e94 <_ZN8touchgfx12LineProgressD1Ev>
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	3370      	adds	r3, #112	; 0x70
 8013474:	4618      	mov	r0, r3
 8013476:	f7ff fde7 	bl	8013048 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	3340      	adds	r3, #64	; 0x40
 801347e:	4618      	mov	r0, r3
 8013480:	f7ff fc5e 	bl	8012d40 <_ZN8touchgfx3BoxD1Ev>
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	4618      	mov	r0, r3
 8013488:	f7ff ff9a 	bl	80133c0 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	4618      	mov	r0, r3
 8013490:	3708      	adds	r7, #8
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}
 8013496:	bf00      	nop
 8013498:	0802a948 	.word	0x0802a948

0801349c <_ZN15Screen2ViewBaseD0Ev>:
 801349c:	b580      	push	{r7, lr}
 801349e:	b082      	sub	sp, #8
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f7ff ffad 	bl	8013404 <_ZN15Screen2ViewBaseD1Ev>
 80134aa:	f641 7148 	movw	r1, #8008	; 0x1f48
 80134ae:	6878      	ldr	r0, [r7, #4]
 80134b0:	f014 ffbc 	bl	802842c <_ZdlPvj>
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	4618      	mov	r0, r3
 80134b8:	3708      	adds	r7, #8
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}

080134be <_ZN15Screen2ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80134be:	b580      	push	{r7, lr}
 80134c0:	b082      	sub	sp, #8
 80134c2:	af00      	add	r7, sp, #0
 80134c4:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80134c6:	f008 fe5d 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 80134ca:	4603      	mov	r3, r0
    }
 80134cc:	4618      	mov	r0, r3
 80134ce:	3708      	adds	r7, #8
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}

080134d4 <_ZN8touchgfx13AbstractShapeD1Ev>:
 * around 0,0. The shapes points (corners) are calculated with regards to scaling and
 * rotation to allow for faster redrawing. Care must be taken to call
 * updateAbstractShapeCache() after updating the shape, the scale of the shape or the
 * rotation of the shape.
 */
class AbstractShape : public CanvasWidget
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b082      	sub	sp, #8
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
 80134dc:	4a05      	ldr	r2, [pc, #20]	; (80134f4 <_ZN8touchgfx13AbstractShapeD1Ev+0x20>)
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	601a      	str	r2, [r3, #0]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7ff fbc5 	bl	8012c74 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	4618      	mov	r0, r3
 80134ee:	3708      	adds	r7, #8
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}
 80134f4:	0802c3f8 	.word	0x0802c3f8

080134f8 <_ZN8touchgfx13AbstractShapeD0Ev>:
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b082      	sub	sp, #8
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
 8013500:	6878      	ldr	r0, [r7, #4]
 8013502:	f7ff ffe7 	bl	80134d4 <_ZN8touchgfx13AbstractShapeD1Ev>
 8013506:	214c      	movs	r1, #76	; 0x4c
 8013508:	6878      	ldr	r0, [r7, #4]
 801350a:	f014 ff8f 	bl	802842c <_ZdlPvj>
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	4618      	mov	r0, r3
 8013512:	3708      	adds	r7, #8
 8013514:	46bd      	mov	sp, r7
 8013516:	bd80      	pop	{r7, pc}

08013518 <_ZN8touchgfx5ShapeILt3EEC1Ev>:
 * scaled, rotated and moved freely. Example uses could be the hands of a clock.
 *
 * @see AbstractShape
 */
template <uint16_t POINTS>
class Shape : public AbstractShape
 8013518:	b5b0      	push	{r4, r5, r7, lr}
 801351a:	b082      	sub	sp, #8
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	4618      	mov	r0, r3
 8013524:	f005 fe9a 	bl	801925c <_ZN8touchgfx13AbstractShapeC1Ev>
 8013528:	4a1b      	ldr	r2, [pc, #108]	; (8013598 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x80>)
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	601a      	str	r2, [r3, #0]
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	334c      	adds	r3, #76	; 0x4c
 8013532:	2402      	movs	r4, #2
 8013534:	461d      	mov	r5, r3
 8013536:	2c00      	cmp	r4, #0
 8013538:	db05      	blt.n	8013546 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x2e>
 801353a:	4628      	mov	r0, r5
 801353c:	f7ff ff17 	bl	801336e <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8013540:	3504      	adds	r5, #4
 8013542:	3c01      	subs	r4, #1
 8013544:	e7f7      	b.n	8013536 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x1e>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	3358      	adds	r3, #88	; 0x58
 801354a:	2402      	movs	r4, #2
 801354c:	461d      	mov	r5, r3
 801354e:	2c00      	cmp	r4, #0
 8013550:	db05      	blt.n	801355e <_ZN8touchgfx5ShapeILt3EEC1Ev+0x46>
 8013552:	4628      	mov	r0, r5
 8013554:	f7ff ff0b 	bl	801336e <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8013558:	3504      	adds	r5, #4
 801355a:	3c01      	subs	r4, #1
 801355c:	e7f7      	b.n	801354e <_ZN8touchgfx5ShapeILt3EEC1Ev+0x36>
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	3364      	adds	r3, #100	; 0x64
 8013562:	2402      	movs	r4, #2
 8013564:	461d      	mov	r5, r3
 8013566:	2c00      	cmp	r4, #0
 8013568:	db05      	blt.n	8013576 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x5e>
 801356a:	4628      	mov	r0, r5
 801356c:	f7ff feff 	bl	801336e <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8013570:	3504      	adds	r5, #4
 8013572:	3c01      	subs	r4, #1
 8013574:	e7f7      	b.n	8013566 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x4e>
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	3370      	adds	r3, #112	; 0x70
 801357a:	2402      	movs	r4, #2
 801357c:	461d      	mov	r5, r3
 801357e:	2c00      	cmp	r4, #0
 8013580:	db05      	blt.n	801358e <_ZN8touchgfx5ShapeILt3EEC1Ev+0x76>
 8013582:	4628      	mov	r0, r5
 8013584:	f7ff fef3 	bl	801336e <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8013588:	3504      	adds	r5, #4
 801358a:	3c01      	subs	r4, #1
 801358c:	e7f7      	b.n	801357e <_ZN8touchgfx5ShapeILt3EEC1Ev+0x66>
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	4618      	mov	r0, r3
 8013592:	3708      	adds	r7, #8
 8013594:	46bd      	mov	sp, r7
 8013596:	bdb0      	pop	{r4, r5, r7, pc}
 8013598:	0802a994 	.word	0x0802a994

0801359c <_ZN15Screen2ViewBaseC1Ev>:
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Screen2ViewBase::Screen2ViewBase() :
 801359c:	b5b0      	push	{r4, r5, r7, lr}
 801359e:	b09a      	sub	sp, #104	; 0x68
 80135a0:	af02      	add	r7, sp, #8
 80135a2:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	4618      	mov	r0, r3
 80135a8:	f000 fa5a 	bl	8013a60 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 80135ac:	4ada      	ldr	r2, [pc, #872]	; (8013918 <_ZN15Screen2ViewBaseC1Ev+0x37c>)
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	601a      	str	r2, [r3, #0]
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	3340      	adds	r3, #64	; 0x40
 80135b6:	4618      	mov	r0, r3
 80135b8:	f7fe fd72 	bl	80120a0 <_ZN8touchgfx3BoxC1Ev>
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	3370      	adds	r3, #112	; 0x70
 80135c0:	4618      	mov	r0, r3
 80135c2:	f007 fd71 	bl	801b0a8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	33b8      	adds	r3, #184	; 0xb8
 80135ca:	4618      	mov	r0, r3
 80135cc:	f004 fc28 	bl	8017e20 <_ZN8touchgfx12LineProgressC1Ev>
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 80135d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80135da:	2100      	movs	r1, #0
 80135dc:	4618      	mov	r0, r3
 80135de:	f7fe fc62 	bl	8011ea6 <_ZN8touchgfx9colortypeC1Em>
 80135e2:	22ff      	movs	r2, #255	; 0xff
 80135e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80135e6:	4620      	mov	r0, r4
 80135e8:	f7fe fec0 	bl	801236c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80135f2:	4618      	mov	r0, r3
 80135f4:	f7fe fffe 	bl	80125f4 <_ZN8touchgfx8TextAreaC1Ev>
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80135fe:	4618      	mov	r0, r3
 8013600:	f005 ffb2 	bl	8019568 <_ZN8touchgfx6CircleC1Ev>
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f503 741b 	add.w	r4, r3, #620	; 0x26c
 801360a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801360e:	2100      	movs	r1, #0
 8013610:	4618      	mov	r0, r3
 8013612:	f7fe fc48 	bl	8011ea6 <_ZN8touchgfx9colortypeC1Em>
 8013616:	22ff      	movs	r2, #255	; 0xff
 8013618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801361a:	4620      	mov	r0, r4
 801361c:	f7fe fea6 	bl	801236c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013626:	4618      	mov	r0, r3
 8013628:	f7ff ff76 	bl	8013518 <_ZN8touchgfx5ShapeILt3EEC1Ev>
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f503 7440 	add.w	r4, r3, #768	; 0x300
 8013632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013636:	2100      	movs	r1, #0
 8013638:	4618      	mov	r0, r3
 801363a:	f7fe fc34 	bl	8011ea6 <_ZN8touchgfx9colortypeC1Em>
 801363e:	22ff      	movs	r2, #255	; 0xff
 8013640:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013642:	4620      	mov	r0, r4
 8013644:	f7fe fe92 	bl	801236c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	f503 7046 	add.w	r0, r3, #792	; 0x318
 801364e:	4bb3      	ldr	r3, [pc, #716]	; (801391c <_ZN15Screen2ViewBaseC1Ev+0x380>)
 8013650:	633b      	str	r3, [r7, #48]	; 0x30
 8013652:	2300      	movs	r3, #0
 8013654:	637b      	str	r3, [r7, #52]	; 0x34
 8013656:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801365a:	cb0c      	ldmia	r3, {r2, r3}
 801365c:	6879      	ldr	r1, [r7, #4]
 801365e:	f000 fa15 	bl	8013a8c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8013668:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 801366c:	4618      	mov	r0, r3
 801366e:	f007 fd47 	bl	801b100 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    box1.setPosition(0, 0, 480, 272);
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013678:	f44f 7388 	mov.w	r3, #272	; 0x110
 801367c:	9300      	str	r3, [sp, #0]
 801367e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013682:	2200      	movs	r2, #0
 8013684:	2100      	movs	r1, #0
 8013686:	f7fc f92b 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8013690:	22ff      	movs	r2, #255	; 0xff
 8013692:	21ff      	movs	r1, #255	; 0xff
 8013694:	20ff      	movs	r0, #255	; 0xff
 8013696:	f7fe fdbd 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801369a:	4603      	mov	r3, r0
 801369c:	4619      	mov	r1, r3
 801369e:	4620      	mov	r0, r4
 80136a0:	f7fe fd26 	bl	80120f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(0, 212);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	3370      	adds	r3, #112	; 0x70
 80136a8:	22d4      	movs	r2, #212	; 0xd4
 80136aa:	2100      	movs	r1, #0
 80136ac:	4618      	mov	r0, r3
 80136ae:	f7fc f97c 	bl	800f9aa <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80136b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80136bc:	2102      	movs	r1, #2
 80136be:	4618      	mov	r0, r3
 80136c0:	f7fe fc2a 	bl	8011f18 <_ZN8touchgfx6BitmapC1Et>
 80136c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80136c8:	2103      	movs	r1, #3
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7fe fc24 	bl	8011f18 <_ZN8touchgfx6BitmapC1Et>
 80136d0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80136d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80136d8:	4619      	mov	r1, r3
 80136da:	4620      	mov	r0, r4
 80136dc:	f007 f9fc 	bl	801aad8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID17));
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80136e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80136ea:	2108      	movs	r1, #8
 80136ec:	4618      	mov	r0, r3
 80136ee:	f7fe fe93 	bl	8012418 <_ZN8touchgfx9TypedTextC1Et>
 80136f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80136f6:	4619      	mov	r1, r3
 80136f8:	4620      	mov	r0, r4
 80136fa:	f7fe feb3 	bl	8012464 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80136fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013702:	4618      	mov	r0, r3
 8013704:	f7fb fdd2 	bl	800f2ac <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801370e:	22ff      	movs	r2, #255	; 0xff
 8013710:	21ff      	movs	r1, #255	; 0xff
 8013712:	20ff      	movs	r0, #255	; 0xff
 8013714:	f7fe fd7e 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013718:	4603      	mov	r3, r0
 801371a:	4619      	mov	r1, r3
 801371c:	4620      	mov	r0, r4
 801371e:	f7fe feb3 	bl	8012488 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8013728:	22ff      	movs	r2, #255	; 0xff
 801372a:	21ff      	movs	r1, #255	; 0xff
 801372c:	20ff      	movs	r0, #255	; 0xff
 801372e:	f7fe fd71 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013732:	4603      	mov	r3, r0
 8013734:	4619      	mov	r1, r3
 8013736:	4620      	mov	r0, r4
 8013738:	f7fe feb4 	bl	80124a4 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8013748:	4619      	mov	r1, r3
 801374a:	4610      	mov	r0, r2
 801374c:	f7fe fc77 	bl	801203e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    lineProgress1.setXY(38, 178);
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	33b8      	adds	r3, #184	; 0xb8
 8013754:	22b2      	movs	r2, #178	; 0xb2
 8013756:	2126      	movs	r1, #38	; 0x26
 8013758:	4618      	mov	r0, r3
 801375a:	f7fc f926 	bl	800f9aa <_ZN8touchgfx8Drawable5setXYEss>
    lineProgress1.setProgressIndicatorPosition(0, 0, 404, 34);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 8013764:	2322      	movs	r3, #34	; 0x22
 8013766:	9300      	str	r3, [sp, #0]
 8013768:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801376c:	2200      	movs	r2, #0
 801376e:	2100      	movs	r1, #0
 8013770:	f004 faf5 	bl	8017d5e <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>
    lineProgress1.setRange(0, 100);
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 801377a:	2300      	movs	r3, #0
 801377c:	9300      	str	r3, [sp, #0]
 801377e:	2300      	movs	r3, #0
 8013780:	2264      	movs	r2, #100	; 0x64
 8013782:	2100      	movs	r1, #0
 8013784:	f004 fbd8 	bl	8017f38 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    lineProgress1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_PROGRESS_INDICATOR_BG_ROUND_0_DEGREES_ID));
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 801378e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013792:	2104      	movs	r1, #4
 8013794:	4618      	mov	r0, r3
 8013796:	f7fe fbbf 	bl	8011f18 <_ZN8touchgfx6BitmapC1Et>
 801379a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801379e:	4619      	mov	r1, r3
 80137a0:	4620      	mov	r0, r4
 80137a2:	f004 fbbf 	bl	8017f24 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    lineProgress1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 151, 255));
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 80137ac:	22ff      	movs	r2, #255	; 0xff
 80137ae:	2197      	movs	r1, #151	; 0x97
 80137b0:	2000      	movs	r0, #0
 80137b2:	f7fe fd2f 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80137b6:	4603      	mov	r3, r0
 80137b8:	4619      	mov	r1, r3
 80137ba:	4620      	mov	r0, r4
 80137bc:	f7fe fdf6 	bl	80123ac <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    lineProgress1.setPainter(lineProgress1Painter);
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80137cc:	4619      	mov	r1, r3
 80137ce:	4610      	mov	r0, r2
 80137d0:	f004 fadd 	bl	8017d8e <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>
    lineProgress1.setStart(17, 17);
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	33b8      	adds	r3, #184	; 0xb8
 80137d8:	2211      	movs	r2, #17
 80137da:	2111      	movs	r1, #17
 80137dc:	4618      	mov	r0, r3
 80137de:	f004 fad9 	bl	8017d94 <_ZN8touchgfx12LineProgress8setStartEii>
    lineProgress1.setEnd(387, 17);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	33b8      	adds	r3, #184	; 0xb8
 80137e6:	2211      	movs	r2, #17
 80137e8:	f240 1183 	movw	r1, #387	; 0x183
 80137ec:	4618      	mov	r0, r3
 80137ee:	f004 fa96 	bl	8017d1e <_ZN8touchgfx12LineProgress6setEndEii>
    lineProgress1.setLineWidth(30);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	33b8      	adds	r3, #184	; 0xb8
 80137f6:	211e      	movs	r1, #30
 80137f8:	4618      	mov	r0, r3
 80137fa:	f004 fad2 	bl	8017da2 <_ZN8touchgfx12LineProgress12setLineWidthEi>
    lineProgress1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	33b8      	adds	r3, #184	; 0xb8
 8013802:	2101      	movs	r1, #1
 8013804:	4618      	mov	r0, r3
 8013806:	f004 fad7 	bl	8017db8 <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>
    lineProgress1.setValue(60);
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	33b8      	adds	r3, #184	; 0xb8
 801380e:	213c      	movs	r1, #60	; 0x3c
 8013810:	4618      	mov	r0, r3
 8013812:	f004 fad7 	bl	8017dc4 <_ZN8touchgfx12LineProgress8setValueEi>

    textArea1.setXY(116, 0);
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801381c:	2200      	movs	r2, #0
 801381e:	2174      	movs	r1, #116	; 0x74
 8013820:	4618      	mov	r0, r3
 8013822:	f7fc f8c2 	bl	800f9aa <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 801382c:	2200      	movs	r2, #0
 801382e:	2100      	movs	r1, #0
 8013830:	2000      	movs	r0, #0
 8013832:	f7fe fcef 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013836:	4603      	mov	r3, r0
 8013838:	657c      	str	r4, [r7, #84]	; 0x54
 801383a:	60bb      	str	r3, [r7, #8]
        this->color = color;
 801383c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801383e:	68ba      	ldr	r2, [r7, #8]
 8013840:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013848:	65fb      	str	r3, [r7, #92]	; 0x5c
 801384a:	2300      	movs	r3, #0
 801384c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        linespace = space;
 8013850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013852:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8013856:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 801385e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013862:	2109      	movs	r1, #9
 8013864:	4618      	mov	r0, r3
 8013866:	f7fe fdd7 	bl	8012418 <_ZN8touchgfx9TypedTextC1Et>
 801386a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801386e:	4619      	mov	r1, r3
 8013870:	4620      	mov	r0, r4
 8013872:	f007 f8f7 	bl	801aa64 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8013876:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801387a:	4618      	mov	r0, r3
 801387c:	f7fb fd16 	bl	800f2ac <_ZN8touchgfx9TypedTextD1Ev>

    circle1.setPosition(200, 72, 80, 80);
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	f503 7008 	add.w	r0, r3, #544	; 0x220
 8013886:	2350      	movs	r3, #80	; 0x50
 8013888:	9300      	str	r3, [sp, #0]
 801388a:	2350      	movs	r3, #80	; 0x50
 801388c:	2248      	movs	r2, #72	; 0x48
 801388e:	21c8      	movs	r1, #200	; 0xc8
 8013890:	f7fc f826 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
    circle1.setCenter(40, 40);
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	f503 7308 	add.w	r3, r3, #544	; 0x220
 801389a:	2228      	movs	r2, #40	; 0x28
 801389c:	2128      	movs	r1, #40	; 0x28
 801389e:	4618      	mov	r0, r3
 80138a0:	f7ff f986 	bl	8012bb0 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    circle1.setRadius(40);
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80138aa:	2128      	movs	r1, #40	; 0x28
 80138ac:	4618      	mov	r0, r3
 80138ae:	f7ff fab1 	bl	8012e14 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    circle1.setLineWidth(0);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80138b8:	2100      	movs	r1, #0
 80138ba:	4618      	mov	r0, r3
 80138bc:	f7ff fac1 	bl	8012e42 <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    circle1.setArc(0, 360);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80138c6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80138ca:	2100      	movs	r1, #0
 80138cc:	4618      	mov	r0, r3
 80138ce:	f7ff f995 	bl	8012bfc <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    circle1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(52, 181, 214));
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	f503 741b 	add.w	r4, r3, #620	; 0x26c
 80138d8:	22d6      	movs	r2, #214	; 0xd6
 80138da:	21b5      	movs	r1, #181	; 0xb5
 80138dc:	2034      	movs	r0, #52	; 0x34
 80138de:	f7fe fc99 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80138e2:	4603      	mov	r3, r0
 80138e4:	4619      	mov	r1, r3
 80138e6:	4620      	mov	r0, r4
 80138e8:	f7fe fd60 	bl	80123ac <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    circle1.setPainter(circle1Painter);
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	f503 7208 	add.w	r2, r3, #544	; 0x220
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 80138f8:	4619      	mov	r1, r3
 80138fa:	4610      	mov	r0, r2
 80138fc:	f006 fa5a 	bl	8019db4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

    shape1.setPosition(199, 77, 80, 80);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8013906:	2350      	movs	r3, #80	; 0x50
 8013908:	9300      	str	r3, [sp, #0]
 801390a:	2350      	movs	r3, #80	; 0x50
 801390c:	224d      	movs	r2, #77	; 0x4d
 801390e:	21c7      	movs	r1, #199	; 0xc7
 8013910:	f7fb ffe6 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
    shape1.setOrigin(0.000f, 0.000f);
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	e009      	b.n	801392c <_ZN15Screen2ViewBaseC1Ev+0x390>
 8013918:	0802a948 	.word	0x0802a948
 801391c:	08013a35 	.word	0x08013a35
 8013920:	3f666666 	.word	0x3f666666
 8013924:	3f4ccccd 	.word	0x3f4ccccd
 8013928:	00000000 	.word	0x00000000
 801392c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013930:	ed5f 0a03 	vldr	s1, [pc, #-12]	; 8013928 <_ZN15Screen2ViewBaseC1Ev+0x38c>
 8013934:	ed1f 0a04 	vldr	s0, [pc, #-16]	; 8013928 <_ZN15Screen2ViewBaseC1Ev+0x38c>
 8013938:	4618      	mov	r0, r3
 801393a:	f000 f8c7 	bl	8013acc <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>
    shape1.setScale(0.800f, 0.900f);
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013944:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 8013920 <_ZN15Screen2ViewBaseC1Ev+0x384>
 8013948:	ed1f 0a0a 	vldr	s0, [pc, #-40]	; 8013924 <_ZN15Screen2ViewBaseC1Ev+0x388>
 801394c:	4618      	mov	r0, r3
 801394e:	f000 f91d 	bl	8013b8c <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>
    shape1.setAngle(0.000f);
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013958:	ed1f 0a0d 	vldr	s0, [pc, #-52]	; 8013928 <_ZN15Screen2ViewBaseC1Ev+0x38c>
 801395c:	4618      	mov	r0, r3
 801395e:	f000 f959 	bl	8013c14 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>
    shape1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(240, 219, 219));
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	f503 7440 	add.w	r4, r3, #768	; 0x300
 8013968:	22db      	movs	r2, #219	; 0xdb
 801396a:	21db      	movs	r1, #219	; 0xdb
 801396c:	20f0      	movs	r0, #240	; 0xf0
 801396e:	f7fe fc51 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013972:	4603      	mov	r3, r0
 8013974:	4619      	mov	r1, r3
 8013976:	4620      	mov	r0, r4
 8013978:	f7fe fd18 	bl	80123ac <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    shape1.setPainter(shape1Painter);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8013988:	4619      	mov	r1, r3
 801398a:	4610      	mov	r0, r2
 801398c:	f006 fa12 	bl	8019db4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    const touchgfx::AbstractShape::ShapePoint<float> shape1Points[3] = { { 40.000f, 0.000f }, { 80.000f, 40.000f }, { 40.000f, 80.000f } };
 8013990:	4b22      	ldr	r3, [pc, #136]	; (8013a1c <_ZN15Screen2ViewBaseC1Ev+0x480>)
 8013992:	f107 040c 	add.w	r4, r7, #12
 8013996:	461d      	mov	r5, r3
 8013998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801399a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801399c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80139a0:	e884 0003 	stmia.w	r4, {r0, r1}
    shape1.setShape(shape1Points);
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80139aa:	f107 020c 	add.w	r2, r7, #12
 80139ae:	4611      	mov	r1, r2
 80139b0:	4618      	mov	r0, r3
 80139b2:	f000 f967 	bl	8013c84 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>

    add(box1);
 80139b6:	687a      	ldr	r2, [r7, #4]
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	3340      	adds	r3, #64	; 0x40
 80139bc:	4619      	mov	r1, r3
 80139be:	4610      	mov	r0, r2
 80139c0:	f7fe fb22 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 80139c4:	687a      	ldr	r2, [r7, #4]
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	3370      	adds	r3, #112	; 0x70
 80139ca:	4619      	mov	r1, r3
 80139cc:	4610      	mov	r0, r2
 80139ce:	f7fe fb1b 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lineProgress1);
 80139d2:	687a      	ldr	r2, [r7, #4]
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	33b8      	adds	r3, #184	; 0xb8
 80139d8:	4619      	mov	r1, r3
 80139da:	4610      	mov	r0, r2
 80139dc:	f7fe fb14 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 80139e0:	687a      	ldr	r2, [r7, #4]
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80139e8:	4619      	mov	r1, r3
 80139ea:	4610      	mov	r0, r2
 80139ec:	f7fe fb0c 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(circle1);
 80139f0:	687a      	ldr	r2, [r7, #4]
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80139f8:	4619      	mov	r1, r3
 80139fa:	4610      	mov	r0, r2
 80139fc:	f7fe fb04 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(shape1);
 8013a00:	687a      	ldr	r2, [r7, #4]
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013a08:	4619      	mov	r1, r3
 8013a0a:	4610      	mov	r0, r2
 8013a0c:	f7fe fafc 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	4618      	mov	r0, r3
 8013a14:	3760      	adds	r7, #96	; 0x60
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bdb0      	pop	{r4, r5, r7, pc}
 8013a1a:	bf00      	nop
 8013a1c:	08029b68 	.word	0x08029b68

08013a20 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 8013a20:	b480      	push	{r7}
 8013a22:	b083      	sub	sp, #12
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]

}
 8013a28:	bf00      	nop
 8013a2a:	370c      	adds	r7, #12
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a32:	4770      	bx	lr

08013a34 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
 8013a3c:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	3370      	adds	r3, #112	; 0x70
 8013a42:	683a      	ldr	r2, [r7, #0]
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d106      	bne.n	8013a56 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to screen
        //Go to screen with no screen transition
        application().gotoscreenScreenNoTransition();
 8013a48:	6878      	ldr	r0, [r7, #4]
 8013a4a:	f7ff fd38 	bl	80134be <_ZN15Screen2ViewBase11applicationEv>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	4618      	mov	r0, r3
 8013a52:	f7fc fa53 	bl	800fefc <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
}
 8013a56:	bf00      	nop
 8013a58:	3708      	adds	r7, #8
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}
	...

08013a60 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b082      	sub	sp, #8
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f009 fb40 	bl	801d0f0 <_ZN8touchgfx6ScreenC1Ev>
 8013a70:	4a05      	ldr	r2, [pc, #20]	; (8013a88 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	601a      	str	r2, [r3, #0]
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	4618      	mov	r0, r3
 8013a80:	3708      	adds	r7, #8
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}
 8013a86:	bf00      	nop
 8013a88:	0802aa30 	.word	0x0802aa30

08013a8c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b084      	sub	sp, #16
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	60f8      	str	r0, [r7, #12]
 8013a94:	60b9      	str	r1, [r7, #8]
 8013a96:	4639      	mov	r1, r7
 8013a98:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f7ff f988 	bl	8012db4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8013aa4:	4a08      	ldr	r2, [pc, #32]	; (8013ac8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	68ba      	ldr	r2, [r7, #8]
 8013aae:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	3308      	adds	r3, #8
 8013ab4:	463a      	mov	r2, r7
 8013ab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013aba:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	3710      	adds	r7, #16
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}
 8013ac8:	0802a97c 	.word	0x0802a97c

08013acc <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>:
     * @see moveOrigin
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setOrigin(T x, T y)
 8013acc:	b590      	push	{r4, r7, lr}
 8013ace:	b08b      	sub	sp, #44	; 0x2c
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	60f8      	str	r0, [r7, #12]
 8013ad4:	ed87 0a02 	vstr	s0, [r7, #8]
 8013ad8:	edc7 0a01 	vstr	s1, [r7, #4]
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	623b      	str	r3, [r7, #32]
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8013ae0:	edd7 7a08 	vldr	s15, [r7, #32]
 8013ae4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8013b88 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 8013ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013af0:	f107 031c 	add.w	r3, r7, #28
 8013af4:	ee17 1a90 	vmov	r1, s15
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7fe fb5e 	bl	80121ba <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013afe:	69fb      	ldr	r3, [r7, #28]
    {
        CWRUtil::Q5 dxNew = CWRUtil::toQ5<T>(x);
 8013b00:	617b      	str	r3, [r7, #20]
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	627b      	str	r3, [r7, #36]	; 0x24
 8013b06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013b0a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8013b88 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 8013b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b16:	f107 0318 	add.w	r3, r7, #24
 8013b1a:	ee17 1a90 	vmov	r1, s15
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f7fe fb4b 	bl	80121ba <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013b24:	69bb      	ldr	r3, [r7, #24]
        CWRUtil::Q5 dyNew = CWRUtil::toQ5<T>(y);
 8013b26:	613b      	str	r3, [r7, #16]

        if (dx == dxNew && dy == dyNew)
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	3330      	adds	r3, #48	; 0x30
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f7ff fc2c 	bl	801338a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8013b32:	4604      	mov	r4, r0
 8013b34:	f107 0314 	add.w	r3, r7, #20
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7ff fc26 	bl	801338a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	429c      	cmp	r4, r3
 8013b42:	d10f      	bne.n	8013b64 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	3334      	adds	r3, #52	; 0x34
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f7ff fc1e 	bl	801338a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8013b4e:	4604      	mov	r4, r0
 8013b50:	f107 0310 	add.w	r3, r7, #16
 8013b54:	4618      	mov	r0, r3
 8013b56:	f7ff fc18 	bl	801338a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	429c      	cmp	r4, r3
 8013b5e:	d101      	bne.n	8013b64 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 8013b60:	2301      	movs	r3, #1
 8013b62:	e000      	b.n	8013b66 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x9a>
 8013b64:	2300      	movs	r3, #0
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d109      	bne.n	8013b7e <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb2>
        {
            return;
        }

        dx = dxNew;
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	697a      	ldr	r2, [r7, #20]
 8013b6e:	631a      	str	r2, [r3, #48]	; 0x30
        dy = dyNew;
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	693a      	ldr	r2, [r7, #16]
 8013b74:	635a      	str	r2, [r3, #52]	; 0x34

        updateAbstractShapeCache();
 8013b76:	68f8      	ldr	r0, [r7, #12]
 8013b78:	f005 fb86 	bl	8019288 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
 8013b7c:	e000      	b.n	8013b80 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb4>
            return;
 8013b7e:	bf00      	nop
    }
 8013b80:	372c      	adds	r7, #44	; 0x2c
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd90      	pop	{r4, r7, pc}
 8013b86:	bf00      	nop
 8013b88:	42000000 	.word	0x42000000

08013b8c <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>:
     * @see getScale, updateScale
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setScale(T newXScale, T newYScale)
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b088      	sub	sp, #32
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	60f8      	str	r0, [r7, #12]
 8013b94:	ed87 0a02 	vstr	s0, [r7, #8]
 8013b98:	edc7 0a01 	vstr	s1, [r7, #4]
 8013b9c:	68bb      	ldr	r3, [r7, #8]
 8013b9e:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q10 toQ10(T value)
    {
        return Q10(int(value * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE));
 8013ba0:	edd7 7a06 	vldr	s15, [r7, #24]
 8013ba4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8013c10 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 8013ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013bac:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8013c10 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 8013bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013bb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013bb8:	f107 0314 	add.w	r3, r7, #20
 8013bbc:	ee17 1a90 	vmov	r1, s15
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f7ff fbee 	bl	80133a2 <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 8013bc6:	697b      	ldr	r3, [r7, #20]
 8013bc8:	461a      	mov	r2, r3
    {
        xScale = CWRUtil::toQ10<T>(newXScale);
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	63da      	str	r2, [r3, #60]	; 0x3c
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	61fb      	str	r3, [r7, #28]
 8013bd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8013bd6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8013c10 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 8013bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013bde:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8013c10 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 8013be2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013be6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013bea:	f107 0310 	add.w	r3, r7, #16
 8013bee:	ee17 1a90 	vmov	r1, s15
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f7ff fbd5 	bl	80133a2 <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 8013bf8:	693b      	ldr	r3, [r7, #16]
 8013bfa:	461a      	mov	r2, r3
        yScale = CWRUtil::toQ10<T>(newYScale);
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	641a      	str	r2, [r3, #64]	; 0x40
        updateAbstractShapeCache();
 8013c00:	68f8      	ldr	r0, [r7, #12]
 8013c02:	f005 fb41 	bl	8019288 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 8013c06:	bf00      	nop
 8013c08:	3720      	adds	r7, #32
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	bd80      	pop	{r7, pc}
 8013c0e:	bf00      	nop
 8013c10:	42000000 	.word	0x42000000

08013c14 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>:
    void setAngle(T angle)
 8013c14:	b590      	push	{r4, r7, lr}
 8013c16:	b087      	sub	sp, #28
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
 8013c1c:	ed87 0a00 	vstr	s0, [r7]
 8013c20:	683b      	ldr	r3, [r7, #0]
 8013c22:	617b      	str	r3, [r7, #20]
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8013c24:	edd7 7a05 	vldr	s15, [r7, #20]
 8013c28:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8013c80 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x6c>
 8013c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013c34:	f107 0310 	add.w	r3, r7, #16
 8013c38:	ee17 1a90 	vmov	r1, s15
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f7fe fabc 	bl	80121ba <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013c42:	693b      	ldr	r3, [r7, #16]
        CWRUtil::Q5 angleQ5 = CWRUtil::toQ5<T>(angle);
 8013c44:	60fb      	str	r3, [r7, #12]
        if (shapeAngle != angleQ5)
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	3338      	adds	r3, #56	; 0x38
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f7ff fb9d 	bl	801338a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8013c50:	4604      	mov	r4, r0
 8013c52:	f107 030c 	add.w	r3, r7, #12
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7ff fb97 	bl	801338a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	429c      	cmp	r4, r3
 8013c60:	bf14      	ite	ne
 8013c62:	2301      	movne	r3, #1
 8013c64:	2300      	moveq	r3, #0
 8013c66:	b2db      	uxtb	r3, r3
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d005      	beq.n	8013c78 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x64>
            shapeAngle = angleQ5;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	68fa      	ldr	r2, [r7, #12]
 8013c70:	639a      	str	r2, [r3, #56]	; 0x38
            updateAbstractShapeCache();
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	f005 fb08 	bl	8019288 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 8013c78:	bf00      	nop
 8013c7a:	371c      	adds	r7, #28
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd90      	pop	{r4, r7, pc}
 8013c80:	42000000 	.word	0x42000000

08013c84 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>:
    void setShape(const ShapePoint<T>* points)
 8013c84:	b5b0      	push	{r4, r5, r7, lr}
 8013c86:	b088      	sub	sp, #32
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
 8013c8c:	6039      	str	r1, [r7, #0]
        int numPoints = getNumPoints();
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	3378      	adds	r3, #120	; 0x78
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	6878      	ldr	r0, [r7, #4]
 8013c98:	4798      	blx	r3
 8013c9a:	61b8      	str	r0, [r7, #24]
        for (int i = 0; i < numPoints; i++)
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	61fb      	str	r3, [r7, #28]
 8013ca0:	69fa      	ldr	r2, [r7, #28]
 8013ca2:	69bb      	ldr	r3, [r7, #24]
 8013ca4:	429a      	cmp	r2, r3
 8013ca6:	da38      	bge.n	8013d1a <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x96>
            setCorner(i, CWRUtil::toQ5<T>(points[i].x), CWRUtil::toQ5<T>(points[i].y));
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	337c      	adds	r3, #124	; 0x7c
 8013cae:	681c      	ldr	r4, [r3, #0]
 8013cb0:	69fb      	ldr	r3, [r7, #28]
 8013cb2:	00db      	lsls	r3, r3, #3
 8013cb4:	683a      	ldr	r2, [r7, #0]
 8013cb6:	4413      	add	r3, r2
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	613b      	str	r3, [r7, #16]
 8013cbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8013cc0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8013d28 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 8013cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ccc:	f107 030c 	add.w	r3, r7, #12
 8013cd0:	ee17 1a90 	vmov	r1, s15
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7fe fa70 	bl	80121ba <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	461d      	mov	r5, r3
 8013cde:	69fb      	ldr	r3, [r7, #28]
 8013ce0:	00db      	lsls	r3, r3, #3
 8013ce2:	683a      	ldr	r2, [r7, #0]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	685b      	ldr	r3, [r3, #4]
 8013ce8:	617b      	str	r3, [r7, #20]
 8013cea:	edd7 7a05 	vldr	s15, [r7, #20]
 8013cee:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8013d28 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 8013cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013cf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013cfa:	f107 0308 	add.w	r3, r7, #8
 8013cfe:	ee17 1a90 	vmov	r1, s15
 8013d02:	4618      	mov	r0, r3
 8013d04:	f7fe fa59 	bl	80121ba <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013d08:	68bb      	ldr	r3, [r7, #8]
 8013d0a:	462a      	mov	r2, r5
 8013d0c:	69f9      	ldr	r1, [r7, #28]
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	47a0      	blx	r4
        for (int i = 0; i < numPoints; i++)
 8013d12:	69fb      	ldr	r3, [r7, #28]
 8013d14:	3301      	adds	r3, #1
 8013d16:	61fb      	str	r3, [r7, #28]
 8013d18:	e7c2      	b.n	8013ca0 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x1c>
        updateAbstractShapeCache();
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f005 fab4 	bl	8019288 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 8013d20:	bf00      	nop
 8013d22:	3720      	adds	r7, #32
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bdb0      	pop	{r4, r5, r7, pc}
 8013d28:	42000000 	.word	0x42000000

08013d2c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b082      	sub	sp, #8
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
 8013d34:	4a05      	ldr	r2, [pc, #20]	; (8013d4c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	601a      	str	r2, [r3, #0]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f7ff f897 	bl	8012e70 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	4618      	mov	r0, r3
 8013d46:	3708      	adds	r7, #8
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}
 8013d4c:	0802a97c 	.word	0x0802a97c

08013d50 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b082      	sub	sp, #8
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f7ff ffe7 	bl	8013d2c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8013d5e:	2110      	movs	r1, #16
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f014 fb63 	bl	802842c <_ZdlPvj>
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3708      	adds	r7, #8
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}

08013d70 <_ZN8touchgfx5ShapeILt3EED1Ev>:
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b082      	sub	sp, #8
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
 8013d78:	4a05      	ldr	r2, [pc, #20]	; (8013d90 <_ZN8touchgfx5ShapeILt3EED1Ev+0x20>)
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	601a      	str	r2, [r3, #0]
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	4618      	mov	r0, r3
 8013d82:	f7ff fba7 	bl	80134d4 <_ZN8touchgfx13AbstractShapeD1Ev>
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	4618      	mov	r0, r3
 8013d8a:	3708      	adds	r7, #8
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bd80      	pop	{r7, pc}
 8013d90:	0802a994 	.word	0x0802a994

08013d94 <_ZN8touchgfx5ShapeILt3EED0Ev>:
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b082      	sub	sp, #8
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
 8013d9c:	6878      	ldr	r0, [r7, #4]
 8013d9e:	f7ff ffe7 	bl	8013d70 <_ZN8touchgfx5ShapeILt3EED1Ev>
 8013da2:	217c      	movs	r1, #124	; 0x7c
 8013da4:	6878      	ldr	r0, [r7, #4]
 8013da6:	f014 fb41 	bl	802842c <_ZdlPvj>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	4618      	mov	r0, r3
 8013dae:	3708      	adds	r7, #8
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}

08013db4 <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b082      	sub	sp, #8
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
 8013dbc:	4a05      	ldr	r2, [pc, #20]	; (8013dd4 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	601a      	str	r2, [r3, #0]
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f7fc f81b 	bl	800fe00 <_ZN8touchgfx6WidgetD1Ev>
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	4618      	mov	r0, r3
 8013dce:	3708      	adds	r7, #8
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	bd80      	pop	{r7, pc}
 8013dd4:	0802cc88 	.word	0x0802cc88

08013dd8 <_ZN8touchgfx5ImageD0Ev>:
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b082      	sub	sp, #8
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	6078      	str	r0, [r7, #4]
 8013de0:	6878      	ldr	r0, [r7, #4]
 8013de2:	f7ff ffe7 	bl	8013db4 <_ZN8touchgfx5ImageD1Ev>
 8013de6:	212c      	movs	r1, #44	; 0x2c
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f014 fb1f 	bl	802842c <_ZdlPvj>
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	4618      	mov	r0, r3
 8013df2:	3708      	adds	r7, #8
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}

08013df8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b082      	sub	sp, #8
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
 8013e00:	4a0a      	ldr	r2, [pc, #40]	; (8013e2c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	601a      	str	r2, [r3, #0]
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	3358      	adds	r3, #88	; 0x58
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f7ff f8b6 	bl	8012f7c <_ZN8touchgfx9ContainerD1Ev>
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	332c      	adds	r3, #44	; 0x2c
 8013e14:	4618      	mov	r0, r3
 8013e16:	f7ff ffcd 	bl	8013db4 <_ZN8touchgfx5ImageD1Ev>
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f7ff f8ad 	bl	8012f7c <_ZN8touchgfx9ContainerD1Ev>
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	4618      	mov	r0, r3
 8013e26:	3708      	adds	r7, #8
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}
 8013e2c:	0802b948 	.word	0x0802b948

08013e30 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b082      	sub	sp, #8
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f7ff ffdd 	bl	8013df8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8013e3e:	2190      	movs	r1, #144	; 0x90
 8013e40:	6878      	ldr	r0, [r7, #4]
 8013e42:	f014 faf3 	bl	802842c <_ZdlPvj>
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	4618      	mov	r0, r3
 8013e4a:	3708      	adds	r7, #8
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	bd80      	pop	{r7, pc}

08013e50 <_ZN8touchgfx4LineD1Ev>:
 *            line.setStart(1.1f, 1.1f); // Will use (35/32, 35/32) = (1.09375f, 1.09375f)
 *            int x, y;
 *            line.getStart(&amp;x, &amp;y); // Will return (1, 1)
 *       @endcode.
 */
class Line : public CanvasWidget
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b082      	sub	sp, #8
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
 8013e58:	4a05      	ldr	r2, [pc, #20]	; (8013e70 <_ZN8touchgfx4LineD1Ev+0x20>)
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	601a      	str	r2, [r3, #0]
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	4618      	mov	r0, r3
 8013e62:	f7fe ff07 	bl	8012c74 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3708      	adds	r7, #8
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}
 8013e70:	0802c738 	.word	0x0802c738

08013e74 <_ZN8touchgfx4LineD0Ev>:
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b082      	sub	sp, #8
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f7ff ffe7 	bl	8013e50 <_ZN8touchgfx4LineD1Ev>
 8013e82:	2174      	movs	r1, #116	; 0x74
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f014 fad1 	bl	802842c <_ZdlPvj>
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	3708      	adds	r7, #8
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}

08013e94 <_ZN8touchgfx12LineProgressD1Ev>:
 * horizontal or vertical, but can start at any coordinate and finish at any coordinate.
 *
 * @note As LineProgress uses CanvasWidgetRenderer, it is important that a buffer is set up by
 *       calling CanvasWidgetRendere::setBuffer().
 */
class LineProgress : public AbstractProgressIndicator
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b082      	sub	sp, #8
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
 8013e9c:	4a08      	ldr	r2, [pc, #32]	; (8013ec0 <_ZN8touchgfx12LineProgressD1Ev+0x2c>)
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	601a      	str	r2, [r3, #0]
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	3390      	adds	r3, #144	; 0x90
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7ff ffd2 	bl	8013e50 <_ZN8touchgfx4LineD1Ev>
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f7ff ffa2 	bl	8013df8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	3708      	adds	r7, #8
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	bd80      	pop	{r7, pc}
 8013ebe:	bf00      	nop
 8013ec0:	0802b7e0 	.word	0x0802b7e0

08013ec4 <_ZN8touchgfx12LineProgressD0Ev>:
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b082      	sub	sp, #8
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
 8013ecc:	6878      	ldr	r0, [r7, #4]
 8013ece:	f7ff ffe1 	bl	8013e94 <_ZN8touchgfx12LineProgressD1Ev>
 8013ed2:	f44f 718a 	mov.w	r1, #276	; 0x114
 8013ed6:	6878      	ldr	r0, [r7, #4]
 8013ed8:	f014 faa8 	bl	802842c <_ZdlPvj>
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	4618      	mov	r0, r3
 8013ee0:	3708      	adds	r7, #8
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}

08013ee6 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8013ee6:	b580      	push	{r7, lr}
 8013ee8:	b082      	sub	sp, #8
 8013eea:	af00      	add	r7, sp, #0
 8013eec:	6078      	str	r0, [r7, #4]
 8013eee:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	685b      	ldr	r3, [r3, #4]
 8013ef4:	687a      	ldr	r2, [r7, #4]
 8013ef6:	68d2      	ldr	r2, [r2, #12]
 8013ef8:	1052      	asrs	r2, r2, #1
 8013efa:	1898      	adds	r0, r3, r2
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	68db      	ldr	r3, [r3, #12]
 8013f00:	f003 0301 	and.w	r3, r3, #1
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d102      	bne.n	8013f0e <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	689b      	ldr	r3, [r3, #8]
 8013f0c:	e00a      	b.n	8013f24 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	685b      	ldr	r3, [r3, #4]
 8013f12:	687a      	ldr	r2, [r7, #4]
 8013f14:	68d2      	ldr	r2, [r2, #12]
 8013f16:	1052      	asrs	r2, r2, #1
 8013f18:	4413      	add	r3, r2
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	687a      	ldr	r2, [r7, #4]
 8013f1e:	6892      	ldr	r2, [r2, #8]
 8013f20:	4413      	add	r3, r2
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	6839      	ldr	r1, [r7, #0]
 8013f26:	4798      	blx	r3
    }
 8013f28:	bf00      	nop
 8013f2a:	3708      	adds	r7, #8
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}

08013f30 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8013f30:	b480      	push	{r7}
 8013f32:	b083      	sub	sp, #12
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	685b      	ldr	r3, [r3, #4]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d010      	beq.n	8013f62 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	689b      	ldr	r3, [r3, #8]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d107      	bne.n	8013f58 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	68db      	ldr	r3, [r3, #12]
 8013f4c:	f003 0301 	and.w	r3, r3, #1
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d101      	bne.n	8013f58 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8013f54:	2301      	movs	r3, #1
 8013f56:	e000      	b.n	8013f5a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8013f58:	2300      	movs	r3, #0
 8013f5a:	2b01      	cmp	r3, #1
 8013f5c:	d001      	beq.n	8013f62 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8013f5e:	2301      	movs	r3, #1
 8013f60:	e000      	b.n	8013f64 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8013f62:	2300      	movs	r3, #0
    }
 8013f64:	4618      	mov	r0, r3
 8013f66:	370c      	adds	r7, #12
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6e:	4770      	bx	lr

08013f70 <_ZNK8touchgfx5ShapeILt3EE12getNumPointsEv>:
{
public:
    virtual int getNumPoints() const
 8013f70:	b480      	push	{r7}
 8013f72:	b083      	sub	sp, #12
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
    {
        return POINTS;
 8013f78:	2303      	movs	r3, #3
    }
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	370c      	adds	r7, #12
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f84:	4770      	bx	lr

08013f86 <_ZN8touchgfx5ShapeILt3EE9setCornerEiNS_7CWRUtil2Q5ES3_>:

    virtual void setCorner(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 8013f86:	b480      	push	{r7}
 8013f88:	b085      	sub	sp, #20
 8013f8a:	af00      	add	r7, sp, #0
 8013f8c:	60f8      	str	r0, [r7, #12]
 8013f8e:	60b9      	str	r1, [r7, #8]
 8013f90:	607a      	str	r2, [r7, #4]
 8013f92:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	db0f      	blt.n	8013fba <_ZN8touchgfx5ShapeILt3EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x34>
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	2b02      	cmp	r3, #2
 8013f9e:	dc0c      	bgt.n	8013fba <_ZN8touchgfx5ShapeILt3EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x34>
        {
            xCorner[i] = x, yCorner[i] = y;
 8013fa0:	68fa      	ldr	r2, [r7, #12]
 8013fa2:	68bb      	ldr	r3, [r7, #8]
 8013fa4:	3312      	adds	r3, #18
 8013fa6:	009b      	lsls	r3, r3, #2
 8013fa8:	4413      	add	r3, r2
 8013faa:	687a      	ldr	r2, [r7, #4]
 8013fac:	605a      	str	r2, [r3, #4]
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	68ba      	ldr	r2, [r7, #8]
 8013fb2:	3216      	adds	r2, #22
 8013fb4:	6839      	ldr	r1, [r7, #0]
 8013fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 8013fba:	bf00      	nop
 8013fbc:	3714      	adds	r7, #20
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc4:	4770      	bx	lr

08013fc6 <_ZNK8touchgfx5ShapeILt3EE10getCornerXEi>:

    virtual CWRUtil::Q5 getCornerX(int i) const
 8013fc6:	b580      	push	{r7, lr}
 8013fc8:	b084      	sub	sp, #16
 8013fca:	af00      	add	r7, sp, #0
 8013fcc:	6078      	str	r0, [r7, #4]
 8013fce:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	db09      	blt.n	8013fea <_ZNK8touchgfx5ShapeILt3EE10getCornerXEi+0x24>
 8013fd6:	683b      	ldr	r3, [r7, #0]
 8013fd8:	2b02      	cmp	r3, #2
 8013fda:	dc06      	bgt.n	8013fea <_ZNK8touchgfx5ShapeILt3EE10getCornerXEi+0x24>
        {
            return xCorner[i];
 8013fdc:	687a      	ldr	r2, [r7, #4]
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	3312      	adds	r3, #18
 8013fe2:	009b      	lsls	r3, r3, #2
 8013fe4:	4413      	add	r3, r2
 8013fe6:	685b      	ldr	r3, [r3, #4]
 8013fe8:	e00b      	b.n	8014002 <_ZNK8touchgfx5ShapeILt3EE10getCornerXEi+0x3c>
 8013fea:	2300      	movs	r3, #0
 8013fec:	60fb      	str	r3, [r7, #12]
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	015a      	lsls	r2, r3, #5
 8013ff2:	f107 0308 	add.w	r3, r7, #8
 8013ff6:	4611      	mov	r1, r2
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f7fe f8de 	bl	80121ba <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8013ffe:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8014000:	bf00      	nop
    }
 8014002:	4618      	mov	r0, r3
 8014004:	3710      	adds	r7, #16
 8014006:	46bd      	mov	sp, r7
 8014008:	bd80      	pop	{r7, pc}

0801400a <_ZNK8touchgfx5ShapeILt3EE10getCornerYEi>:

    virtual CWRUtil::Q5 getCornerY(int i) const
 801400a:	b580      	push	{r7, lr}
 801400c:	b084      	sub	sp, #16
 801400e:	af00      	add	r7, sp, #0
 8014010:	6078      	str	r0, [r7, #4]
 8014012:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8014014:	683b      	ldr	r3, [r7, #0]
 8014016:	2b00      	cmp	r3, #0
 8014018:	db08      	blt.n	801402c <_ZNK8touchgfx5ShapeILt3EE10getCornerYEi+0x22>
 801401a:	683b      	ldr	r3, [r7, #0]
 801401c:	2b02      	cmp	r3, #2
 801401e:	dc05      	bgt.n	801402c <_ZNK8touchgfx5ShapeILt3EE10getCornerYEi+0x22>
        {
            return yCorner[i];
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	683a      	ldr	r2, [r7, #0]
 8014024:	3216      	adds	r2, #22
 8014026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801402a:	e00b      	b.n	8014044 <_ZNK8touchgfx5ShapeILt3EE10getCornerYEi+0x3a>
 801402c:	2300      	movs	r3, #0
 801402e:	60fb      	str	r3, [r7, #12]
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	015a      	lsls	r2, r3, #5
 8014034:	f107 0308 	add.w	r3, r7, #8
 8014038:	4611      	mov	r1, r2
 801403a:	4618      	mov	r0, r3
 801403c:	f7fe f8bd 	bl	80121ba <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8014040:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8014042:	bf00      	nop
    }
 8014044:	4618      	mov	r0, r3
 8014046:	3710      	adds	r7, #16
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}

0801404c <_ZN8touchgfx5ShapeILt3EE8setCacheEiNS_7CWRUtil2Q5ES3_>:

protected:
    virtual void setCache(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 801404c:	b480      	push	{r7}
 801404e:	b085      	sub	sp, #20
 8014050:	af00      	add	r7, sp, #0
 8014052:	60f8      	str	r0, [r7, #12]
 8014054:	60b9      	str	r1, [r7, #8]
 8014056:	607a      	str	r2, [r7, #4]
 8014058:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	2b00      	cmp	r3, #0
 801405e:	db0f      	blt.n	8014080 <_ZN8touchgfx5ShapeILt3EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x34>
 8014060:	68bb      	ldr	r3, [r7, #8]
 8014062:	2b02      	cmp	r3, #2
 8014064:	dc0c      	bgt.n	8014080 <_ZN8touchgfx5ShapeILt3EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x34>
        {
            xCache[i] = x, yCache[i] = y;
 8014066:	68fa      	ldr	r2, [r7, #12]
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	3318      	adds	r3, #24
 801406c:	009b      	lsls	r3, r3, #2
 801406e:	4413      	add	r3, r2
 8014070:	687a      	ldr	r2, [r7, #4]
 8014072:	605a      	str	r2, [r3, #4]
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	68ba      	ldr	r2, [r7, #8]
 8014078:	321c      	adds	r2, #28
 801407a:	6839      	ldr	r1, [r7, #0]
 801407c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 8014080:	bf00      	nop
 8014082:	3714      	adds	r7, #20
 8014084:	46bd      	mov	sp, r7
 8014086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408a:	4770      	bx	lr

0801408c <_ZNK8touchgfx5ShapeILt3EE9getCacheXEi>:

    virtual CWRUtil::Q5 getCacheX(int i) const
 801408c:	b580      	push	{r7, lr}
 801408e:	b084      	sub	sp, #16
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
 8014094:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	2b00      	cmp	r3, #0
 801409a:	db09      	blt.n	80140b0 <_ZNK8touchgfx5ShapeILt3EE9getCacheXEi+0x24>
 801409c:	683b      	ldr	r3, [r7, #0]
 801409e:	2b02      	cmp	r3, #2
 80140a0:	dc06      	bgt.n	80140b0 <_ZNK8touchgfx5ShapeILt3EE9getCacheXEi+0x24>
        {
            return xCache[i];
 80140a2:	687a      	ldr	r2, [r7, #4]
 80140a4:	683b      	ldr	r3, [r7, #0]
 80140a6:	3318      	adds	r3, #24
 80140a8:	009b      	lsls	r3, r3, #2
 80140aa:	4413      	add	r3, r2
 80140ac:	685b      	ldr	r3, [r3, #4]
 80140ae:	e00b      	b.n	80140c8 <_ZNK8touchgfx5ShapeILt3EE9getCacheXEi+0x3c>
 80140b0:	2300      	movs	r3, #0
 80140b2:	60fb      	str	r3, [r7, #12]
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	015a      	lsls	r2, r3, #5
 80140b8:	f107 0308 	add.w	r3, r7, #8
 80140bc:	4611      	mov	r1, r2
 80140be:	4618      	mov	r0, r3
 80140c0:	f7fe f87b 	bl	80121ba <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80140c4:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 80140c6:	bf00      	nop
    }
 80140c8:	4618      	mov	r0, r3
 80140ca:	3710      	adds	r7, #16
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}

080140d0 <_ZNK8touchgfx5ShapeILt3EE9getCacheYEi>:

    virtual CWRUtil::Q5 getCacheY(int i) const
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b084      	sub	sp, #16
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
 80140d8:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	db08      	blt.n	80140f2 <_ZNK8touchgfx5ShapeILt3EE9getCacheYEi+0x22>
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	2b02      	cmp	r3, #2
 80140e4:	dc05      	bgt.n	80140f2 <_ZNK8touchgfx5ShapeILt3EE9getCacheYEi+0x22>
        {
            return yCache[i];
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	683a      	ldr	r2, [r7, #0]
 80140ea:	321c      	adds	r2, #28
 80140ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140f0:	e00b      	b.n	801410a <_ZNK8touchgfx5ShapeILt3EE9getCacheYEi+0x3a>
 80140f2:	2300      	movs	r3, #0
 80140f4:	60fb      	str	r3, [r7, #12]
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	015a      	lsls	r2, r3, #5
 80140fa:	f107 0308 	add.w	r3, r7, #8
 80140fe:	4611      	mov	r1, r2
 8014100:	4618      	mov	r0, r3
 8014102:	f7fe f85a 	bl	80121ba <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8014106:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8014108:	bf00      	nop
    }
 801410a:	4618      	mov	r0, r3
 801410c:	3710      	adds	r7, #16
 801410e:	46bd      	mov	sp, r7
 8014110:	bd80      	pop	{r7, pc}
	...

08014114 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>:
class View : public Screen
 8014114:	b580      	push	{r7, lr}
 8014116:	b082      	sub	sp, #8
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
 801411c:	4a05      	ldr	r2, [pc, #20]	; (8014134 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev+0x20>)
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	601a      	str	r2, [r3, #0]
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	4618      	mov	r0, r3
 8014126:	f7fd ff17 	bl	8011f58 <_ZN8touchgfx6ScreenD1Ev>
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	4618      	mov	r0, r3
 801412e:	3708      	adds	r7, #8
 8014130:	46bd      	mov	sp, r7
 8014132:	bd80      	pop	{r7, pc}
 8014134:	0802aab0 	.word	0x0802aab0

08014138 <_ZN8touchgfx4ViewI16Screen3PresenterED0Ev>:
 8014138:	b580      	push	{r7, lr}
 801413a:	b082      	sub	sp, #8
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f7ff ffe7 	bl	8014114 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 8014146:	2140      	movs	r1, #64	; 0x40
 8014148:	6878      	ldr	r0, [r7, #4]
 801414a:	f014 f96f 	bl	802842c <_ZdlPvj>
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	4618      	mov	r0, r3
 8014152:	3708      	adds	r7, #8
 8014154:	46bd      	mov	sp, r7
 8014156:	bd80      	pop	{r7, pc}

08014158 <_ZN15Screen3ViewBaseD1Ev>:

class Screen3ViewBase : public touchgfx::View<Screen3Presenter>
{
public:
    Screen3ViewBase();
    virtual ~Screen3ViewBase() {}
 8014158:	b580      	push	{r7, lr}
 801415a:	b082      	sub	sp, #8
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
 8014160:	4a18      	ldr	r2, [pc, #96]	; (80141c4 <_ZN15Screen3ViewBaseD1Ev+0x6c>)
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	601a      	str	r2, [r3, #0]
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801416c:	4618      	mov	r0, r3
 801416e:	f000 fa03 	bl	8014578 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8014178:	4618      	mov	r0, r3
 801417a:	f7fe fde1 	bl	8012d40 <_ZN8touchgfx3BoxD1Ev>
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014184:	4618      	mov	r0, r3
 8014186:	f7fe fddb 	bl	8012d40 <_ZN8touchgfx3BoxD1Ev>
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	33e8      	adds	r3, #232	; 0xe8
 801418e:	4618      	mov	r0, r3
 8014190:	f000 fa36 	bl	8014600 <_ZN8touchgfx11BoxProgressD1Ev>
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	33a0      	adds	r3, #160	; 0xa0
 8014198:	4618      	mov	r0, r3
 801419a:	f7fe ff55 	bl	8013048 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	3370      	adds	r3, #112	; 0x70
 80141a2:	4618      	mov	r0, r3
 80141a4:	f7fe fdcc 	bl	8012d40 <_ZN8touchgfx3BoxD1Ev>
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	3340      	adds	r3, #64	; 0x40
 80141ac:	4618      	mov	r0, r3
 80141ae:	f7fe fdc7 	bl	8012d40 <_ZN8touchgfx3BoxD1Ev>
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	4618      	mov	r0, r3
 80141b6:	f7ff ffad 	bl	8014114 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	4618      	mov	r0, r3
 80141be:	3708      	adds	r7, #8
 80141c0:	46bd      	mov	sp, r7
 80141c2:	bd80      	pop	{r7, pc}
 80141c4:	0802aa64 	.word	0x0802aa64

080141c8 <_ZN15Screen3ViewBaseD0Ev>:
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b082      	sub	sp, #8
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
 80141d0:	6878      	ldr	r0, [r7, #4]
 80141d2:	f7ff ffc1 	bl	8014158 <_ZN15Screen3ViewBaseD1Ev>
 80141d6:	f44f 7106 	mov.w	r1, #536	; 0x218
 80141da:	6878      	ldr	r0, [r7, #4]
 80141dc:	f014 f926 	bl	802842c <_ZdlPvj>
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	4618      	mov	r0, r3
 80141e4:	3708      	adds	r7, #8
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}

080141ea <_ZN15Screen3ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80141ea:	b580      	push	{r7, lr}
 80141ec:	b082      	sub	sp, #8
 80141ee:	af00      	add	r7, sp, #0
 80141f0:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80141f2:	f007 ffc7 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 80141f6:	4603      	mov	r3, r0
    }
 80141f8:	4618      	mov	r0, r3
 80141fa:	3708      	adds	r7, #8
 80141fc:	46bd      	mov	sp, r7
 80141fe:	bd80      	pop	{r7, pc}

08014200 <_ZN15Screen3ViewBaseC1Ev>:
#include <gui_generated/screen3_screen/Screen3ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Screen3ViewBase::Screen3ViewBase() :
 8014200:	b590      	push	{r4, r7, lr}
 8014202:	b08d      	sub	sp, #52	; 0x34
 8014204:	af02      	add	r7, sp, #8
 8014206:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen3ViewBase::buttonCallbackHandler)
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	4618      	mov	r0, r3
 801420c:	f000 f97e 	bl	801450c <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>
 8014210:	4aac      	ldr	r2, [pc, #688]	; (80144c4 <_ZN15Screen3ViewBaseC1Ev+0x2c4>)
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	601a      	str	r2, [r3, #0]
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	3340      	adds	r3, #64	; 0x40
 801421a:	4618      	mov	r0, r3
 801421c:	f7fd ff40 	bl	80120a0 <_ZN8touchgfx3BoxC1Ev>
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	3370      	adds	r3, #112	; 0x70
 8014224:	4618      	mov	r0, r3
 8014226:	f7fd ff3b 	bl	80120a0 <_ZN8touchgfx3BoxC1Ev>
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	33a0      	adds	r3, #160	; 0xa0
 801422e:	4618      	mov	r0, r3
 8014230:	f006 ff3a 	bl	801b0a8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	33e8      	adds	r3, #232	; 0xe8
 8014238:	4618      	mov	r0, r3
 801423a:	f003 fd09 	bl	8017c50 <_ZN8touchgfx11BoxProgressC1Ev>
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014244:	4618      	mov	r0, r3
 8014246:	f7fd ff2b 	bl	80120a0 <_ZN8touchgfx3BoxC1Ev>
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8014250:	4618      	mov	r0, r3
 8014252:	f7fd ff25 	bl	80120a0 <_ZN8touchgfx3BoxC1Ev>
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	f503 7002 	add.w	r0, r3, #520	; 0x208
 801425c:	4b9a      	ldr	r3, [pc, #616]	; (80144c8 <_ZN15Screen3ViewBaseC1Ev+0x2c8>)
 801425e:	60fb      	str	r3, [r7, #12]
 8014260:	2300      	movs	r3, #0
 8014262:	613b      	str	r3, [r7, #16]
 8014264:	f107 030c 	add.w	r3, r7, #12
 8014268:	cb0c      	ldmia	r3, {r2, r3}
 801426a:	6879      	ldr	r1, [r7, #4]
 801426c:	f000 f964 	bl	8014538 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    box1.setPosition(0, 0, 480, 272);
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8014276:	f44f 7388 	mov.w	r3, #272	; 0x110
 801427a:	9300      	str	r3, [sp, #0]
 801427c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8014280:	2200      	movs	r2, #0
 8014282:	2100      	movs	r1, #0
 8014284:	f7fb fb2c 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801428e:	22ff      	movs	r2, #255	; 0xff
 8014290:	21ff      	movs	r1, #255	; 0xff
 8014292:	20ff      	movs	r0, #255	; 0xff
 8014294:	f7fd ffbe 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014298:	4603      	mov	r3, r0
 801429a:	4619      	mov	r1, r3
 801429c:	4620      	mov	r0, r4
 801429e:	f7fd ff27 	bl	80120f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box2.setPosition(0, 0, 480, 212);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80142a8:	23d4      	movs	r3, #212	; 0xd4
 80142aa:	9300      	str	r3, [sp, #0]
 80142ac:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80142b0:	2200      	movs	r2, #0
 80142b2:	2100      	movs	r1, #0
 80142b4:	f7fb fb14 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80142be:	2200      	movs	r2, #0
 80142c0:	2100      	movs	r1, #0
 80142c2:	2000      	movs	r0, #0
 80142c4:	f7fd ffa6 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80142c8:	4603      	mov	r3, r0
 80142ca:	4619      	mov	r1, r3
 80142cc:	4620      	mov	r0, r4
 80142ce:	f7fd ff0f 	bl	80120f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(0, 0);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	33a0      	adds	r3, #160	; 0xa0
 80142d6:	2200      	movs	r2, #0
 80142d8:	2100      	movs	r1, #0
 80142da:	4618      	mov	r0, r3
 80142dc:	f7fb fb65 	bl	800f9aa <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80142e6:	f107 0314 	add.w	r3, r7, #20
 80142ea:	2102      	movs	r1, #2
 80142ec:	4618      	mov	r0, r3
 80142ee:	f7fd fe13 	bl	8011f18 <_ZN8touchgfx6BitmapC1Et>
 80142f2:	f107 0318 	add.w	r3, r7, #24
 80142f6:	2103      	movs	r1, #3
 80142f8:	4618      	mov	r0, r3
 80142fa:	f7fd fe0d 	bl	8011f18 <_ZN8touchgfx6BitmapC1Et>
 80142fe:	f107 0218 	add.w	r2, r7, #24
 8014302:	f107 0314 	add.w	r3, r7, #20
 8014306:	4619      	mov	r1, r3
 8014308:	4620      	mov	r0, r4
 801430a:	f006 fbe5 	bl	801aad8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID21));
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8014314:	f107 031c 	add.w	r3, r7, #28
 8014318:	210c      	movs	r1, #12
 801431a:	4618      	mov	r0, r3
 801431c:	f7fe f87c 	bl	8012418 <_ZN8touchgfx9TypedTextC1Et>
 8014320:	f107 031c 	add.w	r3, r7, #28
 8014324:	4619      	mov	r1, r3
 8014326:	4620      	mov	r0, r4
 8014328:	f7fe f89c 	bl	8012464 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 801432c:	f107 031c 	add.w	r3, r7, #28
 8014330:	4618      	mov	r0, r3
 8014332:	f7fa ffbb 	bl	800f2ac <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 801433c:	22ff      	movs	r2, #255	; 0xff
 801433e:	21ff      	movs	r1, #255	; 0xff
 8014340:	20ff      	movs	r0, #255	; 0xff
 8014342:	f7fd ff67 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014346:	4603      	mov	r3, r0
 8014348:	4619      	mov	r1, r3
 801434a:	4620      	mov	r0, r4
 801434c:	f7fe f89c 	bl	8012488 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8014356:	22ff      	movs	r2, #255	; 0xff
 8014358:	21ff      	movs	r1, #255	; 0xff
 801435a:	20ff      	movs	r0, #255	; 0xff
 801435c:	f7fd ff5a 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014360:	4603      	mov	r3, r0
 8014362:	4619      	mov	r1, r3
 8014364:	4620      	mov	r0, r4
 8014366:	f7fe f89d 	bl	80124a4 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014376:	4619      	mov	r1, r3
 8014378:	4610      	mov	r0, r2
 801437a:	f7fd fe60 	bl	801203e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    boxProgress1.setXY(60, 224);
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	33e8      	adds	r3, #232	; 0xe8
 8014382:	22e0      	movs	r2, #224	; 0xe0
 8014384:	213c      	movs	r1, #60	; 0x3c
 8014386:	4618      	mov	r0, r3
 8014388:	f7fb fb0f 	bl	800f9aa <_ZN8touchgfx8Drawable5setXYEss>
    boxProgress1.setProgressIndicatorPosition(2, 2, 400, 30);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 8014392:	231e      	movs	r3, #30
 8014394:	9300      	str	r3, [sp, #0]
 8014396:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801439a:	2202      	movs	r2, #2
 801439c:	2102      	movs	r1, #2
 801439e:	f003 fbb1 	bl	8017b04 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    boxProgress1.setRange(0, 100);
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 80143a8:	2300      	movs	r3, #0
 80143aa:	9300      	str	r3, [sp, #0]
 80143ac:	2300      	movs	r3, #0
 80143ae:	2264      	movs	r2, #100	; 0x64
 80143b0:	2100      	movs	r1, #0
 80143b2:	f003 fdc1 	bl	8017f38 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    boxProgress1.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	33e8      	adds	r3, #232	; 0xe8
 80143ba:	2100      	movs	r1, #0
 80143bc:	4618      	mov	r0, r3
 80143be:	f003 fc80 	bl	8017cc2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    boxProgress1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 80143c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80143cc:	2105      	movs	r1, #5
 80143ce:	4618      	mov	r0, r3
 80143d0:	f7fd fda2 	bl	8011f18 <_ZN8touchgfx6BitmapC1Et>
 80143d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80143d8:	4619      	mov	r1, r3
 80143da:	4620      	mov	r0, r4
 80143dc:	f003 fda2 	bl	8017f24 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    boxProgress1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 151, 255));
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 80143e6:	22ff      	movs	r2, #255	; 0xff
 80143e8:	2197      	movs	r1, #151	; 0x97
 80143ea:	2000      	movs	r0, #0
 80143ec:	f7fd ff12 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80143f0:	4603      	mov	r3, r0
 80143f2:	4619      	mov	r1, r3
 80143f4:	4620      	mov	r0, r4
 80143f6:	f003 fb79 	bl	8017aec <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    boxProgress1.setValue(60);
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	33e8      	adds	r3, #232	; 0xe8
 80143fe:	213c      	movs	r1, #60	; 0x3c
 8014400:	4618      	mov	r0, r3
 8014402:	f003 fb97 	bl	8017b34 <_ZN8touchgfx11BoxProgress8setValueEi>

    box3.setPosition(9, 227, 15, 31);
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 801440c:	231f      	movs	r3, #31
 801440e:	9300      	str	r3, [sp, #0]
 8014410:	230f      	movs	r3, #15
 8014412:	22e3      	movs	r2, #227	; 0xe3
 8014414:	2109      	movs	r1, #9
 8014416:	f7fb fa63 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
    box3.setColor(touchgfx::Color::getColorFrom24BitRGB(4, 48, 240));
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8014420:	22f0      	movs	r2, #240	; 0xf0
 8014422:	2130      	movs	r1, #48	; 0x30
 8014424:	2004      	movs	r0, #4
 8014426:	f7fd fef5 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801442a:	4603      	mov	r3, r0
 801442c:	4619      	mov	r1, r3
 801442e:	4620      	mov	r0, r4
 8014430:	f7fd fe5e 	bl	80120f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box3_1.setPosition(30, 227, 15, 31);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 801443a:	231f      	movs	r3, #31
 801443c:	9300      	str	r3, [sp, #0]
 801443e:	230f      	movs	r3, #15
 8014440:	22e3      	movs	r2, #227	; 0xe3
 8014442:	211e      	movs	r1, #30
 8014444:	f7fb fa4c 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
    box3_1.setColor(touchgfx::Color::getColorFrom24BitRGB(4, 48, 240));
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 801444e:	22f0      	movs	r2, #240	; 0xf0
 8014450:	2130      	movs	r1, #48	; 0x30
 8014452:	2004      	movs	r0, #4
 8014454:	f7fd fede 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014458:	4603      	mov	r3, r0
 801445a:	4619      	mov	r1, r3
 801445c:	4620      	mov	r0, r4
 801445e:	f7fd fe47 	bl	80120f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    add(box1);
 8014462:	687a      	ldr	r2, [r7, #4]
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	3340      	adds	r3, #64	; 0x40
 8014468:	4619      	mov	r1, r3
 801446a:	4610      	mov	r0, r2
 801446c:	f7fd fdcc 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box2);
 8014470:	687a      	ldr	r2, [r7, #4]
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	3370      	adds	r3, #112	; 0x70
 8014476:	4619      	mov	r1, r3
 8014478:	4610      	mov	r0, r2
 801447a:	f7fd fdc5 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 801447e:	687a      	ldr	r2, [r7, #4]
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	33a0      	adds	r3, #160	; 0xa0
 8014484:	4619      	mov	r1, r3
 8014486:	4610      	mov	r0, r2
 8014488:	f7fd fdbe 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(boxProgress1);
 801448c:	687a      	ldr	r2, [r7, #4]
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	33e8      	adds	r3, #232	; 0xe8
 8014492:	4619      	mov	r1, r3
 8014494:	4610      	mov	r0, r2
 8014496:	f7fd fdb7 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box3);
 801449a:	687a      	ldr	r2, [r7, #4]
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80144a2:	4619      	mov	r1, r3
 80144a4:	4610      	mov	r0, r2
 80144a6:	f7fd fdaf 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box3_1);
 80144aa:	687a      	ldr	r2, [r7, #4]
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80144b2:	4619      	mov	r1, r3
 80144b4:	4610      	mov	r0, r2
 80144b6:	f7fd fda7 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	4618      	mov	r0, r3
 80144be:	372c      	adds	r7, #44	; 0x2c
 80144c0:	46bd      	mov	sp, r7
 80144c2:	bd90      	pop	{r4, r7, pc}
 80144c4:	0802aa64 	.word	0x0802aa64
 80144c8:	080144e1 	.word	0x080144e1

080144cc <_ZN15Screen3ViewBase11setupScreenEv>:

void Screen3ViewBase::setupScreen()
{
 80144cc:	b480      	push	{r7}
 80144ce:	b083      	sub	sp, #12
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]

}
 80144d4:	bf00      	nop
 80144d6:	370c      	adds	r7, #12
 80144d8:	46bd      	mov	sp, r7
 80144da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144de:	4770      	bx	lr

080144e0 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen3ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b082      	sub	sp, #8
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	33a0      	adds	r3, #160	; 0xa0
 80144ee:	683a      	ldr	r2, [r7, #0]
 80144f0:	429a      	cmp	r2, r3
 80144f2:	d106      	bne.n	8014502 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to screen
        //Go to screen with no screen transition
        application().gotoscreenScreenNoTransition();
 80144f4:	6878      	ldr	r0, [r7, #4]
 80144f6:	f7ff fe78 	bl	80141ea <_ZN15Screen3ViewBase11applicationEv>
 80144fa:	4603      	mov	r3, r0
 80144fc:	4618      	mov	r0, r3
 80144fe:	f7fb fcfd 	bl	800fefc <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
}
 8014502:	bf00      	nop
 8014504:	3708      	adds	r7, #8
 8014506:	46bd      	mov	sp, r7
 8014508:	bd80      	pop	{r7, pc}
	...

0801450c <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>:
    View()
 801450c:	b580      	push	{r7, lr}
 801450e:	b082      	sub	sp, #8
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	4618      	mov	r0, r3
 8014518:	f008 fdea 	bl	801d0f0 <_ZN8touchgfx6ScreenC1Ev>
 801451c:	4a05      	ldr	r2, [pc, #20]	; (8014534 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev+0x28>)
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	601a      	str	r2, [r3, #0]
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	2200      	movs	r2, #0
 8014526:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	4618      	mov	r0, r3
 801452c:	3708      	adds	r7, #8
 801452e:	46bd      	mov	sp, r7
 8014530:	bd80      	pop	{r7, pc}
 8014532:	bf00      	nop
 8014534:	0802aab0 	.word	0x0802aab0

08014538 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8014538:	b580      	push	{r7, lr}
 801453a:	b084      	sub	sp, #16
 801453c:	af00      	add	r7, sp, #0
 801453e:	60f8      	str	r0, [r7, #12]
 8014540:	60b9      	str	r1, [r7, #8]
 8014542:	4639      	mov	r1, r7
 8014544:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	4618      	mov	r0, r3
 801454c:	f7fe fc32 	bl	8012db4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8014550:	4a08      	ldr	r2, [pc, #32]	; (8014574 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	68ba      	ldr	r2, [r7, #8]
 801455a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	3308      	adds	r3, #8
 8014560:	463a      	mov	r2, r7
 8014562:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014566:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	4618      	mov	r0, r3
 801456e:	3710      	adds	r7, #16
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}
 8014574:	0802aa98 	.word	0x0802aa98

08014578 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	4a05      	ldr	r2, [pc, #20]	; (8014598 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	601a      	str	r2, [r3, #0]
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	4618      	mov	r0, r3
 801458a:	f7fe fc71 	bl	8012e70 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	4618      	mov	r0, r3
 8014592:	3708      	adds	r7, #8
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}
 8014598:	0802aa98 	.word	0x0802aa98

0801459c <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 801459c:	b580      	push	{r7, lr}
 801459e:	b082      	sub	sp, #8
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
 80145a4:	6878      	ldr	r0, [r7, #4]
 80145a6:	f7ff ffe7 	bl	8014578 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80145aa:	2110      	movs	r1, #16
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f013 ff3d 	bl	802842c <_ZdlPvj>
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	4618      	mov	r0, r3
 80145b6:	3708      	adds	r7, #8
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bd80      	pop	{r7, pc}

080145bc <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
{
/**
 * An abstract class for progress indicators that need a horizontal or vertical direction to be
 * specified.
 */
class AbstractDirectionProgress : public AbstractProgressIndicator
 80145bc:	b580      	push	{r7, lr}
 80145be:	b082      	sub	sp, #8
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	4a05      	ldr	r2, [pc, #20]	; (80145dc <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x20>)
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	601a      	str	r2, [r3, #0]
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	4618      	mov	r0, r3
 80145ce:	f7ff fc13 	bl	8013df8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	4618      	mov	r0, r3
 80145d6:	3708      	adds	r7, #8
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}
 80145dc:	0802b718 	.word	0x0802b718

080145e0 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b082      	sub	sp, #8
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f7ff ffe7 	bl	80145bc <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80145ee:	2190      	movs	r1, #144	; 0x90
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	f013 ff1b 	bl	802842c <_ZdlPvj>
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	4618      	mov	r0, r3
 80145fa:	3708      	adds	r7, #8
 80145fc:	46bd      	mov	sp, r7
 80145fe:	bd80      	pop	{r7, pc}

08014600 <_ZN8touchgfx11BoxProgressD1Ev>:
/**
 * A BoxProgress which shows the current progress using a simple Box. It is possible to set the
 * color and the alpha of the box. It is also possible to control in what direction the
 * box will progress (up, down, to the left or to the right).
 */
class BoxProgress : public AbstractDirectionProgress
 8014600:	b580      	push	{r7, lr}
 8014602:	b082      	sub	sp, #8
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
 8014608:	4a08      	ldr	r2, [pc, #32]	; (801462c <_ZN8touchgfx11BoxProgressD1Ev+0x2c>)
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	601a      	str	r2, [r3, #0]
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	3390      	adds	r3, #144	; 0x90
 8014612:	4618      	mov	r0, r3
 8014614:	f7fe fb94 	bl	8012d40 <_ZN8touchgfx3BoxD1Ev>
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	4618      	mov	r0, r3
 801461c:	f7ff ffce 	bl	80145bc <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	4618      	mov	r0, r3
 8014624:	3708      	adds	r7, #8
 8014626:	46bd      	mov	sp, r7
 8014628:	bd80      	pop	{r7, pc}
 801462a:	bf00      	nop
 801462c:	0802b640 	.word	0x0802b640

08014630 <_ZN8touchgfx11BoxProgressD0Ev>:
 8014630:	b580      	push	{r7, lr}
 8014632:	b082      	sub	sp, #8
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
 8014638:	6878      	ldr	r0, [r7, #4]
 801463a:	f7ff ffe1 	bl	8014600 <_ZN8touchgfx11BoxProgressD1Ev>
 801463e:	21c0      	movs	r1, #192	; 0xc0
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f013 fef3 	bl	802842c <_ZdlPvj>
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	4618      	mov	r0, r3
 801464a:	3708      	adds	r7, #8
 801464c:	46bd      	mov	sp, r7
 801464e:	bd80      	pop	{r7, pc}

08014650 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8014650:	b580      	push	{r7, lr}
 8014652:	b082      	sub	sp, #8
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	685b      	ldr	r3, [r3, #4]
 801465e:	687a      	ldr	r2, [r7, #4]
 8014660:	68d2      	ldr	r2, [r2, #12]
 8014662:	1052      	asrs	r2, r2, #1
 8014664:	1898      	adds	r0, r3, r2
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	68db      	ldr	r3, [r3, #12]
 801466a:	f003 0301 	and.w	r3, r3, #1
 801466e:	2b00      	cmp	r3, #0
 8014670:	d102      	bne.n	8014678 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	689b      	ldr	r3, [r3, #8]
 8014676:	e00a      	b.n	801468e <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	685b      	ldr	r3, [r3, #4]
 801467c:	687a      	ldr	r2, [r7, #4]
 801467e:	68d2      	ldr	r2, [r2, #12]
 8014680:	1052      	asrs	r2, r2, #1
 8014682:	4413      	add	r3, r2
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	687a      	ldr	r2, [r7, #4]
 8014688:	6892      	ldr	r2, [r2, #8]
 801468a:	4413      	add	r3, r2
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	6839      	ldr	r1, [r7, #0]
 8014690:	4798      	blx	r3
    }
 8014692:	bf00      	nop
 8014694:	3708      	adds	r7, #8
 8014696:	46bd      	mov	sp, r7
 8014698:	bd80      	pop	{r7, pc}

0801469a <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801469a:	b480      	push	{r7}
 801469c:	b083      	sub	sp, #12
 801469e:	af00      	add	r7, sp, #0
 80146a0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	685b      	ldr	r3, [r3, #4]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d010      	beq.n	80146cc <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	689b      	ldr	r3, [r3, #8]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d107      	bne.n	80146c2 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	68db      	ldr	r3, [r3, #12]
 80146b6:	f003 0301 	and.w	r3, r3, #1
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d101      	bne.n	80146c2 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80146be:	2301      	movs	r3, #1
 80146c0:	e000      	b.n	80146c4 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80146c2:	2300      	movs	r3, #0
 80146c4:	2b01      	cmp	r3, #1
 80146c6:	d001      	beq.n	80146cc <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80146c8:	2301      	movs	r3, #1
 80146ca:	e000      	b.n	80146ce <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80146cc:	2300      	movs	r3, #0
    }
 80146ce:	4618      	mov	r0, r3
 80146d0:	370c      	adds	r7, #12
 80146d2:	46bd      	mov	sp, r7
 80146d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d8:	4770      	bx	lr
	...

080146dc <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 80146dc:	b580      	push	{r7, lr}
 80146de:	b082      	sub	sp, #8
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	4a05      	ldr	r2, [pc, #20]	; (80146fc <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	601a      	str	r2, [r3, #0]
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	4618      	mov	r0, r3
 80146ee:	f7fd fc33 	bl	8011f58 <_ZN8touchgfx6ScreenD1Ev>
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	4618      	mov	r0, r3
 80146f6:	3708      	adds	r7, #8
 80146f8:	46bd      	mov	sp, r7
 80146fa:	bd80      	pop	{r7, pc}
 80146fc:	0802ab30 	.word	0x0802ab30

08014700 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8014700:	b580      	push	{r7, lr}
 8014702:	b082      	sub	sp, #8
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f7ff ffe7 	bl	80146dc <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 801470e:	2140      	movs	r1, #64	; 0x40
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	f013 fe8b 	bl	802842c <_ZdlPvj>
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	4618      	mov	r0, r3
 801471a:	3708      	adds	r7, #8
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}

08014720 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 8014720:	b580      	push	{r7, lr}
 8014722:	b082      	sub	sp, #8
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
 8014728:	4a13      	ldr	r2, [pc, #76]	; (8014778 <_ZN14screenViewBaseD1Ev+0x58>)
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	601a      	str	r2, [r3, #0]
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8014734:	4618      	mov	r0, r3
 8014736:	f000 fa1d 	bl	8014b74 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014740:	4618      	mov	r0, r3
 8014742:	f7fe fc81 	bl	8013048 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	33b8      	adds	r3, #184	; 0xb8
 801474a:	4618      	mov	r0, r3
 801474c:	f7fe fc7c 	bl	8013048 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	3370      	adds	r3, #112	; 0x70
 8014754:	4618      	mov	r0, r3
 8014756:	f7fe fc77 	bl	8013048 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	3340      	adds	r3, #64	; 0x40
 801475e:	4618      	mov	r0, r3
 8014760:	f7fe faee 	bl	8012d40 <_ZN8touchgfx3BoxD1Ev>
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	4618      	mov	r0, r3
 8014768:	f7ff ffb8 	bl	80146dc <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	4618      	mov	r0, r3
 8014770:	3708      	adds	r7, #8
 8014772:	46bd      	mov	sp, r7
 8014774:	bd80      	pop	{r7, pc}
 8014776:	bf00      	nop
 8014778:	0802aae4 	.word	0x0802aae4

0801477c <_ZN14screenViewBaseD0Ev>:
 801477c:	b580      	push	{r7, lr}
 801477e:	b082      	sub	sp, #8
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
 8014784:	6878      	ldr	r0, [r7, #4]
 8014786:	f7ff ffcb 	bl	8014720 <_ZN14screenViewBaseD1Ev>
 801478a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f013 fe4c 	bl	802842c <_ZdlPvj>
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	4618      	mov	r0, r3
 8014798:	3708      	adds	r7, #8
 801479a:	46bd      	mov	sp, r7
 801479c:	bd80      	pop	{r7, pc}

0801479e <_ZN14screenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 801479e:	b580      	push	{r7, lr}
 80147a0:	b082      	sub	sp, #8
 80147a2:	af00      	add	r7, sp, #0
 80147a4:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80147a6:	f007 fced 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 80147aa:	4603      	mov	r3, r0
    }
 80147ac:	4618      	mov	r0, r3
 80147ae:	3708      	adds	r7, #8
 80147b0:	46bd      	mov	sp, r7
 80147b2:	bd80      	pop	{r7, pc}

080147b4 <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

screenViewBase::screenViewBase() :
 80147b4:	b590      	push	{r4, r7, lr}
 80147b6:	b093      	sub	sp, #76	; 0x4c
 80147b8:	af02      	add	r7, sp, #8
 80147ba:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	4618      	mov	r0, r3
 80147c0:	f000 f9a2 	bl	8014b08 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 80147c4:	4ab1      	ldr	r2, [pc, #708]	; (8014a8c <_ZN14screenViewBaseC1Ev+0x2d8>)
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	601a      	str	r2, [r3, #0]
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	3340      	adds	r3, #64	; 0x40
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7fd fc66 	bl	80120a0 <_ZN8touchgfx3BoxC1Ev>
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	3370      	adds	r3, #112	; 0x70
 80147d8:	4618      	mov	r0, r3
 80147da:	f006 fc65 	bl	801b0a8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	33b8      	adds	r3, #184	; 0xb8
 80147e2:	4618      	mov	r0, r3
 80147e4:	f006 fc60 	bl	801b0a8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80147ee:	4618      	mov	r0, r3
 80147f0:	f006 fc5a 	bl	801b0a8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 80147fa:	4ba5      	ldr	r3, [pc, #660]	; (8014a90 <_ZN14screenViewBaseC1Ev+0x2dc>)
 80147fc:	60bb      	str	r3, [r7, #8]
 80147fe:	2300      	movs	r3, #0
 8014800:	60fb      	str	r3, [r7, #12]
 8014802:	f107 0308 	add.w	r3, r7, #8
 8014806:	cb0c      	ldmia	r3, {r2, r3}
 8014808:	6879      	ldr	r1, [r7, #4]
 801480a:	f000 f993 	bl	8014b34 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    box1.setPosition(0, 0, 480, 272);
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8014814:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014818:	9300      	str	r3, [sp, #0]
 801481a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801481e:	2200      	movs	r2, #0
 8014820:	2100      	movs	r1, #0
 8014822:	f7fb f85d 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801482c:	22ff      	movs	r2, #255	; 0xff
 801482e:	21ff      	movs	r1, #255	; 0xff
 8014830:	20ff      	movs	r0, #255	; 0xff
 8014832:	f7fd fcef 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014836:	4603      	mov	r3, r0
 8014838:	4619      	mov	r1, r3
 801483a:	4620      	mov	r0, r4
 801483c:	f7fd fc58 	bl	80120f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(155, 18);
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	3370      	adds	r3, #112	; 0x70
 8014844:	2212      	movs	r2, #18
 8014846:	219b      	movs	r1, #155	; 0x9b
 8014848:	4618      	mov	r0, r3
 801484a:	f7fb f8ae 	bl	800f9aa <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8014854:	f107 0310 	add.w	r3, r7, #16
 8014858:	2100      	movs	r1, #0
 801485a:	4618      	mov	r0, r3
 801485c:	f7fd fb5c 	bl	8011f18 <_ZN8touchgfx6BitmapC1Et>
 8014860:	f107 0314 	add.w	r3, r7, #20
 8014864:	2101      	movs	r1, #1
 8014866:	4618      	mov	r0, r3
 8014868:	f7fd fb56 	bl	8011f18 <_ZN8touchgfx6BitmapC1Et>
 801486c:	f107 0214 	add.w	r2, r7, #20
 8014870:	f107 0310 	add.w	r3, r7, #16
 8014874:	4619      	mov	r1, r3
 8014876:	4620      	mov	r0, r4
 8014878:	f006 f92e 	bl	801aad8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID1));
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8014882:	f107 0318 	add.w	r3, r7, #24
 8014886:	2100      	movs	r1, #0
 8014888:	4618      	mov	r0, r3
 801488a:	f7fd fdc5 	bl	8012418 <_ZN8touchgfx9TypedTextC1Et>
 801488e:	f107 0318 	add.w	r3, r7, #24
 8014892:	4619      	mov	r1, r3
 8014894:	4620      	mov	r0, r4
 8014896:	f7fd fde5 	bl	8012464 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 801489a:	f107 0318 	add.w	r3, r7, #24
 801489e:	4618      	mov	r0, r3
 80148a0:	f7fa fd04 	bl	800f2ac <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80148aa:	22ff      	movs	r2, #255	; 0xff
 80148ac:	21ff      	movs	r1, #255	; 0xff
 80148ae:	20ff      	movs	r0, #255	; 0xff
 80148b0:	f7fd fcb0 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80148b4:	4603      	mov	r3, r0
 80148b6:	4619      	mov	r1, r3
 80148b8:	4620      	mov	r0, r4
 80148ba:	f7fd fde5 	bl	8012488 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80148c4:	22ff      	movs	r2, #255	; 0xff
 80148c6:	21ff      	movs	r1, #255	; 0xff
 80148c8:	20ff      	movs	r0, #255	; 0xff
 80148ca:	f7fd fca3 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80148ce:	4603      	mov	r3, r0
 80148d0:	4619      	mov	r1, r3
 80148d2:	4620      	mov	r0, r4
 80148d4:	f7fd fde6 	bl	80124a4 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80148e4:	4619      	mov	r1, r3
 80148e6:	4610      	mov	r0, r2
 80148e8:	f7fd fba9 	bl	801203e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel2.setXY(155, 106);
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	33b8      	adds	r3, #184	; 0xb8
 80148f0:	226a      	movs	r2, #106	; 0x6a
 80148f2:	219b      	movs	r1, #155	; 0x9b
 80148f4:	4618      	mov	r0, r3
 80148f6:	f7fb f858 	bl	800f9aa <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8014900:	f107 0320 	add.w	r3, r7, #32
 8014904:	2100      	movs	r1, #0
 8014906:	4618      	mov	r0, r3
 8014908:	f7fd fb06 	bl	8011f18 <_ZN8touchgfx6BitmapC1Et>
 801490c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014910:	2101      	movs	r1, #1
 8014912:	4618      	mov	r0, r3
 8014914:	f7fd fb00 	bl	8011f18 <_ZN8touchgfx6BitmapC1Et>
 8014918:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801491c:	f107 0320 	add.w	r3, r7, #32
 8014920:	4619      	mov	r1, r3
 8014922:	4620      	mov	r0, r4
 8014924:	f006 f8d8 	bl	801aad8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel2.setLabelText(touchgfx::TypedText(T_SINGLEUSEID2));
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 801492e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014932:	2101      	movs	r1, #1
 8014934:	4618      	mov	r0, r3
 8014936:	f7fd fd6f 	bl	8012418 <_ZN8touchgfx9TypedTextC1Et>
 801493a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801493e:	4619      	mov	r1, r3
 8014940:	4620      	mov	r0, r4
 8014942:	f7fd fd8f 	bl	8012464 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8014946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801494a:	4618      	mov	r0, r3
 801494c:	f7fa fcae 	bl	800f2ac <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel2.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8014956:	22ff      	movs	r2, #255	; 0xff
 8014958:	21ff      	movs	r1, #255	; 0xff
 801495a:	20ff      	movs	r0, #255	; 0xff
 801495c:	f7fd fc5a 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014960:	4603      	mov	r3, r0
 8014962:	4619      	mov	r1, r3
 8014964:	4620      	mov	r0, r4
 8014966:	f7fd fd8f 	bl	8012488 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel2.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8014970:	22ff      	movs	r2, #255	; 0xff
 8014972:	21ff      	movs	r1, #255	; 0xff
 8014974:	20ff      	movs	r0, #255	; 0xff
 8014976:	f7fd fc4d 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801497a:	4603      	mov	r3, r0
 801497c:	4619      	mov	r1, r3
 801497e:	4620      	mov	r0, r4
 8014980:	f7fd fd90 	bl	80124a4 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel2.setAction(buttonCallback);
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8014990:	4619      	mov	r1, r3
 8014992:	4610      	mov	r0, r2
 8014994:	f7fd fb53 	bl	801203e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel3.setXY(155, 197);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801499e:	22c5      	movs	r2, #197	; 0xc5
 80149a0:	219b      	movs	r1, #155	; 0x9b
 80149a2:	4618      	mov	r0, r3
 80149a4:	f7fb f801 	bl	800f9aa <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel3.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80149ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80149b2:	2100      	movs	r1, #0
 80149b4:	4618      	mov	r0, r3
 80149b6:	f7fd faaf 	bl	8011f18 <_ZN8touchgfx6BitmapC1Et>
 80149ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80149be:	2101      	movs	r1, #1
 80149c0:	4618      	mov	r0, r3
 80149c2:	f7fd faa9 	bl	8011f18 <_ZN8touchgfx6BitmapC1Et>
 80149c6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80149ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80149ce:	4619      	mov	r1, r3
 80149d0:	4620      	mov	r0, r4
 80149d2:	f006 f881 	bl	801aad8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel3.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3));
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80149dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80149e0:	2102      	movs	r1, #2
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7fd fd18 	bl	8012418 <_ZN8touchgfx9TypedTextC1Et>
 80149e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80149ec:	4619      	mov	r1, r3
 80149ee:	4620      	mov	r0, r4
 80149f0:	f7fd fd38 	bl	8012464 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80149f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80149f8:	4618      	mov	r0, r3
 80149fa:	f7fa fc57 	bl	800f2ac <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel3.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8014a04:	22ff      	movs	r2, #255	; 0xff
 8014a06:	21ff      	movs	r1, #255	; 0xff
 8014a08:	20ff      	movs	r0, #255	; 0xff
 8014a0a:	f7fd fc03 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014a0e:	4603      	mov	r3, r0
 8014a10:	4619      	mov	r1, r3
 8014a12:	4620      	mov	r0, r4
 8014a14:	f7fd fd38 	bl	8012488 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel3.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8014a1e:	22ff      	movs	r2, #255	; 0xff
 8014a20:	21ff      	movs	r1, #255	; 0xff
 8014a22:	20ff      	movs	r0, #255	; 0xff
 8014a24:	f7fd fbf6 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014a28:	4603      	mov	r3, r0
 8014a2a:	4619      	mov	r1, r3
 8014a2c:	4620      	mov	r0, r4
 8014a2e:	f7fd fd39 	bl	80124a4 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel3.setAction(buttonCallback);
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8014a3e:	4619      	mov	r1, r3
 8014a40:	4610      	mov	r0, r2
 8014a42:	f7fd fafc 	bl	801203e <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 8014a46:	687a      	ldr	r2, [r7, #4]
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	3340      	adds	r3, #64	; 0x40
 8014a4c:	4619      	mov	r1, r3
 8014a4e:	4610      	mov	r0, r2
 8014a50:	f7fd fada 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8014a54:	687a      	ldr	r2, [r7, #4]
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	3370      	adds	r3, #112	; 0x70
 8014a5a:	4619      	mov	r1, r3
 8014a5c:	4610      	mov	r0, r2
 8014a5e:	f7fd fad3 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel2);
 8014a62:	687a      	ldr	r2, [r7, #4]
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	33b8      	adds	r3, #184	; 0xb8
 8014a68:	4619      	mov	r1, r3
 8014a6a:	4610      	mov	r0, r2
 8014a6c:	f7fd facc 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel3);
 8014a70:	687a      	ldr	r2, [r7, #4]
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014a78:	4619      	mov	r1, r3
 8014a7a:	4610      	mov	r0, r2
 8014a7c:	f7fd fac4 	bl	8012008 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	4618      	mov	r0, r3
 8014a84:	3744      	adds	r7, #68	; 0x44
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bd90      	pop	{r4, r7, pc}
 8014a8a:	bf00      	nop
 8014a8c:	0802aae4 	.word	0x0802aae4
 8014a90:	08014aa9 	.word	0x08014aa9

08014a94 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8014a94:	b480      	push	{r7}
 8014a96:	b083      	sub	sp, #12
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]

}
 8014a9c:	bf00      	nop
 8014a9e:	370c      	adds	r7, #12
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa6:	4770      	bx	lr

08014aa8 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b082      	sub	sp, #8
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
 8014ab0:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	3370      	adds	r3, #112	; 0x70
 8014ab6:	683a      	ldr	r2, [r7, #0]
 8014ab8:	429a      	cmp	r2, r3
 8014aba:	d107      	bne.n	8014acc <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Pong
        //Go to Pong with screen transition towards East
        application().gotoPongScreenCoverTransitionEast();
 8014abc:	6878      	ldr	r0, [r7, #4]
 8014abe:	f7ff fe6e 	bl	801479e <_ZN14screenViewBase11applicationEv>
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	f7fb fb31 	bl	801012c <_ZN23FrontendApplicationBase33gotoPongScreenCoverTransitionEastEv>
        //Interaction3
        //When buttonWithLabel3 clicked change screen to Screen3
        //Go to Screen3 with no screen transition
        application().gotoScreen3ScreenNoTransition();
    }
}
 8014aca:	e019      	b.n	8014b00 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &buttonWithLabel2)
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	33b8      	adds	r3, #184	; 0xb8
 8014ad0:	683a      	ldr	r2, [r7, #0]
 8014ad2:	429a      	cmp	r2, r3
 8014ad4:	d107      	bne.n	8014ae6 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
        application().gotoScreen2ScreenNoTransition();
 8014ad6:	6878      	ldr	r0, [r7, #4]
 8014ad8:	f7ff fe61 	bl	801479e <_ZN14screenViewBase11applicationEv>
 8014adc:	4603      	mov	r3, r0
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f7fb fa98 	bl	8010014 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
}
 8014ae4:	e00c      	b.n	8014b00 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &buttonWithLabel3)
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014aec:	683a      	ldr	r2, [r7, #0]
 8014aee:	429a      	cmp	r2, r3
 8014af0:	d106      	bne.n	8014b00 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        application().gotoScreen3ScreenNoTransition();
 8014af2:	6878      	ldr	r0, [r7, #4]
 8014af4:	f7ff fe53 	bl	801479e <_ZN14screenViewBase11applicationEv>
 8014af8:	4603      	mov	r3, r0
 8014afa:	4618      	mov	r0, r3
 8014afc:	f7fb fad0 	bl	80100a0 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>
}
 8014b00:	bf00      	nop
 8014b02:	3708      	adds	r7, #8
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}

08014b08 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b082      	sub	sp, #8
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	4618      	mov	r0, r3
 8014b14:	f008 faec 	bl	801d0f0 <_ZN8touchgfx6ScreenC1Ev>
 8014b18:	4a05      	ldr	r2, [pc, #20]	; (8014b30 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	601a      	str	r2, [r3, #0]
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	2200      	movs	r2, #0
 8014b22:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	4618      	mov	r0, r3
 8014b28:	3708      	adds	r7, #8
 8014b2a:	46bd      	mov	sp, r7
 8014b2c:	bd80      	pop	{r7, pc}
 8014b2e:	bf00      	nop
 8014b30:	0802ab30 	.word	0x0802ab30

08014b34 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b084      	sub	sp, #16
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	60f8      	str	r0, [r7, #12]
 8014b3c:	60b9      	str	r1, [r7, #8]
 8014b3e:	4639      	mov	r1, r7
 8014b40:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	4618      	mov	r0, r3
 8014b48:	f7fe f934 	bl	8012db4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8014b4c:	4a08      	ldr	r2, [pc, #32]	; (8014b70 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	68ba      	ldr	r2, [r7, #8]
 8014b56:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	3308      	adds	r3, #8
 8014b5c:	463a      	mov	r2, r7
 8014b5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014b62:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	4618      	mov	r0, r3
 8014b6a:	3710      	adds	r7, #16
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	bd80      	pop	{r7, pc}
 8014b70:	0802ab18 	.word	0x0802ab18

08014b74 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b082      	sub	sp, #8
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
 8014b7c:	4a05      	ldr	r2, [pc, #20]	; (8014b94 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	601a      	str	r2, [r3, #0]
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	4618      	mov	r0, r3
 8014b86:	f7fe f973 	bl	8012e70 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	3708      	adds	r7, #8
 8014b90:	46bd      	mov	sp, r7
 8014b92:	bd80      	pop	{r7, pc}
 8014b94:	0802ab18 	.word	0x0802ab18

08014b98 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b082      	sub	sp, #8
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
 8014ba0:	6878      	ldr	r0, [r7, #4]
 8014ba2:	f7ff ffe7 	bl	8014b74 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8014ba6:	2110      	movs	r1, #16
 8014ba8:	6878      	ldr	r0, [r7, #4]
 8014baa:	f013 fc3f 	bl	802842c <_ZdlPvj>
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	3708      	adds	r7, #8
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}

08014bb8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b082      	sub	sp, #8
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
 8014bc0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	685b      	ldr	r3, [r3, #4]
 8014bc6:	687a      	ldr	r2, [r7, #4]
 8014bc8:	68d2      	ldr	r2, [r2, #12]
 8014bca:	1052      	asrs	r2, r2, #1
 8014bcc:	1898      	adds	r0, r3, r2
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	68db      	ldr	r3, [r3, #12]
 8014bd2:	f003 0301 	and.w	r3, r3, #1
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d102      	bne.n	8014be0 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	689b      	ldr	r3, [r3, #8]
 8014bde:	e00a      	b.n	8014bf6 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	685b      	ldr	r3, [r3, #4]
 8014be4:	687a      	ldr	r2, [r7, #4]
 8014be6:	68d2      	ldr	r2, [r2, #12]
 8014be8:	1052      	asrs	r2, r2, #1
 8014bea:	4413      	add	r3, r2
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	687a      	ldr	r2, [r7, #4]
 8014bf0:	6892      	ldr	r2, [r2, #8]
 8014bf2:	4413      	add	r3, r2
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	6839      	ldr	r1, [r7, #0]
 8014bf8:	4798      	blx	r3
    }
 8014bfa:	bf00      	nop
 8014bfc:	3708      	adds	r7, #8
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}

08014c02 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8014c02:	b480      	push	{r7}
 8014c04:	b083      	sub	sp, #12
 8014c06:	af00      	add	r7, sp, #0
 8014c08:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	685b      	ldr	r3, [r3, #4]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d010      	beq.n	8014c34 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	689b      	ldr	r3, [r3, #8]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d107      	bne.n	8014c2a <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	68db      	ldr	r3, [r3, #12]
 8014c1e:	f003 0301 	and.w	r3, r3, #1
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d101      	bne.n	8014c2a <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8014c26:	2301      	movs	r3, #1
 8014c28:	e000      	b.n	8014c2c <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8014c2a:	2300      	movs	r3, #0
 8014c2c:	2b01      	cmp	r3, #1
 8014c2e:	d001      	beq.n	8014c34 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8014c30:	2301      	movs	r3, #1
 8014c32:	e000      	b.n	8014c36 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8014c34:	2300      	movs	r3, #0
    }
 8014c36:	4618      	mov	r0, r3
 8014c38:	370c      	adds	r7, #12
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c40:	4770      	bx	lr
	...

08014c44 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8014c44:	b480      	push	{r7}
 8014c46:	af00      	add	r7, sp, #0
    return bitmap_database;
 8014c48:	4b02      	ldr	r3, [pc, #8]	; (8014c54 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c52:	4770      	bx	lr
 8014c54:	0802ab5c 	.word	0x0802ab5c

08014c58 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8014c58:	b480      	push	{r7}
 8014c5a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8014c5c:	2307      	movs	r3, #7
}
 8014c5e:	4618      	mov	r0, r3
 8014c60:	46bd      	mov	sp, r7
 8014c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c66:	4770      	bx	lr

08014c68 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8014c68:	b480      	push	{r7}
 8014c6a:	b085      	sub	sp, #20
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	60f8      	str	r0, [r7, #12]
 8014c70:	460b      	mov	r3, r1
 8014c72:	607a      	str	r2, [r7, #4]
 8014c74:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8014c76:	2300      	movs	r3, #0
    }
 8014c78:	4618      	mov	r0, r3
 8014c7a:	3714      	adds	r7, #20
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c82:	4770      	bx	lr

08014c84 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8014c84:	b480      	push	{r7}
 8014c86:	b083      	sub	sp, #12
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8014c8c:	2300      	movs	r3, #0
    }
 8014c8e:	4618      	mov	r0, r3
 8014c90:	370c      	adds	r7, #12
 8014c92:	46bd      	mov	sp, r7
 8014c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c98:	4770      	bx	lr
	...

08014c9c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8014c9c:	b480      	push	{r7}
 8014c9e:	b085      	sub	sp, #20
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	60f8      	str	r0, [r7, #12]
 8014ca4:	60b9      	str	r1, [r7, #8]
 8014ca6:	4613      	mov	r3, r2
 8014ca8:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8014caa:	4a07      	ldr	r2, [pc, #28]	; (8014cc8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	6013      	str	r3, [r2, #0]
        fonts = f;
 8014cb0:	4a06      	ldr	r2, [pc, #24]	; (8014ccc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8014cb2:	68bb      	ldr	r3, [r7, #8]
 8014cb4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8014cb6:	4a06      	ldr	r2, [pc, #24]	; (8014cd0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8014cb8:	88fb      	ldrh	r3, [r7, #6]
 8014cba:	8013      	strh	r3, [r2, #0]
    }
 8014cbc:	bf00      	nop
 8014cbe:	3714      	adds	r7, #20
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc6:	4770      	bx	lr
 8014cc8:	2000b4ac 	.word	0x2000b4ac
 8014ccc:	2000b4b4 	.word	0x2000b4b4
 8014cd0:	2000b4b0 	.word	0x2000b4b0

08014cd4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8014cd4:	b40e      	push	{r1, r2, r3}
 8014cd6:	b580      	push	{r7, lr}
 8014cd8:	b085      	sub	sp, #20
 8014cda:	af00      	add	r7, sp, #0
 8014cdc:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8014cde:	f107 0320 	add.w	r3, r7, #32
 8014ce2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	69fa      	ldr	r2, [r7, #28]
 8014ce8:	2100      	movs	r1, #0
 8014cea:	6878      	ldr	r0, [r7, #4]
 8014cec:	f007 fd62 	bl	801c7b4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8014cf0:	4603      	mov	r3, r0
 8014cf2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8014cf4:	89fb      	ldrh	r3, [r7, #14]
}
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	3714      	adds	r7, #20
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014d00:	b003      	add	sp, #12
 8014d02:	4770      	bx	lr

08014d04 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8014d04:	b40c      	push	{r2, r3}
 8014d06:	b580      	push	{r7, lr}
 8014d08:	b084      	sub	sp, #16
 8014d0a:	af00      	add	r7, sp, #0
 8014d0c:	6078      	str	r0, [r7, #4]
 8014d0e:	460b      	mov	r3, r1
 8014d10:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8014d12:	f107 031c 	add.w	r3, r7, #28
 8014d16:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8014d18:	78f9      	ldrb	r1, [r7, #3]
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	69ba      	ldr	r2, [r7, #24]
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f007 fd48 	bl	801c7b4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8014d24:	4603      	mov	r3, r0
 8014d26:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8014d28:	89fb      	ldrh	r3, [r7, #14]
}
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	3710      	adds	r7, #16
 8014d2e:	46bd      	mov	sp, r7
 8014d30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014d34:	b002      	add	sp, #8
 8014d36:	4770      	bx	lr

08014d38 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b08a      	sub	sp, #40	; 0x28
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
 8014d40:	460b      	mov	r3, r1
 8014d42:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d016      	beq.n	8014d7a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	331a      	adds	r3, #26
 8014d50:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8014d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d54:	8adb      	ldrh	r3, [r3, #22]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d105      	bne.n	8014d66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8014d5a:	4b42      	ldr	r3, [pc, #264]	; (8014e64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 8014d5c:	4a42      	ldr	r2, [pc, #264]	; (8014e68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8014d5e:	21c0      	movs	r1, #192	; 0xc0
 8014d60:	4842      	ldr	r0, [pc, #264]	; (8014e6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014d62:	f013 fb8f 	bl	8028484 <__assert_func>
            return buffer[pos];
 8014d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d68:	8a9b      	ldrh	r3, [r3, #20]
 8014d6a:	461a      	mov	r2, r3
 8014d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d001      	beq.n	8014d7a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8014d76:	2301      	movs	r3, #1
 8014d78:	e000      	b.n	8014d7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d068      	beq.n	8014e52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
    {
        substituteGlyphs();
 8014d80:	6878      	ldr	r0, [r7, #4]
 8014d82:	f009 f8b9 	bl	801def8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	331a      	adds	r3, #26
 8014d8a:	623b      	str	r3, [r7, #32]
 8014d8c:	2301      	movs	r3, #1
 8014d8e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8014d90:	6a3b      	ldr	r3, [r7, #32]
 8014d92:	8adb      	ldrh	r3, [r3, #22]
 8014d94:	8bfa      	ldrh	r2, [r7, #30]
 8014d96:	429a      	cmp	r2, r3
 8014d98:	d305      	bcc.n	8014da6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8014d9a:	4b35      	ldr	r3, [pc, #212]	; (8014e70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8014d9c:	4a35      	ldr	r2, [pc, #212]	; (8014e74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8014d9e:	21c5      	movs	r1, #197	; 0xc5
 8014da0:	4832      	ldr	r0, [pc, #200]	; (8014e6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014da2:	f013 fb6f 	bl	8028484 <__assert_func>
            const uint16_t index = pos + offset;
 8014da6:	6a3b      	ldr	r3, [r7, #32]
 8014da8:	8a9a      	ldrh	r2, [r3, #20]
 8014daa:	8bfb      	ldrh	r3, [r7, #30]
 8014dac:	4413      	add	r3, r2
 8014dae:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8014db0:	8bbb      	ldrh	r3, [r7, #28]
 8014db2:	2b09      	cmp	r3, #9
 8014db4:	d801      	bhi.n	8014dba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8014db6:	8bbb      	ldrh	r3, [r7, #28]
 8014db8:	e001      	b.n	8014dbe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8014dba:	8bbb      	ldrh	r3, [r7, #28]
 8014dbc:	3b0a      	subs	r3, #10
 8014dbe:	6a3a      	ldr	r2, [r7, #32]
 8014dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014dc4:	f640 123f 	movw	r2, #2367	; 0x93f
 8014dc8:	4293      	cmp	r3, r2
 8014dca:	bf0c      	ite	eq
 8014dcc:	2301      	moveq	r3, #1
 8014dce:	2300      	movne	r3, #0
 8014dd0:	b2db      	uxtb	r3, r3
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d03d      	beq.n	8014e52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	331a      	adds	r3, #26
 8014dda:	687a      	ldr	r2, [r7, #4]
 8014ddc:	321a      	adds	r2, #26
 8014dde:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8014de0:	68ba      	ldr	r2, [r7, #8]
 8014de2:	8ad2      	ldrh	r2, [r2, #22]
 8014de4:	2a00      	cmp	r2, #0
 8014de6:	d105      	bne.n	8014df4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8014de8:	4b1e      	ldr	r3, [pc, #120]	; (8014e64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 8014dea:	4a1f      	ldr	r2, [pc, #124]	; (8014e68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8014dec:	21c0      	movs	r1, #192	; 0xc0
 8014dee:	481f      	ldr	r0, [pc, #124]	; (8014e6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014df0:	f013 fb48 	bl	8028484 <__assert_func>
            return buffer[pos];
 8014df4:	68ba      	ldr	r2, [r7, #8]
 8014df6:	8a92      	ldrh	r2, [r2, #20]
 8014df8:	4611      	mov	r1, r2
 8014dfa:	68ba      	ldr	r2, [r7, #8]
 8014dfc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8014e00:	613b      	str	r3, [r7, #16]
 8014e02:	4613      	mov	r3, r2
 8014e04:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8014e06:	693b      	ldr	r3, [r7, #16]
 8014e08:	8adb      	ldrh	r3, [r3, #22]
 8014e0a:	2b01      	cmp	r3, #1
 8014e0c:	d806      	bhi.n	8014e1c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8014e0e:	4b1a      	ldr	r3, [pc, #104]	; (8014e78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8014e10:	4a1a      	ldr	r2, [pc, #104]	; (8014e7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8014e12:	f240 110d 	movw	r1, #269	; 0x10d
 8014e16:	4815      	ldr	r0, [pc, #84]	; (8014e6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014e18:	f013 fb34 	bl	8028484 <__assert_func>
            const uint16_t index = pos + 1;
 8014e1c:	693b      	ldr	r3, [r7, #16]
 8014e1e:	8a9b      	ldrh	r3, [r3, #20]
 8014e20:	3301      	adds	r3, #1
 8014e22:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8014e24:	89bb      	ldrh	r3, [r7, #12]
 8014e26:	2b09      	cmp	r3, #9
 8014e28:	d801      	bhi.n	8014e2e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8014e2a:	89bb      	ldrh	r3, [r7, #12]
 8014e2c:	e000      	b.n	8014e30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8014e2e:	2300      	movs	r3, #0
 8014e30:	693a      	ldr	r2, [r7, #16]
 8014e32:	89f9      	ldrh	r1, [r7, #14]
 8014e34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            nextCharacters.replaceAt0(0x093F);
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	331a      	adds	r3, #26
 8014e3c:	61bb      	str	r3, [r7, #24]
 8014e3e:	f640 133f 	movw	r3, #2367	; 0x93f
 8014e42:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8014e44:	69bb      	ldr	r3, [r7, #24]
 8014e46:	8a9b      	ldrh	r3, [r3, #20]
 8014e48:	4619      	mov	r1, r3
 8014e4a:	69bb      	ldr	r3, [r7, #24]
 8014e4c:	8afa      	ldrh	r2, [r7, #22]
 8014e4e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
    }
    return getNextChar();
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f008 ff34 	bl	801dcc0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014e58:	4603      	mov	r3, r0
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	3728      	adds	r7, #40	; 0x28
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}
 8014e62:	bf00      	nop
 8014e64:	08029b80 	.word	0x08029b80
 8014e68:	0802ad0c 	.word	0x0802ad0c
 8014e6c:	08029b8c 	.word	0x08029b8c
 8014e70:	08029bd4 	.word	0x08029bd4
 8014e74:	0802ac38 	.word	0x0802ac38
 8014e78:	08029be4 	.word	0x08029be4
 8014e7c:	0802adb8 	.word	0x0802adb8

08014e80 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b082      	sub	sp, #8
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8014e88:	6878      	ldr	r0, [r7, #4]
 8014e8a:	f008 fed3 	bl	801dc34 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8014e8e:	bf00      	nop
 8014e90:	3708      	adds	r7, #8
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}

08014e96 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8014e96:	b580      	push	{r7, lr}
 8014e98:	b088      	sub	sp, #32
 8014e9a:	af02      	add	r7, sp, #8
 8014e9c:	60f8      	str	r0, [r7, #12]
 8014e9e:	1d38      	adds	r0, r7, #4
 8014ea0:	e880 0006 	stmia.w	r0, {r1, r2}
 8014ea4:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8014ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014eaa:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8014eac:	1d39      	adds	r1, r7, #4
 8014eae:	697b      	ldr	r3, [r7, #20]
 8014eb0:	9301      	str	r3, [sp, #4]
 8014eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eb4:	9300      	str	r3, [sp, #0]
 8014eb6:	6a3b      	ldr	r3, [r7, #32]
 8014eb8:	683a      	ldr	r2, [r7, #0]
 8014eba:	68f8      	ldr	r0, [r7, #12]
 8014ebc:	f006 fdc3 	bl	801ba46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8014ec0:	bf00      	nop
 8014ec2:	3718      	adds	r7, #24
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	bd80      	pop	{r7, pc}

08014ec8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8014ec8:	b590      	push	{r4, r7, lr}
 8014eca:	b085      	sub	sp, #20
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	4603      	mov	r3, r0
 8014ed0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8014ed6:	88fb      	ldrh	r3, [r7, #6]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d127      	bne.n	8014f2c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8014edc:	88fb      	ldrh	r3, [r7, #6]
 8014ede:	4a1e      	ldr	r2, [pc, #120]	; (8014f58 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d016      	beq.n	8014f16 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8014ee8:	88fb      	ldrh	r3, [r7, #6]
 8014eea:	4a1b      	ldr	r2, [pc, #108]	; (8014f58 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ef0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8014ef2:	68bb      	ldr	r3, [r7, #8]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	68ba      	ldr	r2, [r7, #8]
 8014ef8:	4413      	add	r3, r2
 8014efa:	4a18      	ldr	r2, [pc, #96]	; (8014f5c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014efc:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8014efe:	68bb      	ldr	r3, [r7, #8]
 8014f00:	685b      	ldr	r3, [r3, #4]
 8014f02:	68ba      	ldr	r2, [r7, #8]
 8014f04:	4413      	add	r3, r2
 8014f06:	4a16      	ldr	r2, [pc, #88]	; (8014f60 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8014f08:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8014f0a:	68bb      	ldr	r3, [r7, #8]
 8014f0c:	689b      	ldr	r3, [r3, #8]
 8014f0e:	68ba      	ldr	r2, [r7, #8]
 8014f10:	4413      	add	r3, r2
 8014f12:	60fb      	str	r3, [r7, #12]
 8014f14:	e00a      	b.n	8014f2c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8014f16:	4b11      	ldr	r3, [pc, #68]	; (8014f5c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014f18:	4a12      	ldr	r2, [pc, #72]	; (8014f64 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8014f1a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8014f1c:	4a12      	ldr	r2, [pc, #72]	; (8014f68 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8014f1e:	4b10      	ldr	r3, [pc, #64]	; (8014f60 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8014f20:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8014f22:	88fb      	ldrh	r3, [r7, #6]
 8014f24:	4a11      	ldr	r2, [pc, #68]	; (8014f6c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8014f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014f2a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d00d      	beq.n	8014f4e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8014f32:	4a0f      	ldr	r2, [pc, #60]	; (8014f70 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8014f34:	88fb      	ldrh	r3, [r7, #6]
 8014f36:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8014f38:	f000 f83e 	bl	8014fb8 <_ZN17TypedTextDatabase8getFontsEv>
 8014f3c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8014f3e:	f000 f833 	bl	8014fa8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8014f42:	4603      	mov	r3, r0
 8014f44:	461a      	mov	r2, r3
 8014f46:	4621      	mov	r1, r4
 8014f48:	68f8      	ldr	r0, [r7, #12]
 8014f4a:	f7ff fea7 	bl	8014c9c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8014f4e:	bf00      	nop
 8014f50:	3714      	adds	r7, #20
 8014f52:	46bd      	mov	sp, r7
 8014f54:	bd90      	pop	{r4, r7, pc}
 8014f56:	bf00      	nop
 8014f58:	200085b4 	.word	0x200085b4
 8014f5c:	200085bc 	.word	0x200085bc
 8014f60:	200085c0 	.word	0x200085c0
 8014f64:	080c25e8 	.word	0x080c25e8
 8014f68:	080c25a0 	.word	0x080c25a0
 8014f6c:	080c267c 	.word	0x080c267c
 8014f70:	200085b8 	.word	0x200085b8

08014f74 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8014f74:	b480      	push	{r7}
 8014f76:	b083      	sub	sp, #12
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]
 8014f7c:	460b      	mov	r3, r1
 8014f7e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8014f80:	4b07      	ldr	r3, [pc, #28]	; (8014fa0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8014f82:	681a      	ldr	r2, [r3, #0]
 8014f84:	4b07      	ldr	r3, [pc, #28]	; (8014fa4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8014f86:	6819      	ldr	r1, [r3, #0]
 8014f88:	887b      	ldrh	r3, [r7, #2]
 8014f8a:	009b      	lsls	r3, r3, #2
 8014f8c:	440b      	add	r3, r1
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	005b      	lsls	r3, r3, #1
 8014f92:	4413      	add	r3, r2
}
 8014f94:	4618      	mov	r0, r3
 8014f96:	370c      	adds	r7, #12
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9e:	4770      	bx	lr
 8014fa0:	200085bc 	.word	0x200085bc
 8014fa4:	200085c0 	.word	0x200085c0

08014fa8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8014fa8:	b480      	push	{r7}
 8014faa:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8014fac:	2312      	movs	r3, #18
}
 8014fae:	4618      	mov	r0, r3
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb6:	4770      	bx	lr

08014fb8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8014fb8:	b480      	push	{r7}
 8014fba:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8014fbc:	4b02      	ldr	r3, [pc, #8]	; (8014fc8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc6:	4770      	bx	lr
 8014fc8:	200085c4 	.word	0x200085c4

08014fcc <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b082      	sub	sp, #8
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
 8014fd4:	6039      	str	r1, [r7, #0]
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	2b01      	cmp	r3, #1
 8014fda:	d113      	bne.n	8015004 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8014fdc:	683b      	ldr	r3, [r7, #0]
 8014fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014fe2:	4293      	cmp	r3, r2
 8014fe4:	d10e      	bne.n	8015004 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8014fe6:	f7fa fa6d 	bl	800f4c4 <_Z23getFont_verdana_20_4bppv>
 8014fea:	4602      	mov	r2, r0
};
 8014fec:	4b07      	ldr	r3, [pc, #28]	; (801500c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8014fee:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 8014ff0:	f7fa faaa 	bl	800f548 <_Z23getFont_verdana_40_4bppv>
 8014ff4:	4602      	mov	r2, r0
};
 8014ff6:	4b05      	ldr	r3, [pc, #20]	; (801500c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8014ff8:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 8014ffa:	f7fa fa21 	bl	800f440 <_Z23getFont_verdana_10_4bppv>
 8014ffe:	4602      	mov	r2, r0
};
 8015000:	4b02      	ldr	r3, [pc, #8]	; (801500c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8015002:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 8015004:	bf00      	nop
 8015006:	3708      	adds	r7, #8
 8015008:	46bd      	mov	sp, r7
 801500a:	bd80      	pop	{r7, pc}
 801500c:	200085c4 	.word	0x200085c4

08015010 <_GLOBAL__sub_I_touchgfx_fonts>:
 8015010:	b580      	push	{r7, lr}
 8015012:	af00      	add	r7, sp, #0
 8015014:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015018:	2001      	movs	r0, #1
 801501a:	f7ff ffd7 	bl	8014fcc <_Z41__static_initialization_and_destruction_0ii>
 801501e:	bd80      	pop	{r7, pc}

08015020 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8015020:	b580      	push	{r7, lr}
 8015022:	b082      	sub	sp, #8
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
 8015028:	4a05      	ldr	r2, [pc, #20]	; (8015040 <_ZN19FrontendApplicationD1Ev+0x20>)
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	601a      	str	r2, [r3, #0]
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	4618      	mov	r0, r3
 8015032:	f7fa fe6b 	bl	800fd0c <_ZN23FrontendApplicationBaseD1Ev>
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	4618      	mov	r0, r3
 801503a:	3708      	adds	r7, #8
 801503c:	46bd      	mov	sp, r7
 801503e:	bd80      	pop	{r7, pc}
 8015040:	0802ae74 	.word	0x0802ae74

08015044 <_ZN19FrontendApplicationD0Ev>:
 8015044:	b580      	push	{r7, lr}
 8015046:	b082      	sub	sp, #8
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
 801504c:	6878      	ldr	r0, [r7, #4]
 801504e:	f7ff ffe7 	bl	8015020 <_ZN19FrontendApplicationD1Ev>
 8015052:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015056:	6878      	ldr	r0, [r7, #4]
 8015058:	f013 f9e8 	bl	802842c <_ZdlPvj>
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	4618      	mov	r0, r3
 8015060:	3708      	adds	r7, #8
 8015062:	46bd      	mov	sp, r7
 8015064:	bd80      	pop	{r7, pc}

08015066 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8015066:	b580      	push	{r7, lr}
 8015068:	b082      	sub	sp, #8
 801506a:	af00      	add	r7, sp, #0
 801506c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8015074:	4618      	mov	r0, r3
 8015076:	f000 f82d 	bl	80150d4 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	4618      	mov	r0, r3
 801507e:	f006 ffa9 	bl	801bfd4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8015082:	bf00      	nop
 8015084:	3708      	adds	r7, #8
 8015086:	46bd      	mov	sp, r7
 8015088:	bd80      	pop	{r7, pc}
	...

0801508c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 801508c:	b580      	push	{r7, lr}
 801508e:	b084      	sub	sp, #16
 8015090:	af00      	add	r7, sp, #0
 8015092:	60f8      	str	r0, [r7, #12]
 8015094:	60b9      	str	r1, [r7, #8]
 8015096:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	687a      	ldr	r2, [r7, #4]
 801509c:	68b9      	ldr	r1, [r7, #8]
 801509e:	4618      	mov	r0, r3
 80150a0:	f7fa fed0 	bl	800fe44 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80150a4:	4a03      	ldr	r2, [pc, #12]	; (80150b4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	601a      	str	r2, [r3, #0]
{

}
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	4618      	mov	r0, r3
 80150ae:	3710      	adds	r7, #16
 80150b0:	46bd      	mov	sp, r7
 80150b2:	bd80      	pop	{r7, pc}
 80150b4:	0802ae74 	.word	0x0802ae74

080150b8 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80150b8:	b480      	push	{r7}
 80150ba:	b083      	sub	sp, #12
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	2200      	movs	r2, #0
 80150c4:	601a      	str	r2, [r3, #0]
{

}
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	4618      	mov	r0, r3
 80150ca:	370c      	adds	r7, #12
 80150cc:	46bd      	mov	sp, r7
 80150ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d2:	4770      	bx	lr

080150d4 <_ZN5Model4tickEv>:

void Model::tick()
{
 80150d4:	b480      	push	{r7}
 80150d6:	b083      	sub	sp, #12
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]

}
 80150dc:	bf00      	nop
 80150de:	370c      	adds	r7, #12
 80150e0:	46bd      	mov	sp, r7
 80150e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e6:	4770      	bx	lr

080150e8 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80150e8:	b480      	push	{r7}
 80150ea:	b083      	sub	sp, #12
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
    {
    }
 80150f0:	bf00      	nop
 80150f2:	370c      	adds	r7, #12
 80150f4:	46bd      	mov	sp, r7
 80150f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150fa:	4770      	bx	lr

080150fc <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80150fc:	b480      	push	{r7}
 80150fe:	b083      	sub	sp, #12
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
    {
    }
 8015104:	bf00      	nop
 8015106:	370c      	adds	r7, #12
 8015108:	46bd      	mov	sp, r7
 801510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510e:	4770      	bx	lr

08015110 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8015110:	b480      	push	{r7}
 8015112:	b083      	sub	sp, #12
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
    {
 8015118:	4a04      	ldr	r2, [pc, #16]	; (801512c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	601a      	str	r2, [r3, #0]
    }
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	4618      	mov	r0, r3
 8015122:	370c      	adds	r7, #12
 8015124:	46bd      	mov	sp, r7
 8015126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512a:	4770      	bx	lr
 801512c:	0802aef0 	.word	0x0802aef0

08015130 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8015130:	b580      	push	{r7, lr}
 8015132:	b082      	sub	sp, #8
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
    }
 8015138:	6878      	ldr	r0, [r7, #4]
 801513a:	f7ff ffe9 	bl	8015110 <_ZN8touchgfx9PresenterD1Ev>
 801513e:	2104      	movs	r1, #4
 8015140:	6878      	ldr	r0, [r7, #4]
 8015142:	f013 f973 	bl	802842c <_ZdlPvj>
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	4618      	mov	r0, r3
 801514a:	3708      	adds	r7, #8
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}

08015150 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8015150:	b480      	push	{r7}
 8015152:	b083      	sub	sp, #12
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
    {
 8015158:	4a04      	ldr	r2, [pc, #16]	; (801516c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	601a      	str	r2, [r3, #0]
    }
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	4618      	mov	r0, r3
 8015162:	370c      	adds	r7, #12
 8015164:	46bd      	mov	sp, r7
 8015166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516a:	4770      	bx	lr
 801516c:	0802aef0 	.word	0x0802aef0

08015170 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8015170:	b480      	push	{r7}
 8015172:	b083      	sub	sp, #12
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
 8015178:	4a06      	ldr	r2, [pc, #24]	; (8015194 <_ZN13ModelListenerC1Ev+0x24>)
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	601a      	str	r2, [r3, #0]
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	2200      	movs	r2, #0
 8015182:	605a      	str	r2, [r3, #4]
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	4618      	mov	r0, r3
 8015188:	370c      	adds	r7, #12
 801518a:	46bd      	mov	sp, r7
 801518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015190:	4770      	bx	lr
 8015192:	bf00      	nop
 8015194:	0802aee0 	.word	0x0802aee0

08015198 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8015198:	b480      	push	{r7}
 801519a:	b083      	sub	sp, #12
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
 80151a0:	4a04      	ldr	r2, [pc, #16]	; (80151b4 <_ZN13ModelListenerD1Ev+0x1c>)
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	601a      	str	r2, [r3, #0]
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	4618      	mov	r0, r3
 80151aa:	370c      	adds	r7, #12
 80151ac:	46bd      	mov	sp, r7
 80151ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b2:	4770      	bx	lr
 80151b4:	0802aee0 	.word	0x0802aee0

080151b8 <_ZN13ModelListenerD0Ev>:
 80151b8:	b580      	push	{r7, lr}
 80151ba:	b082      	sub	sp, #8
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
 80151c0:	6878      	ldr	r0, [r7, #4]
 80151c2:	f7ff ffe9 	bl	8015198 <_ZN13ModelListenerD1Ev>
 80151c6:	2108      	movs	r1, #8
 80151c8:	6878      	ldr	r0, [r7, #4]
 80151ca:	f013 f92f 	bl	802842c <_ZdlPvj>
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	4618      	mov	r0, r3
 80151d2:	3708      	adds	r7, #8
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}

080151d8 <_ZN13PongPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~PongPresenter() {};
 80151d8:	b580      	push	{r7, lr}
 80151da:	b082      	sub	sp, #8
 80151dc:	af00      	add	r7, sp, #0
 80151de:	6078      	str	r0, [r7, #4]
 80151e0:	4a09      	ldr	r2, [pc, #36]	; (8015208 <_ZN13PongPresenterD1Ev+0x30>)
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	601a      	str	r2, [r3, #0]
 80151e6:	4a09      	ldr	r2, [pc, #36]	; (801520c <_ZN13PongPresenterD1Ev+0x34>)
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	605a      	str	r2, [r3, #4]
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	3304      	adds	r3, #4
 80151f0:	4618      	mov	r0, r3
 80151f2:	f7ff ffd1 	bl	8015198 <_ZN13ModelListenerD1Ev>
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	4618      	mov	r0, r3
 80151fa:	f7ff ff89 	bl	8015110 <_ZN8touchgfx9PresenterD1Ev>
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	4618      	mov	r0, r3
 8015202:	3708      	adds	r7, #8
 8015204:	46bd      	mov	sp, r7
 8015206:	bd80      	pop	{r7, pc}
 8015208:	0802aeb8 	.word	0x0802aeb8
 801520c:	0802aed0 	.word	0x0802aed0

08015210 <_ZThn4_N13PongPresenterD1Ev>:
 8015210:	f1a0 0004 	sub.w	r0, r0, #4
 8015214:	e7e0      	b.n	80151d8 <_ZN13PongPresenterD1Ev>
 8015216:	bf00      	nop

08015218 <_ZN13PongPresenterD0Ev>:
 8015218:	b580      	push	{r7, lr}
 801521a:	b082      	sub	sp, #8
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	f7ff ffd9 	bl	80151d8 <_ZN13PongPresenterD1Ev>
 8015226:	2110      	movs	r1, #16
 8015228:	6878      	ldr	r0, [r7, #4]
 801522a:	f013 f8ff 	bl	802842c <_ZdlPvj>
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	4618      	mov	r0, r3
 8015232:	3708      	adds	r7, #8
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}

08015238 <_ZThn4_N13PongPresenterD0Ev>:
 8015238:	f1a0 0004 	sub.w	r0, r0, #4
 801523c:	e7ec      	b.n	8015218 <_ZN13PongPresenterD0Ev>
	...

08015240 <_ZN13PongPresenterC1ER8PongView>:
#include <gui/pong_screen/PongView.hpp>
#include <gui/pong_screen/PongPresenter.hpp>

PongPresenter::PongPresenter(PongView& v)
 8015240:	b580      	push	{r7, lr}
 8015242:	b082      	sub	sp, #8
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
 8015248:	6039      	str	r1, [r7, #0]
    : view(v)
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	4618      	mov	r0, r3
 801524e:	f7ff ff7f 	bl	8015150 <_ZN8touchgfx9PresenterC1Ev>
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	3304      	adds	r3, #4
 8015256:	4618      	mov	r0, r3
 8015258:	f7ff ff8a 	bl	8015170 <_ZN13ModelListenerC1Ev>
 801525c:	4a06      	ldr	r2, [pc, #24]	; (8015278 <_ZN13PongPresenterC1ER8PongView+0x38>)
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	601a      	str	r2, [r3, #0]
 8015262:	4a06      	ldr	r2, [pc, #24]	; (801527c <_ZN13PongPresenterC1ER8PongView+0x3c>)
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	605a      	str	r2, [r3, #4]
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	683a      	ldr	r2, [r7, #0]
 801526c:	60da      	str	r2, [r3, #12]
{

}
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	4618      	mov	r0, r3
 8015272:	3708      	adds	r7, #8
 8015274:	46bd      	mov	sp, r7
 8015276:	bd80      	pop	{r7, pc}
 8015278:	0802aeb8 	.word	0x0802aeb8
 801527c:	0802aed0 	.word	0x0802aed0

08015280 <_ZN13PongPresenter8activateEv>:

void PongPresenter::activate()
{
 8015280:	b480      	push	{r7}
 8015282:	b083      	sub	sp, #12
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]

}
 8015288:	bf00      	nop
 801528a:	370c      	adds	r7, #12
 801528c:	46bd      	mov	sp, r7
 801528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015292:	4770      	bx	lr

08015294 <_ZN13PongPresenter10deactivateEv>:

void PongPresenter::deactivate()
{
 8015294:	b480      	push	{r7}
 8015296:	b083      	sub	sp, #12
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]

}
 801529c:	bf00      	nop
 801529e:	370c      	adds	r7, #12
 80152a0:	46bd      	mov	sp, r7
 80152a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a6:	4770      	bx	lr

080152a8 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 80152a8:	b480      	push	{r7}
 80152aa:	b083      	sub	sp, #12
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
        return rect.width;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 80152b6:	4618      	mov	r0, r3
 80152b8:	370c      	adds	r7, #12
 80152ba:	46bd      	mov	sp, r7
 80152bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c0:	4770      	bx	lr

080152c2 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 80152c2:	b480      	push	{r7}
 80152c4:	b083      	sub	sp, #12
 80152c6:	af00      	add	r7, sp, #0
 80152c8:	6078      	str	r0, [r7, #4]
        return rect.height;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 80152d0:	4618      	mov	r0, r3
 80152d2:	370c      	adds	r7, #12
 80152d4:	46bd      	mov	sp, r7
 80152d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152da:	4770      	bx	lr

080152dc <_ZN8PongViewD1Ev>:
#include <touchgfx/Color.hpp>
class PongView : public PongViewBase
{
public:
    PongView();
    virtual ~PongView() {}
 80152dc:	b580      	push	{r7, lr}
 80152de:	b082      	sub	sp, #8
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
 80152e4:	4a05      	ldr	r2, [pc, #20]	; (80152fc <_ZN8PongViewD1Ev+0x20>)
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	601a      	str	r2, [r3, #0]
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	4618      	mov	r0, r3
 80152ee:	f7fd fa29 	bl	8012744 <_ZN12PongViewBaseD1Ev>
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	4618      	mov	r0, r3
 80152f6:	3708      	adds	r7, #8
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd80      	pop	{r7, pc}
 80152fc:	0802af08 	.word	0x0802af08

08015300 <_ZN8PongViewD0Ev>:
 8015300:	b580      	push	{r7, lr}
 8015302:	b082      	sub	sp, #8
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
 8015308:	6878      	ldr	r0, [r7, #4]
 801530a:	f7ff ffe7 	bl	80152dc <_ZN8PongViewD1Ev>
 801530e:	f641 611c 	movw	r1, #7708	; 0x1e1c
 8015312:	6878      	ldr	r0, [r7, #4]
 8015314:	f013 f88a 	bl	802842c <_ZdlPvj>
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	4618      	mov	r0, r3
 801531c:	3708      	adds	r7, #8
 801531e:	46bd      	mov	sp, r7
 8015320:	bd80      	pop	{r7, pc}
	...

08015324 <_ZN8PongViewC1Ev>:
#include <gui/pong_screen/PongView.hpp>

#include <touchgfx/lcd/LCD.hpp>

PongView::PongView()
 8015324:	b580      	push	{r7, lr}
 8015326:	b082      	sub	sp, #8
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	4618      	mov	r0, r3
 8015330:	f7fd fa5c 	bl	80127ec <_ZN12PongViewBaseC1Ev>
 8015334:	4a15      	ldr	r2, [pc, #84]	; (801538c <_ZN8PongViewC1Ev+0x68>)
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	601a      	str	r2, [r3, #0]
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8015340:	2201      	movs	r2, #1
 8015342:	601a      	str	r2, [r3, #0]
 8015344:	687a      	ldr	r2, [r7, #4]
 8015346:	f641 6304 	movw	r3, #7684	; 0x1e04
 801534a:	4413      	add	r3, r2
 801534c:	2201      	movs	r2, #1
 801534e:	601a      	str	r2, [r3, #0]
 8015350:	687a      	ldr	r2, [r7, #4]
 8015352:	f641 6308 	movw	r3, #7688	; 0x1e08
 8015356:	4413      	add	r3, r2
 8015358:	2204      	movs	r2, #4
 801535a:	601a      	str	r2, [r3, #0]
 801535c:	687a      	ldr	r2, [r7, #4]
 801535e:	f641 630c 	movw	r3, #7692	; 0x1e0c
 8015362:	4413      	add	r3, r2
 8015364:	2228      	movs	r2, #40	; 0x28
 8015366:	601a      	str	r2, [r3, #0]
 8015368:	687a      	ldr	r2, [r7, #4]
 801536a:	f641 6310 	movw	r3, #7696	; 0x1e10
 801536e:	4413      	add	r3, r2
 8015370:	2200      	movs	r2, #0
 8015372:	601a      	str	r2, [r3, #0]
 8015374:	687a      	ldr	r2, [r7, #4]
 8015376:	f641 6318 	movw	r3, #7704	; 0x1e18
 801537a:	4413      	add	r3, r2
 801537c:	2200      	movs	r2, #0
 801537e:	601a      	str	r2, [r3, #0]
{

}
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	4618      	mov	r0, r3
 8015384:	3708      	adds	r7, #8
 8015386:	46bd      	mov	sp, r7
 8015388:	bd80      	pop	{r7, pc}
 801538a:	bf00      	nop
 801538c:	0802af08 	.word	0x0802af08

08015390 <_ZN8PongView11setupScreenEv>:

void PongView::setupScreen()
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b082      	sub	sp, #8
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
    PongViewBase::setupScreen();
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	4618      	mov	r0, r3
 801539c:	f7fd fbe8 	bl	8012b70 <_ZN12PongViewBase11setupScreenEv>
}
 80153a0:	bf00      	nop
 80153a2:	3708      	adds	r7, #8
 80153a4:	46bd      	mov	sp, r7
 80153a6:	bd80      	pop	{r7, pc}

080153a8 <_ZN8PongView14tearDownScreenEv>:

void PongView::tearDownScreen()
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b082      	sub	sp, #8
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
    PongViewBase::tearDownScreen();
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	4618      	mov	r0, r3
 80153b4:	f7fc fe08 	bl	8011fc8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80153b8:	bf00      	nop
 80153ba:	3708      	adds	r7, #8
 80153bc:	46bd      	mov	sp, r7
 80153be:	bd80      	pop	{r7, pc}

080153c0 <_ZN8PongView9move_leftEv>:

void PongView::move_left(){
 80153c0:	b590      	push	{r4, r7, lr}
 80153c2:	b083      	sub	sp, #12
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]

	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80153ce:	22ff      	movs	r2, #255	; 0xff
 80153d0:	21ff      	movs	r1, #255	; 0xff
 80153d2:	20ff      	movs	r0, #255	; 0xff
 80153d4:	f7fc ff1e 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80153d8:	4603      	mov	r3, r0
 80153da:	4619      	mov	r1, r3
 80153dc:	4620      	mov	r0, r4
 80153de:	f7fc fe87 	bl	80120f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	33f0      	adds	r3, #240	; 0xf0
 80153e6:	4618      	mov	r0, r3
 80153e8:	f007 faee 	bl	801c9c8 <_ZNK8touchgfx8Drawable10invalidateEv>
	paddle1.setX(paddle1.getX()-20);
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	33f0      	adds	r3, #240	; 0xf0
 80153f6:	4618      	mov	r0, r3
 80153f8:	f7fa fa9f 	bl	800f93a <_ZNK8touchgfx8Drawable4getXEv>
 80153fc:	4603      	mov	r3, r0
 80153fe:	b29b      	uxth	r3, r3
 8015400:	3b14      	subs	r3, #20
 8015402:	b29b      	uxth	r3, r3
 8015404:	b21b      	sxth	r3, r3
 8015406:	4619      	mov	r1, r3
 8015408:	4620      	mov	r0, r4
 801540a:	f7fa fab0 	bl	800f96e <_ZN8touchgfx8Drawable4setXEs>
	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8015414:	22ff      	movs	r2, #255	; 0xff
 8015416:	2180      	movs	r1, #128	; 0x80
 8015418:	2006      	movs	r0, #6
 801541a:	f7fc fefb 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801541e:	4603      	mov	r3, r0
 8015420:	4619      	mov	r1, r3
 8015422:	4620      	mov	r0, r4
 8015424:	f7fc fe64 	bl	80120f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	33f0      	adds	r3, #240	; 0xf0
 801542c:	4618      	mov	r0, r3
 801542e:	f007 facb 	bl	801c9c8 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8015432:	bf00      	nop
 8015434:	370c      	adds	r7, #12
 8015436:	46bd      	mov	sp, r7
 8015438:	bd90      	pop	{r4, r7, pc}

0801543a <_ZN8PongView10move_rightEv>:

void PongView::move_right(){
 801543a:	b590      	push	{r4, r7, lr}
 801543c:	b083      	sub	sp, #12
 801543e:	af00      	add	r7, sp, #0
 8015440:	6078      	str	r0, [r7, #4]

	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8015448:	22ff      	movs	r2, #255	; 0xff
 801544a:	21ff      	movs	r1, #255	; 0xff
 801544c:	20ff      	movs	r0, #255	; 0xff
 801544e:	f7fc fee1 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015452:	4603      	mov	r3, r0
 8015454:	4619      	mov	r1, r3
 8015456:	4620      	mov	r0, r4
 8015458:	f7fc fe4a 	bl	80120f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	33f0      	adds	r3, #240	; 0xf0
 8015460:	4618      	mov	r0, r3
 8015462:	f007 fab1 	bl	801c9c8 <_ZNK8touchgfx8Drawable10invalidateEv>
	paddle1.setX(paddle1.getX()+20);
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	33f0      	adds	r3, #240	; 0xf0
 8015470:	4618      	mov	r0, r3
 8015472:	f7fa fa62 	bl	800f93a <_ZNK8touchgfx8Drawable4getXEv>
 8015476:	4603      	mov	r3, r0
 8015478:	b29b      	uxth	r3, r3
 801547a:	3314      	adds	r3, #20
 801547c:	b29b      	uxth	r3, r3
 801547e:	b21b      	sxth	r3, r3
 8015480:	4619      	mov	r1, r3
 8015482:	4620      	mov	r0, r4
 8015484:	f7fa fa73 	bl	800f96e <_ZN8touchgfx8Drawable4setXEs>
	paddle1.setColor( touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 801548e:	22ff      	movs	r2, #255	; 0xff
 8015490:	2180      	movs	r1, #128	; 0x80
 8015492:	2006      	movs	r0, #6
 8015494:	f7fc febe 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015498:	4603      	mov	r3, r0
 801549a:	4619      	mov	r1, r3
 801549c:	4620      	mov	r0, r4
 801549e:	f7fc fe27 	bl	80120f0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
	paddle1.invalidate();
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	33f0      	adds	r3, #240	; 0xf0
 80154a6:	4618      	mov	r0, r3
 80154a8:	f007 fa8e 	bl	801c9c8 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 80154ac:	bf00      	nop
 80154ae:	370c      	adds	r7, #12
 80154b0:	46bd      	mov	sp, r7
 80154b2:	bd90      	pop	{r4, r7, pc}

080154b4 <_ZN8PongView15handleTickEventEv>:

void PongView::handleTickEvent(){
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b082      	sub	sp, #8
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	6078      	str	r0, [r7, #4]
	tick ++;
 80154bc:	687a      	ldr	r2, [r7, #4]
 80154be:	f641 6310 	movw	r3, #7696	; 0x1e10
 80154c2:	4413      	add	r3, r2
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	1c5a      	adds	r2, r3, #1
 80154c8:	6879      	ldr	r1, [r7, #4]
 80154ca:	f641 6310 	movw	r3, #7696	; 0x1e10
 80154ce:	440b      	add	r3, r1
 80154d0:	601a      	str	r2, [r3, #0]
	move_ball();
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f000 f824 	bl	8015520 <_ZN8PongView9move_ballEv>
	sc ++;
 80154d8:	687a      	ldr	r2, [r7, #4]
 80154da:	f641 6318 	movw	r3, #7704	; 0x1e18
 80154de:	4413      	add	r3, r2
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	1c5a      	adds	r2, r3, #1
 80154e4:	6879      	ldr	r1, [r7, #4]
 80154e6:	f641 6318 	movw	r3, #7704	; 0x1e18
 80154ea:	440b      	add	r3, r1
 80154ec:	601a      	str	r2, [r3, #0]
	Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%d", sc);
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 80154f4:	687a      	ldr	r2, [r7, #4]
 80154f6:	f641 6318 	movw	r3, #7704	; 0x1e18
 80154fa:	4413      	add	r3, r2
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	4a07      	ldr	r2, [pc, #28]	; (801551c <_ZN8PongView15handleTickEventEv+0x68>)
 8015500:	2114      	movs	r1, #20
 8015502:	f009 f899 	bl	801e638 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	score.invalidate();
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801550c:	4618      	mov	r0, r3
 801550e:	f007 fa5b 	bl	801c9c8 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8015512:	bf00      	nop
 8015514:	3708      	adds	r7, #8
 8015516:	46bd      	mov	sp, r7
 8015518:	bd80      	pop	{r7, pc}
 801551a:	bf00      	nop
 801551c:	08029c74 	.word	0x08029c74

08015520 <_ZN8PongView9move_ballEv>:

void PongView::move_ball(){\
 8015520:	b590      	push	{r4, r7, lr}
 8015522:	b083      	sub	sp, #12
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]

	// move ball
	ballPainter.setColor( touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801552e:	22ff      	movs	r2, #255	; 0xff
 8015530:	21ff      	movs	r1, #255	; 0xff
 8015532:	20ff      	movs	r0, #255	; 0xff
 8015534:	f7fc fe6e 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015538:	4603      	mov	r3, r0
 801553a:	4619      	mov	r1, r3
 801553c:	4620      	mov	r0, r4
 801553e:	f7fc ff35 	bl	80123ac <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	ball.invalidate();
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	3370      	adds	r3, #112	; 0x70
 8015546:	4618      	mov	r0, r3
 8015548:	f004 fc36 	bl	8019db8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	ball.setY(ball.getY() +  ball_vertical_direction*ball_speed);
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	3370      	adds	r3, #112	; 0x70
 8015556:	4618      	mov	r0, r3
 8015558:	f7fa f9fc 	bl	800f954 <_ZNK8touchgfx8Drawable4getYEv>
 801555c:	4603      	mov	r3, r0
 801555e:	b29a      	uxth	r2, r3
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	b299      	uxth	r1, r3
 801556a:	6878      	ldr	r0, [r7, #4]
 801556c:	f641 6308 	movw	r3, #7688	; 0x1e08
 8015570:	4403      	add	r3, r0
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	b29b      	uxth	r3, r3
 8015576:	fb11 f303 	smulbb	r3, r1, r3
 801557a:	b29b      	uxth	r3, r3
 801557c:	4413      	add	r3, r2
 801557e:	b29b      	uxth	r3, r3
 8015580:	b21b      	sxth	r3, r3
 8015582:	4619      	mov	r1, r3
 8015584:	4620      	mov	r0, r4
 8015586:	f7fa fa01 	bl	800f98c <_ZN8touchgfx8Drawable4setYEs>
	ball.setX(ball.getX() +  ball_horizontal_direction*ball_speed);
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	3370      	adds	r3, #112	; 0x70
 8015594:	4618      	mov	r0, r3
 8015596:	f7fa f9d0 	bl	800f93a <_ZNK8touchgfx8Drawable4getXEv>
 801559a:	4603      	mov	r3, r0
 801559c:	b29a      	uxth	r2, r3
 801559e:	6879      	ldr	r1, [r7, #4]
 80155a0:	f641 6304 	movw	r3, #7684	; 0x1e04
 80155a4:	440b      	add	r3, r1
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	b299      	uxth	r1, r3
 80155aa:	6878      	ldr	r0, [r7, #4]
 80155ac:	f641 6308 	movw	r3, #7688	; 0x1e08
 80155b0:	4403      	add	r3, r0
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	b29b      	uxth	r3, r3
 80155b6:	fb11 f303 	smulbb	r3, r1, r3
 80155ba:	b29b      	uxth	r3, r3
 80155bc:	4413      	add	r3, r2
 80155be:	b29b      	uxth	r3, r3
 80155c0:	b21b      	sxth	r3, r3
 80155c2:	4619      	mov	r1, r3
 80155c4:	4620      	mov	r0, r4
 80155c6:	f7fa f9d2 	bl	800f96e <_ZN8touchgfx8Drawable4setXEs>
	ballPainter.setColor( touchgfx::Color::getColorFrom24BitRGB(6, 128, 255));
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80155d0:	22ff      	movs	r2, #255	; 0xff
 80155d2:	2180      	movs	r1, #128	; 0x80
 80155d4:	2006      	movs	r0, #6
 80155d6:	f7fc fe1d 	bl	8012214 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80155da:	4603      	mov	r3, r0
 80155dc:	4619      	mov	r1, r3
 80155de:	4620      	mov	r0, r4
 80155e0:	f7fc fee4 	bl	80123ac <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	ball.invalidate();
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	3370      	adds	r3, #112	; 0x70
 80155e8:	4618      	mov	r0, r3
 80155ea:	f004 fbe5 	bl	8019db8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>


	if(check_collision()==1){
 80155ee:	6878      	ldr	r0, [r7, #4]
 80155f0:	f000 f863 	bl	80156ba <_ZN8PongView15check_collisionEv>
 80155f4:	4603      	mov	r3, r0
 80155f6:	2b01      	cmp	r3, #1
 80155f8:	bf0c      	ite	eq
 80155fa:	2301      	moveq	r3, #1
 80155fc:	2300      	movne	r3, #0
 80155fe:	b2db      	uxtb	r3, r3
 8015600:	2b00      	cmp	r3, #0
 8015602:	d021      	beq.n	8015648 <_ZN8PongView9move_ballEv+0x128>
		ball_vertical_direction = -1;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801560a:	f04f 32ff 	mov.w	r2, #4294967295
 801560e:	601a      	str	r2, [r3, #0]

		if(ball_horizontal_direction==1){
 8015610:	687a      	ldr	r2, [r7, #4]
 8015612:	f641 6304 	movw	r3, #7684	; 0x1e04
 8015616:	4413      	add	r3, r2
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	2b01      	cmp	r3, #1
 801561c:	d106      	bne.n	801562c <_ZN8PongView9move_ballEv+0x10c>
			ball_horizontal_direction = 2;
 801561e:	687a      	ldr	r2, [r7, #4]
 8015620:	f641 6304 	movw	r3, #7684	; 0x1e04
 8015624:	4413      	add	r3, r2
 8015626:	2202      	movs	r2, #2
 8015628:	601a      	str	r2, [r3, #0]
	}
	else if(check_collision()==4){
		ball_horizontal_direction = -1;
	}

}
 801562a:	e042      	b.n	80156b2 <_ZN8PongView9move_ballEv+0x192>
		else if (ball_horizontal_direction==2){
 801562c:	687a      	ldr	r2, [r7, #4]
 801562e:	f641 6304 	movw	r3, #7684	; 0x1e04
 8015632:	4413      	add	r3, r2
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	2b02      	cmp	r3, #2
 8015638:	d13b      	bne.n	80156b2 <_ZN8PongView9move_ballEv+0x192>
			ball_horizontal_direction = 1;
 801563a:	687a      	ldr	r2, [r7, #4]
 801563c:	f641 6304 	movw	r3, #7684	; 0x1e04
 8015640:	4413      	add	r3, r2
 8015642:	2201      	movs	r2, #1
 8015644:	601a      	str	r2, [r3, #0]
}
 8015646:	e034      	b.n	80156b2 <_ZN8PongView9move_ballEv+0x192>
	else if(check_collision()==2){
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	f000 f836 	bl	80156ba <_ZN8PongView15check_collisionEv>
 801564e:	4603      	mov	r3, r0
 8015650:	2b02      	cmp	r3, #2
 8015652:	bf0c      	ite	eq
 8015654:	2301      	moveq	r3, #1
 8015656:	2300      	movne	r3, #0
 8015658:	b2db      	uxtb	r3, r3
 801565a:	2b00      	cmp	r3, #0
 801565c:	d005      	beq.n	801566a <_ZN8PongView9move_ballEv+0x14a>
		ball_vertical_direction = 1;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8015664:	2201      	movs	r2, #1
 8015666:	601a      	str	r2, [r3, #0]
}
 8015668:	e023      	b.n	80156b2 <_ZN8PongView9move_ballEv+0x192>
	else if(check_collision()==3){
 801566a:	6878      	ldr	r0, [r7, #4]
 801566c:	f000 f825 	bl	80156ba <_ZN8PongView15check_collisionEv>
 8015670:	4603      	mov	r3, r0
 8015672:	2b03      	cmp	r3, #3
 8015674:	bf0c      	ite	eq
 8015676:	2301      	moveq	r3, #1
 8015678:	2300      	movne	r3, #0
 801567a:	b2db      	uxtb	r3, r3
 801567c:	2b00      	cmp	r3, #0
 801567e:	d006      	beq.n	801568e <_ZN8PongView9move_ballEv+0x16e>
		ball_horizontal_direction = 1;
 8015680:	687a      	ldr	r2, [r7, #4]
 8015682:	f641 6304 	movw	r3, #7684	; 0x1e04
 8015686:	4413      	add	r3, r2
 8015688:	2201      	movs	r2, #1
 801568a:	601a      	str	r2, [r3, #0]
}
 801568c:	e011      	b.n	80156b2 <_ZN8PongView9move_ballEv+0x192>
	else if(check_collision()==4){
 801568e:	6878      	ldr	r0, [r7, #4]
 8015690:	f000 f813 	bl	80156ba <_ZN8PongView15check_collisionEv>
 8015694:	4603      	mov	r3, r0
 8015696:	2b04      	cmp	r3, #4
 8015698:	bf0c      	ite	eq
 801569a:	2301      	moveq	r3, #1
 801569c:	2300      	movne	r3, #0
 801569e:	b2db      	uxtb	r3, r3
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d006      	beq.n	80156b2 <_ZN8PongView9move_ballEv+0x192>
		ball_horizontal_direction = -1;
 80156a4:	687a      	ldr	r2, [r7, #4]
 80156a6:	f641 6304 	movw	r3, #7684	; 0x1e04
 80156aa:	4413      	add	r3, r2
 80156ac:	f04f 32ff 	mov.w	r2, #4294967295
 80156b0:	601a      	str	r2, [r3, #0]
}
 80156b2:	bf00      	nop
 80156b4:	370c      	adds	r7, #12
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bd90      	pop	{r4, r7, pc}

080156ba <_ZN8PongView15check_collisionEv>:

int PongView::check_collision(){
 80156ba:	b5b0      	push	{r4, r5, r7, lr}
 80156bc:	b082      	sub	sp, #8
 80156be:	af00      	add	r7, sp, #0
 80156c0:	6078      	str	r0, [r7, #4]
	// collide with paddle
	if(ball.getY()+ball.getHeight()-margin>=paddle1.getY()-paddle1.getHeight() && ball.getX() + margin - 110 >= paddle1.getX() - paddle1.getWidth() && ball.getX() + margin <= paddle1.getX() + paddle1.getWidth()){
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	3370      	adds	r3, #112	; 0x70
 80156c6:	4618      	mov	r0, r3
 80156c8:	f7fa f944 	bl	800f954 <_ZNK8touchgfx8Drawable4getYEv>
 80156cc:	4603      	mov	r3, r0
 80156ce:	461c      	mov	r4, r3
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	3370      	adds	r3, #112	; 0x70
 80156d4:	4618      	mov	r0, r3
 80156d6:	f7ff fdf4 	bl	80152c2 <_ZNK8touchgfx8Drawable9getHeightEv>
 80156da:	4603      	mov	r3, r0
 80156dc:	18e2      	adds	r2, r4, r3
 80156de:	6879      	ldr	r1, [r7, #4]
 80156e0:	f641 630c 	movw	r3, #7692	; 0x1e0c
 80156e4:	440b      	add	r3, r1
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	1ad4      	subs	r4, r2, r3
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	33f0      	adds	r3, #240	; 0xf0
 80156ee:	4618      	mov	r0, r3
 80156f0:	f7fa f930 	bl	800f954 <_ZNK8touchgfx8Drawable4getYEv>
 80156f4:	4603      	mov	r3, r0
 80156f6:	461d      	mov	r5, r3
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	33f0      	adds	r3, #240	; 0xf0
 80156fc:	4618      	mov	r0, r3
 80156fe:	f7ff fde0 	bl	80152c2 <_ZNK8touchgfx8Drawable9getHeightEv>
 8015702:	4603      	mov	r3, r0
 8015704:	1aeb      	subs	r3, r5, r3
 8015706:	429c      	cmp	r4, r3
 8015708:	db3d      	blt.n	8015786 <_ZN8PongView15check_collisionEv+0xcc>
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	3370      	adds	r3, #112	; 0x70
 801570e:	4618      	mov	r0, r3
 8015710:	f7fa f913 	bl	800f93a <_ZNK8touchgfx8Drawable4getXEv>
 8015714:	4603      	mov	r3, r0
 8015716:	4619      	mov	r1, r3
 8015718:	687a      	ldr	r2, [r7, #4]
 801571a:	f641 630c 	movw	r3, #7692	; 0x1e0c
 801571e:	4413      	add	r3, r2
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	440b      	add	r3, r1
 8015724:	f1a3 046e 	sub.w	r4, r3, #110	; 0x6e
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	33f0      	adds	r3, #240	; 0xf0
 801572c:	4618      	mov	r0, r3
 801572e:	f7fa f904 	bl	800f93a <_ZNK8touchgfx8Drawable4getXEv>
 8015732:	4603      	mov	r3, r0
 8015734:	461d      	mov	r5, r3
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	33f0      	adds	r3, #240	; 0xf0
 801573a:	4618      	mov	r0, r3
 801573c:	f7ff fdb4 	bl	80152a8 <_ZNK8touchgfx8Drawable8getWidthEv>
 8015740:	4603      	mov	r3, r0
 8015742:	1aeb      	subs	r3, r5, r3
 8015744:	429c      	cmp	r4, r3
 8015746:	db1e      	blt.n	8015786 <_ZN8PongView15check_collisionEv+0xcc>
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	3370      	adds	r3, #112	; 0x70
 801574c:	4618      	mov	r0, r3
 801574e:	f7fa f8f4 	bl	800f93a <_ZNK8touchgfx8Drawable4getXEv>
 8015752:	4603      	mov	r3, r0
 8015754:	4619      	mov	r1, r3
 8015756:	687a      	ldr	r2, [r7, #4]
 8015758:	f641 630c 	movw	r3, #7692	; 0x1e0c
 801575c:	4413      	add	r3, r2
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	18cc      	adds	r4, r1, r3
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	33f0      	adds	r3, #240	; 0xf0
 8015766:	4618      	mov	r0, r3
 8015768:	f7fa f8e7 	bl	800f93a <_ZNK8touchgfx8Drawable4getXEv>
 801576c:	4603      	mov	r3, r0
 801576e:	461d      	mov	r5, r3
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	33f0      	adds	r3, #240	; 0xf0
 8015774:	4618      	mov	r0, r3
 8015776:	f7ff fd97 	bl	80152a8 <_ZNK8touchgfx8Drawable8getWidthEv>
 801577a:	4603      	mov	r3, r0
 801577c:	442b      	add	r3, r5
 801577e:	429c      	cmp	r4, r3
 8015780:	dc01      	bgt.n	8015786 <_ZN8PongView15check_collisionEv+0xcc>
 8015782:	2301      	movs	r3, #1
 8015784:	e000      	b.n	8015788 <_ZN8PongView15check_collisionEv+0xce>
 8015786:	2300      	movs	r3, #0
 8015788:	2b00      	cmp	r3, #0
 801578a:	d001      	beq.n	8015790 <_ZN8PongView15check_collisionEv+0xd6>
		return 1;
 801578c:	2301      	movs	r3, #1
 801578e:	e055      	b.n	801583c <_ZN8PongView15check_collisionEv+0x182>
	}

	// collide with wall
	if(ball.getY()+ball.getHeight()-margin-20<=0){
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	3370      	adds	r3, #112	; 0x70
 8015794:	4618      	mov	r0, r3
 8015796:	f7fa f8dd 	bl	800f954 <_ZNK8touchgfx8Drawable4getYEv>
 801579a:	4603      	mov	r3, r0
 801579c:	461c      	mov	r4, r3
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	3370      	adds	r3, #112	; 0x70
 80157a2:	4618      	mov	r0, r3
 80157a4:	f7ff fd8d 	bl	80152c2 <_ZNK8touchgfx8Drawable9getHeightEv>
 80157a8:	4603      	mov	r3, r0
 80157aa:	18e2      	adds	r2, r4, r3
 80157ac:	6879      	ldr	r1, [r7, #4]
 80157ae:	f641 630c 	movw	r3, #7692	; 0x1e0c
 80157b2:	440b      	add	r3, r1
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	1ad3      	subs	r3, r2, r3
 80157b8:	3b14      	subs	r3, #20
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	bfd4      	ite	le
 80157be:	2301      	movle	r3, #1
 80157c0:	2300      	movgt	r3, #0
 80157c2:	b2db      	uxtb	r3, r3
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d001      	beq.n	80157cc <_ZN8PongView15check_collisionEv+0x112>
		return 2;
 80157c8:	2302      	movs	r3, #2
 80157ca:	e037      	b.n	801583c <_ZN8PongView15check_collisionEv+0x182>
	}

	// collide with left wall
	if(ball.getX()+ball.getWidth()-margin-20<=0){
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	3370      	adds	r3, #112	; 0x70
 80157d0:	4618      	mov	r0, r3
 80157d2:	f7fa f8b2 	bl	800f93a <_ZNK8touchgfx8Drawable4getXEv>
 80157d6:	4603      	mov	r3, r0
 80157d8:	461c      	mov	r4, r3
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	3370      	adds	r3, #112	; 0x70
 80157de:	4618      	mov	r0, r3
 80157e0:	f7ff fd62 	bl	80152a8 <_ZNK8touchgfx8Drawable8getWidthEv>
 80157e4:	4603      	mov	r3, r0
 80157e6:	18e2      	adds	r2, r4, r3
 80157e8:	6879      	ldr	r1, [r7, #4]
 80157ea:	f641 630c 	movw	r3, #7692	; 0x1e0c
 80157ee:	440b      	add	r3, r1
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	1ad3      	subs	r3, r2, r3
 80157f4:	3b14      	subs	r3, #20
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	bfd4      	ite	le
 80157fa:	2301      	movle	r3, #1
 80157fc:	2300      	movgt	r3, #0
 80157fe:	b2db      	uxtb	r3, r3
 8015800:	2b00      	cmp	r3, #0
 8015802:	d001      	beq.n	8015808 <_ZN8PongView15check_collisionEv+0x14e>
		return 3;
 8015804:	2303      	movs	r3, #3
 8015806:	e019      	b.n	801583c <_ZN8PongView15check_collisionEv+0x182>
	}

	// collide with right wall
	if(ball.getX()+ball.getWidth() >= 480){
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	3370      	adds	r3, #112	; 0x70
 801580c:	4618      	mov	r0, r3
 801580e:	f7fa f894 	bl	800f93a <_ZNK8touchgfx8Drawable4getXEv>
 8015812:	4603      	mov	r3, r0
 8015814:	461c      	mov	r4, r3
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	3370      	adds	r3, #112	; 0x70
 801581a:	4618      	mov	r0, r3
 801581c:	f7ff fd44 	bl	80152a8 <_ZNK8touchgfx8Drawable8getWidthEv>
 8015820:	4603      	mov	r3, r0
 8015822:	4423      	add	r3, r4
 8015824:	f240 12df 	movw	r2, #479	; 0x1df
 8015828:	4293      	cmp	r3, r2
 801582a:	bfcc      	ite	gt
 801582c:	2301      	movgt	r3, #1
 801582e:	2300      	movle	r3, #0
 8015830:	b2db      	uxtb	r3, r3
 8015832:	2b00      	cmp	r3, #0
 8015834:	d001      	beq.n	801583a <_ZN8PongView15check_collisionEv+0x180>
		return 4;
 8015836:	2304      	movs	r3, #4
 8015838:	e000      	b.n	801583c <_ZN8PongView15check_collisionEv+0x182>
	}

	return 0;
 801583a:	2300      	movs	r3, #0
}
 801583c:	4618      	mov	r0, r3
 801583e:	3708      	adds	r7, #8
 8015840:	46bd      	mov	sp, r7
 8015842:	bdb0      	pop	{r4, r5, r7, pc}

08015844 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8015844:	b580      	push	{r7, lr}
 8015846:	b082      	sub	sp, #8
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
 801584c:	4a09      	ldr	r2, [pc, #36]	; (8015874 <_ZN16Screen2PresenterD1Ev+0x30>)
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	601a      	str	r2, [r3, #0]
 8015852:	4a09      	ldr	r2, [pc, #36]	; (8015878 <_ZN16Screen2PresenterD1Ev+0x34>)
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	605a      	str	r2, [r3, #4]
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	3304      	adds	r3, #4
 801585c:	4618      	mov	r0, r3
 801585e:	f7ff fc9b 	bl	8015198 <_ZN13ModelListenerD1Ev>
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	4618      	mov	r0, r3
 8015866:	f7ff fc53 	bl	8015110 <_ZN8touchgfx9PresenterD1Ev>
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	4618      	mov	r0, r3
 801586e:	3708      	adds	r7, #8
 8015870:	46bd      	mov	sp, r7
 8015872:	bd80      	pop	{r7, pc}
 8015874:	0802af44 	.word	0x0802af44
 8015878:	0802af5c 	.word	0x0802af5c

0801587c <_ZThn4_N16Screen2PresenterD1Ev>:
 801587c:	f1a0 0004 	sub.w	r0, r0, #4
 8015880:	e7e0      	b.n	8015844 <_ZN16Screen2PresenterD1Ev>
 8015882:	bf00      	nop

08015884 <_ZN16Screen2PresenterD0Ev>:
 8015884:	b580      	push	{r7, lr}
 8015886:	b082      	sub	sp, #8
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
 801588c:	6878      	ldr	r0, [r7, #4]
 801588e:	f7ff ffd9 	bl	8015844 <_ZN16Screen2PresenterD1Ev>
 8015892:	2110      	movs	r1, #16
 8015894:	6878      	ldr	r0, [r7, #4]
 8015896:	f012 fdc9 	bl	802842c <_ZdlPvj>
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	4618      	mov	r0, r3
 801589e:	3708      	adds	r7, #8
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}

080158a4 <_ZThn4_N16Screen2PresenterD0Ev>:
 80158a4:	f1a0 0004 	sub.w	r0, r0, #4
 80158a8:	e7ec      	b.n	8015884 <_ZN16Screen2PresenterD0Ev>
	...

080158ac <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b082      	sub	sp, #8
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
 80158b4:	6039      	str	r1, [r7, #0]
    : view(v)
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	4618      	mov	r0, r3
 80158ba:	f7ff fc49 	bl	8015150 <_ZN8touchgfx9PresenterC1Ev>
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	3304      	adds	r3, #4
 80158c2:	4618      	mov	r0, r3
 80158c4:	f7ff fc54 	bl	8015170 <_ZN13ModelListenerC1Ev>
 80158c8:	4a06      	ldr	r2, [pc, #24]	; (80158e4 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	601a      	str	r2, [r3, #0]
 80158ce:	4a06      	ldr	r2, [pc, #24]	; (80158e8 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	605a      	str	r2, [r3, #4]
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	683a      	ldr	r2, [r7, #0]
 80158d8:	60da      	str	r2, [r3, #12]
{

}
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	4618      	mov	r0, r3
 80158de:	3708      	adds	r7, #8
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}
 80158e4:	0802af44 	.word	0x0802af44
 80158e8:	0802af5c 	.word	0x0802af5c

080158ec <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 80158ec:	b480      	push	{r7}
 80158ee:	b083      	sub	sp, #12
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]

}
 80158f4:	bf00      	nop
 80158f6:	370c      	adds	r7, #12
 80158f8:	46bd      	mov	sp, r7
 80158fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fe:	4770      	bx	lr

08015900 <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 8015900:	b480      	push	{r7}
 8015902:	b083      	sub	sp, #12
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]

}
 8015908:	bf00      	nop
 801590a:	370c      	adds	r7, #12
 801590c:	46bd      	mov	sp, r7
 801590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015912:	4770      	bx	lr

08015914 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8015914:	b580      	push	{r7, lr}
 8015916:	b082      	sub	sp, #8
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
 801591c:	4a05      	ldr	r2, [pc, #20]	; (8015934 <_ZN11Screen2ViewD1Ev+0x20>)
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	601a      	str	r2, [r3, #0]
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	4618      	mov	r0, r3
 8015926:	f7fd fd6d 	bl	8013404 <_ZN15Screen2ViewBaseD1Ev>
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	4618      	mov	r0, r3
 801592e:	3708      	adds	r7, #8
 8015930:	46bd      	mov	sp, r7
 8015932:	bd80      	pop	{r7, pc}
 8015934:	0802af6c 	.word	0x0802af6c

08015938 <_ZN11Screen2ViewD0Ev>:
 8015938:	b580      	push	{r7, lr}
 801593a:	b082      	sub	sp, #8
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f7ff ffe7 	bl	8015914 <_ZN11Screen2ViewD1Ev>
 8015946:	f641 7148 	movw	r1, #8008	; 0x1f48
 801594a:	6878      	ldr	r0, [r7, #4]
 801594c:	f012 fd6e 	bl	802842c <_ZdlPvj>
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	4618      	mov	r0, r3
 8015954:	3708      	adds	r7, #8
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}
	...

0801595c <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 801595c:	b580      	push	{r7, lr}
 801595e:	b082      	sub	sp, #8
 8015960:	af00      	add	r7, sp, #0
 8015962:	6078      	str	r0, [r7, #4]
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	4618      	mov	r0, r3
 8015968:	f7fd fe18 	bl	801359c <_ZN15Screen2ViewBaseC1Ev>
 801596c:	4a03      	ldr	r2, [pc, #12]	; (801597c <_ZN11Screen2ViewC1Ev+0x20>)
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	601a      	str	r2, [r3, #0]
{

}
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	4618      	mov	r0, r3
 8015976:	3708      	adds	r7, #8
 8015978:	46bd      	mov	sp, r7
 801597a:	bd80      	pop	{r7, pc}
 801597c:	0802af6c 	.word	0x0802af6c

08015980 <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b082      	sub	sp, #8
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	4618      	mov	r0, r3
 801598c:	f7fe f848 	bl	8013a20 <_ZN15Screen2ViewBase11setupScreenEv>
}
 8015990:	bf00      	nop
 8015992:	3708      	adds	r7, #8
 8015994:	46bd      	mov	sp, r7
 8015996:	bd80      	pop	{r7, pc}

08015998 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 8015998:	b580      	push	{r7, lr}
 801599a:	b082      	sub	sp, #8
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	4618      	mov	r0, r3
 80159a4:	f7fc fb10 	bl	8011fc8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80159a8:	bf00      	nop
 80159aa:	3708      	adds	r7, #8
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bd80      	pop	{r7, pc}

080159b0 <_ZN16Screen3PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen3Presenter() {};
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b082      	sub	sp, #8
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
 80159b8:	4a09      	ldr	r2, [pc, #36]	; (80159e0 <_ZN16Screen3PresenterD1Ev+0x30>)
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	601a      	str	r2, [r3, #0]
 80159be:	4a09      	ldr	r2, [pc, #36]	; (80159e4 <_ZN16Screen3PresenterD1Ev+0x34>)
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	605a      	str	r2, [r3, #4]
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	3304      	adds	r3, #4
 80159c8:	4618      	mov	r0, r3
 80159ca:	f7ff fbe5 	bl	8015198 <_ZN13ModelListenerD1Ev>
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	4618      	mov	r0, r3
 80159d2:	f7ff fb9d 	bl	8015110 <_ZN8touchgfx9PresenterD1Ev>
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	4618      	mov	r0, r3
 80159da:	3708      	adds	r7, #8
 80159dc:	46bd      	mov	sp, r7
 80159de:	bd80      	pop	{r7, pc}
 80159e0:	0802afa0 	.word	0x0802afa0
 80159e4:	0802afb8 	.word	0x0802afb8

080159e8 <_ZThn4_N16Screen3PresenterD1Ev>:
 80159e8:	f1a0 0004 	sub.w	r0, r0, #4
 80159ec:	e7e0      	b.n	80159b0 <_ZN16Screen3PresenterD1Ev>
 80159ee:	bf00      	nop

080159f0 <_ZN16Screen3PresenterD0Ev>:
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b082      	sub	sp, #8
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
 80159f8:	6878      	ldr	r0, [r7, #4]
 80159fa:	f7ff ffd9 	bl	80159b0 <_ZN16Screen3PresenterD1Ev>
 80159fe:	2110      	movs	r1, #16
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	f012 fd13 	bl	802842c <_ZdlPvj>
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	4618      	mov	r0, r3
 8015a0a:	3708      	adds	r7, #8
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	bd80      	pop	{r7, pc}

08015a10 <_ZThn4_N16Screen3PresenterD0Ev>:
 8015a10:	f1a0 0004 	sub.w	r0, r0, #4
 8015a14:	e7ec      	b.n	80159f0 <_ZN16Screen3PresenterD0Ev>
	...

08015a18 <_ZN16Screen3PresenterC1ER11Screen3View>:
#include <gui/screen3_screen/Screen3View.hpp>
#include <gui/screen3_screen/Screen3Presenter.hpp>

Screen3Presenter::Screen3Presenter(Screen3View& v)
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b082      	sub	sp, #8
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
 8015a20:	6039      	str	r1, [r7, #0]
    : view(v)
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	4618      	mov	r0, r3
 8015a26:	f7ff fb93 	bl	8015150 <_ZN8touchgfx9PresenterC1Ev>
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	3304      	adds	r3, #4
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f7ff fb9e 	bl	8015170 <_ZN13ModelListenerC1Ev>
 8015a34:	4a06      	ldr	r2, [pc, #24]	; (8015a50 <_ZN16Screen3PresenterC1ER11Screen3View+0x38>)
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	601a      	str	r2, [r3, #0]
 8015a3a:	4a06      	ldr	r2, [pc, #24]	; (8015a54 <_ZN16Screen3PresenterC1ER11Screen3View+0x3c>)
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	605a      	str	r2, [r3, #4]
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	683a      	ldr	r2, [r7, #0]
 8015a44:	60da      	str	r2, [r3, #12]
{

}
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	4618      	mov	r0, r3
 8015a4a:	3708      	adds	r7, #8
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bd80      	pop	{r7, pc}
 8015a50:	0802afa0 	.word	0x0802afa0
 8015a54:	0802afb8 	.word	0x0802afb8

08015a58 <_ZN16Screen3Presenter8activateEv>:

void Screen3Presenter::activate()
{
 8015a58:	b480      	push	{r7}
 8015a5a:	b083      	sub	sp, #12
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]

}
 8015a60:	bf00      	nop
 8015a62:	370c      	adds	r7, #12
 8015a64:	46bd      	mov	sp, r7
 8015a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6a:	4770      	bx	lr

08015a6c <_ZN16Screen3Presenter10deactivateEv>:

void Screen3Presenter::deactivate()
{
 8015a6c:	b480      	push	{r7}
 8015a6e:	b083      	sub	sp, #12
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]

}
 8015a74:	bf00      	nop
 8015a76:	370c      	adds	r7, #12
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7e:	4770      	bx	lr

08015a80 <_ZN11Screen3ViewD1Ev>:

class Screen3View : public Screen3ViewBase
{
public:
    Screen3View();
    virtual ~Screen3View() {}
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b082      	sub	sp, #8
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
 8015a88:	4a05      	ldr	r2, [pc, #20]	; (8015aa0 <_ZN11Screen3ViewD1Ev+0x20>)
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	601a      	str	r2, [r3, #0]
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	4618      	mov	r0, r3
 8015a92:	f7fe fb61 	bl	8014158 <_ZN15Screen3ViewBaseD1Ev>
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	4618      	mov	r0, r3
 8015a9a:	3708      	adds	r7, #8
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bd80      	pop	{r7, pc}
 8015aa0:	0802afc8 	.word	0x0802afc8

08015aa4 <_ZN11Screen3ViewD0Ev>:
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b082      	sub	sp, #8
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
 8015aac:	6878      	ldr	r0, [r7, #4]
 8015aae:	f7ff ffe7 	bl	8015a80 <_ZN11Screen3ViewD1Ev>
 8015ab2:	f44f 7106 	mov.w	r1, #536	; 0x218
 8015ab6:	6878      	ldr	r0, [r7, #4]
 8015ab8:	f012 fcb8 	bl	802842c <_ZdlPvj>
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3708      	adds	r7, #8
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}
	...

08015ac8 <_ZN11Screen3ViewC1Ev>:
#include <gui/screen3_screen/Screen3View.hpp>

Screen3View::Screen3View()
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b082      	sub	sp, #8
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f7fe fb94 	bl	8014200 <_ZN15Screen3ViewBaseC1Ev>
 8015ad8:	4a03      	ldr	r2, [pc, #12]	; (8015ae8 <_ZN11Screen3ViewC1Ev+0x20>)
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	601a      	str	r2, [r3, #0]
{

}
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	3708      	adds	r7, #8
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	bd80      	pop	{r7, pc}
 8015ae8:	0802afc8 	.word	0x0802afc8

08015aec <_ZN11Screen3View11setupScreenEv>:

void Screen3View::setupScreen()
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b082      	sub	sp, #8
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
    Screen3ViewBase::setupScreen();
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	4618      	mov	r0, r3
 8015af8:	f7fe fce8 	bl	80144cc <_ZN15Screen3ViewBase11setupScreenEv>
}
 8015afc:	bf00      	nop
 8015afe:	3708      	adds	r7, #8
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}

08015b04 <_ZN11Screen3View14tearDownScreenEv>:

void Screen3View::tearDownScreen()
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b082      	sub	sp, #8
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
    Screen3ViewBase::tearDownScreen();
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	4618      	mov	r0, r3
 8015b10:	f7fc fa5a 	bl	8011fc8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8015b14:	bf00      	nop
 8015b16:	3708      	adds	r7, #8
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	bd80      	pop	{r7, pc}

08015b1c <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b082      	sub	sp, #8
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
 8015b24:	4a09      	ldr	r2, [pc, #36]	; (8015b4c <_ZN15screenPresenterD1Ev+0x30>)
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	601a      	str	r2, [r3, #0]
 8015b2a:	4a09      	ldr	r2, [pc, #36]	; (8015b50 <_ZN15screenPresenterD1Ev+0x34>)
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	605a      	str	r2, [r3, #4]
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	3304      	adds	r3, #4
 8015b34:	4618      	mov	r0, r3
 8015b36:	f7ff fb2f 	bl	8015198 <_ZN13ModelListenerD1Ev>
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f7ff fae7 	bl	8015110 <_ZN8touchgfx9PresenterD1Ev>
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	4618      	mov	r0, r3
 8015b46:	3708      	adds	r7, #8
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd80      	pop	{r7, pc}
 8015b4c:	0802affc 	.word	0x0802affc
 8015b50:	0802b014 	.word	0x0802b014

08015b54 <_ZThn4_N15screenPresenterD1Ev>:
 8015b54:	f1a0 0004 	sub.w	r0, r0, #4
 8015b58:	e7e0      	b.n	8015b1c <_ZN15screenPresenterD1Ev>
 8015b5a:	bf00      	nop

08015b5c <_ZN15screenPresenterD0Ev>:
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b082      	sub	sp, #8
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
 8015b64:	6878      	ldr	r0, [r7, #4]
 8015b66:	f7ff ffd9 	bl	8015b1c <_ZN15screenPresenterD1Ev>
 8015b6a:	2110      	movs	r1, #16
 8015b6c:	6878      	ldr	r0, [r7, #4]
 8015b6e:	f012 fc5d 	bl	802842c <_ZdlPvj>
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	4618      	mov	r0, r3
 8015b76:	3708      	adds	r7, #8
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	bd80      	pop	{r7, pc}

08015b7c <_ZThn4_N15screenPresenterD0Ev>:
 8015b7c:	f1a0 0004 	sub.w	r0, r0, #4
 8015b80:	e7ec      	b.n	8015b5c <_ZN15screenPresenterD0Ev>
	...

08015b84 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b082      	sub	sp, #8
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	6078      	str	r0, [r7, #4]
 8015b8c:	6039      	str	r1, [r7, #0]
    : view(v)
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	4618      	mov	r0, r3
 8015b92:	f7ff fadd 	bl	8015150 <_ZN8touchgfx9PresenterC1Ev>
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	3304      	adds	r3, #4
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	f7ff fae8 	bl	8015170 <_ZN13ModelListenerC1Ev>
 8015ba0:	4a06      	ldr	r2, [pc, #24]	; (8015bbc <_ZN15screenPresenterC1ER10screenView+0x38>)
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	601a      	str	r2, [r3, #0]
 8015ba6:	4a06      	ldr	r2, [pc, #24]	; (8015bc0 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	605a      	str	r2, [r3, #4]
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	683a      	ldr	r2, [r7, #0]
 8015bb0:	60da      	str	r2, [r3, #12]
{

}
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	3708      	adds	r7, #8
 8015bb8:	46bd      	mov	sp, r7
 8015bba:	bd80      	pop	{r7, pc}
 8015bbc:	0802affc 	.word	0x0802affc
 8015bc0:	0802b014 	.word	0x0802b014

08015bc4 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8015bc4:	b480      	push	{r7}
 8015bc6:	b083      	sub	sp, #12
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]

}
 8015bcc:	bf00      	nop
 8015bce:	370c      	adds	r7, #12
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd6:	4770      	bx	lr

08015bd8 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8015bd8:	b480      	push	{r7}
 8015bda:	b083      	sub	sp, #12
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]

}
 8015be0:	bf00      	nop
 8015be2:	370c      	adds	r7, #12
 8015be4:	46bd      	mov	sp, r7
 8015be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bea:	4770      	bx	lr

08015bec <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b082      	sub	sp, #8
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
 8015bf4:	4a05      	ldr	r2, [pc, #20]	; (8015c0c <_ZN10screenViewD1Ev+0x20>)
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	601a      	str	r2, [r3, #0]
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	f7fe fd8f 	bl	8014720 <_ZN14screenViewBaseD1Ev>
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	4618      	mov	r0, r3
 8015c06:	3708      	adds	r7, #8
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	bd80      	pop	{r7, pc}
 8015c0c:	0802b024 	.word	0x0802b024

08015c10 <_ZN10screenViewD0Ev>:
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b082      	sub	sp, #8
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
 8015c18:	6878      	ldr	r0, [r7, #4]
 8015c1a:	f7ff ffe7 	bl	8015bec <_ZN10screenViewD1Ev>
 8015c1e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015c22:	6878      	ldr	r0, [r7, #4]
 8015c24:	f012 fc02 	bl	802842c <_ZdlPvj>
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	3708      	adds	r7, #8
 8015c2e:	46bd      	mov	sp, r7
 8015c30:	bd80      	pop	{r7, pc}
	...

08015c34 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b082      	sub	sp, #8
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f7fe fdb8 	bl	80147b4 <_ZN14screenViewBaseC1Ev>
 8015c44:	4a03      	ldr	r2, [pc, #12]	; (8015c54 <_ZN10screenViewC1Ev+0x20>)
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	601a      	str	r2, [r3, #0]
{

}
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	3708      	adds	r7, #8
 8015c50:	46bd      	mov	sp, r7
 8015c52:	bd80      	pop	{r7, pc}
 8015c54:	0802b024 	.word	0x0802b024

08015c58 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b082      	sub	sp, #8
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	4618      	mov	r0, r3
 8015c64:	f7fe ff16 	bl	8014a94 <_ZN14screenViewBase11setupScreenEv>
}
 8015c68:	bf00      	nop
 8015c6a:	3708      	adds	r7, #8
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}

08015c70 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b082      	sub	sp, #8
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f7fc f9a4 	bl	8011fc8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8015c80:	bf00      	nop
 8015c82:	3708      	adds	r7, #8
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}

08015c88 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8015c88:	b480      	push	{r7}
 8015c8a:	b083      	sub	sp, #12
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
    {
 8015c90:	4a04      	ldr	r2, [pc, #16]	; (8015ca4 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	601a      	str	r2, [r3, #0]
    }
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	4618      	mov	r0, r3
 8015c9a:	370c      	adds	r7, #12
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca2:	4770      	bx	lr
 8015ca4:	0802b070 	.word	0x0802b070

08015ca8 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b082      	sub	sp, #8
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
    }
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	f7ff ffe9 	bl	8015c88 <_ZN8touchgfx15TouchControllerD1Ev>
 8015cb6:	2104      	movs	r1, #4
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	f012 fbb7 	bl	802842c <_ZdlPvj>
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	3708      	adds	r7, #8
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}

08015cc8 <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b082      	sub	sp, #8
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	tsDriver = &ft5336_ts_drv;
 8015cd0:	4b05      	ldr	r3, [pc, #20]	; (8015ce8 <_ZN20STM32TouchController4initEv+0x20>)
 8015cd2:	4a06      	ldr	r2, [pc, #24]	; (8015cec <_ZN20STM32TouchController4initEv+0x24>)
 8015cd4:	601a      	str	r2, [r3, #0]
	tsDriver->Start(TS_I2C_ADDRESS);
 8015cd6:	4b04      	ldr	r3, [pc, #16]	; (8015ce8 <_ZN20STM32TouchController4initEv+0x20>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	68db      	ldr	r3, [r3, #12]
 8015cdc:	2070      	movs	r0, #112	; 0x70
 8015cde:	4798      	blx	r3

}
 8015ce0:	bf00      	nop
 8015ce2:	3708      	adds	r7, #8
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bd80      	pop	{r7, pc}
 8015ce8:	200085d0 	.word	0x200085d0
 8015cec:	20000004 	.word	0x20000004

08015cf0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b084      	sub	sp, #16
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	60f8      	str	r0, [r7, #12]
 8015cf8:	60b9      	str	r1, [r7, #8]
 8015cfa:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	if (tsDriver)
 8015cfc:	4b0f      	ldr	r3, [pc, #60]	; (8015d3c <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d015      	beq.n	8015d30 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	    {
	        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8015d04:	4b0d      	ldr	r3, [pc, #52]	; (8015d3c <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	691b      	ldr	r3, [r3, #16]
 8015d0a:	2070      	movs	r0, #112	; 0x70
 8015d0c:	4798      	blx	r3
 8015d0e:	4603      	mov	r3, r0
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	bf14      	ite	ne
 8015d14:	2301      	movne	r3, #1
 8015d16:	2300      	moveq	r3, #0
 8015d18:	b2db      	uxtb	r3, r3
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d008      	beq.n	8015d30 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	        {
	            /* Get each touch coordinates */
	            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8015d1e:	4b07      	ldr	r3, [pc, #28]	; (8015d3c <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	695b      	ldr	r3, [r3, #20]
 8015d24:	68ba      	ldr	r2, [r7, #8]
 8015d26:	6879      	ldr	r1, [r7, #4]
 8015d28:	2070      	movs	r0, #112	; 0x70
 8015d2a:	4798      	blx	r3
	            return true;
 8015d2c:	2301      	movs	r3, #1
 8015d2e:	e000      	b.n	8015d32 <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
	        }
	    }


    return false;
 8015d30:	2300      	movs	r3, #0
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	3710      	adds	r7, #16
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd80      	pop	{r7, pc}
 8015d3a:	bf00      	nop
 8015d3c:	200085d0 	.word	0x200085d0

08015d40 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b082      	sub	sp, #8
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	6078      	str	r0, [r7, #4]
 8015d48:	4a05      	ldr	r2, [pc, #20]	; (8015d60 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	601a      	str	r2, [r3, #0]
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	4618      	mov	r0, r3
 8015d52:	f7ff ff99 	bl	8015c88 <_ZN8touchgfx15TouchControllerD1Ev>
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	4618      	mov	r0, r3
 8015d5a:	3708      	adds	r7, #8
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	bd80      	pop	{r7, pc}
 8015d60:	0802b058 	.word	0x0802b058

08015d64 <_ZN20STM32TouchControllerD0Ev>:
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b082      	sub	sp, #8
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
 8015d6c:	6878      	ldr	r0, [r7, #4]
 8015d6e:	f7ff ffe7 	bl	8015d40 <_ZN20STM32TouchControllerD1Ev>
 8015d72:	2104      	movs	r1, #4
 8015d74:	6878      	ldr	r0, [r7, #4]
 8015d76:	f012 fb59 	bl	802842c <_ZdlPvj>
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	3708      	adds	r7, #8
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bd80      	pop	{r7, pc}

08015d84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8015d84:	b480      	push	{r7}
 8015d86:	b083      	sub	sp, #12
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	4603      	mov	r3, r0
 8015d8c:	71fb      	strb	r3, [r7, #7]

}
 8015d8e:	bf00      	nop
 8015d90:	370c      	adds	r7, #12
 8015d92:	46bd      	mov	sp, r7
 8015d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d98:	4770      	bx	lr

08015d9a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8015d9a:	b480      	push	{r7}
 8015d9c:	b083      	sub	sp, #12
 8015d9e:	af00      	add	r7, sp, #0
 8015da0:	4603      	mov	r3, r0
 8015da2:	71fb      	strb	r3, [r7, #7]

}
 8015da4:	bf00      	nop
 8015da6:	370c      	adds	r7, #12
 8015da8:	46bd      	mov	sp, r7
 8015daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dae:	4770      	bx	lr

08015db0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8015db0:	b480      	push	{r7}
 8015db2:	b083      	sub	sp, #12
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	4603      	mov	r3, r0
 8015db8:	71fb      	strb	r3, [r7, #7]

}
 8015dba:	bf00      	nop
 8015dbc:	370c      	adds	r7, #12
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc4:	4770      	bx	lr
	...

08015dc8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8015dc8:	b480      	push	{r7}
 8015dca:	b083      	sub	sp, #12
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
    {
 8015dd0:	4a04      	ldr	r2, [pc, #16]	; (8015de4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	601a      	str	r2, [r3, #0]
    }
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	4618      	mov	r0, r3
 8015dda:	370c      	adds	r7, #12
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de2:	4770      	bx	lr
 8015de4:	0802bddc 	.word	0x0802bddc

08015de8 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b082      	sub	sp, #8
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	6078      	str	r0, [r7, #4]
    }
 8015df0:	6878      	ldr	r0, [r7, #4]
 8015df2:	f7ff ffe9 	bl	8015dc8 <_ZN8touchgfx3HALD1Ev>
 8015df6:	2178      	movs	r1, #120	; 0x78
 8015df8:	6878      	ldr	r0, [r7, #4]
 8015dfa:	f012 fb17 	bl	802842c <_ZdlPvj>
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	4618      	mov	r0, r3
 8015e02:	3708      	adds	r7, #8
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bd80      	pop	{r7, pc}

08015e08 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8015e08:	b480      	push	{r7}
 8015e0a:	b083      	sub	sp, #12
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
 8015e10:	460b      	mov	r3, r1
 8015e12:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	78fa      	ldrb	r2, [r7, #3]
 8015e18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	2201      	movs	r2, #1
 8015e20:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8015e24:	bf00      	nop
 8015e26:	370c      	adds	r7, #12
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2e:	4770      	bx	lr

08015e30 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b082      	sub	sp, #8
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	685a      	ldr	r2, [r3, #4]
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	685b      	ldr	r3, [r3, #4]
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	4610      	mov	r0, r2
 8015e46:	4798      	blx	r3
 8015e48:	4603      	mov	r3, r0
    }
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	3708      	adds	r7, #8
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bd80      	pop	{r7, pc}

08015e52 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8015e52:	b580      	push	{r7, lr}
 8015e54:	b082      	sub	sp, #8
 8015e56:	af00      	add	r7, sp, #0
 8015e58:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8015e5a:	6878      	ldr	r0, [r7, #4]
 8015e5c:	f003 f864 	bl	8018f28 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	3390      	adds	r3, #144	; 0x90
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	6878      	ldr	r0, [r7, #4]
 8015e6a:	4798      	blx	r3
    }
 8015e6c:	bf00      	nop
 8015e6e:	3708      	adds	r7, #8
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}

08015e74 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8015e74:	b480      	push	{r7}
 8015e76:	b083      	sub	sp, #12
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
 8015e7c:	6039      	str	r1, [r7, #0]
        return false;
 8015e7e:	2300      	movs	r3, #0
    }
 8015e80:	4618      	mov	r0, r3
 8015e82:	370c      	adds	r7, #12
 8015e84:	46bd      	mov	sp, r7
 8015e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8a:	4770      	bx	lr

08015e8c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    TOUCHGFX_DEPRECATED(
 8015e8c:	b590      	push	{r4, r7, lr}
 8015e8e:	b08b      	sub	sp, #44	; 0x2c
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	60f8      	str	r0, [r7, #12]
 8015e94:	60b9      	str	r1, [r7, #8]
 8015e96:	4611      	mov	r1, r2
 8015e98:	461a      	mov	r2, r3
 8015e9a:	460b      	mov	r3, r1
 8015e9c:	80fb      	strh	r3, [r7, #6]
 8015e9e:	4613      	mov	r3, r2
 8015ea0:	717b      	strb	r3, [r7, #5]
        uint16_t stride = lcd().framebufferStride();
 8015ea2:	f7f9 fe67 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 8015ea6:	4602      	mov	r2, r0
 8015ea8:	6813      	ldr	r3, [r2, #0]
 8015eaa:	3324      	adds	r3, #36	; 0x24
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	4610      	mov	r0, r2
 8015eb0:	4798      	blx	r3
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8015eb6:	8b7b      	ldrh	r3, [r7, #26]
 8015eb8:	4a3d      	ldr	r2, [pc, #244]	; (8015fb0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8015eba:	8812      	ldrh	r2, [r2, #0]
 8015ebc:	fb02 f303 	mul.w	r3, r2, r3
 8015ec0:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8015ec2:	68bb      	ldr	r3, [r7, #8]
 8015ec4:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8015ece:	797b      	ldrb	r3, [r7, #5]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d005      	beq.n	8015ee0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8015ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ed6:	697b      	ldr	r3, [r7, #20]
 8015ed8:	4413      	add	r3, r2
 8015eda:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8015edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ede:	623b      	str	r3, [r7, #32]
        if (useAnimationStorage)
 8015ee0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d005      	beq.n	8015ef4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8015ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015eea:	697b      	ldr	r3, [r7, #20]
 8015eec:	4413      	add	r3, r2
 8015eee:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8015ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ef2:	61fb      	str	r3, [r7, #28]
        switch (depth)
 8015ef4:	88fb      	ldrh	r3, [r7, #6]
 8015ef6:	3b01      	subs	r3, #1
 8015ef8:	2b1f      	cmp	r3, #31
 8015efa:	d84d      	bhi.n	8015f98 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8015efc:	a201      	add	r2, pc, #4	; (adr r2, 8015f04 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8015efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f02:	bf00      	nop
 8015f04:	08015f85 	.word	0x08015f85
 8015f08:	08015f85 	.word	0x08015f85
 8015f0c:	08015f99 	.word	0x08015f99
 8015f10:	08015f85 	.word	0x08015f85
 8015f14:	08015f99 	.word	0x08015f99
 8015f18:	08015f99 	.word	0x08015f99
 8015f1c:	08015f99 	.word	0x08015f99
 8015f20:	08015f85 	.word	0x08015f85
 8015f24:	08015f99 	.word	0x08015f99
 8015f28:	08015f99 	.word	0x08015f99
 8015f2c:	08015f99 	.word	0x08015f99
 8015f30:	08015f99 	.word	0x08015f99
 8015f34:	08015f99 	.word	0x08015f99
 8015f38:	08015f99 	.word	0x08015f99
 8015f3c:	08015f99 	.word	0x08015f99
 8015f40:	08015f85 	.word	0x08015f85
 8015f44:	08015f99 	.word	0x08015f99
 8015f48:	08015f99 	.word	0x08015f99
 8015f4c:	08015f99 	.word	0x08015f99
 8015f50:	08015f99 	.word	0x08015f99
 8015f54:	08015f99 	.word	0x08015f99
 8015f58:	08015f99 	.word	0x08015f99
 8015f5c:	08015f99 	.word	0x08015f99
 8015f60:	08015f85 	.word	0x08015f85
 8015f64:	08015f99 	.word	0x08015f99
 8015f68:	08015f99 	.word	0x08015f99
 8015f6c:	08015f99 	.word	0x08015f99
 8015f70:	08015f99 	.word	0x08015f99
 8015f74:	08015f99 	.word	0x08015f99
 8015f78:	08015f99 	.word	0x08015f99
 8015f7c:	08015f99 	.word	0x08015f99
 8015f80:	08015f85 	.word	0x08015f85
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	3374      	adds	r3, #116	; 0x74
 8015f8a:	681c      	ldr	r4, [r3, #0]
 8015f8c:	69fb      	ldr	r3, [r7, #28]
 8015f8e:	6a3a      	ldr	r2, [r7, #32]
 8015f90:	68b9      	ldr	r1, [r7, #8]
 8015f92:	68f8      	ldr	r0, [r7, #12]
 8015f94:	47a0      	blx	r4
            break;
 8015f96:	e006      	b.n	8015fa6 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
            assert(0 && "Unsupported bit depth");
 8015f98:	4b06      	ldr	r3, [pc, #24]	; (8015fb4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8015f9a:	4a07      	ldr	r2, [pc, #28]	; (8015fb8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8015f9c:	f240 216f 	movw	r1, #623	; 0x26f
 8015fa0:	4806      	ldr	r0, [pc, #24]	; (8015fbc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8015fa2:	f012 fa6f 	bl	8028484 <__assert_func>
    }
 8015fa6:	bf00      	nop
 8015fa8:	372c      	adds	r7, #44	; 0x2c
 8015faa:	46bd      	mov	sp, r7
 8015fac:	bd90      	pop	{r4, r7, pc}
 8015fae:	bf00      	nop
 8015fb0:	2000b418 	.word	0x2000b418
 8015fb4:	08029c78 	.word	0x08029c78
 8015fb8:	0802b184 	.word	0x0802b184
 8015fbc:	08029c98 	.word	0x08029c98

08015fc0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b084      	sub	sp, #16
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	60f8      	str	r0, [r7, #12]
 8015fc8:	60b9      	str	r1, [r7, #8]
 8015fca:	607a      	str	r2, [r7, #4]
 8015fcc:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8015fce:	68bb      	ldr	r3, [r7, #8]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d106      	bne.n	8015fe2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8015fd4:	4b11      	ldr	r3, [pc, #68]	; (801601c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8015fd6:	4a12      	ldr	r2, [pc, #72]	; (8016020 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8015fd8:	f240 2182 	movw	r1, #642	; 0x282
 8015fdc:	4811      	ldr	r0, [pc, #68]	; (8016024 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8015fde:	f012 fa51 	bl	8028484 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	68ba      	ldr	r2, [r7, #8]
 8015fe6:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	687a      	ldr	r2, [r7, #4]
 8015fec:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	683a      	ldr	r2, [r7, #0]
 8015ff2:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	bf14      	ite	ne
 8015ffa:	2301      	movne	r3, #1
 8015ffc:	2300      	moveq	r3, #0
 8015ffe:	b2da      	uxtb	r2, r3
 8016000:	4b09      	ldr	r3, [pc, #36]	; (8016028 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8016002:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8016004:	683b      	ldr	r3, [r7, #0]
 8016006:	2b00      	cmp	r3, #0
 8016008:	bf14      	ite	ne
 801600a:	2301      	movne	r3, #1
 801600c:	2300      	moveq	r3, #0
 801600e:	b2da      	uxtb	r2, r3
 8016010:	4b06      	ldr	r3, [pc, #24]	; (801602c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8016012:	701a      	strb	r2, [r3, #0]
    }
 8016014:	bf00      	nop
 8016016:	3710      	adds	r7, #16
 8016018:	46bd      	mov	sp, r7
 801601a:	bd80      	pop	{r7, pc}
 801601c:	08029cdc 	.word	0x08029cdc
 8016020:	0802b134 	.word	0x0802b134
 8016024:	08029c98 	.word	0x08029c98
 8016028:	2000b41a 	.word	0x2000b41a
 801602c:	2000b41b 	.word	0x2000b41b

08016030 <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 8016030:	b580      	push	{r7, lr}
 8016032:	b082      	sub	sp, #8
 8016034:	af00      	add	r7, sp, #0
 8016036:	6078      	str	r0, [r7, #4]
 8016038:	460b      	mov	r3, r1
 801603a:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016040:	2b00      	cmp	r3, #0
 8016042:	d004      	beq.n	801604e <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016048:	887a      	ldrh	r2, [r7, #2]
 801604a:	4610      	mov	r0, r2
 801604c:	4798      	blx	r3
    }
 801604e:	bf00      	nop
 8016050:	3708      	adds	r7, #8
 8016052:	46bd      	mov	sp, r7
 8016054:	bd80      	pop	{r7, pc}

08016056 <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 8016056:	b580      	push	{r7, lr}
 8016058:	b082      	sub	sp, #8
 801605a:	af00      	add	r7, sp, #0
 801605c:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	685a      	ldr	r2, [r3, #4]
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	685b      	ldr	r3, [r3, #4]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	3318      	adds	r3, #24
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	4610      	mov	r0, r2
 801606e:	4798      	blx	r3
 8016070:	4603      	mov	r3, r0
    }
 8016072:	4618      	mov	r0, r3
 8016074:	3708      	adds	r7, #8
 8016076:	46bd      	mov	sp, r7
 8016078:	bd80      	pop	{r7, pc}
	...

0801607c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 801607c:	b480      	push	{r7}
 801607e:	b083      	sub	sp, #12
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016090:	429a      	cmp	r2, r3
 8016092:	d017      	beq.n	80160c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8016094:	4b1a      	ldr	r3, [pc, #104]	; (8016100 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d12a      	bne.n	80160f2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801609c:	4b19      	ldr	r3, [pc, #100]	; (8016104 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801609e:	881a      	ldrh	r2, [r3, #0]
 80160a0:	4b19      	ldr	r3, [pc, #100]	; (8016108 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80160a2:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80160a4:	4b19      	ldr	r3, [pc, #100]	; (801610c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80160a6:	881a      	ldrh	r2, [r3, #0]
 80160a8:	4b19      	ldr	r3, [pc, #100]	; (8016110 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80160aa:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80160ac:	4b16      	ldr	r3, [pc, #88]	; (8016108 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80160ae:	881a      	ldrh	r2, [r3, #0]
 80160b0:	4b16      	ldr	r3, [pc, #88]	; (801610c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80160b2:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80160b4:	4b16      	ldr	r3, [pc, #88]	; (8016110 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80160b6:	881a      	ldrh	r2, [r3, #0]
 80160b8:	4b12      	ldr	r3, [pc, #72]	; (8016104 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80160ba:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80160bc:	4b10      	ldr	r3, [pc, #64]	; (8016100 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80160be:	2201      	movs	r2, #1
 80160c0:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80160c2:	e016      	b.n	80160f2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80160c4:	4b0e      	ldr	r3, [pc, #56]	; (8016100 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80160c6:	781b      	ldrb	r3, [r3, #0]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d012      	beq.n	80160f2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80160cc:	4b0f      	ldr	r3, [pc, #60]	; (801610c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80160ce:	881a      	ldrh	r2, [r3, #0]
 80160d0:	4b0d      	ldr	r3, [pc, #52]	; (8016108 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80160d2:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80160d4:	4b0b      	ldr	r3, [pc, #44]	; (8016104 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80160d6:	881a      	ldrh	r2, [r3, #0]
 80160d8:	4b0d      	ldr	r3, [pc, #52]	; (8016110 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80160da:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80160dc:	4b0c      	ldr	r3, [pc, #48]	; (8016110 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80160de:	881a      	ldrh	r2, [r3, #0]
 80160e0:	4b0a      	ldr	r3, [pc, #40]	; (801610c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80160e2:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80160e4:	4b08      	ldr	r3, [pc, #32]	; (8016108 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80160e6:	881a      	ldrh	r2, [r3, #0]
 80160e8:	4b06      	ldr	r3, [pc, #24]	; (8016104 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80160ea:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80160ec:	4b04      	ldr	r3, [pc, #16]	; (8016100 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80160ee:	2200      	movs	r2, #0
 80160f0:	701a      	strb	r2, [r3, #0]
    }
 80160f2:	bf00      	nop
 80160f4:	370c      	adds	r7, #12
 80160f6:	46bd      	mov	sp, r7
 80160f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160fc:	4770      	bx	lr
 80160fe:	bf00      	nop
 8016100:	2000b414 	.word	0x2000b414
 8016104:	2000b410 	.word	0x2000b410
 8016108:	2000b416 	.word	0x2000b416
 801610c:	2000b412 	.word	0x2000b412
 8016110:	2000b418 	.word	0x2000b418

08016114 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8016114:	b580      	push	{r7, lr}
 8016116:	b082      	sub	sp, #8
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	4618      	mov	r0, r3
 8016120:	f002 f985 	bl	801842e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8016124:	bf00      	nop
 8016126:	3708      	adds	r7, #8
 8016128:	46bd      	mov	sp, r7
 801612a:	bd80      	pop	{r7, pc}

0801612c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 801612c:	b580      	push	{r7, lr}
 801612e:	b082      	sub	sp, #8
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
 8016134:	4a05      	ldr	r2, [pc, #20]	; (801614c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	601a      	str	r2, [r3, #0]
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	4618      	mov	r0, r3
 801613e:	f7ff fe43 	bl	8015dc8 <_ZN8touchgfx3HALD1Ev>
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	4618      	mov	r0, r3
 8016146:	3708      	adds	r7, #8
 8016148:	46bd      	mov	sp, r7
 801614a:	bd80      	pop	{r7, pc}
 801614c:	0802b39c 	.word	0x0802b39c

08016150 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8016150:	b580      	push	{r7, lr}
 8016152:	b082      	sub	sp, #8
 8016154:	af00      	add	r7, sp, #0
 8016156:	6078      	str	r0, [r7, #4]
 8016158:	6878      	ldr	r0, [r7, #4]
 801615a:	f7ff ffe7 	bl	801612c <_ZN20TouchGFXGeneratedHALD1Ev>
 801615e:	2178      	movs	r1, #120	; 0x78
 8016160:	6878      	ldr	r0, [r7, #4]
 8016162:	f012 f963 	bl	802842c <_ZdlPvj>
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	4618      	mov	r0, r3
 801616a:	3708      	adds	r7, #8
 801616c:	46bd      	mov	sp, r7
 801616e:	bd80      	pop	{r7, pc}

08016170 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8016170:	b580      	push	{r7, lr}
 8016172:	b082      	sub	sp, #8
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	4618      	mov	r0, r3
 801617c:	f7ff ffca 	bl	8016114 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8016180:	bf00      	nop
 8016182:	3708      	adds	r7, #8
 8016184:	46bd      	mov	sp, r7
 8016186:	bd80      	pop	{r7, pc}

08016188 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b082      	sub	sp, #8
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	4618      	mov	r0, r3
 8016194:	f001 fafc 	bl	8017790 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8016198:	bf00      	nop
 801619a:	3708      	adds	r7, #8
 801619c:	46bd      	mov	sp, r7
 801619e:	bd80      	pop	{r7, pc}

080161a0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80161a0:	b580      	push	{r7, lr}
 80161a2:	b082      	sub	sp, #8
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	4618      	mov	r0, r3
 80161ac:	f001 fb7c 	bl	80178a8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80161b0:	4603      	mov	r3, r0
}
 80161b2:	4618      	mov	r0, r3
 80161b4:	3708      	adds	r7, #8
 80161b6:	46bd      	mov	sp, r7
 80161b8:	bd80      	pop	{r7, pc}

080161ba <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80161ba:	b580      	push	{r7, lr}
 80161bc:	b082      	sub	sp, #8
 80161be:	af00      	add	r7, sp, #0
 80161c0:	6078      	str	r0, [r7, #4]
 80161c2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	6839      	ldr	r1, [r7, #0]
 80161c8:	4618      	mov	r0, r3
 80161ca:	f001 fb7b 	bl	80178c4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80161ce:	bf00      	nop
 80161d0:	3708      	adds	r7, #8
 80161d2:	46bd      	mov	sp, r7
 80161d4:	bd80      	pop	{r7, pc}

080161d6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80161d6:	b580      	push	{r7, lr}
 80161d8:	b082      	sub	sp, #8
 80161da:	af00      	add	r7, sp, #0
 80161dc:	6078      	str	r0, [r7, #4]
 80161de:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	6839      	ldr	r1, [r7, #0]
 80161e4:	4618      	mov	r0, r3
 80161e6:	f001 fb83 	bl	80178f0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 80161ea:	bf00      	nop
 80161ec:	3708      	adds	r7, #8
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}

080161f2 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80161f2:	b580      	push	{r7, lr}
 80161f4:	b084      	sub	sp, #16
 80161f6:	af00      	add	r7, sp, #0
 80161f8:	60f8      	str	r0, [r7, #12]
 80161fa:	60b9      	str	r1, [r7, #8]
 80161fc:	607a      	str	r2, [r7, #4]
 80161fe:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8016200:	68f8      	ldr	r0, [r7, #12]
 8016202:	683b      	ldr	r3, [r7, #0]
 8016204:	687a      	ldr	r2, [r7, #4]
 8016206:	68b9      	ldr	r1, [r7, #8]
 8016208:	f002 fa4b 	bl	80186a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801620c:	4603      	mov	r3, r0
}
 801620e:	4618      	mov	r0, r3
 8016210:	3710      	adds	r7, #16
 8016212:	46bd      	mov	sp, r7
 8016214:	bd80      	pop	{r7, pc}

08016216 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8016216:	b580      	push	{r7, lr}
 8016218:	b082      	sub	sp, #8
 801621a:	af00      	add	r7, sp, #0
 801621c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	4618      	mov	r0, r3
 8016222:	f001 fae7 	bl	80177f4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8016226:	bf00      	nop
 8016228:	3708      	adds	r7, #8
 801622a:	46bd      	mov	sp, r7
 801622c:	bd80      	pop	{r7, pc}

0801622e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801622e:	b580      	push	{r7, lr}
 8016230:	b082      	sub	sp, #8
 8016232:	af00      	add	r7, sp, #0
 8016234:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	4618      	mov	r0, r3
 801623a:	f001 faeb 	bl	8017814 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801623e:	bf00      	nop
 8016240:	3708      	adds	r7, #8
 8016242:	46bd      	mov	sp, r7
 8016244:	bd80      	pop	{r7, pc}

08016246 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8016246:	b580      	push	{r7, lr}
 8016248:	b082      	sub	sp, #8
 801624a:	af00      	add	r7, sp, #0
 801624c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	4618      	mov	r0, r3
 8016252:	f001 faed 	bl	8017830 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8016256:	bf00      	nop
 8016258:	3708      	adds	r7, #8
 801625a:	46bd      	mov	sp, r7
 801625c:	bd80      	pop	{r7, pc}

0801625e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 801625e:	b580      	push	{r7, lr}
 8016260:	b082      	sub	sp, #8
 8016262:	af00      	add	r7, sp, #0
 8016264:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	4618      	mov	r0, r3
 801626a:	f001 faef 	bl	801784c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801626e:	bf00      	nop
 8016270:	3708      	adds	r7, #8
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}
	...

08016278 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8016278:	b580      	push	{r7, lr}
 801627a:	b082      	sub	sp, #8
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
 8016280:	4a05      	ldr	r2, [pc, #20]	; (8016298 <_ZN11TouchGFXHALD1Ev+0x20>)
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	601a      	str	r2, [r3, #0]
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	4618      	mov	r0, r3
 801628a:	f7ff ff4f 	bl	801612c <_ZN20TouchGFXGeneratedHALD1Ev>
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	4618      	mov	r0, r3
 8016292:	3708      	adds	r7, #8
 8016294:	46bd      	mov	sp, r7
 8016296:	bd80      	pop	{r7, pc}
 8016298:	0802b088 	.word	0x0802b088

0801629c <_ZN11TouchGFXHALD0Ev>:
 801629c:	b580      	push	{r7, lr}
 801629e:	b082      	sub	sp, #8
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
 80162a4:	6878      	ldr	r0, [r7, #4]
 80162a6:	f7ff ffe7 	bl	8016278 <_ZN11TouchGFXHALD1Ev>
 80162aa:	2178      	movs	r1, #120	; 0x78
 80162ac:	6878      	ldr	r0, [r7, #4]
 80162ae:	f012 f8bd 	bl	802842c <_ZdlPvj>
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	4618      	mov	r0, r3
 80162b6:	3708      	adds	r7, #8
 80162b8:	46bd      	mov	sp, r7
 80162ba:	bd80      	pop	{r7, pc}

080162bc <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 80162c0:	2101      	movs	r1, #1
 80162c2:	4811      	ldr	r0, [pc, #68]	; (8016308 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80162c4:	f7f5 feb4 	bl	800c030 <osSemaphoreCreate>
 80162c8:	4602      	mov	r2, r0
 80162ca:	4b10      	ldr	r3, [pc, #64]	; (801630c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80162cc:	601a      	str	r2, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80162ce:	4b0f      	ldr	r3, [pc, #60]	; (801630c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d105      	bne.n	80162e2 <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 80162d6:	4b0e      	ldr	r3, [pc, #56]	; (8016310 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80162d8:	4a0e      	ldr	r2, [pc, #56]	; (8016314 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80162da:	2125      	movs	r1, #37	; 0x25
 80162dc:	480e      	ldr	r0, [pc, #56]	; (8016318 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80162de:	f012 f8d1 	bl	8028484 <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 80162e2:	2101      	movs	r1, #1
 80162e4:	480d      	ldr	r0, [pc, #52]	; (801631c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80162e6:	f7f5 fea3 	bl	800c030 <osSemaphoreCreate>
 80162ea:	4602      	mov	r2, r0
 80162ec:	4b0c      	ldr	r3, [pc, #48]	; (8016320 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80162ee:	601a      	str	r2, [r3, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 80162f0:	4b0b      	ldr	r3, [pc, #44]	; (8016320 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d105      	bne.n	8016304 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 80162f8:	4b0a      	ldr	r3, [pc, #40]	; (8016324 <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 80162fa:	4a06      	ldr	r2, [pc, #24]	; (8016314 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80162fc:	2128      	movs	r1, #40	; 0x28
 80162fe:	4806      	ldr	r0, [pc, #24]	; (8016318 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8016300:	f012 f8c0 	bl	8028484 <__assert_func>
}
 8016304:	bf00      	nop
 8016306:	bd80      	pop	{r7, pc}
 8016308:	0802b1d8 	.word	0x0802b1d8
 801630c:	200085d4 	.word	0x200085d4
 8016310:	08029d14 	.word	0x08029d14
 8016314:	0802b1e8 	.word	0x0802b1e8
 8016318:	08029d60 	.word	0x08029d60
 801631c:	0802b1e0 	.word	0x0802b1e0
 8016320:	200085d8 	.word	0x200085d8
 8016324:	08029d8c 	.word	0x08029d8c

08016328 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8016328:	b580      	push	{r7, lr}
 801632a:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 801632c:	4b04      	ldr	r3, [pc, #16]	; (8016340 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	f04f 31ff 	mov.w	r1, #4294967295
 8016334:	4618      	mov	r0, r3
 8016336:	f7f5 febb 	bl	800c0b0 <osSemaphoreWait>
}
 801633a:	bf00      	nop
 801633c:	bd80      	pop	{r7, pc}
 801633e:	bf00      	nop
 8016340:	200085d4 	.word	0x200085d4

08016344 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8016344:	b580      	push	{r7, lr}
 8016346:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8016348:	4b03      	ldr	r3, [pc, #12]	; (8016358 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	4618      	mov	r0, r3
 801634e:	f7f5 fefd 	bl	800c14c <osSemaphoreRelease>
}
 8016352:	bf00      	nop
 8016354:	bd80      	pop	{r7, pc}
 8016356:	bf00      	nop
 8016358:	200085d4 	.word	0x200085d4

0801635c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 801635c:	b580      	push	{r7, lr}
 801635e:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 8016360:	4b03      	ldr	r3, [pc, #12]	; (8016370 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	2100      	movs	r1, #0
 8016366:	4618      	mov	r0, r3
 8016368:	f7f5 fea2 	bl	800c0b0 <osSemaphoreWait>
}
 801636c:	bf00      	nop
 801636e:	bd80      	pop	{r7, pc}
 8016370:	200085d4 	.word	0x200085d4

08016374 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8016374:	b580      	push	{r7, lr}
 8016376:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 8016378:	4b03      	ldr	r3, [pc, #12]	; (8016388 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	4618      	mov	r0, r3
 801637e:	f7f5 fee5 	bl	800c14c <osSemaphoreRelease>
}
 8016382:	bf00      	nop
 8016384:	bd80      	pop	{r7, pc}
 8016386:	bf00      	nop
 8016388:	200085d4 	.word	0x200085d4

0801638c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 801638c:	b580      	push	{r7, lr}
 801638e:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 8016390:	4b03      	ldr	r3, [pc, #12]	; (80163a0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	4618      	mov	r0, r3
 8016396:	f7f5 fed9 	bl	800c14c <osSemaphoreRelease>
}
 801639a:	bf00      	nop
 801639c:	bd80      	pop	{r7, pc}
 801639e:	bf00      	nop
 80163a0:	200085d8 	.word	0x200085d8

080163a4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 80163a8:	4b07      	ldr	r3, [pc, #28]	; (80163c8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	2100      	movs	r1, #0
 80163ae:	4618      	mov	r0, r3
 80163b0:	f7f5 fe7e 	bl	800c0b0 <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 80163b4:	4b04      	ldr	r3, [pc, #16]	; (80163c8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	f04f 31ff 	mov.w	r1, #4294967295
 80163bc:	4618      	mov	r0, r3
 80163be:	f7f5 fe77 	bl	800c0b0 <osSemaphoreWait>
}
 80163c2:	bf00      	nop
 80163c4:	bd80      	pop	{r7, pc}
 80163c6:	bf00      	nop
 80163c8:	200085d8 	.word	0x200085d8

080163cc <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b082      	sub	sp, #8
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	4603      	mov	r3, r0
 80163d4:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 80163d6:	88fb      	ldrh	r3, [r7, #6]
 80163d8:	4618      	mov	r0, r3
 80163da:	f7f5 fe15 	bl	800c008 <osDelay>
}
 80163de:	bf00      	nop
 80163e0:	3708      	adds	r7, #8
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bd80      	pop	{r7, pc}
	...

080163e8 <__NVIC_EnableIRQ>:
{
 80163e8:	b480      	push	{r7}
 80163ea:	b083      	sub	sp, #12
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	4603      	mov	r3, r0
 80163f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80163f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	db0d      	blt.n	8016416 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80163fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80163fe:	b2db      	uxtb	r3, r3
 8016400:	f003 021f 	and.w	r2, r3, #31
 8016404:	4907      	ldr	r1, [pc, #28]	; (8016424 <__NVIC_EnableIRQ+0x3c>)
 8016406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801640a:	095b      	lsrs	r3, r3, #5
 801640c:	2001      	movs	r0, #1
 801640e:	fa00 f202 	lsl.w	r2, r0, r2
 8016412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016416:	bf00      	nop
 8016418:	370c      	adds	r7, #12
 801641a:	46bd      	mov	sp, r7
 801641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016420:	4770      	bx	lr
 8016422:	bf00      	nop
 8016424:	e000e100 	.word	0xe000e100

08016428 <__NVIC_DisableIRQ>:
{
 8016428:	b480      	push	{r7}
 801642a:	b083      	sub	sp, #12
 801642c:	af00      	add	r7, sp, #0
 801642e:	4603      	mov	r3, r0
 8016430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016436:	2b00      	cmp	r3, #0
 8016438:	db12      	blt.n	8016460 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801643a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801643e:	b2db      	uxtb	r3, r3
 8016440:	f003 021f 	and.w	r2, r3, #31
 8016444:	4909      	ldr	r1, [pc, #36]	; (801646c <__NVIC_DisableIRQ+0x44>)
 8016446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801644a:	095b      	lsrs	r3, r3, #5
 801644c:	2001      	movs	r0, #1
 801644e:	fa00 f202 	lsl.w	r2, r0, r2
 8016452:	3320      	adds	r3, #32
 8016454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016458:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801645c:	f3bf 8f6f 	isb	sy
}
 8016460:	bf00      	nop
 8016462:	370c      	adds	r7, #12
 8016464:	46bd      	mov	sp, r7
 8016466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801646a:	4770      	bx	lr
 801646c:	e000e100 	.word	0xe000e100

08016470 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8016470:	b480      	push	{r7}
 8016472:	b083      	sub	sp, #12
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
        : color(0)
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	2200      	movs	r2, #0
 801647c:	601a      	str	r2, [r3, #0]
    }
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	4618      	mov	r0, r3
 8016482:	370c      	adds	r7, #12
 8016484:	46bd      	mov	sp, r7
 8016486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801648a:	4770      	bx	lr

0801648c <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 801648c:	b480      	push	{r7}
 801648e:	b083      	sub	sp, #12
 8016490:	af00      	add	r7, sp, #0
 8016492:	6078      	str	r0, [r7, #4]
        return color;
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	681b      	ldr	r3, [r3, #0]
    }
 8016498:	4618      	mov	r0, r3
 801649a:	370c      	adds	r7, #12
 801649c:	46bd      	mov	sp, r7
 801649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a2:	4770      	bx	lr

080164a4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80164a4:	b480      	push	{r7}
 80164a6:	b083      	sub	sp, #12
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
    {
 80164ac:	4a04      	ldr	r2, [pc, #16]	; (80164c0 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	601a      	str	r2, [r3, #0]
    }
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	4618      	mov	r0, r3
 80164b6:	370c      	adds	r7, #12
 80164b8:	46bd      	mov	sp, r7
 80164ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164be:	4770      	bx	lr
 80164c0:	0802b270 	.word	0x0802b270

080164c4 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b082      	sub	sp, #8
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
    }
 80164cc:	6878      	ldr	r0, [r7, #4]
 80164ce:	f7ff ffe9 	bl	80164a4 <_ZN8touchgfx9DMA_QueueD1Ev>
 80164d2:	2104      	movs	r1, #4
 80164d4:	6878      	ldr	r0, [r7, #4]
 80164d6:	f011 ffa9 	bl	802842c <_ZdlPvj>
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	4618      	mov	r0, r3
 80164de:	3708      	adds	r7, #8
 80164e0:	46bd      	mov	sp, r7
 80164e2:	bd80      	pop	{r7, pc}

080164e4 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b082      	sub	sp, #8
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	3344      	adds	r3, #68	; 0x44
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	6878      	ldr	r0, [r7, #4]
 80164f6:	4798      	blx	r3
    }
 80164f8:	bf00      	nop
 80164fa:	3708      	adds	r7, #8
 80164fc:	46bd      	mov	sp, r7
 80164fe:	bd80      	pop	{r7, pc}

08016500 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8016500:	b480      	push	{r7}
 8016502:	b083      	sub	sp, #12
 8016504:	af00      	add	r7, sp, #0
 8016506:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8016508:	2300      	movs	r3, #0
    }
 801650a:	4618      	mov	r0, r3
 801650c:	370c      	adds	r7, #12
 801650e:	46bd      	mov	sp, r7
 8016510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016514:	4770      	bx	lr
	...

08016518 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8016518:	b480      	push	{r7}
 801651a:	b083      	sub	sp, #12
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
    {
 8016520:	4a04      	ldr	r2, [pc, #16]	; (8016534 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	601a      	str	r2, [r3, #0]
    }
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	4618      	mov	r0, r3
 801652a:	370c      	adds	r7, #12
 801652c:	46bd      	mov	sp, r7
 801652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016532:	4770      	bx	lr
 8016534:	0802c220 	.word	0x0802c220

08016538 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8016538:	b580      	push	{r7, lr}
 801653a:	b082      	sub	sp, #8
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
    }
 8016540:	6878      	ldr	r0, [r7, #4]
 8016542:	f7ff ffe9 	bl	8016518 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8016546:	210c      	movs	r1, #12
 8016548:	6878      	ldr	r0, [r7, #4]
 801654a:	f011 ff6f 	bl	802842c <_ZdlPvj>
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	4618      	mov	r0, r3
 8016552:	3708      	adds	r7, #8
 8016554:	46bd      	mov	sp, r7
 8016556:	bd80      	pop	{r7, pc}

08016558 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8016558:	b480      	push	{r7}
 801655a:	b083      	sub	sp, #12
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
 8016560:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8016562:	4a09      	ldr	r2, [pc, #36]	; (8016588 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	601a      	str	r2, [r3, #0]
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	683a      	ldr	r2, [r7, #0]
 801656c:	605a      	str	r2, [r3, #4]
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2200      	movs	r2, #0
 8016572:	721a      	strb	r2, [r3, #8]
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	2200      	movs	r2, #0
 8016578:	725a      	strb	r2, [r3, #9]
    {
    }
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	4618      	mov	r0, r3
 801657e:	370c      	adds	r7, #12
 8016580:	46bd      	mov	sp, r7
 8016582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016586:	4770      	bx	lr
 8016588:	0802c220 	.word	0x0802c220

0801658c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 801658c:	b580      	push	{r7, lr}
 801658e:	b082      	sub	sp, #8
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	685a      	ldr	r2, [r3, #4]
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	685b      	ldr	r3, [r3, #4]
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	3314      	adds	r3, #20
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	4610      	mov	r0, r2
 80165a4:	4798      	blx	r3
    }
 80165a6:	bf00      	nop
 80165a8:	3708      	adds	r7, #8
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}

080165ae <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80165ae:	b580      	push	{r7, lr}
 80165b0:	b082      	sub	sp, #8
 80165b2:	af00      	add	r7, sp, #0
 80165b4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80165b6:	687a      	ldr	r2, [r7, #4]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	3328      	adds	r3, #40	; 0x28
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	4610      	mov	r0, r2
 80165c2:	4798      	blx	r3
    }
 80165c4:	bf00      	nop
 80165c6:	3708      	adds	r7, #8
 80165c8:	46bd      	mov	sp, r7
 80165ca:	bd80      	pop	{r7, pc}

080165cc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 80165cc:	b480      	push	{r7}
 80165ce:	b085      	sub	sp, #20
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	60f8      	str	r0, [r7, #12]
 80165d4:	60b9      	str	r1, [r7, #8]
 80165d6:	607a      	str	r2, [r7, #4]
 80165d8:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80165e4:	68ba      	ldr	r2, [r7, #8]
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	430a      	orrs	r2, r1
 80165ec:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165f4:	f023 0107 	bic.w	r1, r3, #7
 80165f8:	687a      	ldr	r2, [r7, #4]
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	430a      	orrs	r2, r1
 8016600:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016608:	4b06      	ldr	r3, [pc, #24]	; (8016624 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 801660a:	4013      	ands	r3, r2
 801660c:	6839      	ldr	r1, [r7, #0]
 801660e:	68fa      	ldr	r2, [r7, #12]
 8016610:	6812      	ldr	r2, [r2, #0]
 8016612:	430b      	orrs	r3, r1
 8016614:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8016616:	2300      	movs	r3, #0
}
 8016618:	4618      	mov	r0, r3
 801661a:	3714      	adds	r7, #20
 801661c:	46bd      	mov	sp, r7
 801661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016622:	4770      	bx	lr
 8016624:	ffffc000 	.word	0xffffc000

08016628 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b082      	sub	sp, #8
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8016630:	f7f9 fa94 	bl	800fb5c <_ZN8touchgfx3HAL11getInstanceEv>
 8016634:	4603      	mov	r3, r0
 8016636:	4618      	mov	r0, r3
 8016638:	f7ff ffa8 	bl	801658c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 801663c:	bf00      	nop
 801663e:	3708      	adds	r7, #8
 8016640:	46bd      	mov	sp, r7
 8016642:	bd80      	pop	{r7, pc}

08016644 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b082      	sub	sp, #8
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
    assert(0);
 801664c:	4b02      	ldr	r3, [pc, #8]	; (8016658 <DMA2D_XferErrorCallback+0x14>)
 801664e:	4a03      	ldr	r2, [pc, #12]	; (801665c <DMA2D_XferErrorCallback+0x18>)
 8016650:	213e      	movs	r1, #62	; 0x3e
 8016652:	4803      	ldr	r0, [pc, #12]	; (8016660 <DMA2D_XferErrorCallback+0x1c>)
 8016654:	f011 ff16 	bl	8028484 <__assert_func>
 8016658:	08029dc8 	.word	0x08029dc8
 801665c:	0802b28c 	.word	0x0802b28c
 8016660:	08029dcc 	.word	0x08029dcc

08016664 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8016664:	b580      	push	{r7, lr}
 8016666:	b082      	sub	sp, #8
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	3318      	adds	r3, #24
 8016670:	4618      	mov	r0, r3
 8016672:	f7ff fefd 	bl	8016470 <_ZN8touchgfx9colortypeC1Ev>
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	4618      	mov	r0, r3
 801667a:	3708      	adds	r7, #8
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}

08016680 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8016680:	b5b0      	push	{r4, r5, r7, lr}
 8016682:	b082      	sub	sp, #8
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8016688:	687a      	ldr	r2, [r7, #4]
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	330c      	adds	r3, #12
 801668e:	4619      	mov	r1, r3
 8016690:	4610      	mov	r0, r2
 8016692:	f7ff ff61 	bl	8016558 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8016696:	4a0e      	ldr	r2, [pc, #56]	; (80166d0 <_ZN10STM32F7DMAC1Ev+0x50>)
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	601a      	str	r2, [r3, #0]
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	f103 000c 	add.w	r0, r3, #12
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	3320      	adds	r3, #32
 80166a6:	2260      	movs	r2, #96	; 0x60
 80166a8:	4619      	mov	r1, r3
 80166aa:	f002 fd63 	bl	8019174 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	3320      	adds	r3, #32
 80166b2:	245f      	movs	r4, #95	; 0x5f
 80166b4:	461d      	mov	r5, r3
 80166b6:	2c00      	cmp	r4, #0
 80166b8:	db05      	blt.n	80166c6 <_ZN10STM32F7DMAC1Ev+0x46>
 80166ba:	4628      	mov	r0, r5
 80166bc:	f7ff ffd2 	bl	8016664 <_ZN8touchgfx6BlitOpC1Ev>
 80166c0:	3520      	adds	r5, #32
 80166c2:	3c01      	subs	r4, #1
 80166c4:	e7f7      	b.n	80166b6 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	4618      	mov	r0, r3
 80166ca:	3708      	adds	r7, #8
 80166cc:	46bd      	mov	sp, r7
 80166ce:	bdb0      	pop	{r4, r5, r7, pc}
 80166d0:	0802b220 	.word	0x0802b220

080166d4 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b082      	sub	sp, #8
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
 80166dc:	4a0b      	ldr	r2, [pc, #44]	; (801670c <_ZN10STM32F7DMAD1Ev+0x38>)
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 80166e2:	480b      	ldr	r0, [pc, #44]	; (8016710 <_ZN10STM32F7DMAD1Ev+0x3c>)
 80166e4:	f7ed fb0c 	bl	8003d00 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 80166e8:	205a      	movs	r0, #90	; 0x5a
 80166ea:	f7ff fe9d 	bl	8016428 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	330c      	adds	r3, #12
 80166f2:	4618      	mov	r0, r3
 80166f4:	f000 faa4 	bl	8016c40 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	4618      	mov	r0, r3
 80166fc:	f7ff ff0c 	bl	8016518 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	4618      	mov	r0, r3
 8016704:	3708      	adds	r7, #8
 8016706:	46bd      	mov	sp, r7
 8016708:	bd80      	pop	{r7, pc}
 801670a:	bf00      	nop
 801670c:	0802b220 	.word	0x0802b220
 8016710:	2000b888 	.word	0x2000b888

08016714 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8016714:	b580      	push	{r7, lr}
 8016716:	b082      	sub	sp, #8
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
}
 801671c:	6878      	ldr	r0, [r7, #4]
 801671e:	f7ff ffd9 	bl	80166d4 <_ZN10STM32F7DMAD1Ev>
 8016722:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8016726:	6878      	ldr	r0, [r7, #4]
 8016728:	f011 fe80 	bl	802842c <_ZdlPvj>
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	4618      	mov	r0, r3
 8016730:	3708      	adds	r7, #8
 8016732:	46bd      	mov	sp, r7
 8016734:	bd80      	pop	{r7, pc}
	...

08016738 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b082      	sub	sp, #8
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8016740:	4b09      	ldr	r3, [pc, #36]	; (8016768 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016742:	4a0a      	ldr	r2, [pc, #40]	; (801676c <_ZN10STM32F7DMA10initializeEv+0x34>)
 8016744:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8016746:	4808      	ldr	r0, [pc, #32]	; (8016768 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016748:	f7ed fa90 	bl	8003c6c <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 801674c:	4b06      	ldr	r3, [pc, #24]	; (8016768 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801674e:	4a08      	ldr	r2, [pc, #32]	; (8016770 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8016750:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8016752:	4b05      	ldr	r3, [pc, #20]	; (8016768 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016754:	4a07      	ldr	r2, [pc, #28]	; (8016774 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8016756:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8016758:	205a      	movs	r0, #90	; 0x5a
 801675a:	f7ff fe45 	bl	80163e8 <__NVIC_EnableIRQ>
}
 801675e:	bf00      	nop
 8016760:	3708      	adds	r7, #8
 8016762:	46bd      	mov	sp, r7
 8016764:	bd80      	pop	{r7, pc}
 8016766:	bf00      	nop
 8016768:	2000b888 	.word	0x2000b888
 801676c:	4002b000 	.word	0x4002b000
 8016770:	08016629 	.word	0x08016629
 8016774:	08016645 	.word	0x08016645

08016778 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8016778:	b480      	push	{r7}
 801677a:	b083      	sub	sp, #12
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8016780:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8016784:	4618      	mov	r0, r3
 8016786:	370c      	adds	r7, #12
 8016788:	46bd      	mov	sp, r7
 801678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801678e:	4770      	bx	lr

08016790 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8016790:	b590      	push	{r4, r7, lr}
 8016792:	b08d      	sub	sp, #52	; 0x34
 8016794:	af02      	add	r7, sp, #8
 8016796:	6078      	str	r0, [r7, #4]
 8016798:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 801679a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801679e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 80167a0:	2300      	movs	r3, #0
 80167a2:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80167a4:	683b      	ldr	r3, [r7, #0]
 80167a6:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80167a8:	2b20      	cmp	r3, #32
 80167aa:	d007      	beq.n	80167bc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 80167ac:	683b      	ldr	r3, [r7, #0]
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	2b40      	cmp	r3, #64	; 0x40
 80167b2:	d003      	beq.n	80167bc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80167b4:	683b      	ldr	r3, [r7, #0]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	2b04      	cmp	r3, #4
 80167ba:	d101      	bne.n	80167c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 80167bc:	2301      	movs	r3, #1
 80167be:	e000      	b.n	80167c2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 80167c0:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80167c2:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80167c4:	683b      	ldr	r3, [r7, #0]
 80167c6:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 80167c8:	2b80      	cmp	r3, #128	; 0x80
 80167ca:	d004      	beq.n	80167d6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 80167cc:	683b      	ldr	r3, [r7, #0]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80167d4:	d101      	bne.n	80167da <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 80167d6:	2301      	movs	r3, #1
 80167d8:	e000      	b.n	80167dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 80167da:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80167dc:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 80167de:	f7f9 f9c9 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 80167e2:	4602      	mov	r2, r0
 80167e4:	6813      	ldr	r3, [r2, #0]
 80167e6:	331c      	adds	r3, #28
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	4610      	mov	r0, r2
 80167ec:	4798      	blx	r3
 80167ee:	4603      	mov	r3, r0
 80167f0:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 80167f2:	683b      	ldr	r3, [r7, #0]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	2b40      	cmp	r3, #64	; 0x40
 80167f8:	d01d      	beq.n	8016836 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 80167fa:	2b40      	cmp	r3, #64	; 0x40
 80167fc:	d804      	bhi.n	8016808 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 80167fe:	2b04      	cmp	r3, #4
 8016800:	d00e      	beq.n	8016820 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8016802:	2b20      	cmp	r3, #32
 8016804:	d017      	beq.n	8016836 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8016806:	e019      	b.n	801683c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8016808:	2b80      	cmp	r3, #128	; 0x80
 801680a:	d003      	beq.n	8016814 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 801680c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016810:	d003      	beq.n	801681a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8016812:	e013      	b.n	801683c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8016814:	230a      	movs	r3, #10
 8016816:	623b      	str	r3, [r7, #32]
        break;
 8016818:	e01a      	b.n	8016850 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 801681a:	2309      	movs	r3, #9
 801681c:	623b      	str	r3, [r7, #32]
        break;
 801681e:	e017      	b.n	8016850 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8016820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016824:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016826:	7f7b      	ldrb	r3, [r7, #29]
 8016828:	2b10      	cmp	r3, #16
 801682a:	d101      	bne.n	8016830 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 801682c:	2302      	movs	r3, #2
 801682e:	e000      	b.n	8016832 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8016830:	2301      	movs	r3, #1
 8016832:	623b      	str	r3, [r7, #32]
        break;
 8016834:	e00c      	b.n	8016850 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8016836:	2300      	movs	r3, #0
 8016838:	623b      	str	r3, [r7, #32]
        break;
 801683a:	e009      	b.n	8016850 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 801683c:	2300      	movs	r3, #0
 801683e:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016840:	7f7b      	ldrb	r3, [r7, #29]
 8016842:	2b10      	cmp	r3, #16
 8016844:	d101      	bne.n	801684a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8016846:	2302      	movs	r3, #2
 8016848:	e000      	b.n	801684c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 801684a:	2301      	movs	r3, #1
 801684c:	623b      	str	r3, [r7, #32]
        break;
 801684e:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8016850:	4a75      	ldr	r2, [pc, #468]	; (8016a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016854:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8016856:	7f7b      	ldrb	r3, [r7, #29]
 8016858:	2b10      	cmp	r3, #16
 801685a:	d101      	bne.n	8016860 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 801685c:	2302      	movs	r3, #2
 801685e:	e000      	b.n	8016862 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8016860:	2301      	movs	r3, #1
 8016862:	4a71      	ldr	r2, [pc, #452]	; (8016a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016864:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016866:	683b      	ldr	r3, [r7, #0]
 8016868:	8adb      	ldrh	r3, [r3, #22]
 801686a:	461a      	mov	r2, r3
 801686c:	683b      	ldr	r3, [r7, #0]
 801686e:	8a1b      	ldrh	r3, [r3, #16]
 8016870:	1ad3      	subs	r3, r2, r3
 8016872:	461a      	mov	r2, r3
 8016874:	4b6c      	ldr	r3, [pc, #432]	; (8016a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016876:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016878:	7f7b      	ldrb	r3, [r7, #29]
 801687a:	2b10      	cmp	r3, #16
 801687c:	d101      	bne.n	8016882 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 801687e:	2202      	movs	r2, #2
 8016880:	e000      	b.n	8016884 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8016882:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8016884:	683b      	ldr	r3, [r7, #0]
 8016886:	8adb      	ldrh	r3, [r3, #22]
 8016888:	4619      	mov	r1, r3
 801688a:	683b      	ldr	r3, [r7, #0]
 801688c:	8a1b      	ldrh	r3, [r3, #16]
 801688e:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016892:	4865      	ldr	r0, [pc, #404]	; (8016a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016894:	f7ff fe9a 	bl	80165cc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8016898:	4a63      	ldr	r2, [pc, #396]	; (8016a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801689a:	6a3b      	ldr	r3, [r7, #32]
 801689c:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 801689e:	683b      	ldr	r3, [r7, #0]
 80168a0:	8a9b      	ldrh	r3, [r3, #20]
 80168a2:	461a      	mov	r2, r3
 80168a4:	683b      	ldr	r3, [r7, #0]
 80168a6:	8a1b      	ldrh	r3, [r3, #16]
 80168a8:	1ad3      	subs	r3, r2, r3
 80168aa:	461a      	mov	r2, r3
 80168ac:	4b5e      	ldr	r3, [pc, #376]	; (8016a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80168ae:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 80168b0:	7ffb      	ldrb	r3, [r7, #31]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d103      	bne.n	80168be <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 80168b6:	7fbb      	ldrb	r3, [r7, #30]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	f000 8081 	beq.w	80169c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
    {
        if (blitOp.alpha < 255)
 80168be:	683b      	ldr	r3, [r7, #0]
 80168c0:	7f1b      	ldrb	r3, [r3, #28]
 80168c2:	2bff      	cmp	r3, #255	; 0xff
 80168c4:	d008      	beq.n	80168d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 80168c6:	4b58      	ldr	r3, [pc, #352]	; (8016a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80168c8:	2202      	movs	r2, #2
 80168ca:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 80168cc:	683b      	ldr	r3, [r7, #0]
 80168ce:	7f1b      	ldrb	r3, [r3, #28]
 80168d0:	461a      	mov	r2, r3
 80168d2:	4b55      	ldr	r3, [pc, #340]	; (8016a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80168d4:	635a      	str	r2, [r3, #52]	; 0x34
 80168d6:	e002      	b.n	80168de <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80168d8:	4b53      	ldr	r3, [pc, #332]	; (8016a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80168da:	2200      	movs	r2, #0
 80168dc:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 80168de:	7fbb      	ldrb	r3, [r7, #30]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d058      	beq.n	8016996 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
        {
            if (bitDepth == 16)
 80168e4:	7f7b      	ldrb	r3, [r7, #29]
 80168e6:	2b10      	cmp	r3, #16
 80168e8:	d14a      	bne.n	8016980 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80168ea:	683b      	ldr	r3, [r7, #0]
 80168ec:	3318      	adds	r3, #24
 80168ee:	4618      	mov	r0, r3
 80168f0:	f7ff fdcc 	bl	801648c <_ZNK8touchgfx9colortypecvmEv>
 80168f4:	4603      	mov	r3, r0
 80168f6:	0adb      	lsrs	r3, r3, #11
 80168f8:	f003 021f 	and.w	r2, r3, #31
 80168fc:	4613      	mov	r3, r2
 80168fe:	021b      	lsls	r3, r3, #8
 8016900:	1a9a      	subs	r2, r3, r2
 8016902:	4b4a      	ldr	r3, [pc, #296]	; (8016a2c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016904:	fba3 1302 	umull	r1, r3, r3, r2
 8016908:	1ad2      	subs	r2, r2, r3
 801690a:	0852      	lsrs	r2, r2, #1
 801690c:	4413      	add	r3, r2
 801690e:	091b      	lsrs	r3, r3, #4
 8016910:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8016912:	683b      	ldr	r3, [r7, #0]
 8016914:	3318      	adds	r3, #24
 8016916:	4618      	mov	r0, r3
 8016918:	f7ff fdb8 	bl	801648c <_ZNK8touchgfx9colortypecvmEv>
 801691c:	4603      	mov	r3, r0
 801691e:	095b      	lsrs	r3, r3, #5
 8016920:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016924:	4613      	mov	r3, r2
 8016926:	021b      	lsls	r3, r3, #8
 8016928:	1a9a      	subs	r2, r3, r2
 801692a:	4b41      	ldr	r3, [pc, #260]	; (8016a30 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801692c:	fba3 1302 	umull	r1, r3, r3, r2
 8016930:	1ad2      	subs	r2, r2, r3
 8016932:	0852      	lsrs	r2, r2, #1
 8016934:	4413      	add	r3, r2
 8016936:	095b      	lsrs	r3, r3, #5
 8016938:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801693a:	683b      	ldr	r3, [r7, #0]
 801693c:	3318      	adds	r3, #24
 801693e:	4618      	mov	r0, r3
 8016940:	f7ff fda4 	bl	801648c <_ZNK8touchgfx9colortypecvmEv>
 8016944:	4603      	mov	r3, r0
 8016946:	f003 021f 	and.w	r2, r3, #31
 801694a:	4613      	mov	r3, r2
 801694c:	021b      	lsls	r3, r3, #8
 801694e:	1a9a      	subs	r2, r3, r2
 8016950:	4b36      	ldr	r3, [pc, #216]	; (8016a2c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016952:	fba3 1302 	umull	r1, r3, r3, r2
 8016956:	1ad2      	subs	r2, r2, r3
 8016958:	0852      	lsrs	r2, r2, #1
 801695a:	4413      	add	r3, r2
 801695c:	091b      	lsrs	r3, r3, #4
 801695e:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8016960:	683b      	ldr	r3, [r7, #0]
 8016962:	7f1b      	ldrb	r3, [r3, #28]
 8016964:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	061a      	lsls	r2, r3, #24
 801696a:	69bb      	ldr	r3, [r7, #24]
 801696c:	041b      	lsls	r3, r3, #16
 801696e:	431a      	orrs	r2, r3
 8016970:	697b      	ldr	r3, [r7, #20]
 8016972:	021b      	lsls	r3, r3, #8
 8016974:	431a      	orrs	r2, r3
 8016976:	693b      	ldr	r3, [r7, #16]
 8016978:	4313      	orrs	r3, r2
 801697a:	4a2b      	ldr	r2, [pc, #172]	; (8016a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801697c:	6353      	str	r3, [r2, #52]	; 0x34
 801697e:	e00a      	b.n	8016996 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8016980:	683b      	ldr	r3, [r7, #0]
 8016982:	3318      	adds	r3, #24
 8016984:	60bb      	str	r3, [r7, #8]
        return color;
 8016986:	68bb      	ldr	r3, [r7, #8]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	683a      	ldr	r2, [r7, #0]
 801698c:	7f12      	ldrb	r2, [r2, #28]
 801698e:	0612      	lsls	r2, r2, #24
 8016990:	4313      	orrs	r3, r2
 8016992:	4a25      	ldr	r2, [pc, #148]	; (8016a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016994:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016996:	683b      	ldr	r3, [r7, #0]
 8016998:	8adb      	ldrh	r3, [r3, #22]
 801699a:	461a      	mov	r2, r3
 801699c:	683b      	ldr	r3, [r7, #0]
 801699e:	8a1b      	ldrh	r3, [r3, #16]
 80169a0:	1ad3      	subs	r3, r2, r3
 80169a2:	461a      	mov	r2, r3
 80169a4:	4b20      	ldr	r3, [pc, #128]	; (8016a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80169a6:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80169a8:	7f7b      	ldrb	r3, [r7, #29]
 80169aa:	2b10      	cmp	r3, #16
 80169ac:	d101      	bne.n	80169b2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x222>
 80169ae:	2302      	movs	r3, #2
 80169b0:	e000      	b.n	80169b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 80169b2:	2301      	movs	r3, #1
 80169b4:	4a1c      	ldr	r2, [pc, #112]	; (8016a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80169b6:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80169b8:	2100      	movs	r1, #0
 80169ba:	481b      	ldr	r0, [pc, #108]	; (8016a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80169bc:	f7ed fc20 	bl	8004200 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80169c0:	2101      	movs	r1, #1
 80169c2:	4819      	ldr	r0, [pc, #100]	; (8016a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80169c4:	f7ed fc1c 	bl	8004200 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 80169c8:	7ffb      	ldrb	r3, [r7, #31]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d102      	bne.n	80169d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 80169ce:	7fbb      	ldrb	r3, [r7, #30]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d015      	beq.n	8016a00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 80169d4:	683b      	ldr	r3, [r7, #0]
 80169d6:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80169d8:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80169da:	683b      	ldr	r3, [r7, #0]
 80169dc:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80169de:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80169e0:	683b      	ldr	r3, [r7, #0]
 80169e2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80169e4:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80169e6:	683b      	ldr	r3, [r7, #0]
 80169e8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80169ea:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80169ec:	683b      	ldr	r3, [r7, #0]
 80169ee:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80169f0:	9301      	str	r3, [sp, #4]
 80169f2:	9200      	str	r2, [sp, #0]
 80169f4:	4623      	mov	r3, r4
 80169f6:	4602      	mov	r2, r0
 80169f8:	480b      	ldr	r0, [pc, #44]	; (8016a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80169fa:	f7ed fa24 	bl	8003e46 <HAL_DMA2D_BlendingStart_IT>
 80169fe:	e00f      	b.n	8016a20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8016a00:	683b      	ldr	r3, [r7, #0]
 8016a02:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016a04:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8016a06:	683b      	ldr	r3, [r7, #0]
 8016a08:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016a0a:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016a0c:	683b      	ldr	r3, [r7, #0]
 8016a0e:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016a10:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016a12:	683b      	ldr	r3, [r7, #0]
 8016a14:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016a16:	9300      	str	r3, [sp, #0]
 8016a18:	4603      	mov	r3, r0
 8016a1a:	4803      	ldr	r0, [pc, #12]	; (8016a28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016a1c:	f7ed f9e0 	bl	8003de0 <HAL_DMA2D_Start_IT>
    }
}
 8016a20:	bf00      	nop
 8016a22:	372c      	adds	r7, #44	; 0x2c
 8016a24:	46bd      	mov	sp, r7
 8016a26:	bd90      	pop	{r4, r7, pc}
 8016a28:	2000b888 	.word	0x2000b888
 8016a2c:	08421085 	.word	0x08421085
 8016a30:	04104105 	.word	0x04104105

08016a34 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8016a34:	b590      	push	{r4, r7, lr}
 8016a36:	b08f      	sub	sp, #60	; 0x3c
 8016a38:	af02      	add	r7, sp, #8
 8016a3a:	6078      	str	r0, [r7, #4]
 8016a3c:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8016a3e:	f7f9 f899 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 8016a42:	4602      	mov	r2, r0
 8016a44:	6813      	ldr	r3, [r2, #0]
 8016a46:	331c      	adds	r3, #28
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	4610      	mov	r0, r2
 8016a4c:	4798      	blx	r3
 8016a4e:	4603      	mov	r3, r0
 8016a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a58:	2b10      	cmp	r3, #16
 8016a5a:	d101      	bne.n	8016a60 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2c>
 8016a5c:	2302      	movs	r3, #2
 8016a5e:	e000      	b.n	8016a62 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
 8016a60:	2301      	movs	r3, #1
 8016a62:	623b      	str	r3, [r7, #32]

    uint32_t color = 0;
 8016a64:	2300      	movs	r3, #0
 8016a66:	62bb      	str	r3, [r7, #40]	; 0x28
    if (bitDepth == 16)
 8016a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a6c:	2b10      	cmp	r3, #16
 8016a6e:	d149      	bne.n	8016b04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8016a70:	683b      	ldr	r3, [r7, #0]
 8016a72:	3318      	adds	r3, #24
 8016a74:	4618      	mov	r0, r3
 8016a76:	f7ff fd09 	bl	801648c <_ZNK8touchgfx9colortypecvmEv>
 8016a7a:	4603      	mov	r3, r0
 8016a7c:	0adb      	lsrs	r3, r3, #11
 8016a7e:	f003 021f 	and.w	r2, r3, #31
 8016a82:	4613      	mov	r3, r2
 8016a84:	021b      	lsls	r3, r3, #8
 8016a86:	1a9a      	subs	r2, r3, r2
 8016a88:	4b6a      	ldr	r3, [pc, #424]	; (8016c34 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8016a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8016a8e:	1ad2      	subs	r2, r2, r3
 8016a90:	0852      	lsrs	r2, r2, #1
 8016a92:	4413      	add	r3, r2
 8016a94:	091b      	lsrs	r3, r3, #4
 8016a96:	61fb      	str	r3, [r7, #28]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8016a98:	683b      	ldr	r3, [r7, #0]
 8016a9a:	3318      	adds	r3, #24
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	f7ff fcf5 	bl	801648c <_ZNK8touchgfx9colortypecvmEv>
 8016aa2:	4603      	mov	r3, r0
 8016aa4:	095b      	lsrs	r3, r3, #5
 8016aa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016aaa:	4613      	mov	r3, r2
 8016aac:	021b      	lsls	r3, r3, #8
 8016aae:	1a9a      	subs	r2, r3, r2
 8016ab0:	4b61      	ldr	r3, [pc, #388]	; (8016c38 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x204>)
 8016ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8016ab6:	1ad2      	subs	r2, r2, r3
 8016ab8:	0852      	lsrs	r2, r2, #1
 8016aba:	4413      	add	r3, r2
 8016abc:	095b      	lsrs	r3, r3, #5
 8016abe:	61bb      	str	r3, [r7, #24]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8016ac0:	683b      	ldr	r3, [r7, #0]
 8016ac2:	3318      	adds	r3, #24
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	f7ff fce1 	bl	801648c <_ZNK8touchgfx9colortypecvmEv>
 8016aca:	4603      	mov	r3, r0
 8016acc:	f003 021f 	and.w	r2, r3, #31
 8016ad0:	4613      	mov	r3, r2
 8016ad2:	021b      	lsls	r3, r3, #8
 8016ad4:	1a9a      	subs	r2, r3, r2
 8016ad6:	4b57      	ldr	r3, [pc, #348]	; (8016c34 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8016ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8016adc:	1ad2      	subs	r2, r2, r3
 8016ade:	0852      	lsrs	r2, r2, #1
 8016ae0:	4413      	add	r3, r2
 8016ae2:	091b      	lsrs	r3, r3, #4
 8016ae4:	617b      	str	r3, [r7, #20]
        uint32_t alpha = blitOp.alpha;
 8016ae6:	683b      	ldr	r3, [r7, #0]
 8016ae8:	7f1b      	ldrb	r3, [r3, #28]
 8016aea:	613b      	str	r3, [r7, #16]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8016aec:	693b      	ldr	r3, [r7, #16]
 8016aee:	061a      	lsls	r2, r3, #24
 8016af0:	69fb      	ldr	r3, [r7, #28]
 8016af2:	041b      	lsls	r3, r3, #16
 8016af4:	431a      	orrs	r2, r3
 8016af6:	69bb      	ldr	r3, [r7, #24]
 8016af8:	021b      	lsls	r3, r3, #8
 8016afa:	4313      	orrs	r3, r2
 8016afc:	697a      	ldr	r2, [r7, #20]
 8016afe:	4313      	orrs	r3, r2
 8016b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8016b02:	e00a      	b.n	8016b1a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8016b04:	683b      	ldr	r3, [r7, #0]
 8016b06:	7f1b      	ldrb	r3, [r3, #28]
 8016b08:	061b      	lsls	r3, r3, #24
 8016b0a:	461a      	mov	r2, r3
 8016b0c:	683b      	ldr	r3, [r7, #0]
 8016b0e:	3318      	adds	r3, #24
 8016b10:	60fb      	str	r3, [r7, #12]
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	4313      	orrs	r3, r2
 8016b18:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    switch (blitOp.operation)
 8016b1a:	683b      	ldr	r3, [r7, #0]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	2b08      	cmp	r3, #8
 8016b20:	d103      	bne.n	8016b2a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8016b22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016b26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8016b28:	e003      	b.n	8016b32 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8016b2a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8016b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8016b30:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8016b32:	4a42      	ldr	r2, [pc, #264]	; (8016c3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b36:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8016b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b3c:	2b10      	cmp	r3, #16
 8016b3e:	d101      	bne.n	8016b44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 8016b40:	2302      	movs	r3, #2
 8016b42:	e000      	b.n	8016b46 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
 8016b44:	2301      	movs	r3, #1
 8016b46:	4a3d      	ldr	r2, [pc, #244]	; (8016c3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016b48:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016b4a:	683b      	ldr	r3, [r7, #0]
 8016b4c:	8adb      	ldrh	r3, [r3, #22]
 8016b4e:	461a      	mov	r2, r3
 8016b50:	683b      	ldr	r3, [r7, #0]
 8016b52:	8a1b      	ldrh	r3, [r3, #16]
 8016b54:	1ad3      	subs	r3, r2, r3
 8016b56:	461a      	mov	r2, r3
 8016b58:	4b38      	ldr	r3, [pc, #224]	; (8016c3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016b5a:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b60:	2b10      	cmp	r3, #16
 8016b62:	d101      	bne.n	8016b68 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x134>
 8016b64:	2202      	movs	r2, #2
 8016b66:	e000      	b.n	8016b6a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x136>
 8016b68:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8016b6a:	683b      	ldr	r3, [r7, #0]
 8016b6c:	8adb      	ldrh	r3, [r3, #22]
 8016b6e:	4619      	mov	r1, r3
 8016b70:	683b      	ldr	r3, [r7, #0]
 8016b72:	8a1b      	ldrh	r3, [r3, #16]
 8016b74:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016b78:	4830      	ldr	r0, [pc, #192]	; (8016c3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016b7a:	f7ff fd27 	bl	80165cc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8016b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016b84:	d11f      	bne.n	8016bc6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x192>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8016b86:	4b2d      	ldr	r3, [pc, #180]	; (8016c3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016b88:	2201      	movs	r2, #1
 8016b8a:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8016b8c:	4a2b      	ldr	r2, [pc, #172]	; (8016c3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b90:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8016b92:	4b2a      	ldr	r3, [pc, #168]	; (8016c3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016b94:	2209      	movs	r2, #9
 8016b96:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016b98:	683b      	ldr	r3, [r7, #0]
 8016b9a:	8adb      	ldrh	r3, [r3, #22]
 8016b9c:	461a      	mov	r2, r3
 8016b9e:	683b      	ldr	r3, [r7, #0]
 8016ba0:	8a1b      	ldrh	r3, [r3, #16]
 8016ba2:	1ad3      	subs	r3, r2, r3
 8016ba4:	461a      	mov	r2, r3
 8016ba6:	4b25      	ldr	r3, [pc, #148]	; (8016c3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016ba8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016baa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bae:	2b10      	cmp	r3, #16
 8016bb0:	d101      	bne.n	8016bb6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x182>
 8016bb2:	2302      	movs	r3, #2
 8016bb4:	e000      	b.n	8016bb8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x184>
 8016bb6:	2301      	movs	r3, #1
 8016bb8:	4a20      	ldr	r2, [pc, #128]	; (8016c3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016bba:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8016bbc:	2100      	movs	r1, #0
 8016bbe:	481f      	ldr	r0, [pc, #124]	; (8016c3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016bc0:	f7ed fb1e 	bl	8004200 <HAL_DMA2D_ConfigLayer>
 8016bc4:	e005      	b.n	8016bd2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x19e>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8016bc6:	4a1d      	ldr	r2, [pc, #116]	; (8016c3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016bc8:	6a3b      	ldr	r3, [r7, #32]
 8016bca:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8016bcc:	4b1b      	ldr	r3, [pc, #108]	; (8016c3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016bce:	2200      	movs	r2, #0
 8016bd0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8016bd2:	2101      	movs	r1, #1
 8016bd4:	4819      	ldr	r0, [pc, #100]	; (8016c3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016bd6:	f7ed fb13 	bl	8004200 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8016bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016be0:	d115      	bne.n	8016c0e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1da>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8016be2:	683b      	ldr	r3, [r7, #0]
 8016be4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016be6:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8016be8:	683b      	ldr	r3, [r7, #0]
 8016bea:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016bec:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8016bee:	683b      	ldr	r3, [r7, #0]
 8016bf0:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016bf2:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016bf4:	683b      	ldr	r3, [r7, #0]
 8016bf6:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016bf8:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016bfa:	683b      	ldr	r3, [r7, #0]
 8016bfc:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016bfe:	9301      	str	r3, [sp, #4]
 8016c00:	9200      	str	r2, [sp, #0]
 8016c02:	4623      	mov	r3, r4
 8016c04:	4602      	mov	r2, r0
 8016c06:	480d      	ldr	r0, [pc, #52]	; (8016c3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016c08:	f7ed f91d 	bl	8003e46 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8016c0c:	e00d      	b.n	8016c2a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f6>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8016c0e:	683b      	ldr	r3, [r7, #0]
 8016c10:	68db      	ldr	r3, [r3, #12]
 8016c12:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016c14:	683b      	ldr	r3, [r7, #0]
 8016c16:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8016c18:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016c1a:	683b      	ldr	r3, [r7, #0]
 8016c1c:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8016c1e:	9300      	str	r3, [sp, #0]
 8016c20:	460b      	mov	r3, r1
 8016c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016c24:	4805      	ldr	r0, [pc, #20]	; (8016c3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8016c26:	f7ed f8db 	bl	8003de0 <HAL_DMA2D_Start_IT>
}
 8016c2a:	bf00      	nop
 8016c2c:	3734      	adds	r7, #52	; 0x34
 8016c2e:	46bd      	mov	sp, r7
 8016c30:	bd90      	pop	{r4, r7, pc}
 8016c32:	bf00      	nop
 8016c34:	08421085 	.word	0x08421085
 8016c38:	04104105 	.word	0x04104105
 8016c3c:	2000b888 	.word	0x2000b888

08016c40 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b082      	sub	sp, #8
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
 8016c48:	4a05      	ldr	r2, [pc, #20]	; (8016c60 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	601a      	str	r2, [r3, #0]
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	4618      	mov	r0, r3
 8016c52:	f7ff fc27 	bl	80164a4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	4618      	mov	r0, r3
 8016c5a:	3708      	adds	r7, #8
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	bd80      	pop	{r7, pc}
 8016c60:	0802c270 	.word	0x0802c270

08016c64 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b082      	sub	sp, #8
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]
 8016c6c:	6878      	ldr	r0, [r7, #4]
 8016c6e:	f7ff ffe7 	bl	8016c40 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016c72:	2114      	movs	r1, #20
 8016c74:	6878      	ldr	r0, [r7, #4]
 8016c76:	f011 fbd9 	bl	802842c <_ZdlPvj>
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	3708      	adds	r7, #8
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}

08016c84 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8016c84:	b480      	push	{r7}
 8016c86:	b083      	sub	sp, #12
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
        texts = t;
 8016c8c:	4a04      	ldr	r2, [pc, #16]	; (8016ca0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	6013      	str	r3, [r2, #0]
    }
 8016c92:	bf00      	nop
 8016c94:	370c      	adds	r7, #12
 8016c96:	46bd      	mov	sp, r7
 8016c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c9c:	4770      	bx	lr
 8016c9e:	bf00      	nop
 8016ca0:	2000b4b8 	.word	0x2000b4b8

08016ca4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8016ca4:	b480      	push	{r7}
 8016ca6:	b085      	sub	sp, #20
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	60f8      	str	r0, [r7, #12]
 8016cac:	60b9      	str	r1, [r7, #8]
 8016cae:	607a      	str	r2, [r7, #4]
 8016cb0:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8016cb2:	4a0b      	ldr	r2, [pc, #44]	; (8016ce0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	601a      	str	r2, [r3, #0]
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	68ba      	ldr	r2, [r7, #8]
 8016cbc:	605a      	str	r2, [r3, #4]
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	687a      	ldr	r2, [r7, #4]
 8016cc2:	609a      	str	r2, [r3, #8]
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	683a      	ldr	r2, [r7, #0]
 8016cc8:	60da      	str	r2, [r3, #12]
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	69ba      	ldr	r2, [r7, #24]
 8016cce:	611a      	str	r2, [r3, #16]
    {
    }
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	3714      	adds	r7, #20
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cdc:	4770      	bx	lr
 8016cde:	bf00      	nop
 8016ce0:	0802b38c 	.word	0x0802b38c

08016ce4 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8016ce4:	b480      	push	{r7}
 8016ce6:	b083      	sub	sp, #12
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
    {
 8016cec:	4a04      	ldr	r2, [pc, #16]	; (8016d00 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	601a      	str	r2, [r3, #0]
    }
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	370c      	adds	r7, #12
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfe:	4770      	bx	lr
 8016d00:	0802b38c 	.word	0x0802b38c

08016d04 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b082      	sub	sp, #8
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
    }
 8016d0c:	6878      	ldr	r0, [r7, #4]
 8016d0e:	f7ff ffe9 	bl	8016ce4 <_ZN8touchgfx7MVPHeapD1Ev>
 8016d12:	2114      	movs	r1, #20
 8016d14:	6878      	ldr	r0, [r7, #4]
 8016d16:	f011 fb89 	bl	802842c <_ZdlPvj>
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	3708      	adds	r7, #8
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd80      	pop	{r7, pc}

08016d24 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8016d24:	b480      	push	{r7}
 8016d26:	b083      	sub	sp, #12
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	6078      	str	r0, [r7, #4]
    {
 8016d2c:	4a04      	ldr	r2, [pc, #16]	; (8016d40 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	601a      	str	r2, [r3, #0]
    }
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	4618      	mov	r0, r3
 8016d36:	370c      	adds	r7, #12
 8016d38:	46bd      	mov	sp, r7
 8016d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d3e:	4770      	bx	lr
 8016d40:	0802cea8 	.word	0x0802cea8

08016d44 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b082      	sub	sp, #8
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
    }
 8016d4c:	6878      	ldr	r0, [r7, #4]
 8016d4e:	f7ff ffe9 	bl	8016d24 <_ZN8touchgfx3LCDD1Ev>
 8016d52:	2108      	movs	r1, #8
 8016d54:	6878      	ldr	r0, [r7, #4]
 8016d56:	f011 fb69 	bl	802842c <_ZdlPvj>
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	3708      	adds	r7, #8
 8016d60:	46bd      	mov	sp, r7
 8016d62:	bd80      	pop	{r7, pc}

08016d64 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8016d64:	b480      	push	{r7}
 8016d66:	b083      	sub	sp, #12
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	2200      	movs	r2, #0
 8016d70:	801a      	strh	r2, [r3, #0]
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	2200      	movs	r2, #0
 8016d76:	805a      	strh	r2, [r3, #2]
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	809a      	strh	r2, [r3, #4]
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	2200      	movs	r2, #0
 8016d82:	80da      	strh	r2, [r3, #6]
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	2200      	movs	r2, #0
 8016d88:	811a      	strh	r2, [r3, #8]
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	2200      	movs	r2, #0
 8016d8e:	815a      	strh	r2, [r3, #10]
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	2200      	movs	r2, #0
 8016d94:	819a      	strh	r2, [r3, #12]
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	2200      	movs	r2, #0
 8016d9a:	739a      	strb	r2, [r3, #14]
        {
        }
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	4618      	mov	r0, r3
 8016da0:	370c      	adds	r7, #12
 8016da2:	46bd      	mov	sp, r7
 8016da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da8:	4770      	bx	lr

08016daa <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8016daa:	b580      	push	{r7, lr}
 8016dac:	b082      	sub	sp, #8
 8016dae:	af00      	add	r7, sp, #0
 8016db0:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	4618      	mov	r0, r3
 8016db6:	f7ff ffd5 	bl	8016d64 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	2200      	movs	r2, #0
 8016dbe:	611a      	str	r2, [r3, #16]
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	829a      	strh	r2, [r3, #20]
    {
    }
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	4618      	mov	r0, r3
 8016dca:	3708      	adds	r7, #8
 8016dcc:	46bd      	mov	sp, r7
 8016dce:	bd80      	pop	{r7, pc}

08016dd0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b084      	sub	sp, #16
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	60f8      	str	r0, [r7, #12]
 8016dd8:	60b9      	str	r1, [r7, #8]
 8016dda:	607a      	str	r2, [r7, #4]
 8016ddc:	603b      	str	r3, [r7, #0]
          displayOrientationChangeRequested(false)
 8016dde:	4a44      	ldr	r2, [pc, #272]	; (8016ef0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	601a      	str	r2, [r3, #0]
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	68ba      	ldr	r2, [r7, #8]
 8016de8:	605a      	str	r2, [r3, #4]
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	687a      	ldr	r2, [r7, #4]
 8016dee:	609a      	str	r2, [r3, #8]
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	683a      	ldr	r2, [r7, #0]
 8016df4:	60da      	str	r2, [r3, #12]
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	2200      	movs	r2, #0
 8016dfa:	611a      	str	r2, [r3, #16]
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	2200      	movs	r2, #0
 8016e00:	615a      	str	r2, [r3, #20]
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	2200      	movs	r2, #0
 8016e06:	619a      	str	r2, [r3, #24]
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	331c      	adds	r3, #28
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f7ff ffcc 	bl	8016daa <_ZN8touchgfx8GesturesC1Ev>
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	2200      	movs	r2, #0
 8016e16:	639a      	str	r2, [r3, #56]	; 0x38
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	2200      	movs	r2, #0
 8016e22:	641a      	str	r2, [r3, #64]	; 0x40
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	2200      	movs	r2, #0
 8016e28:	645a      	str	r2, [r3, #68]	; 0x44
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	2200      	movs	r2, #0
 8016e2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	2201      	movs	r2, #1
 8016e36:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	2200      	movs	r2, #0
 8016e46:	64da      	str	r2, [r3, #76]	; 0x4c
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	3350      	adds	r3, #80	; 0x50
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	f7f8 fbc1 	bl	800f5d4 <_ZN8touchgfx4RectC1Ev>
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	2201      	movs	r2, #1
 8016e56:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	2200      	movs	r2, #0
 8016e66:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	2201      	movs	r2, #1
 8016e6e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	2200      	movs	r2, #0
 8016e76:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	2200      	movs	r2, #0
 8016e86:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	2200      	movs	r2, #0
 8016e8e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	2200      	movs	r2, #0
 8016e96:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	2200      	movs	r2, #0
 8016e9e:	671a      	str	r2, [r3, #112]	; 0x70
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8016ea8:	4a12      	ldr	r2, [pc, #72]	; (8016ef4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8016eae:	4a12      	ldr	r2, [pc, #72]	; (8016ef8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8016eb0:	8b3b      	ldrh	r3, [r7, #24]
 8016eb2:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8016eb4:	4a11      	ldr	r2, [pc, #68]	; (8016efc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8016eb6:	8bbb      	ldrh	r3, [r7, #28]
 8016eb8:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8016eba:	4b11      	ldr	r3, [pc, #68]	; (8016f00 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8016ebc:	2200      	movs	r2, #0
 8016ebe:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8016ec0:	4b0d      	ldr	r3, [pc, #52]	; (8016ef8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8016ec2:	881a      	ldrh	r2, [r3, #0]
 8016ec4:	4b0f      	ldr	r3, [pc, #60]	; (8016f04 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8016ec6:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8016ec8:	4b0c      	ldr	r3, [pc, #48]	; (8016efc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8016eca:	881a      	ldrh	r2, [r3, #0]
 8016ecc:	4b0e      	ldr	r3, [pc, #56]	; (8016f08 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8016ece:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8016ed0:	8b3a      	ldrh	r2, [r7, #24]
 8016ed2:	8bbb      	ldrh	r3, [r7, #28]
 8016ed4:	429a      	cmp	r2, r3
 8016ed6:	d301      	bcc.n	8016edc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8016ed8:	2200      	movs	r2, #0
 8016eda:	e000      	b.n	8016ede <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8016edc:	2201      	movs	r2, #1
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	3710      	adds	r7, #16
 8016eea:	46bd      	mov	sp, r7
 8016eec:	bd80      	pop	{r7, pc}
 8016eee:	bf00      	nop
 8016ef0:	0802bddc 	.word	0x0802bddc
 8016ef4:	2000b41c 	.word	0x2000b41c
 8016ef8:	2000b410 	.word	0x2000b410
 8016efc:	2000b412 	.word	0x2000b412
 8016f00:	2000b414 	.word	0x2000b414
 8016f04:	2000b416 	.word	0x2000b416
 8016f08:	2000b418 	.word	0x2000b418

08016f0c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b082      	sub	sp, #8
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
 8016f14:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8016f16:	683b      	ldr	r3, [r7, #0]
 8016f18:	4618      	mov	r0, r3
 8016f1a:	f7f8 ffef 	bl	800fefc <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8016f1e:	bf00      	nop
 8016f20:	3708      	adds	r7, #8
 8016f22:	46bd      	mov	sp, r7
 8016f24:	bd80      	pop	{r7, pc}
	...

08016f28 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b086      	sub	sp, #24
 8016f2c:	af02      	add	r7, sp, #8
 8016f2e:	60f8      	str	r0, [r7, #12]
 8016f30:	60b9      	str	r1, [r7, #8]
 8016f32:	607a      	str	r2, [r7, #4]
 8016f34:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8016f36:	68f8      	ldr	r0, [r7, #12]
 8016f38:	69bb      	ldr	r3, [r7, #24]
 8016f3a:	9300      	str	r3, [sp, #0]
 8016f3c:	683b      	ldr	r3, [r7, #0]
 8016f3e:	687a      	ldr	r2, [r7, #4]
 8016f40:	68b9      	ldr	r1, [r7, #8]
 8016f42:	f7ff feaf 	bl	8016ca4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8016f46:	4a04      	ldr	r2, [pc, #16]	; (8016f58 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	601a      	str	r2, [r3, #0]
    {

    }
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	4618      	mov	r0, r3
 8016f50:	3710      	adds	r7, #16
 8016f52:	46bd      	mov	sp, r7
 8016f54:	bd80      	pop	{r7, pc}
 8016f56:	bf00      	nop
 8016f58:	0802b378 	.word	0x0802b378

08016f5c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	af00      	add	r7, sp, #0
 8016f60:	4801      	ldr	r0, [pc, #4]	; (8016f68 <__tcf_0+0xc>)
 8016f62:	f000 f953 	bl	801720c <_ZN12FrontendHeapD1Ev>
 8016f66:	bd80      	pop	{r7, pc}
 8016f68:	200085dc 	.word	0x200085dc

08016f6c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8016f70:	4b08      	ldr	r3, [pc, #32]	; (8016f94 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	f003 0301 	and.w	r3, r3, #1
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d108      	bne.n	8016f8e <_ZN12FrontendHeap11getInstanceEv+0x22>
 8016f7c:	4806      	ldr	r0, [pc, #24]	; (8016f98 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8016f7e:	f000 f867 	bl	8017050 <_ZN12FrontendHeapC1Ev>
 8016f82:	4b04      	ldr	r3, [pc, #16]	; (8016f94 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8016f84:	2201      	movs	r2, #1
 8016f86:	601a      	str	r2, [r3, #0]
 8016f88:	4804      	ldr	r0, [pc, #16]	; (8016f9c <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8016f8a:	f011 fa99 	bl	80284c0 <atexit>
        return instance;
 8016f8e:	4b02      	ldr	r3, [pc, #8]	; (8016f98 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8016f90:	4618      	mov	r0, r3
 8016f92:	bd80      	pop	{r7, pc}
 8016f94:	2000a710 	.word	0x2000a710
 8016f98:	200085dc 	.word	0x200085dc
 8016f9c:	08016f5d 	.word	0x08016f5d

08016fa0 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b082      	sub	sp, #8
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	6078      	str	r0, [r7, #4]
 8016fa8:	4a05      	ldr	r2, [pc, #20]	; (8016fc0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	601a      	str	r2, [r3, #0]
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	f7ff fe97 	bl	8016ce4 <_ZN8touchgfx7MVPHeapD1Ev>
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	4618      	mov	r0, r3
 8016fba:	3708      	adds	r7, #8
 8016fbc:	46bd      	mov	sp, r7
 8016fbe:	bd80      	pop	{r7, pc}
 8016fc0:	0802b378 	.word	0x0802b378

08016fc4 <_ZN16FrontendHeapBaseD0Ev>:
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b082      	sub	sp, #8
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	6078      	str	r0, [r7, #4]
 8016fcc:	6878      	ldr	r0, [r7, #4]
 8016fce:	f7ff ffe7 	bl	8016fa0 <_ZN16FrontendHeapBaseD1Ev>
 8016fd2:	2114      	movs	r1, #20
 8016fd4:	6878      	ldr	r0, [r7, #4]
 8016fd6:	f011 fa29 	bl	802842c <_ZdlPvj>
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	4618      	mov	r0, r3
 8016fde:	3708      	adds	r7, #8
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	bd80      	pop	{r7, pc}

08016fe4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b082      	sub	sp, #8
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	6078      	str	r0, [r7, #4]
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	4618      	mov	r0, r3
 8016ff0:	f000 fd74 	bl	8017adc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016ff4:	4a03      	ldr	r2, [pc, #12]	; (8017004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	601a      	str	r2, [r3, #0]
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	3708      	adds	r7, #8
 8017000:	46bd      	mov	sp, r7
 8017002:	bd80      	pop	{r7, pc}
 8017004:	0802b344 	.word	0x0802b344

08017008 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8017008:	b580      	push	{r7, lr}
 801700a:	b082      	sub	sp, #8
 801700c:	af00      	add	r7, sp, #0
 801700e:	6078      	str	r0, [r7, #4]
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	4618      	mov	r0, r3
 8017014:	f000 fd62 	bl	8017adc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8017018:	4a03      	ldr	r2, [pc, #12]	; (8017028 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	601a      	str	r2, [r3, #0]
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	4618      	mov	r0, r3
 8017022:	3708      	adds	r7, #8
 8017024:	46bd      	mov	sp, r7
 8017026:	bd80      	pop	{r7, pc}
 8017028:	0802b310 	.word	0x0802b310

0801702c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 801702c:	b580      	push	{r7, lr}
 801702e:	b082      	sub	sp, #8
 8017030:	af00      	add	r7, sp, #0
 8017032:	6078      	str	r0, [r7, #4]
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	4618      	mov	r0, r3
 8017038:	f000 fd50 	bl	8017adc <_ZN8touchgfx17AbstractPartitionC1Ev>
 801703c:	4a03      	ldr	r2, [pc, #12]	; (801704c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	601a      	str	r2, [r3, #0]
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	4618      	mov	r0, r3
 8017046:	3708      	adds	r7, #8
 8017048:	46bd      	mov	sp, r7
 801704a:	bd80      	pop	{r7, pc}
 801704c:	0802b2dc 	.word	0x0802b2dc

08017050 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8017050:	b5b0      	push	{r4, r5, r7, lr}
 8017052:	b084      	sub	sp, #16
 8017054:	af02      	add	r7, sp, #8
 8017056:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8017058:	6878      	ldr	r0, [r7, #4]
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	f103 0414 	add.w	r4, r3, #20
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	f641 727c 	movw	r2, #8060	; 0x1f7c
 801706c:	441a      	add	r2, r3
 801706e:	6879      	ldr	r1, [r7, #4]
 8017070:	f641 73dc 	movw	r3, #8156	; 0x1fdc
 8017074:	440b      	add	r3, r1
 8017076:	9300      	str	r3, [sp, #0]
 8017078:	4613      	mov	r3, r2
 801707a:	462a      	mov	r2, r5
 801707c:	4621      	mov	r1, r4
 801707e:	f7ff ff53 	bl	8016f28 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8017082:	4a1a      	ldr	r2, [pc, #104]	; (80170ec <_ZN12FrontendHeapC1Ev+0x9c>)
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	601a      	str	r2, [r3, #0]
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	3314      	adds	r3, #20
 801708c:	4618      	mov	r0, r3
 801708e:	f7ff ffa9 	bl	8016fe4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	332c      	adds	r3, #44	; 0x2c
 8017096:	4618      	mov	r0, r3
 8017098:	f7ff ffb6 	bl	8017008 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801709c:	687a      	ldr	r2, [r7, #4]
 801709e:	f641 737c 	movw	r3, #8060	; 0x1f7c
 80170a2:	4413      	add	r3, r2
 80170a4:	4618      	mov	r0, r3
 80170a6:	f7ff ffc1 	bl	801702c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 80170aa:	687a      	ldr	r2, [r7, #4]
 80170ac:	f641 73d8 	movw	r3, #8152	; 0x1fd8
 80170b0:	4413      	add	r3, r2
 80170b2:	4618      	mov	r0, r3
 80170b4:	f7fe f800 	bl	80150b8 <_ZN5ModelC1Ev>
 80170b8:	687a      	ldr	r2, [r7, #4]
 80170ba:	f641 73dc 	movw	r3, #8156	; 0x1fdc
 80170be:	4413      	add	r3, r2
 80170c0:	687a      	ldr	r2, [r7, #4]
 80170c2:	f641 71d8 	movw	r1, #8152	; 0x1fd8
 80170c6:	4411      	add	r1, r2
 80170c8:	687a      	ldr	r2, [r7, #4]
 80170ca:	4618      	mov	r0, r3
 80170cc:	f7fd ffde 	bl	801508c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80170d0:	6878      	ldr	r0, [r7, #4]
 80170d2:	687a      	ldr	r2, [r7, #4]
 80170d4:	f641 73dc 	movw	r3, #8156	; 0x1fdc
 80170d8:	4413      	add	r3, r2
 80170da:	4619      	mov	r1, r3
 80170dc:	f7ff ff16 	bl	8016f0c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	4618      	mov	r0, r3
 80170e4:	3708      	adds	r7, #8
 80170e6:	46bd      	mov	sp, r7
 80170e8:	bdb0      	pop	{r4, r5, r7, pc}
 80170ea:	bf00      	nop
 80170ec:	0802b2c8 	.word	0x0802b2c8

080170f0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 80170f0:	b580      	push	{r7, lr}
 80170f2:	b086      	sub	sp, #24
 80170f4:	af02      	add	r7, sp, #8
 80170f6:	60f8      	str	r0, [r7, #12]
 80170f8:	60b9      	str	r1, [r7, #8]
 80170fa:	607a      	str	r2, [r7, #4]
 80170fc:	603b      	str	r3, [r7, #0]
 80170fe:	68f8      	ldr	r0, [r7, #12]
 8017100:	8bbb      	ldrh	r3, [r7, #28]
 8017102:	9301      	str	r3, [sp, #4]
 8017104:	8b3b      	ldrh	r3, [r7, #24]
 8017106:	9300      	str	r3, [sp, #0]
 8017108:	683b      	ldr	r3, [r7, #0]
 801710a:	687a      	ldr	r2, [r7, #4]
 801710c:	68b9      	ldr	r1, [r7, #8]
 801710e:	f7ff fe5f 	bl	8016dd0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8017112:	4a04      	ldr	r2, [pc, #16]	; (8017124 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	601a      	str	r2, [r3, #0]
    }
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	4618      	mov	r0, r3
 801711c:	3710      	adds	r7, #16
 801711e:	46bd      	mov	sp, r7
 8017120:	bd80      	pop	{r7, pc}
 8017122:	bf00      	nop
 8017124:	0802b39c 	.word	0x0802b39c

08017128 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8017128:	b580      	push	{r7, lr}
 801712a:	b086      	sub	sp, #24
 801712c:	af02      	add	r7, sp, #8
 801712e:	60f8      	str	r0, [r7, #12]
 8017130:	60b9      	str	r1, [r7, #8]
 8017132:	607a      	str	r2, [r7, #4]
 8017134:	603b      	str	r3, [r7, #0]
 8017136:	68f8      	ldr	r0, [r7, #12]
 8017138:	8bbb      	ldrh	r3, [r7, #28]
 801713a:	9301      	str	r3, [sp, #4]
 801713c:	8b3b      	ldrh	r3, [r7, #24]
 801713e:	9300      	str	r3, [sp, #0]
 8017140:	683b      	ldr	r3, [r7, #0]
 8017142:	687a      	ldr	r2, [r7, #4]
 8017144:	68b9      	ldr	r1, [r7, #8]
 8017146:	f7ff ffd3 	bl	80170f0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801714a:	4a04      	ldr	r2, [pc, #16]	; (801715c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	601a      	str	r2, [r3, #0]
    }
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	4618      	mov	r0, r3
 8017154:	3710      	adds	r7, #16
 8017156:	46bd      	mov	sp, r7
 8017158:	bd80      	pop	{r7, pc}
 801715a:	bf00      	nop
 801715c:	0802b088 	.word	0x0802b088

08017160 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8017160:	b480      	push	{r7}
 8017162:	b083      	sub	sp, #12
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
 8017168:	4a04      	ldr	r2, [pc, #16]	; (801717c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	601a      	str	r2, [r3, #0]
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	4618      	mov	r0, r3
 8017172:	370c      	adds	r7, #12
 8017174:	46bd      	mov	sp, r7
 8017176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717a:	4770      	bx	lr
 801717c:	0802b070 	.word	0x0802b070

08017180 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8017180:	b580      	push	{r7, lr}
 8017182:	b082      	sub	sp, #8
 8017184:	af00      	add	r7, sp, #0
 8017186:	6078      	str	r0, [r7, #4]
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	4618      	mov	r0, r3
 801718c:	f7ff ffe8 	bl	8017160 <_ZN8touchgfx15TouchControllerC1Ev>
 8017190:	4a03      	ldr	r2, [pc, #12]	; (80171a0 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	601a      	str	r2, [r3, #0]
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	4618      	mov	r0, r3
 801719a:	3708      	adds	r7, #8
 801719c:	46bd      	mov	sp, r7
 801719e:	bd80      	pop	{r7, pc}
 80171a0:	0802b058 	.word	0x0802b058

080171a4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80171a4:	b590      	push	{r4, r7, lr}
 80171a6:	b085      	sub	sp, #20
 80171a8:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80171aa:	f7fd fd4b 	bl	8014c44 <_ZN14BitmapDatabase11getInstanceEv>
 80171ae:	4604      	mov	r4, r0
 80171b0:	f7fd fd52 	bl	8014c58 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80171b4:	4603      	mov	r3, r0
 80171b6:	4619      	mov	r1, r3
 80171b8:	2300      	movs	r3, #0
 80171ba:	9300      	str	r3, [sp, #0]
 80171bc:	2300      	movs	r3, #0
 80171be:	2200      	movs	r2, #0
 80171c0:	4620      	mov	r0, r4
 80171c2:	f007 fafd 	bl	801e7c0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 80171c6:	4809      	ldr	r0, [pc, #36]	; (80171ec <touchgfx_init+0x48>)
 80171c8:	f7ff fd5c 	bl	8016c84 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 80171cc:	2000      	movs	r0, #0
 80171ce:	f7fd fe7b 	bl	8014ec8 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80171d2:	4807      	ldr	r0, [pc, #28]	; (80171f0 <touchgfx_init+0x4c>)
 80171d4:	f007 fa3e 	bl	801e654 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 80171d8:	f7ff fec8 	bl	8016f6c <_ZN12FrontendHeap11getInstanceEv>
 80171dc:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 80171de:	4805      	ldr	r0, [pc, #20]	; (80171f4 <touchgfx_init+0x50>)
 80171e0:	f7fe ffd2 	bl	8016188 <_ZN11TouchGFXHAL10initializeEv>
}
 80171e4:	bf00      	nop
 80171e6:	370c      	adds	r7, #12
 80171e8:	46bd      	mov	sp, r7
 80171ea:	bd90      	pop	{r4, r7, pc}
 80171ec:	2000b390 	.word	0x2000b390
 80171f0:	2000003c 	.word	0x2000003c
 80171f4:	2000b394 	.word	0x2000b394

080171f8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80171f8:	b580      	push	{r7, lr}
 80171fa:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80171fc:	4802      	ldr	r0, [pc, #8]	; (8017208 <touchgfx_taskEntry+0x10>)
 80171fe:	f001 f946 	bl	801848e <_ZN8touchgfx3HAL9taskEntryEv>
}
 8017202:	bf00      	nop
 8017204:	bd80      	pop	{r7, pc}
 8017206:	bf00      	nop
 8017208:	2000b394 	.word	0x2000b394

0801720c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 801720c:	b580      	push	{r7, lr}
 801720e:	b082      	sub	sp, #8
 8017210:	af00      	add	r7, sp, #0
 8017212:	6078      	str	r0, [r7, #4]
 8017214:	4a11      	ldr	r2, [pc, #68]	; (801725c <_ZN12FrontendHeapD1Ev+0x50>)
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	601a      	str	r2, [r3, #0]
 801721a:	687a      	ldr	r2, [r7, #4]
 801721c:	f641 73dc 	movw	r3, #8156	; 0x1fdc
 8017220:	4413      	add	r3, r2
 8017222:	4618      	mov	r0, r3
 8017224:	f7fd fefc 	bl	8015020 <_ZN19FrontendApplicationD1Ev>
 8017228:	687a      	ldr	r2, [r7, #4]
 801722a:	f641 737c 	movw	r3, #8060	; 0x1f7c
 801722e:	4413      	add	r3, r2
 8017230:	4618      	mov	r0, r3
 8017232:	f000 f827 	bl	8017284 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	332c      	adds	r3, #44	; 0x2c
 801723a:	4618      	mov	r0, r3
 801723c:	f000 f844 	bl	80172c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	3314      	adds	r3, #20
 8017244:	4618      	mov	r0, r3
 8017246:	f000 f863 	bl	8017310 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	4618      	mov	r0, r3
 801724e:	f7ff fea7 	bl	8016fa0 <_ZN16FrontendHeapBaseD1Ev>
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	4618      	mov	r0, r3
 8017256:	3708      	adds	r7, #8
 8017258:	46bd      	mov	sp, r7
 801725a:	bd80      	pop	{r7, pc}
 801725c:	0802b2c8 	.word	0x0802b2c8

08017260 <_ZN12FrontendHeapD0Ev>:
 8017260:	b580      	push	{r7, lr}
 8017262:	b082      	sub	sp, #8
 8017264:	af00      	add	r7, sp, #0
 8017266:	6078      	str	r0, [r7, #4]
 8017268:	6878      	ldr	r0, [r7, #4]
 801726a:	f7ff ffcf 	bl	801720c <_ZN12FrontendHeapD1Ev>
 801726e:	f242 1134 	movw	r1, #8500	; 0x2134
 8017272:	6878      	ldr	r0, [r7, #4]
 8017274:	f011 f8da 	bl	802842c <_ZdlPvj>
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	4618      	mov	r0, r3
 801727c:	3708      	adds	r7, #8
 801727e:	46bd      	mov	sp, r7
 8017280:	bd80      	pop	{r7, pc}
	...

08017284 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8017284:	b580      	push	{r7, lr}
 8017286:	b082      	sub	sp, #8
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]
 801728c:	4a05      	ldr	r2, [pc, #20]	; (80172a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	601a      	str	r2, [r3, #0]
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	4618      	mov	r0, r3
 8017296:	f000 fc1f 	bl	8017ad8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	4618      	mov	r0, r3
 801729e:	3708      	adds	r7, #8
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}
 80172a4:	0802b2dc 	.word	0x0802b2dc

080172a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 80172a8:	b580      	push	{r7, lr}
 80172aa:	b082      	sub	sp, #8
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	6078      	str	r0, [r7, #4]
 80172b0:	6878      	ldr	r0, [r7, #4]
 80172b2:	f7ff ffe7 	bl	8017284 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80172b6:	215c      	movs	r1, #92	; 0x5c
 80172b8:	6878      	ldr	r0, [r7, #4]
 80172ba:	f011 f8b7 	bl	802842c <_ZdlPvj>
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	4618      	mov	r0, r3
 80172c2:	3708      	adds	r7, #8
 80172c4:	46bd      	mov	sp, r7
 80172c6:	bd80      	pop	{r7, pc}

080172c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80172c8:	b580      	push	{r7, lr}
 80172ca:	b082      	sub	sp, #8
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	6078      	str	r0, [r7, #4]
 80172d0:	4a05      	ldr	r2, [pc, #20]	; (80172e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	601a      	str	r2, [r3, #0]
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	4618      	mov	r0, r3
 80172da:	f000 fbfd 	bl	8017ad8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	4618      	mov	r0, r3
 80172e2:	3708      	adds	r7, #8
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd80      	pop	{r7, pc}
 80172e8:	0802b310 	.word	0x0802b310

080172ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b082      	sub	sp, #8
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	6078      	str	r0, [r7, #4]
 80172f4:	6878      	ldr	r0, [r7, #4]
 80172f6:	f7ff ffe7 	bl	80172c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80172fa:	f641 7150 	movw	r1, #8016	; 0x1f50
 80172fe:	6878      	ldr	r0, [r7, #4]
 8017300:	f011 f894 	bl	802842c <_ZdlPvj>
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	4618      	mov	r0, r3
 8017308:	3708      	adds	r7, #8
 801730a:	46bd      	mov	sp, r7
 801730c:	bd80      	pop	{r7, pc}
	...

08017310 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8017310:	b580      	push	{r7, lr}
 8017312:	b082      	sub	sp, #8
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
 8017318:	4a05      	ldr	r2, [pc, #20]	; (8017330 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	601a      	str	r2, [r3, #0]
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	4618      	mov	r0, r3
 8017322:	f000 fbd9 	bl	8017ad8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	4618      	mov	r0, r3
 801732a:	3708      	adds	r7, #8
 801732c:	46bd      	mov	sp, r7
 801732e:	bd80      	pop	{r7, pc}
 8017330:	0802b344 	.word	0x0802b344

08017334 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8017334:	b580      	push	{r7, lr}
 8017336:	b082      	sub	sp, #8
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
 801733c:	6878      	ldr	r0, [r7, #4]
 801733e:	f7ff ffe7 	bl	8017310 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017342:	2118      	movs	r1, #24
 8017344:	6878      	ldr	r0, [r7, #4]
 8017346:	f011 f871 	bl	802842c <_ZdlPvj>
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	4618      	mov	r0, r3
 801734e:	3708      	adds	r7, #8
 8017350:	46bd      	mov	sp, r7
 8017352:	bd80      	pop	{r7, pc}

08017354 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8017354:	b580      	push	{r7, lr}
 8017356:	b082      	sub	sp, #8
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
 801735c:	4a05      	ldr	r2, [pc, #20]	; (8017374 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	601a      	str	r2, [r3, #0]
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	4618      	mov	r0, r3
 8017366:	f7ff fcdd 	bl	8016d24 <_ZN8touchgfx3LCDD1Ev>
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	4618      	mov	r0, r3
 801736e:	3708      	adds	r7, #8
 8017370:	46bd      	mov	sp, r7
 8017372:	bd80      	pop	{r7, pc}
 8017374:	0802df7c 	.word	0x0802df7c

08017378 <_ZN8touchgfx8LCD24bppD0Ev>:
 8017378:	b580      	push	{r7, lr}
 801737a:	b082      	sub	sp, #8
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
 8017380:	6878      	ldr	r0, [r7, #4]
 8017382:	f7ff ffe7 	bl	8017354 <_ZN8touchgfx8LCD24bppD1Ev>
 8017386:	2158      	movs	r1, #88	; 0x58
 8017388:	6878      	ldr	r0, [r7, #4]
 801738a:	f011 f84f 	bl	802842c <_ZdlPvj>
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	4618      	mov	r0, r3
 8017392:	3708      	adds	r7, #8
 8017394:	46bd      	mov	sp, r7
 8017396:	bd80      	pop	{r7, pc}

08017398 <_Z41__static_initialization_and_destruction_0ii>:
 8017398:	b580      	push	{r7, lr}
 801739a:	b084      	sub	sp, #16
 801739c:	af02      	add	r7, sp, #8
 801739e:	6078      	str	r0, [r7, #4]
 80173a0:	6039      	str	r1, [r7, #0]
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	2b01      	cmp	r3, #1
 80173a6:	d119      	bne.n	80173dc <_Z41__static_initialization_and_destruction_0ii+0x44>
 80173a8:	683b      	ldr	r3, [r7, #0]
 80173aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80173ae:	4293      	cmp	r3, r2
 80173b0:	d114      	bne.n	80173dc <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80173b2:	4818      	ldr	r0, [pc, #96]	; (8017414 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80173b4:	f7ff fee4 	bl	8017180 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 80173b8:	4817      	ldr	r0, [pc, #92]	; (8017418 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80173ba:	f7ff f961 	bl	8016680 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 80173be:	4817      	ldr	r0, [pc, #92]	; (801741c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80173c0:	f009 fbec 	bl	8020b9c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80173c4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80173c8:	9301      	str	r3, [sp, #4]
 80173ca:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80173ce:	9300      	str	r3, [sp, #0]
 80173d0:	4b10      	ldr	r3, [pc, #64]	; (8017414 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80173d2:	4a12      	ldr	r2, [pc, #72]	; (801741c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80173d4:	4910      	ldr	r1, [pc, #64]	; (8017418 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80173d6:	4812      	ldr	r0, [pc, #72]	; (8017420 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80173d8:	f7ff fea6 	bl	8017128 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d113      	bne.n	801740a <_Z41__static_initialization_and_destruction_0ii+0x72>
 80173e2:	683b      	ldr	r3, [r7, #0]
 80173e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80173e8:	4293      	cmp	r3, r2
 80173ea:	d10e      	bne.n	801740a <_Z41__static_initialization_and_destruction_0ii+0x72>
 80173ec:	480c      	ldr	r0, [pc, #48]	; (8017420 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80173ee:	f7fe ff43 	bl	8016278 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80173f2:	480c      	ldr	r0, [pc, #48]	; (8017424 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80173f4:	f7f7 fe60 	bl	800f0b8 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80173f8:	4808      	ldr	r0, [pc, #32]	; (801741c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80173fa:	f7ff ffab 	bl	8017354 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 80173fe:	4806      	ldr	r0, [pc, #24]	; (8017418 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8017400:	f7ff f968 	bl	80166d4 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8017404:	4803      	ldr	r0, [pc, #12]	; (8017414 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8017406:	f7fe fc9b 	bl	8015d40 <_ZN20STM32TouchControllerD1Ev>
}
 801740a:	bf00      	nop
 801740c:	3708      	adds	r7, #8
 801740e:	46bd      	mov	sp, r7
 8017410:	bd80      	pop	{r7, pc}
 8017412:	bf00      	nop
 8017414:	2000a714 	.word	0x2000a714
 8017418:	2000a718 	.word	0x2000a718
 801741c:	2000b338 	.word	0x2000b338
 8017420:	2000b394 	.word	0x2000b394
 8017424:	2000003c 	.word	0x2000003c

08017428 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity
     */
    virtual uint16_t capacity() const
 8017428:	b480      	push	{r7}
 801742a:	b083      	sub	sp, #12
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8017430:	2301      	movs	r3, #1
    }
 8017432:	4618      	mov	r0, r3
 8017434:	370c      	adds	r7, #12
 8017436:	46bd      	mov	sp, r7
 8017438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801743c:	4770      	bx	lr

0801743e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size
     */
    virtual uint32_t element_size()
 801743e:	b480      	push	{r7}
 8017440:	b083      	sub	sp, #12
 8017442:	af00      	add	r7, sp, #0
 8017444:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8017446:	2354      	movs	r3, #84	; 0x54
    }
 8017448:	4618      	mov	r0, r3
 801744a:	370c      	adds	r7, #12
 801744c:	46bd      	mov	sp, r7
 801744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017452:	4770      	bx	lr

08017454 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual void* element(uint16_t index)
 8017454:	b480      	push	{r7}
 8017456:	b083      	sub	sp, #12
 8017458:	af00      	add	r7, sp, #0
 801745a:	6078      	str	r0, [r7, #4]
 801745c:	460b      	mov	r3, r1
 801745e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017460:	887b      	ldrh	r3, [r7, #2]
 8017462:	2254      	movs	r2, #84	; 0x54
 8017464:	fb02 f303 	mul.w	r3, r2, r3
 8017468:	3308      	adds	r3, #8
 801746a:	687a      	ldr	r2, [r7, #4]
 801746c:	4413      	add	r3, r2
    }
 801746e:	4618      	mov	r0, r3
 8017470:	370c      	adds	r7, #12
 8017472:	46bd      	mov	sp, r7
 8017474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017478:	4770      	bx	lr

0801747a <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual const void* element(uint16_t index) const
 801747a:	b480      	push	{r7}
 801747c:	b083      	sub	sp, #12
 801747e:	af00      	add	r7, sp, #0
 8017480:	6078      	str	r0, [r7, #4]
 8017482:	460b      	mov	r3, r1
 8017484:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017486:	887b      	ldrh	r3, [r7, #2]
 8017488:	2254      	movs	r2, #84	; 0x54
 801748a:	fb02 f303 	mul.w	r3, r2, r3
 801748e:	3308      	adds	r3, #8
 8017490:	687a      	ldr	r2, [r7, #4]
 8017492:	4413      	add	r3, r2
    }
 8017494:	4618      	mov	r0, r3
 8017496:	370c      	adds	r7, #12
 8017498:	46bd      	mov	sp, r7
 801749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801749e:	4770      	bx	lr

080174a0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80174a0:	b480      	push	{r7}
 80174a2:	b083      	sub	sp, #12
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80174a8:	2301      	movs	r3, #1
    }
 80174aa:	4618      	mov	r0, r3
 80174ac:	370c      	adds	r7, #12
 80174ae:	46bd      	mov	sp, r7
 80174b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b4:	4770      	bx	lr

080174b6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80174b6:	b480      	push	{r7}
 80174b8:	b083      	sub	sp, #12
 80174ba:	af00      	add	r7, sp, #0
 80174bc:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80174be:	f641 7348 	movw	r3, #8008	; 0x1f48
    }
 80174c2:	4618      	mov	r0, r3
 80174c4:	370c      	adds	r7, #12
 80174c6:	46bd      	mov	sp, r7
 80174c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174cc:	4770      	bx	lr

080174ce <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80174ce:	b480      	push	{r7}
 80174d0:	b083      	sub	sp, #12
 80174d2:	af00      	add	r7, sp, #0
 80174d4:	6078      	str	r0, [r7, #4]
 80174d6:	460b      	mov	r3, r1
 80174d8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80174da:	887b      	ldrh	r3, [r7, #2]
 80174dc:	f641 7248 	movw	r2, #8008	; 0x1f48
 80174e0:	fb02 f303 	mul.w	r3, r2, r3
 80174e4:	3308      	adds	r3, #8
 80174e6:	687a      	ldr	r2, [r7, #4]
 80174e8:	4413      	add	r3, r2
    }
 80174ea:	4618      	mov	r0, r3
 80174ec:	370c      	adds	r7, #12
 80174ee:	46bd      	mov	sp, r7
 80174f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f4:	4770      	bx	lr

080174f6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80174f6:	b480      	push	{r7}
 80174f8:	b083      	sub	sp, #12
 80174fa:	af00      	add	r7, sp, #0
 80174fc:	6078      	str	r0, [r7, #4]
 80174fe:	460b      	mov	r3, r1
 8017500:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017502:	887b      	ldrh	r3, [r7, #2]
 8017504:	f641 7248 	movw	r2, #8008	; 0x1f48
 8017508:	fb02 f303 	mul.w	r3, r2, r3
 801750c:	3308      	adds	r3, #8
 801750e:	687a      	ldr	r2, [r7, #4]
 8017510:	4413      	add	r3, r2
    }
 8017512:	4618      	mov	r0, r3
 8017514:	370c      	adds	r7, #12
 8017516:	46bd      	mov	sp, r7
 8017518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801751c:	4770      	bx	lr

0801751e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801751e:	b480      	push	{r7}
 8017520:	b083      	sub	sp, #12
 8017522:	af00      	add	r7, sp, #0
 8017524:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8017526:	2301      	movs	r3, #1
    }
 8017528:	4618      	mov	r0, r3
 801752a:	370c      	adds	r7, #12
 801752c:	46bd      	mov	sp, r7
 801752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017532:	4770      	bx	lr

08017534 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8017534:	b480      	push	{r7}
 8017536:	b083      	sub	sp, #12
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801753c:	2310      	movs	r3, #16
    }
 801753e:	4618      	mov	r0, r3
 8017540:	370c      	adds	r7, #12
 8017542:	46bd      	mov	sp, r7
 8017544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017548:	4770      	bx	lr

0801754a <_ZN8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801754a:	b480      	push	{r7}
 801754c:	b083      	sub	sp, #12
 801754e:	af00      	add	r7, sp, #0
 8017550:	6078      	str	r0, [r7, #4]
 8017552:	460b      	mov	r3, r1
 8017554:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017556:	887b      	ldrh	r3, [r7, #2]
 8017558:	011b      	lsls	r3, r3, #4
 801755a:	3308      	adds	r3, #8
 801755c:	687a      	ldr	r2, [r7, #4]
 801755e:	4413      	add	r3, r2
    }
 8017560:	4618      	mov	r0, r3
 8017562:	370c      	adds	r7, #12
 8017564:	46bd      	mov	sp, r7
 8017566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756a:	4770      	bx	lr

0801756c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13PongPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801756c:	b480      	push	{r7}
 801756e:	b083      	sub	sp, #12
 8017570:	af00      	add	r7, sp, #0
 8017572:	6078      	str	r0, [r7, #4]
 8017574:	460b      	mov	r3, r1
 8017576:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017578:	887b      	ldrh	r3, [r7, #2]
 801757a:	011b      	lsls	r3, r3, #4
 801757c:	3308      	adds	r3, #8
 801757e:	687a      	ldr	r2, [r7, #4]
 8017580:	4413      	add	r3, r2
    }
 8017582:	4618      	mov	r0, r3
 8017584:	370c      	adds	r7, #12
 8017586:	46bd      	mov	sp, r7
 8017588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801758c:	4770      	bx	lr

0801758e <_GLOBAL__sub_I_touchgfx_init>:
 801758e:	b580      	push	{r7, lr}
 8017590:	af00      	add	r7, sp, #0
 8017592:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017596:	2001      	movs	r0, #1
 8017598:	f7ff fefe 	bl	8017398 <_Z41__static_initialization_and_destruction_0ii>
 801759c:	bd80      	pop	{r7, pc}

0801759e <_GLOBAL__sub_D_touchgfx_init>:
 801759e:	b580      	push	{r7, lr}
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80175a6:	2000      	movs	r0, #0
 80175a8:	f7ff fef6 	bl	8017398 <_Z41__static_initialization_and_destruction_0ii>
 80175ac:	bd80      	pop	{r7, pc}

080175ae <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80175ae:	b580      	push	{r7, lr}
 80175b0:	b082      	sub	sp, #8
 80175b2:	af00      	add	r7, sp, #0
 80175b4:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	3318      	adds	r3, #24
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	6878      	ldr	r0, [r7, #4]
 80175c0:	4798      	blx	r3
    }
 80175c2:	bf00      	nop
 80175c4:	3708      	adds	r7, #8
 80175c6:	46bd      	mov	sp, r7
 80175c8:	bd80      	pop	{r7, pc}

080175ca <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80175ca:	b480      	push	{r7}
 80175cc:	b083      	sub	sp, #12
 80175ce:	af00      	add	r7, sp, #0
 80175d0:	6078      	str	r0, [r7, #4]
 80175d2:	460b      	mov	r3, r1
 80175d4:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	78fa      	ldrb	r2, [r7, #3]
 80175da:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80175de:	bf00      	nop
 80175e0:	370c      	adds	r7, #12
 80175e2:	46bd      	mov	sp, r7
 80175e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e8:	4770      	bx	lr

080175ea <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80175ea:	b480      	push	{r7}
 80175ec:	b083      	sub	sp, #12
 80175ee:	af00      	add	r7, sp, #0
 80175f0:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80175f8:	3301      	adds	r3, #1
 80175fa:	b2da      	uxtb	r2, r3
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8017602:	bf00      	nop
 8017604:	370c      	adds	r7, #12
 8017606:	46bd      	mov	sp, r7
 8017608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760c:	4770      	bx	lr
	...

08017610 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8017610:	b580      	push	{r7, lr}
 8017612:	b082      	sub	sp, #8
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
 8017618:	460b      	mov	r3, r1
 801761a:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 801761c:	78fb      	ldrb	r3, [r7, #3]
 801761e:	2b00      	cmp	r3, #0
 8017620:	d002      	beq.n	8017628 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8017622:	78fb      	ldrb	r3, [r7, #3]
 8017624:	2b02      	cmp	r3, #2
 8017626:	d105      	bne.n	8017634 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	78fa      	ldrb	r2, [r7, #3]
 801762c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8017630:	2301      	movs	r3, #1
 8017632:	e027      	b.n	8017684 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8017634:	78fb      	ldrb	r3, [r7, #3]
 8017636:	2b01      	cmp	r3, #1
 8017638:	d123      	bne.n	8017682 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801763e:	2b00      	cmp	r3, #0
 8017640:	d014      	beq.n	801766c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	3380      	adds	r3, #128	; 0x80
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	6878      	ldr	r0, [r7, #4]
 801764c:	4798      	blx	r3
 801764e:	4603      	mov	r3, r0
 8017650:	461a      	mov	r2, r3
 8017652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017656:	429a      	cmp	r2, r3
 8017658:	d008      	beq.n	801766c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801765a:	4b0c      	ldr	r3, [pc, #48]	; (801768c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 801765c:	781b      	ldrb	r3, [r3, #0]
 801765e:	f083 0301 	eor.w	r3, r3, #1
 8017662:	b2db      	uxtb	r3, r3
 8017664:	2b00      	cmp	r3, #0
 8017666:	d001      	beq.n	801766c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017668:	2301      	movs	r3, #1
 801766a:	e000      	b.n	801766e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 801766c:	2300      	movs	r3, #0
 801766e:	2b00      	cmp	r3, #0
 8017670:	d005      	beq.n	801767e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	78fa      	ldrb	r2, [r7, #3]
 8017676:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 801767a:	2301      	movs	r3, #1
 801767c:	e002      	b.n	8017684 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 801767e:	2300      	movs	r3, #0
 8017680:	e000      	b.n	8017684 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8017682:	2300      	movs	r3, #0
    }
 8017684:	4618      	mov	r0, r3
 8017686:	3708      	adds	r7, #8
 8017688:	46bd      	mov	sp, r7
 801768a:	bd80      	pop	{r7, pc}
 801768c:	2000b41a 	.word	0x2000b41a

08017690 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8017690:	b480      	push	{r7}
 8017692:	b083      	sub	sp, #12
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
 8017698:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	683a      	ldr	r2, [r7, #0]
 801769e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80176a0:	bf00      	nop
 80176a2:	370c      	adds	r7, #12
 80176a4:	46bd      	mov	sp, r7
 80176a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176aa:	4770      	bx	lr

080176ac <__NVIC_EnableIRQ>:
{
 80176ac:	b480      	push	{r7}
 80176ae:	b083      	sub	sp, #12
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	4603      	mov	r3, r0
 80176b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80176b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	db0d      	blt.n	80176da <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80176be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80176c2:	b2db      	uxtb	r3, r3
 80176c4:	f003 021f 	and.w	r2, r3, #31
 80176c8:	4907      	ldr	r1, [pc, #28]	; (80176e8 <__NVIC_EnableIRQ+0x3c>)
 80176ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80176ce:	095b      	lsrs	r3, r3, #5
 80176d0:	2001      	movs	r0, #1
 80176d2:	fa00 f202 	lsl.w	r2, r0, r2
 80176d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80176da:	bf00      	nop
 80176dc:	370c      	adds	r7, #12
 80176de:	46bd      	mov	sp, r7
 80176e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e4:	4770      	bx	lr
 80176e6:	bf00      	nop
 80176e8:	e000e100 	.word	0xe000e100

080176ec <__NVIC_DisableIRQ>:
{
 80176ec:	b480      	push	{r7}
 80176ee:	b083      	sub	sp, #12
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	4603      	mov	r3, r0
 80176f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80176f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	db12      	blt.n	8017724 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80176fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017702:	b2db      	uxtb	r3, r3
 8017704:	f003 021f 	and.w	r2, r3, #31
 8017708:	4909      	ldr	r1, [pc, #36]	; (8017730 <__NVIC_DisableIRQ+0x44>)
 801770a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801770e:	095b      	lsrs	r3, r3, #5
 8017710:	2001      	movs	r0, #1
 8017712:	fa00 f202 	lsl.w	r2, r0, r2
 8017716:	3320      	adds	r3, #32
 8017718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801771c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8017720:	f3bf 8f6f 	isb	sy
}
 8017724:	bf00      	nop
 8017726:	370c      	adds	r7, #12
 8017728:	46bd      	mov	sp, r7
 801772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801772e:	4770      	bx	lr
 8017730:	e000e100 	.word	0xe000e100

08017734 <__NVIC_SetPriority>:
{
 8017734:	b480      	push	{r7}
 8017736:	b083      	sub	sp, #12
 8017738:	af00      	add	r7, sp, #0
 801773a:	4603      	mov	r3, r0
 801773c:	6039      	str	r1, [r7, #0]
 801773e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017744:	2b00      	cmp	r3, #0
 8017746:	db0c      	blt.n	8017762 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017748:	683b      	ldr	r3, [r7, #0]
 801774a:	b2db      	uxtb	r3, r3
 801774c:	4a0e      	ldr	r2, [pc, #56]	; (8017788 <__NVIC_SetPriority+0x54>)
 801774e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8017752:	4608      	mov	r0, r1
 8017754:	011b      	lsls	r3, r3, #4
 8017756:	b2d9      	uxtb	r1, r3
 8017758:	1813      	adds	r3, r2, r0
 801775a:	460a      	mov	r2, r1
 801775c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8017760:	e00c      	b.n	801777c <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017762:	683b      	ldr	r3, [r7, #0]
 8017764:	b2da      	uxtb	r2, r3
 8017766:	4909      	ldr	r1, [pc, #36]	; (801778c <__NVIC_SetPriority+0x58>)
 8017768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801776c:	b2db      	uxtb	r3, r3
 801776e:	f003 030f 	and.w	r3, r3, #15
 8017772:	3b04      	subs	r3, #4
 8017774:	0112      	lsls	r2, r2, #4
 8017776:	b2d2      	uxtb	r2, r2
 8017778:	440b      	add	r3, r1
 801777a:	761a      	strb	r2, [r3, #24]
}
 801777c:	bf00      	nop
 801777e:	370c      	adds	r7, #12
 8017780:	46bd      	mov	sp, r7
 8017782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017786:	4770      	bx	lr
 8017788:	e000e100 	.word	0xe000e100
 801778c:	e000ed00 	.word	0xe000ed00

08017790 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8017790:	b5b0      	push	{r4, r5, r7, lr}
 8017792:	b082      	sub	sp, #8
 8017794:	af00      	add	r7, sp, #0
 8017796:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	4618      	mov	r0, r3
 801779c:	f001 f93c 	bl	8018a18 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 80177a0:	687d      	ldr	r5, [r7, #4]
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	334c      	adds	r3, #76	; 0x4c
 80177a8:	681c      	ldr	r4, [r3, #0]
 80177aa:	f004 fceb 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 80177ae:	4603      	mov	r3, r0
 80177b0:	4619      	mov	r1, r3
 80177b2:	4628      	mov	r0, r5
 80177b4:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	490d      	ldr	r1, [pc, #52]	; (80177f0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80177ba:	4618      	mov	r0, r3
 80177bc:	f7ff ff68 	bl	8017690 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	2101      	movs	r1, #1
 80177c4:	4618      	mov	r0, r3
 80177c6:	f7ff ff23 	bl	8017610 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 80177ca:	6878      	ldr	r0, [r7, #4]
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	3374      	adds	r3, #116	; 0x74
 80177d2:	681c      	ldr	r4, [r3, #0]
 80177d4:	2300      	movs	r3, #0
 80177d6:	2200      	movs	r2, #0
 80177d8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80177dc:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	2101      	movs	r1, #1
 80177e2:	4618      	mov	r0, r3
 80177e4:	f7ff fef1 	bl	80175ca <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 80177e8:	bf00      	nop
 80177ea:	3708      	adds	r7, #8
 80177ec:	46bd      	mov	sp, r7
 80177ee:	bdb0      	pop	{r4, r5, r7, pc}
 80177f0:	080163cd 	.word	0x080163cd

080177f4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80177f4:	b580      	push	{r7, lr}
 80177f6:	b082      	sub	sp, #8
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80177fc:	2109      	movs	r1, #9
 80177fe:	205a      	movs	r0, #90	; 0x5a
 8017800:	f7ff ff98 	bl	8017734 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8017804:	2109      	movs	r1, #9
 8017806:	2058      	movs	r0, #88	; 0x58
 8017808:	f7ff ff94 	bl	8017734 <__NVIC_SetPriority>
}
 801780c:	bf00      	nop
 801780e:	3708      	adds	r7, #8
 8017810:	46bd      	mov	sp, r7
 8017812:	bd80      	pop	{r7, pc}

08017814 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8017814:	b580      	push	{r7, lr}
 8017816:	b082      	sub	sp, #8
 8017818:	af00      	add	r7, sp, #0
 801781a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 801781c:	205a      	movs	r0, #90	; 0x5a
 801781e:	f7ff ff45 	bl	80176ac <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8017822:	2058      	movs	r0, #88	; 0x58
 8017824:	f7ff ff42 	bl	80176ac <__NVIC_EnableIRQ>
}
 8017828:	bf00      	nop
 801782a:	3708      	adds	r7, #8
 801782c:	46bd      	mov	sp, r7
 801782e:	bd80      	pop	{r7, pc}

08017830 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b082      	sub	sp, #8
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8017838:	205a      	movs	r0, #90	; 0x5a
 801783a:	f7ff ff57 	bl	80176ec <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 801783e:	2058      	movs	r0, #88	; 0x58
 8017840:	f7ff ff54 	bl	80176ec <__NVIC_DisableIRQ>
}
 8017844:	bf00      	nop
 8017846:	3708      	adds	r7, #8
 8017848:	46bd      	mov	sp, r7
 801784a:	bd80      	pop	{r7, pc}

0801784c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 801784c:	b480      	push	{r7}
 801784e:	b083      	sub	sp, #12
 8017850:	af00      	add	r7, sp, #0
 8017852:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8017854:	4b11      	ldr	r3, [pc, #68]	; (801789c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017856:	68db      	ldr	r3, [r3, #12]
 8017858:	b29b      	uxth	r3, r3
 801785a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801785e:	b29b      	uxth	r3, r3
 8017860:	3b01      	subs	r3, #1
 8017862:	b29a      	uxth	r2, r3
 8017864:	4b0e      	ldr	r3, [pc, #56]	; (80178a0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8017866:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8017868:	4b0c      	ldr	r3, [pc, #48]	; (801789c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801786a:	691b      	ldr	r3, [r3, #16]
 801786c:	b29b      	uxth	r3, r3
 801786e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017872:	b29b      	uxth	r3, r3
 8017874:	3b01      	subs	r3, #1
 8017876:	b29a      	uxth	r2, r3
 8017878:	4b0a      	ldr	r3, [pc, #40]	; (80178a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801787a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 801787c:	4b08      	ldr	r3, [pc, #32]	; (80178a0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801787e:	881a      	ldrh	r2, [r3, #0]
 8017880:	4b06      	ldr	r3, [pc, #24]	; (801789c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017882:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8017884:	4b05      	ldr	r3, [pc, #20]	; (801789c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017888:	4a04      	ldr	r2, [pc, #16]	; (801789c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801788a:	f043 0301 	orr.w	r3, r3, #1
 801788e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8017890:	bf00      	nop
 8017892:	370c      	adds	r7, #12
 8017894:	46bd      	mov	sp, r7
 8017896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801789a:	4770      	bx	lr
 801789c:	40016800 	.word	0x40016800
 80178a0:	2000b40c 	.word	0x2000b40c
 80178a4:	2000b40e 	.word	0x2000b40e

080178a8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80178a8:	b480      	push	{r7}
 80178aa:	b083      	sub	sp, #12
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80178b0:	4b03      	ldr	r3, [pc, #12]	; (80178c0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80178b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80178b4:	4618      	mov	r0, r3
 80178b6:	370c      	adds	r7, #12
 80178b8:	46bd      	mov	sp, r7
 80178ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178be:	4770      	bx	lr
 80178c0:	40016884 	.word	0x40016884

080178c4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80178c4:	b480      	push	{r7}
 80178c6:	b083      	sub	sp, #12
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	6078      	str	r0, [r7, #4]
 80178cc:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80178ce:	4a06      	ldr	r2, [pc, #24]	; (80178e8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80178d0:	683b      	ldr	r3, [r7, #0]
 80178d2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80178d4:	4b05      	ldr	r3, [pc, #20]	; (80178ec <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80178d6:	2201      	movs	r2, #1
 80178d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80178da:	bf00      	nop
 80178dc:	370c      	adds	r7, #12
 80178de:	46bd      	mov	sp, r7
 80178e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e4:	4770      	bx	lr
 80178e6:	bf00      	nop
 80178e8:	40016884 	.word	0x40016884
 80178ec:	40016800 	.word	0x40016800

080178f0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80178f0:	b580      	push	{r7, lr}
 80178f2:	b082      	sub	sp, #8
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	6078      	str	r0, [r7, #4]
 80178f8:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	6839      	ldr	r1, [r7, #0]
 80178fe:	4618      	mov	r0, r3
 8017900:	f000 fd9b 	bl	801843a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8017904:	bf00      	nop
 8017906:	3708      	adds	r7, #8
 8017908:	46bd      	mov	sp, r7
 801790a:	bd80      	pop	{r7, pc}

0801790c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 801790c:	b480      	push	{r7}
 801790e:	b085      	sub	sp, #20
 8017910:	af00      	add	r7, sp, #0
 8017912:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8017914:	4b0d      	ldr	r3, [pc, #52]	; (801794c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8017916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017918:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 801791a:	4b0c      	ldr	r3, [pc, #48]	; (801794c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801791c:	68db      	ldr	r3, [r3, #12]
 801791e:	b29b      	uxth	r3, r3
 8017920:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017924:	b29b      	uxth	r3, r3
 8017926:	3301      	adds	r3, #1
 8017928:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 801792a:	89fa      	ldrh	r2, [r7, #14]
 801792c:	89bb      	ldrh	r3, [r7, #12]
 801792e:	429a      	cmp	r2, r3
 8017930:	d201      	bcs.n	8017936 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8017932:	2300      	movs	r3, #0
 8017934:	e003      	b.n	801793e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8017936:	89fa      	ldrh	r2, [r7, #14]
 8017938:	89bb      	ldrh	r3, [r7, #12]
 801793a:	1ad3      	subs	r3, r2, r3
 801793c:	b29b      	uxth	r3, r3
    }
}
 801793e:	4618      	mov	r0, r3
 8017940:	3714      	adds	r7, #20
 8017942:	46bd      	mov	sp, r7
 8017944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017948:	4770      	bx	lr
 801794a:	bf00      	nop
 801794c:	40016800 	.word	0x40016800

08017950 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8017950:	b580      	push	{r7, lr}
 8017952:	b082      	sub	sp, #8
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8017958:	4b1a      	ldr	r3, [pc, #104]	; (80179c4 <HAL_LTDC_LineEventCallback+0x74>)
 801795a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801795c:	4a1a      	ldr	r2, [pc, #104]	; (80179c8 <HAL_LTDC_LineEventCallback+0x78>)
 801795e:	8812      	ldrh	r2, [r2, #0]
 8017960:	4293      	cmp	r3, r2
 8017962:	bf0c      	ite	eq
 8017964:	2301      	moveq	r3, #1
 8017966:	2300      	movne	r3, #0
 8017968:	b2db      	uxtb	r3, r3
 801796a:	2b00      	cmp	r3, #0
 801796c:	d017      	beq.n	801799e <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801796e:	4b17      	ldr	r3, [pc, #92]	; (80179cc <HAL_LTDC_LineEventCallback+0x7c>)
 8017970:	881b      	ldrh	r3, [r3, #0]
 8017972:	4619      	mov	r1, r3
 8017974:	6878      	ldr	r0, [r7, #4]
 8017976:	f7ed ffcd 	bl	8005914 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801797a:	f7f8 f8ef 	bl	800fb5c <_ZN8touchgfx3HAL11getInstanceEv>
 801797e:	4603      	mov	r3, r0
 8017980:	4618      	mov	r0, r3
 8017982:	f7ff fe32 	bl	80175ea <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8017986:	f7fe fd01 	bl	801638c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801798a:	f7f8 f8e7 	bl	800fb5c <_ZN8touchgfx3HAL11getInstanceEv>
 801798e:	4603      	mov	r3, r0
 8017990:	4618      	mov	r0, r3
 8017992:	f001 fac9 	bl	8018f28 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8017996:	2000      	movs	r0, #0
 8017998:	f7fe f9f4 	bl	8015d84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 801799c:	e00e      	b.n	80179bc <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801799e:	4b0a      	ldr	r3, [pc, #40]	; (80179c8 <HAL_LTDC_LineEventCallback+0x78>)
 80179a0:	881b      	ldrh	r3, [r3, #0]
 80179a2:	4619      	mov	r1, r3
 80179a4:	6878      	ldr	r0, [r7, #4]
 80179a6:	f7ed ffb5 	bl	8005914 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80179aa:	2000      	movs	r0, #0
 80179ac:	f7fe f9f5 	bl	8015d9a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 80179b0:	f7f8 f8d4 	bl	800fb5c <_ZN8touchgfx3HAL11getInstanceEv>
 80179b4:	4603      	mov	r3, r0
 80179b6:	4618      	mov	r0, r3
 80179b8:	f7ff fdf9 	bl	80175ae <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 80179bc:	bf00      	nop
 80179be:	3708      	adds	r7, #8
 80179c0:	46bd      	mov	sp, r7
 80179c2:	bd80      	pop	{r7, pc}
 80179c4:	40016800 	.word	0x40016800
 80179c8:	2000b40c 	.word	0x2000b40c
 80179cc:	2000b40e 	.word	0x2000b40e

080179d0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80179d0:	8880      	ldrh	r0, [r0, #4]
 80179d2:	4770      	bx	lr

080179d4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80179d4:	2300      	movs	r3, #0
 80179d6:	8083      	strh	r3, [r0, #4]
 80179d8:	4770      	bx	lr
	...

080179dc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80179dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179de:	6803      	ldr	r3, [r0, #0]
 80179e0:	460e      	mov	r6, r1
 80179e2:	2100      	movs	r1, #0
 80179e4:	4605      	mov	r5, r0
 80179e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179e8:	4798      	blx	r3
 80179ea:	4604      	mov	r4, r0
 80179ec:	682b      	ldr	r3, [r5, #0]
 80179ee:	4628      	mov	r0, r5
 80179f0:	1b34      	subs	r4, r6, r4
 80179f2:	6a1b      	ldr	r3, [r3, #32]
 80179f4:	b2a4      	uxth	r4, r4
 80179f6:	4798      	blx	r3
 80179f8:	88ab      	ldrh	r3, [r5, #4]
 80179fa:	fbb4 f4f0 	udiv	r4, r4, r0
 80179fe:	42a3      	cmp	r3, r4
 8017a00:	d805      	bhi.n	8017a0e <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8017a02:	4b0e      	ldr	r3, [pc, #56]	; (8017a3c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8017a04:	2120      	movs	r1, #32
 8017a06:	4a0e      	ldr	r2, [pc, #56]	; (8017a40 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8017a08:	480e      	ldr	r0, [pc, #56]	; (8017a44 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8017a0a:	f010 fd3b 	bl	8028484 <__assert_func>
 8017a0e:	682b      	ldr	r3, [r5, #0]
 8017a10:	2100      	movs	r1, #0
 8017a12:	4628      	mov	r0, r5
 8017a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a16:	4798      	blx	r3
 8017a18:	682b      	ldr	r3, [r5, #0]
 8017a1a:	4607      	mov	r7, r0
 8017a1c:	4628      	mov	r0, r5
 8017a1e:	6a1b      	ldr	r3, [r3, #32]
 8017a20:	4798      	blx	r3
 8017a22:	1bf3      	subs	r3, r6, r7
 8017a24:	b29b      	uxth	r3, r3
 8017a26:	fbb3 f2f0 	udiv	r2, r3, r0
 8017a2a:	fb02 3010 	mls	r0, r2, r0, r3
 8017a2e:	b118      	cbz	r0, 8017a38 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8017a30:	4b05      	ldr	r3, [pc, #20]	; (8017a48 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8017a32:	2121      	movs	r1, #33	; 0x21
 8017a34:	4a02      	ldr	r2, [pc, #8]	; (8017a40 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8017a36:	e7e7      	b.n	8017a08 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8017a38:	4620      	mov	r0, r4
 8017a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a3c:	0802b448 	.word	0x0802b448
 8017a40:	0802b5b6 	.word	0x0802b5b6
 8017a44:	0802b45d 	.word	0x0802b45d
 8017a48:	0802b48b 	.word	0x0802b48b

08017a4c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8017a4c:	b538      	push	{r3, r4, r5, lr}
 8017a4e:	6803      	ldr	r3, [r0, #0]
 8017a50:	460d      	mov	r5, r1
 8017a52:	4604      	mov	r4, r0
 8017a54:	6a1b      	ldr	r3, [r3, #32]
 8017a56:	4798      	blx	r3
 8017a58:	4285      	cmp	r5, r0
 8017a5a:	d905      	bls.n	8017a68 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8017a5c:	4b0c      	ldr	r3, [pc, #48]	; (8017a90 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8017a5e:	2132      	movs	r1, #50	; 0x32
 8017a60:	4a0c      	ldr	r2, [pc, #48]	; (8017a94 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8017a62:	480d      	ldr	r0, [pc, #52]	; (8017a98 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8017a64:	f010 fd0e 	bl	8028484 <__assert_func>
 8017a68:	6823      	ldr	r3, [r4, #0]
 8017a6a:	4620      	mov	r0, r4
 8017a6c:	88a5      	ldrh	r5, [r4, #4]
 8017a6e:	69db      	ldr	r3, [r3, #28]
 8017a70:	4798      	blx	r3
 8017a72:	4285      	cmp	r5, r0
 8017a74:	d303      	bcc.n	8017a7e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8017a76:	4b09      	ldr	r3, [pc, #36]	; (8017a9c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8017a78:	2133      	movs	r1, #51	; 0x33
 8017a7a:	4a06      	ldr	r2, [pc, #24]	; (8017a94 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8017a7c:	e7f1      	b.n	8017a62 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8017a7e:	6823      	ldr	r3, [r4, #0]
 8017a80:	4620      	mov	r0, r4
 8017a82:	88a1      	ldrh	r1, [r4, #4]
 8017a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a86:	4798      	blx	r3
 8017a88:	88a3      	ldrh	r3, [r4, #4]
 8017a8a:	3301      	adds	r3, #1
 8017a8c:	80a3      	strh	r3, [r4, #4]
 8017a8e:	bd38      	pop	{r3, r4, r5, pc}
 8017a90:	0802b505 	.word	0x0802b505
 8017a94:	0802b5f9 	.word	0x0802b5f9
 8017a98:	0802b45d 	.word	0x0802b45d
 8017a9c:	0802b51c 	.word	0x0802b51c

08017aa0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8017aa0:	b570      	push	{r4, r5, r6, lr}
 8017aa2:	6803      	ldr	r3, [r0, #0]
 8017aa4:	4616      	mov	r6, r2
 8017aa6:	4604      	mov	r4, r0
 8017aa8:	460d      	mov	r5, r1
 8017aaa:	6a1b      	ldr	r3, [r3, #32]
 8017aac:	4798      	blx	r3
 8017aae:	4286      	cmp	r6, r0
 8017ab0:	d905      	bls.n	8017abe <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8017ab2:	4b06      	ldr	r3, [pc, #24]	; (8017acc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8017ab4:	213c      	movs	r1, #60	; 0x3c
 8017ab6:	4a06      	ldr	r2, [pc, #24]	; (8017ad0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8017ab8:	4806      	ldr	r0, [pc, #24]	; (8017ad4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8017aba:	f010 fce3 	bl	8028484 <__assert_func>
 8017abe:	6823      	ldr	r3, [r4, #0]
 8017ac0:	4629      	mov	r1, r5
 8017ac2:	4620      	mov	r0, r4
 8017ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017aca:	4718      	bx	r3
 8017acc:	0802b505 	.word	0x0802b505
 8017ad0:	0802b56c 	.word	0x0802b56c
 8017ad4:	0802b45d 	.word	0x0802b45d

08017ad8 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8017ad8:	4770      	bx	lr
	...

08017adc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8017adc:	4a02      	ldr	r2, [pc, #8]	; (8017ae8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8017ade:	6002      	str	r2, [r0, #0]
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	8082      	strh	r2, [r0, #4]
 8017ae4:	4770      	bx	lr
 8017ae6:	bf00      	nop
 8017ae8:	0802b540 	.word	0x0802b540

08017aec <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8017aec:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 8017af0:	4770      	bx	lr

08017af2 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 8017af2:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8017af6:	4770      	bx	lr

08017af8 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8017af8:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8017afc:	4770      	bx	lr

08017afe <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 8017afe:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 8017b02:	4770      	bx	lr

08017b04 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8017b04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017b08:	4617      	mov	r7, r2
 8017b0a:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8017b0e:	2200      	movs	r2, #0
 8017b10:	4604      	mov	r4, r0
 8017b12:	460e      	mov	r6, r1
 8017b14:	4698      	mov	r8, r3
 8017b16:	4611      	mov	r1, r2
 8017b18:	9500      	str	r5, [sp, #0]
 8017b1a:	3090      	adds	r0, #144	; 0x90
 8017b1c:	f7f7 fee0 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8017b20:	4643      	mov	r3, r8
 8017b22:	463a      	mov	r2, r7
 8017b24:	4631      	mov	r1, r6
 8017b26:	4620      	mov	r0, r4
 8017b28:	9508      	str	r5, [sp, #32]
 8017b2a:	b002      	add	sp, #8
 8017b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b30:	f000 b99e 	b.w	8017e70 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08017b34 <_ZN8touchgfx11BoxProgress8setValueEi>:
 8017b34:	b530      	push	{r4, r5, lr}
 8017b36:	4604      	mov	r4, r0
 8017b38:	b085      	sub	sp, #20
 8017b3a:	f000 f9e3 	bl	8017f04 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8017b3e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8017b42:	2b03      	cmp	r3, #3
 8017b44:	d814      	bhi.n	8017b70 <_ZN8touchgfx11BoxProgress8setValueEi+0x3c>
 8017b46:	e8df f003 	tbb	[pc, r3]
 8017b4a:	0202      	.short	0x0202
 8017b4c:	1010      	.short	0x1010
 8017b4e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8017b52:	4620      	mov	r0, r4
 8017b54:	f000 fa28 	bl	8017fa8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8017b58:	b200      	sxth	r0, r0
 8017b5a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8017b5e:	2b03      	cmp	r3, #3
 8017b60:	d830      	bhi.n	8017bc4 <_ZN8touchgfx11BoxProgress8setValueEi+0x90>
 8017b62:	e8df f003 	tbb	[pc, r3]
 8017b66:	3107      	.short	0x3107
 8017b68:	6442      	.short	0x6442
 8017b6a:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8017b6e:	e7f0      	b.n	8017b52 <_ZN8touchgfx11BoxProgress8setValueEi+0x1e>
 8017b70:	2000      	movs	r0, #0
 8017b72:	e7f2      	b.n	8017b5a <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8017b74:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8017b78:	2200      	movs	r2, #0
 8017b7a:	f9b4 5098 	ldrsh.w	r5, [r4, #152]	; 0x98
 8017b7e:	9300      	str	r3, [sp, #0]
 8017b80:	4611      	mov	r1, r2
 8017b82:	4603      	mov	r3, r0
 8017b84:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8017b88:	f7f7 feaa 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8017b8c:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
 8017b90:	4629      	mov	r1, r5
 8017b92:	429d      	cmp	r5, r3
 8017b94:	eba5 0503 	sub.w	r5, r5, r3
 8017b98:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 8017b9c:	bfa8      	it	ge
 8017b9e:	4619      	movge	r1, r3
 8017ba0:	2d00      	cmp	r5, #0
 8017ba2:	f8ad 200e 	strh.w	r2, [sp, #14]
 8017ba6:	f8ad 1008 	strh.w	r1, [sp, #8]
 8017baa:	f04f 0100 	mov.w	r1, #0
 8017bae:	bfb8      	it	lt
 8017bb0:	426d      	neglt	r5, r5
 8017bb2:	f8ad 100a 	strh.w	r1, [sp, #10]
 8017bb6:	f8ad 500c 	strh.w	r5, [sp, #12]
 8017bba:	a902      	add	r1, sp, #8
 8017bbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017bc0:	f004 ff65 	bl	801ca8e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
 8017bc4:	b005      	add	sp, #20
 8017bc6:	bd30      	pop	{r4, r5, pc}
 8017bc8:	8921      	ldrh	r1, [r4, #8]
 8017bca:	2200      	movs	r2, #0
 8017bcc:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8017bd0:	1a09      	subs	r1, r1, r0
 8017bd2:	f9b4 5094 	ldrsh.w	r5, [r4, #148]	; 0x94
 8017bd6:	9300      	str	r3, [sp, #0]
 8017bd8:	4603      	mov	r3, r0
 8017bda:	b209      	sxth	r1, r1
 8017bdc:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8017be0:	f7f7 fe7e 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8017be4:	f9b4 3094 	ldrsh.w	r3, [r4, #148]	; 0x94
 8017be8:	e7d2      	b.n	8017b90 <_ZN8touchgfx11BoxProgress8setValueEi+0x5c>
 8017bea:	2200      	movs	r2, #0
 8017bec:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8017bf0:	9000      	str	r0, [sp, #0]
 8017bf2:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8017bf6:	4611      	mov	r1, r2
 8017bf8:	f9b4 509a 	ldrsh.w	r5, [r4, #154]	; 0x9a
 8017bfc:	f7f7 fe70 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8017c00:	f9b4 309a 	ldrsh.w	r3, [r4, #154]	; 0x9a
 8017c04:	2100      	movs	r1, #0
 8017c06:	429d      	cmp	r5, r3
 8017c08:	f9b4 2098 	ldrsh.w	r2, [r4, #152]	; 0x98
 8017c0c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8017c10:	4629      	mov	r1, r5
 8017c12:	eba5 0503 	sub.w	r5, r5, r3
 8017c16:	bfa8      	it	ge
 8017c18:	4619      	movge	r1, r3
 8017c1a:	f8ad 200c 	strh.w	r2, [sp, #12]
 8017c1e:	2d00      	cmp	r5, #0
 8017c20:	f8ad 100a 	strh.w	r1, [sp, #10]
 8017c24:	bfb8      	it	lt
 8017c26:	426d      	neglt	r5, r5
 8017c28:	f8ad 500e 	strh.w	r5, [sp, #14]
 8017c2c:	e7c5      	b.n	8017bba <_ZN8touchgfx11BoxProgress8setValueEi+0x86>
 8017c2e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8017c32:	2100      	movs	r1, #0
 8017c34:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8017c38:	1a12      	subs	r2, r2, r0
 8017c3a:	9000      	str	r0, [sp, #0]
 8017c3c:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8017c40:	f9b4 5096 	ldrsh.w	r5, [r4, #150]	; 0x96
 8017c44:	b212      	sxth	r2, r2
 8017c46:	f7f7 fe4b 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8017c4a:	f9b4 3096 	ldrsh.w	r3, [r4, #150]	; 0x96
 8017c4e:	e7d9      	b.n	8017c04 <_ZN8touchgfx11BoxProgress8setValueEi+0xd0>

08017c50 <_ZN8touchgfx11BoxProgressC1Ev>:
 8017c50:	b510      	push	{r4, lr}
 8017c52:	4604      	mov	r4, r0
 8017c54:	f000 f848 	bl	8017ce8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8017c58:	2201      	movs	r2, #1
 8017c5a:	4b16      	ldr	r3, [pc, #88]	; (8017cb4 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 8017c5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017c60:	f104 0190 	add.w	r1, r4, #144	; 0x90
 8017c64:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8017c68:	4a13      	ldr	r2, [pc, #76]	; (8017cb8 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8017c6a:	6023      	str	r3, [r4, #0]
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8017c72:	22ff      	movs	r2, #255	; 0xff
 8017c74:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8017c78:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8017c7c:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8017c80:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8017c84:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8017c88:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8017c8c:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8017c90:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8017c94:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8017c98:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8017c9c:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8017ca0:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8017ca4:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8017ca8:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8017cac:	f000 fa7c 	bl	80181a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017cb0:	4620      	mov	r0, r4
 8017cb2:	bd10      	pop	{r4, pc}
 8017cb4:	0802b640 	.word	0x0802b640
 8017cb8:	0802ca6c 	.word	0x0802ca6c

08017cbc <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8017cbc:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8017cc0:	4770      	bx	lr

08017cc2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8017cc2:	b570      	push	{r4, r5, r6, lr}
 8017cc4:	4604      	mov	r4, r0
 8017cc6:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 8017cca:	3058      	adds	r0, #88	; 0x58
 8017ccc:	f004 fe7c 	bl	801c9c8 <_ZNK8touchgfx8Drawable10invalidateEv>
 8017cd0:	6823      	ldr	r3, [r4, #0]
 8017cd2:	4620      	mov	r0, r4
 8017cd4:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8017cd8:	4798      	blx	r3
 8017cda:	4601      	mov	r1, r0
 8017cdc:	462b      	mov	r3, r5
 8017cde:	4620      	mov	r0, r4
 8017ce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ce4:	4718      	bx	r3
	...

08017ce8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8017ce8:	b510      	push	{r4, lr}
 8017cea:	4604      	mov	r4, r0
 8017cec:	f000 f97c 	bl	8017fe8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8017cf0:	4b03      	ldr	r3, [pc, #12]	; (8017d00 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 8017cf2:	2100      	movs	r1, #0
 8017cf4:	4620      	mov	r0, r4
 8017cf6:	6023      	str	r3, [r4, #0]
 8017cf8:	f7ff ffe3 	bl	8017cc2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8017cfc:	4620      	mov	r0, r4
 8017cfe:	bd10      	pop	{r4, pc}
 8017d00:	0802b718 	.word	0x0802b718

08017d04 <_ZNK8touchgfx12LineProgress8getStartERiS1_>:
 8017d04:	b530      	push	{r4, r5, lr}
 8017d06:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
 8017d0a:	2520      	movs	r5, #32
 8017d0c:	fb94 f4f5 	sdiv	r4, r4, r5
 8017d10:	600c      	str	r4, [r1, #0]
 8017d12:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8017d16:	fb93 f3f5 	sdiv	r3, r3, r5
 8017d1a:	6013      	str	r3, [r2, #0]
 8017d1c:	bd30      	pop	{r4, r5, pc}

08017d1e <_ZN8touchgfx12LineProgress6setEndEii>:
 8017d1e:	0149      	lsls	r1, r1, #5
 8017d20:	0152      	lsls	r2, r2, #5
 8017d22:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
 8017d26:	f8c0 2110 	str.w	r2, [r0, #272]	; 0x110
 8017d2a:	4770      	bx	lr

08017d2c <_ZNK8touchgfx12LineProgress6getEndERiS1_>:
 8017d2c:	b530      	push	{r4, r5, lr}
 8017d2e:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
 8017d32:	2520      	movs	r5, #32
 8017d34:	fb94 f4f5 	sdiv	r4, r4, r5
 8017d38:	600c      	str	r4, [r1, #0]
 8017d3a:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8017d3e:	fb93 f3f5 	sdiv	r3, r3, r5
 8017d42:	6013      	str	r3, [r2, #0]
 8017d44:	bd30      	pop	{r4, r5, pc}

08017d46 <_ZNK8touchgfx12LineProgress12getLineWidthEv>:
 8017d46:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
 8017d4a:	2320      	movs	r3, #32
 8017d4c:	fb90 f0f3 	sdiv	r0, r0, r3
 8017d50:	4770      	bx	lr

08017d52 <_ZN8touchgfx12LineProgress8setAlphaEh>:
 8017d52:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
 8017d56:	4770      	bx	lr

08017d58 <_ZNK8touchgfx12LineProgress8getAlphaEv>:
 8017d58:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
 8017d5c:	4770      	bx	lr

08017d5e <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>:
 8017d5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017d62:	4617      	mov	r7, r2
 8017d64:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8017d68:	2200      	movs	r2, #0
 8017d6a:	4604      	mov	r4, r0
 8017d6c:	460e      	mov	r6, r1
 8017d6e:	4698      	mov	r8, r3
 8017d70:	4611      	mov	r1, r2
 8017d72:	9500      	str	r5, [sp, #0]
 8017d74:	3090      	adds	r0, #144	; 0x90
 8017d76:	f7f7 fdb3 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8017d7a:	4643      	mov	r3, r8
 8017d7c:	463a      	mov	r2, r7
 8017d7e:	4631      	mov	r1, r6
 8017d80:	4620      	mov	r0, r4
 8017d82:	9508      	str	r5, [sp, #32]
 8017d84:	b002      	add	sp, #8
 8017d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d8a:	f000 b871 	b.w	8017e70 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08017d8e <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>:
 8017d8e:	3090      	adds	r0, #144	; 0x90
 8017d90:	f002 b810 	b.w	8019db4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

08017d94 <_ZN8touchgfx12LineProgress8setStartEii>:
 8017d94:	0149      	lsls	r1, r1, #5
 8017d96:	3090      	adds	r0, #144	; 0x90
 8017d98:	0152      	lsls	r2, r2, #5
 8017d9a:	6741      	str	r1, [r0, #116]	; 0x74
 8017d9c:	6782      	str	r2, [r0, #120]	; 0x78
 8017d9e:	f002 bae5 	b.w	801a36c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>

08017da2 <_ZN8touchgfx12LineProgress12setLineWidthEi>:
 8017da2:	0149      	lsls	r1, r1, #5
 8017da4:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
 8017da8:	4299      	cmp	r1, r3
 8017daa:	d004      	beq.n	8017db6 <_ZN8touchgfx12LineProgress12setLineWidthEi+0x14>
 8017dac:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
 8017db0:	3090      	adds	r0, #144	; 0x90
 8017db2:	f002 b9b7 	b.w	801a124 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8017db6:	4770      	bx	lr

08017db8 <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>:
 8017db8:	3090      	adds	r0, #144	; 0x90
 8017dba:	f002 bb06 	b.w	801a3ca <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

08017dbe <_ZNK8touchgfx12LineProgress18getLineEndingStyleEv>:
 8017dbe:	3090      	adds	r0, #144	; 0x90
 8017dc0:	f002 b9ac 	b.w	801a11c <_ZNK8touchgfx4Line18getLineEndingStyleEv>

08017dc4 <_ZN8touchgfx12LineProgress8setValueEi>:
 8017dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dc6:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
 8017dca:	4604      	mov	r4, r0
 8017dcc:	b33b      	cbz	r3, 8017e1e <_ZN8touchgfx12LineProgress8setValueEi+0x5a>
 8017dce:	f000 f899 	bl	8017f04 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8017dd2:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 8017dd6:	4620      	mov	r0, r4
 8017dd8:	2720      	movs	r7, #32
 8017dda:	f000 f8e5 	bl	8017fa8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8017dde:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
 8017de2:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
 8017de6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8017dea:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8017dee:	1a5b      	subs	r3, r3, r1
 8017df0:	f8b4 608a 	ldrh.w	r6, [r4, #138]	; 0x8a
 8017df4:	1aad      	subs	r5, r5, r2
 8017df6:	015b      	lsls	r3, r3, #5
 8017df8:	016d      	lsls	r5, r5, #5
 8017dfa:	fb93 f3f6 	sdiv	r3, r3, r6
 8017dfe:	fb95 f5f6 	sdiv	r5, r5, r6
 8017e02:	4343      	muls	r3, r0
 8017e04:	4368      	muls	r0, r5
 8017e06:	fb93 f3f7 	sdiv	r3, r3, r7
 8017e0a:	fb90 f0f7 	sdiv	r0, r0, r7
 8017e0e:	4419      	add	r1, r3
 8017e10:	4402      	add	r2, r0
 8017e12:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8017e16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017e1a:	f002 bab2 	b.w	801a382 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_>
 8017e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017e20 <_ZN8touchgfx12LineProgressC1Ev>:
 8017e20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017e22:	4604      	mov	r4, r0
 8017e24:	f000 f8e0 	bl	8017fe8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8017e28:	4b10      	ldr	r3, [pc, #64]	; (8017e6c <_ZN8touchgfx12LineProgressC1Ev+0x4c>)
 8017e2a:	2600      	movs	r6, #0
 8017e2c:	4625      	mov	r5, r4
 8017e2e:	f845 3b90 	str.w	r3, [r5], #144
 8017e32:	4628      	mov	r0, r5
 8017e34:	f002 f952 	bl	801a0dc <_ZN8touchgfx4LineC1Ev>
 8017e38:	4629      	mov	r1, r5
 8017e3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017e3e:	f8c4 6104 	str.w	r6, [r4, #260]	; 0x104
 8017e42:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
 8017e46:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 8017e4a:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8017e4e:	f000 f9ab 	bl	80181a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017e52:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8017e56:	4628      	mov	r0, r5
 8017e58:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017e5c:	9200      	str	r2, [sp, #0]
 8017e5e:	4631      	mov	r1, r6
 8017e60:	4632      	mov	r2, r6
 8017e62:	f7f7 fd3d 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8017e66:	4620      	mov	r0, r4
 8017e68:	b002      	add	sp, #8
 8017e6a:	bd70      	pop	{r4, r5, r6, pc}
 8017e6c:	0802b7e0 	.word	0x0802b7e0

08017e70 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8017e70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017e74:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8017e78:	4604      	mov	r4, r0
 8017e7a:	460e      	mov	r6, r1
 8017e7c:	4698      	mov	r8, r3
 8017e7e:	9700      	str	r7, [sp, #0]
 8017e80:	3058      	adds	r0, #88	; 0x58
 8017e82:	4615      	mov	r5, r2
 8017e84:	f7f7 fd2c 	bl	800f8e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8017e88:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8017e8c:	eb06 0308 	add.w	r3, r6, r8
 8017e90:	429a      	cmp	r2, r3
 8017e92:	eb05 0207 	add.w	r2, r5, r7
 8017e96:	bfb8      	it	lt
 8017e98:	8123      	strhlt	r3, [r4, #8]
 8017e9a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017e9e:	4293      	cmp	r3, r2
 8017ea0:	bfb8      	it	lt
 8017ea2:	8162      	strhlt	r2, [r4, #10]
 8017ea4:	b002      	add	sp, #8
 8017ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017eaa <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8017eaa:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8017eae:	4770      	bx	lr

08017eb0 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8017eb0:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8017eb4:	4770      	bx	lr

08017eb6 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8017eb6:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8017eba:	4770      	bx	lr

08017ebc <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8017ebc:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8017ec0:	4770      	bx	lr

08017ec2 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 8017ec2:	b510      	push	{r4, lr}
 8017ec4:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8017ec8:	800c      	strh	r4, [r1, #0]
 8017eca:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8017ece:	8011      	strh	r1, [r2, #0]
 8017ed0:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8017ed4:	801a      	strh	r2, [r3, #0]
 8017ed6:	9b02      	ldr	r3, [sp, #8]
 8017ed8:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8017edc:	801a      	strh	r2, [r3, #0]
 8017ede:	bd10      	pop	{r4, pc}

08017ee0 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8017ee0:	b510      	push	{r4, lr}
 8017ee2:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8017ee6:	800c      	strh	r4, [r1, #0]
 8017ee8:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8017eec:	8011      	strh	r1, [r2, #0]
 8017eee:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8017ef2:	801a      	strh	r2, [r3, #0]
 8017ef4:	bd10      	pop	{r4, pc}

08017ef6 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8017ef6:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8017efa:	800b      	strh	r3, [r1, #0]
 8017efc:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8017f00:	8013      	strh	r3, [r2, #0]
 8017f02:	4770      	bx	lr

08017f04 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8017f04:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8017f08:	4299      	cmp	r1, r3
 8017f0a:	bfb8      	it	lt
 8017f0c:	4619      	movlt	r1, r3
 8017f0e:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8017f12:	4299      	cmp	r1, r3
 8017f14:	bfa8      	it	ge
 8017f16:	4619      	movge	r1, r3
 8017f18:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 8017f1c:	4770      	bx	lr

08017f1e <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8017f1e:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 8017f22:	4770      	bx	lr

08017f24 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8017f24:	b510      	push	{r4, lr}
 8017f26:	4604      	mov	r4, r0
 8017f28:	302c      	adds	r0, #44	; 0x2c
 8017f2a:	f002 ff81 	bl	801ae30 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017f2e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017f30:	8123      	strh	r3, [r4, #8]
 8017f32:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017f34:	8163      	strh	r3, [r4, #10]
 8017f36:	bd10      	pop	{r4, pc}

08017f38 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8017f38:	4291      	cmp	r1, r2
 8017f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f3e:	4604      	mov	r4, r0
 8017f40:	460e      	mov	r6, r1
 8017f42:	4615      	mov	r5, r2
 8017f44:	4698      	mov	r8, r3
 8017f46:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8017f4a:	db05      	blt.n	8017f58 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 8017f4c:	4b12      	ldr	r3, [pc, #72]	; (8017f98 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 8017f4e:	2149      	movs	r1, #73	; 0x49
 8017f50:	4a12      	ldr	r2, [pc, #72]	; (8017f9c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8017f52:	4813      	ldr	r0, [pc, #76]	; (8017fa0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 8017f54:	f010 fa96 	bl	8028484 <__assert_func>
 8017f58:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 8017f5c:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 8017f60:	6803      	ldr	r3, [r0, #0]
 8017f62:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 8017f66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017f6a:	4798      	blx	r3
 8017f6c:	f1b8 0f00 	cmp.w	r8, #0
 8017f70:	d10c      	bne.n	8017f8c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 8017f72:	1bad      	subs	r5, r5, r6
 8017f74:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 8017f78:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 8017f7c:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8017f80:	42bb      	cmp	r3, r7
 8017f82:	d806      	bhi.n	8017f92 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 8017f84:	4b07      	ldr	r3, [pc, #28]	; (8017fa4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 8017f86:	2156      	movs	r1, #86	; 0x56
 8017f88:	4a04      	ldr	r2, [pc, #16]	; (8017f9c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8017f8a:	e7e2      	b.n	8017f52 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 8017f8c:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 8017f90:	e7f2      	b.n	8017f78 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 8017f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f96:	bf00      	nop
 8017f98:	0802b8c4 	.word	0x0802b8c4
 8017f9c:	0802ba00 	.word	0x0802ba00
 8017fa0:	0802b8ce 	.word	0x0802b8ce
 8017fa4:	0802b925 	.word	0x0802b925

08017fa8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8017fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017faa:	4604      	mov	r4, r0
 8017fac:	460d      	mov	r5, r1
 8017fae:	b1b9      	cbz	r1, 8017fe0 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 8017fb0:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 8017fb4:	ab01      	add	r3, sp, #4
 8017fb6:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 8017fba:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 8017fbe:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 8017fc2:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 8017fc6:	1a12      	subs	r2, r2, r0
 8017fc8:	1b89      	subs	r1, r1, r6
 8017fca:	1a38      	subs	r0, r7, r0
 8017fcc:	f004 fe6a 	bl	801cca4 <_ZN8touchgfx6muldivElllRl>
 8017fd0:	4629      	mov	r1, r5
 8017fd2:	ab01      	add	r3, sp, #4
 8017fd4:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8017fd8:	4430      	add	r0, r6
 8017fda:	f004 fe63 	bl	801cca4 <_ZN8touchgfx6muldivElllRl>
 8017fde:	b285      	uxth	r5, r0
 8017fe0:	4628      	mov	r0, r5
 8017fe2:	b003      	add	sp, #12
 8017fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017fe8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8017fe8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017fec:	4604      	mov	r4, r0
 8017fee:	2600      	movs	r6, #0
 8017ff0:	f7f7 fc28 	bl	800f844 <_ZN8touchgfx8DrawableC1Ev>
 8017ff4:	4b1d      	ldr	r3, [pc, #116]	; (801806c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 8017ff6:	4625      	mov	r5, r4
 8017ff8:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8017ffc:	af02      	add	r7, sp, #8
 8017ffe:	2226      	movs	r2, #38	; 0x26
 8018000:	4631      	mov	r1, r6
 8018002:	62a6      	str	r6, [r4, #40]	; 0x28
 8018004:	f845 3b2c 	str.w	r3, [r5], #44
 8018008:	4628      	mov	r0, r5
 801800a:	f827 8d04 	strh.w	r8, [r7, #-4]!
 801800e:	f010 fac2 	bl	8028596 <memset>
 8018012:	4628      	mov	r0, r5
 8018014:	f7f7 fc16 	bl	800f844 <_ZN8touchgfx8DrawableC1Ev>
 8018018:	4b15      	ldr	r3, [pc, #84]	; (8018070 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x88>)
 801801a:	4639      	mov	r1, r7
 801801c:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8018020:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018022:	4628      	mov	r0, r5
 8018024:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 8018028:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 801802c:	f002 ff00 	bl	801ae30 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018030:	4638      	mov	r0, r7
 8018032:	f7f7 fc07 	bl	800f844 <_ZN8touchgfx8DrawableC1Ev>
 8018036:	4b0f      	ldr	r3, [pc, #60]	; (8018074 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x8c>)
 8018038:	4632      	mov	r2, r6
 801803a:	4631      	mov	r1, r6
 801803c:	65a3      	str	r3, [r4, #88]	; 0x58
 801803e:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8018042:	4628      	mov	r0, r5
 8018044:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8018048:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 801804c:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8018050:	f7f7 fcab 	bl	800f9aa <_ZN8touchgfx8Drawable5setXYEss>
 8018054:	4629      	mov	r1, r5
 8018056:	4620      	mov	r0, r4
 8018058:	f000 f8a6 	bl	80181a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801805c:	4620      	mov	r0, r4
 801805e:	4639      	mov	r1, r7
 8018060:	f000 f8a2 	bl	80181a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018064:	4620      	mov	r0, r4
 8018066:	b002      	add	sp, #8
 8018068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801806c:	0802b948 	.word	0x0802b948
 8018070:	0802cc88 	.word	0x0802cc88
 8018074:	0802bb34 	.word	0x0802bb34

08018078 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8018078:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801807a:	2000      	movs	r0, #0
 801807c:	b12b      	cbz	r3, 801808a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801807e:	b920      	cbnz	r0, 801808a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8018080:	1a5a      	subs	r2, r3, r1
 8018082:	699b      	ldr	r3, [r3, #24]
 8018084:	4250      	negs	r0, r2
 8018086:	4150      	adcs	r0, r2
 8018088:	e7f8      	b.n	801807c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801808a:	4770      	bx	lr

0801808c <_ZN8touchgfx9Container9removeAllEv>:
 801808c:	2200      	movs	r2, #0
 801808e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018090:	b123      	cbz	r3, 801809c <_ZN8touchgfx9Container9removeAllEv+0x10>
 8018092:	6999      	ldr	r1, [r3, #24]
 8018094:	6281      	str	r1, [r0, #40]	; 0x28
 8018096:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801809a:	e7f8      	b.n	801808e <_ZN8touchgfx9Container9removeAllEv+0x2>
 801809c:	4770      	bx	lr

0801809e <_ZN8touchgfx9Container6unlinkEv>:
 801809e:	2300      	movs	r3, #0
 80180a0:	6283      	str	r3, [r0, #40]	; 0x28
 80180a2:	4770      	bx	lr

080180a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80180a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180a8:	461f      	mov	r7, r3
 80180aa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80180ae:	460d      	mov	r5, r1
 80180b0:	4616      	mov	r6, r2
 80180b2:	b103      	cbz	r3, 80180b6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80180b4:	6038      	str	r0, [r7, #0]
 80180b6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80180b8:	b314      	cbz	r4, 8018100 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80180ba:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80180be:	b1eb      	cbz	r3, 80180fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80180c0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80180c4:	428d      	cmp	r5, r1
 80180c6:	db19      	blt.n	80180fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80180c8:	b289      	uxth	r1, r1
 80180ca:	8923      	ldrh	r3, [r4, #8]
 80180cc:	440b      	add	r3, r1
 80180ce:	b21b      	sxth	r3, r3
 80180d0:	429d      	cmp	r5, r3
 80180d2:	da13      	bge.n	80180fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80180d4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80180d8:	4296      	cmp	r6, r2
 80180da:	db0f      	blt.n	80180fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80180dc:	b292      	uxth	r2, r2
 80180de:	8963      	ldrh	r3, [r4, #10]
 80180e0:	4413      	add	r3, r2
 80180e2:	b21b      	sxth	r3, r3
 80180e4:	429e      	cmp	r6, r3
 80180e6:	da09      	bge.n	80180fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80180e8:	6823      	ldr	r3, [r4, #0]
 80180ea:	1ab2      	subs	r2, r6, r2
 80180ec:	1a69      	subs	r1, r5, r1
 80180ee:	4620      	mov	r0, r4
 80180f0:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80180f4:	b212      	sxth	r2, r2
 80180f6:	463b      	mov	r3, r7
 80180f8:	b209      	sxth	r1, r1
 80180fa:	47c0      	blx	r8
 80180fc:	69a4      	ldr	r4, [r4, #24]
 80180fe:	e7db      	b.n	80180b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8018100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018104 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8018104:	2200      	movs	r2, #0
 8018106:	8002      	strh	r2, [r0, #0]
 8018108:	8042      	strh	r2, [r0, #2]
 801810a:	8082      	strh	r2, [r0, #4]
 801810c:	80c2      	strh	r2, [r0, #6]
 801810e:	4770      	bx	lr

08018110 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8018110:	b570      	push	{r4, r5, r6, lr}
 8018112:	460d      	mov	r5, r1
 8018114:	4616      	mov	r6, r2
 8018116:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018118:	b13c      	cbz	r4, 801812a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801811a:	6823      	ldr	r3, [r4, #0]
 801811c:	4620      	mov	r0, r4
 801811e:	4632      	mov	r2, r6
 8018120:	4629      	mov	r1, r5
 8018122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018124:	4798      	blx	r3
 8018126:	69a4      	ldr	r4, [r4, #24]
 8018128:	e7f6      	b.n	8018118 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801812a:	bd70      	pop	{r4, r5, r6, pc}

0801812c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801812c:	b538      	push	{r3, r4, r5, lr}
 801812e:	460d      	mov	r5, r1
 8018130:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018132:	b134      	cbz	r4, 8018142 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8018134:	682b      	ldr	r3, [r5, #0]
 8018136:	4621      	mov	r1, r4
 8018138:	4628      	mov	r0, r5
 801813a:	689b      	ldr	r3, [r3, #8]
 801813c:	4798      	blx	r3
 801813e:	69a4      	ldr	r4, [r4, #24]
 8018140:	e7f7      	b.n	8018132 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8018142:	bd38      	pop	{r3, r4, r5, pc}

08018144 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8018144:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018146:	b19b      	cbz	r3, 8018170 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8018148:	428b      	cmp	r3, r1
 801814a:	d109      	bne.n	8018160 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801814c:	699a      	ldr	r2, [r3, #24]
 801814e:	2100      	movs	r1, #0
 8018150:	6159      	str	r1, [r3, #20]
 8018152:	6282      	str	r2, [r0, #40]	; 0x28
 8018154:	b902      	cbnz	r2, 8018158 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8018156:	4770      	bx	lr
 8018158:	6199      	str	r1, [r3, #24]
 801815a:	4770      	bx	lr
 801815c:	4613      	mov	r3, r2
 801815e:	b13a      	cbz	r2, 8018170 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8018160:	699a      	ldr	r2, [r3, #24]
 8018162:	428a      	cmp	r2, r1
 8018164:	d1fa      	bne.n	801815c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8018166:	698a      	ldr	r2, [r1, #24]
 8018168:	619a      	str	r2, [r3, #24]
 801816a:	2300      	movs	r3, #0
 801816c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8018170:	4770      	bx	lr

08018172 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8018172:	b410      	push	{r4}
 8018174:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018176:	4604      	mov	r4, r0
 8018178:	b92b      	cbnz	r3, 8018186 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801817a:	6803      	ldr	r3, [r0, #0]
 801817c:	4611      	mov	r1, r2
 801817e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018184:	4718      	bx	r3
 8018186:	b941      	cbnz	r1, 801819a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8018188:	6193      	str	r3, [r2, #24]
 801818a:	6282      	str	r2, [r0, #40]	; 0x28
 801818c:	6154      	str	r4, [r2, #20]
 801818e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018192:	4770      	bx	lr
 8018194:	4603      	mov	r3, r0
 8018196:	2800      	cmp	r0, #0
 8018198:	d0f9      	beq.n	801818e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801819a:	4299      	cmp	r1, r3
 801819c:	6998      	ldr	r0, [r3, #24]
 801819e:	d1f9      	bne.n	8018194 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80181a0:	6190      	str	r0, [r2, #24]
 80181a2:	618a      	str	r2, [r1, #24]
 80181a4:	e7f2      	b.n	801818c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080181a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80181a8:	4288      	cmp	r0, r1
 80181aa:	b508      	push	{r3, lr}
 80181ac:	d105      	bne.n	80181ba <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80181ae:	4b11      	ldr	r3, [pc, #68]	; (80181f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80181b0:	2123      	movs	r1, #35	; 0x23
 80181b2:	4a11      	ldr	r2, [pc, #68]	; (80181f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80181b4:	4811      	ldr	r0, [pc, #68]	; (80181fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80181b6:	f010 f965 	bl	8028484 <__assert_func>
 80181ba:	694b      	ldr	r3, [r1, #20]
 80181bc:	b11b      	cbz	r3, 80181c6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80181be:	4b10      	ldr	r3, [pc, #64]	; (8018200 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80181c0:	2124      	movs	r1, #36	; 0x24
 80181c2:	4a0d      	ldr	r2, [pc, #52]	; (80181f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80181c4:	e7f6      	b.n	80181b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80181c6:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80181ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80181cc:	b913      	cbnz	r3, 80181d4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80181ce:	6281      	str	r1, [r0, #40]	; 0x28
 80181d0:	bd08      	pop	{r3, pc}
 80181d2:	4613      	mov	r3, r2
 80181d4:	699a      	ldr	r2, [r3, #24]
 80181d6:	b12a      	cbz	r2, 80181e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80181d8:	428b      	cmp	r3, r1
 80181da:	d1fa      	bne.n	80181d2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 80181dc:	4b09      	ldr	r3, [pc, #36]	; (8018204 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80181de:	2135      	movs	r1, #53	; 0x35
 80181e0:	4a05      	ldr	r2, [pc, #20]	; (80181f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80181e2:	e7e7      	b.n	80181b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80181e4:	428b      	cmp	r3, r1
 80181e6:	d103      	bne.n	80181f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 80181e8:	4b06      	ldr	r3, [pc, #24]	; (8018204 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80181ea:	2138      	movs	r1, #56	; 0x38
 80181ec:	4a02      	ldr	r2, [pc, #8]	; (80181f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80181ee:	e7e1      	b.n	80181b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80181f0:	6199      	str	r1, [r3, #24]
 80181f2:	e7ed      	b.n	80181d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 80181f4:	0802ba61 	.word	0x0802ba61
 80181f8:	0802bbb8 	.word	0x0802bbb8
 80181fc:	0802ba8d 	.word	0x0802ba8d
 8018200:	0802bac0 	.word	0x0802bac0
 8018204:	0802baf6 	.word	0x0802baf6

08018208 <_ZN8touchgfx4RectaNERKS0_>:
 8018208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801820c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8018210:	888c      	ldrh	r4, [r1, #4]
 8018212:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018216:	443c      	add	r4, r7
 8018218:	b2a4      	uxth	r4, r4
 801821a:	fa0f f884 	sxth.w	r8, r4
 801821e:	45c1      	cmp	r9, r8
 8018220:	da2f      	bge.n	8018282 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018222:	8882      	ldrh	r2, [r0, #4]
 8018224:	444a      	add	r2, r9
 8018226:	b292      	uxth	r2, r2
 8018228:	fa0f fe82 	sxth.w	lr, r2
 801822c:	4577      	cmp	r7, lr
 801822e:	da28      	bge.n	8018282 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018230:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8018234:	88cb      	ldrh	r3, [r1, #6]
 8018236:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801823a:	442b      	add	r3, r5
 801823c:	b21b      	sxth	r3, r3
 801823e:	429e      	cmp	r6, r3
 8018240:	da1f      	bge.n	8018282 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018242:	88c3      	ldrh	r3, [r0, #6]
 8018244:	4433      	add	r3, r6
 8018246:	b29b      	uxth	r3, r3
 8018248:	fa0f fc83 	sxth.w	ip, r3
 801824c:	4565      	cmp	r5, ip
 801824e:	da18      	bge.n	8018282 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018250:	454f      	cmp	r7, r9
 8018252:	bfb8      	it	lt
 8018254:	464f      	movlt	r7, r9
 8018256:	42b5      	cmp	r5, r6
 8018258:	bfb8      	it	lt
 801825a:	4635      	movlt	r5, r6
 801825c:	45f0      	cmp	r8, lr
 801825e:	bfd8      	it	le
 8018260:	4622      	movle	r2, r4
 8018262:	1bd2      	subs	r2, r2, r7
 8018264:	8082      	strh	r2, [r0, #4]
 8018266:	884a      	ldrh	r2, [r1, #2]
 8018268:	88c9      	ldrh	r1, [r1, #6]
 801826a:	8007      	strh	r7, [r0, #0]
 801826c:	440a      	add	r2, r1
 801826e:	8045      	strh	r5, [r0, #2]
 8018270:	b292      	uxth	r2, r2
 8018272:	b211      	sxth	r1, r2
 8018274:	458c      	cmp	ip, r1
 8018276:	bfa8      	it	ge
 8018278:	4613      	movge	r3, r2
 801827a:	1b5b      	subs	r3, r3, r5
 801827c:	80c3      	strh	r3, [r0, #6]
 801827e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018282:	2300      	movs	r3, #0
 8018284:	8003      	strh	r3, [r0, #0]
 8018286:	8043      	strh	r3, [r0, #2]
 8018288:	8083      	strh	r3, [r0, #4]
 801828a:	80c3      	strh	r3, [r0, #6]
 801828c:	e7f7      	b.n	801827e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801828e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801828e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018292:	2b00      	cmp	r3, #0
 8018294:	dd06      	ble.n	80182a4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8018296:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801829a:	2800      	cmp	r0, #0
 801829c:	bfcc      	ite	gt
 801829e:	2000      	movgt	r0, #0
 80182a0:	2001      	movle	r0, #1
 80182a2:	4770      	bx	lr
 80182a4:	2001      	movs	r0, #1
 80182a6:	4770      	bx	lr

080182a8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80182a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182ac:	2300      	movs	r3, #0
 80182ae:	4604      	mov	r4, r0
 80182b0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80182b2:	8003      	strh	r3, [r0, #0]
 80182b4:	8043      	strh	r3, [r0, #2]
 80182b6:	8083      	strh	r3, [r0, #4]
 80182b8:	80c3      	strh	r3, [r0, #6]
 80182ba:	2d00      	cmp	r5, #0
 80182bc:	d040      	beq.n	8018340 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80182be:	1d28      	adds	r0, r5, #4
 80182c0:	f7ff ffe5 	bl	801828e <_ZNK8touchgfx4Rect7isEmptyEv>
 80182c4:	b988      	cbnz	r0, 80182ea <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80182c6:	4620      	mov	r0, r4
 80182c8:	f7ff ffe1 	bl	801828e <_ZNK8touchgfx4Rect7isEmptyEv>
 80182cc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80182d0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80182d4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80182d8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80182dc:	b138      	cbz	r0, 80182ee <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80182de:	8022      	strh	r2, [r4, #0]
 80182e0:	8063      	strh	r3, [r4, #2]
 80182e2:	f8a4 e004 	strh.w	lr, [r4, #4]
 80182e6:	f8a4 c006 	strh.w	ip, [r4, #6]
 80182ea:	69ad      	ldr	r5, [r5, #24]
 80182ec:	e7e5      	b.n	80182ba <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80182ee:	f9b4 0000 	ldrsh.w	r0, [r4]
 80182f2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80182f6:	4290      	cmp	r0, r2
 80182f8:	4607      	mov	r7, r0
 80182fa:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80182fe:	460e      	mov	r6, r1
 8018300:	bfa8      	it	ge
 8018302:	4617      	movge	r7, r2
 8018304:	4299      	cmp	r1, r3
 8018306:	4472      	add	r2, lr
 8018308:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801830c:	bfa8      	it	ge
 801830e:	461e      	movge	r6, r3
 8018310:	4440      	add	r0, r8
 8018312:	4471      	add	r1, lr
 8018314:	4463      	add	r3, ip
 8018316:	b200      	sxth	r0, r0
 8018318:	8027      	strh	r7, [r4, #0]
 801831a:	b212      	sxth	r2, r2
 801831c:	8066      	strh	r6, [r4, #2]
 801831e:	b209      	sxth	r1, r1
 8018320:	b21b      	sxth	r3, r3
 8018322:	4290      	cmp	r0, r2
 8018324:	bfac      	ite	ge
 8018326:	ebc7 0200 	rsbge	r2, r7, r0
 801832a:	ebc7 0202 	rsblt	r2, r7, r2
 801832e:	4299      	cmp	r1, r3
 8018330:	bfac      	ite	ge
 8018332:	ebc6 0301 	rsbge	r3, r6, r1
 8018336:	ebc6 0303 	rsblt	r3, r6, r3
 801833a:	80a2      	strh	r2, [r4, #4]
 801833c:	80e3      	strh	r3, [r4, #6]
 801833e:	e7d4      	b.n	80182ea <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018340:	4620      	mov	r0, r4
 8018342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018346 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8018346:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801834a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801834e:	b383      	cbz	r3, 80183b2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8018350:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018352:	b374      	cbz	r4, 80183b2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8018354:	f9b1 5000 	ldrsh.w	r5, [r1]
 8018358:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801835c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8018360:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8018364:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018368:	b303      	cbz	r3, 80183ac <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801836a:	4668      	mov	r0, sp
 801836c:	1d21      	adds	r1, r4, #4
 801836e:	f8ad 5000 	strh.w	r5, [sp]
 8018372:	f8ad 6002 	strh.w	r6, [sp, #2]
 8018376:	f8ad 7004 	strh.w	r7, [sp, #4]
 801837a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801837e:	f7ff ff43 	bl	8018208 <_ZN8touchgfx4RectaNERKS0_>
 8018382:	4668      	mov	r0, sp
 8018384:	f7ff ff83 	bl	801828e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018388:	b980      	cbnz	r0, 80183ac <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801838a:	f8bd 3000 	ldrh.w	r3, [sp]
 801838e:	4669      	mov	r1, sp
 8018390:	88a2      	ldrh	r2, [r4, #4]
 8018392:	4620      	mov	r0, r4
 8018394:	1a9b      	subs	r3, r3, r2
 8018396:	88e2      	ldrh	r2, [r4, #6]
 8018398:	f8ad 3000 	strh.w	r3, [sp]
 801839c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80183a0:	1a9b      	subs	r3, r3, r2
 80183a2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80183a6:	6823      	ldr	r3, [r4, #0]
 80183a8:	689b      	ldr	r3, [r3, #8]
 80183aa:	4798      	blx	r3
 80183ac:	69a4      	ldr	r4, [r4, #24]
 80183ae:	2c00      	cmp	r4, #0
 80183b0:	d1d8      	bne.n	8018364 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80183b2:	b002      	add	sp, #8
 80183b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080183b8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80183b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80183ba:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80183be:	460d      	mov	r5, r1
 80183c0:	4616      	mov	r6, r2
 80183c2:	b323      	cbz	r3, 801840e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80183c4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80183c6:	b314      	cbz	r4, 801840e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80183c8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80183cc:	b1eb      	cbz	r3, 801840a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80183ce:	6828      	ldr	r0, [r5, #0]
 80183d0:	466b      	mov	r3, sp
 80183d2:	6869      	ldr	r1, [r5, #4]
 80183d4:	c303      	stmia	r3!, {r0, r1}
 80183d6:	4668      	mov	r0, sp
 80183d8:	1d21      	adds	r1, r4, #4
 80183da:	f7ff ff15 	bl	8018208 <_ZN8touchgfx4RectaNERKS0_>
 80183de:	4668      	mov	r0, sp
 80183e0:	f7ff ff55 	bl	801828e <_ZNK8touchgfx4Rect7isEmptyEv>
 80183e4:	b988      	cbnz	r0, 801840a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80183e6:	f8bd 3000 	ldrh.w	r3, [sp]
 80183ea:	4669      	mov	r1, sp
 80183ec:	88a2      	ldrh	r2, [r4, #4]
 80183ee:	4620      	mov	r0, r4
 80183f0:	1a9b      	subs	r3, r3, r2
 80183f2:	88e2      	ldrh	r2, [r4, #6]
 80183f4:	f8ad 3000 	strh.w	r3, [sp]
 80183f8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80183fc:	1a9b      	subs	r3, r3, r2
 80183fe:	4632      	mov	r2, r6
 8018400:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018404:	6823      	ldr	r3, [r4, #0]
 8018406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018408:	4798      	blx	r3
 801840a:	69a4      	ldr	r4, [r4, #24]
 801840c:	e7db      	b.n	80183c6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801840e:	b002      	add	sp, #8
 8018410:	bd70      	pop	{r4, r5, r6, pc}

08018412 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8018412:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018416:	4770      	bx	lr

08018418 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8018418:	6803      	ldr	r3, [r0, #0]
 801841a:	b513      	push	{r0, r1, r4, lr}
 801841c:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8018420:	2300      	movs	r3, #0
 8018422:	e9cd 3300 	strd	r3, r3, [sp]
 8018426:	466b      	mov	r3, sp
 8018428:	47a0      	blx	r4
 801842a:	b002      	add	sp, #8
 801842c:	bd10      	pop	{r4, pc}

0801842e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801842e:	2301      	movs	r3, #1
 8018430:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018434:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8018438:	4770      	bx	lr

0801843a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801843a:	2301      	movs	r3, #1
 801843c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018440:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8018444:	4770      	bx	lr

08018446 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8018446:	6843      	ldr	r3, [r0, #4]
 8018448:	2201      	movs	r2, #1
 801844a:	725a      	strb	r2, [r3, #9]
 801844c:	6840      	ldr	r0, [r0, #4]
 801844e:	6803      	ldr	r3, [r0, #0]
 8018450:	691b      	ldr	r3, [r3, #16]
 8018452:	4718      	bx	r3

08018454 <_ZN8touchgfx3HAL8flushDMAEv>:
 8018454:	6840      	ldr	r0, [r0, #4]
 8018456:	6803      	ldr	r3, [r0, #0]
 8018458:	689b      	ldr	r3, [r3, #8]
 801845a:	4718      	bx	r3

0801845c <_ZN8touchgfx3HAL10beginFrameEv>:
 801845c:	4b04      	ldr	r3, [pc, #16]	; (8018470 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801845e:	781b      	ldrb	r3, [r3, #0]
 8018460:	b123      	cbz	r3, 801846c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8018462:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8018466:	f080 0001 	eor.w	r0, r0, #1
 801846a:	4770      	bx	lr
 801846c:	2001      	movs	r0, #1
 801846e:	4770      	bx	lr
 8018470:	2000b41a 	.word	0x2000b41a

08018474 <_ZN8touchgfx3HAL8endFrameEv>:
 8018474:	b510      	push	{r4, lr}
 8018476:	4604      	mov	r4, r0
 8018478:	6840      	ldr	r0, [r0, #4]
 801847a:	6803      	ldr	r3, [r0, #0]
 801847c:	689b      	ldr	r3, [r3, #8]
 801847e:	4798      	blx	r3
 8018480:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8018484:	b113      	cbz	r3, 801848c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8018486:	2301      	movs	r3, #1
 8018488:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801848c:	bd10      	pop	{r4, pc}

0801848e <_ZN8touchgfx3HAL9taskEntryEv>:
 801848e:	b508      	push	{r3, lr}
 8018490:	6803      	ldr	r3, [r0, #0]
 8018492:	4604      	mov	r4, r0
 8018494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018496:	4798      	blx	r3
 8018498:	6823      	ldr	r3, [r4, #0]
 801849a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801849c:	4620      	mov	r0, r4
 801849e:	4798      	blx	r3
 80184a0:	f7fd ff80 	bl	80163a4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80184a4:	6823      	ldr	r3, [r4, #0]
 80184a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80184a8:	e7f8      	b.n	801849c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080184ac <_ZN8touchgfx3HAL4tickEv>:
 80184ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80184ae:	6803      	ldr	r3, [r0, #0]
 80184b0:	4604      	mov	r4, r0
 80184b2:	4d5c      	ldr	r5, [pc, #368]	; (8018624 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80184b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80184b8:	4798      	blx	r3
 80184ba:	2800      	cmp	r0, #0
 80184bc:	f000 8097 	beq.w	80185ee <_ZN8touchgfx3HAL4tickEv+0x142>
 80184c0:	2001      	movs	r0, #1
 80184c2:	2600      	movs	r6, #0
 80184c4:	f7fd fc5e 	bl	8015d84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80184c8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80184cc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80184d0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80184d4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80184d8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80184dc:	b133      	cbz	r3, 80184ec <_ZN8touchgfx3HAL4tickEv+0x40>
 80184de:	6823      	ldr	r3, [r4, #0]
 80184e0:	4620      	mov	r0, r4
 80184e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80184e6:	4798      	blx	r3
 80184e8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80184ec:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80184f0:	2601      	movs	r6, #1
 80184f2:	6862      	ldr	r2, [r4, #4]
 80184f4:	f083 0301 	eor.w	r3, r3, #1
 80184f8:	702e      	strb	r6, [r5, #0]
 80184fa:	7253      	strb	r3, [r2, #9]
 80184fc:	f003 fe42 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 8018500:	6803      	ldr	r3, [r0, #0]
 8018502:	4631      	mov	r1, r6
 8018504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018506:	4798      	blx	r3
 8018508:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801850c:	b90b      	cbnz	r3, 8018512 <_ZN8touchgfx3HAL4tickEv+0x66>
 801850e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8018512:	f003 fe37 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 8018516:	6803      	ldr	r3, [r0, #0]
 8018518:	695b      	ldr	r3, [r3, #20]
 801851a:	4798      	blx	r3
 801851c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801851e:	6803      	ldr	r3, [r0, #0]
 8018520:	691b      	ldr	r3, [r3, #16]
 8018522:	4798      	blx	r3
 8018524:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018528:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801852c:	3b01      	subs	r3, #1
 801852e:	b2db      	uxtb	r3, r3
 8018530:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8018534:	b10a      	cbz	r2, 801853a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8018536:	2b00      	cmp	r3, #0
 8018538:	d1eb      	bne.n	8018512 <_ZN8touchgfx3HAL4tickEv+0x66>
 801853a:	4a3b      	ldr	r2, [pc, #236]	; (8018628 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801853c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8018540:	7813      	ldrb	r3, [r2, #0]
 8018542:	3301      	adds	r3, #1
 8018544:	b25b      	sxtb	r3, r3
 8018546:	4299      	cmp	r1, r3
 8018548:	7013      	strb	r3, [r2, #0]
 801854a:	dc10      	bgt.n	801856e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801854c:	2300      	movs	r3, #0
 801854e:	68e0      	ldr	r0, [r4, #12]
 8018550:	a902      	add	r1, sp, #8
 8018552:	7013      	strb	r3, [r2, #0]
 8018554:	aa03      	add	r2, sp, #12
 8018556:	6803      	ldr	r3, [r0, #0]
 8018558:	68db      	ldr	r3, [r3, #12]
 801855a:	4798      	blx	r3
 801855c:	6823      	ldr	r3, [r4, #0]
 801855e:	2800      	cmp	r0, #0
 8018560:	d051      	beq.n	8018606 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8018562:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8018566:	4620      	mov	r0, r4
 8018568:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801856c:	4798      	blx	r3
 801856e:	2300      	movs	r3, #0
 8018570:	6960      	ldr	r0, [r4, #20]
 8018572:	f88d 3007 	strb.w	r3, [sp, #7]
 8018576:	b158      	cbz	r0, 8018590 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018578:	6803      	ldr	r3, [r0, #0]
 801857a:	f10d 0107 	add.w	r1, sp, #7
 801857e:	68db      	ldr	r3, [r3, #12]
 8018580:	4798      	blx	r3
 8018582:	b128      	cbz	r0, 8018590 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018586:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801858a:	6803      	ldr	r3, [r0, #0]
 801858c:	68db      	ldr	r3, [r3, #12]
 801858e:	4798      	blx	r3
 8018590:	f104 001c 	add.w	r0, r4, #28
 8018594:	f00e faa0 	bl	8026ad8 <_ZN8touchgfx8Gestures4tickEv>
 8018598:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801859c:	b30b      	cbz	r3, 80185e2 <_ZN8touchgfx3HAL4tickEv+0x136>
 801859e:	6920      	ldr	r0, [r4, #16]
 80185a0:	6803      	ldr	r3, [r0, #0]
 80185a2:	691b      	ldr	r3, [r3, #16]
 80185a4:	4798      	blx	r3
 80185a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80185a8:	4606      	mov	r6, r0
 80185aa:	b903      	cbnz	r3, 80185ae <_ZN8touchgfx3HAL4tickEv+0x102>
 80185ac:	6720      	str	r0, [r4, #112]	; 0x70
 80185ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80185b0:	4a1e      	ldr	r2, [pc, #120]	; (801862c <_ZN8touchgfx3HAL4tickEv+0x180>)
 80185b2:	1af3      	subs	r3, r6, r3
 80185b4:	4293      	cmp	r3, r2
 80185b6:	d914      	bls.n	80185e2 <_ZN8touchgfx3HAL4tickEv+0x136>
 80185b8:	6920      	ldr	r0, [r4, #16]
 80185ba:	6803      	ldr	r3, [r0, #0]
 80185bc:	699b      	ldr	r3, [r3, #24]
 80185be:	4798      	blx	r3
 80185c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80185c2:	2264      	movs	r2, #100	; 0x64
 80185c4:	1af3      	subs	r3, r6, r3
 80185c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80185ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80185ce:	2800      	cmp	r0, #0
 80185d0:	dc1e      	bgt.n	8018610 <_ZN8touchgfx3HAL4tickEv+0x164>
 80185d2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80185d6:	6920      	ldr	r0, [r4, #16]
 80185d8:	2100      	movs	r1, #0
 80185da:	6803      	ldr	r3, [r0, #0]
 80185dc:	69db      	ldr	r3, [r3, #28]
 80185de:	4798      	blx	r3
 80185e0:	6726      	str	r6, [r4, #112]	; 0x70
 80185e2:	f003 fdcf 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 80185e6:	6803      	ldr	r3, [r0, #0]
 80185e8:	2100      	movs	r1, #0
 80185ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185ec:	4798      	blx	r3
 80185ee:	6823      	ldr	r3, [r4, #0]
 80185f0:	4620      	mov	r0, r4
 80185f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80185f6:	4798      	blx	r3
 80185f8:	2001      	movs	r0, #1
 80185fa:	f7fd fbce 	bl	8015d9a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80185fe:	2300      	movs	r3, #0
 8018600:	702b      	strb	r3, [r5, #0]
 8018602:	b004      	add	sp, #16
 8018604:	bd70      	pop	{r4, r5, r6, pc}
 8018606:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801860a:	4620      	mov	r0, r4
 801860c:	4798      	blx	r3
 801860e:	e7ae      	b.n	801856e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8018610:	2863      	cmp	r0, #99	; 0x63
 8018612:	bfcb      	itete	gt
 8018614:	2300      	movgt	r3, #0
 8018616:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801861a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801861e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8018622:	e7d8      	b.n	80185d6 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8018624:	2000b420 	.word	0x2000b420
 8018628:	2000b421 	.word	0x2000b421
 801862c:	05f5e100 	.word	0x05f5e100

08018630 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8018630:	f7fd be88 	b.w	8016344 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018634 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8018634:	6581      	str	r1, [r0, #88]	; 0x58
 8018636:	301c      	adds	r0, #28
 8018638:	f00e ba4c 	b.w	8026ad4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801863c <_ZN8touchgfx3HAL5touchEll>:
 801863c:	b530      	push	{r4, r5, lr}
 801863e:	b087      	sub	sp, #28
 8018640:	4604      	mov	r4, r0
 8018642:	a804      	add	r0, sp, #16
 8018644:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8018648:	f003 fb9c 	bl	801bd84 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801864c:	9b04      	ldr	r3, [sp, #16]
 801864e:	a906      	add	r1, sp, #24
 8018650:	a803      	add	r0, sp, #12
 8018652:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018656:	9b05      	ldr	r3, [sp, #20]
 8018658:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801865c:	f003 fbe0 	bl	801be20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8018660:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8018664:	f104 001c 	add.w	r0, r4, #28
 8018668:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801866c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018670:	b189      	cbz	r1, 8018696 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8018672:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8018676:	9300      	str	r3, [sp, #0]
 8018678:	4613      	mov	r3, r2
 801867a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801867e:	462a      	mov	r2, r5
 8018680:	f00e fa38 	bl	8026af4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8018684:	b128      	cbz	r0, 8018692 <_ZN8touchgfx3HAL5touchEll+0x56>
 8018686:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801868a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801868c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018690:	6623      	str	r3, [r4, #96]	; 0x60
 8018692:	b007      	add	sp, #28
 8018694:	bd30      	pop	{r4, r5, pc}
 8018696:	f00e fa71 	bl	8026b7c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801869a:	2301      	movs	r3, #1
 801869c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80186a0:	e7f1      	b.n	8018686 <_ZN8touchgfx3HAL5touchEll+0x4a>

080186a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80186a2:	b570      	push	{r4, r5, r6, lr}
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d050      	beq.n	801874a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80186a8:	ea81 0002 	eor.w	r0, r1, r2
 80186ac:	07c6      	lsls	r6, r0, #31
 80186ae:	d508      	bpl.n	80186c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80186b0:	3a01      	subs	r2, #1
 80186b2:	18cc      	adds	r4, r1, r3
 80186b4:	42a1      	cmp	r1, r4
 80186b6:	d048      	beq.n	801874a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80186b8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80186bc:	f801 0b01 	strb.w	r0, [r1], #1
 80186c0:	e7f8      	b.n	80186b4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80186c2:	07d5      	lsls	r5, r2, #31
 80186c4:	bf42      	ittt	mi
 80186c6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80186ca:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80186ce:	f801 0b01 	strbmi.w	r0, [r1], #1
 80186d2:	2b01      	cmp	r3, #1
 80186d4:	d915      	bls.n	8018702 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80186d6:	ea82 0001 	eor.w	r0, r2, r1
 80186da:	0784      	lsls	r4, r0, #30
 80186dc:	d02d      	beq.n	801873a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 80186de:	1e94      	subs	r4, r2, #2
 80186e0:	4608      	mov	r0, r1
 80186e2:	18ce      	adds	r6, r1, r3
 80186e4:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80186e8:	f820 5b02 	strh.w	r5, [r0], #2
 80186ec:	1a35      	subs	r5, r6, r0
 80186ee:	2d01      	cmp	r5, #1
 80186f0:	d8f8      	bhi.n	80186e4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 80186f2:	1e98      	subs	r0, r3, #2
 80186f4:	f003 0301 	and.w	r3, r3, #1
 80186f8:	f020 0001 	bic.w	r0, r0, #1
 80186fc:	3002      	adds	r0, #2
 80186fe:	4401      	add	r1, r0
 8018700:	4402      	add	r2, r0
 8018702:	1f14      	subs	r4, r2, #4
 8018704:	4608      	mov	r0, r1
 8018706:	18ce      	adds	r6, r1, r3
 8018708:	1a35      	subs	r5, r6, r0
 801870a:	2d03      	cmp	r5, #3
 801870c:	d810      	bhi.n	8018730 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801870e:	089c      	lsrs	r4, r3, #2
 8018710:	00a0      	lsls	r0, r4, #2
 8018712:	4401      	add	r1, r0
 8018714:	3801      	subs	r0, #1
 8018716:	4402      	add	r2, r0
 8018718:	f06f 0003 	mvn.w	r0, #3
 801871c:	fb00 3404 	mla	r4, r0, r4, r3
 8018720:	440c      	add	r4, r1
 8018722:	42a1      	cmp	r1, r4
 8018724:	d011      	beq.n	801874a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8018726:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801872a:	f801 3b01 	strb.w	r3, [r1], #1
 801872e:	e7f8      	b.n	8018722 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8018730:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8018734:	f840 5b04 	str.w	r5, [r0], #4
 8018738:	e7e6      	b.n	8018708 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801873a:	0790      	lsls	r0, r2, #30
 801873c:	d0e1      	beq.n	8018702 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801873e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8018742:	3b02      	subs	r3, #2
 8018744:	f821 0b02 	strh.w	r0, [r1], #2
 8018748:	e7db      	b.n	8018702 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801874a:	2001      	movs	r0, #1
 801874c:	bd70      	pop	{r4, r5, r6, pc}

0801874e <_ZN8touchgfx3HAL7noTouchEv>:
 801874e:	b510      	push	{r4, lr}
 8018750:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8018754:	4604      	mov	r4, r0
 8018756:	b153      	cbz	r3, 801876e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8018758:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801875c:	2101      	movs	r1, #1
 801875e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8018762:	301c      	adds	r0, #28
 8018764:	f00e fa0a 	bl	8026b7c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018768:	2300      	movs	r3, #0
 801876a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801876e:	bd10      	pop	{r4, pc}

08018770 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8018770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018774:	4605      	mov	r5, r0
 8018776:	6980      	ldr	r0, [r0, #24]
 8018778:	b085      	sub	sp, #20
 801877a:	460f      	mov	r7, r1
 801877c:	4690      	mov	r8, r2
 801877e:	4699      	mov	r9, r3
 8018780:	b930      	cbnz	r0, 8018790 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8018782:	4b1f      	ldr	r3, [pc, #124]	; (8018800 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8018784:	f44f 7198 	mov.w	r1, #304	; 0x130
 8018788:	4a1e      	ldr	r2, [pc, #120]	; (8018804 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801878a:	481f      	ldr	r0, [pc, #124]	; (8018808 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 801878c:	f00f fe7a 	bl	8028484 <__assert_func>
 8018790:	ac04      	add	r4, sp, #16
 8018792:	2600      	movs	r6, #0
 8018794:	f844 6d04 	str.w	r6, [r4, #-4]!
 8018798:	6806      	ldr	r6, [r0, #0]
 801879a:	9401      	str	r4, [sp, #4]
 801879c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80187a0:	9400      	str	r4, [sp, #0]
 80187a2:	6834      	ldr	r4, [r6, #0]
 80187a4:	47a0      	blx	r4
 80187a6:	4c19      	ldr	r4, [pc, #100]	; (801880c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80187a8:	4606      	mov	r6, r0
 80187aa:	f8a4 9000 	strh.w	r9, [r4]
 80187ae:	f7f7 f9e1 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 80187b2:	6803      	ldr	r3, [r0, #0]
 80187b4:	6a1b      	ldr	r3, [r3, #32]
 80187b6:	4798      	blx	r3
 80187b8:	280c      	cmp	r0, #12
 80187ba:	d80f      	bhi.n	80187dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80187bc:	e8df f000 	tbb	[pc, r0]
 80187c0:	1b1b1207 	.word	0x1b1b1207
 80187c4:	1b1b1b1b 	.word	0x1b1b1b1b
 80187c8:	1b1b1b1b 	.word	0x1b1b1b1b
 80187cc:	1b          	.byte	0x1b
 80187cd:	00          	.byte	0x00
 80187ce:	8823      	ldrh	r3, [r4, #0]
 80187d0:	fb08 7203 	mla	r2, r8, r3, r7
 80187d4:	9b03      	ldr	r3, [sp, #12]
 80187d6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80187da:	63eb      	str	r3, [r5, #60]	; 0x3c
 80187dc:	4630      	mov	r0, r6
 80187de:	b005      	add	sp, #20
 80187e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187e4:	8822      	ldrh	r2, [r4, #0]
 80187e6:	9b03      	ldr	r3, [sp, #12]
 80187e8:	fb08 7202 	mla	r2, r8, r2, r7
 80187ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80187f0:	1a9a      	subs	r2, r3, r2
 80187f2:	63ea      	str	r2, [r5, #60]	; 0x3c
 80187f4:	e7f2      	b.n	80187dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80187f6:	4b06      	ldr	r3, [pc, #24]	; (8018810 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 80187f8:	f240 114d 	movw	r1, #333	; 0x14d
 80187fc:	4a01      	ldr	r2, [pc, #4]	; (8018804 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80187fe:	e7c4      	b.n	801878a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8018800:	0802bc61 	.word	0x0802bc61
 8018804:	0802bf72 	.word	0x0802bf72
 8018808:	0802bca6 	.word	0x0802bca6
 801880c:	2000b416 	.word	0x2000b416
 8018810:	0802bccc 	.word	0x0802bccc

08018814 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8018814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018818:	4698      	mov	r8, r3
 801881a:	6803      	ldr	r3, [r0, #0]
 801881c:	b087      	sub	sp, #28
 801881e:	460e      	mov	r6, r1
 8018820:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8018822:	4617      	mov	r7, r2
 8018824:	4b0d      	ldr	r3, [pc, #52]	; (801885c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8018826:	4604      	mov	r4, r0
 8018828:	f8b3 9000 	ldrh.w	r9, [r3]
 801882c:	f7f7 f9a2 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 8018830:	6803      	ldr	r3, [r0, #0]
 8018832:	6a1b      	ldr	r3, [r3, #32]
 8018834:	4798      	blx	r3
 8018836:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801883a:	463a      	mov	r2, r7
 801883c:	4631      	mov	r1, r6
 801883e:	9302      	str	r3, [sp, #8]
 8018840:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8018844:	9301      	str	r3, [sp, #4]
 8018846:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801884a:	e9cd 9003 	strd	r9, r0, [sp, #12]
 801884e:	9300      	str	r3, [sp, #0]
 8018850:	4620      	mov	r0, r4
 8018852:	4643      	mov	r3, r8
 8018854:	47a8      	blx	r5
 8018856:	b007      	add	sp, #28
 8018858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801885c:	2000b416 	.word	0x2000b416

08018860 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8018860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018864:	4606      	mov	r6, r0
 8018866:	b089      	sub	sp, #36	; 0x24
 8018868:	4610      	mov	r0, r2
 801886a:	460c      	mov	r4, r1
 801886c:	4691      	mov	r9, r2
 801886e:	4698      	mov	r8, r3
 8018870:	f005 fef6 	bl	801e660 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018874:	2800      	cmp	r0, #0
 8018876:	f000 8093 	beq.w	80189a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 801887a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80189b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801887e:	ad08      	add	r5, sp, #32
 8018880:	f8df b138 	ldr.w	fp, [pc, #312]	; 80189bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8018884:	f8da 0000 	ldr.w	r0, [sl]
 8018888:	4f4a      	ldr	r7, [pc, #296]	; (80189b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801888a:	6802      	ldr	r2, [r0, #0]
 801888c:	6a12      	ldr	r2, [r2, #32]
 801888e:	4790      	blx	r2
 8018890:	f8da 0000 	ldr.w	r0, [sl]
 8018894:	6802      	ldr	r2, [r0, #0]
 8018896:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018898:	4790      	blx	r2
 801889a:	f8bb 3000 	ldrh.w	r3, [fp]
 801889e:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80188a2:	4628      	mov	r0, r5
 80188a4:	9300      	str	r3, [sp, #0]
 80188a6:	883b      	ldrh	r3, [r7, #0]
 80188a8:	9301      	str	r3, [sp, #4]
 80188aa:	f005 ff9d 	bl	801e7e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80188ae:	f8ab 0000 	strh.w	r0, [fp]
 80188b2:	4628      	mov	r0, r5
 80188b4:	f005 ffd2 	bl	801e85c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80188b8:	f8da b000 	ldr.w	fp, [sl]
 80188bc:	8038      	strh	r0, [r7, #0]
 80188be:	4648      	mov	r0, r9
 80188c0:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80188c4:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 80188c8:	9302      	str	r3, [sp, #8]
 80188ca:	f005 fec9 	bl	801e660 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80188ce:	f8da 2000 	ldr.w	r2, [sl]
 80188d2:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80188d6:	63d0      	str	r0, [r2, #60]	; 0x3c
 80188d8:	4620      	mov	r0, r4
 80188da:	6822      	ldr	r2, [r4, #0]
 80188dc:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 80188e0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80188e2:	2200      	movs	r2, #0
 80188e4:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 80188e8:	4611      	mov	r1, r2
 80188ea:	4798      	blx	r3
 80188ec:	2201      	movs	r2, #1
 80188ee:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 80188f2:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 80188f6:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 80188fa:	2a00      	cmp	r2, #0
 80188fc:	f104 0204 	add.w	r2, r4, #4
 8018900:	dd51      	ble.n	80189a6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 8018902:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8018906:	2900      	cmp	r1, #0
 8018908:	dd4d      	ble.n	80189a6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 801890a:	6810      	ldr	r0, [r2, #0]
 801890c:	f10d 0c18 	add.w	ip, sp, #24
 8018910:	6851      	ldr	r1, [r2, #4]
 8018912:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018916:	4641      	mov	r1, r8
 8018918:	a806      	add	r0, sp, #24
 801891a:	f7ff fc75 	bl	8018208 <_ZN8touchgfx4RectaNERKS0_>
 801891e:	4628      	mov	r0, r5
 8018920:	f006 f8b4 	bl	801ea8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018924:	4680      	mov	r8, r0
 8018926:	f7f7 f925 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 801892a:	6802      	ldr	r2, [r0, #0]
 801892c:	6a12      	ldr	r2, [r2, #32]
 801892e:	4790      	blx	r2
 8018930:	4580      	cmp	r8, r0
 8018932:	d03d      	beq.n	80189b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x150>
 8018934:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8018936:	b150      	cbz	r0, 801894e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 8018938:	4628      	mov	r0, r5
 801893a:	f006 f8a7 	bl	801ea8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801893e:	4605      	mov	r5, r0
 8018940:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8018942:	6803      	ldr	r3, [r0, #0]
 8018944:	6a1b      	ldr	r3, [r3, #32]
 8018946:	4798      	blx	r3
 8018948:	1a2b      	subs	r3, r5, r0
 801894a:	4258      	negs	r0, r3
 801894c:	4158      	adcs	r0, r3
 801894e:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8018952:	2500      	movs	r5, #0
 8018954:	6963      	ldr	r3, [r4, #20]
 8018956:	4620      	mov	r0, r4
 8018958:	6822      	ldr	r2, [r4, #0]
 801895a:	a906      	add	r1, sp, #24
 801895c:	6165      	str	r5, [r4, #20]
 801895e:	9303      	str	r3, [sp, #12]
 8018960:	6892      	ldr	r2, [r2, #8]
 8018962:	4790      	blx	r2
 8018964:	9b03      	ldr	r3, [sp, #12]
 8018966:	4620      	mov	r0, r4
 8018968:	4652      	mov	r2, sl
 801896a:	6163      	str	r3, [r4, #20]
 801896c:	4649      	mov	r1, r9
 801896e:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8018972:	6823      	ldr	r3, [r4, #0]
 8018974:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8018978:	4c0f      	ldr	r4, [pc, #60]	; (80189b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 801897a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801897c:	4798      	blx	r3
 801897e:	6820      	ldr	r0, [r4, #0]
 8018980:	9b02      	ldr	r3, [sp, #8]
 8018982:	9a00      	ldr	r2, [sp, #0]
 8018984:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8018988:	4b0c      	ldr	r3, [pc, #48]	; (80189bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 801898a:	801a      	strh	r2, [r3, #0]
 801898c:	4b09      	ldr	r3, [pc, #36]	; (80189b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801898e:	9a01      	ldr	r2, [sp, #4]
 8018990:	801a      	strh	r2, [r3, #0]
 8018992:	6803      	ldr	r3, [r0, #0]
 8018994:	6a1b      	ldr	r3, [r3, #32]
 8018996:	4798      	blx	r3
 8018998:	6820      	ldr	r0, [r4, #0]
 801899a:	6803      	ldr	r3, [r0, #0]
 801899c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801899e:	4798      	blx	r3
 80189a0:	b009      	add	sp, #36	; 0x24
 80189a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189a6:	ab06      	add	r3, sp, #24
 80189a8:	6810      	ldr	r0, [r2, #0]
 80189aa:	6851      	ldr	r1, [r2, #4]
 80189ac:	c303      	stmia	r3!, {r0, r1}
 80189ae:	e7b6      	b.n	801891e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbe>
 80189b0:	2000      	movs	r0, #0
 80189b2:	e7cc      	b.n	801894e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 80189b4:	2000b418 	.word	0x2000b418
 80189b8:	2000b41c 	.word	0x2000b41c
 80189bc:	2000b416 	.word	0x2000b416

080189c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80189c0:	4b07      	ldr	r3, [pc, #28]	; (80189e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80189c2:	b510      	push	{r4, lr}
 80189c4:	781b      	ldrb	r3, [r3, #0]
 80189c6:	4604      	mov	r4, r0
 80189c8:	b13b      	cbz	r3, 80189da <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80189ca:	6803      	ldr	r3, [r0, #0]
 80189cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189ce:	4798      	blx	r3
 80189d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80189d2:	4283      	cmp	r3, r0
 80189d4:	d101      	bne.n	80189da <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80189d6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80189d8:	bd10      	pop	{r4, pc}
 80189da:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80189dc:	e7fc      	b.n	80189d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80189de:	bf00      	nop
 80189e0:	2000b41a 	.word	0x2000b41a

080189e4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80189e4:	4b0b      	ldr	r3, [pc, #44]	; (8018a14 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 80189e6:	b510      	push	{r4, lr}
 80189e8:	781b      	ldrb	r3, [r3, #0]
 80189ea:	4604      	mov	r4, r0
 80189ec:	b95b      	cbnz	r3, 8018a06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80189ee:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80189f2:	2b02      	cmp	r3, #2
 80189f4:	d007      	beq.n	8018a06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80189f6:	6840      	ldr	r0, [r0, #4]
 80189f8:	f000 fbc8 	bl	801918c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80189fc:	b118      	cbz	r0, 8018a06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80189fe:	6862      	ldr	r2, [r4, #4]
 8018a00:	7a53      	ldrb	r3, [r2, #9]
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d0fc      	beq.n	8018a00 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8018a06:	f7fd fc8f 	bl	8016328 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018a0a:	4620      	mov	r0, r4
 8018a0c:	f7ff ffd8 	bl	80189c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018a10:	bd10      	pop	{r4, pc}
 8018a12:	bf00      	nop
 8018a14:	2000b41a 	.word	0x2000b41a

08018a18 <_ZN8touchgfx3HAL10initializeEv>:
 8018a18:	b510      	push	{r4, lr}
 8018a1a:	4604      	mov	r4, r0
 8018a1c:	f7fd fc4e 	bl	80162bc <_ZN8touchgfx10OSWrappers10initializeEv>
 8018a20:	6860      	ldr	r0, [r4, #4]
 8018a22:	6803      	ldr	r3, [r0, #0]
 8018a24:	68db      	ldr	r3, [r3, #12]
 8018a26:	4798      	blx	r3
 8018a28:	68e0      	ldr	r0, [r4, #12]
 8018a2a:	6803      	ldr	r3, [r0, #0]
 8018a2c:	689b      	ldr	r3, [r3, #8]
 8018a2e:	4798      	blx	r3
 8018a30:	6823      	ldr	r3, [r4, #0]
 8018a32:	4620      	mov	r0, r4
 8018a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a3a:	4718      	bx	r3

08018a3c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8018a3c:	b508      	push	{r3, lr}
 8018a3e:	290c      	cmp	r1, #12
 8018a40:	d817      	bhi.n	8018a72 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8018a42:	e8df f001 	tbb	[pc, r1]
 8018a46:	090b      	.short	0x090b
 8018a48:	0d0d0d07 	.word	0x0d0d0d07
 8018a4c:	1414140d 	.word	0x1414140d
 8018a50:	1414      	.short	0x1414
 8018a52:	0d          	.byte	0x0d
 8018a53:	00          	.byte	0x00
 8018a54:	2020      	movs	r0, #32
 8018a56:	bd08      	pop	{r3, pc}
 8018a58:	2018      	movs	r0, #24
 8018a5a:	e7fc      	b.n	8018a56 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018a5c:	2010      	movs	r0, #16
 8018a5e:	e7fa      	b.n	8018a56 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018a60:	4b05      	ldr	r3, [pc, #20]	; (8018a78 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8018a62:	f44f 710c 	mov.w	r1, #560	; 0x230
 8018a66:	4a05      	ldr	r2, [pc, #20]	; (8018a7c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8018a68:	4805      	ldr	r0, [pc, #20]	; (8018a80 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8018a6a:	f00f fd0b 	bl	8028484 <__assert_func>
 8018a6e:	2008      	movs	r0, #8
 8018a70:	e7f1      	b.n	8018a56 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018a72:	2000      	movs	r0, #0
 8018a74:	e7ef      	b.n	8018a56 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018a76:	bf00      	nop
 8018a78:	0802bd9f 	.word	0x0802bd9f
 8018a7c:	0802c134 	.word	0x0802c134
 8018a80:	0802bca6 	.word	0x0802bca6

08018a84 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8018a84:	b570      	push	{r4, r5, r6, lr}
 8018a86:	460d      	mov	r5, r1
 8018a88:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8018a8c:	4616      	mov	r6, r2
 8018a8e:	461c      	mov	r4, r3
 8018a90:	f7ff ffd4 	bl	8018a3c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8018a94:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8018a98:	10c0      	asrs	r0, r0, #3
 8018a9a:	fb06 5101 	mla	r1, r6, r1, r5
 8018a9e:	fb00 4001 	mla	r0, r0, r1, r4
 8018aa2:	bd70      	pop	{r4, r5, r6, pc}

08018aa4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8018aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018aa8:	b08a      	sub	sp, #40	; 0x28
 8018aaa:	f04f 0c00 	mov.w	ip, #0
 8018aae:	4604      	mov	r4, r0
 8018ab0:	469a      	mov	sl, r3
 8018ab2:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8018ab6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8018aba:	f1b8 0f02 	cmp.w	r8, #2
 8018abe:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8018ac2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018ac6:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8018aca:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8018ace:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8018ad2:	f8cd c020 	str.w	ip, [sp, #32]
 8018ad6:	d030      	beq.n	8018b3a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8018ad8:	2bff      	cmp	r3, #255	; 0xff
 8018ada:	d12c      	bne.n	8018b36 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8018adc:	4560      	cmp	r0, ip
 8018ade:	bf14      	ite	ne
 8018ae0:	2004      	movne	r0, #4
 8018ae2:	2001      	moveq	r0, #1
 8018ae4:	9204      	str	r2, [sp, #16]
 8018ae6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8018aea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018aee:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018af2:	f8ad 6018 	strh.w	r6, [sp, #24]
 8018af6:	f8ad 501a 	strh.w	r5, [sp, #26]
 8018afa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018afe:	4620      	mov	r0, r4
 8018b00:	f7ff ff5e 	bl	80189c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018b04:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8018b08:	4603      	mov	r3, r0
 8018b0a:	4651      	mov	r1, sl
 8018b0c:	4620      	mov	r0, r4
 8018b0e:	e9cd 9700 	strd	r9, r7, [sp]
 8018b12:	f7ff ffb7 	bl	8018a84 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018b16:	f8ad 901e 	strh.w	r9, [sp, #30]
 8018b1a:	9005      	str	r0, [sp, #20]
 8018b1c:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8018b20:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8018b24:	b106      	cbz	r6, 8018b28 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8018b26:	b98d      	cbnz	r5, 8018b4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8018b28:	4b12      	ldr	r3, [pc, #72]	; (8018b74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8018b2a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8018b2e:	4a12      	ldr	r2, [pc, #72]	; (8018b78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8018b30:	4812      	ldr	r0, [pc, #72]	; (8018b7c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8018b32:	f00f fca7 	bl	8028484 <__assert_func>
 8018b36:	2004      	movs	r0, #4
 8018b38:	e7d4      	b.n	8018ae4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8018b3a:	2bff      	cmp	r3, #255	; 0xff
 8018b3c:	d104      	bne.n	8018b48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8018b3e:	2800      	cmp	r0, #0
 8018b40:	bf14      	ite	ne
 8018b42:	2040      	movne	r0, #64	; 0x40
 8018b44:	2020      	moveq	r0, #32
 8018b46:	e7cd      	b.n	8018ae4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8018b48:	2040      	movs	r0, #64	; 0x40
 8018b4a:	e7cb      	b.n	8018ae4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8018b4c:	6823      	ldr	r3, [r4, #0]
 8018b4e:	4620      	mov	r0, r4
 8018b50:	9d02      	ldr	r5, [sp, #8]
 8018b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b54:	4798      	blx	r3
 8018b56:	4228      	tst	r0, r5
 8018b58:	d104      	bne.n	8018b64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8018b5a:	4b09      	ldr	r3, [pc, #36]	; (8018b80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8018b5c:	f240 11b1 	movw	r1, #433	; 0x1b1
 8018b60:	4a05      	ldr	r2, [pc, #20]	; (8018b78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8018b62:	e7e5      	b.n	8018b30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8018b64:	6860      	ldr	r0, [r4, #4]
 8018b66:	a902      	add	r1, sp, #8
 8018b68:	6803      	ldr	r3, [r0, #0]
 8018b6a:	685b      	ldr	r3, [r3, #4]
 8018b6c:	4798      	blx	r3
 8018b6e:	b00a      	add	sp, #40	; 0x28
 8018b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b74:	0802bd22 	.word	0x0802bd22
 8018b78:	0802bfd6 	.word	0x0802bfd6
 8018b7c:	0802bca6 	.word	0x0802bca6
 8018b80:	0802bd5a 	.word	0x0802bd5a

08018b84 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8018b84:	b510      	push	{r4, lr}
 8018b86:	b08a      	sub	sp, #40	; 0x28
 8018b88:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8018b8c:	9408      	str	r4, [sp, #32]
 8018b8e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8018b92:	9407      	str	r4, [sp, #28]
 8018b94:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8018b98:	9406      	str	r4, [sp, #24]
 8018b9a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8018b9e:	9405      	str	r4, [sp, #20]
 8018ba0:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8018ba4:	9404      	str	r4, [sp, #16]
 8018ba6:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8018baa:	9403      	str	r4, [sp, #12]
 8018bac:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8018bb0:	9402      	str	r4, [sp, #8]
 8018bb2:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8018bb6:	e9cd 3400 	strd	r3, r4, [sp]
 8018bba:	4613      	mov	r3, r2
 8018bbc:	2200      	movs	r2, #0
 8018bbe:	f7ff ff71 	bl	8018aa4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8018bc2:	b00a      	add	sp, #40	; 0x28
 8018bc4:	bd10      	pop	{r4, pc}
	...

08018bc8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8018bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bca:	b08b      	sub	sp, #44	; 0x2c
 8018bcc:	4616      	mov	r6, r2
 8018bce:	460d      	mov	r5, r1
 8018bd0:	461f      	mov	r7, r3
 8018bd2:	4604      	mov	r4, r0
 8018bd4:	f7f6 ffce 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 8018bd8:	6803      	ldr	r3, [r0, #0]
 8018bda:	6a1b      	ldr	r3, [r3, #32]
 8018bdc:	4798      	blx	r3
 8018bde:	4b0e      	ldr	r3, [pc, #56]	; (8018c18 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8018be0:	2200      	movs	r2, #0
 8018be2:	4629      	mov	r1, r5
 8018be4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8018be8:	881b      	ldrh	r3, [r3, #0]
 8018bea:	4620      	mov	r0, r4
 8018bec:	9306      	str	r3, [sp, #24]
 8018bee:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018bf2:	9305      	str	r3, [sp, #20]
 8018bf4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8018bf8:	9304      	str	r3, [sp, #16]
 8018bfa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018bfe:	9303      	str	r3, [sp, #12]
 8018c00:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018c04:	9302      	str	r3, [sp, #8]
 8018c06:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018c0a:	e9cd 7300 	strd	r7, r3, [sp]
 8018c0e:	4633      	mov	r3, r6
 8018c10:	f7ff ff48 	bl	8018aa4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8018c14:	b00b      	add	sp, #44	; 0x2c
 8018c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c18:	2000b416 	.word	0x2000b416

08018c1c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8018c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c20:	461f      	mov	r7, r3
 8018c22:	4b14      	ldr	r3, [pc, #80]	; (8018c74 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8018c24:	b08a      	sub	sp, #40	; 0x28
 8018c26:	4616      	mov	r6, r2
 8018c28:	f8b3 8000 	ldrh.w	r8, [r3]
 8018c2c:	460d      	mov	r5, r1
 8018c2e:	4604      	mov	r4, r0
 8018c30:	f7f6 ffa0 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 8018c34:	6803      	ldr	r3, [r0, #0]
 8018c36:	6a1b      	ldr	r3, [r3, #32]
 8018c38:	4798      	blx	r3
 8018c3a:	2302      	movs	r3, #2
 8018c3c:	9008      	str	r0, [sp, #32]
 8018c3e:	2200      	movs	r2, #0
 8018c40:	4629      	mov	r1, r5
 8018c42:	4620      	mov	r0, r4
 8018c44:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8018c48:	2301      	movs	r3, #1
 8018c4a:	9305      	str	r3, [sp, #20]
 8018c4c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8018c50:	9304      	str	r3, [sp, #16]
 8018c52:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018c56:	9303      	str	r3, [sp, #12]
 8018c58:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018c5c:	9302      	str	r3, [sp, #8]
 8018c5e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018c62:	e9cd 7300 	strd	r7, r3, [sp]
 8018c66:	4633      	mov	r3, r6
 8018c68:	f7ff ff1c 	bl	8018aa4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8018c6c:	b00a      	add	sp, #40	; 0x28
 8018c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c72:	bf00      	nop
 8018c74:	2000b416 	.word	0x2000b416

08018c78 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8018c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c7c:	b08b      	sub	sp, #44	; 0x2c
 8018c7e:	469b      	mov	fp, r3
 8018c80:	4604      	mov	r4, r0
 8018c82:	4692      	mov	sl, r2
 8018c84:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8018c88:	2600      	movs	r6, #0
 8018c8a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8018c8e:	4689      	mov	r9, r1
 8018c90:	2fff      	cmp	r7, #255	; 0xff
 8018c92:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8018c96:	9608      	str	r6, [sp, #32]
 8018c98:	bf14      	ite	ne
 8018c9a:	2308      	movne	r3, #8
 8018c9c:	2302      	moveq	r3, #2
 8018c9e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8018ca2:	f7ff fe8d 	bl	80189c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018ca6:	465a      	mov	r2, fp
 8018ca8:	4603      	mov	r3, r0
 8018caa:	4651      	mov	r1, sl
 8018cac:	4620      	mov	r0, r4
 8018cae:	e9cd 8500 	strd	r8, r5, [sp]
 8018cb2:	f7ff fee7 	bl	8018a84 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018cb6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018cba:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8018cbe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018cc2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018cc6:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8018cca:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018cce:	6823      	ldr	r3, [r4, #0]
 8018cd0:	9d02      	ldr	r5, [sp, #8]
 8018cd2:	9005      	str	r0, [sp, #20]
 8018cd4:	4620      	mov	r0, r4
 8018cd6:	f8ad 601c 	strh.w	r6, [sp, #28]
 8018cda:	f8ad 801e 	strh.w	r8, [sp, #30]
 8018cde:	f8cd 9020 	str.w	r9, [sp, #32]
 8018ce2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8018ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ce8:	4798      	blx	r3
 8018cea:	4228      	tst	r0, r5
 8018cec:	d106      	bne.n	8018cfc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8018cee:	4b07      	ldr	r3, [pc, #28]	; (8018d0c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8018cf0:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8018cf4:	4a06      	ldr	r2, [pc, #24]	; (8018d10 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8018cf6:	4807      	ldr	r0, [pc, #28]	; (8018d14 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8018cf8:	f00f fbc4 	bl	8028484 <__assert_func>
 8018cfc:	6860      	ldr	r0, [r4, #4]
 8018cfe:	a902      	add	r1, sp, #8
 8018d00:	6803      	ldr	r3, [r0, #0]
 8018d02:	685b      	ldr	r3, [r3, #4]
 8018d04:	4798      	blx	r3
 8018d06:	b00b      	add	sp, #44	; 0x2c
 8018d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d0c:	0802bd5a 	.word	0x0802bd5a
 8018d10:	0802c09f 	.word	0x0802c09f
 8018d14:	0802bca6 	.word	0x0802bca6

08018d18 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018d18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018d1c:	461f      	mov	r7, r3
 8018d1e:	4b0b      	ldr	r3, [pc, #44]	; (8018d4c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018d20:	460d      	mov	r5, r1
 8018d22:	4616      	mov	r6, r2
 8018d24:	f8b3 8000 	ldrh.w	r8, [r3]
 8018d28:	4604      	mov	r4, r0
 8018d2a:	f7f6 ff23 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 8018d2e:	6803      	ldr	r3, [r0, #0]
 8018d30:	6a1b      	ldr	r3, [r3, #32]
 8018d32:	4798      	blx	r3
 8018d34:	463b      	mov	r3, r7
 8018d36:	4632      	mov	r2, r6
 8018d38:	4629      	mov	r1, r5
 8018d3a:	e9cd 8000 	strd	r8, r0, [sp]
 8018d3e:	4620      	mov	r0, r4
 8018d40:	f7ff fea0 	bl	8018a84 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018d44:	b002      	add	sp, #8
 8018d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d4a:	bf00      	nop
 8018d4c:	2000b416 	.word	0x2000b416

08018d50 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8018d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d54:	4698      	mov	r8, r3
 8018d56:	b088      	sub	sp, #32
 8018d58:	2300      	movs	r3, #0
 8018d5a:	4617      	mov	r7, r2
 8018d5c:	4604      	mov	r4, r0
 8018d5e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8018d62:	9306      	str	r3, [sp, #24]
 8018d64:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018d68:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8018d6c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8018d70:	f8ad 5012 	strh.w	r5, [sp, #18]
 8018d74:	e9cd 3100 	strd	r3, r1, [sp]
 8018d78:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018d7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018d80:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018d84:	f88d 301c 	strb.w	r3, [sp, #28]
 8018d88:	f7ff fe1a 	bl	80189c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018d8c:	4642      	mov	r2, r8
 8018d8e:	4603      	mov	r3, r0
 8018d90:	4639      	mov	r1, r7
 8018d92:	4620      	mov	r0, r4
 8018d94:	f7ff ffc0 	bl	8018d18 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018d98:	4b16      	ldr	r3, [pc, #88]	; (8018df4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8018d9a:	9003      	str	r0, [sp, #12]
 8018d9c:	881b      	ldrh	r3, [r3, #0]
 8018d9e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018da2:	f7f6 fee7 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 8018da6:	6803      	ldr	r3, [r0, #0]
 8018da8:	6a1b      	ldr	r3, [r3, #32]
 8018daa:	4798      	blx	r3
 8018dac:	f88d 001e 	strb.w	r0, [sp, #30]
 8018db0:	f88d 001d 	strb.w	r0, [sp, #29]
 8018db4:	b106      	cbz	r6, 8018db8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8018db6:	b935      	cbnz	r5, 8018dc6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8018db8:	4b0f      	ldr	r3, [pc, #60]	; (8018df8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8018dba:	f240 11cd 	movw	r1, #461	; 0x1cd
 8018dbe:	4a0f      	ldr	r2, [pc, #60]	; (8018dfc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8018dc0:	480f      	ldr	r0, [pc, #60]	; (8018e00 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8018dc2:	f00f fb5f 	bl	8028484 <__assert_func>
 8018dc6:	6823      	ldr	r3, [r4, #0]
 8018dc8:	4620      	mov	r0, r4
 8018dca:	9d00      	ldr	r5, [sp, #0]
 8018dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018dce:	4798      	blx	r3
 8018dd0:	4228      	tst	r0, r5
 8018dd2:	d104      	bne.n	8018dde <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8018dd4:	4b0b      	ldr	r3, [pc, #44]	; (8018e04 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8018dd6:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8018dda:	4a08      	ldr	r2, [pc, #32]	; (8018dfc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8018ddc:	e7f0      	b.n	8018dc0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8018dde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018de0:	4669      	mov	r1, sp
 8018de2:	6860      	ldr	r0, [r4, #4]
 8018de4:	9306      	str	r3, [sp, #24]
 8018de6:	6803      	ldr	r3, [r0, #0]
 8018de8:	685b      	ldr	r3, [r3, #4]
 8018dea:	4798      	blx	r3
 8018dec:	b008      	add	sp, #32
 8018dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018df2:	bf00      	nop
 8018df4:	2000b416 	.word	0x2000b416
 8018df8:	0802bd22 	.word	0x0802bd22
 8018dfc:	0802be88 	.word	0x0802be88
 8018e00:	0802bca6 	.word	0x0802bca6
 8018e04:	0802bd5a 	.word	0x0802bd5a

08018e08 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8018e08:	b570      	push	{r4, r5, r6, lr}
 8018e0a:	b08a      	sub	sp, #40	; 0x28
 8018e0c:	4604      	mov	r4, r0
 8018e0e:	466b      	mov	r3, sp
 8018e10:	e883 0006 	stmia.w	r3, {r1, r2}
 8018e14:	4b1f      	ldr	r3, [pc, #124]	; (8018e94 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8018e16:	781b      	ldrb	r3, [r3, #0]
 8018e18:	b933      	cbnz	r3, 8018e28 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8018e1a:	4b1f      	ldr	r3, [pc, #124]	; (8018e98 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8018e1c:	f240 11f9 	movw	r1, #505	; 0x1f9
 8018e20:	4a1e      	ldr	r2, [pc, #120]	; (8018e9c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8018e22:	481f      	ldr	r0, [pc, #124]	; (8018ea0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8018e24:	f00f fb2e 	bl	8028484 <__assert_func>
 8018e28:	2300      	movs	r3, #0
 8018e2a:	f8bd 5000 	ldrh.w	r5, [sp]
 8018e2e:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8018e32:	9308      	str	r3, [sp, #32]
 8018e34:	2301      	movs	r3, #1
 8018e36:	9302      	str	r3, [sp, #8]
 8018e38:	6803      	ldr	r3, [r0, #0]
 8018e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e3c:	4798      	blx	r3
 8018e3e:	4632      	mov	r2, r6
 8018e40:	4629      	mov	r1, r5
 8018e42:	4603      	mov	r3, r0
 8018e44:	4620      	mov	r0, r4
 8018e46:	f7ff ff67 	bl	8018d18 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018e4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018e4c:	9003      	str	r0, [sp, #12]
 8018e4e:	9305      	str	r3, [sp, #20]
 8018e50:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018e54:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018e58:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018e5c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018e60:	4b10      	ldr	r3, [pc, #64]	; (8018ea4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8018e62:	881b      	ldrh	r3, [r3, #0]
 8018e64:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018e68:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018e6c:	f7f6 fe82 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 8018e70:	6803      	ldr	r3, [r0, #0]
 8018e72:	6a1b      	ldr	r3, [r3, #32]
 8018e74:	4798      	blx	r3
 8018e76:	23ff      	movs	r3, #255	; 0xff
 8018e78:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8018e7c:	a902      	add	r1, sp, #8
 8018e7e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8018e82:	6860      	ldr	r0, [r4, #4]
 8018e84:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018e88:	6803      	ldr	r3, [r0, #0]
 8018e8a:	685b      	ldr	r3, [r3, #4]
 8018e8c:	4798      	blx	r3
 8018e8e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8018e90:	b00a      	add	sp, #40	; 0x28
 8018e92:	bd70      	pop	{r4, r5, r6, pc}
 8018e94:	2000b41b 	.word	0x2000b41b
 8018e98:	0802bbf3 	.word	0x0802bbf3
 8018e9c:	0802bf2c 	.word	0x0802bf2c
 8018ea0:	0802bca6 	.word	0x0802bca6
 8018ea4:	2000b416 	.word	0x2000b416

08018ea8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8018ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018eaa:	b08b      	sub	sp, #44	; 0x2c
 8018eac:	4604      	mov	r4, r0
 8018eae:	466d      	mov	r5, sp
 8018eb0:	e885 0006 	stmia.w	r5, {r1, r2}
 8018eb4:	461d      	mov	r5, r3
 8018eb6:	2300      	movs	r3, #0
 8018eb8:	f8bd 6000 	ldrh.w	r6, [sp]
 8018ebc:	9308      	str	r3, [sp, #32]
 8018ebe:	2301      	movs	r3, #1
 8018ec0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8018ec4:	9302      	str	r3, [sp, #8]
 8018ec6:	6803      	ldr	r3, [r0, #0]
 8018ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018eca:	4798      	blx	r3
 8018ecc:	463a      	mov	r2, r7
 8018ece:	4631      	mov	r1, r6
 8018ed0:	4603      	mov	r3, r0
 8018ed2:	4620      	mov	r0, r4
 8018ed4:	f7ff ff20 	bl	8018d18 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018ed8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018edc:	9003      	str	r0, [sp, #12]
 8018ede:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018ee2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018ee6:	9505      	str	r5, [sp, #20]
 8018ee8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018eec:	4b0d      	ldr	r3, [pc, #52]	; (8018f24 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8018eee:	881b      	ldrh	r3, [r3, #0]
 8018ef0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018ef6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018efa:	f7f6 fe3b 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 8018efe:	6803      	ldr	r3, [r0, #0]
 8018f00:	6a1b      	ldr	r3, [r3, #32]
 8018f02:	4798      	blx	r3
 8018f04:	23ff      	movs	r3, #255	; 0xff
 8018f06:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8018f0a:	a902      	add	r1, sp, #8
 8018f0c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8018f10:	6860      	ldr	r0, [r4, #4]
 8018f12:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018f16:	6803      	ldr	r3, [r0, #0]
 8018f18:	685b      	ldr	r3, [r3, #4]
 8018f1a:	4798      	blx	r3
 8018f1c:	4628      	mov	r0, r5
 8018f1e:	b00b      	add	sp, #44	; 0x2c
 8018f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f22:	bf00      	nop
 8018f24:	2000b416 	.word	0x2000b416

08018f28 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8018f28:	b570      	push	{r4, r5, r6, lr}
 8018f2a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8018f2e:	4604      	mov	r4, r0
 8018f30:	b19b      	cbz	r3, 8018f5a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8018f32:	2002      	movs	r0, #2
 8018f34:	f7fc ff3c 	bl	8015db0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8018f38:	2300      	movs	r3, #0
 8018f3a:	4620      	mov	r0, r4
 8018f3c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018f40:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8018f44:	6823      	ldr	r3, [r4, #0]
 8018f46:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8018f4a:	f7ff fd39 	bl	80189c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018f4e:	4601      	mov	r1, r0
 8018f50:	4620      	mov	r0, r4
 8018f52:	462b      	mov	r3, r5
 8018f54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018f58:	4718      	bx	r3
 8018f5a:	bd70      	pop	{r4, r5, r6, pc}

08018f5c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8018f5c:	4770      	bx	lr

08018f5e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8018f5e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8018f62:	1a13      	subs	r3, r2, r0
 8018f64:	4258      	negs	r0, r3
 8018f66:	4158      	adcs	r0, r3
 8018f68:	4770      	bx	lr

08018f6a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8018f6a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8018f6e:	1a9b      	subs	r3, r3, r2
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	bfdc      	itt	le
 8018f74:	6882      	ldrle	r2, [r0, #8]
 8018f76:	189b      	addle	r3, r3, r2
 8018f78:	2b01      	cmp	r3, #1
 8018f7a:	bfcc      	ite	gt
 8018f7c:	2000      	movgt	r0, #0
 8018f7e:	2001      	movle	r0, #1
 8018f80:	4770      	bx	lr

08018f82 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8018f82:	6902      	ldr	r2, [r0, #16]
 8018f84:	6840      	ldr	r0, [r0, #4]
 8018f86:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8018f8a:	4770      	bx	lr

08018f8c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8018f8c:	6803      	ldr	r3, [r0, #0]
 8018f8e:	691b      	ldr	r3, [r3, #16]
 8018f90:	4718      	bx	r3

08018f92 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8018f92:	4770      	bx	lr

08018f94 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8018f94:	4770      	bx	lr
	...

08018f98 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8018f98:	2301      	movs	r3, #1
 8018f9a:	b570      	push	{r4, r5, r6, lr}
 8018f9c:	7203      	strb	r3, [r0, #8]
 8018f9e:	4604      	mov	r4, r0
 8018fa0:	6840      	ldr	r0, [r0, #4]
 8018fa2:	6803      	ldr	r3, [r0, #0]
 8018fa4:	699b      	ldr	r3, [r3, #24]
 8018fa6:	4798      	blx	r3
 8018fa8:	6803      	ldr	r3, [r0, #0]
 8018faa:	4605      	mov	r5, r0
 8018fac:	2b08      	cmp	r3, #8
 8018fae:	d01e      	beq.n	8018fee <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8018fb0:	d80b      	bhi.n	8018fca <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018fb2:	2b02      	cmp	r3, #2
 8018fb4:	d027      	beq.n	8019006 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8018fb6:	2b04      	cmp	r3, #4
 8018fb8:	d011      	beq.n	8018fde <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8018fba:	2b01      	cmp	r3, #1
 8018fbc:	d028      	beq.n	8019010 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018fbe:	4b17      	ldr	r3, [pc, #92]	; (801901c <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8018fc0:	218b      	movs	r1, #139	; 0x8b
 8018fc2:	4a17      	ldr	r2, [pc, #92]	; (8019020 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8018fc4:	4817      	ldr	r0, [pc, #92]	; (8019024 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8018fc6:	f00f fa5d 	bl	8028484 <__assert_func>
 8018fca:	2b40      	cmp	r3, #64	; 0x40
 8018fcc:	d020      	beq.n	8019010 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018fce:	d801      	bhi.n	8018fd4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8018fd0:	2b20      	cmp	r3, #32
 8018fd2:	e7f3      	b.n	8018fbc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8018fd4:	2b80      	cmp	r3, #128	; 0x80
 8018fd6:	d01b      	beq.n	8019010 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018fdc:	e7ee      	b.n	8018fbc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8018fde:	6823      	ldr	r3, [r4, #0]
 8018fe0:	7f01      	ldrb	r1, [r0, #28]
 8018fe2:	4620      	mov	r0, r4
 8018fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018fe6:	4798      	blx	r3
 8018fe8:	6823      	ldr	r3, [r4, #0]
 8018fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018fec:	e006      	b.n	8018ffc <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8018fee:	6823      	ldr	r3, [r4, #0]
 8018ff0:	7f01      	ldrb	r1, [r0, #28]
 8018ff2:	4620      	mov	r0, r4
 8018ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ff6:	4798      	blx	r3
 8018ff8:	6823      	ldr	r3, [r4, #0]
 8018ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018ffc:	4629      	mov	r1, r5
 8018ffe:	4620      	mov	r0, r4
 8019000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019004:	4718      	bx	r3
 8019006:	6823      	ldr	r3, [r4, #0]
 8019008:	4620      	mov	r0, r4
 801900a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801900c:	4798      	blx	r3
 801900e:	e7f3      	b.n	8018ff8 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8019010:	6823      	ldr	r3, [r4, #0]
 8019012:	4620      	mov	r0, r4
 8019014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019016:	4798      	blx	r3
 8019018:	e7e6      	b.n	8018fe8 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801901a:	bf00      	nop
 801901c:	0802c17d 	.word	0x0802c17d
 8019020:	0802c28c 	.word	0x0802c28c
 8019024:	0802c1a2 	.word	0x0802c1a2

08019028 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8019028:	b570      	push	{r4, r5, r6, lr}
 801902a:	4604      	mov	r4, r0
 801902c:	460e      	mov	r6, r1
 801902e:	6860      	ldr	r0, [r4, #4]
 8019030:	6803      	ldr	r3, [r0, #0]
 8019032:	685b      	ldr	r3, [r3, #4]
 8019034:	4798      	blx	r3
 8019036:	2800      	cmp	r0, #0
 8019038:	d1f9      	bne.n	801902e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801903a:	4d0b      	ldr	r5, [pc, #44]	; (8019068 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801903c:	6828      	ldr	r0, [r5, #0]
 801903e:	6803      	ldr	r3, [r0, #0]
 8019040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019042:	4798      	blx	r3
 8019044:	f7fd f98a 	bl	801635c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8019048:	6860      	ldr	r0, [r4, #4]
 801904a:	4631      	mov	r1, r6
 801904c:	6803      	ldr	r3, [r0, #0]
 801904e:	689b      	ldr	r3, [r3, #8]
 8019050:	4798      	blx	r3
 8019052:	6823      	ldr	r3, [r4, #0]
 8019054:	4620      	mov	r0, r4
 8019056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019058:	4798      	blx	r3
 801905a:	6828      	ldr	r0, [r5, #0]
 801905c:	6803      	ldr	r3, [r0, #0]
 801905e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019064:	4718      	bx	r3
 8019066:	bf00      	nop
 8019068:	2000b41c 	.word	0x2000b41c

0801906c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801906c:	b508      	push	{r3, lr}
 801906e:	f7fd f95b 	bl	8016328 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019072:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019076:	f7fd b965 	b.w	8016344 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801907a <_ZN8touchgfx13DMA_Interface5startEv>:
 801907a:	b510      	push	{r4, lr}
 801907c:	4604      	mov	r4, r0
 801907e:	6840      	ldr	r0, [r0, #4]
 8019080:	6803      	ldr	r3, [r0, #0]
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	4798      	blx	r3
 8019086:	b948      	cbnz	r0, 801909c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019088:	7a63      	ldrb	r3, [r4, #9]
 801908a:	b13b      	cbz	r3, 801909c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801908c:	7a23      	ldrb	r3, [r4, #8]
 801908e:	b92b      	cbnz	r3, 801909c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019090:	6823      	ldr	r3, [r4, #0]
 8019092:	4620      	mov	r0, r4
 8019094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801909a:	4718      	bx	r3
 801909c:	bd10      	pop	{r4, pc}
	...

080190a0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80190a0:	b510      	push	{r4, lr}
 80190a2:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 80190a6:	1b12      	subs	r2, r2, r4
 80190a8:	2a00      	cmp	r2, #0
 80190aa:	bfdc      	itt	le
 80190ac:	6883      	ldrle	r3, [r0, #8]
 80190ae:	18d2      	addle	r2, r2, r3
 80190b0:	2a01      	cmp	r2, #1
 80190b2:	dd18      	ble.n	80190e6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80190b4:	6843      	ldr	r3, [r0, #4]
 80190b6:	f101 021c 	add.w	r2, r1, #28
 80190ba:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80190be:	f851 4b04 	ldr.w	r4, [r1], #4
 80190c2:	4291      	cmp	r1, r2
 80190c4:	f843 4b04 	str.w	r4, [r3], #4
 80190c8:	d1f9      	bne.n	80190be <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80190ca:	880a      	ldrh	r2, [r1, #0]
 80190cc:	801a      	strh	r2, [r3, #0]
 80190ce:	788a      	ldrb	r2, [r1, #2]
 80190d0:	709a      	strb	r2, [r3, #2]
 80190d2:	68c3      	ldr	r3, [r0, #12]
 80190d4:	6882      	ldr	r2, [r0, #8]
 80190d6:	f3bf 8f5b 	dmb	ish
 80190da:	3301      	adds	r3, #1
 80190dc:	429a      	cmp	r2, r3
 80190de:	bfd8      	it	le
 80190e0:	1a9b      	suble	r3, r3, r2
 80190e2:	60c3      	str	r3, [r0, #12]
 80190e4:	bd10      	pop	{r4, pc}
 80190e6:	4b03      	ldr	r3, [pc, #12]	; (80190f4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80190e8:	2139      	movs	r1, #57	; 0x39
 80190ea:	4a03      	ldr	r2, [pc, #12]	; (80190f8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80190ec:	4803      	ldr	r0, [pc, #12]	; (80190fc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80190ee:	f00f f9c9 	bl	8028484 <__assert_func>
 80190f2:	bf00      	nop
 80190f4:	0802c1c8 	.word	0x0802c1c8
 80190f8:	0802c2bc 	.word	0x0802c2bc
 80190fc:	0802c1a2 	.word	0x0802c1a2

08019100 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8019100:	b510      	push	{r4, lr}
 8019102:	6803      	ldr	r3, [r0, #0]
 8019104:	4604      	mov	r4, r0
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	4798      	blx	r3
 801910a:	b128      	cbz	r0, 8019118 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801910c:	4b07      	ldr	r3, [pc, #28]	; (801912c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801910e:	213f      	movs	r1, #63	; 0x3f
 8019110:	4a07      	ldr	r2, [pc, #28]	; (8019130 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8019112:	4808      	ldr	r0, [pc, #32]	; (8019134 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8019114:	f00f f9b6 	bl	8028484 <__assert_func>
 8019118:	6923      	ldr	r3, [r4, #16]
 801911a:	68a2      	ldr	r2, [r4, #8]
 801911c:	f3bf 8f5b 	dmb	ish
 8019120:	3301      	adds	r3, #1
 8019122:	429a      	cmp	r2, r3
 8019124:	bfd8      	it	le
 8019126:	1a9b      	suble	r3, r3, r2
 8019128:	6123      	str	r3, [r4, #16]
 801912a:	bd10      	pop	{r4, pc}
 801912c:	0802c1eb 	.word	0x0802c1eb
 8019130:	0802c30a 	.word	0x0802c30a
 8019134:	0802c1a2 	.word	0x0802c1a2

08019138 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019138:	b570      	push	{r4, r5, r6, lr}
 801913a:	4604      	mov	r4, r0
 801913c:	6840      	ldr	r0, [r0, #4]
 801913e:	6803      	ldr	r3, [r0, #0]
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	4798      	blx	r3
 8019144:	4605      	mov	r5, r0
 8019146:	b930      	cbnz	r0, 8019156 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019148:	7a23      	ldrb	r3, [r4, #8]
 801914a:	b123      	cbz	r3, 8019156 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801914c:	6860      	ldr	r0, [r4, #4]
 801914e:	6803      	ldr	r3, [r0, #0]
 8019150:	695b      	ldr	r3, [r3, #20]
 8019152:	4798      	blx	r3
 8019154:	7225      	strb	r5, [r4, #8]
 8019156:	6860      	ldr	r0, [r4, #4]
 8019158:	6803      	ldr	r3, [r0, #0]
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	4798      	blx	r3
 801915e:	b928      	cbnz	r0, 801916c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8019160:	6823      	ldr	r3, [r4, #0]
 8019162:	4620      	mov	r0, r4
 8019164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801916a:	4718      	bx	r3
 801916c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019170:	f7fd b900 	b.w	8016374 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08019174 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8019174:	b510      	push	{r4, lr}
 8019176:	6082      	str	r2, [r0, #8]
 8019178:	2200      	movs	r2, #0
 801917a:	4c03      	ldr	r4, [pc, #12]	; (8019188 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801917c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019180:	e9c0 4100 	strd	r4, r1, [r0]
 8019184:	bd10      	pop	{r4, pc}
 8019186:	bf00      	nop
 8019188:	0802c270 	.word	0x0802c270

0801918c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801918c:	6840      	ldr	r0, [r0, #4]
 801918e:	6803      	ldr	r3, [r0, #0]
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	4718      	bx	r3

08019194 <_ZNK8touchgfx13AbstractShape14getMinimalRectEv>:
 8019194:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8019198:	4602      	mov	r2, r0
 801919a:	cb03      	ldmia	r3!, {r0, r1}
 801919c:	6010      	str	r0, [r2, #0]
 801919e:	4610      	mov	r0, r2
 80191a0:	6051      	str	r1, [r2, #4]
 80191a2:	4770      	bx	lr

080191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80191a4:	b507      	push	{r0, r1, r2, lr}
 80191a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80191aa:	ab01      	add	r3, sp, #4
 80191ac:	6809      	ldr	r1, [r1, #0]
 80191ae:	6800      	ldr	r0, [r0, #0]
 80191b0:	f003 fd78 	bl	801cca4 <_ZN8touchgfx6muldivElllRl>
 80191b4:	b003      	add	sp, #12
 80191b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080191bc <_ZN8touchgfx7CWRUtil4sineEi>:
 80191bc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80191c0:	fb90 f3f2 	sdiv	r3, r0, r2
 80191c4:	fb03 0312 	mls	r3, r3, r2, r0
 80191c8:	4413      	add	r3, r2
 80191ca:	fb93 f0f2 	sdiv	r0, r3, r2
 80191ce:	fb02 3010 	mls	r0, r2, r0, r3
 80191d2:	4b0a      	ldr	r3, [pc, #40]	; (80191fc <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 80191d4:	285a      	cmp	r0, #90	; 0x5a
 80191d6:	dc02      	bgt.n	80191de <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 80191d8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80191dc:	4770      	bx	lr
 80191de:	28b4      	cmp	r0, #180	; 0xb4
 80191e0:	dc02      	bgt.n	80191e8 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 80191e2:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 80191e6:	e7f7      	b.n	80191d8 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 80191e8:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 80191ec:	bfd4      	ite	le
 80191ee:	38b4      	suble	r0, #180	; 0xb4
 80191f0:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 80191f4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80191f8:	4240      	negs	r0, r0
 80191fa:	4770      	bx	lr
 80191fc:	0802c33a 	.word	0x0802c33a

08019200 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8019200:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8019204:	fb90 f3f2 	sdiv	r3, r0, r2
 8019208:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801920a:	fb03 0012 	mls	r0, r3, r2, r0
 801920e:	4410      	add	r0, r2
 8019210:	fb90 f4f2 	sdiv	r4, r0, r2
 8019214:	fb02 0414 	mls	r4, r2, r4, r0
 8019218:	f004 061f 	and.w	r6, r4, #31
 801921c:	1164      	asrs	r4, r4, #5
 801921e:	4620      	mov	r0, r4
 8019220:	f7ff ffcc 	bl	80191bc <_ZN8touchgfx7CWRUtil4sineEi>
 8019224:	4605      	mov	r5, r0
 8019226:	b90e      	cbnz	r6, 801922c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 8019228:	b002      	add	sp, #8
 801922a:	bd70      	pop	{r4, r5, r6, pc}
 801922c:	1c60      	adds	r0, r4, #1
 801922e:	f7ff ffc5 	bl	80191bc <_ZN8touchgfx7CWRUtil4sineEi>
 8019232:	ab01      	add	r3, sp, #4
 8019234:	2220      	movs	r2, #32
 8019236:	4631      	mov	r1, r6
 8019238:	1b40      	subs	r0, r0, r5
 801923a:	f003 fd33 	bl	801cca4 <_ZN8touchgfx6muldivElllRl>
 801923e:	4428      	add	r0, r5
 8019240:	e7f2      	b.n	8019228 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

08019242 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>:
 8019242:	b507      	push	{r0, r1, r2, lr}
 8019244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019248:	ab01      	add	r3, sp, #4
 801924a:	0140      	lsls	r0, r0, #5
 801924c:	f003 fd2a 	bl	801cca4 <_ZN8touchgfx6muldivElllRl>
 8019250:	2320      	movs	r3, #32
 8019252:	fb90 f0f3 	sdiv	r0, r0, r3
 8019256:	b003      	add	sp, #12
 8019258:	f85d fb04 	ldr.w	pc, [sp], #4

0801925c <_ZN8touchgfx13AbstractShapeC1Ev>:
 801925c:	b510      	push	{r4, lr}
 801925e:	4604      	mov	r4, r0
 8019260:	f000 fe68 	bl	8019f34 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8019264:	4b07      	ldr	r3, [pc, #28]	; (8019284 <_ZN8touchgfx13AbstractShapeC1Ev+0x28>)
 8019266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801926a:	4620      	mov	r0, r4
 801926c:	6023      	str	r3, [r4, #0]
 801926e:	2300      	movs	r3, #0
 8019270:	e9c4 220f 	strd	r2, r2, [r4, #60]	; 0x3c
 8019274:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8019278:	63a3      	str	r3, [r4, #56]	; 0x38
 801927a:	60a3      	str	r3, [r4, #8]
 801927c:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8019280:	bd10      	pop	{r4, pc}
 8019282:	bf00      	nop
 8019284:	0802c3f8 	.word	0x0802c3f8

08019288 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>:
 8019288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801928c:	2500      	movs	r5, #0
 801928e:	6803      	ldr	r3, [r0, #0]
 8019290:	b087      	sub	sp, #28
 8019292:	4604      	mov	r4, r0
 8019294:	462e      	mov	r6, r5
 8019296:	46a8      	mov	r8, r5
 8019298:	462f      	mov	r7, r5
 801929a:	46a9      	mov	r9, r5
 801929c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801929e:	4798      	blx	r3
 80192a0:	9000      	str	r0, [sp, #0]
 80192a2:	9b00      	ldr	r3, [sp, #0]
 80192a4:	429d      	cmp	r5, r3
 80192a6:	da7f      	bge.n	80193a8 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x120>
 80192a8:	6823      	ldr	r3, [r4, #0]
 80192aa:	4629      	mov	r1, r5
 80192ac:	4620      	mov	r0, r4
 80192ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80192b2:	4798      	blx	r3
 80192b4:	6823      	ldr	r3, [r4, #0]
 80192b6:	4682      	mov	sl, r0
 80192b8:	4629      	mov	r1, r5
 80192ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80192be:	4620      	mov	r0, r4
 80192c0:	4798      	blx	r3
 80192c2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80192c4:	4683      	mov	fp, r0
 80192c6:	4650      	mov	r0, sl
 80192c8:	f7ff ffbb 	bl	8019242 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 80192cc:	9002      	str	r0, [sp, #8]
 80192ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80192d0:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 80192d4:	f7ff ff94 	bl	8019200 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80192d8:	a903      	add	r1, sp, #12
 80192da:	9003      	str	r0, [sp, #12]
 80192dc:	a802      	add	r0, sp, #8
 80192de:	f7ff ff61 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80192e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80192e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80192e6:	4402      	add	r2, r0
 80192e8:	4658      	mov	r0, fp
 80192ea:	9201      	str	r2, [sp, #4]
 80192ec:	f7ff ffa9 	bl	8019242 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 80192f0:	9004      	str	r0, [sp, #16]
 80192f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80192f4:	f7ff ff84 	bl	8019200 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80192f8:	a905      	add	r1, sp, #20
 80192fa:	9005      	str	r0, [sp, #20]
 80192fc:	a804      	add	r0, sp, #16
 80192fe:	f7ff ff51 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019302:	9a01      	ldr	r2, [sp, #4]
 8019304:	1a12      	subs	r2, r2, r0
 8019306:	b125      	cbz	r5, 8019312 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x8a>
 8019308:	2320      	movs	r3, #32
 801930a:	fb92 f3f3 	sdiv	r3, r2, r3
 801930e:	429f      	cmp	r7, r3
 8019310:	da03      	bge.n	801931a <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x92>
 8019312:	2720      	movs	r7, #32
 8019314:	fb92 f7f7 	sdiv	r7, r2, r7
 8019318:	b125      	cbz	r5, 8019324 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x9c>
 801931a:	2320      	movs	r3, #32
 801931c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019320:	4599      	cmp	r9, r3
 8019322:	dd03      	ble.n	801932c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xa4>
 8019324:	f04f 0920 	mov.w	r9, #32
 8019328:	fb92 f9f9 	sdiv	r9, r2, r9
 801932c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801932e:	4658      	mov	r0, fp
 8019330:	9201      	str	r2, [sp, #4]
 8019332:	f7ff ff86 	bl	8019242 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8019336:	9002      	str	r0, [sp, #8]
 8019338:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801933a:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 801933e:	f7ff ff5f 	bl	8019200 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019342:	a903      	add	r1, sp, #12
 8019344:	9003      	str	r0, [sp, #12]
 8019346:	a802      	add	r0, sp, #8
 8019348:	f7ff ff2c 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801934c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801934e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8019350:	eb00 0b03 	add.w	fp, r0, r3
 8019354:	4650      	mov	r0, sl
 8019356:	f7ff ff74 	bl	8019242 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 801935a:	9004      	str	r0, [sp, #16]
 801935c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801935e:	f7ff ff4f 	bl	8019200 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019362:	a905      	add	r1, sp, #20
 8019364:	9005      	str	r0, [sp, #20]
 8019366:	a804      	add	r0, sp, #16
 8019368:	f7ff ff1c 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801936c:	9a01      	ldr	r2, [sp, #4]
 801936e:	eb00 030b 	add.w	r3, r0, fp
 8019372:	b125      	cbz	r5, 801937e <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xf6>
 8019374:	2120      	movs	r1, #32
 8019376:	fb93 f1f1 	sdiv	r1, r3, r1
 801937a:	428e      	cmp	r6, r1
 801937c:	da03      	bge.n	8019386 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xfe>
 801937e:	2620      	movs	r6, #32
 8019380:	fb93 f6f6 	sdiv	r6, r3, r6
 8019384:	b125      	cbz	r5, 8019390 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x108>
 8019386:	2120      	movs	r1, #32
 8019388:	fb93 f1f1 	sdiv	r1, r3, r1
 801938c:	4588      	cmp	r8, r1
 801938e:	dd03      	ble.n	8019398 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x110>
 8019390:	f04f 0820 	mov.w	r8, #32
 8019394:	fb93 f8f8 	sdiv	r8, r3, r8
 8019398:	6821      	ldr	r1, [r4, #0]
 801939a:	4620      	mov	r0, r4
 801939c:	f8d1 a088 	ldr.w	sl, [r1, #136]	; 0x88
 80193a0:	4629      	mov	r1, r5
 80193a2:	47d0      	blx	sl
 80193a4:	3501      	adds	r5, #1
 80193a6:	e77c      	b.n	80192a2 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x1a>
 80193a8:	3701      	adds	r7, #1
 80193aa:	3601      	adds	r6, #1
 80193ac:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
 80193b0:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
 80193b4:	eba7 0909 	sub.w	r9, r7, r9
 80193b8:	eba6 0808 	sub.w	r8, r6, r8
 80193bc:	f8a4 9048 	strh.w	r9, [r4, #72]	; 0x48
 80193c0:	f8a4 804a 	strh.w	r8, [r4, #74]	; 0x4a
 80193c4:	b007      	add	sp, #28
 80193c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080193ca <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE>:
 80193ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193cc:	b0b1      	sub	sp, #196	; 0xc4
 80193ce:	4604      	mov	r4, r0
 80193d0:	460a      	mov	r2, r1
 80193d2:	4601      	mov	r1, r0
 80193d4:	a801      	add	r0, sp, #4
 80193d6:	f00d fc7f 	bl	8026cd8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80193da:	6823      	ldr	r3, [r4, #0]
 80193dc:	4620      	mov	r0, r4
 80193de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80193e0:	4798      	blx	r3
 80193e2:	4606      	mov	r6, r0
 80193e4:	b390      	cbz	r0, 801944c <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x82>
 80193e6:	6823      	ldr	r3, [r4, #0]
 80193e8:	2100      	movs	r1, #0
 80193ea:	4620      	mov	r0, r4
 80193ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80193f0:	4798      	blx	r3
 80193f2:	6823      	ldr	r3, [r4, #0]
 80193f4:	4605      	mov	r5, r0
 80193f6:	2100      	movs	r1, #0
 80193f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80193fc:	4620      	mov	r0, r4
 80193fe:	4798      	blx	r3
 8019400:	4629      	mov	r1, r5
 8019402:	2501      	movs	r5, #1
 8019404:	4602      	mov	r2, r0
 8019406:	a801      	add	r0, sp, #4
 8019408:	f00d fe2f 	bl	802706a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801940c:	42b5      	cmp	r5, r6
 801940e:	da13      	bge.n	8019438 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x6e>
 8019410:	6823      	ldr	r3, [r4, #0]
 8019412:	4629      	mov	r1, r5
 8019414:	4620      	mov	r0, r4
 8019416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801941a:	4798      	blx	r3
 801941c:	6823      	ldr	r3, [r4, #0]
 801941e:	4607      	mov	r7, r0
 8019420:	4629      	mov	r1, r5
 8019422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019426:	4620      	mov	r0, r4
 8019428:	4798      	blx	r3
 801942a:	4639      	mov	r1, r7
 801942c:	4602      	mov	r2, r0
 801942e:	a801      	add	r0, sp, #4
 8019430:	f00d fdaa 	bl	8026f88 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8019434:	3501      	adds	r5, #1
 8019436:	e7e9      	b.n	801940c <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x42>
 8019438:	a801      	add	r0, sp, #4
 801943a:	f00d ff1a 	bl	8027272 <_ZN8touchgfx6Canvas6renderEv>
 801943e:	4604      	mov	r4, r0
 8019440:	a801      	add	r0, sp, #4
 8019442:	f00d ff53 	bl	80272ec <_ZN8touchgfx6CanvasD1Ev>
 8019446:	4620      	mov	r0, r4
 8019448:	b031      	add	sp, #196	; 0xc4
 801944a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801944c:	2401      	movs	r4, #1
 801944e:	e7f7      	b.n	8019440 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x76>

08019450 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8019450:	2001      	movs	r0, #1
 8019452:	4770      	bx	lr

08019454 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8019454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019458:	460d      	mov	r5, r1
 801945a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801945e:	b085      	sub	sp, #20
 8019460:	4690      	mov	r8, r2
 8019462:	4411      	add	r1, r2
 8019464:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019468:	4699      	mov	r9, r3
 801946a:	6803      	ldr	r3, [r0, #0]
 801946c:	60c1      	str	r1, [r0, #12]
 801946e:	4604      	mov	r4, r0
 8019470:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019472:	440a      	add	r2, r1
 8019474:	6102      	str	r2, [r0, #16]
 8019476:	695b      	ldr	r3, [r3, #20]
 8019478:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 801947c:	4798      	blx	r3
 801947e:	2800      	cmp	r0, #0
 8019480:	d039      	beq.n	80194f6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8019482:	44c8      	add	r8, r9
 8019484:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019488:	4445      	add	r5, r8
 801948a:	6823      	ldr	r3, [r4, #0]
 801948c:	f10d 020f 	add.w	r2, sp, #15
 8019490:	a903      	add	r1, sp, #12
 8019492:	4620      	mov	r0, r4
 8019494:	9200      	str	r2, [sp, #0]
 8019496:	f10d 020d 	add.w	r2, sp, #13
 801949a:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801949e:	f10d 030e 	add.w	r3, sp, #14
 80194a2:	47c0      	blx	r8
 80194a4:	b1f8      	cbz	r0, 80194e6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 80194a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80194aa:	7a20      	ldrb	r0, [r4, #8]
 80194ac:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80194b0:	4358      	muls	r0, r3
 80194b2:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80194b6:	1c43      	adds	r3, r0, #1
 80194b8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80194bc:	f817 0b01 	ldrb.w	r0, [r7], #1
 80194c0:	121b      	asrs	r3, r3, #8
 80194c2:	fb10 f003 	smulbb	r0, r0, r3
 80194c6:	b283      	uxth	r3, r0
 80194c8:	1c58      	adds	r0, r3, #1
 80194ca:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80194ce:	6823      	ldr	r3, [r4, #0]
 80194d0:	1200      	asrs	r0, r0, #8
 80194d2:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80194d6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80194da:	28ff      	cmp	r0, #255	; 0xff
 80194dc:	d10e      	bne.n	80194fc <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 80194de:	9100      	str	r1, [sp, #0]
 80194e0:	4629      	mov	r1, r5
 80194e2:	4620      	mov	r0, r4
 80194e4:	47c0      	blx	r8
 80194e6:	68e3      	ldr	r3, [r4, #12]
 80194e8:	3e01      	subs	r6, #1
 80194ea:	f105 0503 	add.w	r5, r5, #3
 80194ee:	f103 0301 	add.w	r3, r3, #1
 80194f2:	60e3      	str	r3, [r4, #12]
 80194f4:	d1c9      	bne.n	801948a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 80194f6:	b005      	add	sp, #20
 80194f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194fc:	fa1f fc80 	uxth.w	ip, r0
 8019500:	43c0      	mvns	r0, r0
 8019502:	f895 e002 	ldrb.w	lr, [r5, #2]
 8019506:	fb12 f20c 	smulbb	r2, r2, ip
 801950a:	b2c0      	uxtb	r0, r0
 801950c:	fb13 f30c 	smulbb	r3, r3, ip
 8019510:	fb0e 2200 	mla	r2, lr, r0, r2
 8019514:	f895 e001 	ldrb.w	lr, [r5, #1]
 8019518:	fb11 f10c 	smulbb	r1, r1, ip
 801951c:	fb0e 3300 	mla	r3, lr, r0, r3
 8019520:	f895 e000 	ldrb.w	lr, [r5]
 8019524:	b292      	uxth	r2, r2
 8019526:	b29b      	uxth	r3, r3
 8019528:	fb0e 1000 	mla	r0, lr, r0, r1
 801952c:	1c59      	adds	r1, r3, #1
 801952e:	b280      	uxth	r0, r0
 8019530:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8019534:	1c51      	adds	r1, r2, #1
 8019536:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801953a:	1c41      	adds	r1, r0, #1
 801953c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019540:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8019544:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8019548:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801954c:	9000      	str	r0, [sp, #0]
 801954e:	e7c7      	b.n	80194e0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08019550 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8019550:	f89d 0000 	ldrb.w	r0, [sp]
 8019554:	704b      	strb	r3, [r1, #1]
 8019556:	7008      	strb	r0, [r1, #0]
 8019558:	708a      	strb	r2, [r1, #2]
 801955a:	4770      	bx	lr

0801955c <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 801955c:	b508      	push	{r3, lr}
 801955e:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8019562:	f7ff fe4d 	bl	8019200 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019566:	bd08      	pop	{r3, pc}

08019568 <_ZN8touchgfx6CircleC1Ev>:
 8019568:	b510      	push	{r4, lr}
 801956a:	4604      	mov	r4, r0
 801956c:	f000 fce2 	bl	8019f34 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8019570:	4b08      	ldr	r3, [pc, #32]	; (8019594 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8019572:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8019576:	4620      	mov	r0, r4
 8019578:	6023      	str	r3, [r4, #0]
 801957a:	2300      	movs	r3, #0
 801957c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8019580:	f24b 4205 	movw	r2, #46085	; 0xb405
 8019584:	60a3      	str	r3, [r4, #8]
 8019586:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801958a:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801958e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8019592:	bd10      	pop	{r4, pc}
 8019594:	0802c4bc 	.word	0x0802c4bc

08019598 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8019598:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801959c:	4606      	mov	r6, r0
 801959e:	6810      	ldr	r0, [r2, #0]
 80195a0:	4698      	mov	r8, r3
 80195a2:	4691      	mov	r9, r2
 80195a4:	460f      	mov	r7, r1
 80195a6:	f7ff fe2b 	bl	8019200 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80195aa:	a902      	add	r1, sp, #8
 80195ac:	2402      	movs	r4, #2
 80195ae:	f841 0d08 	str.w	r0, [r1, #-8]!
 80195b2:	4640      	mov	r0, r8
 80195b4:	f7ff fdf6 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80195b8:	6b35      	ldr	r5, [r6, #48]	; 0x30
 80195ba:	fb90 f0f4 	sdiv	r0, r0, r4
 80195be:	4405      	add	r5, r0
 80195c0:	f8d9 0000 	ldr.w	r0, [r9]
 80195c4:	f7ff ffca 	bl	801955c <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80195c8:	a902      	add	r1, sp, #8
 80195ca:	f841 0d04 	str.w	r0, [r1, #-4]!
 80195ce:	4640      	mov	r0, r8
 80195d0:	f7ff fde8 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80195d4:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80195d6:	4629      	mov	r1, r5
 80195d8:	fb90 f0f4 	sdiv	r0, r0, r4
 80195dc:	1a12      	subs	r2, r2, r0
 80195de:	4638      	mov	r0, r7
 80195e0:	f00d fd43 	bl	802706a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80195e4:	b003      	add	sp, #12
 80195e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080195ea <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 80195ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80195ee:	9e08      	ldr	r6, [sp, #32]
 80195f0:	4698      	mov	r8, r3
 80195f2:	4615      	mov	r5, r2
 80195f4:	460f      	mov	r7, r1
 80195f6:	6830      	ldr	r0, [r6, #0]
 80195f8:	2402      	movs	r4, #2
 80195fa:	f7ff fe01 	bl	8019200 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80195fe:	a902      	add	r1, sp, #8
 8019600:	f841 0d08 	str.w	r0, [r1, #-8]!
 8019604:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019606:	f7ff fdcd 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801960a:	682d      	ldr	r5, [r5, #0]
 801960c:	fb90 f0f4 	sdiv	r0, r0, r4
 8019610:	4405      	add	r5, r0
 8019612:	6830      	ldr	r0, [r6, #0]
 8019614:	f7ff ffa2 	bl	801955c <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8019618:	a902      	add	r1, sp, #8
 801961a:	f841 0d04 	str.w	r0, [r1, #-4]!
 801961e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019620:	f7ff fdc0 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019624:	f8d8 2000 	ldr.w	r2, [r8]
 8019628:	4629      	mov	r1, r5
 801962a:	fb90 f0f4 	sdiv	r0, r0, r4
 801962e:	1a12      	subs	r2, r2, r0
 8019630:	4638      	mov	r0, r7
 8019632:	f00d fca9 	bl	8026f88 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8019636:	b002      	add	sp, #8
 8019638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801963c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 801963c:	b513      	push	{r0, r1, r4, lr}
 801963e:	e9cd 2300 	strd	r2, r3, [sp]
 8019642:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8019646:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801964a:	f7ff ffce 	bl	80195ea <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 801964e:	b002      	add	sp, #8
 8019650:	bd10      	pop	{r4, pc}

08019652 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8019652:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019654:	680e      	ldr	r6, [r1, #0]
 8019656:	681f      	ldr	r7, [r3, #0]
 8019658:	9807      	ldr	r0, [sp, #28]
 801965a:	42be      	cmp	r6, r7
 801965c:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8019660:	bfb8      	it	lt
 8019662:	601e      	strlt	r6, [r3, #0]
 8019664:	680b      	ldr	r3, [r1, #0]
 8019666:	6829      	ldr	r1, [r5, #0]
 8019668:	428b      	cmp	r3, r1
 801966a:	bfc8      	it	gt
 801966c:	602b      	strgt	r3, [r5, #0]
 801966e:	6813      	ldr	r3, [r2, #0]
 8019670:	6821      	ldr	r1, [r4, #0]
 8019672:	428b      	cmp	r3, r1
 8019674:	bfb8      	it	lt
 8019676:	6023      	strlt	r3, [r4, #0]
 8019678:	6813      	ldr	r3, [r2, #0]
 801967a:	6802      	ldr	r2, [r0, #0]
 801967c:	4293      	cmp	r3, r2
 801967e:	bfc8      	it	gt
 8019680:	6003      	strgt	r3, [r0, #0]
 8019682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019684 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8019684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019688:	b089      	sub	sp, #36	; 0x24
 801968a:	4690      	mov	r8, r2
 801968c:	4606      	mov	r6, r0
 801968e:	2402      	movs	r4, #2
 8019690:	ad08      	add	r5, sp, #32
 8019692:	6808      	ldr	r0, [r1, #0]
 8019694:	461f      	mov	r7, r3
 8019696:	4689      	mov	r9, r1
 8019698:	f7ff fdb2 	bl	8019200 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801969c:	f845 0d04 	str.w	r0, [r5, #-4]!
 80196a0:	4640      	mov	r0, r8
 80196a2:	4629      	mov	r1, r5
 80196a4:	f7ff fd7e 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80196a8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80196aa:	fb90 f0f4 	sdiv	r0, r0, r4
 80196ae:	4418      	add	r0, r3
 80196b0:	9005      	str	r0, [sp, #20]
 80196b2:	f8d9 0000 	ldr.w	r0, [r9]
 80196b6:	f7ff ff51 	bl	801955c <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80196ba:	4629      	mov	r1, r5
 80196bc:	9007      	str	r0, [sp, #28]
 80196be:	4640      	mov	r0, r8
 80196c0:	f7ff fd70 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80196c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80196c6:	aa08      	add	r2, sp, #32
 80196c8:	a905      	add	r1, sp, #20
 80196ca:	fb90 f0f4 	sdiv	r0, r0, r4
 80196ce:	6b74      	ldr	r4, [r6, #52]	; 0x34
 80196d0:	1a24      	subs	r4, r4, r0
 80196d2:	4630      	mov	r0, r6
 80196d4:	f842 4d08 	str.w	r4, [r2, #-8]!
 80196d8:	9302      	str	r3, [sp, #8]
 80196da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80196dc:	9301      	str	r3, [sp, #4]
 80196de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80196e0:	9300      	str	r3, [sp, #0]
 80196e2:	463b      	mov	r3, r7
 80196e4:	f7ff ffb5 	bl	8019652 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80196e8:	b009      	add	sp, #36	; 0x24
 80196ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080196ee <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 80196ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196f2:	4291      	cmp	r1, r2
 80196f4:	b08d      	sub	sp, #52	; 0x34
 80196f6:	461e      	mov	r6, r3
 80196f8:	4604      	mov	r4, r0
 80196fa:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80196fe:	ad0c      	add	r5, sp, #48	; 0x30
 8019700:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8019704:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8019708:	bfc8      	it	gt
 801970a:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 801970e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8019712:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 8019716:	1a9b      	subs	r3, r3, r2
 8019718:	a907      	add	r1, sp, #28
 801971a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801971e:	bfa2      	ittt	ge
 8019720:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8019724:	2200      	movge	r2, #0
 8019726:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 801972a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 801972c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801972e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019732:	f845 3d04 	str.w	r3, [r5, #-4]!
 8019736:	4633      	mov	r3, r6
 8019738:	462a      	mov	r2, r5
 801973a:	9700      	str	r7, [sp, #0]
 801973c:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8019740:	f7ff ffa0 	bl	8019684 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019744:	9b07      	ldr	r3, [sp, #28]
 8019746:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 801974a:	f103 0120 	add.w	r1, r3, #32
 801974e:	fb91 f3f0 	sdiv	r3, r1, r0
 8019752:	fb00 1313 	mls	r3, r0, r3, r1
 8019756:	1ac3      	subs	r3, r0, r3
 8019758:	fb93 f2f0 	sdiv	r2, r3, r0
 801975c:	fb00 3312 	mls	r3, r0, r2, r3
 8019760:	440b      	add	r3, r1
 8019762:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 8019766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019768:	9906      	ldr	r1, [sp, #24]
 801976a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801976c:	4291      	cmp	r1, r2
 801976e:	db11      	blt.n	8019794 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 8019770:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019772:	4651      	mov	r1, sl
 8019774:	9700      	str	r7, [sp, #0]
 8019776:	4620      	mov	r0, r4
 8019778:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801977c:	462a      	mov	r2, r5
 801977e:	930b      	str	r3, [sp, #44]	; 0x2c
 8019780:	4633      	mov	r3, r6
 8019782:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8019786:	f7ff ff7d 	bl	8019684 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801978a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801978c:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8019790:	9309      	str	r3, [sp, #36]	; 0x24
 8019792:	e7e8      	b.n	8019766 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8019794:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 8019798:	4291      	cmp	r1, r2
 801979a:	dd0c      	ble.n	80197b6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 801979c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801979e:	a906      	add	r1, sp, #24
 80197a0:	9700      	str	r7, [sp, #0]
 80197a2:	4620      	mov	r0, r4
 80197a4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80197a8:	462a      	mov	r2, r5
 80197aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80197ac:	4633      	mov	r3, r6
 80197ae:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80197b2:	f7ff ff67 	bl	8019684 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80197b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	f040 8097 	bne.w	80198ec <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 80197be:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 80197c2:	1a52      	subs	r2, r2, r1
 80197c4:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 80197c8:	da0a      	bge.n	80197e0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 80197ca:	462a      	mov	r2, r5
 80197cc:	a90a      	add	r1, sp, #40	; 0x28
 80197ce:	9700      	str	r7, [sp, #0]
 80197d0:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80197d4:	4633      	mov	r3, r6
 80197d6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80197da:	4620      	mov	r0, r4
 80197dc:	f7ff ff52 	bl	8019684 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80197e0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 80197e4:	2bb3      	cmp	r3, #179	; 0xb3
 80197e6:	d87e      	bhi.n	80198e6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 80197e8:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 80197ec:	1a1b      	subs	r3, r3, r0
 80197ee:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80197f2:	da78      	bge.n	80198e6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 80197f4:	ad0c      	add	r5, sp, #48	; 0x30
 80197f6:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 80197fa:	f7ff fd01 	bl	8019200 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80197fe:	f04f 0a02 	mov.w	sl, #2
 8019802:	f845 0d04 	str.w	r0, [r5, #-4]!
 8019806:	4658      	mov	r0, fp
 8019808:	4629      	mov	r1, r5
 801980a:	f7ff fccb 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801980e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019810:	18c3      	adds	r3, r0, r3
 8019812:	9807      	ldr	r0, [sp, #28]
 8019814:	9305      	str	r3, [sp, #20]
 8019816:	f7ff fea1 	bl	801955c <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801981a:	4629      	mov	r1, r5
 801981c:	900b      	str	r0, [sp, #44]	; 0x2c
 801981e:	4658      	mov	r0, fp
 8019820:	f7ff fcc0 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019824:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019826:	9a05      	ldr	r2, [sp, #20]
 8019828:	a90a      	add	r1, sp, #40	; 0x28
 801982a:	1a1b      	subs	r3, r3, r0
 801982c:	9700      	str	r7, [sp, #0]
 801982e:	4620      	mov	r0, r4
 8019830:	9304      	str	r3, [sp, #16]
 8019832:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019834:	fb93 f3fa 	sdiv	r3, r3, sl
 8019838:	1ad2      	subs	r2, r2, r3
 801983a:	920a      	str	r2, [sp, #40]	; 0x28
 801983c:	9a04      	ldr	r2, [sp, #16]
 801983e:	1ad3      	subs	r3, r2, r3
 8019840:	462a      	mov	r2, r5
 8019842:	930b      	str	r3, [sp, #44]	; 0x2c
 8019844:	4633      	mov	r3, r6
 8019846:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801984a:	f7ff ff02 	bl	8019652 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801984e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019850:	9a05      	ldr	r2, [sp, #20]
 8019852:	a90a      	add	r1, sp, #40	; 0x28
 8019854:	4620      	mov	r0, r4
 8019856:	9700      	str	r7, [sp, #0]
 8019858:	fb93 f3fa 	sdiv	r3, r3, sl
 801985c:	189a      	adds	r2, r3, r2
 801985e:	920a      	str	r2, [sp, #40]	; 0x28
 8019860:	9a04      	ldr	r2, [sp, #16]
 8019862:	4413      	add	r3, r2
 8019864:	462a      	mov	r2, r5
 8019866:	930b      	str	r3, [sp, #44]	; 0x2c
 8019868:	4633      	mov	r3, r6
 801986a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801986e:	f7ff fef0 	bl	8019652 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019872:	9806      	ldr	r0, [sp, #24]
 8019874:	f7ff fcc4 	bl	8019200 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019878:	4629      	mov	r1, r5
 801987a:	900b      	str	r0, [sp, #44]	; 0x2c
 801987c:	4658      	mov	r0, fp
 801987e:	f7ff fc91 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019882:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019884:	18c3      	adds	r3, r0, r3
 8019886:	9806      	ldr	r0, [sp, #24]
 8019888:	9304      	str	r3, [sp, #16]
 801988a:	f7ff fe67 	bl	801955c <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801988e:	4629      	mov	r1, r5
 8019890:	900b      	str	r0, [sp, #44]	; 0x2c
 8019892:	4658      	mov	r0, fp
 8019894:	f7ff fc86 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019898:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801989a:	9a04      	ldr	r2, [sp, #16]
 801989c:	a90a      	add	r1, sp, #40	; 0x28
 801989e:	eba3 0b00 	sub.w	fp, r3, r0
 80198a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80198a4:	4620      	mov	r0, r4
 80198a6:	9700      	str	r7, [sp, #0]
 80198a8:	fb93 f3fa 	sdiv	r3, r3, sl
 80198ac:	1ad2      	subs	r2, r2, r3
 80198ae:	ebab 0303 	sub.w	r3, fp, r3
 80198b2:	920a      	str	r2, [sp, #40]	; 0x28
 80198b4:	462a      	mov	r2, r5
 80198b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80198b8:	4633      	mov	r3, r6
 80198ba:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80198be:	f7ff fec8 	bl	8019652 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80198c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80198c4:	9700      	str	r7, [sp, #0]
 80198c6:	462a      	mov	r2, r5
 80198c8:	a90a      	add	r1, sp, #40	; 0x28
 80198ca:	4620      	mov	r0, r4
 80198cc:	fb93 fafa 	sdiv	sl, r3, sl
 80198d0:	9b04      	ldr	r3, [sp, #16]
 80198d2:	4453      	add	r3, sl
 80198d4:	930a      	str	r3, [sp, #40]	; 0x28
 80198d6:	eb0a 030b 	add.w	r3, sl, fp
 80198da:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80198de:	930b      	str	r3, [sp, #44]	; 0x2c
 80198e0:	4633      	mov	r3, r6
 80198e2:	f7ff feb6 	bl	8019652 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80198e6:	b00d      	add	sp, #52	; 0x34
 80198e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80198ee:	a907      	add	r1, sp, #28
 80198f0:	9700      	str	r7, [sp, #0]
 80198f2:	4620      	mov	r0, r4
 80198f4:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80198f8:	462a      	mov	r2, r5
 80198fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80198fc:	4633      	mov	r3, r6
 80198fe:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8019902:	f7ff febf 	bl	8019684 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019906:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019908:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801990a:	a906      	add	r1, sp, #24
 801990c:	9700      	str	r7, [sp, #0]
 801990e:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019912:	462a      	mov	r2, r5
 8019914:	930b      	str	r3, [sp, #44]	; 0x2c
 8019916:	4633      	mov	r3, r6
 8019918:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801991c:	e75d      	b.n	80197da <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

0801991e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 801991e:	b530      	push	{r4, r5, lr}
 8019920:	4604      	mov	r4, r0
 8019922:	4608      	mov	r0, r1
 8019924:	4611      	mov	r1, r2
 8019926:	461a      	mov	r2, r3
 8019928:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801992c:	b089      	sub	sp, #36	; 0x24
 801992e:	2500      	movs	r5, #0
 8019930:	015b      	lsls	r3, r3, #5
 8019932:	9505      	str	r5, [sp, #20]
 8019934:	9304      	str	r3, [sp, #16]
 8019936:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801993a:	015b      	lsls	r3, r3, #5
 801993c:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8019940:	ab07      	add	r3, sp, #28
 8019942:	2520      	movs	r5, #32
 8019944:	9302      	str	r3, [sp, #8]
 8019946:	ab06      	add	r3, sp, #24
 8019948:	9301      	str	r3, [sp, #4]
 801994a:	ab05      	add	r3, sp, #20
 801994c:	9300      	str	r3, [sp, #0]
 801994e:	ab04      	add	r3, sp, #16
 8019950:	f7ff fecd 	bl	80196ee <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8019954:	9a04      	ldr	r2, [sp, #16]
 8019956:	9805      	ldr	r0, [sp, #20]
 8019958:	9b06      	ldr	r3, [sp, #24]
 801995a:	9907      	ldr	r1, [sp, #28]
 801995c:	fb92 f2f5 	sdiv	r2, r2, r5
 8019960:	fb90 f0f5 	sdiv	r0, r0, r5
 8019964:	fb93 f3f5 	sdiv	r3, r3, r5
 8019968:	fb91 f1f5 	sdiv	r1, r1, r5
 801996c:	b292      	uxth	r2, r2
 801996e:	3002      	adds	r0, #2
 8019970:	b29b      	uxth	r3, r3
 8019972:	3102      	adds	r1, #2
 8019974:	1a80      	subs	r0, r0, r2
 8019976:	3a01      	subs	r2, #1
 8019978:	1ac9      	subs	r1, r1, r3
 801997a:	3b01      	subs	r3, #1
 801997c:	80a0      	strh	r0, [r4, #4]
 801997e:	4620      	mov	r0, r4
 8019980:	8022      	strh	r2, [r4, #0]
 8019982:	8063      	strh	r3, [r4, #2]
 8019984:	80e1      	strh	r1, [r4, #6]
 8019986:	b009      	add	sp, #36	; 0x24
 8019988:	bd30      	pop	{r4, r5, pc}

0801998a <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 801998a:	b510      	push	{r4, lr}
 801998c:	4604      	mov	r4, r0
 801998e:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8019992:	f7ff ffc4 	bl	801991e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8019996:	4620      	mov	r0, r4
 8019998:	bd10      	pop	{r4, pc}

0801999a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 801999a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801999e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80199a0:	b0ba      	sub	sp, #232	; 0xe8
 80199a2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80199a4:	4604      	mov	r4, r0
 80199a6:	9303      	str	r3, [sp, #12]
 80199a8:	460f      	mov	r7, r1
 80199aa:	429a      	cmp	r2, r3
 80199ac:	9204      	str	r2, [sp, #16]
 80199ae:	ae0a      	add	r6, sp, #40	; 0x28
 80199b0:	bfb8      	it	lt
 80199b2:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 80199b6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80199ba:	1a9b      	subs	r3, r3, r2
 80199bc:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80199c0:	bfa2      	ittt	ge
 80199c2:	2200      	movge	r2, #0
 80199c4:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 80199c8:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 80199cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80199ce:	2a00      	cmp	r2, #0
 80199d0:	d131      	bne.n	8019a36 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 80199d2:	463a      	mov	r2, r7
 80199d4:	4621      	mov	r1, r4
 80199d6:	a80b      	add	r0, sp, #44	; 0x2c
 80199d8:	f00d f97e 	bl	8026cd8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80199dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80199de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80199e0:	9205      	str	r2, [sp, #20]
 80199e2:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80199e6:	9306      	str	r3, [sp, #24]
 80199e8:	dc6f      	bgt.n	8019aca <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 80199ea:	9b03      	ldr	r3, [sp, #12]
 80199ec:	a90b      	add	r1, sp, #44	; 0x2c
 80199ee:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 80199f2:	4620      	mov	r0, r4
 80199f4:	9307      	str	r3, [sp, #28]
 80199f6:	016d      	lsls	r5, r5, #5
 80199f8:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80199fc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019a00:	aa07      	add	r2, sp, #28
 8019a02:	930a      	str	r3, [sp, #40]	; 0x28
 8019a04:	4633      	mov	r3, r6
 8019a06:	f7ff fdc7 	bl	8019598 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019a0a:	9f07      	ldr	r7, [sp, #28]
 8019a0c:	2d00      	cmp	r5, #0
 8019a0e:	d165      	bne.n	8019adc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 8019a10:	3720      	adds	r7, #32
 8019a12:	4639      	mov	r1, r7
 8019a14:	9a04      	ldr	r2, [sp, #16]
 8019a16:	9b06      	ldr	r3, [sp, #24]
 8019a18:	442f      	add	r7, r5
 8019a1a:	4291      	cmp	r1, r2
 8019a1c:	dc6b      	bgt.n	8019af6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 8019a1e:	9a05      	ldr	r2, [sp, #20]
 8019a20:	4620      	mov	r0, r4
 8019a22:	9107      	str	r1, [sp, #28]
 8019a24:	a90b      	add	r1, sp, #44	; 0x2c
 8019a26:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019a2a:	aa07      	add	r2, sp, #28
 8019a2c:	930a      	str	r3, [sp, #40]	; 0x28
 8019a2e:	4633      	mov	r3, r6
 8019a30:	f7ff fe04 	bl	801963c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019a34:	e7ed      	b.n	8019a12 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8019a36:	f9b1 c000 	ldrsh.w	ip, [r1]
 8019a3a:	88bd      	ldrh	r5, [r7, #4]
 8019a3c:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8019a40:	4465      	add	r5, ip
 8019a42:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8019a46:	b22d      	sxth	r5, r5
 8019a48:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 8019a4c:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 8019a50:	2d00      	cmp	r5, #0
 8019a52:	bfb8      	it	lt
 8019a54:	426d      	neglt	r5, r5
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	bfb8      	it	lt
 8019a5a:	425b      	neglt	r3, r3
 8019a5c:	429d      	cmp	r5, r3
 8019a5e:	bfb8      	it	lt
 8019a60:	461d      	movlt	r5, r3
 8019a62:	88fb      	ldrh	r3, [r7, #6]
 8019a64:	4403      	add	r3, r0
 8019a66:	116d      	asrs	r5, r5, #5
 8019a68:	b21b      	sxth	r3, r3
 8019a6a:	3501      	adds	r5, #1
 8019a6c:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8019a70:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 8019a74:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	f100 0001 	add.w	r0, r0, #1
 8019a7e:	bfb8      	it	lt
 8019a80:	425b      	neglt	r3, r3
 8019a82:	2900      	cmp	r1, #0
 8019a84:	ea4f 0060 	mov.w	r0, r0, asr #1
 8019a88:	bfb8      	it	lt
 8019a8a:	4249      	neglt	r1, r1
 8019a8c:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8019a90:	428b      	cmp	r3, r1
 8019a92:	bfb8      	it	lt
 8019a94:	460b      	movlt	r3, r1
 8019a96:	115b      	asrs	r3, r3, #5
 8019a98:	3301      	adds	r3, #1
 8019a9a:	435b      	muls	r3, r3
 8019a9c:	fb05 3505 	mla	r5, r5, r5, r3
 8019aa0:	2302      	movs	r3, #2
 8019aa2:	fb92 f2f3 	sdiv	r2, r2, r3
 8019aa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019aa8:	1a9a      	subs	r2, r3, r2
 8019aaa:	920a      	str	r2, [sp, #40]	; 0x28
 8019aac:	f7ff fb86 	bl	80191bc <_ZN8touchgfx7CWRUtil4sineEi>
 8019ab0:	a90b      	add	r1, sp, #44	; 0x2c
 8019ab2:	900b      	str	r0, [sp, #44]	; 0x2c
 8019ab4:	4630      	mov	r0, r6
 8019ab6:	f7ff fb75 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019aba:	2320      	movs	r3, #32
 8019abc:	fb90 f0f3 	sdiv	r0, r0, r3
 8019ac0:	4340      	muls	r0, r0
 8019ac2:	42a8      	cmp	r0, r5
 8019ac4:	dd85      	ble.n	80199d2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 8019ac6:	2401      	movs	r4, #1
 8019ac8:	e036      	b.n	8019b38 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19e>
 8019aca:	2102      	movs	r1, #2
 8019acc:	fb93 f3f1 	sdiv	r3, r3, r1
 8019ad0:	4413      	add	r3, r2
 8019ad2:	9306      	str	r3, [sp, #24]
 8019ad4:	fb93 f3f1 	sdiv	r3, r3, r1
 8019ad8:	9305      	str	r3, [sp, #20]
 8019ada:	e786      	b.n	80199ea <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 8019adc:	f107 0320 	add.w	r3, r7, #32
 8019ae0:	fb93 f7f5 	sdiv	r7, r3, r5
 8019ae4:	fb05 3717 	mls	r7, r5, r7, r3
 8019ae8:	1bea      	subs	r2, r5, r7
 8019aea:	fb92 f7f5 	sdiv	r7, r2, r5
 8019aee:	fb05 2717 	mls	r7, r5, r7, r2
 8019af2:	441f      	add	r7, r3
 8019af4:	e78d      	b.n	8019a12 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8019af6:	9907      	ldr	r1, [sp, #28]
 8019af8:	428a      	cmp	r2, r1
 8019afa:	dd09      	ble.n	8019b10 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 8019afc:	9a05      	ldr	r2, [sp, #20]
 8019afe:	a90b      	add	r1, sp, #44	; 0x2c
 8019b00:	4620      	mov	r0, r4
 8019b02:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019b06:	aa04      	add	r2, sp, #16
 8019b08:	930a      	str	r3, [sp, #40]	; 0x28
 8019b0a:	4633      	mov	r3, r6
 8019b0c:	f7ff fd96 	bl	801963c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019b10:	9a06      	ldr	r2, [sp, #24]
 8019b12:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8019b16:	1ac3      	subs	r3, r0, r3
 8019b18:	b992      	cbnz	r2, 8019b40 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a6>
 8019b1a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8019b1e:	da04      	bge.n	8019b2a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8019b20:	a80b      	add	r0, sp, #44	; 0x2c
 8019b22:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8019b26:	f00d fa2f 	bl	8026f88 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8019b2a:	a80b      	add	r0, sp, #44	; 0x2c
 8019b2c:	f00d fba1 	bl	8027272 <_ZN8touchgfx6Canvas6renderEv>
 8019b30:	4604      	mov	r4, r0
 8019b32:	a80b      	add	r0, sp, #44	; 0x2c
 8019b34:	f00d fbda 	bl	80272ec <_ZN8touchgfx6CanvasD1Ev>
 8019b38:	4620      	mov	r0, r4
 8019b3a:	b03a      	add	sp, #232	; 0xe8
 8019b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b40:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8019b44:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8019b48:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8019b4c:	da2b      	bge.n	8019ba6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 8019b4e:	f7ff fb57 	bl	8019200 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019b52:	4631      	mov	r1, r6
 8019b54:	900a      	str	r0, [sp, #40]	; 0x28
 8019b56:	a805      	add	r0, sp, #20
 8019b58:	f7ff fb24 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019b5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019b5e:	f10d 0818 	add.w	r8, sp, #24
 8019b62:	4418      	add	r0, r3
 8019b64:	9008      	str	r0, [sp, #32]
 8019b66:	9804      	ldr	r0, [sp, #16]
 8019b68:	f7ff fcf8 	bl	801955c <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8019b6c:	4631      	mov	r1, r6
 8019b6e:	900a      	str	r0, [sp, #40]	; 0x28
 8019b70:	a805      	add	r0, sp, #20
 8019b72:	f7ff fb17 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019b76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019b78:	1a18      	subs	r0, r3, r0
 8019b7a:	9b04      	ldr	r3, [sp, #16]
 8019b7c:	443b      	add	r3, r7
 8019b7e:	9009      	str	r0, [sp, #36]	; 0x24
 8019b80:	930a      	str	r3, [sp, #40]	; 0x28
 8019b82:	9b04      	ldr	r3, [sp, #16]
 8019b84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019b86:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8019b8a:	4293      	cmp	r3, r2
 8019b8c:	dd0b      	ble.n	8019ba6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 8019b8e:	ab09      	add	r3, sp, #36	; 0x24
 8019b90:	aa08      	add	r2, sp, #32
 8019b92:	a90b      	add	r1, sp, #44	; 0x2c
 8019b94:	4620      	mov	r0, r4
 8019b96:	e9cd 6800 	strd	r6, r8, [sp]
 8019b9a:	f7ff fd26 	bl	80195ea <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8019b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ba0:	443b      	add	r3, r7
 8019ba2:	930a      	str	r3, [sp, #40]	; 0x28
 8019ba4:	e7ed      	b.n	8019b82 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e8>
 8019ba6:	9a04      	ldr	r2, [sp, #16]
 8019ba8:	9b07      	ldr	r3, [sp, #28]
 8019baa:	429a      	cmp	r2, r3
 8019bac:	dd0a      	ble.n	8019bc4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 8019bae:	a90b      	add	r1, sp, #44	; 0x2c
 8019bb0:	4620      	mov	r0, r4
 8019bb2:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019bb6:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019bba:	aa04      	add	r2, sp, #16
 8019bbc:	930a      	str	r3, [sp, #40]	; 0x28
 8019bbe:	4633      	mov	r3, r6
 8019bc0:	f7ff fd3c 	bl	801963c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019bc4:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8019bc8:	4642      	mov	r2, r8
 8019bca:	9b03      	ldr	r3, [sp, #12]
 8019bcc:	eba8 0805 	sub.w	r8, r8, r5
 8019bd0:	429a      	cmp	r2, r3
 8019bd2:	db0c      	blt.n	8019bee <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x254>
 8019bd4:	9207      	str	r2, [sp, #28]
 8019bd6:	a90b      	add	r1, sp, #44	; 0x2c
 8019bd8:	4620      	mov	r0, r4
 8019bda:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019bde:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019be2:	aa07      	add	r2, sp, #28
 8019be4:	930a      	str	r3, [sp, #40]	; 0x28
 8019be6:	4633      	mov	r3, r6
 8019be8:	f7ff fd28 	bl	801963c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019bec:	e7ec      	b.n	8019bc8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22e>
 8019bee:	9a07      	ldr	r2, [sp, #28]
 8019bf0:	4293      	cmp	r3, r2
 8019bf2:	da0a      	bge.n	8019c0a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x270>
 8019bf4:	a90b      	add	r1, sp, #44	; 0x2c
 8019bf6:	4620      	mov	r0, r4
 8019bf8:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019bfc:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019c00:	aa03      	add	r2, sp, #12
 8019c02:	930a      	str	r3, [sp, #40]	; 0x28
 8019c04:	4633      	mov	r3, r6
 8019c06:	f7ff fd19 	bl	801963c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019c0a:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 8019c0e:	1a1b      	subs	r3, r3, r0
 8019c10:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8019c14:	da89      	bge.n	8019b2a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8019c16:	f7ff faf3 	bl	8019200 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019c1a:	4631      	mov	r1, r6
 8019c1c:	900a      	str	r0, [sp, #40]	; 0x28
 8019c1e:	a805      	add	r0, sp, #20
 8019c20:	f7ff fac0 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019c24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019c26:	ad06      	add	r5, sp, #24
 8019c28:	4418      	add	r0, r3
 8019c2a:	9008      	str	r0, [sp, #32]
 8019c2c:	9803      	ldr	r0, [sp, #12]
 8019c2e:	f7ff fc95 	bl	801955c <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8019c32:	4631      	mov	r1, r6
 8019c34:	900a      	str	r0, [sp, #40]	; 0x28
 8019c36:	a805      	add	r0, sp, #20
 8019c38:	f7ff fab4 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019c3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019c3e:	1a18      	subs	r0, r3, r0
 8019c40:	9b03      	ldr	r3, [sp, #12]
 8019c42:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 8019c46:	9009      	str	r0, [sp, #36]	; 0x24
 8019c48:	443b      	add	r3, r7
 8019c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8019c4c:	9a03      	ldr	r2, [sp, #12]
 8019c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c50:	429a      	cmp	r2, r3
 8019c52:	f77f af6a 	ble.w	8019b2a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8019c56:	ab09      	add	r3, sp, #36	; 0x24
 8019c58:	aa08      	add	r2, sp, #32
 8019c5a:	a90b      	add	r1, sp, #44	; 0x2c
 8019c5c:	4620      	mov	r0, r4
 8019c5e:	e9cd 6500 	strd	r6, r5, [sp]
 8019c62:	f7ff fcc2 	bl	80195ea <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8019c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c68:	443b      	add	r3, r7
 8019c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8019c6c:	e7ee      	b.n	8019c4c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b2>

08019c6e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8019c6e:	4413      	add	r3, r2
 8019c70:	7a42      	ldrb	r2, [r0, #9]
 8019c72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019c76:	4419      	add	r1, r3
 8019c78:	7a03      	ldrb	r3, [r0, #8]
 8019c7a:	435a      	muls	r2, r3
 8019c7c:	1c53      	adds	r3, r2, #1
 8019c7e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8019c82:	121b      	asrs	r3, r3, #8
 8019c84:	2bff      	cmp	r3, #255	; 0xff
 8019c86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c88:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8019c8c:	d13e      	bne.n	8019d0c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8019c8e:	4427      	add	r7, r4
 8019c90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019c94:	3103      	adds	r1, #3
 8019c96:	7d86      	ldrb	r6, [r0, #22]
 8019c98:	2bff      	cmp	r3, #255	; 0xff
 8019c9a:	d10a      	bne.n	8019cb2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8019c9c:	f801 6c03 	strb.w	r6, [r1, #-3]
 8019ca0:	7d43      	ldrb	r3, [r0, #21]
 8019ca2:	f801 3c02 	strb.w	r3, [r1, #-2]
 8019ca6:	7d03      	ldrb	r3, [r0, #20]
 8019ca8:	f801 3c01 	strb.w	r3, [r1, #-1]
 8019cac:	42a7      	cmp	r7, r4
 8019cae:	d1ef      	bne.n	8019c90 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8019cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cb2:	b29a      	uxth	r2, r3
 8019cb4:	43db      	mvns	r3, r3
 8019cb6:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8019cba:	fb16 f602 	smulbb	r6, r6, r2
 8019cbe:	b2db      	uxtb	r3, r3
 8019cc0:	fb05 6503 	mla	r5, r5, r3, r6
 8019cc4:	b2ad      	uxth	r5, r5
 8019cc6:	1c6e      	adds	r6, r5, #1
 8019cc8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8019ccc:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8019cd0:	fb16 f603 	smulbb	r6, r6, r3
 8019cd4:	122d      	asrs	r5, r5, #8
 8019cd6:	f801 5c03 	strb.w	r5, [r1, #-3]
 8019cda:	7d45      	ldrb	r5, [r0, #21]
 8019cdc:	fb05 6502 	mla	r5, r5, r2, r6
 8019ce0:	b2ad      	uxth	r5, r5
 8019ce2:	1c6e      	adds	r6, r5, #1
 8019ce4:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8019ce8:	122d      	asrs	r5, r5, #8
 8019cea:	f801 5c02 	strb.w	r5, [r1, #-2]
 8019cee:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019cf2:	7d06      	ldrb	r6, [r0, #20]
 8019cf4:	fb15 f303 	smulbb	r3, r5, r3
 8019cf8:	fb06 3202 	mla	r2, r6, r2, r3
 8019cfc:	b292      	uxth	r2, r2
 8019cfe:	1c53      	adds	r3, r2, #1
 8019d00:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8019d04:	1212      	asrs	r2, r2, #8
 8019d06:	f801 2c01 	strb.w	r2, [r1, #-1]
 8019d0a:	e7cf      	b.n	8019cac <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8019d0c:	b2de      	uxtb	r6, r3
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d0ce      	beq.n	8019cb0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8019d12:	3103      	adds	r1, #3
 8019d14:	4427      	add	r7, r4
 8019d16:	f814 2b01 	ldrb.w	r2, [r4], #1
 8019d1a:	3103      	adds	r1, #3
 8019d1c:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8019d20:	fb02 f306 	mul.w	r3, r2, r6
 8019d24:	42bc      	cmp	r4, r7
 8019d26:	f103 0201 	add.w	r2, r3, #1
 8019d2a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019d2e:	ea4f 2222 	mov.w	r2, r2, asr #8
 8019d32:	b295      	uxth	r5, r2
 8019d34:	ea6f 0202 	mvn.w	r2, r2
 8019d38:	b2d3      	uxtb	r3, r2
 8019d3a:	7d82      	ldrb	r2, [r0, #22]
 8019d3c:	fb1c fc03 	smulbb	ip, ip, r3
 8019d40:	fb02 c205 	mla	r2, r2, r5, ip
 8019d44:	b292      	uxth	r2, r2
 8019d46:	f102 0c01 	add.w	ip, r2, #1
 8019d4a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8019d4e:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8019d52:	fb1c fc03 	smulbb	ip, ip, r3
 8019d56:	ea4f 2222 	mov.w	r2, r2, asr #8
 8019d5a:	f801 2c06 	strb.w	r2, [r1, #-6]
 8019d5e:	7d42      	ldrb	r2, [r0, #21]
 8019d60:	fb02 c205 	mla	r2, r2, r5, ip
 8019d64:	b292      	uxth	r2, r2
 8019d66:	f102 0c01 	add.w	ip, r2, #1
 8019d6a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8019d6e:	ea4f 2222 	mov.w	r2, r2, asr #8
 8019d72:	f801 2c05 	strb.w	r2, [r1, #-5]
 8019d76:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8019d7a:	f890 c014 	ldrb.w	ip, [r0, #20]
 8019d7e:	fb12 f303 	smulbb	r3, r2, r3
 8019d82:	fb0c 3305 	mla	r3, ip, r5, r3
 8019d86:	b29b      	uxth	r3, r3
 8019d88:	f103 0201 	add.w	r2, r3, #1
 8019d8c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019d90:	ea4f 2323 	mov.w	r3, r3, asr #8
 8019d94:	f801 3c04 	strb.w	r3, [r1, #-4]
 8019d98:	d1bd      	bne.n	8019d16 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8019d9a:	e789      	b.n	8019cb0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08019d9c <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8019d9c:	b510      	push	{r4, lr}
 8019d9e:	7d04      	ldrb	r4, [r0, #20]
 8019da0:	700c      	strb	r4, [r1, #0]
 8019da2:	7d41      	ldrb	r1, [r0, #21]
 8019da4:	7011      	strb	r1, [r2, #0]
 8019da6:	7d82      	ldrb	r2, [r0, #22]
 8019da8:	701a      	strb	r2, [r3, #0]
 8019daa:	9b02      	ldr	r3, [sp, #8]
 8019dac:	7a42      	ldrb	r2, [r0, #9]
 8019dae:	2001      	movs	r0, #1
 8019db0:	701a      	strb	r2, [r3, #0]
 8019db2:	bd10      	pop	{r4, pc}

08019db4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8019db4:	6281      	str	r1, [r0, #40]	; 0x28
 8019db6:	4770      	bx	lr

08019db8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8019db8:	b513      	push	{r0, r1, r4, lr}
 8019dba:	6803      	ldr	r3, [r0, #0]
 8019dbc:	4604      	mov	r4, r0
 8019dbe:	4601      	mov	r1, r0
 8019dc0:	4668      	mov	r0, sp
 8019dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019dc4:	4798      	blx	r3
 8019dc6:	6823      	ldr	r3, [r4, #0]
 8019dc8:	4669      	mov	r1, sp
 8019dca:	4620      	mov	r0, r4
 8019dcc:	691b      	ldr	r3, [r3, #16]
 8019dce:	4798      	blx	r3
 8019dd0:	b002      	add	sp, #8
 8019dd2:	bd10      	pop	{r4, pc}

08019dd4 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8019dd4:	b510      	push	{r4, lr}
 8019dd6:	2200      	movs	r2, #0
 8019dd8:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8019ddc:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8019de0:	8002      	strh	r2, [r0, #0]
 8019de2:	8042      	strh	r2, [r0, #2]
 8019de4:	8084      	strh	r4, [r0, #4]
 8019de6:	80c1      	strh	r1, [r0, #6]
 8019de8:	bd10      	pop	{r4, pc}

08019dea <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8019dea:	2200      	movs	r2, #0
 8019dec:	8002      	strh	r2, [r0, #0]
 8019dee:	8042      	strh	r2, [r0, #2]
 8019df0:	8082      	strh	r2, [r0, #4]
 8019df2:	80c2      	strh	r2, [r0, #6]
 8019df4:	4770      	bx	lr
	...

08019df8 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8019df8:	b508      	push	{r3, lr}
 8019dfa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019dfc:	b928      	cbnz	r0, 8019e0a <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8019dfe:	4b03      	ldr	r3, [pc, #12]	; (8019e0c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8019e00:	2123      	movs	r1, #35	; 0x23
 8019e02:	4a03      	ldr	r2, [pc, #12]	; (8019e10 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8019e04:	4803      	ldr	r0, [pc, #12]	; (8019e14 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8019e06:	f00e fb3d 	bl	8028484 <__assert_func>
 8019e0a:	bd08      	pop	{r3, pc}
 8019e0c:	0802c55c 	.word	0x0802c55c
 8019e10:	0802c640 	.word	0x0802c640
 8019e14:	0802c583 	.word	0x0802c583

08019e18 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8019e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e1c:	b089      	sub	sp, #36	; 0x24
 8019e1e:	4604      	mov	r4, r0
 8019e20:	6808      	ldr	r0, [r1, #0]
 8019e22:	f04f 0a00 	mov.w	sl, #0
 8019e26:	6849      	ldr	r1, [r1, #4]
 8019e28:	ab02      	add	r3, sp, #8
 8019e2a:	f04f 0b01 	mov.w	fp, #1
 8019e2e:	c303      	stmia	r3!, {r0, r1}
 8019e30:	4b3f      	ldr	r3, [pc, #252]	; (8019f30 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 8019e32:	4621      	mov	r1, r4
 8019e34:	a804      	add	r0, sp, #16
 8019e36:	781b      	ldrb	r3, [r3, #0]
 8019e38:	2b01      	cmp	r3, #1
 8019e3a:	6823      	ldr	r3, [r4, #0]
 8019e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e3e:	bf1f      	itttt	ne
 8019e40:	f10d 0906 	addne.w	r9, sp, #6
 8019e44:	ae03      	addne	r6, sp, #12
 8019e46:	f10d 050e 	addne.w	r5, sp, #14
 8019e4a:	f10d 080a 	addne.w	r8, sp, #10
 8019e4e:	bf01      	itttt	eq
 8019e50:	f10d 090e 	addeq.w	r9, sp, #14
 8019e54:	f10d 0606 	addeq.w	r6, sp, #6
 8019e58:	ad03      	addeq	r5, sp, #12
 8019e5a:	f10d 0808 	addeq.w	r8, sp, #8
 8019e5e:	4798      	blx	r3
 8019e60:	f9b5 3000 	ldrsh.w	r3, [r5]
 8019e64:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d056      	beq.n	8019f1a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8019e6c:	4293      	cmp	r3, r2
 8019e6e:	bfa8      	it	ge
 8019e70:	4613      	movge	r3, r2
 8019e72:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019e76:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8019e7a:	2f00      	cmp	r7, #0
 8019e7c:	dd34      	ble.n	8019ee8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8019e7e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8019e82:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8019e86:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8019e8a:	4484      	add	ip, r0
 8019e8c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8019e90:	f9b6 e000 	ldrsh.w	lr, [r6]
 8019e94:	fa0f fc8c 	sxth.w	ip, ip
 8019e98:	f9b9 1000 	ldrsh.w	r1, [r9]
 8019e9c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019ea0:	4562      	cmp	r2, ip
 8019ea2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019ea6:	f8ad e01c 	strh.w	lr, [sp, #28]
 8019eaa:	f8ad 101e 	strh.w	r1, [sp, #30]
 8019eae:	da29      	bge.n	8019f04 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019eb0:	4472      	add	r2, lr
 8019eb2:	b212      	sxth	r2, r2
 8019eb4:	4290      	cmp	r0, r2
 8019eb6:	da25      	bge.n	8019f04 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019eb8:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8019ebc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019ec0:	4402      	add	r2, r0
 8019ec2:	b212      	sxth	r2, r2
 8019ec4:	4293      	cmp	r3, r2
 8019ec6:	da1d      	bge.n	8019f04 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019ec8:	440b      	add	r3, r1
 8019eca:	b21b      	sxth	r3, r3
 8019ecc:	4298      	cmp	r0, r3
 8019ece:	da19      	bge.n	8019f04 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019ed0:	6823      	ldr	r3, [r4, #0]
 8019ed2:	a906      	add	r1, sp, #24
 8019ed4:	4620      	mov	r0, r4
 8019ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019ed8:	4798      	blx	r3
 8019eda:	b998      	cbnz	r0, 8019f04 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019edc:	107f      	asrs	r7, r7, #1
 8019ede:	f04f 0a01 	mov.w	sl, #1
 8019ee2:	f8ad 7006 	strh.w	r7, [sp, #6]
 8019ee6:	e7c6      	b.n	8019e76 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8019ee8:	d10c      	bne.n	8019f04 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019eea:	f8ad b006 	strh.w	fp, [sp, #6]
 8019eee:	f8b8 2000 	ldrh.w	r2, [r8]
 8019ef2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8019ef6:	440a      	add	r2, r1
 8019ef8:	f8a8 2000 	strh.w	r2, [r8]
 8019efc:	882b      	ldrh	r3, [r5, #0]
 8019efe:	1a5b      	subs	r3, r3, r1
 8019f00:	802b      	strh	r3, [r5, #0]
 8019f02:	e7ad      	b.n	8019e60 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8019f04:	f1ba 0f00 	cmp.w	sl, #0
 8019f08:	d0f1      	beq.n	8019eee <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8019f0a:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8019f0e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019f12:	429a      	cmp	r2, r3
 8019f14:	bf08      	it	eq
 8019f16:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8019f18:	e7e9      	b.n	8019eee <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8019f1a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019f1e:	429a      	cmp	r2, r3
 8019f20:	bf04      	itt	eq
 8019f22:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8019f26:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8019f28:	b009      	add	sp, #36	; 0x24
 8019f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f2e:	bf00      	nop
 8019f30:	2000b414 	.word	0x2000b414

08019f34 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8019f34:	2200      	movs	r2, #0
 8019f36:	2101      	movs	r1, #1
 8019f38:	8082      	strh	r2, [r0, #4]
 8019f3a:	80c2      	strh	r2, [r0, #6]
 8019f3c:	8102      	strh	r2, [r0, #8]
 8019f3e:	8142      	strh	r2, [r0, #10]
 8019f40:	8182      	strh	r2, [r0, #12]
 8019f42:	81c2      	strh	r2, [r0, #14]
 8019f44:	8202      	strh	r2, [r0, #16]
 8019f46:	8242      	strh	r2, [r0, #18]
 8019f48:	61c2      	str	r2, [r0, #28]
 8019f4a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8019f4e:	6282      	str	r2, [r0, #40]	; 0x28
 8019f50:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8019f54:	4905      	ldr	r1, [pc, #20]	; (8019f6c <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8019f56:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019f5a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019f5e:	6001      	str	r1, [r0, #0]
 8019f60:	8582      	strh	r2, [r0, #44]	; 0x2c
 8019f62:	22ff      	movs	r2, #255	; 0xff
 8019f64:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8019f68:	4770      	bx	lr
 8019f6a:	bf00      	nop
 8019f6c:	0802c5c8 	.word	0x0802c5c8

08019f70 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8019f70:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8019f74:	4602      	mov	r2, r0
 8019f76:	cb03      	ldmia	r3!, {r0, r1}
 8019f78:	6010      	str	r0, [r2, #0]
 8019f7a:	4610      	mov	r0, r2
 8019f7c:	6051      	str	r1, [r2, #4]
 8019f7e:	4770      	bx	lr

08019f80 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8019f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f84:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8019f88:	2d00      	cmp	r5, #0
 8019f8a:	dd34      	ble.n	8019ff6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x76>
 8019f8c:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 8019f90:	f1bc 0f00 	cmp.w	ip, #0
 8019f94:	dd2f      	ble.n	8019ff6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x76>
 8019f96:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019f9a:	f9b1 e000 	ldrsh.w	lr, [r1]
 8019f9e:	2c00      	cmp	r4, #0
 8019fa0:	dd2b      	ble.n	8019ffa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x7a>
 8019fa2:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8019fa6:	2f00      	cmp	r7, #0
 8019fa8:	dd27      	ble.n	8019ffa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x7a>
 8019faa:	f9b0 8000 	ldrsh.w	r8, [r0]
 8019fae:	4475      	add	r5, lr
 8019fb0:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8019fb4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019fb8:	45f0      	cmp	r8, lr
 8019fba:	4646      	mov	r6, r8
 8019fbc:	4444      	add	r4, r8
 8019fbe:	bfa8      	it	ge
 8019fc0:	4676      	movge	r6, lr
 8019fc2:	4293      	cmp	r3, r2
 8019fc4:	4619      	mov	r1, r3
 8019fc6:	443b      	add	r3, r7
 8019fc8:	bfa8      	it	ge
 8019fca:	4611      	movge	r1, r2
 8019fcc:	4462      	add	r2, ip
 8019fce:	b22d      	sxth	r5, r5
 8019fd0:	8006      	strh	r6, [r0, #0]
 8019fd2:	b224      	sxth	r4, r4
 8019fd4:	8041      	strh	r1, [r0, #2]
 8019fd6:	b212      	sxth	r2, r2
 8019fd8:	b21b      	sxth	r3, r3
 8019fda:	42a5      	cmp	r5, r4
 8019fdc:	bfac      	ite	ge
 8019fde:	ebc6 0405 	rsbge	r4, r6, r5
 8019fe2:	ebc6 0404 	rsblt	r4, r6, r4
 8019fe6:	429a      	cmp	r2, r3
 8019fe8:	bfac      	ite	ge
 8019fea:	ebc1 0302 	rsbge	r3, r1, r2
 8019fee:	ebc1 0303 	rsblt	r3, r1, r3
 8019ff2:	8084      	strh	r4, [r0, #4]
 8019ff4:	80c3      	strh	r3, [r0, #6]
 8019ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ffa:	f8a0 e000 	strh.w	lr, [r0]
 8019ffe:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a002:	8043      	strh	r3, [r0, #2]
 801a004:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a008:	8083      	strh	r3, [r0, #4]
 801a00a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a00e:	e7f1      	b.n	8019ff4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>

0801a010 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 801a010:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801a014:	f04f 0300 	mov.w	r3, #0
 801a018:	bf2c      	ite	cs
 801a01a:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801a01e:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 801a022:	1899      	adds	r1, r3, r2
 801a024:	4288      	cmp	r0, r1
 801a026:	bf24      	itt	cs
 801a028:	1853      	addcs	r3, r2, r1
 801a02a:	1a40      	subcs	r0, r0, r1
 801a02c:	0892      	lsrs	r2, r2, #2
 801a02e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801a032:	d1f6      	bne.n	801a022 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 801a034:	4618      	mov	r0, r3
 801a036:	4770      	bx	lr

0801a038 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 801a038:	2800      	cmp	r0, #0
 801a03a:	b508      	push	{r3, lr}
 801a03c:	da05      	bge.n	801a04a <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801a03e:	4240      	negs	r0, r0
 801a040:	f7ff fffa 	bl	801a038 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801a044:	4240      	negs	r0, r0
 801a046:	b240      	sxtb	r0, r0
 801a048:	bd08      	pop	{r3, pc}
 801a04a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801a04e:	dc11      	bgt.n	801a074 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 801a050:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 801a054:	dd09      	ble.n	801a06a <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 801a056:	4340      	muls	r0, r0
 801a058:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 801a05c:	f7ff ffd8 	bl	801a010 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801a060:	f7ff ffea 	bl	801a038 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801a064:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801a068:	e7ed      	b.n	801a046 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 801a06a:	3003      	adds	r0, #3
 801a06c:	4b02      	ldr	r3, [pc, #8]	; (801a078 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801a06e:	10c0      	asrs	r0, r0, #3
 801a070:	5618      	ldrsb	r0, [r3, r0]
 801a072:	e7e9      	b.n	801a048 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801a074:	2000      	movs	r0, #0
 801a076:	e7e7      	b.n	801a048 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801a078:	0802c68e 	.word	0x0802c68e

0801a07c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 801a07c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a07e:	460c      	mov	r4, r1
 801a080:	1e01      	subs	r1, r0, #0
 801a082:	4615      	mov	r5, r2
 801a084:	db01      	blt.n	801a08a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 801a086:	2c00      	cmp	r4, #0
 801a088:	da06      	bge.n	801a098 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 801a08a:	4b11      	ldr	r3, [pc, #68]	; (801a0d0 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 801a08c:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 801a090:	4a10      	ldr	r2, [pc, #64]	; (801a0d4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 801a092:	4811      	ldr	r0, [pc, #68]	; (801a0d8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 801a094:	f00e f9f6 	bl	8028484 <__assert_func>
 801a098:	428c      	cmp	r4, r1
 801a09a:	dd06      	ble.n	801a0aa <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 801a09c:	4620      	mov	r0, r4
 801a09e:	f7ff ffed 	bl	801a07c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a0a2:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801a0a6:	b003      	add	sp, #12
 801a0a8:	bd30      	pop	{r4, r5, pc}
 801a0aa:	4349      	muls	r1, r1
 801a0ac:	fb04 1004 	mla	r0, r4, r4, r1
 801a0b0:	f7ff ffae 	bl	801a010 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801a0b4:	6028      	str	r0, [r5, #0]
 801a0b6:	2800      	cmp	r0, #0
 801a0b8:	d0f5      	beq.n	801a0a6 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801a0ba:	4602      	mov	r2, r0
 801a0bc:	ab01      	add	r3, sp, #4
 801a0be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a0c2:	4620      	mov	r0, r4
 801a0c4:	f002 fdee 	bl	801cca4 <_ZN8touchgfx6muldivElllRl>
 801a0c8:	f7ff ffb6 	bl	801a038 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801a0cc:	e7eb      	b.n	801a0a6 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801a0ce:	bf00      	nop
 801a0d0:	0802c6e9 	.word	0x0802c6e9
 801a0d4:	0802c7b0 	.word	0x0802c7b0
 801a0d8:	0802c6fa 	.word	0x0802c6fa

0801a0dc <_ZN8touchgfx4LineC1Ev>:
 801a0dc:	b510      	push	{r4, lr}
 801a0de:	4604      	mov	r4, r0
 801a0e0:	f7ff ff28 	bl	8019f34 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801a0e4:	4b0c      	ldr	r3, [pc, #48]	; (801a118 <_ZN8touchgfx4LineC1Ev+0x3c>)
 801a0e6:	2220      	movs	r2, #32
 801a0e8:	4620      	mov	r0, r4
 801a0ea:	6023      	str	r3, [r4, #0]
 801a0ec:	2300      	movs	r3, #0
 801a0ee:	6422      	str	r2, [r4, #64]	; 0x40
 801a0f0:	2212      	movs	r2, #18
 801a0f2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801a0f6:	6722      	str	r2, [r4, #112]	; 0x70
 801a0f8:	60a3      	str	r3, [r4, #8]
 801a0fa:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801a0fe:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801a102:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a106:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 801a10a:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 801a10e:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 801a112:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 801a116:	bd10      	pop	{r4, pc}
 801a118:	0802c738 	.word	0x0802c738

0801a11c <_ZNK8touchgfx4Line18getLineEndingStyleEv>:
 801a11c:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 801a120:	4770      	bx	lr
	...

0801a124 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 801a124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a128:	6b86      	ldr	r6, [r0, #56]	; 0x38
 801a12a:	b085      	sub	sp, #20
 801a12c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a12e:	4604      	mov	r4, r0
 801a130:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801a132:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801a134:	1af6      	subs	r6, r6, r3
 801a136:	eba5 0502 	sub.w	r5, r5, r2
 801a13a:	f040 809b 	bne.w	801a274 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 801a13e:	b955      	cbnz	r5, 801a156 <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 801a140:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 801a144:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801a148:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801a14c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801a150:	b005      	add	sp, #20
 801a152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a156:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 801a15a:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 801a15e:	f04f 0802 	mov.w	r8, #2
 801a162:	463a      	mov	r2, r7
 801a164:	4629      	mov	r1, r5
 801a166:	ab03      	add	r3, sp, #12
 801a168:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a16a:	f002 fd9b 	bl	801cca4 <_ZN8touchgfx6muldivElllRl>
 801a16e:	ab03      	add	r3, sp, #12
 801a170:	463a      	mov	r2, r7
 801a172:	4631      	mov	r1, r6
 801a174:	fb90 f5f8 	sdiv	r5, r0, r8
 801a178:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a17a:	f002 fd93 	bl	801cca4 <_ZN8touchgfx6muldivElllRl>
 801a17e:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 801a182:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 801a186:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 801a18a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 801a18c:	fb90 f0f8 	sdiv	r0, r0, r8
 801a190:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801a194:	eba8 0305 	sub.w	r3, r8, r5
 801a198:	f1ba 0f00 	cmp.w	sl, #0
 801a19c:	f040 80c3 	bne.w	801a326 <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 801a1a0:	64a3      	str	r3, [r4, #72]	; 0x48
 801a1a2:	19c3      	adds	r3, r0, r7
 801a1a4:	65a3      	str	r3, [r4, #88]	; 0x58
 801a1a6:	ebae 0305 	sub.w	r3, lr, r5
 801a1aa:	64e3      	str	r3, [r4, #76]	; 0x4c
 801a1ac:	eb00 030c 	add.w	r3, r0, ip
 801a1b0:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a1b2:	eb05 030e 	add.w	r3, r5, lr
 801a1b6:	6523      	str	r3, [r4, #80]	; 0x50
 801a1b8:	ebac 0300 	sub.w	r3, ip, r0
 801a1bc:	6623      	str	r3, [r4, #96]	; 0x60
 801a1be:	eb05 0308 	add.w	r3, r5, r8
 801a1c2:	6563      	str	r3, [r4, #84]	; 0x54
 801a1c4:	1a3b      	subs	r3, r7, r0
 801a1c6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 801a1c8:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 801a1cc:	6663      	str	r3, [r4, #100]	; 0x64
 801a1ce:	f104 0358 	add.w	r3, r4, #88	; 0x58
 801a1d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a1d4:	4632      	mov	r2, r6
 801a1d6:	9301      	str	r3, [sp, #4]
 801a1d8:	9100      	str	r1, [sp, #0]
 801a1da:	f859 bb04 	ldr.w	fp, [r9], #4
 801a1de:	9b00      	ldr	r3, [sp, #0]
 801a1e0:	455e      	cmp	r6, fp
 801a1e2:	bfa8      	it	ge
 801a1e4:	465e      	movge	r6, fp
 801a1e6:	455a      	cmp	r2, fp
 801a1e8:	bfb8      	it	lt
 801a1ea:	465a      	movlt	r2, fp
 801a1ec:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 801a1f0:	4559      	cmp	r1, fp
 801a1f2:	bfa8      	it	ge
 801a1f4:	4659      	movge	r1, fp
 801a1f6:	455b      	cmp	r3, fp
 801a1f8:	bfb8      	it	lt
 801a1fa:	465b      	movlt	r3, fp
 801a1fc:	9300      	str	r3, [sp, #0]
 801a1fe:	9b01      	ldr	r3, [sp, #4]
 801a200:	454b      	cmp	r3, r9
 801a202:	d1ea      	bne.n	801a1da <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 801a204:	f04f 0b20 	mov.w	fp, #32
 801a208:	b209      	sxth	r1, r1
 801a20a:	b212      	sxth	r2, r2
 801a20c:	f1ba 0f01 	cmp.w	sl, #1
 801a210:	b236      	sxth	r6, r6
 801a212:	fb91 f9fb 	sdiv	r9, r1, fp
 801a216:	f9bd 1000 	ldrsh.w	r1, [sp]
 801a21a:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 801a21e:	fb92 f2fb 	sdiv	r2, r2, fp
 801a222:	fb91 f1fb 	sdiv	r1, r1, fp
 801a226:	fb96 f6fb 	sdiv	r6, r6, fp
 801a22a:	f102 0201 	add.w	r2, r2, #1
 801a22e:	f101 0101 	add.w	r1, r1, #1
 801a232:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 801a236:	eba1 0109 	sub.w	r1, r1, r9
 801a23a:	eba2 0606 	sub.w	r6, r2, r6
 801a23e:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 801a242:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 801a246:	d183      	bne.n	801a150 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801a248:	eba8 0305 	sub.w	r3, r8, r5
 801a24c:	64a3      	str	r3, [r4, #72]	; 0x48
 801a24e:	19c3      	adds	r3, r0, r7
 801a250:	65a3      	str	r3, [r4, #88]	; 0x58
 801a252:	ebae 0305 	sub.w	r3, lr, r5
 801a256:	64e3      	str	r3, [r4, #76]	; 0x4c
 801a258:	eb00 030c 	add.w	r3, r0, ip
 801a25c:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a25e:	eb05 030e 	add.w	r3, r5, lr
 801a262:	4445      	add	r5, r8
 801a264:	6523      	str	r3, [r4, #80]	; 0x50
 801a266:	ebac 0300 	sub.w	r3, ip, r0
 801a26a:	1a38      	subs	r0, r7, r0
 801a26c:	6565      	str	r5, [r4, #84]	; 0x54
 801a26e:	6623      	str	r3, [r4, #96]	; 0x60
 801a270:	6660      	str	r0, [r4, #100]	; 0x64
 801a272:	e76d      	b.n	801a150 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801a274:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 801a278:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 801a27c:	2d00      	cmp	r5, #0
 801a27e:	f43f af6e 	beq.w	801a15e <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801a282:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801a286:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801a28a:	fb93 f2f7 	sdiv	r2, r3, r7
 801a28e:	fb07 3312 	mls	r3, r7, r2, r3
 801a292:	b34b      	cbz	r3, 801a2e8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 801a294:	fb97 f2f3 	sdiv	r2, r7, r3
 801a298:	fb03 7712 	mls	r7, r3, r2, r7
 801a29c:	2f00      	cmp	r7, #0
 801a29e:	d1f4      	bne.n	801a28a <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 801a2a0:	2b01      	cmp	r3, #1
 801a2a2:	f24b 5204 	movw	r2, #46340	; 0xb504
 801a2a6:	bf18      	it	ne
 801a2a8:	fb96 f6f3 	sdivne	r6, r6, r3
 801a2ac:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 801a2b0:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 801a2b4:	bf18      	it	ne
 801a2b6:	fb95 f5f3 	sdivne	r5, r5, r3
 801a2ba:	4291      	cmp	r1, r2
 801a2bc:	dd16      	ble.n	801a2ec <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 801a2be:	2d00      	cmp	r5, #0
 801a2c0:	da4d      	bge.n	801a35e <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 801a2c2:	4b29      	ldr	r3, [pc, #164]	; (801a368 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 801a2c4:	429d      	cmp	r5, r3
 801a2c6:	da27      	bge.n	801a318 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 801a2c8:	426a      	negs	r2, r5
 801a2ca:	f24b 5304 	movw	r3, #46340	; 0xb504
 801a2ce:	fb91 f1f3 	sdiv	r1, r1, r3
 801a2d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801a2d6:	4299      	cmp	r1, r3
 801a2d8:	bfcc      	ite	gt
 801a2da:	1c4b      	addgt	r3, r1, #1
 801a2dc:	3301      	addle	r3, #1
 801a2de:	fb96 f6f3 	sdiv	r6, r6, r3
 801a2e2:	fb95 f5f3 	sdiv	r5, r5, r3
 801a2e6:	e00f      	b.n	801a308 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 801a2e8:	463b      	mov	r3, r7
 801a2ea:	e7d9      	b.n	801a2a0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 801a2ec:	2d00      	cmp	r5, #0
 801a2ee:	fb92 f2f1 	sdiv	r2, r2, r1
 801a2f2:	da13      	bge.n	801a31c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 801a2f4:	4269      	negs	r1, r5
 801a2f6:	f24b 5304 	movw	r3, #46340	; 0xb504
 801a2fa:	fb93 f3f1 	sdiv	r3, r3, r1
 801a2fe:	429a      	cmp	r2, r3
 801a300:	bfa8      	it	ge
 801a302:	461a      	movge	r2, r3
 801a304:	4356      	muls	r6, r2
 801a306:	4355      	muls	r5, r2
 801a308:	fb05 f005 	mul.w	r0, r5, r5
 801a30c:	fb06 0006 	mla	r0, r6, r6, r0
 801a310:	f7ff fe7e 	bl	801a010 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801a314:	4607      	mov	r7, r0
 801a316:	e722      	b.n	801a15e <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801a318:	2200      	movs	r2, #0
 801a31a:	e7eb      	b.n	801a2f4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 801a31c:	4629      	mov	r1, r5
 801a31e:	e7ea      	b.n	801a2f6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801a320:	4629      	mov	r1, r5
 801a322:	2200      	movs	r2, #0
 801a324:	e7e7      	b.n	801a2f6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801a326:	1a1b      	subs	r3, r3, r0
 801a328:	64a3      	str	r3, [r4, #72]	; 0x48
 801a32a:	19c3      	adds	r3, r0, r7
 801a32c:	1b5b      	subs	r3, r3, r5
 801a32e:	65a3      	str	r3, [r4, #88]	; 0x58
 801a330:	ebae 0305 	sub.w	r3, lr, r5
 801a334:	4403      	add	r3, r0
 801a336:	64e3      	str	r3, [r4, #76]	; 0x4c
 801a338:	eb00 030c 	add.w	r3, r0, ip
 801a33c:	442b      	add	r3, r5
 801a33e:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a340:	eb05 030e 	add.w	r3, r5, lr
 801a344:	4403      	add	r3, r0
 801a346:	6523      	str	r3, [r4, #80]	; 0x50
 801a348:	ebac 0300 	sub.w	r3, ip, r0
 801a34c:	442b      	add	r3, r5
 801a34e:	6623      	str	r3, [r4, #96]	; 0x60
 801a350:	eb05 0308 	add.w	r3, r5, r8
 801a354:	1a1b      	subs	r3, r3, r0
 801a356:	6563      	str	r3, [r4, #84]	; 0x54
 801a358:	1a3b      	subs	r3, r7, r0
 801a35a:	1b5b      	subs	r3, r3, r5
 801a35c:	e733      	b.n	801a1c6 <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 801a35e:	4295      	cmp	r5, r2
 801a360:	ddde      	ble.n	801a320 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 801a362:	462a      	mov	r2, r5
 801a364:	e7b1      	b.n	801a2ca <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 801a366:	bf00      	nop
 801a368:	ffff4afc 	.word	0xffff4afc

0801a36c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 801a36c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a36e:	428b      	cmp	r3, r1
 801a370:	d102      	bne.n	801a378 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 801a372:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801a374:	4293      	cmp	r3, r2
 801a376:	d003      	beq.n	801a380 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 801a378:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 801a37c:	f7ff bed2 	b.w	801a124 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801a380:	4770      	bx	lr

0801a382 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_>:
 801a382:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a384:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a386:	4604      	mov	r4, r0
 801a388:	460e      	mov	r6, r1
 801a38a:	4615      	mov	r5, r2
 801a38c:	428b      	cmp	r3, r1
 801a38e:	d102      	bne.n	801a396 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_+0x14>
 801a390:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801a392:	4293      	cmp	r3, r2
 801a394:	d017      	beq.n	801a3c6 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_+0x44>
 801a396:	6823      	ldr	r3, [r4, #0]
 801a398:	4621      	mov	r1, r4
 801a39a:	4668      	mov	r0, sp
 801a39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a39e:	4798      	blx	r3
 801a3a0:	4620      	mov	r0, r4
 801a3a2:	e9c4 650e 	strd	r6, r5, [r4, #56]	; 0x38
 801a3a6:	f7ff febd 	bl	801a124 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801a3aa:	6823      	ldr	r3, [r4, #0]
 801a3ac:	4621      	mov	r1, r4
 801a3ae:	a802      	add	r0, sp, #8
 801a3b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a3b2:	4798      	blx	r3
 801a3b4:	a902      	add	r1, sp, #8
 801a3b6:	4668      	mov	r0, sp
 801a3b8:	f7ff fde2 	bl	8019f80 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a3bc:	6823      	ldr	r3, [r4, #0]
 801a3be:	4669      	mov	r1, sp
 801a3c0:	4620      	mov	r0, r4
 801a3c2:	691b      	ldr	r3, [r3, #16]
 801a3c4:	4798      	blx	r3
 801a3c6:	b004      	add	sp, #16
 801a3c8:	bd70      	pop	{r4, r5, r6, pc}

0801a3ca <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 801a3ca:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 801a3ce:	f7ff bea9 	b.w	801a124 <_ZN8touchgfx4Line17updateCachedShapeEv>

0801a3d2 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 801a3d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a3d6:	b0b3      	sub	sp, #204	; 0xcc
 801a3d8:	4604      	mov	r4, r0
 801a3da:	460a      	mov	r2, r1
 801a3dc:	4601      	mov	r1, r0
 801a3de:	a803      	add	r0, sp, #12
 801a3e0:	ad32      	add	r5, sp, #200	; 0xc8
 801a3e2:	f00c fc79 	bl	8026cd8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801a3e6:	2300      	movs	r3, #0
 801a3e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801a3ea:	f845 3dc8 	str.w	r3, [r5, #-200]!
 801a3ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a3f0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a3f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a3f4:	1ac0      	subs	r0, r0, r3
 801a3f6:	eba1 0102 	sub.w	r1, r1, r2
 801a3fa:	d43c      	bmi.n	801a476 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 801a3fc:	2900      	cmp	r1, #0
 801a3fe:	462a      	mov	r2, r5
 801a400:	db33      	blt.n	801a46a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 801a402:	f7ff fe3b 	bl	801a07c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a406:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 801a40a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801a40c:	a803      	add	r0, sp, #12
 801a40e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a410:	f00c fe2b 	bl	802706a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801a414:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801a416:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801a418:	a803      	add	r0, sp, #12
 801a41a:	f00c fdb5 	bl	8026f88 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a41e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a422:	2b01      	cmp	r3, #1
 801a424:	d137      	bne.n	801a496 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801a426:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801a428:	2eb3      	cmp	r6, #179	; 0xb3
 801a42a:	dc34      	bgt.n	801a496 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801a42c:	eba7 0906 	sub.w	r9, r7, r6
 801a430:	4648      	mov	r0, r9
 801a432:	f7fe fec3 	bl	80191bc <_ZN8touchgfx7CWRUtil4sineEi>
 801a436:	a901      	add	r1, sp, #4
 801a438:	9001      	str	r0, [sp, #4]
 801a43a:	4628      	mov	r0, r5
 801a43c:	f7fe feb2 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a440:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a442:	eb00 0801 	add.w	r8, r0, r1
 801a446:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801a44a:	f7fe feb7 	bl	80191bc <_ZN8touchgfx7CWRUtil4sineEi>
 801a44e:	a902      	add	r1, sp, #8
 801a450:	9002      	str	r0, [sp, #8]
 801a452:	4628      	mov	r0, r5
 801a454:	f7fe fea6 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a458:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801a45a:	4641      	mov	r1, r8
 801a45c:	1a12      	subs	r2, r2, r0
 801a45e:	a803      	add	r0, sp, #12
 801a460:	f00c fd92 	bl	8026f88 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a464:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a466:	441e      	add	r6, r3
 801a468:	e7de      	b.n	801a428 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 801a46a:	4249      	negs	r1, r1
 801a46c:	f7ff fe06 	bl	801a07c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a470:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 801a474:	e7c9      	b.n	801a40a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801a476:	2900      	cmp	r1, #0
 801a478:	f1c0 0000 	rsb	r0, r0, #0
 801a47c:	462a      	mov	r2, r5
 801a47e:	db04      	blt.n	801a48a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 801a480:	f7ff fdfc 	bl	801a07c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a484:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 801a488:	e7bf      	b.n	801a40a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801a48a:	4249      	negs	r1, r1
 801a48c:	f7ff fdf6 	bl	801a07c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a490:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 801a494:	e7b9      	b.n	801a40a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801a496:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801a498:	a803      	add	r0, sp, #12
 801a49a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801a49c:	f00c fd74 	bl	8026f88 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a4a0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a4a2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801a4a4:	a803      	add	r0, sp, #12
 801a4a6:	f00c fd6f 	bl	8026f88 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a4aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a4ae:	2b01      	cmp	r3, #1
 801a4b0:	d123      	bne.n	801a4fa <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801a4b2:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801a4b4:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 801a4b8:	2e00      	cmp	r6, #0
 801a4ba:	dd1e      	ble.n	801a4fa <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801a4bc:	eb06 0907 	add.w	r9, r6, r7
 801a4c0:	4648      	mov	r0, r9
 801a4c2:	f7fe fe7b 	bl	80191bc <_ZN8touchgfx7CWRUtil4sineEi>
 801a4c6:	a901      	add	r1, sp, #4
 801a4c8:	9001      	str	r0, [sp, #4]
 801a4ca:	4628      	mov	r0, r5
 801a4cc:	f7fe fe6a 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a4d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a4d2:	eb00 0801 	add.w	r8, r0, r1
 801a4d6:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801a4da:	f7fe fe6f 	bl	80191bc <_ZN8touchgfx7CWRUtil4sineEi>
 801a4de:	a902      	add	r1, sp, #8
 801a4e0:	9002      	str	r0, [sp, #8]
 801a4e2:	4628      	mov	r0, r5
 801a4e4:	f7fe fe5e 	bl	80191a4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a4e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a4ea:	4641      	mov	r1, r8
 801a4ec:	1a12      	subs	r2, r2, r0
 801a4ee:	a803      	add	r0, sp, #12
 801a4f0:	f00c fd4a 	bl	8026f88 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a4f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a4f6:	1af6      	subs	r6, r6, r3
 801a4f8:	e7de      	b.n	801a4b8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 801a4fa:	a803      	add	r0, sp, #12
 801a4fc:	f00c feb9 	bl	8027272 <_ZN8touchgfx6Canvas6renderEv>
 801a500:	4604      	mov	r4, r0
 801a502:	a803      	add	r0, sp, #12
 801a504:	f00c fef2 	bl	80272ec <_ZN8touchgfx6CanvasD1Ev>
 801a508:	4620      	mov	r0, r4
 801a50a:	b033      	add	sp, #204	; 0xcc
 801a50c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a510 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801a510:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801a514:	4770      	bx	lr

0801a516 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801a516:	b570      	push	{r4, r5, r6, lr}
 801a518:	790b      	ldrb	r3, [r1, #4]
 801a51a:	4604      	mov	r4, r0
 801a51c:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801a520:	460e      	mov	r6, r1
 801a522:	2b00      	cmp	r3, #0
 801a524:	bf0c      	ite	eq
 801a526:	2301      	moveq	r3, #1
 801a528:	2300      	movne	r3, #0
 801a52a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801a52e:	d110      	bne.n	801a552 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801a530:	b185      	cbz	r5, 801a554 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 801a532:	7933      	ldrb	r3, [r6, #4]
 801a534:	2b01      	cmp	r3, #1
 801a536:	d113      	bne.n	801a560 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801a538:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801a53a:	b188      	cbz	r0, 801a560 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801a53c:	6803      	ldr	r3, [r0, #0]
 801a53e:	68db      	ldr	r3, [r3, #12]
 801a540:	4798      	blx	r3
 801a542:	b168      	cbz	r0, 801a560 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801a544:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801a546:	4621      	mov	r1, r4
 801a548:	6803      	ldr	r3, [r0, #0]
 801a54a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a54e:	689b      	ldr	r3, [r3, #8]
 801a550:	4718      	bx	r3
 801a552:	b12d      	cbz	r5, 801a560 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801a554:	6823      	ldr	r3, [r4, #0]
 801a556:	4620      	mov	r0, r4
 801a558:	695b      	ldr	r3, [r3, #20]
 801a55a:	4798      	blx	r3
 801a55c:	2d00      	cmp	r5, #0
 801a55e:	d1e8      	bne.n	801a532 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801a560:	bd70      	pop	{r4, r5, r6, pc}

0801a562 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801a562:	6803      	ldr	r3, [r0, #0]
 801a564:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801a568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a56a:	4718      	bx	r3

0801a56c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801a56c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801a570:	2bff      	cmp	r3, #255	; 0xff
 801a572:	b510      	push	{r4, lr}
 801a574:	d104      	bne.n	801a580 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801a576:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 801a578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a57c:	429a      	cmp	r2, r3
 801a57e:	d105      	bne.n	801a58c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801a580:	2300      	movs	r3, #0
 801a582:	8003      	strh	r3, [r0, #0]
 801a584:	8043      	strh	r3, [r0, #2]
 801a586:	8083      	strh	r3, [r0, #4]
 801a588:	80c3      	strh	r3, [r0, #6]
 801a58a:	bd10      	pop	{r4, pc}
 801a58c:	2300      	movs	r3, #0
 801a58e:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801a592:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801a596:	8003      	strh	r3, [r0, #0]
 801a598:	8043      	strh	r3, [r0, #2]
 801a59a:	8084      	strh	r4, [r0, #4]
 801a59c:	80c2      	strh	r2, [r0, #6]
 801a59e:	e7f4      	b.n	801a58a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801a5a0 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801a5a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a5a4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801a5a8:	b087      	sub	sp, #28
 801a5aa:	4604      	mov	r4, r0
 801a5ac:	4689      	mov	r9, r1
 801a5ae:	b363      	cbz	r3, 801a60a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801a5b0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801a5b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a5b6:	429a      	cmp	r2, r3
 801a5b8:	d027      	beq.n	801a60a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801a5ba:	ad06      	add	r5, sp, #24
 801a5bc:	2700      	movs	r7, #0
 801a5be:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801a5c2:	4628      	mov	r0, r5
 801a5c4:	f004 f910 	bl	801e7e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a5c8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801a5cc:	a904      	add	r1, sp, #16
 801a5ce:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a5d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a5d6:	4620      	mov	r0, r4
 801a5d8:	6823      	ldr	r3, [r4, #0]
 801a5da:	9704      	str	r7, [sp, #16]
 801a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5de:	4798      	blx	r3
 801a5e0:	f7f5 fac8 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 801a5e4:	6803      	ldr	r3, [r0, #0]
 801a5e6:	4606      	mov	r6, r0
 801a5e8:	4628      	mov	r0, r5
 801a5ea:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801a5ee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801a5f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a5f4:	f004 f9c6 	bl	801e984 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a5f8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a5fc:	4601      	mov	r1, r0
 801a5fe:	9701      	str	r7, [sp, #4]
 801a600:	aa04      	add	r2, sp, #16
 801a602:	9300      	str	r3, [sp, #0]
 801a604:	4630      	mov	r0, r6
 801a606:	464b      	mov	r3, r9
 801a608:	47c0      	blx	r8
 801a60a:	b007      	add	sp, #28
 801a60c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a610 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801a610:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a612:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a616:	460d      	mov	r5, r1
 801a618:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801a61c:	2100      	movs	r1, #0
 801a61e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a622:	4604      	mov	r4, r0
 801a624:	6803      	ldr	r3, [r0, #0]
 801a626:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a62a:	6a1b      	ldr	r3, [r3, #32]
 801a62c:	9100      	str	r1, [sp, #0]
 801a62e:	4669      	mov	r1, sp
 801a630:	4798      	blx	r3
 801a632:	4621      	mov	r1, r4
 801a634:	a802      	add	r0, sp, #8
 801a636:	f002 fa70 	bl	801cb1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a63a:	f7f5 fa9b 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 801a63e:	6803      	ldr	r3, [r0, #0]
 801a640:	aa02      	add	r2, sp, #8
 801a642:	4669      	mov	r1, sp
 801a644:	695e      	ldr	r6, [r3, #20]
 801a646:	462b      	mov	r3, r5
 801a648:	47b0      	blx	r6
 801a64a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a64e:	2800      	cmp	r0, #0
 801a650:	bf08      	it	eq
 801a652:	461d      	moveq	r5, r3
 801a654:	84e5      	strh	r5, [r4, #38]	; 0x26
 801a656:	b004      	add	sp, #16
 801a658:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a65c <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 801a65c:	2200      	movs	r2, #0
 801a65e:	8082      	strh	r2, [r0, #4]
 801a660:	80c2      	strh	r2, [r0, #6]
 801a662:	8102      	strh	r2, [r0, #8]
 801a664:	8142      	strh	r2, [r0, #10]
 801a666:	8182      	strh	r2, [r0, #12]
 801a668:	81c2      	strh	r2, [r0, #14]
 801a66a:	8202      	strh	r2, [r0, #16]
 801a66c:	8242      	strh	r2, [r0, #18]
 801a66e:	61c2      	str	r2, [r0, #28]
 801a670:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801a674:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a678:	2201      	movs	r2, #1
 801a67a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801a67e:	4a04      	ldr	r2, [pc, #16]	; (801a690 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 801a680:	6002      	str	r2, [r0, #0]
 801a682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a686:	84c2      	strh	r2, [r0, #38]	; 0x26
 801a688:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801a68c:	4770      	bx	lr
 801a68e:	bf00      	nop
 801a690:	0802c890 	.word	0x0802c890

0801a694 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801a694:	2200      	movs	r2, #0
 801a696:	8002      	strh	r2, [r0, #0]
 801a698:	8042      	strh	r2, [r0, #2]
 801a69a:	8082      	strh	r2, [r0, #4]
 801a69c:	80c2      	strh	r2, [r0, #6]
 801a69e:	4770      	bx	lr

0801a6a0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801a6a0:	b570      	push	{r4, r5, r6, lr}
 801a6a2:	6803      	ldr	r3, [r0, #0]
 801a6a4:	4604      	mov	r4, r0
 801a6a6:	4615      	mov	r5, r2
 801a6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6aa:	4798      	blx	r3
 801a6ac:	6823      	ldr	r3, [r4, #0]
 801a6ae:	4629      	mov	r1, r5
 801a6b0:	4620      	mov	r0, r4
 801a6b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a6b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a6b8:	4718      	bx	r3
	...

0801a6bc <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801a6bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a6be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a6c2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801a6c4:	4299      	cmp	r1, r3
 801a6c6:	d029      	beq.n	801a71c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 801a6c8:	4b15      	ldr	r3, [pc, #84]	; (801a720 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	b92b      	cbnz	r3, 801a6da <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 801a6ce:	4b15      	ldr	r3, [pc, #84]	; (801a724 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801a6d0:	21b1      	movs	r1, #177	; 0xb1
 801a6d2:	4a15      	ldr	r2, [pc, #84]	; (801a728 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801a6d4:	4815      	ldr	r0, [pc, #84]	; (801a72c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801a6d6:	f00d fed5 	bl	8028484 <__assert_func>
 801a6da:	4a15      	ldr	r2, [pc, #84]	; (801a730 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 801a6dc:	8812      	ldrh	r2, [r2, #0]
 801a6de:	428a      	cmp	r2, r1
 801a6e0:	d803      	bhi.n	801a6ea <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 801a6e2:	4b14      	ldr	r3, [pc, #80]	; (801a734 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 801a6e4:	21b2      	movs	r1, #178	; 0xb2
 801a6e6:	4a10      	ldr	r2, [pc, #64]	; (801a728 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801a6e8:	e7f4      	b.n	801a6d4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 801a6ea:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801a6ee:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801a6f2:	4b11      	ldr	r3, [pc, #68]	; (801a738 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 801a6f4:	7854      	ldrb	r4, [r2, #1]
 801a6f6:	681b      	ldr	r3, [r3, #0]
 801a6f8:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801a6fc:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801a700:	682b      	ldr	r3, [r5, #0]
 801a702:	69de      	ldr	r6, [r3, #28]
 801a704:	4b0d      	ldr	r3, [pc, #52]	; (801a73c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 801a706:	6818      	ldr	r0, [r3, #0]
 801a708:	f7fa fc34 	bl	8014f74 <_ZNK8touchgfx5Texts7getTextEt>
 801a70c:	2300      	movs	r3, #0
 801a70e:	4602      	mov	r2, r0
 801a710:	4621      	mov	r1, r4
 801a712:	9300      	str	r3, [sp, #0]
 801a714:	4628      	mov	r0, r5
 801a716:	47b0      	blx	r6
 801a718:	b002      	add	sp, #8
 801a71a:	bd70      	pop	{r4, r5, r6, pc}
 801a71c:	2000      	movs	r0, #0
 801a71e:	e7fb      	b.n	801a718 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 801a720:	2000b4ac 	.word	0x2000b4ac
 801a724:	0802c8f8 	.word	0x0802c8f8
 801a728:	0802ca34 	.word	0x0802ca34
 801a72c:	0802c93a 	.word	0x0802c93a
 801a730:	2000b4b0 	.word	0x2000b4b0
 801a734:	0802c963 	.word	0x0802c963
 801a738:	2000b4b4 	.word	0x2000b4b4
 801a73c:	2000b4b8 	.word	0x2000b4b8

0801a740 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 801a740:	b570      	push	{r4, r5, r6, lr}
 801a742:	6803      	ldr	r3, [r0, #0]
 801a744:	4604      	mov	r4, r0
 801a746:	b28d      	uxth	r5, r1
 801a748:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801a74a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 801a74c:	4b10      	ldr	r3, [pc, #64]	; (801a790 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	b92b      	cbnz	r3, 801a75e <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 801a752:	4b10      	ldr	r3, [pc, #64]	; (801a794 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 801a754:	21b1      	movs	r1, #177	; 0xb1
 801a756:	4a10      	ldr	r2, [pc, #64]	; (801a798 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801a758:	4810      	ldr	r0, [pc, #64]	; (801a79c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 801a75a:	f00d fe93 	bl	8028484 <__assert_func>
 801a75e:	4910      	ldr	r1, [pc, #64]	; (801a7a0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 801a760:	8809      	ldrh	r1, [r1, #0]
 801a762:	4291      	cmp	r1, r2
 801a764:	d803      	bhi.n	801a76e <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801a766:	4b0f      	ldr	r3, [pc, #60]	; (801a7a4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 801a768:	21b2      	movs	r1, #178	; 0xb2
 801a76a:	4a0b      	ldr	r2, [pc, #44]	; (801a798 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801a76c:	e7f4      	b.n	801a758 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 801a76e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801a772:	4b0d      	ldr	r3, [pc, #52]	; (801a7a8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a77a:	6803      	ldr	r3, [r0, #0]
 801a77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a77e:	4798      	blx	r3
 801a780:	1a29      	subs	r1, r5, r0
 801a782:	4633      	mov	r3, r6
 801a784:	4620      	mov	r0, r4
 801a786:	b209      	sxth	r1, r1
 801a788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a78c:	4718      	bx	r3
 801a78e:	bf00      	nop
 801a790:	2000b4ac 	.word	0x2000b4ac
 801a794:	0802c8f8 	.word	0x0802c8f8
 801a798:	0802ca34 	.word	0x0802ca34
 801a79c:	0802c93a 	.word	0x0802c93a
 801a7a0:	2000b4b0 	.word	0x2000b4b0
 801a7a4:	0802c963 	.word	0x0802c963
 801a7a8:	2000b4b4 	.word	0x2000b4b4

0801a7ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801a7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a7b4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801a7b6:	b08c      	sub	sp, #48	; 0x30
 801a7b8:	4604      	mov	r4, r0
 801a7ba:	4293      	cmp	r3, r2
 801a7bc:	4688      	mov	r8, r1
 801a7be:	d05f      	beq.n	801a880 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801a7c0:	4e31      	ldr	r6, [pc, #196]	; (801a888 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 801a7c2:	6832      	ldr	r2, [r6, #0]
 801a7c4:	b92a      	cbnz	r2, 801a7d2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801a7c6:	4b31      	ldr	r3, [pc, #196]	; (801a88c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 801a7c8:	21b1      	movs	r1, #177	; 0xb1
 801a7ca:	4a31      	ldr	r2, [pc, #196]	; (801a890 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801a7cc:	4831      	ldr	r0, [pc, #196]	; (801a894 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 801a7ce:	f00d fe59 	bl	8028484 <__assert_func>
 801a7d2:	4d31      	ldr	r5, [pc, #196]	; (801a898 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 801a7d4:	8829      	ldrh	r1, [r5, #0]
 801a7d6:	4299      	cmp	r1, r3
 801a7d8:	d803      	bhi.n	801a7e2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801a7da:	4b30      	ldr	r3, [pc, #192]	; (801a89c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 801a7dc:	21b2      	movs	r1, #178	; 0xb2
 801a7de:	4a2c      	ldr	r2, [pc, #176]	; (801a890 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801a7e0:	e7f4      	b.n	801a7cc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 801a7e2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a7e6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801a7ea:	4b2d      	ldr	r3, [pc, #180]	; (801a8a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a7f2:	2a00      	cmp	r2, #0
 801a7f4:	d044      	beq.n	801a880 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801a7f6:	784b      	ldrb	r3, [r1, #1]
 801a7f8:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 801a7fc:	f3c3 0901 	ubfx	r9, r3, #0, #2
 801a800:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801a804:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801a808:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801a80c:	4b25      	ldr	r3, [pc, #148]	; (801a8a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 801a80e:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 801a818:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801a81c:	9207      	str	r2, [sp, #28]
 801a81e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a820:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a824:	9009      	str	r0, [sp, #36]	; 0x24
 801a826:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801a82a:	f88d 9020 	strb.w	r9, [sp, #32]
 801a82e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801a832:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 801a836:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801a83a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801a83e:	b10a      	cbz	r2, 801a844 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 801a840:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 801a842:	b907      	cbnz	r7, 801a846 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 801a844:	689f      	ldr	r7, [r3, #8]
 801a846:	f10d 0914 	add.w	r9, sp, #20
 801a84a:	4621      	mov	r1, r4
 801a84c:	4648      	mov	r0, r9
 801a84e:	f002 f964 	bl	801cb1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a852:	6833      	ldr	r3, [r6, #0]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d0b6      	beq.n	801a7c6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 801a858:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801a85a:	882b      	ldrh	r3, [r5, #0]
 801a85c:	428b      	cmp	r3, r1
 801a85e:	d9bc      	bls.n	801a7da <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 801a860:	4b11      	ldr	r3, [pc, #68]	; (801a8a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 801a862:	6818      	ldr	r0, [r3, #0]
 801a864:	f7fa fb86 	bl	8014f74 <_ZNK8touchgfx5Texts7getTextEt>
 801a868:	2300      	movs	r3, #0
 801a86a:	9001      	str	r0, [sp, #4]
 801a86c:	4638      	mov	r0, r7
 801a86e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801a872:	ab07      	add	r3, sp, #28
 801a874:	9300      	str	r3, [sp, #0]
 801a876:	4643      	mov	r3, r8
 801a878:	e899 0006 	ldmia.w	r9, {r1, r2}
 801a87c:	f7fa fb0b 	bl	8014e96 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801a880:	b00c      	add	sp, #48	; 0x30
 801a882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a886:	bf00      	nop
 801a888:	2000b4ac 	.word	0x2000b4ac
 801a88c:	0802c8f8 	.word	0x0802c8f8
 801a890:	0802ca34 	.word	0x0802ca34
 801a894:	0802c93a 	.word	0x0802c93a
 801a898:	2000b4b0 	.word	0x2000b4b0
 801a89c:	0802c963 	.word	0x0802c963
 801a8a0:	2000b4b4 	.word	0x2000b4b4
 801a8a4:	2000b41c 	.word	0x2000b41c
 801a8a8:	2000b4b8 	.word	0x2000b4b8

0801a8ac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801a8ac:	b40e      	push	{r1, r2, r3}
 801a8ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a8b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8b6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801a8b8:	b09b      	sub	sp, #108	; 0x6c
 801a8ba:	4604      	mov	r4, r0
 801a8bc:	4293      	cmp	r3, r2
 801a8be:	d061      	beq.n	801a984 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 801a8c0:	aa24      	add	r2, sp, #144	; 0x90
 801a8c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a998 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 801a8c6:	9203      	str	r2, [sp, #12]
 801a8c8:	f8da 2000 	ldr.w	r2, [sl]
 801a8cc:	b92a      	cbnz	r2, 801a8da <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 801a8ce:	4b2e      	ldr	r3, [pc, #184]	; (801a988 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 801a8d0:	21b1      	movs	r1, #177	; 0xb1
 801a8d2:	4a2e      	ldr	r2, [pc, #184]	; (801a98c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 801a8d4:	482e      	ldr	r0, [pc, #184]	; (801a990 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 801a8d6:	f00d fdd5 	bl	8028484 <__assert_func>
 801a8da:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801a99c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 801a8de:	f8b8 1000 	ldrh.w	r1, [r8]
 801a8e2:	4299      	cmp	r1, r3
 801a8e4:	d803      	bhi.n	801a8ee <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 801a8e6:	4b2b      	ldr	r3, [pc, #172]	; (801a994 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 801a8e8:	21b2      	movs	r1, #178	; 0xb2
 801a8ea:	4a28      	ldr	r2, [pc, #160]	; (801a98c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 801a8ec:	e7f2      	b.n	801a8d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 801a8ee:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801a9a0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 801a8f2:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801a8f6:	f8d9 3000 	ldr.w	r3, [r9]
 801a8fa:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801a8fe:	683b      	ldr	r3, [r7, #0]
 801a900:	4638      	mov	r0, r7
 801a902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a904:	4798      	blx	r3
 801a906:	4606      	mov	r6, r0
 801a908:	b205      	sxth	r5, r0
 801a90a:	a804      	add	r0, sp, #16
 801a90c:	f002 fda7 	bl	801d45e <_ZN8touchgfx12TextProviderC1Ev>
 801a910:	683b      	ldr	r3, [r7, #0]
 801a912:	4638      	mov	r0, r7
 801a914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a916:	4798      	blx	r3
 801a918:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801a91a:	4603      	mov	r3, r0
 801a91c:	9a03      	ldr	r2, [sp, #12]
 801a91e:	a804      	add	r0, sp, #16
 801a920:	f002 fde2 	bl	801d4e8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a924:	f8da 3000 	ldr.w	r3, [sl]
 801a928:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d0ce      	beq.n	801a8ce <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 801a930:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801a932:	f8b8 0000 	ldrh.w	r0, [r8]
 801a936:	4290      	cmp	r0, r2
 801a938:	d9d5      	bls.n	801a8e6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801a93a:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 801a93e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801a942:	f8d9 3000 	ldr.w	r3, [r9]
 801a946:	787a      	ldrb	r2, [r7, #1]
 801a948:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 801a94c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801a950:	9700      	str	r7, [sp, #0]
 801a952:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801a956:	a804      	add	r0, sp, #16
 801a958:	f001 f850 	bl	801b9fc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801a95c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801a960:	b203      	sxth	r3, r0
 801a962:	18a9      	adds	r1, r5, r2
 801a964:	2900      	cmp	r1, #0
 801a966:	dd0b      	ble.n	801a980 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 801a968:	3b01      	subs	r3, #1
 801a96a:	fb13 f302 	smulbb	r3, r3, r2
 801a96e:	fb16 3300 	smlabb	r3, r6, r0, r3
 801a972:	b21d      	sxth	r5, r3
 801a974:	4628      	mov	r0, r5
 801a976:	b01b      	add	sp, #108	; 0x6c
 801a978:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a97c:	b003      	add	sp, #12
 801a97e:	4770      	bx	lr
 801a980:	2b00      	cmp	r3, #0
 801a982:	dcf7      	bgt.n	801a974 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801a984:	2500      	movs	r5, #0
 801a986:	e7f5      	b.n	801a974 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801a988:	0802c8f8 	.word	0x0802c8f8
 801a98c:	0802ca34 	.word	0x0802ca34
 801a990:	0802c93a 	.word	0x0802c93a
 801a994:	0802c963 	.word	0x0802c963
 801a998:	2000b4ac 	.word	0x2000b4ac
 801a99c:	2000b4b0 	.word	0x2000b4b0
 801a9a0:	2000b4b4 	.word	0x2000b4b4

0801a9a4 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801a9a4:	b570      	push	{r4, r5, r6, lr}
 801a9a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a9aa:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801a9ac:	4604      	mov	r4, r0
 801a9ae:	4299      	cmp	r1, r3
 801a9b0:	d01e      	beq.n	801a9f0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 801a9b2:	6803      	ldr	r3, [r0, #0]
 801a9b4:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801a9b6:	4b0f      	ldr	r3, [pc, #60]	; (801a9f4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	b92b      	cbnz	r3, 801a9c8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 801a9bc:	4b0e      	ldr	r3, [pc, #56]	; (801a9f8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 801a9be:	21b1      	movs	r1, #177	; 0xb1
 801a9c0:	4a0e      	ldr	r2, [pc, #56]	; (801a9fc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801a9c2:	480f      	ldr	r0, [pc, #60]	; (801aa00 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 801a9c4:	f00d fd5e 	bl	8028484 <__assert_func>
 801a9c8:	4b0e      	ldr	r3, [pc, #56]	; (801aa04 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 801a9ca:	881b      	ldrh	r3, [r3, #0]
 801a9cc:	428b      	cmp	r3, r1
 801a9ce:	d803      	bhi.n	801a9d8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 801a9d0:	4b0d      	ldr	r3, [pc, #52]	; (801aa08 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 801a9d2:	21b2      	movs	r1, #178	; 0xb2
 801a9d4:	4a09      	ldr	r2, [pc, #36]	; (801a9fc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801a9d6:	e7f4      	b.n	801a9c2 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 801a9d8:	4b0c      	ldr	r3, [pc, #48]	; (801aa0c <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 801a9da:	6818      	ldr	r0, [r3, #0]
 801a9dc:	f7fa faca 	bl	8014f74 <_ZNK8touchgfx5Texts7getTextEt>
 801a9e0:	2300      	movs	r3, #0
 801a9e2:	4601      	mov	r1, r0
 801a9e4:	46ac      	mov	ip, r5
 801a9e6:	4620      	mov	r0, r4
 801a9e8:	461a      	mov	r2, r3
 801a9ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a9ee:	4760      	bx	ip
 801a9f0:	2000      	movs	r0, #0
 801a9f2:	bd70      	pop	{r4, r5, r6, pc}
 801a9f4:	2000b4ac 	.word	0x2000b4ac
 801a9f8:	0802c8f8 	.word	0x0802c8f8
 801a9fc:	0802ca34 	.word	0x0802ca34
 801aa00:	0802c93a 	.word	0x0802c93a
 801aa04:	2000b4b0 	.word	0x2000b4b0
 801aa08:	0802c963 	.word	0x0802c963
 801aa0c:	2000b4b8 	.word	0x2000b4b8

0801aa10 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801aa10:	b570      	push	{r4, r5, r6, lr}
 801aa12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa16:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801aa18:	4604      	mov	r4, r0
 801aa1a:	429a      	cmp	r2, r3
 801aa1c:	d021      	beq.n	801aa62 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801aa1e:	6803      	ldr	r3, [r0, #0]
 801aa20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa22:	4798      	blx	r3
 801aa24:	6823      	ldr	r3, [r4, #0]
 801aa26:	4605      	mov	r5, r0
 801aa28:	4620      	mov	r0, r4
 801aa2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801aa2c:	4798      	blx	r3
 801aa2e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801aa32:	4606      	mov	r6, r0
 801aa34:	b22d      	sxth	r5, r5
 801aa36:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801aa3a:	6823      	ldr	r3, [r4, #0]
 801aa3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa3e:	d109      	bne.n	801aa54 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 801aa40:	4629      	mov	r1, r5
 801aa42:	4620      	mov	r0, r4
 801aa44:	4798      	blx	r3
 801aa46:	6823      	ldr	r3, [r4, #0]
 801aa48:	4631      	mov	r1, r6
 801aa4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa4c:	4620      	mov	r0, r4
 801aa4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa52:	4718      	bx	r3
 801aa54:	4601      	mov	r1, r0
 801aa56:	4620      	mov	r0, r4
 801aa58:	4798      	blx	r3
 801aa5a:	6823      	ldr	r3, [r4, #0]
 801aa5c:	4629      	mov	r1, r5
 801aa5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa60:	e7f4      	b.n	801aa4c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801aa62:	bd70      	pop	{r4, r5, r6, pc}

0801aa64 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 801aa64:	888a      	ldrh	r2, [r1, #4]
 801aa66:	8582      	strh	r2, [r0, #44]	; 0x2c
 801aa68:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801aa6c:	b922      	cbnz	r2, 801aa78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 801aa6e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801aa72:	b90b      	cbnz	r3, 801aa78 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 801aa74:	f7ff bfcc 	b.w	801aa10 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801aa78:	4770      	bx	lr

0801aa7a <_ZNK8touchgfx3Box12getSolidRectEv>:
 801aa7a:	2300      	movs	r3, #0
 801aa7c:	8003      	strh	r3, [r0, #0]
 801aa7e:	8043      	strh	r3, [r0, #2]
 801aa80:	8083      	strh	r3, [r0, #4]
 801aa82:	80c3      	strh	r3, [r0, #6]
 801aa84:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801aa88:	b91b      	cbnz	r3, 801aa92 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 801aa8a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801aa8e:	2bff      	cmp	r3, #255	; 0xff
 801aa90:	d103      	bne.n	801aa9a <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 801aa92:	890b      	ldrh	r3, [r1, #8]
 801aa94:	8083      	strh	r3, [r0, #4]
 801aa96:	894b      	ldrh	r3, [r1, #10]
 801aa98:	80c3      	strh	r3, [r0, #6]
 801aa9a:	4770      	bx	lr

0801aa9c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801aa9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aa9e:	4604      	mov	r4, r0
 801aaa0:	466b      	mov	r3, sp
 801aaa2:	6808      	ldr	r0, [r1, #0]
 801aaa4:	6849      	ldr	r1, [r1, #4]
 801aaa6:	c303      	stmia	r3!, {r0, r1}
 801aaa8:	6823      	ldr	r3, [r4, #0]
 801aaaa:	4669      	mov	r1, sp
 801aaac:	4620      	mov	r0, r4
 801aaae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aab0:	4798      	blx	r3
 801aab2:	4b08      	ldr	r3, [pc, #32]	; (801aad4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801aab4:	681b      	ldr	r3, [r3, #0]
 801aab6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801aaba:	b10a      	cbz	r2, 801aac0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801aabc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801aabe:	b900      	cbnz	r0, 801aac2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801aac0:	6898      	ldr	r0, [r3, #8]
 801aac2:	6803      	ldr	r3, [r0, #0]
 801aac4:	4669      	mov	r1, sp
 801aac6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801aac8:	699d      	ldr	r5, [r3, #24]
 801aaca:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801aace:	47a8      	blx	r5
 801aad0:	b003      	add	sp, #12
 801aad2:	bd30      	pop	{r4, r5, pc}
 801aad4:	2000b41c 	.word	0x2000b41c

0801aad8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801aad8:	b538      	push	{r3, r4, r5, lr}
 801aada:	880b      	ldrh	r3, [r1, #0]
 801aadc:	4605      	mov	r5, r0
 801aade:	4604      	mov	r4, r0
 801aae0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801aae2:	8813      	ldrh	r3, [r2, #0]
 801aae4:	f825 3f30 	strh.w	r3, [r5, #48]!
 801aae8:	4628      	mov	r0, r5
 801aaea:	f003 fe7d 	bl	801e7e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801aaee:	8120      	strh	r0, [r4, #8]
 801aaf0:	4628      	mov	r0, r5
 801aaf2:	f003 feb3 	bl	801e85c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801aaf6:	8160      	strh	r0, [r4, #10]
 801aaf8:	bd38      	pop	{r3, r4, r5, pc}

0801aafa <_ZNK8touchgfx6Button12getSolidRectEv>:
 801aafa:	b510      	push	{r4, lr}
 801aafc:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801ab00:	4604      	mov	r4, r0
 801ab02:	2bff      	cmp	r3, #255	; 0xff
 801ab04:	d006      	beq.n	801ab14 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801ab06:	2300      	movs	r3, #0
 801ab08:	8003      	strh	r3, [r0, #0]
 801ab0a:	8043      	strh	r3, [r0, #2]
 801ab0c:	8083      	strh	r3, [r0, #4]
 801ab0e:	80c3      	strh	r3, [r0, #6]
 801ab10:	4620      	mov	r0, r4
 801ab12:	bd10      	pop	{r4, pc}
 801ab14:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801ab18:	b11b      	cbz	r3, 801ab22 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801ab1a:	3130      	adds	r1, #48	; 0x30
 801ab1c:	f003 fed8 	bl	801e8d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801ab20:	e7f6      	b.n	801ab10 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801ab22:	312e      	adds	r1, #46	; 0x2e
 801ab24:	e7fa      	b.n	801ab1c <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0801ab28 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801ab28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab2c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801ab30:	b08a      	sub	sp, #40	; 0x28
 801ab32:	4604      	mov	r4, r0
 801ab34:	4688      	mov	r8, r1
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d044      	beq.n	801abc4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 801ab3a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801ab3c:	a805      	add	r0, sp, #20
 801ab3e:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ab42:	f003 fe51 	bl	801e7e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ab46:	4605      	mov	r5, r0
 801ab48:	b206      	sxth	r6, r0
 801ab4a:	a805      	add	r0, sp, #20
 801ab4c:	f003 fe86 	bl	801e85c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ab50:	f9b8 2000 	ldrsh.w	r2, [r8]
 801ab54:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 801ab58:	2300      	movs	r3, #0
 801ab5a:	fa0f fc80 	sxth.w	ip, r0
 801ab5e:	4417      	add	r7, r2
 801ab60:	9306      	str	r3, [sp, #24]
 801ab62:	b2bf      	uxth	r7, r7
 801ab64:	fa0f fe87 	sxth.w	lr, r7
 801ab68:	459e      	cmp	lr, r3
 801ab6a:	dd2d      	ble.n	801abc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801ab6c:	4296      	cmp	r6, r2
 801ab6e:	dd2b      	ble.n	801abc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801ab70:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801ab74:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 801ab78:	4419      	add	r1, r3
 801ab7a:	b289      	uxth	r1, r1
 801ab7c:	fa0f f881 	sxth.w	r8, r1
 801ab80:	f1b8 0f00 	cmp.w	r8, #0
 801ab84:	dd20      	ble.n	801abc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801ab86:	459c      	cmp	ip, r3
 801ab88:	dd1e      	ble.n	801abc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801ab8a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801ab8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab92:	4576      	cmp	r6, lr
 801ab94:	bfa8      	it	ge
 801ab96:	463d      	movge	r5, r7
 801ab98:	45c4      	cmp	ip, r8
 801ab9a:	bfa8      	it	ge
 801ab9c:	4608      	movge	r0, r1
 801ab9e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801aba2:	1aad      	subs	r5, r5, r2
 801aba4:	1ac0      	subs	r0, r0, r3
 801aba6:	f8ad 301a 	strh.w	r3, [sp, #26]
 801abaa:	f8ad 501c 	strh.w	r5, [sp, #28]
 801abae:	f8ad 001e 	strh.w	r0, [sp, #30]
 801abb2:	4b1f      	ldr	r3, [pc, #124]	; (801ac30 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	b953      	cbnz	r3, 801abce <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 801abb8:	4b1e      	ldr	r3, [pc, #120]	; (801ac34 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801abba:	2189      	movs	r1, #137	; 0x89
 801abbc:	4a1e      	ldr	r2, [pc, #120]	; (801ac38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 801abbe:	481f      	ldr	r0, [pc, #124]	; (801ac3c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 801abc0:	f00d fc60 	bl	8028484 <__assert_func>
 801abc4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801abc6:	e7b9      	b.n	801ab3c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801abc8:	2300      	movs	r3, #0
 801abca:	9307      	str	r3, [sp, #28]
 801abcc:	e7f1      	b.n	801abb2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 801abce:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801abd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801abd6:	429a      	cmp	r2, r3
 801abd8:	d026      	beq.n	801ac28 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801abda:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801abde:	2b00      	cmp	r3, #0
 801abe0:	dd22      	ble.n	801ac28 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801abe2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	dd1e      	ble.n	801ac28 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801abea:	2300      	movs	r3, #0
 801abec:	a908      	add	r1, sp, #32
 801abee:	4620      	mov	r0, r4
 801abf0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801abf4:	6823      	ldr	r3, [r4, #0]
 801abf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abf8:	4798      	blx	r3
 801abfa:	4b11      	ldr	r3, [pc, #68]	; (801ac40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801ac02:	b10a      	cbz	r2, 801ac08 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801ac04:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801ac06:	b900      	cbnz	r0, 801ac0a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 801ac08:	6898      	ldr	r0, [r3, #8]
 801ac0a:	2501      	movs	r5, #1
 801ac0c:	6801      	ldr	r1, [r0, #0]
 801ac0e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801ac12:	9502      	str	r5, [sp, #8]
 801ac14:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801ac18:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ac1c:	9401      	str	r4, [sp, #4]
 801ac1e:	ac06      	add	r4, sp, #24
 801ac20:	9400      	str	r4, [sp, #0]
 801ac22:	688c      	ldr	r4, [r1, #8]
 801ac24:	a905      	add	r1, sp, #20
 801ac26:	47a0      	blx	r4
 801ac28:	b00a      	add	sp, #40	; 0x28
 801ac2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac2e:	bf00      	nop
 801ac30:	2000b4e4 	.word	0x2000b4e4
 801ac34:	0802cacc 	.word	0x0802cacc
 801ac38:	0802cba0 	.word	0x0802cba0
 801ac3c:	0802cb08 	.word	0x0802cb08
 801ac40:	2000b41c 	.word	0x2000b41c

0801ac44 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 801ac44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ac46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ac4a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801ac4c:	4606      	mov	r6, r0
 801ac4e:	4299      	cmp	r1, r3
 801ac50:	d02a      	beq.n	801aca8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 801ac52:	4b16      	ldr	r3, [pc, #88]	; (801acac <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	b92b      	cbnz	r3, 801ac64 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 801ac58:	4b15      	ldr	r3, [pc, #84]	; (801acb0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 801ac5a:	21b1      	movs	r1, #177	; 0xb1
 801ac5c:	4a15      	ldr	r2, [pc, #84]	; (801acb4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801ac5e:	4816      	ldr	r0, [pc, #88]	; (801acb8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 801ac60:	f00d fc10 	bl	8028484 <__assert_func>
 801ac64:	4a15      	ldr	r2, [pc, #84]	; (801acbc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 801ac66:	8812      	ldrh	r2, [r2, #0]
 801ac68:	428a      	cmp	r2, r1
 801ac6a:	d803      	bhi.n	801ac74 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 801ac6c:	4b14      	ldr	r3, [pc, #80]	; (801acc0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 801ac6e:	21b2      	movs	r1, #178	; 0xb2
 801ac70:	4a10      	ldr	r2, [pc, #64]	; (801acb4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801ac72:	e7f4      	b.n	801ac5e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 801ac74:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801ac78:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801ac7c:	4b11      	ldr	r3, [pc, #68]	; (801acc4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 801ac7e:	7854      	ldrb	r4, [r2, #1]
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801ac86:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801ac8a:	682b      	ldr	r3, [r5, #0]
 801ac8c:	69df      	ldr	r7, [r3, #28]
 801ac8e:	4b0e      	ldr	r3, [pc, #56]	; (801acc8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 801ac90:	6818      	ldr	r0, [r3, #0]
 801ac92:	f7fa f96f 	bl	8014f74 <_ZNK8touchgfx5Texts7getTextEt>
 801ac96:	2300      	movs	r3, #0
 801ac98:	4602      	mov	r2, r0
 801ac9a:	4621      	mov	r1, r4
 801ac9c:	9300      	str	r3, [sp, #0]
 801ac9e:	4628      	mov	r0, r5
 801aca0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 801aca2:	47b8      	blx	r7
 801aca4:	b003      	add	sp, #12
 801aca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aca8:	2000      	movs	r0, #0
 801acaa:	e7fb      	b.n	801aca4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 801acac:	2000b4ac 	.word	0x2000b4ac
 801acb0:	0802c8f8 	.word	0x0802c8f8
 801acb4:	0802cc50 	.word	0x0802cc50
 801acb8:	0802c93a 	.word	0x0802c93a
 801acbc:	2000b4b0 	.word	0x2000b4b0
 801acc0:	0802c963 	.word	0x0802c963
 801acc4:	2000b4b4 	.word	0x2000b4b4
 801acc8:	2000b4b8 	.word	0x2000b4b8

0801accc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801accc:	b570      	push	{r4, r5, r6, lr}
 801acce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801acd2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801acd4:	4604      	mov	r4, r0
 801acd6:	4299      	cmp	r1, r3
 801acd8:	d01e      	beq.n	801ad18 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801acda:	6803      	ldr	r3, [r0, #0]
 801acdc:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801acde:	4b0f      	ldr	r3, [pc, #60]	; (801ad1c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	b92b      	cbnz	r3, 801acf0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 801ace4:	4b0e      	ldr	r3, [pc, #56]	; (801ad20 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801ace6:	21b1      	movs	r1, #177	; 0xb1
 801ace8:	4a0e      	ldr	r2, [pc, #56]	; (801ad24 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801acea:	480f      	ldr	r0, [pc, #60]	; (801ad28 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 801acec:	f00d fbca 	bl	8028484 <__assert_func>
 801acf0:	4b0e      	ldr	r3, [pc, #56]	; (801ad2c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 801acf2:	881b      	ldrh	r3, [r3, #0]
 801acf4:	428b      	cmp	r3, r1
 801acf6:	d803      	bhi.n	801ad00 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 801acf8:	4b0d      	ldr	r3, [pc, #52]	; (801ad30 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801acfa:	21b2      	movs	r1, #178	; 0xb2
 801acfc:	4a09      	ldr	r2, [pc, #36]	; (801ad24 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801acfe:	e7f4      	b.n	801acea <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 801ad00:	4b0c      	ldr	r3, [pc, #48]	; (801ad34 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 801ad02:	6818      	ldr	r0, [r3, #0]
 801ad04:	f7fa f936 	bl	8014f74 <_ZNK8touchgfx5Texts7getTextEt>
 801ad08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801ad0a:	4601      	mov	r1, r0
 801ad0c:	46ac      	mov	ip, r5
 801ad0e:	4620      	mov	r0, r4
 801ad10:	2300      	movs	r3, #0
 801ad12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad16:	4760      	bx	ip
 801ad18:	2000      	movs	r0, #0
 801ad1a:	bd70      	pop	{r4, r5, r6, pc}
 801ad1c:	2000b4ac 	.word	0x2000b4ac
 801ad20:	0802c8f8 	.word	0x0802c8f8
 801ad24:	0802cc50 	.word	0x0802cc50
 801ad28:	0802c93a 	.word	0x0802c93a
 801ad2c:	2000b4b0 	.word	0x2000b4b0
 801ad30:	0802c963 	.word	0x0802c963
 801ad34:	2000b4b8 	.word	0x2000b4b8

0801ad38 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801ad38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ad40:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801ad42:	b08c      	sub	sp, #48	; 0x30
 801ad44:	4604      	mov	r4, r0
 801ad46:	4293      	cmp	r3, r2
 801ad48:	460e      	mov	r6, r1
 801ad4a:	d05d      	beq.n	801ae08 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801ad4c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 801ae2c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 801ad50:	f8d8 2000 	ldr.w	r2, [r8]
 801ad54:	b92a      	cbnz	r2, 801ad62 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801ad56:	4b2e      	ldr	r3, [pc, #184]	; (801ae10 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801ad58:	21b1      	movs	r1, #177	; 0xb1
 801ad5a:	4a2e      	ldr	r2, [pc, #184]	; (801ae14 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801ad5c:	482e      	ldr	r0, [pc, #184]	; (801ae18 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 801ad5e:	f00d fb91 	bl	8028484 <__assert_func>
 801ad62:	4f2e      	ldr	r7, [pc, #184]	; (801ae1c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 801ad64:	8839      	ldrh	r1, [r7, #0]
 801ad66:	4299      	cmp	r1, r3
 801ad68:	d803      	bhi.n	801ad72 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801ad6a:	4b2d      	ldr	r3, [pc, #180]	; (801ae20 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 801ad6c:	21b2      	movs	r1, #178	; 0xb2
 801ad6e:	4a29      	ldr	r2, [pc, #164]	; (801ae14 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801ad70:	e7f4      	b.n	801ad5c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 801ad72:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801ad76:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801ad7a:	4b2a      	ldr	r3, [pc, #168]	; (801ae24 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 801ad7c:	681b      	ldr	r3, [r3, #0]
 801ad7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801ad82:	2a00      	cmp	r2, #0
 801ad84:	d040      	beq.n	801ae08 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801ad86:	784b      	ldrb	r3, [r1, #1]
 801ad88:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 801ad8c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801ad90:	f3c3 0901 	ubfx	r9, r3, #0, #2
 801ad94:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801ad98:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801ad9c:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 801ada0:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 801ada4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801ada8:	ad05      	add	r5, sp, #20
 801adaa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801adac:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801adb0:	9207      	str	r2, [sp, #28]
 801adb2:	f88d 9020 	strb.w	r9, [sp, #32]
 801adb6:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801adba:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 801adbe:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801adc2:	9009      	str	r0, [sp, #36]	; 0x24
 801adc4:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801adc8:	f7f4 fed4 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 801adcc:	4621      	mov	r1, r4
 801adce:	4681      	mov	r9, r0
 801add0:	4628      	mov	r0, r5
 801add2:	f001 fea2 	bl	801cb1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801add6:	f8d8 3000 	ldr.w	r3, [r8]
 801adda:	2b00      	cmp	r3, #0
 801addc:	d0bb      	beq.n	801ad56 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801adde:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801ade0:	883b      	ldrh	r3, [r7, #0]
 801ade2:	428b      	cmp	r3, r1
 801ade4:	d9c1      	bls.n	801ad6a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 801ade6:	4b10      	ldr	r3, [pc, #64]	; (801ae28 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 801ade8:	6818      	ldr	r0, [r3, #0]
 801adea:	f7fa f8c3 	bl	8014f74 <_ZNK8touchgfx5Texts7getTextEt>
 801adee:	2300      	movs	r3, #0
 801adf0:	9303      	str	r3, [sp, #12]
 801adf2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801adf4:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801adf8:	ab07      	add	r3, sp, #28
 801adfa:	4648      	mov	r0, r9
 801adfc:	9300      	str	r3, [sp, #0]
 801adfe:	4633      	mov	r3, r6
 801ae00:	e895 0006 	ldmia.w	r5, {r1, r2}
 801ae04:	f7fa f847 	bl	8014e96 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801ae08:	b00c      	add	sp, #48	; 0x30
 801ae0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae0e:	bf00      	nop
 801ae10:	0802c8f8 	.word	0x0802c8f8
 801ae14:	0802cc50 	.word	0x0802cc50
 801ae18:	0802c93a 	.word	0x0802c93a
 801ae1c:	2000b4b0 	.word	0x2000b4b0
 801ae20:	0802c963 	.word	0x0802c963
 801ae24:	2000b4b4 	.word	0x2000b4b4
 801ae28:	2000b4b8 	.word	0x2000b4b8
 801ae2c:	2000b4ac 	.word	0x2000b4ac

0801ae30 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801ae30:	b570      	push	{r4, r5, r6, lr}
 801ae32:	4605      	mov	r5, r0
 801ae34:	880b      	ldrh	r3, [r1, #0]
 801ae36:	4604      	mov	r4, r0
 801ae38:	84c3      	strh	r3, [r0, #38]	; 0x26
 801ae3a:	f855 3b26 	ldr.w	r3, [r5], #38
 801ae3e:	4628      	mov	r0, r5
 801ae40:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801ae42:	f003 fcd1 	bl	801e7e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ae46:	b201      	sxth	r1, r0
 801ae48:	4620      	mov	r0, r4
 801ae4a:	47b0      	blx	r6
 801ae4c:	6823      	ldr	r3, [r4, #0]
 801ae4e:	4628      	mov	r0, r5
 801ae50:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801ae52:	f003 fd03 	bl	801e85c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ae56:	b201      	sxth	r1, r0
 801ae58:	4620      	mov	r0, r4
 801ae5a:	4633      	mov	r3, r6
 801ae5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae60:	4718      	bx	r3

0801ae62 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801ae62:	b510      	push	{r4, lr}
 801ae64:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801ae68:	4604      	mov	r4, r0
 801ae6a:	2bff      	cmp	r3, #255	; 0xff
 801ae6c:	d006      	beq.n	801ae7c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801ae6e:	2300      	movs	r3, #0
 801ae70:	8003      	strh	r3, [r0, #0]
 801ae72:	8043      	strh	r3, [r0, #2]
 801ae74:	8083      	strh	r3, [r0, #4]
 801ae76:	80c3      	strh	r3, [r0, #6]
 801ae78:	4620      	mov	r0, r4
 801ae7a:	bd10      	pop	{r4, pc}
 801ae7c:	3126      	adds	r1, #38	; 0x26
 801ae7e:	f003 fd27 	bl	801e8d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801ae82:	e7f9      	b.n	801ae78 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801ae84 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801ae84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae88:	4604      	mov	r4, r0
 801ae8a:	b088      	sub	sp, #32
 801ae8c:	2500      	movs	r5, #0
 801ae8e:	460f      	mov	r7, r1
 801ae90:	f854 3b26 	ldr.w	r3, [r4], #38
 801ae94:	a904      	add	r1, sp, #16
 801ae96:	4606      	mov	r6, r0
 801ae98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801ae9e:	4798      	blx	r3
 801aea0:	4620      	mov	r0, r4
 801aea2:	f003 fca1 	bl	801e7e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801aea6:	4680      	mov	r8, r0
 801aea8:	4620      	mov	r0, r4
 801aeaa:	f003 fcd7 	bl	801e85c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801aeae:	9506      	str	r5, [sp, #24]
 801aeb0:	ad06      	add	r5, sp, #24
 801aeb2:	f8ad 001e 	strh.w	r0, [sp, #30]
 801aeb6:	4639      	mov	r1, r7
 801aeb8:	f8ad 801c 	strh.w	r8, [sp, #28]
 801aebc:	4628      	mov	r0, r5
 801aebe:	f7fd f9a3 	bl	8018208 <_ZN8touchgfx4RectaNERKS0_>
 801aec2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	dd19      	ble.n	801aefe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801aeca:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801aece:	2b00      	cmp	r3, #0
 801aed0:	dd15      	ble.n	801aefe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801aed2:	4b0c      	ldr	r3, [pc, #48]	; (801af04 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801aeda:	b10a      	cbz	r2, 801aee0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801aedc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801aede:	b900      	cbnz	r0, 801aee2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801aee0:	6898      	ldr	r0, [r3, #8]
 801aee2:	2701      	movs	r7, #1
 801aee4:	6801      	ldr	r1, [r0, #0]
 801aee6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801aeea:	9702      	str	r7, [sp, #8]
 801aeec:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801aef0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801aef4:	e9cd 5600 	strd	r5, r6, [sp]
 801aef8:	688d      	ldr	r5, [r1, #8]
 801aefa:	4621      	mov	r1, r4
 801aefc:	47a8      	blx	r5
 801aefe:	b008      	add	sp, #32
 801af00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af04:	2000b41c 	.word	0x2000b41c

0801af08 <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
 801af08:	b510      	push	{r4, lr}
 801af0a:	4604      	mov	r4, r0
 801af0c:	f7ff fdf5 	bl	801aafa <_ZNK8touchgfx6Button12getSolidRectEv>
 801af10:	4620      	mov	r0, r4
 801af12:	bd10      	pop	{r4, pc}

0801af14 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 801af14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af18:	4604      	mov	r4, r0
 801af1a:	b08c      	sub	sp, #48	; 0x30
 801af1c:	4688      	mov	r8, r1
 801af1e:	f7ff fe03 	bl	801ab28 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801af22:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801af24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801af28:	4293      	cmp	r3, r2
 801af2a:	f000 809a 	beq.w	801b062 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801af2e:	4e55      	ldr	r6, [pc, #340]	; (801b084 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801af30:	6832      	ldr	r2, [r6, #0]
 801af32:	b92a      	cbnz	r2, 801af40 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 801af34:	4b54      	ldr	r3, [pc, #336]	; (801b088 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 801af36:	21b1      	movs	r1, #177	; 0xb1
 801af38:	4a54      	ldr	r2, [pc, #336]	; (801b08c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801af3a:	4855      	ldr	r0, [pc, #340]	; (801b090 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 801af3c:	f00d faa2 	bl	8028484 <__assert_func>
 801af40:	4d54      	ldr	r5, [pc, #336]	; (801b094 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 801af42:	8829      	ldrh	r1, [r5, #0]
 801af44:	4299      	cmp	r1, r3
 801af46:	d803      	bhi.n	801af50 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 801af48:	4b53      	ldr	r3, [pc, #332]	; (801b098 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 801af4a:	21b2      	movs	r1, #178	; 0xb2
 801af4c:	4a4f      	ldr	r2, [pc, #316]	; (801b08c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801af4e:	e7f4      	b.n	801af3a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 801af50:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801af54:	f04f 0c02 	mov.w	ip, #2
 801af58:	4b50      	ldr	r3, [pc, #320]	; (801b09c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 801af5a:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801af64:	f1be 0f01 	cmp.w	lr, #1
 801af68:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801af6c:	f04f 0300 	mov.w	r3, #0
 801af70:	b208      	sxth	r0, r1
 801af72:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801af76:	9303      	str	r3, [sp, #12]
 801af78:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801af7c:	d074      	beq.n	801b068 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801af7e:	f1be 0f03 	cmp.w	lr, #3
 801af82:	d071      	beq.n	801b068 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801af84:	1a52      	subs	r2, r2, r1
 801af86:	f8ad 3010 	strh.w	r3, [sp, #16]
 801af8a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801af8e:	fb92 f2fc 	sdiv	r2, r2, ip
 801af92:	f8ad 200e 	strh.w	r2, [sp, #14]
 801af96:	f10d 090c 	add.w	r9, sp, #12
 801af9a:	f10d 0a14 	add.w	sl, sp, #20
 801af9e:	e899 0003 	ldmia.w	r9, {r0, r1}
 801afa2:	e88a 0003 	stmia.w	sl, {r0, r1}
 801afa6:	4641      	mov	r1, r8
 801afa8:	4650      	mov	r0, sl
 801afaa:	f7fd f92d 	bl	8018208 <_ZN8touchgfx4RectaNERKS0_>
 801afae:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	dd55      	ble.n	801b062 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801afb6:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801afba:	2b00      	cmp	r3, #0
 801afbc:	dd51      	ble.n	801b062 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801afbe:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801afc2:	4649      	mov	r1, r9
 801afc4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801afc8:	4620      	mov	r0, r4
 801afca:	1a9b      	subs	r3, r3, r2
 801afcc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801afd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801afd4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801afd8:	1a9b      	subs	r3, r3, r2
 801afda:	f8ad 3016 	strh.w	r3, [sp, #22]
 801afde:	6823      	ldr	r3, [r4, #0]
 801afe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801afe2:	4798      	blx	r3
 801afe4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d047      	beq.n	801b07c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 801afec:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801aff0:	6833      	ldr	r3, [r6, #0]
 801aff2:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d09c      	beq.n	801af34 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 801affa:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801affc:	8828      	ldrh	r0, [r5, #0]
 801affe:	4288      	cmp	r0, r1
 801b000:	d9a2      	bls.n	801af48 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 801b002:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801b006:	6812      	ldr	r2, [r2, #0]
 801b008:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 801b00c:	785b      	ldrb	r3, [r3, #1]
 801b00e:	9209      	str	r2, [sp, #36]	; 0x24
 801b010:	f3c3 0501 	ubfx	r5, r3, #0, #2
 801b014:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b018:	9707      	str	r7, [sp, #28]
 801b01a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801b01e:	2300      	movs	r3, #0
 801b020:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801b024:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801b028:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801b02c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801b030:	4b1b      	ldr	r3, [pc, #108]	; (801b0a0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 801b032:	f88d 5020 	strb.w	r5, [sp, #32]
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801b03c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b040:	b10a      	cbz	r2, 801b046 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 801b042:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801b044:	b904      	cbnz	r4, 801b048 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 801b046:	689c      	ldr	r4, [r3, #8]
 801b048:	4b16      	ldr	r3, [pc, #88]	; (801b0a4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 801b04a:	6818      	ldr	r0, [r3, #0]
 801b04c:	f7f9 ff92 	bl	8014f74 <_ZNK8touchgfx5Texts7getTextEt>
 801b050:	ab07      	add	r3, sp, #28
 801b052:	9001      	str	r0, [sp, #4]
 801b054:	4620      	mov	r0, r4
 801b056:	9300      	str	r3, [sp, #0]
 801b058:	4653      	mov	r3, sl
 801b05a:	e899 0006 	ldmia.w	r9, {r1, r2}
 801b05e:	f7f9 ff1a 	bl	8014e96 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801b062:	b00c      	add	sp, #48	; 0x30
 801b064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b068:	1a5b      	subs	r3, r3, r1
 801b06a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b06e:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b072:	fb93 f3fc 	sdiv	r3, r3, ip
 801b076:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b07a:	e78c      	b.n	801af96 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 801b07c:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801b080:	e7b6      	b.n	801aff0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 801b082:	bf00      	nop
 801b084:	2000b4ac 	.word	0x2000b4ac
 801b088:	0802c8f8 	.word	0x0802c8f8
 801b08c:	0802cd5c 	.word	0x0802cd5c
 801b090:	0802c93a 	.word	0x0802c93a
 801b094:	2000b4b0 	.word	0x2000b4b0
 801b098:	0802c963 	.word	0x0802c963
 801b09c:	2000b4b4 	.word	0x2000b4b4
 801b0a0:	2000b41c 	.word	0x2000b41c
 801b0a4:	2000b4b8 	.word	0x2000b4b8

0801b0a8 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 801b0a8:	2101      	movs	r1, #1
 801b0aa:	2200      	movs	r2, #0
 801b0ac:	b510      	push	{r4, lr}
 801b0ae:	4c12      	ldr	r4, [pc, #72]	; (801b0f8 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x50>)
 801b0b0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801b0b4:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801b0b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b0bc:	6004      	str	r4, [r0, #0]
 801b0be:	4c0f      	ldr	r4, [pc, #60]	; (801b0fc <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 801b0c0:	8082      	strh	r2, [r0, #4]
 801b0c2:	80c2      	strh	r2, [r0, #6]
 801b0c4:	8102      	strh	r2, [r0, #8]
 801b0c6:	8142      	strh	r2, [r0, #10]
 801b0c8:	8182      	strh	r2, [r0, #12]
 801b0ca:	81c2      	strh	r2, [r0, #14]
 801b0cc:	8202      	strh	r2, [r0, #16]
 801b0ce:	8242      	strh	r2, [r0, #18]
 801b0d0:	61c2      	str	r2, [r0, #28]
 801b0d2:	6282      	str	r2, [r0, #40]	; 0x28
 801b0d4:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 801b0d8:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801b0da:	8601      	strh	r1, [r0, #48]	; 0x30
 801b0dc:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 801b0e0:	6344      	str	r4, [r0, #52]	; 0x34
 801b0e2:	8701      	strh	r1, [r0, #56]	; 0x38
 801b0e4:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801b0e8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 801b0ec:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801b0f0:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 801b0f4:	bd10      	pop	{r4, pc}
 801b0f6:	bf00      	nop
 801b0f8:	0802ccf4 	.word	0x0802ccf4
 801b0fc:	08029e9c 	.word	0x08029e9c

0801b100 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801b100:	4b02      	ldr	r3, [pc, #8]	; (801b10c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801b102:	6018      	str	r0, [r3, #0]
 801b104:	4b02      	ldr	r3, [pc, #8]	; (801b110 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801b106:	6019      	str	r1, [r3, #0]
 801b108:	4770      	bx	lr
 801b10a:	bf00      	nop
 801b10c:	2000b424 	.word	0x2000b424
 801b110:	2000b438 	.word	0x2000b438

0801b114 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801b114:	b538      	push	{r3, r4, r5, lr}
 801b116:	4c2b      	ldr	r4, [pc, #172]	; (801b1c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 801b118:	4b2b      	ldr	r3, [pc, #172]	; (801b1c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801b11a:	6821      	ldr	r1, [r4, #0]
 801b11c:	681a      	ldr	r2, [r3, #0]
 801b11e:	4281      	cmp	r1, r0
 801b120:	4d2a      	ldr	r5, [pc, #168]	; (801b1cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801b122:	492b      	ldr	r1, [pc, #172]	; (801b1d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801b124:	d108      	bne.n	801b138 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801b126:	682b      	ldr	r3, [r5, #0]
 801b128:	4293      	cmp	r3, r2
 801b12a:	d105      	bne.n	801b138 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801b12c:	6808      	ldr	r0, [r1, #0]
 801b12e:	280f      	cmp	r0, #15
 801b130:	bf94      	ite	ls
 801b132:	2000      	movls	r0, #0
 801b134:	2001      	movhi	r0, #1
 801b136:	bd38      	pop	{r3, r4, r5, pc}
 801b138:	4b26      	ldr	r3, [pc, #152]	; (801b1d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801b13a:	6020      	str	r0, [r4, #0]
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	602a      	str	r2, [r5, #0]
 801b140:	4298      	cmp	r0, r3
 801b142:	d905      	bls.n	801b150 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 801b144:	4b24      	ldr	r3, [pc, #144]	; (801b1d8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801b146:	2137      	movs	r1, #55	; 0x37
 801b148:	4a24      	ldr	r2, [pc, #144]	; (801b1dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801b14a:	4825      	ldr	r0, [pc, #148]	; (801b1e0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801b14c:	f00d f99a 	bl	8028484 <__assert_func>
 801b150:	f010 0403 	ands.w	r4, r0, #3
 801b154:	bf1f      	itttt	ne
 801b156:	f1c4 0504 	rsbne	r5, r4, #4
 801b15a:	3b04      	subne	r3, #4
 801b15c:	1952      	addne	r2, r2, r5
 801b15e:	191b      	addne	r3, r3, r4
 801b160:	4d20      	ldr	r5, [pc, #128]	; (801b1e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801b162:	4402      	add	r2, r0
 801b164:	1a1b      	subs	r3, r3, r0
 801b166:	3001      	adds	r0, #1
 801b168:	602a      	str	r2, [r5, #0]
 801b16a:	f020 0401 	bic.w	r4, r0, #1
 801b16e:	42a3      	cmp	r3, r4
 801b170:	d203      	bcs.n	801b17a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801b172:	4b19      	ldr	r3, [pc, #100]	; (801b1d8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801b174:	214a      	movs	r1, #74	; 0x4a
 801b176:	4a19      	ldr	r2, [pc, #100]	; (801b1dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801b178:	e7e7      	b.n	801b14a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801b17a:	f010 0002 	ands.w	r0, r0, #2
 801b17e:	bf1f      	itttt	ne
 801b180:	f1c0 0504 	rsbne	r5, r0, #4
 801b184:	1952      	addne	r2, r2, r5
 801b186:	1f05      	subne	r5, r0, #4
 801b188:	195b      	addne	r3, r3, r5
 801b18a:	4422      	add	r2, r4
 801b18c:	4d16      	ldr	r5, [pc, #88]	; (801b1e8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801b18e:	1b1b      	subs	r3, r3, r4
 801b190:	602a      	str	r2, [r5, #0]
 801b192:	429c      	cmp	r4, r3
 801b194:	d903      	bls.n	801b19e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801b196:	4b10      	ldr	r3, [pc, #64]	; (801b1d8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801b198:	215d      	movs	r1, #93	; 0x5d
 801b19a:	4a10      	ldr	r2, [pc, #64]	; (801b1dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801b19c:	e7d5      	b.n	801b14a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801b19e:	b120      	cbz	r0, 801b1aa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 801b1a0:	f1c0 0504 	rsb	r5, r0, #4
 801b1a4:	3804      	subs	r0, #4
 801b1a6:	442a      	add	r2, r5
 801b1a8:	4403      	add	r3, r0
 801b1aa:	1b1b      	subs	r3, r3, r4
 801b1ac:	4422      	add	r2, r4
 801b1ae:	480f      	ldr	r0, [pc, #60]	; (801b1ec <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801b1b0:	2b0f      	cmp	r3, #15
 801b1b2:	600b      	str	r3, [r1, #0]
 801b1b4:	6002      	str	r2, [r0, #0]
 801b1b6:	d803      	bhi.n	801b1c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801b1b8:	4b0d      	ldr	r3, [pc, #52]	; (801b1f0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801b1ba:	2170      	movs	r1, #112	; 0x70
 801b1bc:	4a07      	ldr	r2, [pc, #28]	; (801b1dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801b1be:	e7c4      	b.n	801b14a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801b1c0:	2001      	movs	r0, #1
 801b1c2:	e7b8      	b.n	801b136 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 801b1c4:	2000b42c 	.word	0x2000b42c
 801b1c8:	2000b424 	.word	0x2000b424
 801b1cc:	2000b434 	.word	0x2000b434
 801b1d0:	2000b43c 	.word	0x2000b43c
 801b1d4:	2000b438 	.word	0x2000b438
 801b1d8:	0802cd8a 	.word	0x0802cd8a
 801b1dc:	0802ce52 	.word	0x0802ce52
 801b1e0:	0802cdc3 	.word	0x0802cdc3
 801b1e4:	2000b440 	.word	0x2000b440
 801b1e8:	2000b430 	.word	0x2000b430
 801b1ec:	2000b428 	.word	0x2000b428
 801b1f0:	0802ce0d 	.word	0x0802ce0d

0801b1f4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 801b1f4:	4b04      	ldr	r3, [pc, #16]	; (801b208 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801b1f6:	6818      	ldr	r0, [r3, #0]
 801b1f8:	b120      	cbz	r0, 801b204 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801b1fa:	4b04      	ldr	r3, [pc, #16]	; (801b20c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801b1fc:	6818      	ldr	r0, [r3, #0]
 801b1fe:	3000      	adds	r0, #0
 801b200:	bf18      	it	ne
 801b202:	2001      	movne	r0, #1
 801b204:	4770      	bx	lr
 801b206:	bf00      	nop
 801b208:	2000b424 	.word	0x2000b424
 801b20c:	2000b438 	.word	0x2000b438

0801b210 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 801b210:	4b01      	ldr	r3, [pc, #4]	; (801b218 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 801b212:	6818      	ldr	r0, [r3, #0]
 801b214:	4770      	bx	lr
 801b216:	bf00      	nop
 801b218:	2000b42c 	.word	0x2000b42c

0801b21c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801b21c:	4b01      	ldr	r3, [pc, #4]	; (801b224 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801b21e:	6818      	ldr	r0, [r3, #0]
 801b220:	4770      	bx	lr
 801b222:	bf00      	nop
 801b224:	2000b434 	.word	0x2000b434

0801b228 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 801b228:	4b01      	ldr	r3, [pc, #4]	; (801b230 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801b22a:	6818      	ldr	r0, [r3, #0]
 801b22c:	4770      	bx	lr
 801b22e:	bf00      	nop
 801b230:	2000b440 	.word	0x2000b440

0801b234 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 801b234:	4b01      	ldr	r3, [pc, #4]	; (801b23c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 801b236:	6818      	ldr	r0, [r3, #0]
 801b238:	4770      	bx	lr
 801b23a:	bf00      	nop
 801b23c:	2000b430 	.word	0x2000b430

0801b240 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801b240:	4b01      	ldr	r3, [pc, #4]	; (801b248 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801b242:	6818      	ldr	r0, [r3, #0]
 801b244:	4770      	bx	lr
 801b246:	bf00      	nop
 801b248:	2000b428 	.word	0x2000b428

0801b24c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801b24c:	4b01      	ldr	r3, [pc, #4]	; (801b254 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801b24e:	6818      	ldr	r0, [r3, #0]
 801b250:	4770      	bx	lr
 801b252:	bf00      	nop
 801b254:	2000b43c 	.word	0x2000b43c

0801b258 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801b258:	2000      	movs	r0, #0
 801b25a:	4770      	bx	lr

0801b25c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801b25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b260:	b091      	sub	sp, #68	; 0x44
 801b262:	4699      	mov	r9, r3
 801b264:	4617      	mov	r7, r2
 801b266:	2500      	movs	r5, #0
 801b268:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801b26c:	4680      	mov	r8, r0
 801b26e:	a80e      	add	r0, sp, #56	; 0x38
 801b270:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801b272:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801b276:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801b27a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801b27e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b282:	910d      	str	r1, [sp, #52]	; 0x34
 801b284:	950e      	str	r5, [sp, #56]	; 0x38
 801b286:	f000 fe39 	bl	801befc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b28a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b28c:	f8d9 6000 	ldr.w	r6, [r9]
 801b290:	6818      	ldr	r0, [r3, #0]
 801b292:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b294:	f9b4 b000 	ldrsh.w	fp, [r4]
 801b298:	1b80      	subs	r0, r0, r6
 801b29a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b29e:	eb02 0c06 	add.w	ip, r2, r6
 801b2a2:	ebab 0e0c 	sub.w	lr, fp, ip
 801b2a6:	4570      	cmp	r0, lr
 801b2a8:	f340 80bc 	ble.w	801b424 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801b2ac:	88a1      	ldrh	r1, [r4, #4]
 801b2ae:	4459      	add	r1, fp
 801b2b0:	b209      	sxth	r1, r1
 801b2b2:	458c      	cmp	ip, r1
 801b2b4:	f300 80b6 	bgt.w	801b424 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801b2b8:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801b2bc:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801b2c0:	4283      	cmp	r3, r0
 801b2c2:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801b2c6:	edd9 6a07 	vldr	s13, [r9, #28]
 801b2ca:	bfa8      	it	ge
 801b2cc:	4603      	movge	r3, r0
 801b2ce:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 801b2d2:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801b2d6:	45e3      	cmp	fp, ip
 801b2d8:	ee07 3a90 	vmov	s15, r3
 801b2dc:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801b2e0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801b2e4:	ee25 4a04 	vmul.f32	s8, s10, s8
 801b2e8:	ee65 4a24 	vmul.f32	s9, s10, s9
 801b2ec:	ee25 5a27 	vmul.f32	s10, s10, s15
 801b2f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b2f4:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801b2f8:	ee32 1a05 	vadd.f32	s2, s4, s10
 801b2fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b300:	ee36 0a84 	vadd.f32	s0, s13, s8
 801b304:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b308:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b30c:	f340 808d 	ble.w	801b42a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 801b310:	fb9e f5f3 	sdiv	r5, lr, r3
 801b314:	ee07 5a10 	vmov	s14, r5
 801b318:	2d00      	cmp	r5, #0
 801b31a:	fb03 e415 	mls	r4, r3, r5, lr
 801b31e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b322:	eea7 0a04 	vfma.f32	s0, s14, s8
 801b326:	eee7 0a24 	vfma.f32	s1, s14, s9
 801b32a:	eea7 1a05 	vfma.f32	s2, s14, s10
 801b32e:	dd12      	ble.n	801b356 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 801b330:	ee70 6a44 	vsub.f32	s13, s0, s8
 801b334:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801b338:	ee31 2a45 	vsub.f32	s4, s2, s10
 801b33c:	eef5 6a40 	vcmp.f32	s13, #0.0
 801b340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b344:	bf14      	ite	ne
 801b346:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801b34a:	eeb0 7a67 	vmoveq.f32	s14, s15
 801b34e:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b352:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b356:	fb05 f703 	mul.w	r7, r5, r3
 801b35a:	1bc0      	subs	r0, r0, r7
 801b35c:	443e      	add	r6, r7
 801b35e:	1997      	adds	r7, r2, r6
 801b360:	4407      	add	r7, r0
 801b362:	42b9      	cmp	r1, r7
 801b364:	bfbc      	itt	lt
 801b366:	1a88      	sublt	r0, r1, r2
 801b368:	1b80      	sublt	r0, r0, r6
 801b36a:	2800      	cmp	r0, #0
 801b36c:	dd5a      	ble.n	801b424 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801b36e:	fb90 f1f3 	sdiv	r1, r0, r3
 801b372:	fb03 0211 	mls	r2, r3, r1, r0
 801b376:	b90a      	cbnz	r2, 801b37c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801b378:	3901      	subs	r1, #1
 801b37a:	461a      	mov	r2, r3
 801b37c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801b380:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801b384:	44a4      	add	ip, r4
 801b386:	2900      	cmp	r1, #0
 801b388:	bfcc      	ite	gt
 801b38a:	469e      	movgt	lr, r3
 801b38c:	4696      	movle	lr, r2
 801b38e:	fb03 c505 	mla	r5, r3, r5, ip
 801b392:	eef0 6a42 	vmov.f32	s13, s4
 801b396:	eeb0 7a61 	vmov.f32	s14, s3
 801b39a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b39e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b3a2:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801b3a6:	ee21 3a23 	vmul.f32	s6, s2, s7
 801b3aa:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801b3ae:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b3b2:	ee17 0a90 	vmov	r0, s15
 801b3b6:	ee73 7a42 	vsub.f32	s15, s6, s4
 801b3ba:	fb90 f6f3 	sdiv	r6, r0, r3
 801b3be:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b3c2:	ee17 0a90 	vmov	r0, s15
 801b3c6:	fb90 f7f3 	sdiv	r7, r0, r3
 801b3ca:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b3ce:	f8d0 8000 	ldr.w	r8, [r0]
 801b3d2:	900c      	str	r0, [sp, #48]	; 0x30
 801b3d4:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b3d6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801b3da:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801b3de:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801b3e2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801b3e6:	f8cd a020 	str.w	sl, [sp, #32]
 801b3ea:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801b3ee:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b3f0:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801b3f4:	9603      	str	r6, [sp, #12]
 801b3f6:	44ca      	add	sl, r9
 801b3f8:	9506      	str	r5, [sp, #24]
 801b3fa:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801b3fe:	ee16 0a90 	vmov	r0, s13
 801b402:	f8cd a01c 	str.w	sl, [sp, #28]
 801b406:	fb07 0704 	mla	r7, r7, r4, r0
 801b40a:	ee17 0a10 	vmov	r0, s14
 801b40e:	fb06 0604 	mla	r6, r6, r4, r0
 801b412:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b414:	9702      	str	r7, [sp, #8]
 801b416:	e9cd 3600 	strd	r3, r6, [sp]
 801b41a:	ebae 0304 	sub.w	r3, lr, r4
 801b41e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b422:	47a8      	blx	r5
 801b424:	b011      	add	sp, #68	; 0x44
 801b426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b42a:	462c      	mov	r4, r5
 801b42c:	e797      	b.n	801b35e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

0801b42e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801b42e:	b570      	push	{r4, r5, r6, lr}
 801b430:	4604      	mov	r4, r0
 801b432:	2500      	movs	r5, #0
 801b434:	9804      	ldr	r0, [sp, #16]
 801b436:	7223      	strb	r3, [r4, #8]
 801b438:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b43c:	8025      	strh	r5, [r4, #0]
 801b43e:	6061      	str	r1, [r4, #4]
 801b440:	7263      	strb	r3, [r4, #9]
 801b442:	60e0      	str	r0, [r4, #12]
 801b444:	8222      	strh	r2, [r4, #16]
 801b446:	8265      	strh	r5, [r4, #18]
 801b448:	82a5      	strh	r5, [r4, #20]
 801b44a:	82e5      	strh	r5, [r4, #22]
 801b44c:	8325      	strh	r5, [r4, #24]
 801b44e:	8365      	strh	r5, [r4, #26]
 801b450:	83a5      	strh	r5, [r4, #28]
 801b452:	77a5      	strb	r5, [r4, #30]
 801b454:	6803      	ldr	r3, [r0, #0]
 801b456:	695b      	ldr	r3, [r3, #20]
 801b458:	4798      	blx	r3
 801b45a:	4606      	mov	r6, r0
 801b45c:	b1f8      	cbz	r0, 801b49e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b45e:	68e0      	ldr	r0, [r4, #12]
 801b460:	4631      	mov	r1, r6
 801b462:	6803      	ldr	r3, [r0, #0]
 801b464:	68db      	ldr	r3, [r3, #12]
 801b466:	4798      	blx	r3
 801b468:	7b43      	ldrb	r3, [r0, #13]
 801b46a:	7a82      	ldrb	r2, [r0, #10]
 801b46c:	4605      	mov	r5, r0
 801b46e:	005b      	lsls	r3, r3, #1
 801b470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b474:	4313      	orrs	r3, r2
 801b476:	83a3      	strh	r3, [r4, #28]
 801b478:	7a63      	ldrb	r3, [r4, #9]
 801b47a:	2b04      	cmp	r3, #4
 801b47c:	d10f      	bne.n	801b49e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b47e:	68e0      	ldr	r0, [r4, #12]
 801b480:	462a      	mov	r2, r5
 801b482:	4631      	mov	r1, r6
 801b484:	6803      	ldr	r3, [r0, #0]
 801b486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b488:	4798      	blx	r3
 801b48a:	7b6b      	ldrb	r3, [r5, #13]
 801b48c:	005b      	lsls	r3, r3, #1
 801b48e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b492:	7aab      	ldrb	r3, [r5, #10]
 801b494:	4313      	orrs	r3, r2
 801b496:	4418      	add	r0, r3
 801b498:	8ba3      	ldrh	r3, [r4, #28]
 801b49a:	4418      	add	r0, r3
 801b49c:	83a0      	strh	r0, [r4, #28]
 801b49e:	4620      	mov	r0, r4
 801b4a0:	bd70      	pop	{r4, r5, r6, pc}

0801b4a2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801b4a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4a6:	2400      	movs	r4, #0
 801b4a8:	b085      	sub	sp, #20
 801b4aa:	4681      	mov	r9, r0
 801b4ac:	4688      	mov	r8, r1
 801b4ae:	4692      	mov	sl, r2
 801b4b0:	469b      	mov	fp, r3
 801b4b2:	4627      	mov	r7, r4
 801b4b4:	4625      	mov	r5, r4
 801b4b6:	4626      	mov	r6, r4
 801b4b8:	4554      	cmp	r4, sl
 801b4ba:	da2a      	bge.n	801b512 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b4bc:	2300      	movs	r3, #0
 801b4be:	9303      	str	r3, [sp, #12]
 801b4c0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b4c4:	429d      	cmp	r5, r3
 801b4c6:	d004      	beq.n	801b4d2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801b4c8:	f242 030b 	movw	r3, #8203	; 0x200b
 801b4cc:	429d      	cmp	r5, r3
 801b4ce:	bf18      	it	ne
 801b4d0:	462f      	movne	r7, r5
 801b4d2:	ab03      	add	r3, sp, #12
 801b4d4:	4642      	mov	r2, r8
 801b4d6:	4659      	mov	r1, fp
 801b4d8:	4648      	mov	r0, r9
 801b4da:	f002 faff 	bl	801dadc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b4de:	4605      	mov	r5, r0
 801b4e0:	b1b8      	cbz	r0, 801b512 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b4e2:	280a      	cmp	r0, #10
 801b4e4:	d015      	beq.n	801b512 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b4e6:	9a03      	ldr	r2, [sp, #12]
 801b4e8:	b18a      	cbz	r2, 801b50e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801b4ea:	7b50      	ldrb	r0, [r2, #13]
 801b4ec:	4639      	mov	r1, r7
 801b4ee:	7a93      	ldrb	r3, [r2, #10]
 801b4f0:	0040      	lsls	r0, r0, #1
 801b4f2:	8895      	ldrh	r5, [r2, #4]
 801b4f4:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b4f8:	4303      	orrs	r3, r0
 801b4fa:	4640      	mov	r0, r8
 801b4fc:	9301      	str	r3, [sp, #4]
 801b4fe:	f8d8 3000 	ldr.w	r3, [r8]
 801b502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b504:	4798      	blx	r3
 801b506:	9b01      	ldr	r3, [sp, #4]
 801b508:	4418      	add	r0, r3
 801b50a:	4406      	add	r6, r0
 801b50c:	b2b6      	uxth	r6, r6
 801b50e:	3401      	adds	r4, #1
 801b510:	e7d2      	b.n	801b4b8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801b512:	4630      	mov	r0, r6
 801b514:	b005      	add	sp, #20
 801b516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b51a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801b51a:	2a02      	cmp	r2, #2
 801b51c:	b530      	push	{r4, r5, lr}
 801b51e:	d011      	beq.n	801b544 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801b520:	2a03      	cmp	r2, #3
 801b522:	d01c      	beq.n	801b55e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801b524:	2a01      	cmp	r2, #1
 801b526:	d10c      	bne.n	801b542 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b528:	888b      	ldrh	r3, [r1, #4]
 801b52a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801b52e:	8801      	ldrh	r1, [r0, #0]
 801b530:	1a9b      	subs	r3, r3, r2
 801b532:	8844      	ldrh	r4, [r0, #2]
 801b534:	1a5b      	subs	r3, r3, r1
 801b536:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b53a:	8004      	strh	r4, [r0, #0]
 801b53c:	8043      	strh	r3, [r0, #2]
 801b53e:	8081      	strh	r1, [r0, #4]
 801b540:	80c2      	strh	r2, [r0, #6]
 801b542:	bd30      	pop	{r4, r5, pc}
 801b544:	88cb      	ldrh	r3, [r1, #6]
 801b546:	88c2      	ldrh	r2, [r0, #6]
 801b548:	1a9b      	subs	r3, r3, r2
 801b54a:	8842      	ldrh	r2, [r0, #2]
 801b54c:	1a9b      	subs	r3, r3, r2
 801b54e:	888a      	ldrh	r2, [r1, #4]
 801b550:	8881      	ldrh	r1, [r0, #4]
 801b552:	8043      	strh	r3, [r0, #2]
 801b554:	1a52      	subs	r2, r2, r1
 801b556:	8801      	ldrh	r1, [r0, #0]
 801b558:	1a52      	subs	r2, r2, r1
 801b55a:	8002      	strh	r2, [r0, #0]
 801b55c:	e7f1      	b.n	801b542 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b55e:	88cb      	ldrh	r3, [r1, #6]
 801b560:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801b564:	8841      	ldrh	r1, [r0, #2]
 801b566:	1a9b      	subs	r3, r3, r2
 801b568:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b56c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801b570:	1a5b      	subs	r3, r3, r1
 801b572:	8045      	strh	r5, [r0, #2]
 801b574:	8082      	strh	r2, [r0, #4]
 801b576:	8003      	strh	r3, [r0, #0]
 801b578:	80c4      	strh	r4, [r0, #6]
 801b57a:	e7e2      	b.n	801b542 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801b57c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801b57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b580:	b09f      	sub	sp, #124	; 0x7c
 801b582:	9116      	str	r1, [sp, #88]	; 0x58
 801b584:	9317      	str	r3, [sp, #92]	; 0x5c
 801b586:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b588:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b58a:	8809      	ldrh	r1, [r1, #0]
 801b58c:	889b      	ldrh	r3, [r3, #4]
 801b58e:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801b592:	440b      	add	r3, r1
 801b594:	9212      	str	r2, [sp, #72]	; 0x48
 801b596:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801b59a:	b21b      	sxth	r3, r3
 801b59c:	9011      	str	r0, [sp, #68]	; 0x44
 801b59e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801b5a2:	9310      	str	r3, [sp, #64]	; 0x40
 801b5a4:	f8d8 3000 	ldr.w	r3, [r8]
 801b5a8:	7a59      	ldrb	r1, [r3, #9]
 801b5aa:	7a1b      	ldrb	r3, [r3, #8]
 801b5ac:	9114      	str	r1, [sp, #80]	; 0x50
 801b5ae:	9315      	str	r3, [sp, #84]	; 0x54
 801b5b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b5b2:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b5b6:	2a00      	cmp	r2, #0
 801b5b8:	d067      	beq.n	801b68a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801b5ba:	f898 3010 	ldrb.w	r3, [r8, #16]
 801b5be:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801b5c0:	2b04      	cmp	r3, #4
 801b5c2:	bf14      	ite	ne
 801b5c4:	2301      	movne	r3, #1
 801b5c6:	2302      	moveq	r3, #2
 801b5c8:	4413      	add	r3, r2
 801b5ca:	f04f 0900 	mov.w	r9, #0
 801b5ce:	930f      	str	r3, [sp, #60]	; 0x3c
 801b5d0:	464c      	mov	r4, r9
 801b5d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801b5d6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801b5da:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801b5de:	4293      	cmp	r3, r2
 801b5e0:	f280 808c 	bge.w	801b6fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801b5e4:	2300      	movs	r3, #0
 801b5e6:	931c      	str	r3, [sp, #112]	; 0x70
 801b5e8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b5ec:	429c      	cmp	r4, r3
 801b5ee:	d006      	beq.n	801b5fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801b5f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b5f2:	f242 020b 	movw	r2, #8203	; 0x200b
 801b5f6:	4294      	cmp	r4, r2
 801b5f8:	bf18      	it	ne
 801b5fa:	4623      	movne	r3, r4
 801b5fc:	930d      	str	r3, [sp, #52]	; 0x34
 801b5fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b600:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801b602:	f8d8 2000 	ldr.w	r2, [r8]
 801b606:	428b      	cmp	r3, r1
 801b608:	db41      	blt.n	801b68e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801b60a:	6813      	ldr	r3, [r2, #0]
 801b60c:	4610      	mov	r0, r2
 801b60e:	695b      	ldr	r3, [r3, #20]
 801b610:	4798      	blx	r3
 801b612:	4604      	mov	r4, r0
 801b614:	f8d8 0000 	ldr.w	r0, [r8]
 801b618:	aa1d      	add	r2, sp, #116	; 0x74
 801b61a:	4621      	mov	r1, r4
 801b61c:	6803      	ldr	r3, [r0, #0]
 801b61e:	689e      	ldr	r6, [r3, #8]
 801b620:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801b624:	47b0      	blx	r6
 801b626:	901c      	str	r0, [sp, #112]	; 0x70
 801b628:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b62c:	429c      	cmp	r4, r3
 801b62e:	f000 80ea 	beq.w	801b806 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b632:	f242 030b 	movw	r3, #8203	; 0x200b
 801b636:	429c      	cmp	r4, r3
 801b638:	f000 80e5 	beq.w	801b806 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b63c:	2c00      	cmp	r4, #0
 801b63e:	f000 80f7 	beq.w	801b830 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801b642:	2c0a      	cmp	r4, #10
 801b644:	d060      	beq.n	801b708 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801b646:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b648:	b36a      	cbz	r2, 801b6a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801b64a:	8894      	ldrh	r4, [r2, #4]
 801b64c:	f1bb 0f00 	cmp.w	fp, #0
 801b650:	d03b      	beq.n	801b6ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801b652:	f892 900d 	ldrb.w	r9, [r2, #13]
 801b656:	f1bb 0f01 	cmp.w	fp, #1
 801b65a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801b65e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801b662:	f892 900a 	ldrb.w	r9, [r2, #10]
 801b666:	ea49 0903 	orr.w	r9, r9, r3
 801b66a:	d134      	bne.n	801b6d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801b66c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b66e:	eba5 0509 	sub.w	r5, r5, r9
 801b672:	2b00      	cmp	r3, #0
 801b674:	d14f      	bne.n	801b716 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801b676:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b678:	eb09 0305 	add.w	r3, r9, r5
 801b67c:	4413      	add	r3, r2
 801b67e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b680:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b684:	4293      	cmp	r3, r2
 801b686:	da51      	bge.n	801b72c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801b688:	e038      	b.n	801b6fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801b68a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b68c:	e79d      	b.n	801b5ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801b68e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801b692:	4659      	mov	r1, fp
 801b694:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b696:	9301      	str	r3, [sp, #4]
 801b698:	ab1d      	add	r3, sp, #116	; 0x74
 801b69a:	9300      	str	r3, [sp, #0]
 801b69c:	ab1c      	add	r3, sp, #112	; 0x70
 801b69e:	f002 fa71 	bl	801db84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801b6a2:	4604      	mov	r4, r0
 801b6a4:	e7c0      	b.n	801b628 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801b6a6:	f8d8 0000 	ldr.w	r0, [r8]
 801b6aa:	6803      	ldr	r3, [r0, #0]
 801b6ac:	691b      	ldr	r3, [r3, #16]
 801b6ae:	4798      	blx	r3
 801b6b0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b6b4:	4298      	cmp	r0, r3
 801b6b6:	f000 80a6 	beq.w	801b806 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b6ba:	f242 030b 	movw	r3, #8203	; 0x200b
 801b6be:	4298      	cmp	r0, r3
 801b6c0:	f000 80a1 	beq.w	801b806 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b6c4:	f1bb 0f00 	cmp.w	fp, #0
 801b6c8:	d100      	bne.n	801b6cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801b6ca:	444d      	add	r5, r9
 801b6cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b6ce:	2a00      	cmp	r2, #0
 801b6d0:	d1bf      	bne.n	801b652 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801b6d2:	4691      	mov	r9, r2
 801b6d4:	e097      	b.n	801b806 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b6d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	f000 80ab 	beq.w	801b834 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801b6de:	f1bb 0f00 	cmp.w	fp, #0
 801b6e2:	d118      	bne.n	801b716 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801b6e4:	f8d8 0000 	ldr.w	r0, [r8]
 801b6e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b6ea:	6803      	ldr	r3, [r0, #0]
 801b6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b6ee:	4798      	blx	r3
 801b6f0:	4405      	add	r5, r0
 801b6f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b6f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b6f6:	1aeb      	subs	r3, r5, r3
 801b6f8:	4293      	cmp	r3, r2
 801b6fa:	dd17      	ble.n	801b72c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801b6fc:	2c00      	cmp	r4, #0
 801b6fe:	f000 8097 	beq.w	801b830 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801b702:	2c0a      	cmp	r4, #10
 801b704:	f040 8085 	bne.w	801b812 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801b708:	240a      	movs	r4, #10
 801b70a:	fab4 f084 	clz	r0, r4
 801b70e:	0940      	lsrs	r0, r0, #5
 801b710:	b01f      	add	sp, #124	; 0x7c
 801b712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b716:	f8d8 0000 	ldr.w	r0, [r8]
 801b71a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b71c:	6803      	ldr	r3, [r0, #0]
 801b71e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b720:	4798      	blx	r3
 801b722:	f1bb 0f01 	cmp.w	fp, #1
 801b726:	eba5 0500 	sub.w	r5, r5, r0
 801b72a:	d0a4      	beq.n	801b676 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801b72c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b72e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b730:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801b734:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b738:	7b43      	ldrb	r3, [r0, #13]
 801b73a:	4429      	add	r1, r5
 801b73c:	015b      	lsls	r3, r3, #5
 801b73e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b742:	7983      	ldrb	r3, [r0, #6]
 801b744:	4313      	orrs	r3, r2
 801b746:	440b      	add	r3, r1
 801b748:	42b3      	cmp	r3, r6
 801b74a:	db5c      	blt.n	801b806 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b74c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b74e:	4299      	cmp	r1, r3
 801b750:	da59      	bge.n	801b806 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b752:	f8d8 0000 	ldr.w	r0, [r8]
 801b756:	42ae      	cmp	r6, r5
 801b758:	6803      	ldr	r3, [r0, #0]
 801b75a:	bfcc      	ite	gt
 801b75c:	1b76      	subgt	r6, r6, r5
 801b75e:	2600      	movle	r6, #0
 801b760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b762:	bfc8      	it	gt
 801b764:	b2b6      	uxthgt	r6, r6
 801b766:	4798      	blx	r3
 801b768:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b76a:	7b5a      	ldrb	r2, [r3, #13]
 801b76c:	00d1      	lsls	r1, r2, #3
 801b76e:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801b772:	7a19      	ldrb	r1, [r3, #8]
 801b774:	4339      	orrs	r1, r7
 801b776:	0657      	lsls	r7, r2, #25
 801b778:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801b77a:	bf48      	it	mi
 801b77c:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801b780:	4407      	add	r7, r0
 801b782:	bf48      	it	mi
 801b784:	b209      	sxthmi	r1, r1
 801b786:	1a7f      	subs	r7, r7, r1
 801b788:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b78a:	b2bf      	uxth	r7, r7
 801b78c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801b790:	fa0f fa87 	sxth.w	sl, r7
 801b794:	4551      	cmp	r1, sl
 801b796:	dd3a      	ble.n	801b80e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b798:	0112      	lsls	r2, r2, #4
 801b79a:	79d8      	ldrb	r0, [r3, #7]
 801b79c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b7a0:	4302      	orrs	r2, r0
 801b7a2:	4492      	add	sl, r2
 801b7a4:	4551      	cmp	r1, sl
 801b7a6:	dc2e      	bgt.n	801b806 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b7a8:	1bcf      	subs	r7, r1, r7
 801b7aa:	468a      	mov	sl, r1
 801b7ac:	b2bf      	uxth	r7, r7
 801b7ae:	9319      	str	r3, [sp, #100]	; 0x64
 801b7b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b7b2:	f8d8 0000 	ldr.w	r0, [r8]
 801b7b6:	681a      	ldr	r2, [r3, #0]
 801b7b8:	6801      	ldr	r1, [r0, #0]
 801b7ba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801b7bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b7be:	9313      	str	r3, [sp, #76]	; 0x4c
 801b7c0:	9218      	str	r2, [sp, #96]	; 0x60
 801b7c2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801b7c4:	4788      	blx	r1
 801b7c6:	f898 1006 	ldrb.w	r1, [r8, #6]
 801b7ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b7cc:	910b      	str	r1, [sp, #44]	; 0x2c
 801b7ce:	f898 100e 	ldrb.w	r1, [r8, #14]
 801b7d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b7d4:	910a      	str	r1, [sp, #40]	; 0x28
 801b7d6:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801b7da:	9109      	str	r1, [sp, #36]	; 0x24
 801b7dc:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801b7e0:	9305      	str	r3, [sp, #20]
 801b7e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b7e4:	9206      	str	r2, [sp, #24]
 801b7e6:	e9cd a601 	strd	sl, r6, [sp, #4]
 801b7ea:	442e      	add	r6, r5
 801b7ec:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801b7f0:	b236      	sxth	r6, r6
 801b7f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b7f4:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801b7f8:	9600      	str	r6, [sp, #0]
 801b7fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b7fc:	681a      	ldr	r2, [r3, #0]
 801b7fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b800:	685b      	ldr	r3, [r3, #4]
 801b802:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b804:	47b0      	blx	r6
 801b806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b808:	3301      	adds	r3, #1
 801b80a:	930e      	str	r3, [sp, #56]	; 0x38
 801b80c:	e6e5      	b.n	801b5da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801b80e:	2700      	movs	r7, #0
 801b810:	e7cd      	b.n	801b7ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 801b812:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b814:	3501      	adds	r5, #1
 801b816:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b818:	429d      	cmp	r5, r3
 801b81a:	f6bf af76 	bge.w	801b70a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801b81e:	4659      	mov	r1, fp
 801b820:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b822:	f7f9 fa89 	bl	8014d38 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b826:	4604      	mov	r4, r0
 801b828:	b110      	cbz	r0, 801b830 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801b82a:	280a      	cmp	r0, #10
 801b82c:	d1f2      	bne.n	801b814 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801b82e:	e76b      	b.n	801b708 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801b830:	2400      	movs	r4, #0
 801b832:	e76a      	b.n	801b70a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801b834:	f1bb 0f00 	cmp.w	fp, #0
 801b838:	f43f af5b 	beq.w	801b6f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801b83c:	e776      	b.n	801b72c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801b83e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801b83e:	b530      	push	{r4, r5, lr}
 801b840:	8a44      	ldrh	r4, [r0, #18]
 801b842:	8ac5      	ldrh	r5, [r0, #22]
 801b844:	82c3      	strh	r3, [r0, #22]
 801b846:	442c      	add	r4, r5
 801b848:	1ae4      	subs	r4, r4, r3
 801b84a:	8b03      	ldrh	r3, [r0, #24]
 801b84c:	8244      	strh	r4, [r0, #18]
 801b84e:	8a84      	ldrh	r4, [r0, #20]
 801b850:	4422      	add	r2, r4
 801b852:	440c      	add	r4, r1
 801b854:	1a59      	subs	r1, r3, r1
 801b856:	8342      	strh	r2, [r0, #26]
 801b858:	8284      	strh	r4, [r0, #20]
 801b85a:	8301      	strh	r1, [r0, #24]
 801b85c:	bd30      	pop	{r4, r5, pc}

0801b85e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801b85e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b862:	7a43      	ldrb	r3, [r0, #9]
 801b864:	b087      	sub	sp, #28
 801b866:	4604      	mov	r4, r0
 801b868:	460f      	mov	r7, r1
 801b86a:	1eda      	subs	r2, r3, #3
 801b86c:	b2d2      	uxtb	r2, r2
 801b86e:	2900      	cmp	r1, #0
 801b870:	d036      	beq.n	801b8e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801b872:	2a01      	cmp	r2, #1
 801b874:	d932      	bls.n	801b8dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801b876:	1e58      	subs	r0, r3, #1
 801b878:	f1d0 0b00 	rsbs	fp, r0, #0
 801b87c:	eb4b 0b00 	adc.w	fp, fp, r0
 801b880:	1e99      	subs	r1, r3, #2
 801b882:	424b      	negs	r3, r1
 801b884:	414b      	adcs	r3, r1
 801b886:	9303      	str	r3, [sp, #12]
 801b888:	2300      	movs	r3, #0
 801b88a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801b88e:	2500      	movs	r5, #0
 801b890:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801b894:	46a9      	mov	r9, r5
 801b896:	8265      	strh	r5, [r4, #18]
 801b898:	82a5      	strh	r5, [r4, #20]
 801b89a:	2300      	movs	r3, #0
 801b89c:	9305      	str	r3, [sp, #20]
 801b89e:	8823      	ldrh	r3, [r4, #0]
 801b8a0:	2b20      	cmp	r3, #32
 801b8a2:	d02b      	beq.n	801b8fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801b8a4:	eba3 020a 	sub.w	r2, r3, sl
 801b8a8:	4256      	negs	r6, r2
 801b8aa:	4156      	adcs	r6, r2
 801b8ac:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b8b0:	4293      	cmp	r3, r2
 801b8b2:	d004      	beq.n	801b8be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b8b4:	4553      	cmp	r3, sl
 801b8b6:	bf16      	itet	ne
 801b8b8:	4699      	movne	r9, r3
 801b8ba:	2601      	moveq	r6, #1
 801b8bc:	2600      	movne	r6, #0
 801b8be:	ab05      	add	r3, sp, #20
 801b8c0:	68e2      	ldr	r2, [r4, #12]
 801b8c2:	7a21      	ldrb	r1, [r4, #8]
 801b8c4:	6860      	ldr	r0, [r4, #4]
 801b8c6:	f002 f909 	bl	801dadc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b8ca:	8020      	strh	r0, [r4, #0]
 801b8cc:	b9c8      	cbnz	r0, 801b902 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801b8ce:	8b22      	ldrh	r2, [r4, #24]
 801b8d0:	2300      	movs	r3, #0
 801b8d2:	4611      	mov	r1, r2
 801b8d4:	4620      	mov	r0, r4
 801b8d6:	f7ff ffb2 	bl	801b83e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b8da:	e066      	b.n	801b9aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b8dc:	468b      	mov	fp, r1
 801b8de:	e7cf      	b.n	801b880 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801b8e0:	3b01      	subs	r3, #1
 801b8e2:	2a01      	cmp	r2, #1
 801b8e4:	9103      	str	r1, [sp, #12]
 801b8e6:	468b      	mov	fp, r1
 801b8e8:	bf8c      	ite	hi
 801b8ea:	2200      	movhi	r2, #0
 801b8ec:	2201      	movls	r2, #1
 801b8ee:	2b01      	cmp	r3, #1
 801b8f0:	9202      	str	r2, [sp, #8]
 801b8f2:	bf8c      	ite	hi
 801b8f4:	2300      	movhi	r3, #0
 801b8f6:	2301      	movls	r3, #1
 801b8f8:	9301      	str	r3, [sp, #4]
 801b8fa:	e7c8      	b.n	801b88e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801b8fc:	4699      	mov	r9, r3
 801b8fe:	2601      	movs	r6, #1
 801b900:	e7dd      	b.n	801b8be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b902:	8ae3      	ldrh	r3, [r4, #22]
 801b904:	280a      	cmp	r0, #10
 801b906:	f103 0301 	add.w	r3, r3, #1
 801b90a:	82e3      	strh	r3, [r4, #22]
 801b90c:	d0df      	beq.n	801b8ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801b90e:	9a05      	ldr	r2, [sp, #20]
 801b910:	bb42      	cbnz	r2, 801b964 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801b912:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b916:	4298      	cmp	r0, r3
 801b918:	d001      	beq.n	801b91e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801b91a:	4550      	cmp	r0, sl
 801b91c:	d1bd      	bne.n	801b89a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b91e:	8823      	ldrh	r3, [r4, #0]
 801b920:	8b21      	ldrh	r1, [r4, #24]
 801b922:	2b20      	cmp	r3, #32
 801b924:	d001      	beq.n	801b92a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801b926:	4553      	cmp	r3, sl
 801b928:	d131      	bne.n	801b98e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801b92a:	2e00      	cmp	r6, #0
 801b92c:	bf0a      	itet	eq
 801b92e:	460d      	moveq	r5, r1
 801b930:	4630      	movne	r0, r6
 801b932:	2001      	moveq	r0, #1
 801b934:	440a      	add	r2, r1
 801b936:	8aa3      	ldrh	r3, [r4, #20]
 801b938:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801b93c:	b292      	uxth	r2, r2
 801b93e:	8322      	strh	r2, [r4, #24]
 801b940:	4413      	add	r3, r2
 801b942:	2f00      	cmp	r7, #0
 801b944:	d03a      	beq.n	801b9bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801b946:	f1bb 0f00 	cmp.w	fp, #0
 801b94a:	d102      	bne.n	801b952 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801b94c:	9903      	ldr	r1, [sp, #12]
 801b94e:	b301      	cbz	r1, 801b992 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b950:	b1f8      	cbz	r0, 801b992 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b952:	8ba1      	ldrh	r1, [r4, #28]
 801b954:	4419      	add	r1, r3
 801b956:	458c      	cmp	ip, r1
 801b958:	da2a      	bge.n	801b9b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b95a:	8a61      	ldrh	r1, [r4, #18]
 801b95c:	b341      	cbz	r1, 801b9b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b95e:	4563      	cmp	r3, ip
 801b960:	dd9b      	ble.n	801b89a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b962:	e01c      	b.n	801b99e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801b964:	8893      	ldrh	r3, [r2, #4]
 801b966:	4649      	mov	r1, r9
 801b968:	8023      	strh	r3, [r4, #0]
 801b96a:	f892 800d 	ldrb.w	r8, [r2, #13]
 801b96e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801b972:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801b976:	f892 800a 	ldrb.w	r8, [r2, #10]
 801b97a:	ea48 0800 	orr.w	r8, r8, r0
 801b97e:	68e0      	ldr	r0, [r4, #12]
 801b980:	6803      	ldr	r3, [r0, #0]
 801b982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b984:	4798      	blx	r3
 801b986:	eb08 0200 	add.w	r2, r8, r0
 801b98a:	b292      	uxth	r2, r2
 801b98c:	e7c7      	b.n	801b91e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801b98e:	2000      	movs	r0, #0
 801b990:	e7d0      	b.n	801b934 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801b992:	4563      	cmp	r3, ip
 801b994:	dd81      	ble.n	801b89a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b996:	8a63      	ldrh	r3, [r4, #18]
 801b998:	2b00      	cmp	r3, #0
 801b99a:	f43f af7e 	beq.w	801b89a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b99e:	2301      	movs	r3, #1
 801b9a0:	8ba2      	ldrh	r2, [r4, #28]
 801b9a2:	77a3      	strb	r3, [r4, #30]
 801b9a4:	8b63      	ldrh	r3, [r4, #26]
 801b9a6:	4413      	add	r3, r2
 801b9a8:	8363      	strh	r3, [r4, #26]
 801b9aa:	b007      	add	sp, #28
 801b9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9b0:	2300      	movs	r3, #0
 801b9b2:	4611      	mov	r1, r2
 801b9b4:	4620      	mov	r0, r4
 801b9b6:	f7ff ff42 	bl	801b83e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b9ba:	e76e      	b.n	801b89a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b9bc:	4563      	cmp	r3, ip
 801b9be:	dd14      	ble.n	801b9ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801b9c0:	9b02      	ldr	r3, [sp, #8]
 801b9c2:	b113      	cbz	r3, 801b9ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801b9c4:	2301      	movs	r3, #1
 801b9c6:	460a      	mov	r2, r1
 801b9c8:	e783      	b.n	801b8d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801b9ca:	9b01      	ldr	r3, [sp, #4]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	f43f af64 	beq.w	801b89a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b9d2:	2800      	cmp	r0, #0
 801b9d4:	f47f af61 	bne.w	801b89a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b9d8:	b116      	cbz	r6, 801b9e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801b9da:	2301      	movs	r3, #1
 801b9dc:	462a      	mov	r2, r5
 801b9de:	e779      	b.n	801b8d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801b9e0:	8a63      	ldrh	r3, [r4, #18]
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	f43f af59 	beq.w	801b89a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b9e8:	e7df      	b.n	801b9aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b9ea:	2800      	cmp	r0, #0
 801b9ec:	f47f af55 	bne.w	801b89a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b9f0:	2e00      	cmp	r6, #0
 801b9f2:	f43f af52 	beq.w	801b89a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b9f6:	2301      	movs	r3, #1
 801b9f8:	462a      	mov	r2, r5
 801b9fa:	e7db      	b.n	801b9b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801b9fc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801b9fc:	b530      	push	{r4, r5, lr}
 801b9fe:	4605      	mov	r5, r0
 801ba00:	b08b      	sub	sp, #44	; 0x2c
 801ba02:	b191      	cbz	r1, 801ba2a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801ba04:	2401      	movs	r4, #1
 801ba06:	e9cd 3100 	strd	r3, r1, [sp]
 801ba0a:	4613      	mov	r3, r2
 801ba0c:	4601      	mov	r1, r0
 801ba0e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801ba12:	a802      	add	r0, sp, #8
 801ba14:	f7ff fd0b 	bl	801b42e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801ba18:	2100      	movs	r1, #0
 801ba1a:	a802      	add	r0, sp, #8
 801ba1c:	f7ff ff1f 	bl	801b85e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801ba20:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ba24:	b163      	cbz	r3, 801ba40 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801ba26:	3401      	adds	r4, #1
 801ba28:	e7f6      	b.n	801ba18 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801ba2a:	2401      	movs	r4, #1
 801ba2c:	f002 f948 	bl	801dcc0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ba30:	280a      	cmp	r0, #10
 801ba32:	4628      	mov	r0, r5
 801ba34:	bf08      	it	eq
 801ba36:	3401      	addeq	r4, #1
 801ba38:	f002 f942 	bl	801dcc0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ba3c:	2800      	cmp	r0, #0
 801ba3e:	d1f7      	bne.n	801ba30 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801ba40:	b2a0      	uxth	r0, r4
 801ba42:	b00b      	add	sp, #44	; 0x2c
 801ba44:	bd30      	pop	{r4, r5, pc}

0801ba46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801ba46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba4a:	b0db      	sub	sp, #364	; 0x16c
 801ba4c:	4689      	mov	r9, r1
 801ba4e:	461c      	mov	r4, r3
 801ba50:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 801ba54:	900a      	str	r0, [sp, #40]	; 0x28
 801ba56:	f1ba 0f00 	cmp.w	sl, #0
 801ba5a:	f000 80a5 	beq.w	801bba8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	f000 80a1 	beq.w	801bba8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801ba66:	7ba3      	ldrb	r3, [r4, #14]
 801ba68:	2b00      	cmp	r3, #0
 801ba6a:	f000 809d 	beq.w	801bba8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801ba6e:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801ba72:	6810      	ldr	r0, [r2, #0]
 801ba74:	6851      	ldr	r1, [r2, #4]
 801ba76:	2500      	movs	r5, #0
 801ba78:	4643      	mov	r3, r8
 801ba7a:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801ba7e:	950e      	str	r5, [sp, #56]	; 0x38
 801ba80:	af18      	add	r7, sp, #96	; 0x60
 801ba82:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801ba86:	79a2      	ldrb	r2, [r4, #6]
 801ba88:	c303      	stmia	r3!, {r0, r1}
 801ba8a:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801ba8e:	a90e      	add	r1, sp, #56	; 0x38
 801ba90:	4640      	mov	r0, r8
 801ba92:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801ba96:	f7ff fd40 	bl	801b51a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801ba9a:	a90e      	add	r1, sp, #56	; 0x38
 801ba9c:	79a2      	ldrb	r2, [r4, #6]
 801ba9e:	4608      	mov	r0, r1
 801baa0:	f7ff fd3b 	bl	801b51a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801baa4:	4638      	mov	r0, r7
 801baa6:	f001 fcda 	bl	801d45e <_ZN8touchgfx12TextProviderC1Ev>
 801baaa:	6820      	ldr	r0, [r4, #0]
 801baac:	6803      	ldr	r3, [r0, #0]
 801baae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bab0:	4798      	blx	r3
 801bab2:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801bab4:	4603      	mov	r3, r0
 801bab6:	4651      	mov	r1, sl
 801bab8:	4638      	mov	r0, r7
 801baba:	f001 fd15 	bl	801d4e8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801babe:	7923      	ldrb	r3, [r4, #4]
 801bac0:	6820      	ldr	r0, [r4, #0]
 801bac2:	9308      	str	r3, [sp, #32]
 801bac4:	6803      	ldr	r3, [r0, #0]
 801bac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bac8:	4798      	blx	r3
 801baca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bace:	181e      	adds	r6, r3, r0
 801bad0:	42ae      	cmp	r6, r5
 801bad2:	dd06      	ble.n	801bae2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801bad4:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801bad8:	4282      	cmp	r2, r0
 801bada:	bfa4      	itt	ge
 801badc:	189d      	addge	r5, r3, r2
 801bade:	fb95 f5f6 	sdivge	r5, r5, r6
 801bae2:	a82e      	add	r0, sp, #184	; 0xb8
 801bae4:	f001 fcbb 	bl	801d45e <_ZN8touchgfx12TextProviderC1Ev>
 801bae8:	7c23      	ldrb	r3, [r4, #16]
 801baea:	b14b      	cbz	r3, 801bb00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 801baec:	6820      	ldr	r0, [r4, #0]
 801baee:	6803      	ldr	r3, [r0, #0]
 801baf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801baf2:	4798      	blx	r3
 801baf4:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801baf6:	4603      	mov	r3, r0
 801baf8:	4651      	mov	r1, sl
 801bafa:	a82e      	add	r0, sp, #184	; 0xb8
 801bafc:	f001 fcf4 	bl	801d4e8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801bb00:	7c21      	ldrb	r1, [r4, #16]
 801bb02:	a810      	add	r0, sp, #64	; 0x40
 801bb04:	7963      	ldrb	r3, [r4, #5]
 801bb06:	9101      	str	r1, [sp, #4]
 801bb08:	6821      	ldr	r1, [r4, #0]
 801bb0a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801bb0e:	9100      	str	r1, [sp, #0]
 801bb10:	a92e      	add	r1, sp, #184	; 0xb8
 801bb12:	f7ff fc8c 	bl	801b42e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801bb16:	7c23      	ldrb	r3, [r4, #16]
 801bb18:	b9bb      	cbnz	r3, 801bb4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 801bb1a:	fa1f fa86 	uxth.w	sl, r6
 801bb1e:	2d00      	cmp	r5, #0
 801bb20:	dd45      	ble.n	801bbae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801bb22:	4638      	mov	r0, r7
 801bb24:	f002 f8cc 	bl	801dcc0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801bb28:	2800      	cmp	r0, #0
 801bb2a:	d03d      	beq.n	801bba8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801bb2c:	280a      	cmp	r0, #10
 801bb2e:	d1f6      	bne.n	801bb1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801bb30:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801bb34:	3d01      	subs	r5, #1
 801bb36:	4453      	add	r3, sl
 801bb38:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801bb3c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801bb40:	eba3 030a 	sub.w	r3, r3, sl
 801bb44:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801bb48:	e7e9      	b.n	801bb1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801bb4a:	0073      	lsls	r3, r6, #1
 801bb4c:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801bb50:	fa1f fa86 	uxth.w	sl, r6
 801bb54:	9309      	str	r3, [sp, #36]	; 0x24
 801bb56:	2d00      	cmp	r5, #0
 801bb58:	dd29      	ble.n	801bbae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801bb5a:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801bb5e:	a810      	add	r0, sp, #64	; 0x40
 801bb60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb62:	428b      	cmp	r3, r1
 801bb64:	bfd4      	ite	le
 801bb66:	2100      	movle	r1, #0
 801bb68:	2101      	movgt	r1, #1
 801bb6a:	f7ff fe78 	bl	801b85e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801bb6e:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 801bb72:	3b01      	subs	r3, #1
 801bb74:	b29b      	uxth	r3, r3
 801bb76:	455b      	cmp	r3, fp
 801bb78:	930b      	str	r3, [sp, #44]	; 0x2c
 801bb7a:	d005      	beq.n	801bb88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801bb7c:	7961      	ldrb	r1, [r4, #5]
 801bb7e:	4638      	mov	r0, r7
 801bb80:	f7f9 f8da 	bl	8014d38 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bb84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb86:	e7f4      	b.n	801bb72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 801bb88:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801bb8c:	3d01      	subs	r5, #1
 801bb8e:	4453      	add	r3, sl
 801bb90:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801bb94:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801bb98:	eba3 030a 	sub.w	r3, r3, sl
 801bb9c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801bba0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d1d6      	bne.n	801bb56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 801bba8:	b05b      	add	sp, #364	; 0x16c
 801bbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbae:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801bbb2:	ad44      	add	r5, sp, #272	; 0x110
 801bbb4:	f04f 0b00 	mov.w	fp, #0
 801bbb8:	7c23      	ldrb	r3, [r4, #16]
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d067      	beq.n	801bc8e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801bbbe:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801bbc2:	a810      	add	r0, sp, #64	; 0x40
 801bbc4:	458a      	cmp	sl, r1
 801bbc6:	bfd4      	ite	le
 801bbc8:	2100      	movle	r1, #0
 801bbca:	2101      	movgt	r1, #1
 801bbcc:	f7ff fe47 	bl	801b85e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801bbd0:	9b08      	ldr	r3, [sp, #32]
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	d056      	beq.n	801bc84 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801bbd6:	7c23      	ldrb	r3, [r4, #16]
 801bbd8:	2258      	movs	r2, #88	; 0x58
 801bbda:	4639      	mov	r1, r7
 801bbdc:	4628      	mov	r0, r5
 801bbde:	9309      	str	r3, [sp, #36]	; 0x24
 801bbe0:	f00c fcce 	bl	8028580 <memcpy>
 801bbe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	d059      	beq.n	801bc9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801bbea:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801bbee:	7922      	ldrb	r2, [r4, #4]
 801bbf0:	2a01      	cmp	r2, #1
 801bbf2:	d13d      	bne.n	801bc70 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 801bbf4:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801bbf8:	1ac0      	subs	r0, r0, r3
 801bbfa:	2302      	movs	r3, #2
 801bbfc:	fb90 f0f3 	sdiv	r0, r0, r3
 801bc00:	b200      	sxth	r0, r0
 801bc02:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bc06:	4418      	add	r0, r3
 801bc08:	7c23      	ldrb	r3, [r4, #16]
 801bc0a:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d03a      	beq.n	801bc88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801bc12:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801bc16:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801bc1a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801bc1e:	9500      	str	r5, [sp, #0]
 801bc20:	980a      	ldr	r0, [sp, #40]	; 0x28
 801bc22:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801bc26:	e9cd b703 	strd	fp, r7, [sp, #12]
 801bc2a:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801bc2e:	464a      	mov	r2, r9
 801bc30:	2100      	movs	r1, #0
 801bc32:	f7ff fca3 	bl	801b57c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801bc36:	2800      	cmp	r0, #0
 801bc38:	d1b6      	bne.n	801bba8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801bc3a:	b2b2      	uxth	r2, r6
 801bc3c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801bc40:	4611      	mov	r1, r2
 801bc42:	4413      	add	r3, r2
 801bc44:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801bc48:	b21b      	sxth	r3, r3
 801bc4a:	1a52      	subs	r2, r2, r1
 801bc4c:	7c21      	ldrb	r1, [r4, #16]
 801bc4e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801bc52:	b212      	sxth	r2, r2
 801bc54:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801bc58:	b109      	cbz	r1, 801bc5e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 801bc5a:	42b2      	cmp	r2, r6
 801bc5c:	dba4      	blt.n	801bba8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801bc5e:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801bc62:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801bc66:	440a      	add	r2, r1
 801bc68:	b212      	sxth	r2, r2
 801bc6a:	4293      	cmp	r3, r2
 801bc6c:	dda4      	ble.n	801bbb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 801bc6e:	e79b      	b.n	801bba8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801bc70:	2a02      	cmp	r2, #2
 801bc72:	d105      	bne.n	801bc80 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 801bc74:	7be2      	ldrb	r2, [r4, #15]
 801bc76:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801bc7a:	1a80      	subs	r0, r0, r2
 801bc7c:	1ac0      	subs	r0, r0, r3
 801bc7e:	e7bf      	b.n	801bc00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 801bc80:	2000      	movs	r0, #0
 801bc82:	e7be      	b.n	801bc02 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801bc84:	7be0      	ldrb	r0, [r4, #15]
 801bc86:	e7bc      	b.n	801bc02 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801bc88:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801bc8c:	e7c3      	b.n	801bc16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 801bc8e:	9b08      	ldr	r3, [sp, #32]
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d0f7      	beq.n	801bc84 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801bc94:	2258      	movs	r2, #88	; 0x58
 801bc96:	4639      	mov	r1, r7
 801bc98:	4628      	mov	r0, r5
 801bc9a:	f00c fc71 	bl	8028580 <memcpy>
 801bc9e:	2300      	movs	r3, #0
 801bca0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801bca4:	6821      	ldr	r1, [r4, #0]
 801bca6:	4628      	mov	r0, r5
 801bca8:	f7ff fbfb 	bl	801b4a2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801bcac:	b203      	sxth	r3, r0
 801bcae:	e79e      	b.n	801bbee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

0801bcb0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801bcb0:	2b02      	cmp	r3, #2
 801bcb2:	b510      	push	{r4, lr}
 801bcb4:	f9b0 4000 	ldrsh.w	r4, [r0]
 801bcb8:	d00b      	beq.n	801bcd2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801bcba:	2b03      	cmp	r3, #3
 801bcbc:	d00e      	beq.n	801bcdc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801bcbe:	2b01      	cmp	r3, #1
 801bcc0:	d001      	beq.n	801bcc6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801bcc2:	1860      	adds	r0, r4, r1
 801bcc4:	bd10      	pop	{r4, pc}
 801bcc6:	8880      	ldrh	r0, [r0, #4]
 801bcc8:	4420      	add	r0, r4
 801bcca:	b200      	sxth	r0, r0
 801bccc:	1a80      	subs	r0, r0, r2
 801bcce:	3801      	subs	r0, #1
 801bcd0:	e7f8      	b.n	801bcc4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801bcd2:	8880      	ldrh	r0, [r0, #4]
 801bcd4:	4420      	add	r0, r4
 801bcd6:	b200      	sxth	r0, r0
 801bcd8:	1a40      	subs	r0, r0, r1
 801bcda:	e7f8      	b.n	801bcce <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801bcdc:	18a0      	adds	r0, r4, r2
 801bcde:	e7f1      	b.n	801bcc4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801bce0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801bce0:	2b02      	cmp	r3, #2
 801bce2:	b510      	push	{r4, lr}
 801bce4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801bce8:	d006      	beq.n	801bcf8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801bcea:	2b03      	cmp	r3, #3
 801bcec:	d00a      	beq.n	801bd04 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801bcee:	2b01      	cmp	r3, #1
 801bcf0:	bf14      	ite	ne
 801bcf2:	18a0      	addne	r0, r4, r2
 801bcf4:	1860      	addeq	r0, r4, r1
 801bcf6:	bd10      	pop	{r4, pc}
 801bcf8:	88c0      	ldrh	r0, [r0, #6]
 801bcfa:	4420      	add	r0, r4
 801bcfc:	b200      	sxth	r0, r0
 801bcfe:	1a80      	subs	r0, r0, r2
 801bd00:	3801      	subs	r0, #1
 801bd02:	e7f8      	b.n	801bcf6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801bd04:	88c0      	ldrh	r0, [r0, #6]
 801bd06:	4420      	add	r0, r4
 801bd08:	b200      	sxth	r0, r0
 801bd0a:	1a40      	subs	r0, r0, r1
 801bd0c:	e7f8      	b.n	801bd00 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801bd10 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801bd10:	4b01      	ldr	r3, [pc, #4]	; (801bd18 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801bd12:	2200      	movs	r2, #0
 801bd14:	601a      	str	r2, [r3, #0]
 801bd16:	4770      	bx	lr
 801bd18:	2000b444 	.word	0x2000b444

0801bd1c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801bd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd1e:	1e05      	subs	r5, r0, #0
 801bd20:	f04f 0601 	mov.w	r6, #1
 801bd24:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801bd28:	bfba      	itte	lt
 801bd2a:	f04f 37ff 	movlt.w	r7, #4294967295
 801bd2e:	426d      	neglt	r5, r5
 801bd30:	2701      	movge	r7, #1
 801bd32:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801bd36:	f1be 0f00 	cmp.w	lr, #0
 801bd3a:	bfbc      	itt	lt
 801bd3c:	f1ce 0e00 	rsblt	lr, lr, #0
 801bd40:	427f      	neglt	r7, r7
 801bd42:	2c00      	cmp	r4, #0
 801bd44:	fa4e f001 	asr.w	r0, lr, r1
 801bd48:	fa06 f101 	lsl.w	r1, r6, r1
 801bd4c:	bfbc      	itt	lt
 801bd4e:	4264      	neglt	r4, r4
 801bd50:	427f      	neglt	r7, r7
 801bd52:	3901      	subs	r1, #1
 801bd54:	ea01 010e 	and.w	r1, r1, lr
 801bd58:	434d      	muls	r5, r1
 801bd5a:	f8dc 1000 	ldr.w	r1, [ip]
 801bd5e:	fb03 1300 	mla	r3, r3, r0, r1
 801bd62:	fb95 f1f4 	sdiv	r1, r5, r4
 801bd66:	fb04 5511 	mls	r5, r4, r1, r5
 801bd6a:	441d      	add	r5, r3
 801bd6c:	fb95 f3f4 	sdiv	r3, r5, r4
 801bd70:	4419      	add	r1, r3
 801bd72:	fb04 5413 	mls	r4, r4, r3, r5
 801bd76:	fb02 1000 	mla	r0, r2, r0, r1
 801bd7a:	f8cc 4000 	str.w	r4, [ip]
 801bd7e:	4378      	muls	r0, r7
 801bd80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801bd84 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801bd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd88:	4c24      	ldr	r4, [pc, #144]	; (801be1c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801bd8a:	b086      	sub	sp, #24
 801bd8c:	4605      	mov	r5, r0
 801bd8e:	6807      	ldr	r7, [r0, #0]
 801bd90:	69a3      	ldr	r3, [r4, #24]
 801bd92:	b92b      	cbnz	r3, 801bda0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801bd94:	6840      	ldr	r0, [r0, #4]
 801bd96:	e9c5 7000 	strd	r7, r0, [r5]
 801bd9a:	b006      	add	sp, #24
 801bd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bda0:	f04f 0802 	mov.w	r8, #2
 801bda4:	68a2      	ldr	r2, [r4, #8]
 801bda6:	ae06      	add	r6, sp, #24
 801bda8:	6820      	ldr	r0, [r4, #0]
 801bdaa:	fb93 f1f8 	sdiv	r1, r3, r8
 801bdae:	440a      	add	r2, r1
 801bdb0:	69e1      	ldr	r1, [r4, #28]
 801bdb2:	f846 2d04 	str.w	r2, [r6, #-4]!
 801bdb6:	9700      	str	r7, [sp, #0]
 801bdb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801bdba:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801bdbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801bdc0:	f7ff ffac 	bl	801bd1c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801bdc4:	69a3      	ldr	r3, [r4, #24]
 801bdc6:	4607      	mov	r7, r0
 801bdc8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801bdca:	9301      	str	r3, [sp, #4]
 801bdcc:	686b      	ldr	r3, [r5, #4]
 801bdce:	6a21      	ldr	r1, [r4, #32]
 801bdd0:	9300      	str	r3, [sp, #0]
 801bdd2:	9602      	str	r6, [sp, #8]
 801bdd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bdd6:	6860      	ldr	r0, [r4, #4]
 801bdd8:	f7ff ffa0 	bl	801bd1c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801bddc:	69a2      	ldr	r2, [r4, #24]
 801bdde:	6963      	ldr	r3, [r4, #20]
 801bde0:	4407      	add	r7, r0
 801bde2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bde4:	68e0      	ldr	r0, [r4, #12]
 801bde6:	fb92 f8f8 	sdiv	r8, r2, r8
 801bdea:	4443      	add	r3, r8
 801bdec:	9305      	str	r3, [sp, #20]
 801bdee:	682b      	ldr	r3, [r5, #0]
 801bdf0:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801bdf4:	9300      	str	r3, [sp, #0]
 801bdf6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801bdf8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801bdfa:	f7ff ff8f 	bl	801bd1c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801bdfe:	69a3      	ldr	r3, [r4, #24]
 801be00:	4680      	mov	r8, r0
 801be02:	9602      	str	r6, [sp, #8]
 801be04:	9301      	str	r3, [sp, #4]
 801be06:	686b      	ldr	r3, [r5, #4]
 801be08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801be0a:	9300      	str	r3, [sp, #0]
 801be0c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801be0e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801be10:	6920      	ldr	r0, [r4, #16]
 801be12:	f7ff ff83 	bl	801bd1c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801be16:	4440      	add	r0, r8
 801be18:	e7bd      	b.n	801bd96 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801be1a:	bf00      	nop
 801be1c:	2000b448 	.word	0x2000b448

0801be20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801be20:	4b07      	ldr	r3, [pc, #28]	; (801be40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801be22:	b510      	push	{r4, lr}
 801be24:	781b      	ldrb	r3, [r3, #0]
 801be26:	2b01      	cmp	r3, #1
 801be28:	d108      	bne.n	801be3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801be2a:	4b06      	ldr	r3, [pc, #24]	; (801be44 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801be2c:	880c      	ldrh	r4, [r1, #0]
 801be2e:	881b      	ldrh	r3, [r3, #0]
 801be30:	f9b0 2000 	ldrsh.w	r2, [r0]
 801be34:	3b01      	subs	r3, #1
 801be36:	1b1b      	subs	r3, r3, r4
 801be38:	8003      	strh	r3, [r0, #0]
 801be3a:	800a      	strh	r2, [r1, #0]
 801be3c:	bd10      	pop	{r4, pc}
 801be3e:	bf00      	nop
 801be40:	2000b414 	.word	0x2000b414
 801be44:	2000b418 	.word	0x2000b418

0801be48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801be48:	4b0a      	ldr	r3, [pc, #40]	; (801be74 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801be4a:	b510      	push	{r4, lr}
 801be4c:	781b      	ldrb	r3, [r3, #0]
 801be4e:	2b01      	cmp	r3, #1
 801be50:	d10e      	bne.n	801be70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801be52:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801be56:	8843      	ldrh	r3, [r0, #2]
 801be58:	f9b0 4000 	ldrsh.w	r4, [r0]
 801be5c:	18ca      	adds	r2, r1, r3
 801be5e:	4b06      	ldr	r3, [pc, #24]	; (801be78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801be60:	8044      	strh	r4, [r0, #2]
 801be62:	881b      	ldrh	r3, [r3, #0]
 801be64:	1a9b      	subs	r3, r3, r2
 801be66:	8003      	strh	r3, [r0, #0]
 801be68:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801be6c:	8081      	strh	r1, [r0, #4]
 801be6e:	80c3      	strh	r3, [r0, #6]
 801be70:	bd10      	pop	{r4, pc}
 801be72:	bf00      	nop
 801be74:	2000b414 	.word	0x2000b414
 801be78:	2000b410 	.word	0x2000b410

0801be7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801be7c:	4b07      	ldr	r3, [pc, #28]	; (801be9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801be7e:	b510      	push	{r4, lr}
 801be80:	781b      	ldrb	r3, [r3, #0]
 801be82:	2b01      	cmp	r3, #1
 801be84:	d108      	bne.n	801be98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801be86:	f9b1 3000 	ldrsh.w	r3, [r1]
 801be8a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801be8e:	8003      	strh	r3, [r0, #0]
 801be90:	8893      	ldrh	r3, [r2, #4]
 801be92:	3b01      	subs	r3, #1
 801be94:	1b1b      	subs	r3, r3, r4
 801be96:	800b      	strh	r3, [r1, #0]
 801be98:	bd10      	pop	{r4, pc}
 801be9a:	bf00      	nop
 801be9c:	2000b414 	.word	0x2000b414

0801bea0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801bea0:	4b08      	ldr	r3, [pc, #32]	; (801bec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801bea2:	b513      	push	{r0, r1, r4, lr}
 801bea4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bea8:	2400      	movs	r4, #0
 801beaa:	4b07      	ldr	r3, [pc, #28]	; (801bec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801beac:	f8ad 2004 	strh.w	r2, [sp, #4]
 801beb0:	466a      	mov	r2, sp
 801beb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801beb6:	9400      	str	r4, [sp, #0]
 801beb8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bebc:	f7ff ffde 	bl	801be7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801bec0:	b002      	add	sp, #8
 801bec2:	bd10      	pop	{r4, pc}
 801bec4:	2000b410 	.word	0x2000b410
 801bec8:	2000b412 	.word	0x2000b412

0801becc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801becc:	4b0a      	ldr	r3, [pc, #40]	; (801bef8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801bece:	460a      	mov	r2, r1
 801bed0:	b510      	push	{r4, lr}
 801bed2:	781b      	ldrb	r3, [r3, #0]
 801bed4:	2b01      	cmp	r3, #1
 801bed6:	d10d      	bne.n	801bef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801bed8:	8881      	ldrh	r1, [r0, #4]
 801beda:	8803      	ldrh	r3, [r0, #0]
 801bedc:	440b      	add	r3, r1
 801bede:	4601      	mov	r1, r0
 801bee0:	3b01      	subs	r3, #1
 801bee2:	f821 3b02 	strh.w	r3, [r1], #2
 801bee6:	f7ff ffc9 	bl	801be7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801beea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801beee:	88c2      	ldrh	r2, [r0, #6]
 801bef0:	80c3      	strh	r3, [r0, #6]
 801bef2:	8082      	strh	r2, [r0, #4]
 801bef4:	bd10      	pop	{r4, pc}
 801bef6:	bf00      	nop
 801bef8:	2000b414 	.word	0x2000b414

0801befc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801befc:	4b09      	ldr	r3, [pc, #36]	; (801bf24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801befe:	b507      	push	{r0, r1, r2, lr}
 801bf00:	2100      	movs	r1, #0
 801bf02:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bf06:	4b08      	ldr	r3, [pc, #32]	; (801bf28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801bf08:	9100      	str	r1, [sp, #0]
 801bf0a:	4669      	mov	r1, sp
 801bf0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bf10:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bf14:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bf18:	f7ff ffd8 	bl	801becc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bf1c:	b003      	add	sp, #12
 801bf1e:	f85d fb04 	ldr.w	pc, [sp], #4
 801bf22:	bf00      	nop
 801bf24:	2000b410 	.word	0x2000b410
 801bf28:	2000b412 	.word	0x2000b412

0801bf2c <_ZN8touchgfx11Application13requestRedrawEv>:
 801bf2c:	4b06      	ldr	r3, [pc, #24]	; (801bf48 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801bf2e:	2100      	movs	r1, #0
 801bf30:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bf34:	4b05      	ldr	r3, [pc, #20]	; (801bf4c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801bf36:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801bf3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bf3e:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801bf42:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801bf46:	4770      	bx	lr
 801bf48:	2000b410 	.word	0x2000b410
 801bf4c:	2000b412 	.word	0x2000b412

0801bf50 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801bf50:	4b03      	ldr	r3, [pc, #12]	; (801bf60 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801bf52:	6818      	ldr	r0, [r3, #0]
 801bf54:	b110      	cbz	r0, 801bf5c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801bf56:	6803      	ldr	r3, [r0, #0]
 801bf58:	699b      	ldr	r3, [r3, #24]
 801bf5a:	4718      	bx	r3
 801bf5c:	4770      	bx	lr
 801bf5e:	bf00      	nop
 801bf60:	2000b498 	.word	0x2000b498

0801bf64 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801bf64:	4770      	bx	lr
	...

0801bf68 <_ZN8touchgfx11Application4drawEv>:
 801bf68:	4b09      	ldr	r3, [pc, #36]	; (801bf90 <_ZN8touchgfx11Application4drawEv+0x28>)
 801bf6a:	b507      	push	{r0, r1, r2, lr}
 801bf6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bf70:	2100      	movs	r1, #0
 801bf72:	4b08      	ldr	r3, [pc, #32]	; (801bf94 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801bf74:	9100      	str	r1, [sp, #0]
 801bf76:	4669      	mov	r1, sp
 801bf78:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bf7c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bf80:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bf84:	6803      	ldr	r3, [r0, #0]
 801bf86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bf88:	4798      	blx	r3
 801bf8a:	b003      	add	sp, #12
 801bf8c:	f85d fb04 	ldr.w	pc, [sp], #4
 801bf90:	2000b410 	.word	0x2000b410
 801bf94:	2000b412 	.word	0x2000b412

0801bf98 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801bf98:	4b03      	ldr	r3, [pc, #12]	; (801bfa8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801bf9a:	6818      	ldr	r0, [r3, #0]
 801bf9c:	b110      	cbz	r0, 801bfa4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801bf9e:	6803      	ldr	r3, [r0, #0]
 801bfa0:	69db      	ldr	r3, [r3, #28]
 801bfa2:	4718      	bx	r3
 801bfa4:	4770      	bx	lr
 801bfa6:	bf00      	nop
 801bfa8:	2000b498 	.word	0x2000b498

0801bfac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801bfac:	4b03      	ldr	r3, [pc, #12]	; (801bfbc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801bfae:	6818      	ldr	r0, [r3, #0]
 801bfb0:	b110      	cbz	r0, 801bfb8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801bfb2:	6803      	ldr	r3, [r0, #0]
 801bfb4:	6a1b      	ldr	r3, [r3, #32]
 801bfb6:	4718      	bx	r3
 801bfb8:	4770      	bx	lr
 801bfba:	bf00      	nop
 801bfbc:	2000b498 	.word	0x2000b498

0801bfc0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801bfc0:	4b03      	ldr	r3, [pc, #12]	; (801bfd0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801bfc2:	6818      	ldr	r0, [r3, #0]
 801bfc4:	b110      	cbz	r0, 801bfcc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801bfc6:	6803      	ldr	r3, [r0, #0]
 801bfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bfca:	4718      	bx	r3
 801bfcc:	4770      	bx	lr
 801bfce:	bf00      	nop
 801bfd0:	2000b498 	.word	0x2000b498

0801bfd4 <_ZN8touchgfx11Application15handleTickEventEv>:
 801bfd4:	b570      	push	{r4, r5, r6, lr}
 801bfd6:	4d34      	ldr	r5, [pc, #208]	; (801c0a8 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 801bfd8:	4604      	mov	r4, r0
 801bfda:	6828      	ldr	r0, [r5, #0]
 801bfdc:	b140      	cbz	r0, 801bff0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801bfde:	7a03      	ldrb	r3, [r0, #8]
 801bfe0:	b933      	cbnz	r3, 801bff0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801bfe2:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801bfe6:	6803      	ldr	r3, [r0, #0]
 801bfe8:	689b      	ldr	r3, [r3, #8]
 801bfea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bfee:	4718      	bx	r3
 801bff0:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801bff4:	b97b      	cbnz	r3, 801c016 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801bff6:	b170      	cbz	r0, 801c016 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801bff8:	7a03      	ldrb	r3, [r0, #8]
 801bffa:	b163      	cbz	r3, 801c016 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801bffc:	4b2b      	ldr	r3, [pc, #172]	; (801c0ac <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801bffe:	6818      	ldr	r0, [r3, #0]
 801c000:	b110      	cbz	r0, 801c008 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801c002:	6803      	ldr	r3, [r0, #0]
 801c004:	691b      	ldr	r3, [r3, #16]
 801c006:	4798      	blx	r3
 801c008:	6828      	ldr	r0, [r5, #0]
 801c00a:	6803      	ldr	r3, [r0, #0]
 801c00c:	68db      	ldr	r3, [r3, #12]
 801c00e:	4798      	blx	r3
 801c010:	2301      	movs	r3, #1
 801c012:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801c016:	2500      	movs	r5, #0
 801c018:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801c01c:	42a8      	cmp	r0, r5
 801c01e:	dd0c      	ble.n	801c03a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801c020:	1963      	adds	r3, r4, r5
 801c022:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801c026:	b132      	cbz	r2, 801c036 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801c028:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801c02c:	4413      	add	r3, r2
 801c02e:	6858      	ldr	r0, [r3, #4]
 801c030:	6803      	ldr	r3, [r0, #0]
 801c032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c034:	4798      	blx	r3
 801c036:	3501      	adds	r5, #1
 801c038:	e7ee      	b.n	801c018 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801c03a:	2300      	movs	r3, #0
 801c03c:	461a      	mov	r2, r3
 801c03e:	4298      	cmp	r0, r3
 801c040:	d114      	bne.n	801c06c <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801c042:	1d25      	adds	r5, r4, #4
 801c044:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801c048:	1e48      	subs	r0, r1, #1
 801c04a:	b280      	uxth	r0, r0
 801c04c:	4291      	cmp	r1, r2
 801c04e:	dd24      	ble.n	801c09a <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801c050:	4288      	cmp	r0, r1
 801c052:	d2fb      	bcs.n	801c04c <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 801c054:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801c058:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801c05c:	3304      	adds	r3, #4
 801c05e:	428b      	cmp	r3, r1
 801c060:	d018      	beq.n	801c094 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801c062:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801c066:	f843 6c04 	str.w	r6, [r3, #-4]
 801c06a:	e7f8      	b.n	801c05e <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 801c06c:	18e1      	adds	r1, r4, r3
 801c06e:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801c072:	b16d      	cbz	r5, 801c090 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 801c074:	429a      	cmp	r2, r3
 801c076:	d00a      	beq.n	801c08e <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 801c078:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801c07c:	4431      	add	r1, r6
 801c07e:	684e      	ldr	r6, [r1, #4]
 801c080:	b291      	uxth	r1, r2
 801c082:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801c086:	604e      	str	r6, [r1, #4]
 801c088:	18a1      	adds	r1, r4, r2
 801c08a:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801c08e:	3201      	adds	r2, #1
 801c090:	3301      	adds	r3, #1
 801c092:	e7d4      	b.n	801c03e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801c094:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801c098:	e7d4      	b.n	801c044 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801c09a:	4b04      	ldr	r3, [pc, #16]	; (801c0ac <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801c09c:	6818      	ldr	r0, [r3, #0]
 801c09e:	b110      	cbz	r0, 801c0a6 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801c0a0:	6803      	ldr	r3, [r0, #0]
 801c0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0a4:	e7a1      	b.n	801bfea <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801c0a6:	bd70      	pop	{r4, r5, r6, pc}
 801c0a8:	2000b49c 	.word	0x2000b49c
 801c0ac:	2000b498 	.word	0x2000b498

0801c0b0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801c0b0:	b570      	push	{r4, r5, r6, lr}
 801c0b2:	4606      	mov	r6, r0
 801c0b4:	460c      	mov	r4, r1
 801c0b6:	b929      	cbnz	r1, 801c0c4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801c0b8:	4b0c      	ldr	r3, [pc, #48]	; (801c0ec <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801c0ba:	2165      	movs	r1, #101	; 0x65
 801c0bc:	4a0c      	ldr	r2, [pc, #48]	; (801c0f0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801c0be:	480d      	ldr	r0, [pc, #52]	; (801c0f4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801c0c0:	f00c f9e0 	bl	8028484 <__assert_func>
 801c0c4:	2300      	movs	r3, #0
 801c0c6:	4d0c      	ldr	r5, [pc, #48]	; (801c0f8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801c0c8:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801c0cc:	6828      	ldr	r0, [r5, #0]
 801c0ce:	b110      	cbz	r0, 801c0d6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801c0d0:	6803      	ldr	r3, [r0, #0]
 801c0d2:	695b      	ldr	r3, [r3, #20]
 801c0d4:	4798      	blx	r3
 801c0d6:	602c      	str	r4, [r5, #0]
 801c0d8:	4620      	mov	r0, r4
 801c0da:	6823      	ldr	r3, [r4, #0]
 801c0dc:	68db      	ldr	r3, [r3, #12]
 801c0de:	4798      	blx	r3
 801c0e0:	6833      	ldr	r3, [r6, #0]
 801c0e2:	4630      	mov	r0, r6
 801c0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c0e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c0ea:	4718      	bx	r3
 801c0ec:	0802ceec 	.word	0x0802ceec
 801c0f0:	0802cfbc 	.word	0x0802cfbc
 801c0f4:	0802cef6 	.word	0x0802cef6
 801c0f8:	2000b498 	.word	0x2000b498

0801c0fc <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801c0fc:	b510      	push	{r4, lr}
 801c0fe:	f9b1 4000 	ldrsh.w	r4, [r1]
 801c102:	888a      	ldrh	r2, [r1, #4]
 801c104:	f9b0 3000 	ldrsh.w	r3, [r0]
 801c108:	4422      	add	r2, r4
 801c10a:	b212      	sxth	r2, r2
 801c10c:	4293      	cmp	r3, r2
 801c10e:	da15      	bge.n	801c13c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c110:	8882      	ldrh	r2, [r0, #4]
 801c112:	4413      	add	r3, r2
 801c114:	b21b      	sxth	r3, r3
 801c116:	429c      	cmp	r4, r3
 801c118:	da10      	bge.n	801c13c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c11a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801c11e:	88c9      	ldrh	r1, [r1, #6]
 801c120:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c124:	4419      	add	r1, r3
 801c126:	b209      	sxth	r1, r1
 801c128:	428a      	cmp	r2, r1
 801c12a:	da07      	bge.n	801c13c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801c12c:	88c0      	ldrh	r0, [r0, #6]
 801c12e:	4410      	add	r0, r2
 801c130:	b200      	sxth	r0, r0
 801c132:	4283      	cmp	r3, r0
 801c134:	bfac      	ite	ge
 801c136:	2000      	movge	r0, #0
 801c138:	2001      	movlt	r0, #1
 801c13a:	bd10      	pop	{r4, pc}
 801c13c:	2000      	movs	r0, #0
 801c13e:	e7fc      	b.n	801c13a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801c140 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801c140:	b570      	push	{r4, r5, r6, lr}
 801c142:	f9b1 4000 	ldrsh.w	r4, [r1]
 801c146:	f9b0 5000 	ldrsh.w	r5, [r0]
 801c14a:	42ac      	cmp	r4, r5
 801c14c:	db18      	blt.n	801c180 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c14e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801c152:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c156:	429a      	cmp	r2, r3
 801c158:	db12      	blt.n	801c180 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c15a:	8886      	ldrh	r6, [r0, #4]
 801c15c:	4435      	add	r5, r6
 801c15e:	888e      	ldrh	r6, [r1, #4]
 801c160:	4434      	add	r4, r6
 801c162:	b22d      	sxth	r5, r5
 801c164:	b224      	sxth	r4, r4
 801c166:	42a5      	cmp	r5, r4
 801c168:	db0a      	blt.n	801c180 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c16a:	88c0      	ldrh	r0, [r0, #6]
 801c16c:	4418      	add	r0, r3
 801c16e:	88cb      	ldrh	r3, [r1, #6]
 801c170:	441a      	add	r2, r3
 801c172:	b200      	sxth	r0, r0
 801c174:	b212      	sxth	r2, r2
 801c176:	4290      	cmp	r0, r2
 801c178:	bfb4      	ite	lt
 801c17a:	2000      	movlt	r0, #0
 801c17c:	2001      	movge	r0, #1
 801c17e:	bd70      	pop	{r4, r5, r6, pc}
 801c180:	2000      	movs	r0, #0
 801c182:	e7fc      	b.n	801c17e <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801c184 <_ZN8touchgfx11Application11getInstanceEv>:
 801c184:	4b01      	ldr	r3, [pc, #4]	; (801c18c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801c186:	6818      	ldr	r0, [r3, #0]
 801c188:	4770      	bx	lr
 801c18a:	bf00      	nop
 801c18c:	2000b4a8 	.word	0x2000b4a8

0801c190 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801c190:	b570      	push	{r4, r5, r6, lr}
 801c192:	2300      	movs	r3, #0
 801c194:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801c198:	1d04      	adds	r4, r0, #4
 801c19a:	b29a      	uxth	r2, r3
 801c19c:	4296      	cmp	r6, r2
 801c19e:	d90a      	bls.n	801c1b6 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801c1a0:	f854 2b04 	ldr.w	r2, [r4], #4
 801c1a4:	428a      	cmp	r2, r1
 801c1a6:	d107      	bne.n	801c1b8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801c1a8:	18c5      	adds	r5, r0, r3
 801c1aa:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801c1ae:	b11a      	cbz	r2, 801c1b8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801c1b0:	3a01      	subs	r2, #1
 801c1b2:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801c1b6:	bd70      	pop	{r4, r5, r6, pc}
 801c1b8:	3301      	adds	r3, #1
 801c1ba:	e7ee      	b.n	801c19a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801c1bc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801c1bc:	2300      	movs	r3, #0
 801c1be:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801c1c2:	30a8      	adds	r0, #168	; 0xa8
 801c1c4:	f820 3c24 	strh.w	r3, [r0, #-36]
 801c1c8:	f802 3b01 	strb.w	r3, [r2], #1
 801c1cc:	4282      	cmp	r2, r0
 801c1ce:	d1fb      	bne.n	801c1c8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801c1d0:	4770      	bx	lr

0801c1d2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801c1d2:	4603      	mov	r3, r0
 801c1d4:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801c1d8:	2200      	movs	r2, #0
 801c1da:	801a      	strh	r2, [r3, #0]
 801c1dc:	3308      	adds	r3, #8
 801c1de:	f823 2c06 	strh.w	r2, [r3, #-6]
 801c1e2:	f823 2c04 	strh.w	r2, [r3, #-4]
 801c1e6:	f823 2c02 	strh.w	r2, [r3, #-2]
 801c1ea:	428b      	cmp	r3, r1
 801c1ec:	d1f5      	bne.n	801c1da <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801c1ee:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801c1f2:	4770      	bx	lr

0801c1f4 <_ZN8touchgfx11ApplicationC1Ev>:
 801c1f4:	b570      	push	{r4, r5, r6, lr}
 801c1f6:	4b1a      	ldr	r3, [pc, #104]	; (801c260 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801c1f8:	2500      	movs	r5, #0
 801c1fa:	4604      	mov	r4, r0
 801c1fc:	30a8      	adds	r0, #168	; 0xa8
 801c1fe:	f840 3ca8 	str.w	r3, [r0, #-168]
 801c202:	f820 5c24 	strh.w	r5, [r0, #-36]
 801c206:	f7ff ffe4 	bl	801c1d2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c20a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801c20e:	f7ff ffe0 	bl	801c1d2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c212:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801c216:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801c21a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801c21e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801c222:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801c226:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801c22a:	490e      	ldr	r1, [pc, #56]	; (801c264 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801c22c:	480e      	ldr	r0, [pc, #56]	; (801c268 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801c22e:	f00a fc05 	bl	8026a3c <CRC_Lock>
 801c232:	4e0e      	ldr	r6, [pc, #56]	; (801c26c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801c234:	4b0e      	ldr	r3, [pc, #56]	; (801c270 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801c236:	b158      	cbz	r0, 801c250 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801c238:	801d      	strh	r5, [r3, #0]
 801c23a:	2300      	movs	r3, #0
 801c23c:	4a0d      	ldr	r2, [pc, #52]	; (801c274 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801c23e:	4620      	mov	r0, r4
 801c240:	6013      	str	r3, [r2, #0]
 801c242:	4a0d      	ldr	r2, [pc, #52]	; (801c278 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801c244:	6033      	str	r3, [r6, #0]
 801c246:	6013      	str	r3, [r2, #0]
 801c248:	f7ff ffb8 	bl	801c1bc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801c24c:	4620      	mov	r0, r4
 801c24e:	bd70      	pop	{r4, r5, r6, pc}
 801c250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c254:	2002      	movs	r0, #2
 801c256:	801a      	strh	r2, [r3, #0]
 801c258:	6030      	str	r0, [r6, #0]
 801c25a:	f000 ff83 	bl	801d164 <_ZN8touchgfx6Screen4drawEv>
 801c25e:	e7ec      	b.n	801c23a <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801c260:	0802cf80 	.word	0x0802cf80
 801c264:	b5e8b5cd 	.word	0xb5e8b5cd
 801c268:	f407a5c2 	.word	0xf407a5c2
 801c26c:	2000b498 	.word	0x2000b498
 801c270:	20000040 	.word	0x20000040
 801c274:	2000b4a8 	.word	0x2000b4a8
 801c278:	2000b49c 	.word	0x2000b49c

0801c27c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801c27c:	2300      	movs	r3, #0
 801c27e:	8003      	strh	r3, [r0, #0]
 801c280:	8043      	strh	r3, [r0, #2]
 801c282:	8083      	strh	r3, [r0, #4]
 801c284:	80c3      	strh	r3, [r0, #6]
 801c286:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801c28a:	4293      	cmp	r3, r2
 801c28c:	b530      	push	{r4, r5, lr}
 801c28e:	d912      	bls.n	801c2b6 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801c290:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801c294:	3b01      	subs	r3, #1
 801c296:	6825      	ldr	r5, [r4, #0]
 801c298:	b29b      	uxth	r3, r3
 801c29a:	6005      	str	r5, [r0, #0]
 801c29c:	4293      	cmp	r3, r2
 801c29e:	6865      	ldr	r5, [r4, #4]
 801c2a0:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801c2a4:	6045      	str	r5, [r0, #4]
 801c2a6:	d906      	bls.n	801c2b6 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801c2a8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801c2ac:	681d      	ldr	r5, [r3, #0]
 801c2ae:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801c2b2:	685d      	ldr	r5, [r3, #4]
 801c2b4:	6065      	str	r5, [r4, #4]
 801c2b6:	bd30      	pop	{r4, r5, pc}

0801c2b8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801c2b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c2ba:	466b      	mov	r3, sp
 801c2bc:	4604      	mov	r4, r0
 801c2be:	e883 0006 	stmia.w	r3, {r1, r2}
 801c2c2:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801c2c6:	2a07      	cmp	r2, #7
 801c2c8:	d906      	bls.n	801c2d8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801c2ca:	4b09      	ldr	r3, [pc, #36]	; (801c2f0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801c2cc:	f240 118f 	movw	r1, #399	; 0x18f
 801c2d0:	4a08      	ldr	r2, [pc, #32]	; (801c2f4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801c2d2:	4809      	ldr	r0, [pc, #36]	; (801c2f8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801c2d4:	f00c f8d6 	bl	8028484 <__assert_func>
 801c2d8:	1c51      	adds	r1, r2, #1
 801c2da:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801c2de:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801c2e2:	cb03      	ldmia	r3!, {r0, r1}
 801c2e4:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801c2e8:	6069      	str	r1, [r5, #4]
 801c2ea:	b003      	add	sp, #12
 801c2ec:	bd30      	pop	{r4, r5, pc}
 801c2ee:	bf00      	nop
 801c2f0:	0802cf20 	.word	0x0802cf20
 801c2f4:	0802d000 	.word	0x0802d000
 801c2f8:	0802cf4f 	.word	0x0802cf4f

0801c2fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801c2fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c300:	b089      	sub	sp, #36	; 0x24
 801c302:	4606      	mov	r6, r0
 801c304:	466c      	mov	r4, sp
 801c306:	4620      	mov	r0, r4
 801c308:	e884 0006 	stmia.w	r4, {r1, r2}
 801c30c:	f7fb ffbf 	bl	801828e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c310:	bbb0      	cbnz	r0, 801c380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801c312:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801c316:	b1fd      	cbz	r5, 801c358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801c318:	3d01      	subs	r5, #1
 801c31a:	af04      	add	r7, sp, #16
 801c31c:	f04f 090a 	mov.w	r9, #10
 801c320:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801c324:	ab02      	add	r3, sp, #8
 801c326:	fa1f f885 	uxth.w	r8, r5
 801c32a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c32e:	6851      	ldr	r1, [r2, #4]
 801c330:	c303      	stmia	r3!, {r0, r1}
 801c332:	4621      	mov	r1, r4
 801c334:	a802      	add	r0, sp, #8
 801c336:	f7ff ff03 	bl	801c140 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c33a:	bb08      	cbnz	r0, 801c380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801c33c:	a902      	add	r1, sp, #8
 801c33e:	4620      	mov	r0, r4
 801c340:	f7ff fefe 	bl	801c140 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c344:	b1f8      	cbz	r0, 801c386 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801c346:	4642      	mov	r2, r8
 801c348:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801c34c:	a806      	add	r0, sp, #24
 801c34e:	f7ff ff95 	bl	801c27c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c352:	f115 35ff 	adds.w	r5, r5, #4294967295
 801c356:	d2e3      	bcs.n	801c320 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801c358:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801c35c:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801c360:	2b08      	cmp	r3, #8
 801c362:	d108      	bne.n	801c376 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801c364:	4629      	mov	r1, r5
 801c366:	a806      	add	r0, sp, #24
 801c368:	2207      	movs	r2, #7
 801c36a:	f7ff ff87 	bl	801c27c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c36e:	a906      	add	r1, sp, #24
 801c370:	4620      	mov	r0, r4
 801c372:	f7fd fe05 	bl	8019f80 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c376:	4628      	mov	r0, r5
 801c378:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c37c:	f7ff ff9c 	bl	801c2b8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c380:	b009      	add	sp, #36	; 0x24
 801c382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c386:	4621      	mov	r1, r4
 801c388:	a802      	add	r0, sp, #8
 801c38a:	f7ff feb7 	bl	801c0fc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c38e:	b150      	cbz	r0, 801c3a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801c390:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801c394:	a806      	add	r0, sp, #24
 801c396:	4642      	mov	r2, r8
 801c398:	f7ff ff70 	bl	801c27c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c39c:	a902      	add	r1, sp, #8
 801c39e:	4620      	mov	r0, r4
 801c3a0:	f7fd fdee 	bl	8019f80 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c3a4:	e7d5      	b.n	801c352 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801c3a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 801c3aa:	e887 0003 	stmia.w	r7, {r0, r1}
 801c3ae:	a902      	add	r1, sp, #8
 801c3b0:	4638      	mov	r0, r7
 801c3b2:	f7fd fde5 	bl	8019f80 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c3b6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c3ba:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801c3be:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801c3c2:	fb13 f302 	smulbb	r3, r3, r2
 801c3c6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801c3ca:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c3ce:	fb11 f102 	smulbb	r1, r1, r2
 801c3d2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801c3d6:	fb09 f303 	mul.w	r3, r9, r3
 801c3da:	fb12 1100 	smlabb	r1, r2, r0, r1
 801c3de:	220b      	movs	r2, #11
 801c3e0:	434a      	muls	r2, r1
 801c3e2:	4293      	cmp	r3, r2
 801c3e4:	dab5      	bge.n	801c352 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801c3e6:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801c3ea:	a806      	add	r0, sp, #24
 801c3ec:	4642      	mov	r2, r8
 801c3ee:	f7ff ff45 	bl	801c27c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c3f2:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c3f6:	e884 0003 	stmia.w	r4, {r0, r1}
 801c3fa:	e7aa      	b.n	801c352 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801c3fc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801c3fc:	4b1d      	ldr	r3, [pc, #116]	; (801c474 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801c3fe:	b530      	push	{r4, r5, lr}
 801c400:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c404:	b085      	sub	sp, #20
 801c406:	4b1c      	ldr	r3, [pc, #112]	; (801c478 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801c408:	460c      	mov	r4, r1
 801c40a:	2100      	movs	r1, #0
 801c40c:	4605      	mov	r5, r0
 801c40e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c412:	6820      	ldr	r0, [r4, #0]
 801c414:	9100      	str	r1, [sp, #0]
 801c416:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c41a:	ab02      	add	r3, sp, #8
 801c41c:	6861      	ldr	r1, [r4, #4]
 801c41e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c422:	c303      	stmia	r3!, {r0, r1}
 801c424:	4669      	mov	r1, sp
 801c426:	a802      	add	r0, sp, #8
 801c428:	f7fb feee 	bl	8018208 <_ZN8touchgfx4RectaNERKS0_>
 801c42c:	ab02      	add	r3, sp, #8
 801c42e:	cb03      	ldmia	r3!, {r0, r1}
 801c430:	4b12      	ldr	r3, [pc, #72]	; (801c47c <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801c432:	6020      	str	r0, [r4, #0]
 801c434:	6818      	ldr	r0, [r3, #0]
 801c436:	6061      	str	r1, [r4, #4]
 801c438:	b138      	cbz	r0, 801c44a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c43a:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801c43e:	b133      	cbz	r3, 801c44e <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801c440:	6821      	ldr	r1, [r4, #0]
 801c442:	4628      	mov	r0, r5
 801c444:	6862      	ldr	r2, [r4, #4]
 801c446:	f7ff ff59 	bl	801c2fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c44a:	b005      	add	sp, #20
 801c44c:	bd30      	pop	{r4, r5, pc}
 801c44e:	6803      	ldr	r3, [r0, #0]
 801c450:	4621      	mov	r1, r4
 801c452:	689b      	ldr	r3, [r3, #8]
 801c454:	4798      	blx	r3
 801c456:	4b0a      	ldr	r3, [pc, #40]	; (801c480 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801c458:	6818      	ldr	r0, [r3, #0]
 801c45a:	b118      	cbz	r0, 801c464 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801c45c:	6803      	ldr	r3, [r0, #0]
 801c45e:	4621      	mov	r1, r4
 801c460:	689b      	ldr	r3, [r3, #8]
 801c462:	4798      	blx	r3
 801c464:	4b07      	ldr	r3, [pc, #28]	; (801c484 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801c466:	4621      	mov	r1, r4
 801c468:	6818      	ldr	r0, [r3, #0]
 801c46a:	6803      	ldr	r3, [r0, #0]
 801c46c:	695b      	ldr	r3, [r3, #20]
 801c46e:	4798      	blx	r3
 801c470:	e7eb      	b.n	801c44a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c472:	bf00      	nop
 801c474:	2000b410 	.word	0x2000b410
 801c478:	2000b412 	.word	0x2000b412
 801c47c:	2000b498 	.word	0x2000b498
 801c480:	2000b494 	.word	0x2000b494
 801c484:	2000b41c 	.word	0x2000b41c

0801c488 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801c488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c48c:	4604      	mov	r4, r0
 801c48e:	b09b      	sub	sp, #108	; 0x6c
 801c490:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801c494:	b129      	cbz	r1, 801c4a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801c496:	2300      	movs	r3, #0
 801c498:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801c49c:	b01b      	add	sp, #108	; 0x6c
 801c49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4a2:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801c4a6:	4630      	mov	r0, r6
 801c4a8:	f7fb fef1 	bl	801828e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c4ac:	4605      	mov	r5, r0
 801c4ae:	b940      	cbnz	r0, 801c4c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801c4b0:	4620      	mov	r0, r4
 801c4b2:	e896 0006 	ldmia.w	r6, {r1, r2}
 801c4b6:	f7ff ff21 	bl	801c2fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c4ba:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801c4be:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801c4c2:	4baf      	ldr	r3, [pc, #700]	; (801c780 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f8>)
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	b33b      	cbz	r3, 801c518 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801c4c8:	4dae      	ldr	r5, [pc, #696]	; (801c784 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2fc>)
 801c4ca:	4628      	mov	r0, r5
 801c4cc:	f7fb fedf 	bl	801828e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c4d0:	4606      	mov	r6, r0
 801c4d2:	bb08      	cbnz	r0, 801c518 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801c4d4:	4628      	mov	r0, r5
 801c4d6:	f7ff fcb7 	bl	801be48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c4da:	6829      	ldr	r1, [r5, #0]
 801c4dc:	686a      	ldr	r2, [r5, #4]
 801c4de:	4620      	mov	r0, r4
 801c4e0:	f7ff ff0c 	bl	801c2fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c4e4:	802e      	strh	r6, [r5, #0]
 801c4e6:	806e      	strh	r6, [r5, #2]
 801c4e8:	80ae      	strh	r6, [r5, #4]
 801c4ea:	80ee      	strh	r6, [r5, #6]
 801c4ec:	4fa6      	ldr	r7, [pc, #664]	; (801c788 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x300>)
 801c4ee:	a809      	add	r0, sp, #36	; 0x24
 801c4f0:	f7ff fe6f 	bl	801c1d2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c4f4:	883d      	ldrh	r5, [r7, #0]
 801c4f6:	462e      	mov	r6, r5
 801c4f8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c4fc:	42b3      	cmp	r3, r6
 801c4fe:	d910      	bls.n	801c522 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801c500:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c504:	3601      	adds	r6, #1
 801c506:	a809      	add	r0, sp, #36	; 0x24
 801c508:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801c50c:	b2b6      	uxth	r6, r6
 801c50e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801c512:	f7ff fed1 	bl	801c2b8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c516:	e7ef      	b.n	801c4f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801c518:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c51c:	2b00      	cmp	r3, #0
 801c51e:	d1e5      	bne.n	801c4ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801c520:	e7bc      	b.n	801c49c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c522:	462e      	mov	r6, r5
 801c524:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801c528:	42b3      	cmp	r3, r6
 801c52a:	d90b      	bls.n	801c544 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801c52c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c530:	3601      	adds	r6, #1
 801c532:	4620      	mov	r0, r4
 801c534:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801c538:	b2b6      	uxth	r6, r6
 801c53a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801c53e:	f7ff fedd 	bl	801c2fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c542:	e7ef      	b.n	801c524 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801c544:	4e91      	ldr	r6, [pc, #580]	; (801c78c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x304>)
 801c546:	6833      	ldr	r3, [r6, #0]
 801c548:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801c54c:	2b01      	cmp	r3, #1
 801c54e:	f040 8092 	bne.w	801c676 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ee>
 801c552:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801c556:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801c55a:	f04f 0900 	mov.w	r9, #0
 801c55e:	33aa      	adds	r3, #170	; 0xaa
 801c560:	42a8      	cmp	r0, r5
 801c562:	f103 0308 	add.w	r3, r3, #8
 801c566:	dd0a      	ble.n	801c57e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf6>
 801c568:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801c56c:	3501      	adds	r5, #1
 801c56e:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801c572:	440a      	add	r2, r1
 801c574:	b212      	sxth	r2, r2
 801c576:	4591      	cmp	r9, r2
 801c578:	bfb8      	it	lt
 801c57a:	4691      	movlt	r9, r2
 801c57c:	e7f0      	b.n	801c560 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd8>
 801c57e:	4b84      	ldr	r3, [pc, #528]	; (801c790 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x308>)
 801c580:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801c798 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x310>
 801c584:	881d      	ldrh	r5, [r3, #0]
 801c586:	2300      	movs	r3, #0
 801c588:	2d0f      	cmp	r5, #15
 801c58a:	bf8c      	ite	hi
 801c58c:	08ed      	lsrhi	r5, r5, #3
 801c58e:	2501      	movls	r5, #1
 801c590:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801c594:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c598:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801c59c:	6830      	ldr	r0, [r6, #0]
 801c59e:	440b      	add	r3, r1
 801c5a0:	6802      	ldr	r2, [r0, #0]
 801c5a2:	b21b      	sxth	r3, r3
 801c5a4:	4599      	cmp	r9, r3
 801c5a6:	dd49      	ble.n	801c63c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b4>
 801c5a8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801c5ac:	4798      	blx	r3
 801c5ae:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c5b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c5b6:	4413      	add	r3, r2
 801c5b8:	b21b      	sxth	r3, r3
 801c5ba:	195a      	adds	r2, r3, r5
 801c5bc:	4290      	cmp	r0, r2
 801c5be:	da07      	bge.n	801c5d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 801c5c0:	4581      	cmp	r9, r0
 801c5c2:	dd05      	ble.n	801c5d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 801c5c4:	4298      	cmp	r0, r3
 801c5c6:	da33      	bge.n	801c630 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	dd31      	ble.n	801c630 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 801c5cc:	4648      	mov	r0, r9
 801c5ce:	e004      	b.n	801c5da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x152>
 801c5d0:	4298      	cmp	r0, r3
 801c5d2:	dbfb      	blt.n	801c5cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x144>
 801c5d4:	4548      	cmp	r0, r9
 801c5d6:	bfa8      	it	ge
 801c5d8:	4648      	movge	r0, r9
 801c5da:	f9b8 2000 	ldrsh.w	r2, [r8]
 801c5de:	2100      	movs	r1, #0
 801c5e0:	1ac0      	subs	r0, r0, r3
 801c5e2:	f8b7 a000 	ldrh.w	sl, [r7]
 801c5e6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c5ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c5ee:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c5f2:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c5f6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c5fa:	4553      	cmp	r3, sl
 801c5fc:	d9ca      	bls.n	801c594 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801c5fe:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801c602:	ab07      	add	r3, sp, #28
 801c604:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c608:	6851      	ldr	r1, [r2, #4]
 801c60a:	c303      	stmia	r3!, {r0, r1}
 801c60c:	a807      	add	r0, sp, #28
 801c60e:	a905      	add	r1, sp, #20
 801c610:	f7fb fdfa 	bl	8018208 <_ZN8touchgfx4RectaNERKS0_>
 801c614:	a807      	add	r0, sp, #28
 801c616:	f7fb fe3a 	bl	801828e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c61a:	b920      	cbnz	r0, 801c626 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x19e>
 801c61c:	6823      	ldr	r3, [r4, #0]
 801c61e:	a907      	add	r1, sp, #28
 801c620:	4620      	mov	r0, r4
 801c622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c624:	4798      	blx	r3
 801c626:	f10a 0a01 	add.w	sl, sl, #1
 801c62a:	fa1f fa8a 	uxth.w	sl, sl
 801c62e:	e7e2      	b.n	801c5f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16e>
 801c630:	6830      	ldr	r0, [r6, #0]
 801c632:	2101      	movs	r1, #1
 801c634:	6803      	ldr	r3, [r0, #0]
 801c636:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c638:	4798      	blx	r3
 801c63a:	e7ab      	b.n	801c594 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801c63c:	69d3      	ldr	r3, [r2, #28]
 801c63e:	4798      	blx	r3
 801c640:	4b54      	ldr	r3, [pc, #336]	; (801c794 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>)
 801c642:	781b      	ldrb	r3, [r3, #0]
 801c644:	2b00      	cmp	r3, #0
 801c646:	f43f af29 	beq.w	801c49c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c64a:	2300      	movs	r3, #0
 801c64c:	883d      	ldrh	r5, [r7, #0]
 801c64e:	34ea      	adds	r4, #234	; 0xea
 801c650:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801c654:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801c658:	42ab      	cmp	r3, r5
 801c65a:	f67f af1f 	bls.w	801c49c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c65e:	ab1a      	add	r3, sp, #104	; 0x68
 801c660:	4620      	mov	r0, r4
 801c662:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c666:	3501      	adds	r5, #1
 801c668:	3b44      	subs	r3, #68	; 0x44
 801c66a:	b2ad      	uxth	r5, r5
 801c66c:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c670:	f7ff fe22 	bl	801c2b8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c674:	e7ee      	b.n	801c654 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1cc>
 801c676:	2b02      	cmp	r3, #2
 801c678:	d16a      	bne.n	801c750 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 801c67a:	f8df a120 	ldr.w	sl, [pc, #288]	; 801c79c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x314>
 801c67e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c682:	42ab      	cmp	r3, r5
 801c684:	d9dc      	bls.n	801c640 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 801c686:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c68a:	ab03      	add	r3, sp, #12
 801c68c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c690:	6851      	ldr	r1, [r2, #4]
 801c692:	c303      	stmia	r3!, {r0, r1}
 801c694:	f89a 3000 	ldrb.w	r3, [sl]
 801c698:	2b01      	cmp	r3, #1
 801c69a:	d102      	bne.n	801c6a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x21a>
 801c69c:	a803      	add	r0, sp, #12
 801c69e:	f7ff fc2d 	bl	801befc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c6a2:	a803      	add	r0, sp, #12
 801c6a4:	f7fb fdf3 	bl	801828e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c6a8:	2800      	cmp	r0, #0
 801c6aa:	d14a      	bne.n	801c742 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ba>
 801c6ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801c6b0:	f10d 0914 	add.w	r9, sp, #20
 801c6b4:	f10d 081c 	add.w	r8, sp, #28
 801c6b8:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c6bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c6c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801c6c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c6c8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c6cc:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c6d0:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801c6d4:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801c6d8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c6dc:	44dc      	add	ip, fp
 801c6de:	6830      	ldr	r0, [r6, #0]
 801c6e0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801c6e4:	ebac 0c02 	sub.w	ip, ip, r2
 801c6e8:	f8d0 e000 	ldr.w	lr, [r0]
 801c6ec:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801c6f0:	fa1f fc8c 	uxth.w	ip, ip
 801c6f4:	f8cd c000 	str.w	ip, [sp]
 801c6f8:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801c6fc:	47d8      	blx	fp
 801c6fe:	f89a 3000 	ldrb.w	r3, [sl]
 801c702:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c706:	2b01      	cmp	r3, #1
 801c708:	d11e      	bne.n	801c748 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c0>
 801c70a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801c70e:	e888 0003 	stmia.w	r8, {r0, r1}
 801c712:	4640      	mov	r0, r8
 801c714:	f7ff fb98 	bl	801be48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c718:	6823      	ldr	r3, [r4, #0]
 801c71a:	4641      	mov	r1, r8
 801c71c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c71e:	4620      	mov	r0, r4
 801c720:	4798      	blx	r3
 801c722:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c726:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c72a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801c72e:	4413      	add	r3, r2
 801c730:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801c734:	440a      	add	r2, r1
 801c736:	b21b      	sxth	r3, r3
 801c738:	b212      	sxth	r2, r2
 801c73a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c73e:	4293      	cmp	r3, r2
 801c740:	dbc6      	blt.n	801c6d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x248>
 801c742:	3501      	adds	r5, #1
 801c744:	b2ad      	uxth	r5, r5
 801c746:	e79a      	b.n	801c67e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f6>
 801c748:	6823      	ldr	r3, [r4, #0]
 801c74a:	4649      	mov	r1, r9
 801c74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c74e:	e7e6      	b.n	801c71e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x296>
 801c750:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c754:	42ab      	cmp	r3, r5
 801c756:	f67f af73 	bls.w	801c640 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 801c75a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c75e:	ab07      	add	r3, sp, #28
 801c760:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c764:	6851      	ldr	r1, [r2, #4]
 801c766:	c303      	stmia	r3!, {r0, r1}
 801c768:	a807      	add	r0, sp, #28
 801c76a:	f7fb fd90 	bl	801828e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c76e:	b920      	cbnz	r0, 801c77a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f2>
 801c770:	6823      	ldr	r3, [r4, #0]
 801c772:	a907      	add	r1, sp, #28
 801c774:	4620      	mov	r0, r4
 801c776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c778:	4798      	blx	r3
 801c77a:	3501      	adds	r5, #1
 801c77c:	b2ad      	uxth	r5, r5
 801c77e:	e7e7      	b.n	801c750 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 801c780:	2000b494 	.word	0x2000b494
 801c784:	2000b4a0 	.word	0x2000b4a0
 801c788:	20000040 	.word	0x20000040
 801c78c:	2000b41c 	.word	0x2000b41c
 801c790:	2000b412 	.word	0x2000b412
 801c794:	2000b41a 	.word	0x2000b41a
 801c798:	2000b410 	.word	0x2000b410
 801c79c:	2000b414 	.word	0x2000b414

0801c7a0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801c7a0:	4b03      	ldr	r3, [pc, #12]	; (801c7b0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801c7a2:	2200      	movs	r2, #0
 801c7a4:	801a      	strh	r2, [r3, #0]
 801c7a6:	805a      	strh	r2, [r3, #2]
 801c7a8:	809a      	strh	r2, [r3, #4]
 801c7aa:	80da      	strh	r2, [r3, #6]
 801c7ac:	4770      	bx	lr
 801c7ae:	bf00      	nop
 801c7b0:	2000b4a0 	.word	0x2000b4a0

0801c7b4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7b8:	b099      	sub	sp, #100	; 0x64
 801c7ba:	4607      	mov	r7, r0
 801c7bc:	4614      	mov	r4, r2
 801c7be:	461d      	mov	r5, r3
 801c7c0:	a802      	add	r0, sp, #8
 801c7c2:	468a      	mov	sl, r1
 801c7c4:	f000 fe4b 	bl	801d45e <_ZN8touchgfx12TextProviderC1Ev>
 801c7c8:	683b      	ldr	r3, [r7, #0]
 801c7ca:	4638      	mov	r0, r7
 801c7cc:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801c7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c7d2:	4798      	blx	r3
 801c7d4:	462a      	mov	r2, r5
 801c7d6:	2500      	movs	r5, #0
 801c7d8:	4621      	mov	r1, r4
 801c7da:	4603      	mov	r3, r0
 801c7dc:	a802      	add	r0, sp, #8
 801c7de:	462c      	mov	r4, r5
 801c7e0:	46a9      	mov	r9, r5
 801c7e2:	46a8      	mov	r8, r5
 801c7e4:	f000 fe80 	bl	801d4e8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801c7e8:	2300      	movs	r3, #0
 801c7ea:	9301      	str	r3, [sp, #4]
 801c7ec:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c7f0:	429c      	cmp	r4, r3
 801c7f2:	d002      	beq.n	801c7fa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801c7f4:	455c      	cmp	r4, fp
 801c7f6:	bf18      	it	ne
 801c7f8:	4625      	movne	r5, r4
 801c7fa:	ab01      	add	r3, sp, #4
 801c7fc:	463a      	mov	r2, r7
 801c7fe:	4651      	mov	r1, sl
 801c800:	a802      	add	r0, sp, #8
 801c802:	f001 f96b 	bl	801dadc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c806:	4604      	mov	r4, r0
 801c808:	b108      	cbz	r0, 801c80e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 801c80a:	280a      	cmp	r0, #10
 801c80c:	d10a      	bne.n	801c824 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 801c80e:	45c1      	cmp	r9, r8
 801c810:	bf38      	it	cc
 801c812:	46c1      	movcc	r9, r8
 801c814:	f04f 0800 	mov.w	r8, #0
 801c818:	2c00      	cmp	r4, #0
 801c81a:	d1e5      	bne.n	801c7e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801c81c:	4648      	mov	r0, r9
 801c81e:	b019      	add	sp, #100	; 0x64
 801c820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c824:	9a01      	ldr	r2, [sp, #4]
 801c826:	2a00      	cmp	r2, #0
 801c828:	d0de      	beq.n	801c7e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801c82a:	7b56      	ldrb	r6, [r2, #13]
 801c82c:	4629      	mov	r1, r5
 801c82e:	683b      	ldr	r3, [r7, #0]
 801c830:	0076      	lsls	r6, r6, #1
 801c832:	8894      	ldrh	r4, [r2, #4]
 801c834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c836:	f406 7080 	and.w	r0, r6, #256	; 0x100
 801c83a:	7a96      	ldrb	r6, [r2, #10]
 801c83c:	4306      	orrs	r6, r0
 801c83e:	4638      	mov	r0, r7
 801c840:	4798      	blx	r3
 801c842:	4430      	add	r0, r6
 801c844:	4480      	add	r8, r0
 801c846:	fa1f f888 	uxth.w	r8, r8
 801c84a:	e7e5      	b.n	801c818 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

0801c84c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c84c:	b508      	push	{r3, lr}
 801c84e:	6803      	ldr	r3, [r0, #0]
 801c850:	68db      	ldr	r3, [r3, #12]
 801c852:	4798      	blx	r3
 801c854:	b128      	cbz	r0, 801c862 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801c856:	7b43      	ldrb	r3, [r0, #13]
 801c858:	7a80      	ldrb	r0, [r0, #10]
 801c85a:	005b      	lsls	r3, r3, #1
 801c85c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c860:	4318      	orrs	r0, r3
 801c862:	bd08      	pop	{r3, pc}

0801c864 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801c864:	b40e      	push	{r1, r2, r3}
 801c866:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c868:	b098      	sub	sp, #96	; 0x60
 801c86a:	4605      	mov	r5, r0
 801c86c:	ab1d      	add	r3, sp, #116	; 0x74
 801c86e:	a802      	add	r0, sp, #8
 801c870:	ae18      	add	r6, sp, #96	; 0x60
 801c872:	f853 4b04 	ldr.w	r4, [r3], #4
 801c876:	9300      	str	r3, [sp, #0]
 801c878:	f000 fdf1 	bl	801d45e <_ZN8touchgfx12TextProviderC1Ev>
 801c87c:	682b      	ldr	r3, [r5, #0]
 801c87e:	4628      	mov	r0, r5
 801c880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c882:	4798      	blx	r3
 801c884:	4621      	mov	r1, r4
 801c886:	2400      	movs	r4, #0
 801c888:	4603      	mov	r3, r0
 801c88a:	9a00      	ldr	r2, [sp, #0]
 801c88c:	a802      	add	r0, sp, #8
 801c88e:	f000 fe2b 	bl	801d4e8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801c892:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801c896:	462a      	mov	r2, r5
 801c898:	4633      	mov	r3, r6
 801c89a:	4621      	mov	r1, r4
 801c89c:	a802      	add	r0, sp, #8
 801c89e:	f001 f91d 	bl	801dadc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c8a2:	b300      	cbz	r0, 801c8e6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801c8a4:	280a      	cmp	r0, #10
 801c8a6:	d01a      	beq.n	801c8de <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801c8a8:	9f01      	ldr	r7, [sp, #4]
 801c8aa:	b1c7      	cbz	r7, 801c8de <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801c8ac:	7b78      	ldrb	r0, [r7, #13]
 801c8ae:	7a3b      	ldrb	r3, [r7, #8]
 801c8b0:	00c1      	lsls	r1, r0, #3
 801c8b2:	88aa      	ldrh	r2, [r5, #4]
 801c8b4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c8b8:	4319      	orrs	r1, r3
 801c8ba:	0643      	lsls	r3, r0, #25
 801c8bc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801c8c0:	bf48      	it	mi
 801c8c2:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801c8c6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801c8ca:	bf48      	it	mi
 801c8cc:	b219      	sxthmi	r1, r3
 801c8ce:	79fb      	ldrb	r3, [r7, #7]
 801c8d0:	4303      	orrs	r3, r0
 801c8d2:	4413      	add	r3, r2
 801c8d4:	1a5b      	subs	r3, r3, r1
 801c8d6:	b29b      	uxth	r3, r3
 801c8d8:	42a3      	cmp	r3, r4
 801c8da:	bfc8      	it	gt
 801c8dc:	b21c      	sxthgt	r4, r3
 801c8de:	4633      	mov	r3, r6
 801c8e0:	462a      	mov	r2, r5
 801c8e2:	2100      	movs	r1, #0
 801c8e4:	e7da      	b.n	801c89c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 801c8e6:	b2a0      	uxth	r0, r4
 801c8e8:	b018      	add	sp, #96	; 0x60
 801c8ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c8ee:	b003      	add	sp, #12
 801c8f0:	4770      	bx	lr

0801c8f2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c8f2:	b40e      	push	{r1, r2, r3}
 801c8f4:	b530      	push	{r4, r5, lr}
 801c8f6:	b098      	sub	sp, #96	; 0x60
 801c8f8:	4604      	mov	r4, r0
 801c8fa:	ab1b      	add	r3, sp, #108	; 0x6c
 801c8fc:	a802      	add	r0, sp, #8
 801c8fe:	f853 5b04 	ldr.w	r5, [r3], #4
 801c902:	9301      	str	r3, [sp, #4]
 801c904:	f000 fdab 	bl	801d45e <_ZN8touchgfx12TextProviderC1Ev>
 801c908:	6823      	ldr	r3, [r4, #0]
 801c90a:	4620      	mov	r0, r4
 801c90c:	2401      	movs	r4, #1
 801c90e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c910:	4798      	blx	r3
 801c912:	9a01      	ldr	r2, [sp, #4]
 801c914:	4603      	mov	r3, r0
 801c916:	4629      	mov	r1, r5
 801c918:	a802      	add	r0, sp, #8
 801c91a:	f000 fde5 	bl	801d4e8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801c91e:	a802      	add	r0, sp, #8
 801c920:	f001 f9ce 	bl	801dcc0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c924:	b2a3      	uxth	r3, r4
 801c926:	b138      	cbz	r0, 801c938 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801c928:	280a      	cmp	r0, #10
 801c92a:	a802      	add	r0, sp, #8
 801c92c:	bf04      	itt	eq
 801c92e:	3301      	addeq	r3, #1
 801c930:	b21c      	sxtheq	r4, r3
 801c932:	f001 f9c5 	bl	801dcc0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c936:	e7f5      	b.n	801c924 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801c938:	4618      	mov	r0, r3
 801c93a:	b018      	add	sp, #96	; 0x60
 801c93c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c940:	b003      	add	sp, #12
 801c942:	4770      	bx	lr

0801c944 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c944:	b40e      	push	{r1, r2, r3}
 801c946:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c948:	b098      	sub	sp, #96	; 0x60
 801c94a:	4604      	mov	r4, r0
 801c94c:	26ff      	movs	r6, #255	; 0xff
 801c94e:	ab1d      	add	r3, sp, #116	; 0x74
 801c950:	a802      	add	r0, sp, #8
 801c952:	f853 5b04 	ldr.w	r5, [r3], #4
 801c956:	9300      	str	r3, [sp, #0]
 801c958:	f000 fd81 	bl	801d45e <_ZN8touchgfx12TextProviderC1Ev>
 801c95c:	6823      	ldr	r3, [r4, #0]
 801c95e:	4620      	mov	r0, r4
 801c960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c962:	4798      	blx	r3
 801c964:	4629      	mov	r1, r5
 801c966:	4603      	mov	r3, r0
 801c968:	9a00      	ldr	r2, [sp, #0]
 801c96a:	a802      	add	r0, sp, #8
 801c96c:	ad18      	add	r5, sp, #96	; 0x60
 801c96e:	f000 fdbb 	bl	801d4e8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801c972:	2100      	movs	r1, #0
 801c974:	4622      	mov	r2, r4
 801c976:	a802      	add	r0, sp, #8
 801c978:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801c97c:	462b      	mov	r3, r5
 801c97e:	f001 f8ad 	bl	801dadc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c982:	b1d8      	cbz	r0, 801c9bc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801c984:	280a      	cmp	r0, #10
 801c986:	d012      	beq.n	801c9ae <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801c988:	9801      	ldr	r0, [sp, #4]
 801c98a:	b180      	cbz	r0, 801c9ae <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801c98c:	7b47      	ldrb	r7, [r0, #13]
 801c98e:	7922      	ldrb	r2, [r4, #4]
 801c990:	00fb      	lsls	r3, r7, #3
 801c992:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c996:	7a03      	ldrb	r3, [r0, #8]
 801c998:	430b      	orrs	r3, r1
 801c99a:	0679      	lsls	r1, r7, #25
 801c99c:	bf44      	itt	mi
 801c99e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c9a2:	b21b      	sxthmi	r3, r3
 801c9a4:	1ad3      	subs	r3, r2, r3
 801c9a6:	b2db      	uxtb	r3, r3
 801c9a8:	429e      	cmp	r6, r3
 801c9aa:	bf28      	it	cs
 801c9ac:	461e      	movcs	r6, r3
 801c9ae:	462b      	mov	r3, r5
 801c9b0:	4622      	mov	r2, r4
 801c9b2:	2100      	movs	r1, #0
 801c9b4:	a802      	add	r0, sp, #8
 801c9b6:	f001 f891 	bl	801dadc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c9ba:	e7e2      	b.n	801c982 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801c9bc:	4630      	mov	r0, r6
 801c9be:	b018      	add	sp, #96	; 0x60
 801c9c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c9c4:	b003      	add	sp, #12
 801c9c6:	4770      	bx	lr

0801c9c8 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c9c8:	b513      	push	{r0, r1, r4, lr}
 801c9ca:	1d01      	adds	r1, r0, #4
 801c9cc:	4603      	mov	r3, r0
 801c9ce:	466a      	mov	r2, sp
 801c9d0:	c903      	ldmia	r1, {r0, r1}
 801c9d2:	e882 0003 	stmia.w	r2, {r0, r1}
 801c9d6:	2100      	movs	r1, #0
 801c9d8:	4618      	mov	r0, r3
 801c9da:	9100      	str	r1, [sp, #0]
 801c9dc:	6819      	ldr	r1, [r3, #0]
 801c9de:	690c      	ldr	r4, [r1, #16]
 801c9e0:	4611      	mov	r1, r2
 801c9e2:	47a0      	blx	r4
 801c9e4:	b002      	add	sp, #8
 801c9e6:	bd10      	pop	{r4, pc}

0801c9e8 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c9e8:	b538      	push	{r3, r4, r5, lr}
 801c9ea:	680b      	ldr	r3, [r1, #0]
 801c9ec:	460c      	mov	r4, r1
 801c9ee:	4605      	mov	r5, r0
 801c9f0:	68db      	ldr	r3, [r3, #12]
 801c9f2:	4798      	blx	r3
 801c9f4:	6823      	ldr	r3, [r4, #0]
 801c9f6:	4620      	mov	r0, r4
 801c9f8:	4629      	mov	r1, r5
 801c9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c9fc:	4798      	blx	r3
 801c9fe:	4628      	mov	r0, r5
 801ca00:	bd38      	pop	{r3, r4, r5, pc}

0801ca02 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801ca02:	b410      	push	{r4}
 801ca04:	880a      	ldrh	r2, [r1, #0]
 801ca06:	8884      	ldrh	r4, [r0, #4]
 801ca08:	4422      	add	r2, r4
 801ca0a:	800a      	strh	r2, [r1, #0]
 801ca0c:	884a      	ldrh	r2, [r1, #2]
 801ca0e:	88c4      	ldrh	r4, [r0, #6]
 801ca10:	4422      	add	r2, r4
 801ca12:	804a      	strh	r2, [r1, #2]
 801ca14:	6940      	ldr	r0, [r0, #20]
 801ca16:	b120      	cbz	r0, 801ca22 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801ca18:	6803      	ldr	r3, [r0, #0]
 801ca1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ca1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca20:	4718      	bx	r3
 801ca22:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ca26:	4770      	bx	lr

0801ca28 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ca28:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca2a:	460b      	mov	r3, r1
 801ca2c:	b085      	sub	sp, #20
 801ca2e:	4604      	mov	r4, r0
 801ca30:	b901      	cbnz	r1, 801ca34 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801ca32:	b1fa      	cbz	r2, 801ca74 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801ca34:	1d27      	adds	r7, r4, #4
 801ca36:	466e      	mov	r6, sp
 801ca38:	ad02      	add	r5, sp, #8
 801ca3a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801ca3e:	e886 0003 	stmia.w	r6, {r0, r1}
 801ca42:	88e1      	ldrh	r1, [r4, #6]
 801ca44:	4620      	mov	r0, r4
 801ca46:	440a      	add	r2, r1
 801ca48:	88a1      	ldrh	r1, [r4, #4]
 801ca4a:	4419      	add	r1, r3
 801ca4c:	6823      	ldr	r3, [r4, #0]
 801ca4e:	b212      	sxth	r2, r2
 801ca50:	b209      	sxth	r1, r1
 801ca52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ca54:	4798      	blx	r3
 801ca56:	e897 0003 	ldmia.w	r7, {r0, r1}
 801ca5a:	e885 0003 	stmia.w	r5, {r0, r1}
 801ca5e:	6960      	ldr	r0, [r4, #20]
 801ca60:	b150      	cbz	r0, 801ca78 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801ca62:	6803      	ldr	r3, [r0, #0]
 801ca64:	4631      	mov	r1, r6
 801ca66:	691b      	ldr	r3, [r3, #16]
 801ca68:	4798      	blx	r3
 801ca6a:	6960      	ldr	r0, [r4, #20]
 801ca6c:	6803      	ldr	r3, [r0, #0]
 801ca6e:	691b      	ldr	r3, [r3, #16]
 801ca70:	4629      	mov	r1, r5
 801ca72:	4798      	blx	r3
 801ca74:	b005      	add	sp, #20
 801ca76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca78:	f7ff fb84 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 801ca7c:	6803      	ldr	r3, [r0, #0]
 801ca7e:	4631      	mov	r1, r6
 801ca80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ca82:	4798      	blx	r3
 801ca84:	f7ff fb7e 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 801ca88:	6803      	ldr	r3, [r0, #0]
 801ca8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ca8c:	e7f0      	b.n	801ca70 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801ca8e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801ca8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ca90:	8882      	ldrh	r2, [r0, #4]
 801ca92:	4605      	mov	r5, r0
 801ca94:	880b      	ldrh	r3, [r1, #0]
 801ca96:	460c      	mov	r4, r1
 801ca98:	4413      	add	r3, r2
 801ca9a:	800b      	strh	r3, [r1, #0]
 801ca9c:	884b      	ldrh	r3, [r1, #2]
 801ca9e:	88c2      	ldrh	r2, [r0, #6]
 801caa0:	4413      	add	r3, r2
 801caa2:	4602      	mov	r2, r0
 801caa4:	804b      	strh	r3, [r1, #2]
 801caa6:	466b      	mov	r3, sp
 801caa8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801caac:	6851      	ldr	r1, [r2, #4]
 801caae:	c303      	stmia	r3!, {r0, r1}
 801cab0:	4621      	mov	r1, r4
 801cab2:	4668      	mov	r0, sp
 801cab4:	f7fb fba8 	bl	8018208 <_ZN8touchgfx4RectaNERKS0_>
 801cab8:	466b      	mov	r3, sp
 801caba:	cb03      	ldmia	r3!, {r0, r1}
 801cabc:	6020      	str	r0, [r4, #0]
 801cabe:	6061      	str	r1, [r4, #4]
 801cac0:	6968      	ldr	r0, [r5, #20]
 801cac2:	b128      	cbz	r0, 801cad0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801cac4:	6803      	ldr	r3, [r0, #0]
 801cac6:	691b      	ldr	r3, [r3, #16]
 801cac8:	4621      	mov	r1, r4
 801caca:	4798      	blx	r3
 801cacc:	b003      	add	sp, #12
 801cace:	bd30      	pop	{r4, r5, pc}
 801cad0:	f7ff fb58 	bl	801c184 <_ZN8touchgfx11Application11getInstanceEv>
 801cad4:	6803      	ldr	r3, [r0, #0]
 801cad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cad8:	e7f6      	b.n	801cac8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801cada <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801cada:	b570      	push	{r4, r5, r6, lr}
 801cadc:	8882      	ldrh	r2, [r0, #4]
 801cade:	460c      	mov	r4, r1
 801cae0:	880b      	ldrh	r3, [r1, #0]
 801cae2:	4605      	mov	r5, r0
 801cae4:	4413      	add	r3, r2
 801cae6:	800b      	strh	r3, [r1, #0]
 801cae8:	884b      	ldrh	r3, [r1, #2]
 801caea:	88c2      	ldrh	r2, [r0, #6]
 801caec:	4413      	add	r3, r2
 801caee:	804b      	strh	r3, [r1, #2]
 801caf0:	1d01      	adds	r1, r0, #4
 801caf2:	4620      	mov	r0, r4
 801caf4:	f7fb fb88 	bl	8018208 <_ZN8touchgfx4RectaNERKS0_>
 801caf8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801cafc:	2b00      	cmp	r3, #0
 801cafe:	dd0b      	ble.n	801cb18 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801cb00:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	dd07      	ble.n	801cb18 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801cb08:	6968      	ldr	r0, [r5, #20]
 801cb0a:	b128      	cbz	r0, 801cb18 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801cb0c:	6803      	ldr	r3, [r0, #0]
 801cb0e:	4621      	mov	r1, r4
 801cb10:	6a1b      	ldr	r3, [r3, #32]
 801cb12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cb16:	4718      	bx	r3
 801cb18:	bd70      	pop	{r4, r5, r6, pc}

0801cb1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801cb1a:	b510      	push	{r4, lr}
 801cb1c:	2300      	movs	r3, #0
 801cb1e:	4604      	mov	r4, r0
 801cb20:	4608      	mov	r0, r1
 801cb22:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801cb26:	8023      	strh	r3, [r4, #0]
 801cb28:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cb2c:	8063      	strh	r3, [r4, #2]
 801cb2e:	6803      	ldr	r3, [r0, #0]
 801cb30:	80a1      	strh	r1, [r4, #4]
 801cb32:	4621      	mov	r1, r4
 801cb34:	80e2      	strh	r2, [r4, #6]
 801cb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb38:	4798      	blx	r3
 801cb3a:	4620      	mov	r0, r4
 801cb3c:	bd10      	pop	{r4, pc}
	...

0801cb40 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801cb40:	b530      	push	{r4, r5, lr}
 801cb42:	8083      	strh	r3, [r0, #4]
 801cb44:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801cb48:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801cb4c:	7183      	strb	r3, [r0, #6]
 801cb4e:	79c3      	ldrb	r3, [r0, #7]
 801cb50:	6101      	str	r1, [r0, #16]
 801cb52:	f365 0306 	bfi	r3, r5, #0, #7
 801cb56:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801cb5a:	8282      	strh	r2, [r0, #20]
 801cb5c:	f365 13c7 	bfi	r3, r5, #7, #1
 801cb60:	71c3      	strb	r3, [r0, #7]
 801cb62:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801cb66:	7203      	strb	r3, [r0, #8]
 801cb68:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801cb6c:	7243      	strb	r3, [r0, #9]
 801cb6e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801cb72:	8143      	strh	r3, [r0, #10]
 801cb74:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801cb78:	8183      	strh	r3, [r0, #12]
 801cb7a:	4b01      	ldr	r3, [pc, #4]	; (801cb80 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801cb7c:	6003      	str	r3, [r0, #0]
 801cb7e:	bd30      	pop	{r4, r5, pc}
 801cb80:	0802d0d8 	.word	0x0802d0d8

0801cb84 <_ZNK8touchgfx9ConstFont4findEt>:
 801cb84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb86:	6904      	ldr	r4, [r0, #16]
 801cb88:	8a82      	ldrh	r2, [r0, #20]
 801cb8a:	88a3      	ldrh	r3, [r4, #4]
 801cb8c:	3a01      	subs	r2, #1
 801cb8e:	1acb      	subs	r3, r1, r3
 801cb90:	d431      	bmi.n	801cbf6 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801cb92:	4293      	cmp	r3, r2
 801cb94:	dd0c      	ble.n	801cbb0 <_ZNK8touchgfx9ConstFont4findEt+0x2c>
 801cb96:	230e      	movs	r3, #14
 801cb98:	fb03 4302 	mla	r3, r3, r2, r4
 801cb9c:	889b      	ldrh	r3, [r3, #4]
 801cb9e:	1a5b      	subs	r3, r3, r1
 801cba0:	1ad3      	subs	r3, r2, r3
 801cba2:	429a      	cmp	r2, r3
 801cba4:	db27      	blt.n	801cbf6 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	bfbc      	itt	lt
 801cbaa:	2302      	movlt	r3, #2
 801cbac:	fb92 f3f3 	sdivlt	r3, r2, r3
 801cbb0:	2500      	movs	r5, #0
 801cbb2:	260e      	movs	r6, #14
 801cbb4:	4295      	cmp	r5, r2
 801cbb6:	dc1e      	bgt.n	801cbf6 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801cbb8:	fb06 4003 	mla	r0, r6, r3, r4
 801cbbc:	8887      	ldrh	r7, [r0, #4]
 801cbbe:	428f      	cmp	r7, r1
 801cbc0:	d01a      	beq.n	801cbf8 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801cbc2:	d90d      	bls.n	801cbe0 <_ZNK8touchgfx9ConstFont4findEt+0x5c>
 801cbc4:	1e5a      	subs	r2, r3, #1
 801cbc6:	4295      	cmp	r5, r2
 801cbc8:	dc15      	bgt.n	801cbf6 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801cbca:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801cbce:	1a5b      	subs	r3, r3, r1
 801cbd0:	1ad3      	subs	r3, r2, r3
 801cbd2:	429a      	cmp	r2, r3
 801cbd4:	db0f      	blt.n	801cbf6 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801cbd6:	429d      	cmp	r5, r3
 801cbd8:	ddec      	ble.n	801cbb4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801cbda:	1953      	adds	r3, r2, r5
 801cbdc:	105b      	asrs	r3, r3, #1
 801cbde:	e7e9      	b.n	801cbb4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801cbe0:	1c5d      	adds	r5, r3, #1
 801cbe2:	42aa      	cmp	r2, r5
 801cbe4:	db07      	blt.n	801cbf6 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801cbe6:	8a43      	ldrh	r3, [r0, #18]
 801cbe8:	1acb      	subs	r3, r1, r3
 801cbea:	442b      	add	r3, r5
 801cbec:	429d      	cmp	r5, r3
 801cbee:	dc02      	bgt.n	801cbf6 <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801cbf0:	429a      	cmp	r2, r3
 801cbf2:	dadf      	bge.n	801cbb4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801cbf4:	e7f1      	b.n	801cbda <_ZNK8touchgfx9ConstFont4findEt+0x56>
 801cbf6:	2000      	movs	r0, #0
 801cbf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cbfa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801cbfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbfc:	4604      	mov	r4, r0
 801cbfe:	4617      	mov	r7, r2
 801cc00:	461e      	mov	r6, r3
 801cc02:	b911      	cbnz	r1, 801cc0a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801cc04:	2500      	movs	r5, #0
 801cc06:	4628      	mov	r0, r5
 801cc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc0a:	290a      	cmp	r1, #10
 801cc0c:	d0fa      	beq.n	801cc04 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cc0e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801cc12:	4291      	cmp	r1, r2
 801cc14:	d0f6      	beq.n	801cc04 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cc16:	f242 020b 	movw	r2, #8203	; 0x200b
 801cc1a:	4291      	cmp	r1, r2
 801cc1c:	d0f2      	beq.n	801cc04 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cc1e:	f7ff ffb1 	bl	801cb84 <_ZNK8touchgfx9ConstFont4findEt>
 801cc22:	4605      	mov	r5, r0
 801cc24:	b950      	cbnz	r0, 801cc3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801cc26:	6823      	ldr	r3, [r4, #0]
 801cc28:	4620      	mov	r0, r4
 801cc2a:	691b      	ldr	r3, [r3, #16]
 801cc2c:	4798      	blx	r3
 801cc2e:	4601      	mov	r1, r0
 801cc30:	4620      	mov	r0, r4
 801cc32:	f7ff ffa7 	bl	801cb84 <_ZNK8touchgfx9ConstFont4findEt>
 801cc36:	4605      	mov	r5, r0
 801cc38:	2800      	cmp	r0, #0
 801cc3a:	d0e3      	beq.n	801cc04 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cc3c:	6823      	ldr	r3, [r4, #0]
 801cc3e:	4629      	mov	r1, r5
 801cc40:	4620      	mov	r0, r4
 801cc42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cc44:	4798      	blx	r3
 801cc46:	6038      	str	r0, [r7, #0]
 801cc48:	6823      	ldr	r3, [r4, #0]
 801cc4a:	4620      	mov	r0, r4
 801cc4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cc4e:	4798      	blx	r3
 801cc50:	7030      	strb	r0, [r6, #0]
 801cc52:	e7d8      	b.n	801cc06 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801cc54 <_ZN8touchgfx6memsetEPvhm>:
 801cc54:	4402      	add	r2, r0
 801cc56:	4290      	cmp	r0, r2
 801cc58:	d002      	beq.n	801cc60 <_ZN8touchgfx6memsetEPvhm+0xc>
 801cc5a:	f800 1b01 	strb.w	r1, [r0], #1
 801cc5e:	e7fa      	b.n	801cc56 <_ZN8touchgfx6memsetEPvhm+0x2>
 801cc60:	4770      	bx	lr

0801cc62 <_ZN8touchgfx3clzEl>:
 801cc62:	b1e8      	cbz	r0, 801cca0 <_ZN8touchgfx3clzEl+0x3e>
 801cc64:	2800      	cmp	r0, #0
 801cc66:	bfb8      	it	lt
 801cc68:	4240      	neglt	r0, r0
 801cc6a:	0c03      	lsrs	r3, r0, #16
 801cc6c:	041b      	lsls	r3, r3, #16
 801cc6e:	b9ab      	cbnz	r3, 801cc9c <_ZN8touchgfx3clzEl+0x3a>
 801cc70:	0400      	lsls	r0, r0, #16
 801cc72:	2310      	movs	r3, #16
 801cc74:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801cc78:	bf04      	itt	eq
 801cc7a:	0200      	lsleq	r0, r0, #8
 801cc7c:	3308      	addeq	r3, #8
 801cc7e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801cc82:	bf04      	itt	eq
 801cc84:	0100      	lsleq	r0, r0, #4
 801cc86:	3304      	addeq	r3, #4
 801cc88:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801cc8c:	bf04      	itt	eq
 801cc8e:	0080      	lsleq	r0, r0, #2
 801cc90:	3302      	addeq	r3, #2
 801cc92:	2800      	cmp	r0, #0
 801cc94:	bfa8      	it	ge
 801cc96:	3301      	addge	r3, #1
 801cc98:	1e58      	subs	r0, r3, #1
 801cc9a:	4770      	bx	lr
 801cc9c:	2300      	movs	r3, #0
 801cc9e:	e7e9      	b.n	801cc74 <_ZN8touchgfx3clzEl+0x12>
 801cca0:	201f      	movs	r0, #31
 801cca2:	4770      	bx	lr

0801cca4 <_ZN8touchgfx6muldivElllRl>:
 801cca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cca8:	4604      	mov	r4, r0
 801ccaa:	4698      	mov	r8, r3
 801ccac:	2601      	movs	r6, #1
 801ccae:	f7ff ffd8 	bl	801cc62 <_ZN8touchgfx3clzEl>
 801ccb2:	2c00      	cmp	r4, #0
 801ccb4:	fa04 f500 	lsl.w	r5, r4, r0
 801ccb8:	fa06 f600 	lsl.w	r6, r6, r0
 801ccbc:	bfba      	itte	lt
 801ccbe:	f04f 37ff 	movlt.w	r7, #4294967295
 801ccc2:	4264      	neglt	r4, r4
 801ccc4:	2701      	movge	r7, #1
 801ccc6:	2900      	cmp	r1, #0
 801ccc8:	f106 36ff 	add.w	r6, r6, #4294967295
 801cccc:	bfbc      	itt	lt
 801ccce:	4249      	neglt	r1, r1
 801ccd0:	427f      	neglt	r7, r7
 801ccd2:	2a00      	cmp	r2, #0
 801ccd4:	fa41 fc00 	asr.w	ip, r1, r0
 801ccd8:	ea01 0106 	and.w	r1, r1, r6
 801ccdc:	bfb8      	it	lt
 801ccde:	427f      	neglt	r7, r7
 801cce0:	fb04 f401 	mul.w	r4, r4, r1
 801cce4:	fb95 f3f2 	sdiv	r3, r5, r2
 801cce8:	fb02 5513 	mls	r5, r2, r3, r5
 801ccec:	bfb8      	it	lt
 801ccee:	4252      	neglt	r2, r2
 801ccf0:	fb94 f0f2 	sdiv	r0, r4, r2
 801ccf4:	fb02 4410 	mls	r4, r2, r0, r4
 801ccf8:	fb0c 4405 	mla	r4, ip, r5, r4
 801ccfc:	fb94 f1f2 	sdiv	r1, r4, r2
 801cd00:	4408      	add	r0, r1
 801cd02:	fb02 4211 	mls	r2, r2, r1, r4
 801cd06:	fb0c 0003 	mla	r0, ip, r3, r0
 801cd0a:	f8c8 2000 	str.w	r2, [r8]
 801cd0e:	4378      	muls	r0, r7
 801cd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cd14 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801cd14:	2000      	movs	r0, #0
 801cd16:	4770      	bx	lr

0801cd18 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801cd18:	2001      	movs	r0, #1
 801cd1a:	4770      	bx	lr

0801cd1c <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801cd1c:	2002      	movs	r0, #2
 801cd1e:	4770      	bx	lr

0801cd20 <_ZN8touchgfx12GestureEventD1Ev>:
 801cd20:	4770      	bx	lr

0801cd22 <_ZN8touchgfx9DragEventD1Ev>:
 801cd22:	4770      	bx	lr

0801cd24 <_ZN8touchgfx10ClickEventD1Ev>:
 801cd24:	4770      	bx	lr

0801cd26 <_ZN8touchgfx10ClickEventD0Ev>:
 801cd26:	b510      	push	{r4, lr}
 801cd28:	4604      	mov	r4, r0
 801cd2a:	210c      	movs	r1, #12
 801cd2c:	f00b fb7e 	bl	802842c <_ZdlPvj>
 801cd30:	4620      	mov	r0, r4
 801cd32:	bd10      	pop	{r4, pc}

0801cd34 <_ZN8touchgfx9DragEventD0Ev>:
 801cd34:	b510      	push	{r4, lr}
 801cd36:	4604      	mov	r4, r0
 801cd38:	2110      	movs	r1, #16
 801cd3a:	f00b fb77 	bl	802842c <_ZdlPvj>
 801cd3e:	4620      	mov	r0, r4
 801cd40:	bd10      	pop	{r4, pc}

0801cd42 <_ZN8touchgfx12GestureEventD0Ev>:
 801cd42:	b510      	push	{r4, lr}
 801cd44:	4604      	mov	r4, r0
 801cd46:	210c      	movs	r1, #12
 801cd48:	f00b fb70 	bl	802842c <_ZdlPvj>
 801cd4c:	4620      	mov	r0, r4
 801cd4e:	bd10      	pop	{r4, pc}

0801cd50 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801cd50:	b530      	push	{r4, r5, lr}
 801cd52:	460d      	mov	r5, r1
 801cd54:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801cd56:	b087      	sub	sp, #28
 801cd58:	4604      	mov	r4, r0
 801cd5a:	b301      	cbz	r1, 801cd9e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801cd5c:	a801      	add	r0, sp, #4
 801cd5e:	f7ff fedc 	bl	801cb1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cd62:	892a      	ldrh	r2, [r5, #8]
 801cd64:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801cd68:	7928      	ldrb	r0, [r5, #4]
 801cd6a:	1ad2      	subs	r2, r2, r3
 801cd6c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801cd6e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801cd72:	441a      	add	r2, r3
 801cd74:	896b      	ldrh	r3, [r5, #10]
 801cd76:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801cd7a:	f88d 0010 	strb.w	r0, [sp, #16]
 801cd7e:	1b5b      	subs	r3, r3, r5
 801cd80:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801cd82:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801cd84:	442b      	add	r3, r5
 801cd86:	4d07      	ldr	r5, [pc, #28]	; (801cda4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801cd88:	f8ad 1012 	strh.w	r1, [sp, #18]
 801cd8c:	a903      	add	r1, sp, #12
 801cd8e:	9503      	str	r5, [sp, #12]
 801cd90:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cd94:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cd98:	6803      	ldr	r3, [r0, #0]
 801cd9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cd9c:	4798      	blx	r3
 801cd9e:	b007      	add	sp, #28
 801cda0:	bd30      	pop	{r4, r5, pc}
 801cda2:	bf00      	nop
 801cda4:	0802d154 	.word	0x0802d154

0801cda8 <_ZNK8touchgfx4Rect9intersectEss>:
 801cda8:	b510      	push	{r4, lr}
 801cdaa:	f9b0 3000 	ldrsh.w	r3, [r0]
 801cdae:	428b      	cmp	r3, r1
 801cdb0:	dc10      	bgt.n	801cdd4 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801cdb2:	8884      	ldrh	r4, [r0, #4]
 801cdb4:	4423      	add	r3, r4
 801cdb6:	b21b      	sxth	r3, r3
 801cdb8:	4299      	cmp	r1, r3
 801cdba:	da0b      	bge.n	801cdd4 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801cdbc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801cdc0:	4293      	cmp	r3, r2
 801cdc2:	dc07      	bgt.n	801cdd4 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801cdc4:	88c0      	ldrh	r0, [r0, #6]
 801cdc6:	4418      	add	r0, r3
 801cdc8:	b200      	sxth	r0, r0
 801cdca:	4282      	cmp	r2, r0
 801cdcc:	bfac      	ite	ge
 801cdce:	2000      	movge	r0, #0
 801cdd0:	2001      	movlt	r0, #1
 801cdd2:	bd10      	pop	{r4, pc}
 801cdd4:	2000      	movs	r0, #0
 801cdd6:	e7fc      	b.n	801cdd2 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801cdd8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801cdd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cdda:	460c      	mov	r4, r1
 801cddc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801cdde:	b089      	sub	sp, #36	; 0x24
 801cde0:	4605      	mov	r5, r0
 801cde2:	2900      	cmp	r1, #0
 801cde4:	d054      	beq.n	801ce90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801cde6:	4668      	mov	r0, sp
 801cde8:	f7ff fe97 	bl	801cb1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cdec:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801cdee:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801cdf0:	4668      	mov	r0, sp
 801cdf2:	8922      	ldrh	r2, [r4, #8]
 801cdf4:	88e1      	ldrh	r1, [r4, #6]
 801cdf6:	443a      	add	r2, r7
 801cdf8:	4431      	add	r1, r6
 801cdfa:	b212      	sxth	r2, r2
 801cdfc:	b209      	sxth	r1, r1
 801cdfe:	f7ff ffd3 	bl	801cda8 <_ZNK8touchgfx4Rect9intersectEss>
 801ce02:	b1d0      	cbz	r0, 801ce3a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801ce04:	89a2      	ldrh	r2, [r4, #12]
 801ce06:	4668      	mov	r0, sp
 801ce08:	8961      	ldrh	r1, [r4, #10]
 801ce0a:	443a      	add	r2, r7
 801ce0c:	4431      	add	r1, r6
 801ce0e:	b212      	sxth	r2, r2
 801ce10:	b209      	sxth	r1, r1
 801ce12:	f7ff ffc9 	bl	801cda8 <_ZNK8touchgfx4Rect9intersectEss>
 801ce16:	4603      	mov	r3, r0
 801ce18:	b978      	cbnz	r0, 801ce3a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801ce1a:	4a1e      	ldr	r2, [pc, #120]	; (801ce94 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801ce1c:	a904      	add	r1, sp, #16
 801ce1e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801ce20:	9204      	str	r2, [sp, #16]
 801ce22:	2202      	movs	r2, #2
 801ce24:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ce28:	f88d 2014 	strb.w	r2, [sp, #20]
 801ce2c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ce30:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ce34:	6803      	ldr	r3, [r0, #0]
 801ce36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ce38:	4798      	blx	r3
 801ce3a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801ce3c:	a802      	add	r0, sp, #8
 801ce3e:	f7ff fe6c 	bl	801cb1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ce42:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ce46:	88e0      	ldrh	r0, [r4, #6]
 801ce48:	8961      	ldrh	r1, [r4, #10]
 801ce4a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801ce4e:	1a80      	subs	r0, r0, r2
 801ce50:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801ce54:	1a89      	subs	r1, r1, r2
 801ce56:	8923      	ldrh	r3, [r4, #8]
 801ce58:	4460      	add	r0, ip
 801ce5a:	89a2      	ldrh	r2, [r4, #12]
 801ce5c:	4461      	add	r1, ip
 801ce5e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801ce60:	eba3 030e 	sub.w	r3, r3, lr
 801ce64:	eba2 020e 	sub.w	r2, r2, lr
 801ce68:	f8ad 0016 	strh.w	r0, [sp, #22]
 801ce6c:	7927      	ldrb	r7, [r4, #4]
 801ce6e:	4433      	add	r3, r6
 801ce70:	4432      	add	r2, r6
 801ce72:	4c09      	ldr	r4, [pc, #36]	; (801ce98 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801ce74:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801ce76:	f8ad 101a 	strh.w	r1, [sp, #26]
 801ce7a:	a904      	add	r1, sp, #16
 801ce7c:	9404      	str	r4, [sp, #16]
 801ce7e:	f88d 7014 	strb.w	r7, [sp, #20]
 801ce82:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ce86:	f8ad 201c 	strh.w	r2, [sp, #28]
 801ce8a:	6803      	ldr	r3, [r0, #0]
 801ce8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ce8e:	4798      	blx	r3
 801ce90:	b009      	add	sp, #36	; 0x24
 801ce92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ce94:	0802d12c 	.word	0x0802d12c
 801ce98:	0802d140 	.word	0x0802d140

0801ce9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801ce9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cea0:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801cea4:	b0a1      	sub	sp, #132	; 0x84
 801cea6:	4604      	mov	r4, r0
 801cea8:	460d      	mov	r5, r1
 801ceaa:	790b      	ldrb	r3, [r1, #4]
 801ceac:	f1b9 0f00 	cmp.w	r9, #0
 801ceb0:	d00f      	beq.n	801ced2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	f040 80a2 	bne.w	801cffc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801ceb8:	b021      	add	sp, #132	; 0x84
 801ceba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cebe:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801cec2:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801cec6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801ceca:	1d20      	adds	r0, r4, #4
 801cecc:	f7fb f8ea 	bl	80180a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801ced0:	e094      	b.n	801cffc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	d1f0      	bne.n	801ceb8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801ced6:	4b5f      	ldr	r3, [pc, #380]	; (801d054 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801ced8:	681b      	ldr	r3, [r3, #0]
 801ceda:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801cede:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801cee2:	f1ba 0f03 	cmp.w	sl, #3
 801cee6:	ddea      	ble.n	801cebe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801cee8:	f1ba 0f0c 	cmp.w	sl, #12
 801ceec:	f04f 0303 	mov.w	r3, #3
 801cef0:	f04f 0600 	mov.w	r6, #0
 801cef4:	4958      	ldr	r1, [pc, #352]	; (801d058 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801cef6:	bfd8      	it	le
 801cef8:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801cefc:	960a      	str	r6, [sp, #40]	; 0x28
 801cefe:	bfd8      	it	le
 801cf00:	fb92 f3f3 	sdivle	r3, r2, r3
 801cf04:	9301      	str	r3, [sp, #4]
 801cf06:	4b55      	ldr	r3, [pc, #340]	; (801d05c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801cf08:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cf0c:	4b54      	ldr	r3, [pc, #336]	; (801d060 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801cf0e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801cf12:	2248      	movs	r2, #72	; 0x48
 801cf14:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cf18:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801cf1c:	ab0e      	add	r3, sp, #56	; 0x38
 801cf1e:	4618      	mov	r0, r3
 801cf20:	f00b fb2e 	bl	8028580 <memcpy>
 801cf24:	f04f 32ff 	mov.w	r2, #4294967295
 801cf28:	f8cd a008 	str.w	sl, [sp, #8]
 801cf2c:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801cf30:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801cf34:	46b3      	mov	fp, r6
 801cf36:	fb93 f3f2 	sdiv	r3, r3, r2
 801cf3a:	b29b      	uxth	r3, r3
 801cf3c:	9303      	str	r3, [sp, #12]
 801cf3e:	2300      	movs	r3, #0
 801cf40:	9a03      	ldr	r2, [sp, #12]
 801cf42:	88ef      	ldrh	r7, [r5, #6]
 801cf44:	a80a      	add	r0, sp, #40	; 0x28
 801cf46:	9309      	str	r3, [sp, #36]	; 0x24
 801cf48:	9b07      	ldr	r3, [sp, #28]
 801cf4a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801cf4e:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801cf52:	fb13 f302 	smulbb	r3, r3, r2
 801cf56:	b29b      	uxth	r3, r3
 801cf58:	9304      	str	r3, [sp, #16]
 801cf5a:	9b07      	ldr	r3, [sp, #28]
 801cf5c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801cf60:	685b      	ldr	r3, [r3, #4]
 801cf62:	fb13 f302 	smulbb	r3, r3, r2
 801cf66:	b29b      	uxth	r3, r3
 801cf68:	9305      	str	r3, [sp, #20]
 801cf6a:	9b04      	ldr	r3, [sp, #16]
 801cf6c:	441f      	add	r7, r3
 801cf6e:	9b05      	ldr	r3, [sp, #20]
 801cf70:	4498      	add	r8, r3
 801cf72:	b23f      	sxth	r7, r7
 801cf74:	fa0f f888 	sxth.w	r8, r8
 801cf78:	4639      	mov	r1, r7
 801cf7a:	4642      	mov	r2, r8
 801cf7c:	f7ff ff14 	bl	801cda8 <_ZNK8touchgfx4Rect9intersectEss>
 801cf80:	b380      	cbz	r0, 801cfe4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801cf82:	4639      	mov	r1, r7
 801cf84:	ab09      	add	r3, sp, #36	; 0x24
 801cf86:	4642      	mov	r2, r8
 801cf88:	1d20      	adds	r0, r4, #4
 801cf8a:	f7fb f88b 	bl	80180a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801cf8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cf90:	b341      	cbz	r1, 801cfe4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801cf92:	4549      	cmp	r1, r9
 801cf94:	d026      	beq.n	801cfe4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801cf96:	a80c      	add	r0, sp, #48	; 0x30
 801cf98:	f7ff fdbf 	bl	801cb1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cf9c:	2002      	movs	r0, #2
 801cf9e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801cfa2:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801cfa6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801cfaa:	fb92 f2f0 	sdiv	r2, r2, r0
 801cfae:	440a      	add	r2, r1
 801cfb0:	1a99      	subs	r1, r3, r2
 801cfb2:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801cfb6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801cfba:	fb93 f3f0 	sdiv	r3, r3, r0
 801cfbe:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801cfc2:	4403      	add	r3, r0
 801cfc4:	1ad3      	subs	r3, r2, r3
 801cfc6:	9a06      	ldr	r2, [sp, #24]
 801cfc8:	435b      	muls	r3, r3
 801cfca:	fb01 3301 	mla	r3, r1, r1, r3
 801cfce:	4293      	cmp	r3, r2
 801cfd0:	d208      	bcs.n	801cfe4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801cfd2:	9a04      	ldr	r2, [sp, #16]
 801cfd4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801cfd8:	86a2      	strh	r2, [r4, #52]	; 0x34
 801cfda:	9a05      	ldr	r2, [sp, #20]
 801cfdc:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801cfe0:	86e2      	strh	r2, [r4, #54]	; 0x36
 801cfe2:	9306      	str	r3, [sp, #24]
 801cfe4:	f10b 0b02 	add.w	fp, fp, #2
 801cfe8:	f1bb 0f08 	cmp.w	fp, #8
 801cfec:	dda7      	ble.n	801cf3e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801cfee:	9b02      	ldr	r3, [sp, #8]
 801cff0:	3601      	adds	r6, #1
 801cff2:	4453      	add	r3, sl
 801cff4:	9302      	str	r3, [sp, #8]
 801cff6:	9b01      	ldr	r3, [sp, #4]
 801cff8:	42b3      	cmp	r3, r6
 801cffa:	d199      	bne.n	801cf30 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801cffc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801cffe:	2900      	cmp	r1, #0
 801d000:	f43f af5a 	beq.w	801ceb8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801d004:	a80c      	add	r0, sp, #48	; 0x30
 801d006:	2600      	movs	r6, #0
 801d008:	f7ff fd87 	bl	801cb1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d00c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801d010:	88ea      	ldrh	r2, [r5, #6]
 801d012:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801d016:	1ad2      	subs	r2, r2, r3
 801d018:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801d01a:	7929      	ldrb	r1, [r5, #4]
 801d01c:	441a      	add	r2, r3
 801d01e:	892b      	ldrh	r3, [r5, #8]
 801d020:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801d024:	a90e      	add	r1, sp, #56	; 0x38
 801d026:	1a1b      	subs	r3, r3, r0
 801d028:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801d02a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801d02e:	4403      	add	r3, r0
 801d030:	480c      	ldr	r0, [pc, #48]	; (801d064 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801d032:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801d036:	900e      	str	r0, [sp, #56]	; 0x38
 801d038:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d03a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801d03e:	6803      	ldr	r3, [r0, #0]
 801d040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d042:	4798      	blx	r3
 801d044:	792b      	ldrb	r3, [r5, #4]
 801d046:	2b00      	cmp	r3, #0
 801d048:	f43f af36 	beq.w	801ceb8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801d04c:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801d050:	e732      	b.n	801ceb8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801d052:	bf00      	nop
 801d054:	2000b41c 	.word	0x2000b41c
 801d058:	08029df8 	.word	0x08029df8
 801d05c:	2000b410 	.word	0x2000b410
 801d060:	2000b412 	.word	0x2000b412
 801d064:	0802d12c 	.word	0x0802d12c

0801d068 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801d068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d06a:	4604      	mov	r4, r0
 801d06c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801d070:	3201      	adds	r2, #1
 801d072:	d112      	bne.n	801d09a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801d074:	2500      	movs	r5, #0
 801d076:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d07a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d07e:	6803      	ldr	r3, [r0, #0]
 801d080:	9500      	str	r5, [sp, #0]
 801d082:	466d      	mov	r5, sp
 801d084:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d088:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d08c:	4629      	mov	r1, r5
 801d08e:	6a1b      	ldr	r3, [r3, #32]
 801d090:	4798      	blx	r3
 801d092:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d096:	e884 0003 	stmia.w	r4, {r0, r1}
 801d09a:	4620      	mov	r0, r4
 801d09c:	b003      	add	sp, #12
 801d09e:	bd30      	pop	{r4, r5, pc}

0801d0a0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801d0a0:	b513      	push	{r0, r1, r4, lr}
 801d0a2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801d0a6:	4604      	mov	r4, r0
 801d0a8:	3301      	adds	r3, #1
 801d0aa:	d109      	bne.n	801d0c0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801d0ac:	4601      	mov	r1, r0
 801d0ae:	4668      	mov	r0, sp
 801d0b0:	f7ff fd33 	bl	801cb1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d0b4:	f8bd 3000 	ldrh.w	r3, [sp]
 801d0b8:	8423      	strh	r3, [r4, #32]
 801d0ba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d0be:	8463      	strh	r3, [r4, #34]	; 0x22
 801d0c0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801d0c4:	b002      	add	sp, #8
 801d0c6:	bd10      	pop	{r4, pc}

0801d0c8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801d0c8:	b513      	push	{r0, r1, r4, lr}
 801d0ca:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801d0ce:	4604      	mov	r4, r0
 801d0d0:	3301      	adds	r3, #1
 801d0d2:	d109      	bne.n	801d0e8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801d0d4:	4601      	mov	r1, r0
 801d0d6:	4668      	mov	r0, sp
 801d0d8:	f7ff fd1f 	bl	801cb1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d0dc:	f8bd 3000 	ldrh.w	r3, [sp]
 801d0e0:	8423      	strh	r3, [r4, #32]
 801d0e2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d0e6:	8463      	strh	r3, [r4, #34]	; 0x22
 801d0e8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801d0ec:	b002      	add	sp, #8
 801d0ee:	bd10      	pop	{r4, pc}

0801d0f0 <_ZN8touchgfx6ScreenC1Ev>:
 801d0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d0f2:	4605      	mov	r5, r0
 801d0f4:	4b17      	ldr	r3, [pc, #92]	; (801d154 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801d0f6:	2200      	movs	r2, #0
 801d0f8:	4917      	ldr	r1, [pc, #92]	; (801d158 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801d0fa:	f845 3b04 	str.w	r3, [r5], #4
 801d0fe:	2301      	movs	r3, #1
 801d100:	8102      	strh	r2, [r0, #8]
 801d102:	4604      	mov	r4, r0
 801d104:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801d108:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801d10c:	4b13      	ldr	r3, [pc, #76]	; (801d15c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801d10e:	8142      	strh	r2, [r0, #10]
 801d110:	f9b3 7000 	ldrsh.w	r7, [r3]
 801d114:	4b12      	ldr	r3, [pc, #72]	; (801d160 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801d116:	8182      	strh	r2, [r0, #12]
 801d118:	81c2      	strh	r2, [r0, #14]
 801d11a:	8202      	strh	r2, [r0, #16]
 801d11c:	8242      	strh	r2, [r0, #18]
 801d11e:	8282      	strh	r2, [r0, #20]
 801d120:	82c2      	strh	r2, [r0, #22]
 801d122:	6202      	str	r2, [r0, #32]
 801d124:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801d128:	6342      	str	r2, [r0, #52]	; 0x34
 801d12a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d12e:	6041      	str	r1, [r0, #4]
 801d130:	4611      	mov	r1, r2
 801d132:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d136:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801d13a:	4628      	mov	r0, r5
 801d13c:	f7f2 fc35 	bl	800f9aa <_ZN8touchgfx8Drawable5setXYEss>
 801d140:	4639      	mov	r1, r7
 801d142:	4628      	mov	r0, r5
 801d144:	f7f2 fc4f 	bl	800f9e6 <_ZN8touchgfx8Drawable8setWidthEs>
 801d148:	4628      	mov	r0, r5
 801d14a:	4631      	mov	r1, r6
 801d14c:	f7f2 fc5a 	bl	800fa04 <_ZN8touchgfx8Drawable9setHeightEs>
 801d150:	4620      	mov	r0, r4
 801d152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d154:	0802d168 	.word	0x0802d168
 801d158:	0802bb34 	.word	0x0802bb34
 801d15c:	2000b410 	.word	0x2000b410
 801d160:	2000b412 	.word	0x2000b412

0801d164 <_ZN8touchgfx6Screen4drawEv>:
 801d164:	4b09      	ldr	r3, [pc, #36]	; (801d18c <_ZN8touchgfx6Screen4drawEv+0x28>)
 801d166:	b507      	push	{r0, r1, r2, lr}
 801d168:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d16c:	2100      	movs	r1, #0
 801d16e:	4b08      	ldr	r3, [pc, #32]	; (801d190 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801d170:	9100      	str	r1, [sp, #0]
 801d172:	4669      	mov	r1, sp
 801d174:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d178:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d17c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d180:	6803      	ldr	r3, [r0, #0]
 801d182:	689b      	ldr	r3, [r3, #8]
 801d184:	4798      	blx	r3
 801d186:	b003      	add	sp, #12
 801d188:	f85d fb04 	ldr.w	pc, [sp], #4
 801d18c:	2000b410 	.word	0x2000b410
 801d190:	2000b412 	.word	0x2000b412

0801d194 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801d194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d198:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d19c:	b089      	sub	sp, #36	; 0x24
 801d19e:	4680      	mov	r8, r0
 801d1a0:	460c      	mov	r4, r1
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	4615      	mov	r5, r2
 801d1a6:	dd0e      	ble.n	801d1c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d1a8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d1ac:	2b00      	cmp	r3, #0
 801d1ae:	dd0a      	ble.n	801d1c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d1b0:	4628      	mov	r0, r5
 801d1b2:	f7ff ff59 	bl	801d068 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d1b6:	4621      	mov	r1, r4
 801d1b8:	f7fe ffa0 	bl	801c0fc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d1bc:	69eb      	ldr	r3, [r5, #28]
 801d1be:	b928      	cbnz	r0, 801d1cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801d1c0:	461d      	mov	r5, r3
 801d1c2:	2b00      	cmp	r3, #0
 801d1c4:	d1f4      	bne.n	801d1b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801d1c6:	b009      	add	sp, #36	; 0x24
 801d1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1cc:	ae04      	add	r6, sp, #16
 801d1ce:	2b00      	cmp	r3, #0
 801d1d0:	d051      	beq.n	801d276 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801d1d2:	682b      	ldr	r3, [r5, #0]
 801d1d4:	4629      	mov	r1, r5
 801d1d6:	a802      	add	r0, sp, #8
 801d1d8:	68db      	ldr	r3, [r3, #12]
 801d1da:	4798      	blx	r3
 801d1dc:	4628      	mov	r0, r5
 801d1de:	f7ff ff5f 	bl	801d0a0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d1e2:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801d1e6:	4407      	add	r7, r0
 801d1e8:	4628      	mov	r0, r5
 801d1ea:	f7ff ff6d 	bl	801d0c8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d1ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d1f2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d1f6:	b23f      	sxth	r7, r7
 801d1f8:	4418      	add	r0, r3
 801d1fa:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d1fe:	4621      	mov	r1, r4
 801d200:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d204:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d208:	4630      	mov	r0, r6
 801d20a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d20e:	f8ad 7010 	strh.w	r7, [sp, #16]
 801d212:	f7fa fff9 	bl	8018208 <_ZN8touchgfx4RectaNERKS0_>
 801d216:	4628      	mov	r0, r5
 801d218:	f7ff ff26 	bl	801d068 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d21c:	ab06      	add	r3, sp, #24
 801d21e:	4602      	mov	r2, r0
 801d220:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d224:	e883 0003 	stmia.w	r3, {r0, r1}
 801d228:	4611      	mov	r1, r2
 801d22a:	4618      	mov	r0, r3
 801d22c:	f7fa ffec 	bl	8018208 <_ZN8touchgfx4RectaNERKS0_>
 801d230:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d234:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d238:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801d23c:	4299      	cmp	r1, r3
 801d23e:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801d242:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801d246:	d10b      	bne.n	801d260 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801d248:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d24c:	4552      	cmp	r2, sl
 801d24e:	d107      	bne.n	801d260 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801d250:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d254:	455a      	cmp	r2, fp
 801d256:	d103      	bne.n	801d260 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801d258:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d25c:	454a      	cmp	r2, r9
 801d25e:	d00a      	beq.n	801d276 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801d260:	f1bb 0f00 	cmp.w	fp, #0
 801d264:	d002      	beq.n	801d26c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>
 801d266:	f1b9 0f00 	cmp.w	r9, #0
 801d26a:	d12e      	bne.n	801d2ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x136>
 801d26c:	69ea      	ldr	r2, [r5, #28]
 801d26e:	4621      	mov	r1, r4
 801d270:	4640      	mov	r0, r8
 801d272:	f7ff ff8f 	bl	801d194 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d276:	4628      	mov	r0, r5
 801d278:	f7ff fef6 	bl	801d068 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d27c:	6861      	ldr	r1, [r4, #4]
 801d27e:	4602      	mov	r2, r0
 801d280:	4633      	mov	r3, r6
 801d282:	6820      	ldr	r0, [r4, #0]
 801d284:	c303      	stmia	r3!, {r0, r1}
 801d286:	4611      	mov	r1, r2
 801d288:	4630      	mov	r0, r6
 801d28a:	f7fa ffbd 	bl	8018208 <_ZN8touchgfx4RectaNERKS0_>
 801d28e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801d292:	2b00      	cmp	r3, #0
 801d294:	dd97      	ble.n	801d1c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d296:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d29a:	2b00      	cmp	r3, #0
 801d29c:	dd93      	ble.n	801d1c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d29e:	4628      	mov	r0, r5
 801d2a0:	f7ff fefe 	bl	801d0a0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d2a4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d2a8:	1a18      	subs	r0, r3, r0
 801d2aa:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d2ae:	4628      	mov	r0, r5
 801d2b0:	f7ff ff0a 	bl	801d0c8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d2b4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d2b8:	4631      	mov	r1, r6
 801d2ba:	1a18      	subs	r0, r3, r0
 801d2bc:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d2c0:	4628      	mov	r0, r5
 801d2c2:	682b      	ldr	r3, [r5, #0]
 801d2c4:	689b      	ldr	r3, [r3, #8]
 801d2c6:	4798      	blx	r3
 801d2c8:	e77d      	b.n	801d1c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d2ca:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d2ce:	fa1f f08a 	uxth.w	r0, sl
 801d2d2:	4552      	cmp	r2, sl
 801d2d4:	9000      	str	r0, [sp, #0]
 801d2d6:	da12      	bge.n	801d2fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x16a>
 801d2d8:	9301      	str	r3, [sp, #4]
 801d2da:	9b00      	ldr	r3, [sp, #0]
 801d2dc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d2e0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d2e4:	1a9a      	subs	r2, r3, r2
 801d2e6:	f8ad 1010 	strh.w	r1, [sp, #16]
 801d2ea:	4631      	mov	r1, r6
 801d2ec:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d2f0:	4640      	mov	r0, r8
 801d2f2:	f8ad 2016 	strh.w	r2, [sp, #22]
 801d2f6:	69ea      	ldr	r2, [r5, #28]
 801d2f8:	f7ff ff4c 	bl	801d194 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d2fc:	9b01      	ldr	r3, [sp, #4]
 801d2fe:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d302:	b29f      	uxth	r7, r3
 801d304:	429a      	cmp	r2, r3
 801d306:	da0d      	bge.n	801d324 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x190>
 801d308:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d30c:	1aba      	subs	r2, r7, r2
 801d30e:	f8ad a012 	strh.w	sl, [sp, #18]
 801d312:	4631      	mov	r1, r6
 801d314:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d318:	4640      	mov	r0, r8
 801d31a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d31e:	69ea      	ldr	r2, [r5, #28]
 801d320:	f7ff ff38 	bl	801d194 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d324:	8822      	ldrh	r2, [r4, #0]
 801d326:	445f      	add	r7, fp
 801d328:	88a3      	ldrh	r3, [r4, #4]
 801d32a:	b2bf      	uxth	r7, r7
 801d32c:	4413      	add	r3, r2
 801d32e:	b23a      	sxth	r2, r7
 801d330:	b29b      	uxth	r3, r3
 801d332:	b219      	sxth	r1, r3
 801d334:	4291      	cmp	r1, r2
 801d336:	dd0d      	ble.n	801d354 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c0>
 801d338:	1bdb      	subs	r3, r3, r7
 801d33a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d33e:	f8ad a012 	strh.w	sl, [sp, #18]
 801d342:	4631      	mov	r1, r6
 801d344:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d348:	4640      	mov	r0, r8
 801d34a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d34e:	69ea      	ldr	r2, [r5, #28]
 801d350:	f7ff ff20 	bl	801d194 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d354:	88e2      	ldrh	r2, [r4, #6]
 801d356:	8863      	ldrh	r3, [r4, #2]
 801d358:	4413      	add	r3, r2
 801d35a:	9a00      	ldr	r2, [sp, #0]
 801d35c:	444a      	add	r2, r9
 801d35e:	b29b      	uxth	r3, r3
 801d360:	fa1f f982 	uxth.w	r9, r2
 801d364:	b219      	sxth	r1, r3
 801d366:	fa0f f289 	sxth.w	r2, r9
 801d36a:	428a      	cmp	r2, r1
 801d36c:	da83      	bge.n	801d276 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801d36e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d372:	eba3 0309 	sub.w	r3, r3, r9
 801d376:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d37a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d37e:	4631      	mov	r1, r6
 801d380:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d384:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d388:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d38c:	69ea      	ldr	r2, [r5, #28]
 801d38e:	e76f      	b.n	801d270 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xdc>

0801d390 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801d390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d392:	2300      	movs	r3, #0
 801d394:	aa02      	add	r2, sp, #8
 801d396:	4604      	mov	r4, r0
 801d398:	3004      	adds	r0, #4
 801d39a:	f842 3d04 	str.w	r3, [r2, #-4]!
 801d39e:	460d      	mov	r5, r1
 801d3a0:	f7fb f80a 	bl	80183b8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d3a4:	9a01      	ldr	r2, [sp, #4]
 801d3a6:	b11a      	cbz	r2, 801d3b0 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801d3a8:	4629      	mov	r1, r5
 801d3aa:	4620      	mov	r0, r4
 801d3ac:	f7ff fef2 	bl	801d194 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d3b0:	b003      	add	sp, #12
 801d3b2:	bd30      	pop	{r4, r5, pc}

0801d3b4 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801d3b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d3b6:	4602      	mov	r2, r0
 801d3b8:	4604      	mov	r4, r0
 801d3ba:	460d      	mov	r5, r1
 801d3bc:	466b      	mov	r3, sp
 801d3be:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801d3c2:	6851      	ldr	r1, [r2, #4]
 801d3c4:	c303      	stmia	r3!, {r0, r1}
 801d3c6:	4629      	mov	r1, r5
 801d3c8:	4668      	mov	r0, sp
 801d3ca:	f7fa ff1d 	bl	8018208 <_ZN8touchgfx4RectaNERKS0_>
 801d3ce:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801d3d2:	4669      	mov	r1, sp
 801d3d4:	b123      	cbz	r3, 801d3e0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801d3d6:	4620      	mov	r0, r4
 801d3d8:	f7ff ffda 	bl	801d390 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801d3dc:	b003      	add	sp, #12
 801d3de:	bd30      	pop	{r4, r5, pc}
 801d3e0:	1d20      	adds	r0, r4, #4
 801d3e2:	f7fa ffb0 	bl	8018346 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d3e6:	e7f9      	b.n	801d3dc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801d3e8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801d3e8:	460b      	mov	r3, r1
 801d3ea:	680a      	ldr	r2, [r1, #0]
 801d3ec:	1d01      	adds	r1, r0, #4
 801d3ee:	6952      	ldr	r2, [r2, #20]
 801d3f0:	4618      	mov	r0, r3
 801d3f2:	4710      	bx	r2

0801d3f4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801d3f4:	b510      	push	{r4, lr}
 801d3f6:	4298      	cmp	r0, r3
 801d3f8:	eb01 0402 	add.w	r4, r1, r2
 801d3fc:	b224      	sxth	r4, r4
 801d3fe:	d22c      	bcs.n	801d45a <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801d400:	b35b      	cbz	r3, 801d45a <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801d402:	ee07 0a90 	vmov	s15, r0
 801d406:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801d40a:	ee07 3a90 	vmov	s15, r3
 801d40e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801d412:	ee07 2a90 	vmov	s15, r2
 801d416:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801d41a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d41e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801d422:	ee07 1a90 	vmov	s15, r1
 801d426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d42a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801d42e:	ee67 5a07 	vmul.f32	s11, s14, s14
 801d432:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d436:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d43a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801d43e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d446:	bfcc      	ite	gt
 801d448:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801d44c:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801d450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d454:	ee17 3a90 	vmov	r3, s15
 801d458:	b21c      	sxth	r4, r3
 801d45a:	4620      	mov	r0, r4
 801d45c:	bd10      	pop	{r4, pc}

0801d45e <_ZN8touchgfx12TextProviderC1Ev>:
 801d45e:	2300      	movs	r3, #0
 801d460:	2201      	movs	r2, #1
 801d462:	b510      	push	{r4, lr}
 801d464:	4604      	mov	r4, r0
 801d466:	60c3      	str	r3, [r0, #12]
 801d468:	7403      	strb	r3, [r0, #16]
 801d46a:	82c3      	strh	r3, [r0, #22]
 801d46c:	8303      	strh	r3, [r0, #24]
 801d46e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801d470:	8603      	strh	r3, [r0, #48]	; 0x30
 801d472:	86c3      	strh	r3, [r0, #54]	; 0x36
 801d474:	8703      	strh	r3, [r0, #56]	; 0x38
 801d476:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d478:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801d47c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801d480:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801d484:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801d488:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801d48c:	e9c0 3300 	strd	r3, r3, [r0]
 801d490:	f7f7 fcf6 	bl	8014e80 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801d494:	4620      	mov	r0, r4
 801d496:	bd10      	pop	{r4, pc}

0801d498 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d498:	b530      	push	{r4, r5, lr}
 801d49a:	2500      	movs	r5, #0
 801d49c:	2401      	movs	r4, #1
 801d49e:	6843      	ldr	r3, [r0, #4]
 801d4a0:	b913      	cbnz	r3, 801d4a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801d4a2:	6803      	ldr	r3, [r0, #0]
 801d4a4:	b1f3      	cbz	r3, 801d4e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801d4a6:	6043      	str	r3, [r0, #4]
 801d4a8:	7c03      	ldrb	r3, [r0, #16]
 801d4aa:	b143      	cbz	r3, 801d4be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801d4ac:	68c3      	ldr	r3, [r0, #12]
 801d4ae:	b12b      	cbz	r3, 801d4bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d4b0:	881a      	ldrh	r2, [r3, #0]
 801d4b2:	b11a      	cbz	r2, 801d4bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d4b4:	1c9a      	adds	r2, r3, #2
 801d4b6:	60c2      	str	r2, [r0, #12]
 801d4b8:	8818      	ldrh	r0, [r3, #0]
 801d4ba:	bd30      	pop	{r4, r5, pc}
 801d4bc:	7405      	strb	r5, [r0, #16]
 801d4be:	6843      	ldr	r3, [r0, #4]
 801d4c0:	8819      	ldrh	r1, [r3, #0]
 801d4c2:	b179      	cbz	r1, 801d4e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801d4c4:	1c9a      	adds	r2, r3, #2
 801d4c6:	2902      	cmp	r1, #2
 801d4c8:	6042      	str	r2, [r0, #4]
 801d4ca:	d1f5      	bne.n	801d4b8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801d4cc:	6883      	ldr	r3, [r0, #8]
 801d4ce:	1d1a      	adds	r2, r3, #4
 801d4d0:	6082      	str	r2, [r0, #8]
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	60c3      	str	r3, [r0, #12]
 801d4d6:	2b00      	cmp	r3, #0
 801d4d8:	d0e1      	beq.n	801d49e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d4da:	881b      	ldrh	r3, [r3, #0]
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	d0de      	beq.n	801d49e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d4e0:	7404      	strb	r4, [r0, #16]
 801d4e2:	e7dc      	b.n	801d49e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d4e4:	2000      	movs	r0, #0
 801d4e6:	e7e8      	b.n	801d4ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801d4e8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801d4e8:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d4ea:	2300      	movs	r3, #0
 801d4ec:	6082      	str	r2, [r0, #8]
 801d4ee:	6001      	str	r1, [r0, #0]
 801d4f0:	6043      	str	r3, [r0, #4]
 801d4f2:	60c3      	str	r3, [r0, #12]
 801d4f4:	7403      	strb	r3, [r0, #16]
 801d4f6:	8603      	strh	r3, [r0, #48]	; 0x30
 801d4f8:	8303      	strh	r3, [r0, #24]
 801d4fa:	8703      	strh	r3, [r0, #56]	; 0x38
 801d4fc:	b410      	push	{r4}
 801d4fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d502:	f7f7 bcbd 	b.w	8014e80 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801d506 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801d506:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d508:	4605      	mov	r5, r0
 801d50a:	4608      	mov	r0, r1
 801d50c:	b1f1      	cbz	r1, 801d54c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801d50e:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801d512:	460b      	mov	r3, r1
 801d514:	f101 0708 	add.w	r7, r1, #8
 801d518:	4622      	mov	r2, r4
 801d51a:	6818      	ldr	r0, [r3, #0]
 801d51c:	3308      	adds	r3, #8
 801d51e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d522:	4626      	mov	r6, r4
 801d524:	42bb      	cmp	r3, r7
 801d526:	c603      	stmia	r6!, {r0, r1}
 801d528:	4634      	mov	r4, r6
 801d52a:	d1f6      	bne.n	801d51a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801d52c:	6818      	ldr	r0, [r3, #0]
 801d52e:	6030      	str	r0, [r6, #0]
 801d530:	4610      	mov	r0, r2
 801d532:	889b      	ldrh	r3, [r3, #4]
 801d534:	80b3      	strh	r3, [r6, #4]
 801d536:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801d53a:	015b      	lsls	r3, r3, #5
 801d53c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d540:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801d544:	430b      	orrs	r3, r1
 801d546:	425b      	negs	r3, r3
 801d548:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801d54c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d54e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801d54e:	b538      	push	{r3, r4, r5, lr}
 801d550:	460c      	mov	r4, r1
 801d552:	6811      	ldr	r1, [r2, #0]
 801d554:	4610      	mov	r0, r2
 801d556:	68cd      	ldr	r5, [r1, #12]
 801d558:	4619      	mov	r1, r3
 801d55a:	47a8      	blx	r5
 801d55c:	2800      	cmp	r0, #0
 801d55e:	bf08      	it	eq
 801d560:	4620      	moveq	r0, r4
 801d562:	bd38      	pop	{r3, r4, r5, pc}

0801d564 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801d564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d566:	4604      	mov	r4, r0
 801d568:	4615      	mov	r5, r2
 801d56a:	4608      	mov	r0, r1
 801d56c:	b93a      	cbnz	r2, 801d57e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801d56e:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801d572:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801d576:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801d57a:	4628      	mov	r0, r5
 801d57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d57e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801d582:	8893      	ldrh	r3, [r2, #4]
 801d584:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801d588:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d58c:	79ee      	ldrb	r6, [r5, #7]
 801d58e:	4316      	orrs	r6, r2
 801d590:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801d594:	189a      	adds	r2, r3, r2
 801d596:	b2b7      	uxth	r7, r6
 801d598:	b291      	uxth	r1, r2
 801d59a:	291d      	cmp	r1, #29
 801d59c:	f200 8084 	bhi.w	801d6a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801d5a0:	2201      	movs	r2, #1
 801d5a2:	10f6      	asrs	r6, r6, #3
 801d5a4:	408a      	lsls	r2, r1
 801d5a6:	4978      	ldr	r1, [pc, #480]	; (801d788 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801d5a8:	420a      	tst	r2, r1
 801d5aa:	d12e      	bne.n	801d60a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801d5ac:	f412 7f60 	tst.w	r2, #896	; 0x380
 801d5b0:	d07a      	beq.n	801d6a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801d5b2:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801d5b6:	462b      	mov	r3, r5
 801d5b8:	f105 0e08 	add.w	lr, r5, #8
 801d5bc:	4615      	mov	r5, r2
 801d5be:	6818      	ldr	r0, [r3, #0]
 801d5c0:	3308      	adds	r3, #8
 801d5c2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d5c6:	4694      	mov	ip, r2
 801d5c8:	4573      	cmp	r3, lr
 801d5ca:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d5ce:	4662      	mov	r2, ip
 801d5d0:	d1f5      	bne.n	801d5be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801d5d2:	6818      	ldr	r0, [r3, #0]
 801d5d4:	f8cc 0000 	str.w	r0, [ip]
 801d5d8:	889b      	ldrh	r3, [r3, #4]
 801d5da:	f8ac 3004 	strh.w	r3, [ip, #4]
 801d5de:	b2b3      	uxth	r3, r6
 801d5e0:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801d5e4:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 801d5e8:	1aca      	subs	r2, r1, r3
 801d5ea:	1bcf      	subs	r7, r1, r7
 801d5ec:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801d5f0:	b292      	uxth	r2, r2
 801d5f2:	1afb      	subs	r3, r7, r3
 801d5f4:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 801d5f8:	10d2      	asrs	r2, r2, #3
 801d5fa:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801d5fe:	4302      	orrs	r2, r0
 801d600:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 801d604:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801d608:	e7b7      	b.n	801d57a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d60a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801d60c:	b92b      	cbnz	r3, 801d61a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801d60e:	4b5f      	ldr	r3, [pc, #380]	; (801d78c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801d610:	21c0      	movs	r1, #192	; 0xc0
 801d612:	4a5f      	ldr	r2, [pc, #380]	; (801d790 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801d614:	485f      	ldr	r0, [pc, #380]	; (801d794 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801d616:	f00a ff35 	bl	8028484 <__assert_func>
 801d61a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801d61c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d620:	8b59      	ldrh	r1, [r3, #26]
 801d622:	f640 6333 	movw	r3, #3635	; 0xe33
 801d626:	4299      	cmp	r1, r3
 801d628:	d110      	bne.n	801d64c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801d62a:	6803      	ldr	r3, [r0, #0]
 801d62c:	68db      	ldr	r3, [r3, #12]
 801d62e:	4798      	blx	r3
 801d630:	7b41      	ldrb	r1, [r0, #13]
 801d632:	00cb      	lsls	r3, r1, #3
 801d634:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d638:	7a03      	ldrb	r3, [r0, #8]
 801d63a:	0648      	lsls	r0, r1, #25
 801d63c:	ea43 0302 	orr.w	r3, r3, r2
 801d640:	bf44      	itt	mi
 801d642:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d646:	b21b      	sxthmi	r3, r3
 801d648:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801d64c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801d650:	462a      	mov	r2, r5
 801d652:	f105 0c08 	add.w	ip, r5, #8
 801d656:	443b      	add	r3, r7
 801d658:	4433      	add	r3, r6
 801d65a:	f104 0640 	add.w	r6, r4, #64	; 0x40
 801d65e:	b29b      	uxth	r3, r3
 801d660:	4635      	mov	r5, r6
 801d662:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801d666:	6810      	ldr	r0, [r2, #0]
 801d668:	3208      	adds	r2, #8
 801d66a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801d66e:	4637      	mov	r7, r6
 801d670:	4562      	cmp	r2, ip
 801d672:	c703      	stmia	r7!, {r0, r1}
 801d674:	463e      	mov	r6, r7
 801d676:	d1f6      	bne.n	801d666 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801d678:	6810      	ldr	r0, [r2, #0]
 801d67a:	6038      	str	r0, [r7, #0]
 801d67c:	8892      	ldrh	r2, [r2, #4]
 801d67e:	80ba      	strh	r2, [r7, #4]
 801d680:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801d684:	10db      	asrs	r3, r3, #3
 801d686:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801d68a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d68e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d692:	4313      	orrs	r3, r2
 801d694:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801d698:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801d69c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801d6a0:	1a9b      	subs	r3, r3, r2
 801d6a2:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801d6a6:	e768      	b.n	801d57a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d6a8:	f023 0204 	bic.w	r2, r3, #4
 801d6ac:	f640 611b 	movw	r1, #3611	; 0xe1b
 801d6b0:	428a      	cmp	r2, r1
 801d6b2:	d003      	beq.n	801d6bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801d6b4:	f640 621d 	movw	r2, #3613	; 0xe1d
 801d6b8:	4293      	cmp	r3, r2
 801d6ba:	d120      	bne.n	801d6fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801d6bc:	3b01      	subs	r3, #1
 801d6be:	4602      	mov	r2, r0
 801d6c0:	4629      	mov	r1, r5
 801d6c2:	4620      	mov	r0, r4
 801d6c4:	b29b      	uxth	r3, r3
 801d6c6:	f7ff ff42 	bl	801d54e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d6ca:	7b41      	ldrb	r1, [r0, #13]
 801d6cc:	00cb      	lsls	r3, r1, #3
 801d6ce:	0649      	lsls	r1, r1, #25
 801d6d0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d6d4:	7a03      	ldrb	r3, [r0, #8]
 801d6d6:	ea43 0302 	orr.w	r3, r3, r2
 801d6da:	bf44      	itt	mi
 801d6dc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d6e0:	b21b      	sxthmi	r3, r3
 801d6e2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801d6e6:	7b6b      	ldrb	r3, [r5, #13]
 801d6e8:	7aaa      	ldrb	r2, [r5, #10]
 801d6ea:	005b      	lsls	r3, r3, #1
 801d6ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d6f0:	4313      	orrs	r3, r2
 801d6f2:	115a      	asrs	r2, r3, #5
 801d6f4:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d6f8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801d6fc:	e035      	b.n	801d76a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801d6fe:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801d702:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801d706:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801d70a:	7a2a      	ldrb	r2, [r5, #8]
 801d70c:	ea42 0201 	orr.w	r2, r2, r1
 801d710:	f640 6109 	movw	r1, #3593	; 0xe09
 801d714:	bf1c      	itt	ne
 801d716:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801d71a:	b212      	sxthne	r2, r2
 801d71c:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801d720:	f023 0210 	bic.w	r2, r3, #16
 801d724:	428a      	cmp	r2, r1
 801d726:	d003      	beq.n	801d730 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801d728:	f640 6213 	movw	r2, #3603	; 0xe13
 801d72c:	4293      	cmp	r3, r2
 801d72e:	d129      	bne.n	801d784 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801d730:	7b6e      	ldrb	r6, [r5, #13]
 801d732:	4629      	mov	r1, r5
 801d734:	0076      	lsls	r6, r6, #1
 801d736:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d73a:	7aae      	ldrb	r6, [r5, #10]
 801d73c:	4316      	orrs	r6, r2
 801d73e:	f640 6213 	movw	r2, #3603	; 0xe13
 801d742:	4293      	cmp	r3, r2
 801d744:	4602      	mov	r2, r0
 801d746:	4620      	mov	r0, r4
 801d748:	bf16      	itet	ne
 801d74a:	f103 33ff 	addne.w	r3, r3, #4294967295
 801d74e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801d752:	b29b      	uxthne	r3, r3
 801d754:	f7ff fefb 	bl	801d54e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d758:	7b43      	ldrb	r3, [r0, #13]
 801d75a:	7a82      	ldrb	r2, [r0, #10]
 801d75c:	005b      	lsls	r3, r3, #1
 801d75e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d762:	4313      	orrs	r3, r2
 801d764:	1af6      	subs	r6, r6, r3
 801d766:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 801d76a:	7b69      	ldrb	r1, [r5, #13]
 801d76c:	00cb      	lsls	r3, r1, #3
 801d76e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d772:	7a2b      	ldrb	r3, [r5, #8]
 801d774:	4313      	orrs	r3, r2
 801d776:	064a      	lsls	r2, r1, #25
 801d778:	bf44      	itt	mi
 801d77a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d77e:	b21b      	sxthmi	r3, r3
 801d780:	1bdb      	subs	r3, r3, r7
 801d782:	e73f      	b.n	801d604 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801d784:	2300      	movs	r3, #0
 801d786:	e7b7      	b.n	801d6f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801d788:	3fc00079 	.word	0x3fc00079
 801d78c:	0802d194 	.word	0x0802d194
 801d790:	0802d406 	.word	0x0802d406
 801d794:	0802d19d 	.word	0x0802d19d

0801d798 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d79c:	4604      	mov	r4, r0
 801d79e:	b942      	cbnz	r2, 801d7b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d7a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d7a4:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801d7a8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801d7ac:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801d7b0:	e046      	b.n	801d840 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801d7b2:	7b51      	ldrb	r1, [r2, #13]
 801d7b4:	8893      	ldrh	r3, [r2, #4]
 801d7b6:	010f      	lsls	r7, r1, #4
 801d7b8:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801d7bc:	79d7      	ldrb	r7, [r2, #7]
 801d7be:	4307      	orrs	r7, r0
 801d7c0:	2f04      	cmp	r7, #4
 801d7c2:	b2bd      	uxth	r5, r7
 801d7c4:	bfcc      	ite	gt
 801d7c6:	08bf      	lsrgt	r7, r7, #2
 801d7c8:	2701      	movle	r7, #1
 801d7ca:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801d7ce:	f200 80ab 	bhi.w	801d928 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801d7d2:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801d7d6:	4283      	cmp	r3, r0
 801d7d8:	d216      	bcs.n	801d808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d7da:	f240 605b 	movw	r0, #1627	; 0x65b
 801d7de:	4283      	cmp	r3, r0
 801d7e0:	d859      	bhi.n	801d896 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801d7e2:	f240 6057 	movw	r0, #1623	; 0x657
 801d7e6:	4283      	cmp	r3, r0
 801d7e8:	d20e      	bcs.n	801d808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d7ea:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d7ee:	d24a      	bcs.n	801d886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801d7f0:	f240 604e 	movw	r0, #1614	; 0x64e
 801d7f4:	4283      	cmp	r3, r0
 801d7f6:	d207      	bcs.n	801d808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d7f8:	f240 601a 	movw	r0, #1562	; 0x61a
 801d7fc:	4283      	cmp	r3, r0
 801d7fe:	d02a      	beq.n	801d856 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d800:	d821      	bhi.n	801d846 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801d802:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801d806:	d35b      	bcc.n	801d8c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d808:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 801d80c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d810:	f040 80d0 	bne.w	801d9b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801d814:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 801d818:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d81c:	f040 80ca 	bne.w	801d9b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801d820:	00cb      	lsls	r3, r1, #3
 801d822:	0649      	lsls	r1, r1, #25
 801d824:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d828:	7a13      	ldrb	r3, [r2, #8]
 801d82a:	ea43 0300 	orr.w	r3, r3, r0
 801d82e:	bf44      	itt	mi
 801d830:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d834:	b21b      	sxthmi	r3, r3
 801d836:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801d83a:	1b5d      	subs	r5, r3, r5
 801d83c:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801d840:	4610      	mov	r0, r2
 801d842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d846:	f240 604b 	movw	r0, #1611	; 0x64b
 801d84a:	4283      	cmp	r3, r0
 801d84c:	d338      	bcc.n	801d8c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d84e:	f240 604c 	movw	r0, #1612	; 0x64c
 801d852:	4283      	cmp	r3, r0
 801d854:	d9d8      	bls.n	801d808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d856:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 801d85a:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 801d85e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d862:	f040 80f2 	bne.w	801da4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801d866:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d86a:	f040 80ee 	bne.w	801da4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801d86e:	00cb      	lsls	r3, r1, #3
 801d870:	064e      	lsls	r6, r1, #25
 801d872:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d876:	7a13      	ldrb	r3, [r2, #8]
 801d878:	ea43 0300 	orr.w	r3, r3, r0
 801d87c:	bf44      	itt	mi
 801d87e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d882:	b21b      	sxthmi	r3, r3
 801d884:	e7d9      	b.n	801d83a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801d886:	f240 6054 	movw	r0, #1620	; 0x654
 801d88a:	4283      	cmp	r3, r0
 801d88c:	d8e3      	bhi.n	801d856 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d88e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d892:	d9e0      	bls.n	801d856 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d894:	e7b8      	b.n	801d808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d896:	f240 6074 	movw	r0, #1652	; 0x674
 801d89a:	4283      	cmp	r3, r0
 801d89c:	d0b4      	beq.n	801d808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d89e:	d82d      	bhi.n	801d8fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801d8a0:	f240 605e 	movw	r0, #1630	; 0x65e
 801d8a4:	4283      	cmp	r3, r0
 801d8a6:	d804      	bhi.n	801d8b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801d8a8:	f240 605d 	movw	r0, #1629	; 0x65d
 801d8ac:	4283      	cmp	r3, r0
 801d8ae:	d3d2      	bcc.n	801d856 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d8b0:	e7aa      	b.n	801d808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d8b2:	f240 605f 	movw	r0, #1631	; 0x65f
 801d8b6:	4283      	cmp	r3, r0
 801d8b8:	d0cd      	beq.n	801d856 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d8ba:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801d8be:	d0a3      	beq.n	801d808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d8c0:	00cb      	lsls	r3, r1, #3
 801d8c2:	0649      	lsls	r1, r1, #25
 801d8c4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d8c8:	7a13      	ldrb	r3, [r2, #8]
 801d8ca:	ea43 0300 	orr.w	r3, r3, r0
 801d8ce:	bf44      	itt	mi
 801d8d0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d8d4:	b21b      	sxthmi	r3, r3
 801d8d6:	1b5d      	subs	r5, r3, r5
 801d8d8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801d8dc:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801d8e0:	7b53      	ldrb	r3, [r2, #13]
 801d8e2:	015b      	lsls	r3, r3, #5
 801d8e4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d8e8:	7993      	ldrb	r3, [r2, #6]
 801d8ea:	430b      	orrs	r3, r1
 801d8ec:	2105      	movs	r1, #5
 801d8ee:	005b      	lsls	r3, r3, #1
 801d8f0:	fb93 f3f1 	sdiv	r3, r3, r1
 801d8f4:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801d8f8:	440b      	add	r3, r1
 801d8fa:	e757      	b.n	801d7ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801d8fc:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801d900:	4283      	cmp	r3, r0
 801d902:	d809      	bhi.n	801d918 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801d904:	f240 60df 	movw	r0, #1759	; 0x6df
 801d908:	4283      	cmp	r3, r0
 801d90a:	f4bf af7d 	bcs.w	801d808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d90e:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801d912:	2b05      	cmp	r3, #5
 801d914:	d8d4      	bhi.n	801d8c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d916:	e777      	b.n	801d808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d918:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801d91c:	4283      	cmp	r3, r0
 801d91e:	d09a      	beq.n	801d856 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d920:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801d924:	4283      	cmp	r3, r0
 801d926:	e7ca      	b.n	801d8be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801d928:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801d92c:	d22b      	bcs.n	801d986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801d92e:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801d932:	4283      	cmp	r3, r0
 801d934:	d28f      	bcs.n	801d856 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d936:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d93a:	4283      	cmp	r3, r0
 801d93c:	d816      	bhi.n	801d96c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801d93e:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801d942:	4283      	cmp	r3, r0
 801d944:	f4bf af60 	bcs.w	801d808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d948:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801d94c:	4283      	cmp	r3, r0
 801d94e:	d80a      	bhi.n	801d966 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801d950:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801d954:	4283      	cmp	r3, r0
 801d956:	f4bf af57 	bcs.w	801d808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d95a:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801d95e:	4283      	cmp	r3, r0
 801d960:	f43f af79 	beq.w	801d856 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d964:	e7ac      	b.n	801d8c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d966:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801d96a:	e7f8      	b.n	801d95e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801d96c:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801d970:	4283      	cmp	r3, r0
 801d972:	d802      	bhi.n	801d97a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801d974:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801d978:	e798      	b.n	801d8ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801d97a:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801d97e:	4283      	cmp	r3, r0
 801d980:	f47f af42 	bne.w	801d808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d984:	e767      	b.n	801d856 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d986:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801d98a:	4283      	cmp	r3, r0
 801d98c:	f43f af63 	beq.w	801d856 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d990:	d802      	bhi.n	801d998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801d992:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801d996:	e7f2      	b.n	801d97e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801d998:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801d99c:	4283      	cmp	r3, r0
 801d99e:	d805      	bhi.n	801d9ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801d9a0:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801d9a4:	4283      	cmp	r3, r0
 801d9a6:	f4ff af2f 	bcc.w	801d808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d9aa:	e754      	b.n	801d856 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d9ac:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801d9b0:	4283      	cmp	r3, r0
 801d9b2:	e7af      	b.n	801d914 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801d9b4:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801d9b8:	4617      	mov	r7, r2
 801d9ba:	f102 0808 	add.w	r8, r2, #8
 801d9be:	4666      	mov	r6, ip
 801d9c0:	6838      	ldr	r0, [r7, #0]
 801d9c2:	3708      	adds	r7, #8
 801d9c4:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d9c8:	46e6      	mov	lr, ip
 801d9ca:	4547      	cmp	r7, r8
 801d9cc:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d9d0:	46f4      	mov	ip, lr
 801d9d2:	d1f5      	bne.n	801d9c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801d9d4:	6838      	ldr	r0, [r7, #0]
 801d9d6:	f8ce 0000 	str.w	r0, [lr]
 801d9da:	88b9      	ldrh	r1, [r7, #4]
 801d9dc:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d9e0:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801d9e4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d9e8:	d009      	beq.n	801d9fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801d9ea:	7b51      	ldrb	r1, [r2, #13]
 801d9ec:	7992      	ldrb	r2, [r2, #6]
 801d9ee:	0149      	lsls	r1, r1, #5
 801d9f0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d9f4:	4311      	orrs	r1, r2
 801d9f6:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d9fa:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801d9fe:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801da02:	d00d      	beq.n	801da20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801da04:	442b      	add	r3, r5
 801da06:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801da0a:	b29b      	uxth	r3, r3
 801da0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801da10:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801da14:	10db      	asrs	r3, r3, #3
 801da16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801da1a:	4313      	orrs	r3, r2
 801da1c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801da20:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801da24:	00cb      	lsls	r3, r1, #3
 801da26:	064f      	lsls	r7, r1, #25
 801da28:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801da2c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801da30:	ea43 0302 	orr.w	r3, r3, r2
 801da34:	bf44      	itt	mi
 801da36:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801da3a:	b21b      	sxthmi	r3, r3
 801da3c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801da40:	1b5d      	subs	r5, r3, r5
 801da42:	4632      	mov	r2, r6
 801da44:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801da48:	e6fa      	b.n	801d840 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801da4a:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 801da4e:	4694      	mov	ip, r2
 801da50:	f102 0908 	add.w	r9, r2, #8
 801da54:	4676      	mov	r6, lr
 801da56:	f8dc 0000 	ldr.w	r0, [ip]
 801da5a:	f10c 0c08 	add.w	ip, ip, #8
 801da5e:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801da62:	46f0      	mov	r8, lr
 801da64:	45cc      	cmp	ip, r9
 801da66:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801da6a:	46c6      	mov	lr, r8
 801da6c:	d1f3      	bne.n	801da56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801da6e:	f8dc 0000 	ldr.w	r0, [ip]
 801da72:	f8c8 0000 	str.w	r0, [r8]
 801da76:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801da7a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801da7e:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801da82:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801da86:	d009      	beq.n	801da9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801da88:	7b51      	ldrb	r1, [r2, #13]
 801da8a:	7992      	ldrb	r2, [r2, #6]
 801da8c:	0149      	lsls	r1, r1, #5
 801da8e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801da92:	4311      	orrs	r1, r2
 801da94:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801da98:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801da9c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801daa0:	d00d      	beq.n	801dabe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801daa2:	1bdb      	subs	r3, r3, r7
 801daa4:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801daa8:	b29b      	uxth	r3, r3
 801daaa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801daae:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801dab2:	10db      	asrs	r3, r3, #3
 801dab4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801dab8:	4313      	orrs	r3, r2
 801daba:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801dabe:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801dac2:	00cb      	lsls	r3, r1, #3
 801dac4:	0648      	lsls	r0, r1, #25
 801dac6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801daca:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801dace:	ea43 0302 	orr.w	r3, r3, r2
 801dad2:	bf44      	itt	mi
 801dad4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dad8:	b21b      	sxthmi	r3, r3
 801dada:	e7b1      	b.n	801da40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801dadc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801dadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dae0:	461d      	mov	r5, r3
 801dae2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801dae4:	4604      	mov	r4, r0
 801dae6:	4617      	mov	r7, r2
 801dae8:	b92b      	cbnz	r3, 801daf6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801daea:	4b23      	ldr	r3, [pc, #140]	; (801db78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x9c>)
 801daec:	21c0      	movs	r1, #192	; 0xc0
 801daee:	4a23      	ldr	r2, [pc, #140]	; (801db7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa0>)
 801daf0:	4823      	ldr	r0, [pc, #140]	; (801db80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801daf2:	f00a fcc7 	bl	8028484 <__assert_func>
 801daf6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801daf8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dafc:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801db00:	f7f7 f91a 	bl	8014d38 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801db04:	683b      	ldr	r3, [r7, #0]
 801db06:	4601      	mov	r1, r0
 801db08:	4606      	mov	r6, r0
 801db0a:	4638      	mov	r0, r7
 801db0c:	68db      	ldr	r3, [r3, #12]
 801db0e:	4798      	blx	r3
 801db10:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801db14:	4602      	mov	r2, r0
 801db16:	6028      	str	r0, [r5, #0]
 801db18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801db1c:	d215      	bcs.n	801db4a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801db1e:	4643      	mov	r3, r8
 801db20:	4639      	mov	r1, r7
 801db22:	4620      	mov	r0, r4
 801db24:	f7ff fe38 	bl	801d798 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801db28:	6028      	str	r0, [r5, #0]
 801db2a:	682b      	ldr	r3, [r5, #0]
 801db2c:	b143      	cbz	r3, 801db40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801db2e:	7b5a      	ldrb	r2, [r3, #13]
 801db30:	7a9b      	ldrb	r3, [r3, #10]
 801db32:	0052      	lsls	r2, r2, #1
 801db34:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801db38:	4313      	orrs	r3, r2
 801db3a:	bf0c      	ite	eq
 801db3c:	2301      	moveq	r3, #1
 801db3e:	2300      	movne	r3, #0
 801db40:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801db44:	4630      	mov	r0, r6
 801db46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db4a:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 801db4e:	b29b      	uxth	r3, r3
 801db50:	2b7f      	cmp	r3, #127	; 0x7f
 801db52:	d804      	bhi.n	801db5e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x82>
 801db54:	4639      	mov	r1, r7
 801db56:	4620      	mov	r0, r4
 801db58:	f7ff fd04 	bl	801d564 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801db5c:	e7e4      	b.n	801db28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801db5e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801db62:	2b00      	cmp	r3, #0
 801db64:	d0e1      	beq.n	801db2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801db66:	f640 1302 	movw	r3, #2306	; 0x902
 801db6a:	429e      	cmp	r6, r3
 801db6c:	d1dd      	bne.n	801db2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801db6e:	4601      	mov	r1, r0
 801db70:	4620      	mov	r0, r4
 801db72:	f7ff fcc8 	bl	801d506 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801db76:	e7d7      	b.n	801db28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801db78:	0802d194 	.word	0x0802d194
 801db7c:	0802d406 	.word	0x0802d406
 801db80:	0802d19d 	.word	0x0802d19d

0801db84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801db84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801db88:	461d      	mov	r5, r3
 801db8a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801db8c:	4604      	mov	r4, r0
 801db8e:	4617      	mov	r7, r2
 801db90:	b92b      	cbnz	r3, 801db9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801db92:	4b25      	ldr	r3, [pc, #148]	; (801dc28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa4>)
 801db94:	21c0      	movs	r1, #192	; 0xc0
 801db96:	4a25      	ldr	r2, [pc, #148]	; (801dc2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801db98:	4825      	ldr	r0, [pc, #148]	; (801dc30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801db9a:	f00a fc73 	bl	8028484 <__assert_func>
 801db9e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801dba0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dba4:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801dba8:	f7f7 f8c6 	bl	8014d38 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dbac:	683b      	ldr	r3, [r7, #0]
 801dbae:	4601      	mov	r1, r0
 801dbb0:	4606      	mov	r6, r0
 801dbb2:	4638      	mov	r0, r7
 801dbb4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801dbb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801dbbc:	47c8      	blx	r9
 801dbbe:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801dbc2:	4602      	mov	r2, r0
 801dbc4:	6028      	str	r0, [r5, #0]
 801dbc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801dbca:	d215      	bcs.n	801dbf8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801dbcc:	4643      	mov	r3, r8
 801dbce:	4639      	mov	r1, r7
 801dbd0:	4620      	mov	r0, r4
 801dbd2:	f7ff fde1 	bl	801d798 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801dbd6:	6028      	str	r0, [r5, #0]
 801dbd8:	682b      	ldr	r3, [r5, #0]
 801dbda:	b143      	cbz	r3, 801dbee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801dbdc:	7b5a      	ldrb	r2, [r3, #13]
 801dbde:	7a9b      	ldrb	r3, [r3, #10]
 801dbe0:	0052      	lsls	r2, r2, #1
 801dbe2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801dbe6:	4313      	orrs	r3, r2
 801dbe8:	bf0c      	ite	eq
 801dbea:	2301      	moveq	r3, #1
 801dbec:	2300      	movne	r3, #0
 801dbee:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801dbf2:	4630      	mov	r0, r6
 801dbf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dbf8:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 801dbfc:	b29b      	uxth	r3, r3
 801dbfe:	2b7f      	cmp	r3, #127	; 0x7f
 801dc00:	d804      	bhi.n	801dc0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x88>
 801dc02:	4639      	mov	r1, r7
 801dc04:	4620      	mov	r0, r4
 801dc06:	f7ff fcad 	bl	801d564 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801dc0a:	e7e4      	b.n	801dbd6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 801dc0c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	d0e1      	beq.n	801dbd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801dc14:	f640 1302 	movw	r3, #2306	; 0x902
 801dc18:	429e      	cmp	r6, r3
 801dc1a:	d1dd      	bne.n	801dbd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801dc1c:	4601      	mov	r1, r0
 801dc1e:	4620      	mov	r0, r4
 801dc20:	f7ff fc71 	bl	801d506 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801dc24:	e7d7      	b.n	801dbd6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 801dc26:	bf00      	nop
 801dc28:	0802d194 	.word	0x0802d194
 801dc2c:	0802d406 	.word	0x0802d406
 801dc30:	0802d19d 	.word	0x0802d19d

0801dc34 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801dc34:	b510      	push	{r4, lr}
 801dc36:	4604      	mov	r4, r0
 801dc38:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801dc3a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801dc3c:	b9d9      	cbnz	r1, 801dc76 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801dc3e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801dc40:	2b0a      	cmp	r3, #10
 801dc42:	d036      	beq.n	801dcb2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801dc44:	4620      	mov	r0, r4
 801dc46:	f7ff fc27 	bl	801d498 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801dc4a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801dc4c:	2b09      	cmp	r3, #9
 801dc4e:	d906      	bls.n	801dc5e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801dc50:	4b18      	ldr	r3, [pc, #96]	; (801dcb4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801dc52:	f44f 7182 	mov.w	r1, #260	; 0x104
 801dc56:	4a18      	ldr	r2, [pc, #96]	; (801dcb8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801dc58:	4818      	ldr	r0, [pc, #96]	; (801dcbc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801dc5a:	f00a fc13 	bl	8028484 <__assert_func>
 801dc5e:	1c5a      	adds	r2, r3, #1
 801dc60:	8622      	strh	r2, [r4, #48]	; 0x30
 801dc62:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801dc64:	4413      	add	r3, r2
 801dc66:	b29b      	uxth	r3, r3
 801dc68:	2b09      	cmp	r3, #9
 801dc6a:	bf88      	it	hi
 801dc6c:	3b0a      	subhi	r3, #10
 801dc6e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dc72:	8358      	strh	r0, [r3, #26]
 801dc74:	e7e3      	b.n	801dc3e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801dc76:	2b0a      	cmp	r3, #10
 801dc78:	d01b      	beq.n	801dcb2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801dc7a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801dc7c:	3901      	subs	r1, #1
 801dc7e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801dc82:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801dc84:	8721      	strh	r1, [r4, #56]	; 0x38
 801dc86:	1c51      	adds	r1, r2, #1
 801dc88:	b289      	uxth	r1, r1
 801dc8a:	2901      	cmp	r1, #1
 801dc8c:	bf8a      	itet	hi
 801dc8e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801dc92:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801dc94:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801dc96:	2b09      	cmp	r3, #9
 801dc98:	d8da      	bhi.n	801dc50 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801dc9a:	1c5a      	adds	r2, r3, #1
 801dc9c:	8622      	strh	r2, [r4, #48]	; 0x30
 801dc9e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801dca0:	4413      	add	r3, r2
 801dca2:	b29b      	uxth	r3, r3
 801dca4:	2b09      	cmp	r3, #9
 801dca6:	bf88      	it	hi
 801dca8:	3b0a      	subhi	r3, #10
 801dcaa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dcae:	8358      	strh	r0, [r3, #26]
 801dcb0:	e7c2      	b.n	801dc38 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801dcb2:	bd10      	pop	{r4, pc}
 801dcb4:	0802d1c9 	.word	0x0802d1c9
 801dcb8:	0802d55c 	.word	0x0802d55c
 801dcbc:	0802d19d 	.word	0x0802d19d

0801dcc0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801dcc0:	b538      	push	{r3, r4, r5, lr}
 801dcc2:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801dcc4:	4604      	mov	r4, r0
 801dcc6:	b92a      	cbnz	r2, 801dcd4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801dcc8:	4b13      	ldr	r3, [pc, #76]	; (801dd18 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801dcca:	21d5      	movs	r1, #213	; 0xd5
 801dccc:	4a13      	ldr	r2, [pc, #76]	; (801dd1c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801dcce:	4814      	ldr	r0, [pc, #80]	; (801dd20 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801dcd0:	f00a fbd8 	bl	8028484 <__assert_func>
 801dcd4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801dcd6:	3a01      	subs	r2, #1
 801dcd8:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801dcdc:	8b4d      	ldrh	r5, [r1, #26]
 801dcde:	8602      	strh	r2, [r0, #48]	; 0x30
 801dce0:	1c5a      	adds	r2, r3, #1
 801dce2:	b292      	uxth	r2, r2
 801dce4:	2a09      	cmp	r2, #9
 801dce6:	bf8a      	itet	hi
 801dce8:	3b09      	subhi	r3, #9
 801dcea:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801dcec:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801dcee:	f7ff ffa1 	bl	801dc34 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801dcf2:	8b23      	ldrh	r3, [r4, #24]
 801dcf4:	2b01      	cmp	r3, #1
 801dcf6:	bf9c      	itt	ls
 801dcf8:	3301      	addls	r3, #1
 801dcfa:	8323      	strhls	r3, [r4, #24]
 801dcfc:	8ae3      	ldrh	r3, [r4, #22]
 801dcfe:	b90b      	cbnz	r3, 801dd04 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801dd00:	2302      	movs	r3, #2
 801dd02:	82e3      	strh	r3, [r4, #22]
 801dd04:	8ae3      	ldrh	r3, [r4, #22]
 801dd06:	4628      	mov	r0, r5
 801dd08:	3b01      	subs	r3, #1
 801dd0a:	b29b      	uxth	r3, r3
 801dd0c:	82e3      	strh	r3, [r4, #22]
 801dd0e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dd12:	8265      	strh	r5, [r4, #18]
 801dd14:	bd38      	pop	{r3, r4, r5, pc}
 801dd16:	bf00      	nop
 801dd18:	0802d194 	.word	0x0802d194
 801dd1c:	0802d4b1 	.word	0x0802d4b1
 801dd20:	0802d19d 	.word	0x0802d19d

0801dd24 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801dd24:	428a      	cmp	r2, r1
 801dd26:	b538      	push	{r3, r4, r5, lr}
 801dd28:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801dd2a:	d90c      	bls.n	801dd46 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801dd2c:	b92c      	cbnz	r4, 801dd3a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801dd2e:	4b1c      	ldr	r3, [pc, #112]	; (801dda0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801dd30:	21e1      	movs	r1, #225	; 0xe1
 801dd32:	4a1c      	ldr	r2, [pc, #112]	; (801dda4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801dd34:	481c      	ldr	r0, [pc, #112]	; (801dda8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801dd36:	f00a fba5 	bl	8028484 <__assert_func>
 801dd3a:	3c01      	subs	r4, #1
 801dd3c:	4b1b      	ldr	r3, [pc, #108]	; (801ddac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801dd3e:	4a1c      	ldr	r2, [pc, #112]	; (801ddb0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801dd40:	21c5      	movs	r1, #197	; 0xc5
 801dd42:	8604      	strh	r4, [r0, #48]	; 0x30
 801dd44:	e7f6      	b.n	801dd34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801dd46:	428c      	cmp	r4, r1
 801dd48:	d203      	bcs.n	801dd52 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801dd4a:	4b1a      	ldr	r3, [pc, #104]	; (801ddb4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801dd4c:	21cb      	movs	r1, #203	; 0xcb
 801dd4e:	4a1a      	ldr	r2, [pc, #104]	; (801ddb8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801dd50:	e7f0      	b.n	801dd34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801dd52:	1a64      	subs	r4, r4, r1
 801dd54:	250a      	movs	r5, #10
 801dd56:	8604      	strh	r4, [r0, #48]	; 0x30
 801dd58:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801dd5a:	4421      	add	r1, r4
 801dd5c:	b289      	uxth	r1, r1
 801dd5e:	2909      	cmp	r1, #9
 801dd60:	bf88      	it	hi
 801dd62:	390a      	subhi	r1, #10
 801dd64:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801dd66:	b1ba      	cbz	r2, 801dd98 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801dd68:	3a01      	subs	r2, #1
 801dd6a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801dd6c:	b292      	uxth	r2, r2
 801dd6e:	2909      	cmp	r1, #9
 801dd70:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801dd74:	d903      	bls.n	801dd7e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801dd76:	4b11      	ldr	r3, [pc, #68]	; (801ddbc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801dd78:	21e6      	movs	r1, #230	; 0xe6
 801dd7a:	4a11      	ldr	r2, [pc, #68]	; (801ddc0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801dd7c:	e7da      	b.n	801dd34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801dd7e:	3101      	adds	r1, #1
 801dd80:	8601      	strh	r1, [r0, #48]	; 0x30
 801dd82:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801dd84:	b901      	cbnz	r1, 801dd88 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801dd86:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801dd88:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801dd8a:	3901      	subs	r1, #1
 801dd8c:	b289      	uxth	r1, r1
 801dd8e:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801dd90:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801dd94:	834c      	strh	r4, [r1, #26]
 801dd96:	e7e6      	b.n	801dd66 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801dd98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dd9c:	f7ff bf4a 	b.w	801dc34 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801dda0:	0802d194 	.word	0x0802d194
 801dda4:	0802d28a 	.word	0x0802d28a
 801dda8:	0802d19d 	.word	0x0802d19d
 801ddac:	0802d1d5 	.word	0x0802d1d5
 801ddb0:	0802d334 	.word	0x0802d334
 801ddb4:	0802d1e3 	.word	0x0802d1e3
 801ddb8:	0802d60b 	.word	0x0802d60b
 801ddbc:	0802d1ef 	.word	0x0802d1ef
 801ddc0:	0802d202 	.word	0x0802d202

0801ddc4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801ddc4:	3a01      	subs	r2, #1
 801ddc6:	b570      	push	{r4, r5, r6, lr}
 801ddc8:	b292      	uxth	r2, r2
 801ddca:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801ddce:	42b2      	cmp	r2, r6
 801ddd0:	d019      	beq.n	801de06 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801ddd2:	8b04      	ldrh	r4, [r0, #24]
 801ddd4:	f831 5b02 	ldrh.w	r5, [r1], #2
 801ddd8:	4294      	cmp	r4, r2
 801ddda:	d805      	bhi.n	801dde8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801dddc:	4b19      	ldr	r3, [pc, #100]	; (801de44 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801ddde:	4a1a      	ldr	r2, [pc, #104]	; (801de48 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801dde0:	21c5      	movs	r1, #197	; 0xc5
 801dde2:	481a      	ldr	r0, [pc, #104]	; (801de4c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801dde4:	f00a fb4e 	bl	8028484 <__assert_func>
 801dde8:	8ac4      	ldrh	r4, [r0, #22]
 801ddea:	4414      	add	r4, r2
 801ddec:	3a01      	subs	r2, #1
 801ddee:	b2a4      	uxth	r4, r4
 801ddf0:	b292      	uxth	r2, r2
 801ddf2:	2c01      	cmp	r4, #1
 801ddf4:	bf88      	it	hi
 801ddf6:	3c02      	subhi	r4, #2
 801ddf8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ddfc:	8a64      	ldrh	r4, [r4, #18]
 801ddfe:	42ac      	cmp	r4, r5
 801de00:	d0e5      	beq.n	801ddce <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801de02:	2000      	movs	r0, #0
 801de04:	bd70      	pop	{r4, r5, r6, pc}
 801de06:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801de0a:	2400      	movs	r4, #0
 801de0c:	4413      	add	r3, r2
 801de0e:	b2a2      	uxth	r2, r4
 801de10:	429a      	cmp	r2, r3
 801de12:	da14      	bge.n	801de3e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801de14:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801de16:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801de1a:	4296      	cmp	r6, r2
 801de1c:	d802      	bhi.n	801de24 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801de1e:	4b09      	ldr	r3, [pc, #36]	; (801de44 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801de20:	4a0b      	ldr	r2, [pc, #44]	; (801de50 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801de22:	e7dd      	b.n	801dde0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801de24:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801de26:	3401      	adds	r4, #1
 801de28:	4432      	add	r2, r6
 801de2a:	b292      	uxth	r2, r2
 801de2c:	2a09      	cmp	r2, #9
 801de2e:	bf88      	it	hi
 801de30:	3a0a      	subhi	r2, #10
 801de32:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801de36:	8b52      	ldrh	r2, [r2, #26]
 801de38:	42aa      	cmp	r2, r5
 801de3a:	d0e8      	beq.n	801de0e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801de3c:	e7e1      	b.n	801de02 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801de3e:	2001      	movs	r0, #1
 801de40:	e7e0      	b.n	801de04 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801de42:	bf00      	nop
 801de44:	0802d1d5 	.word	0x0802d1d5
 801de48:	0802d68f 	.word	0x0802d68f
 801de4c:	0802d19d 	.word	0x0802d19d
 801de50:	0802d334 	.word	0x0802d334

0801de54 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801de54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de58:	4605      	mov	r5, r0
 801de5a:	4616      	mov	r6, r2
 801de5c:	1c8c      	adds	r4, r1, #2
 801de5e:	8809      	ldrh	r1, [r1, #0]
 801de60:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801de64:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801de68:	42b3      	cmp	r3, r6
 801de6a:	d124      	bne.n	801deb6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801de6c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801de70:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801de74:	f001 070f 	and.w	r7, r1, #15
 801de78:	4652      	mov	r2, sl
 801de7a:	f8cd 8000 	str.w	r8, [sp]
 801de7e:	464b      	mov	r3, r9
 801de80:	4621      	mov	r1, r4
 801de82:	4628      	mov	r0, r5
 801de84:	f7ff ff9e 	bl	801ddc4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801de88:	4683      	mov	fp, r0
 801de8a:	b168      	cbz	r0, 801dea8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801de8c:	eb0a 0109 	add.w	r1, sl, r9
 801de90:	463a      	mov	r2, r7
 801de92:	4628      	mov	r0, r5
 801de94:	4441      	add	r1, r8
 801de96:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801de9a:	4649      	mov	r1, r9
 801de9c:	f7ff ff42 	bl	801dd24 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801dea0:	4658      	mov	r0, fp
 801dea2:	b003      	add	sp, #12
 801dea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dea8:	eb07 010a 	add.w	r1, r7, sl
 801deac:	4449      	add	r1, r9
 801deae:	4441      	add	r1, r8
 801deb0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801deb4:	e7d2      	b.n	801de5c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801deb6:	f04f 0b00 	mov.w	fp, #0
 801deba:	e7f1      	b.n	801dea0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801debc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801debc:	b570      	push	{r4, r5, r6, lr}
 801debe:	8810      	ldrh	r0, [r2, #0]
 801dec0:	4298      	cmp	r0, r3
 801dec2:	d817      	bhi.n	801def4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801dec4:	1e48      	subs	r0, r1, #1
 801dec6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801deca:	4298      	cmp	r0, r3
 801decc:	d312      	bcc.n	801def4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801dece:	2400      	movs	r4, #0
 801ded0:	428c      	cmp	r4, r1
 801ded2:	d20f      	bcs.n	801def4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ded4:	1860      	adds	r0, r4, r1
 801ded6:	1040      	asrs	r0, r0, #1
 801ded8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801dedc:	0085      	lsls	r5, r0, #2
 801dede:	42b3      	cmp	r3, r6
 801dee0:	d902      	bls.n	801dee8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801dee2:	3001      	adds	r0, #1
 801dee4:	b284      	uxth	r4, r0
 801dee6:	e7f3      	b.n	801ded0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801dee8:	d201      	bcs.n	801deee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801deea:	b281      	uxth	r1, r0
 801deec:	e7f0      	b.n	801ded0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801deee:	442a      	add	r2, r5
 801def0:	8850      	ldrh	r0, [r2, #2]
 801def2:	bd70      	pop	{r4, r5, r6, pc}
 801def4:	2000      	movs	r0, #0
 801def6:	e7fc      	b.n	801def2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801def8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801def8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801defc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801defe:	4604      	mov	r4, r0
 801df00:	260b      	movs	r6, #11
 801df02:	886f      	ldrh	r7, [r5, #2]
 801df04:	087f      	lsrs	r7, r7, #1
 801df06:	3e01      	subs	r6, #1
 801df08:	d01b      	beq.n	801df42 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801df0a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801df0c:	b92b      	cbnz	r3, 801df1a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801df0e:	4b0e      	ldr	r3, [pc, #56]	; (801df48 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801df10:	21c0      	movs	r1, #192	; 0xc0
 801df12:	4a0e      	ldr	r2, [pc, #56]	; (801df4c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801df14:	480e      	ldr	r0, [pc, #56]	; (801df50 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801df16:	f00a fab5 	bl	8028484 <__assert_func>
 801df1a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801df1c:	462a      	mov	r2, r5
 801df1e:	4639      	mov	r1, r7
 801df20:	4620      	mov	r0, r4
 801df22:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801df26:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801df2a:	4643      	mov	r3, r8
 801df2c:	f7ff ffc6 	bl	801debc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801df30:	b138      	cbz	r0, 801df42 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801df32:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801df36:	4642      	mov	r2, r8
 801df38:	4620      	mov	r0, r4
 801df3a:	f7ff ff8b 	bl	801de54 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801df3e:	2800      	cmp	r0, #0
 801df40:	d1e1      	bne.n	801df06 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801df42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df46:	bf00      	nop
 801df48:	0802d194 	.word	0x0802d194
 801df4c:	0802d406 	.word	0x0802d406
 801df50:	0802d19d 	.word	0x0802d19d

0801df54 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801df54:	4602      	mov	r2, r0
 801df56:	b148      	cbz	r0, 801df6c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801df58:	2300      	movs	r3, #0
 801df5a:	b298      	uxth	r0, r3
 801df5c:	3301      	adds	r3, #1
 801df5e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801df62:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801df66:	2900      	cmp	r1, #0
 801df68:	d1f7      	bne.n	801df5a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801df6a:	4770      	bx	lr
 801df6c:	4770      	bx	lr

0801df6e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801df6e:	b530      	push	{r4, r5, lr}
 801df70:	4604      	mov	r4, r0
 801df72:	b159      	cbz	r1, 801df8c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801df74:	b148      	cbz	r0, 801df8a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801df76:	2300      	movs	r3, #0
 801df78:	b298      	uxth	r0, r3
 801df7a:	4282      	cmp	r2, r0
 801df7c:	d905      	bls.n	801df8a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801df7e:	5ccd      	ldrb	r5, [r1, r3]
 801df80:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801df84:	3301      	adds	r3, #1
 801df86:	2d00      	cmp	r5, #0
 801df88:	d1f6      	bne.n	801df78 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801df8a:	bd30      	pop	{r4, r5, pc}
 801df8c:	4608      	mov	r0, r1
 801df8e:	e7fc      	b.n	801df8a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801df90 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801df90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df92:	468c      	mov	ip, r1
 801df94:	b08b      	sub	sp, #44	; 0x2c
 801df96:	2100      	movs	r1, #0
 801df98:	ae01      	add	r6, sp, #4
 801df9a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801df9e:	211f      	movs	r1, #31
 801dfa0:	fbb0 f7f3 	udiv	r7, r0, r3
 801dfa4:	fb03 0517 	mls	r5, r3, r7, r0
 801dfa8:	4638      	mov	r0, r7
 801dfaa:	b2ec      	uxtb	r4, r5
 801dfac:	2d09      	cmp	r5, #9
 801dfae:	bfd4      	ite	le
 801dfb0:	3430      	addle	r4, #48	; 0x30
 801dfb2:	3457      	addgt	r4, #87	; 0x57
 801dfb4:	b2e4      	uxtb	r4, r4
 801dfb6:	558c      	strb	r4, [r1, r6]
 801dfb8:	1e4c      	subs	r4, r1, #1
 801dfba:	b92f      	cbnz	r7, 801dfc8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801dfbc:	4431      	add	r1, r6
 801dfbe:	4660      	mov	r0, ip
 801dfc0:	f7ff ffd5 	bl	801df6e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801dfc4:	b00b      	add	sp, #44	; 0x2c
 801dfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dfc8:	4621      	mov	r1, r4
 801dfca:	e7e9      	b.n	801dfa0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801dfcc <_ZN8touchgfx7Unicode4itoaElPtti>:
 801dfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfce:	4607      	mov	r7, r0
 801dfd0:	b08b      	sub	sp, #44	; 0x2c
 801dfd2:	4608      	mov	r0, r1
 801dfd4:	b341      	cbz	r1, 801e028 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801dfd6:	1e99      	subs	r1, r3, #2
 801dfd8:	290e      	cmp	r1, #14
 801dfda:	d825      	bhi.n	801e028 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801dfdc:	2100      	movs	r1, #0
 801dfde:	463c      	mov	r4, r7
 801dfe0:	261f      	movs	r6, #31
 801dfe2:	f10d 0c04 	add.w	ip, sp, #4
 801dfe6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801dfea:	1e71      	subs	r1, r6, #1
 801dfec:	fb94 fef3 	sdiv	lr, r4, r3
 801dff0:	fb03 441e 	mls	r4, r3, lr, r4
 801dff4:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801dff8:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801dffc:	b2ec      	uxtb	r4, r5
 801dffe:	2d09      	cmp	r5, #9
 801e000:	bfd4      	ite	le
 801e002:	3430      	addle	r4, #48	; 0x30
 801e004:	3457      	addgt	r4, #87	; 0x57
 801e006:	b2e4      	uxtb	r4, r4
 801e008:	f80c 4006 	strb.w	r4, [ip, r6]
 801e00c:	4674      	mov	r4, lr
 801e00e:	b96c      	cbnz	r4, 801e02c <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801e010:	2f00      	cmp	r7, #0
 801e012:	da05      	bge.n	801e020 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801e014:	ab0a      	add	r3, sp, #40	; 0x28
 801e016:	4419      	add	r1, r3
 801e018:	232d      	movs	r3, #45	; 0x2d
 801e01a:	f801 3c24 	strb.w	r3, [r1, #-36]
 801e01e:	1eb1      	subs	r1, r6, #2
 801e020:	3101      	adds	r1, #1
 801e022:	4461      	add	r1, ip
 801e024:	f7ff ffa3 	bl	801df6e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e028:	b00b      	add	sp, #44	; 0x2c
 801e02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e02c:	460e      	mov	r6, r1
 801e02e:	e7dc      	b.n	801dfea <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801e030 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801e030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e034:	b085      	sub	sp, #20
 801e036:	4691      	mov	r9, r2
 801e038:	6802      	ldr	r2, [r0, #0]
 801e03a:	4688      	mov	r8, r1
 801e03c:	461c      	mov	r4, r3
 801e03e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801e042:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801e046:	4683      	mov	fp, r0
 801e048:	4610      	mov	r0, r2
 801e04a:	9103      	str	r1, [sp, #12]
 801e04c:	9302      	str	r3, [sp, #8]
 801e04e:	9201      	str	r2, [sp, #4]
 801e050:	f7ff ff80 	bl	801df54 <_ZN8touchgfx7Unicode6strlenEPKt>
 801e054:	f1b8 0f00 	cmp.w	r8, #0
 801e058:	bf0c      	ite	eq
 801e05a:	4684      	moveq	ip, r0
 801e05c:	f100 0c01 	addne.w	ip, r0, #1
 801e060:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801e064:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801e068:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e06a:	fa1f fc8c 	uxth.w	ip, ip
 801e06e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e070:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801e074:	9903      	ldr	r1, [sp, #12]
 801e076:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e07a:	d041      	beq.n	801e100 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e07c:	d834      	bhi.n	801e0e8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801e07e:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801e082:	d059      	beq.n	801e138 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801e084:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801e088:	d03a      	beq.n	801e100 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e08a:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801e08e:	d034      	beq.n	801e0fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e090:	2400      	movs	r4, #0
 801e092:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801e096:	3a01      	subs	r2, #1
 801e098:	b169      	cbz	r1, 801e0b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e09a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e09c:	458c      	cmp	ip, r1
 801e09e:	da09      	bge.n	801e0b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e0a0:	eba1 010c 	sub.w	r1, r1, ip
 801e0a4:	b289      	uxth	r1, r1
 801e0a6:	b933      	cbnz	r3, 801e0b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e0a8:	2e00      	cmp	r6, #0
 801e0aa:	d051      	beq.n	801e150 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e0ac:	2800      	cmp	r0, #0
 801e0ae:	d04f      	beq.n	801e150 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e0b0:	440c      	add	r4, r1
 801e0b2:	b2a4      	uxth	r4, r4
 801e0b4:	2100      	movs	r1, #0
 801e0b6:	682b      	ldr	r3, [r5, #0]
 801e0b8:	4293      	cmp	r3, r2
 801e0ba:	da07      	bge.n	801e0cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e0bc:	f1b8 0f00 	cmp.w	r8, #0
 801e0c0:	d004      	beq.n	801e0cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e0c2:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801e0c6:	682b      	ldr	r3, [r5, #0]
 801e0c8:	3301      	adds	r3, #1
 801e0ca:	602b      	str	r3, [r5, #0]
 801e0cc:	2730      	movs	r7, #48	; 0x30
 801e0ce:	2c00      	cmp	r4, #0
 801e0d0:	d04e      	beq.n	801e170 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e0d2:	682e      	ldr	r6, [r5, #0]
 801e0d4:	3c01      	subs	r4, #1
 801e0d6:	42b2      	cmp	r2, r6
 801e0d8:	b2a4      	uxth	r4, r4
 801e0da:	dd49      	ble.n	801e170 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e0dc:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e0e0:	682b      	ldr	r3, [r5, #0]
 801e0e2:	3301      	adds	r3, #1
 801e0e4:	602b      	str	r3, [r5, #0]
 801e0e6:	e7f2      	b.n	801e0ce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801e0e8:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801e0ec:	d01d      	beq.n	801e12a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801e0ee:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801e0f2:	d002      	beq.n	801e0fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e0f4:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801e0f8:	e7c9      	b.n	801e08e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801e0fa:	4684      	mov	ip, r0
 801e0fc:	f04f 0800 	mov.w	r8, #0
 801e100:	2c00      	cmp	r4, #0
 801e102:	d0c6      	beq.n	801e092 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e104:	b947      	cbnz	r7, 801e118 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e106:	2801      	cmp	r0, #1
 801e108:	d106      	bne.n	801e118 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e10a:	8814      	ldrh	r4, [r2, #0]
 801e10c:	2c30      	cmp	r4, #48	; 0x30
 801e10e:	bf02      	ittt	eq
 801e110:	3202      	addeq	r2, #2
 801e112:	4638      	moveq	r0, r7
 801e114:	f8cb 2000 	streq.w	r2, [fp]
 801e118:	45bc      	cmp	ip, r7
 801e11a:	da14      	bge.n	801e146 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801e11c:	b2bf      	uxth	r7, r7
 801e11e:	eba7 040c 	sub.w	r4, r7, ip
 801e122:	46bc      	mov	ip, r7
 801e124:	b2a4      	uxth	r4, r4
 801e126:	2600      	movs	r6, #0
 801e128:	e7b3      	b.n	801e092 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e12a:	4684      	mov	ip, r0
 801e12c:	b16c      	cbz	r4, 801e14a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801e12e:	42b8      	cmp	r0, r7
 801e130:	dd00      	ble.n	801e134 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801e132:	b2b8      	uxth	r0, r7
 801e134:	2400      	movs	r4, #0
 801e136:	e003      	b.n	801e140 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801e138:	f04f 0c01 	mov.w	ip, #1
 801e13c:	2400      	movs	r4, #0
 801e13e:	4660      	mov	r0, ip
 801e140:	4626      	mov	r6, r4
 801e142:	46a0      	mov	r8, r4
 801e144:	e7a5      	b.n	801e092 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e146:	2400      	movs	r4, #0
 801e148:	e7ed      	b.n	801e126 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801e14a:	4626      	mov	r6, r4
 801e14c:	46a0      	mov	r8, r4
 801e14e:	e7a0      	b.n	801e092 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e150:	2900      	cmp	r1, #0
 801e152:	d0b0      	beq.n	801e0b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e154:	2720      	movs	r7, #32
 801e156:	682e      	ldr	r6, [r5, #0]
 801e158:	2900      	cmp	r1, #0
 801e15a:	d0ac      	beq.n	801e0b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e15c:	3901      	subs	r1, #1
 801e15e:	4296      	cmp	r6, r2
 801e160:	b289      	uxth	r1, r1
 801e162:	daa7      	bge.n	801e0b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e164:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e168:	682b      	ldr	r3, [r5, #0]
 801e16a:	3301      	adds	r3, #1
 801e16c:	602b      	str	r3, [r5, #0]
 801e16e:	e7f2      	b.n	801e156 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801e170:	b188      	cbz	r0, 801e196 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e172:	682b      	ldr	r3, [r5, #0]
 801e174:	3801      	subs	r0, #1
 801e176:	429a      	cmp	r2, r3
 801e178:	b280      	uxth	r0, r0
 801e17a:	dd0c      	ble.n	801e196 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e17c:	f8db 3000 	ldr.w	r3, [fp]
 801e180:	1c9c      	adds	r4, r3, #2
 801e182:	f8cb 4000 	str.w	r4, [fp]
 801e186:	881c      	ldrh	r4, [r3, #0]
 801e188:	682b      	ldr	r3, [r5, #0]
 801e18a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801e18e:	682b      	ldr	r3, [r5, #0]
 801e190:	3301      	adds	r3, #1
 801e192:	602b      	str	r3, [r5, #0]
 801e194:	e7ec      	b.n	801e170 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e196:	2620      	movs	r6, #32
 801e198:	b151      	cbz	r1, 801e1b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e19a:	6828      	ldr	r0, [r5, #0]
 801e19c:	3901      	subs	r1, #1
 801e19e:	4282      	cmp	r2, r0
 801e1a0:	b289      	uxth	r1, r1
 801e1a2:	dd05      	ble.n	801e1b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e1a4:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801e1a8:	682b      	ldr	r3, [r5, #0]
 801e1aa:	3301      	adds	r3, #1
 801e1ac:	602b      	str	r3, [r5, #0]
 801e1ae:	e7f3      	b.n	801e198 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801e1b0:	b005      	add	sp, #20
 801e1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e1b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801e1b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e1ba:	2400      	movs	r4, #0
 801e1bc:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801e1c0:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801e1c4:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801e1c8:	8014      	strh	r4, [r2, #0]
 801e1ca:	701c      	strb	r4, [r3, #0]
 801e1cc:	f888 4000 	strb.w	r4, [r8]
 801e1d0:	f88c 4000 	strb.w	r4, [ip]
 801e1d4:	f88e 4000 	strb.w	r4, [lr]
 801e1d8:	703c      	strb	r4, [r7, #0]
 801e1da:	6804      	ldr	r4, [r0, #0]
 801e1dc:	b1a4      	cbz	r4, 801e208 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801e1de:	8824      	ldrh	r4, [r4, #0]
 801e1e0:	f04f 0901 	mov.w	r9, #1
 801e1e4:	b314      	cbz	r4, 801e22c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e1e6:	2c2b      	cmp	r4, #43	; 0x2b
 801e1e8:	d001      	beq.n	801e1ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801e1ea:	2c20      	cmp	r4, #32
 801e1ec:	d110      	bne.n	801e210 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801e1ee:	8014      	strh	r4, [r2, #0]
 801e1f0:	6804      	ldr	r4, [r0, #0]
 801e1f2:	b10c      	cbz	r4, 801e1f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801e1f4:	3402      	adds	r4, #2
 801e1f6:	6004      	str	r4, [r0, #0]
 801e1f8:	680c      	ldr	r4, [r1, #0]
 801e1fa:	b10c      	cbz	r4, 801e200 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801e1fc:	3401      	adds	r4, #1
 801e1fe:	600c      	str	r4, [r1, #0]
 801e200:	6804      	ldr	r4, [r0, #0]
 801e202:	b17c      	cbz	r4, 801e224 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801e204:	8824      	ldrh	r4, [r4, #0]
 801e206:	e7ed      	b.n	801e1e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e208:	680c      	ldr	r4, [r1, #0]
 801e20a:	b17c      	cbz	r4, 801e22c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e20c:	7824      	ldrb	r4, [r4, #0]
 801e20e:	e7e7      	b.n	801e1e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801e210:	2c2d      	cmp	r4, #45	; 0x2d
 801e212:	d102      	bne.n	801e21a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801e214:	f883 9000 	strb.w	r9, [r3]
 801e218:	e7ea      	b.n	801e1f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e21a:	2c23      	cmp	r4, #35	; 0x23
 801e21c:	d107      	bne.n	801e22e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801e21e:	f888 9000 	strb.w	r9, [r8]
 801e222:	e7e5      	b.n	801e1f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e224:	680c      	ldr	r4, [r1, #0]
 801e226:	b10c      	cbz	r4, 801e22c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e228:	7824      	ldrb	r4, [r4, #0]
 801e22a:	e7db      	b.n	801e1e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e22c:	2400      	movs	r4, #0
 801e22e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801e232:	2b09      	cmp	r3, #9
 801e234:	d901      	bls.n	801e23a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801e236:	2c2a      	cmp	r4, #42	; 0x2a
 801e238:	d122      	bne.n	801e280 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e23a:	2301      	movs	r3, #1
 801e23c:	2c30      	cmp	r4, #48	; 0x30
 801e23e:	f88e 3000 	strb.w	r3, [lr]
 801e242:	d10d      	bne.n	801e260 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e244:	f88c 3000 	strb.w	r3, [ip]
 801e248:	6803      	ldr	r3, [r0, #0]
 801e24a:	b10b      	cbz	r3, 801e250 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801e24c:	3302      	adds	r3, #2
 801e24e:	6003      	str	r3, [r0, #0]
 801e250:	680b      	ldr	r3, [r1, #0]
 801e252:	b10b      	cbz	r3, 801e258 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801e254:	3301      	adds	r3, #1
 801e256:	600b      	str	r3, [r1, #0]
 801e258:	6803      	ldr	r3, [r0, #0]
 801e25a:	2b00      	cmp	r3, #0
 801e25c:	d02f      	beq.n	801e2be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801e25e:	881c      	ldrh	r4, [r3, #0]
 801e260:	2c2a      	cmp	r4, #42	; 0x2a
 801e262:	d135      	bne.n	801e2d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e264:	f04f 33ff 	mov.w	r3, #4294967295
 801e268:	6033      	str	r3, [r6, #0]
 801e26a:	6803      	ldr	r3, [r0, #0]
 801e26c:	b10b      	cbz	r3, 801e272 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801e26e:	3302      	adds	r3, #2
 801e270:	6003      	str	r3, [r0, #0]
 801e272:	680b      	ldr	r3, [r1, #0]
 801e274:	b10b      	cbz	r3, 801e27a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801e276:	3301      	adds	r3, #1
 801e278:	600b      	str	r3, [r1, #0]
 801e27a:	6803      	ldr	r3, [r0, #0]
 801e27c:	b31b      	cbz	r3, 801e2c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801e27e:	881c      	ldrh	r4, [r3, #0]
 801e280:	2c2e      	cmp	r4, #46	; 0x2e
 801e282:	d11a      	bne.n	801e2ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e284:	2301      	movs	r3, #1
 801e286:	703b      	strb	r3, [r7, #0]
 801e288:	6803      	ldr	r3, [r0, #0]
 801e28a:	b10b      	cbz	r3, 801e290 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801e28c:	3302      	adds	r3, #2
 801e28e:	6003      	str	r3, [r0, #0]
 801e290:	680b      	ldr	r3, [r1, #0]
 801e292:	b10b      	cbz	r3, 801e298 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801e294:	3301      	adds	r3, #1
 801e296:	600b      	str	r3, [r1, #0]
 801e298:	6803      	ldr	r3, [r0, #0]
 801e29a:	2b00      	cmp	r3, #0
 801e29c:	d036      	beq.n	801e30c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801e29e:	881b      	ldrh	r3, [r3, #0]
 801e2a0:	2b2a      	cmp	r3, #42	; 0x2a
 801e2a2:	d137      	bne.n	801e314 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e2a4:	f04f 33ff 	mov.w	r3, #4294967295
 801e2a8:	602b      	str	r3, [r5, #0]
 801e2aa:	6803      	ldr	r3, [r0, #0]
 801e2ac:	b10b      	cbz	r3, 801e2b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801e2ae:	3302      	adds	r3, #2
 801e2b0:	6003      	str	r3, [r0, #0]
 801e2b2:	680b      	ldr	r3, [r1, #0]
 801e2b4:	b10b      	cbz	r3, 801e2ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e2b6:	3301      	adds	r3, #1
 801e2b8:	600b      	str	r3, [r1, #0]
 801e2ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e2be:	680c      	ldr	r4, [r1, #0]
 801e2c0:	b134      	cbz	r4, 801e2d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e2c2:	7824      	ldrb	r4, [r4, #0]
 801e2c4:	e7cc      	b.n	801e260 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e2c6:	680b      	ldr	r3, [r1, #0]
 801e2c8:	2b00      	cmp	r3, #0
 801e2ca:	d0f6      	beq.n	801e2ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e2cc:	781c      	ldrb	r4, [r3, #0]
 801e2ce:	e7d7      	b.n	801e280 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e2d0:	2300      	movs	r3, #0
 801e2d2:	220a      	movs	r2, #10
 801e2d4:	6033      	str	r3, [r6, #0]
 801e2d6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e2da:	fa1f f38c 	uxth.w	r3, ip
 801e2de:	2b09      	cmp	r3, #9
 801e2e0:	d8ce      	bhi.n	801e280 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e2e2:	6833      	ldr	r3, [r6, #0]
 801e2e4:	fb02 c303 	mla	r3, r2, r3, ip
 801e2e8:	6033      	str	r3, [r6, #0]
 801e2ea:	6803      	ldr	r3, [r0, #0]
 801e2ec:	b10b      	cbz	r3, 801e2f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801e2ee:	3302      	adds	r3, #2
 801e2f0:	6003      	str	r3, [r0, #0]
 801e2f2:	680b      	ldr	r3, [r1, #0]
 801e2f4:	b10b      	cbz	r3, 801e2fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801e2f6:	3301      	adds	r3, #1
 801e2f8:	600b      	str	r3, [r1, #0]
 801e2fa:	6803      	ldr	r3, [r0, #0]
 801e2fc:	b10b      	cbz	r3, 801e302 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801e2fe:	881c      	ldrh	r4, [r3, #0]
 801e300:	e7e9      	b.n	801e2d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e302:	680c      	ldr	r4, [r1, #0]
 801e304:	2c00      	cmp	r4, #0
 801e306:	d0e6      	beq.n	801e2d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e308:	7824      	ldrb	r4, [r4, #0]
 801e30a:	e7e4      	b.n	801e2d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e30c:	680b      	ldr	r3, [r1, #0]
 801e30e:	b10b      	cbz	r3, 801e314 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e310:	781b      	ldrb	r3, [r3, #0]
 801e312:	e7c5      	b.n	801e2a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801e314:	2200      	movs	r2, #0
 801e316:	240a      	movs	r4, #10
 801e318:	602a      	str	r2, [r5, #0]
 801e31a:	3b30      	subs	r3, #48	; 0x30
 801e31c:	682a      	ldr	r2, [r5, #0]
 801e31e:	b29e      	uxth	r6, r3
 801e320:	2e09      	cmp	r6, #9
 801e322:	d813      	bhi.n	801e34c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801e324:	fb04 3302 	mla	r3, r4, r2, r3
 801e328:	602b      	str	r3, [r5, #0]
 801e32a:	6803      	ldr	r3, [r0, #0]
 801e32c:	b10b      	cbz	r3, 801e332 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801e32e:	3302      	adds	r3, #2
 801e330:	6003      	str	r3, [r0, #0]
 801e332:	680b      	ldr	r3, [r1, #0]
 801e334:	b10b      	cbz	r3, 801e33a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801e336:	3301      	adds	r3, #1
 801e338:	600b      	str	r3, [r1, #0]
 801e33a:	6803      	ldr	r3, [r0, #0]
 801e33c:	b10b      	cbz	r3, 801e342 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801e33e:	881b      	ldrh	r3, [r3, #0]
 801e340:	e7eb      	b.n	801e31a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e342:	680b      	ldr	r3, [r1, #0]
 801e344:	2b00      	cmp	r3, #0
 801e346:	d0e8      	beq.n	801e31a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e348:	781b      	ldrb	r3, [r3, #0]
 801e34a:	e7e6      	b.n	801e31a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e34c:	2a06      	cmp	r2, #6
 801e34e:	bfa8      	it	ge
 801e350:	2206      	movge	r2, #6
 801e352:	602a      	str	r2, [r5, #0]
 801e354:	e7b1      	b.n	801e2ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801e356 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801e356:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e35a:	b0a3      	sub	sp, #140	; 0x8c
 801e35c:	2600      	movs	r6, #0
 801e35e:	4607      	mov	r7, r0
 801e360:	4688      	mov	r8, r1
 801e362:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801e366:	4631      	mov	r1, r6
 801e368:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801e36a:	4648      	mov	r0, r9
 801e36c:	960d      	str	r6, [sp, #52]	; 0x34
 801e36e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801e372:	2242      	movs	r2, #66	; 0x42
 801e374:	f7fe fc6e 	bl	801cc54 <_ZN8touchgfx6memsetEPvhm>
 801e378:	b15f      	cbz	r7, 801e392 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801e37a:	f108 3aff 	add.w	sl, r8, #4294967295
 801e37e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e382:	b152      	cbz	r2, 801e39a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801e384:	8812      	ldrh	r2, [r2, #0]
 801e386:	b10a      	cbz	r2, 801e38c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e388:	459a      	cmp	sl, r3
 801e38a:	dc2e      	bgt.n	801e3ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801e38c:	2200      	movs	r2, #0
 801e38e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e392:	4638      	mov	r0, r7
 801e394:	b023      	add	sp, #140	; 0x8c
 801e396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e39a:	9a08      	ldr	r2, [sp, #32]
 801e39c:	2a00      	cmp	r2, #0
 801e39e:	d0f5      	beq.n	801e38c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e3a0:	7812      	ldrb	r2, [r2, #0]
 801e3a2:	e7f0      	b.n	801e386 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801e3a4:	2d00      	cmp	r5, #0
 801e3a6:	d0ea      	beq.n	801e37e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e3a8:	782a      	ldrb	r2, [r5, #0]
 801e3aa:	b142      	cbz	r2, 801e3be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801e3ac:	2a25      	cmp	r2, #37	; 0x25
 801e3ae:	d001      	beq.n	801e3b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801e3b0:	459a      	cmp	sl, r3
 801e3b2:	dc08      	bgt.n	801e3c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801e3b4:	f1bb 0f00 	cmp.w	fp, #0
 801e3b8:	d121      	bne.n	801e3fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801e3ba:	2d00      	cmp	r5, #0
 801e3bc:	d0df      	beq.n	801e37e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e3be:	782a      	ldrb	r2, [r5, #0]
 801e3c0:	f04f 0b00 	mov.w	fp, #0
 801e3c4:	e01d      	b.n	801e402 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801e3c6:	f1bb 0f00 	cmp.w	fp, #0
 801e3ca:	d077      	beq.n	801e4bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801e3cc:	f8bb 2000 	ldrh.w	r2, [fp]
 801e3d0:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e3d4:	f1bb 0f00 	cmp.w	fp, #0
 801e3d8:	d002      	beq.n	801e3e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801e3da:	f10b 0202 	add.w	r2, fp, #2
 801e3de:	9209      	str	r2, [sp, #36]	; 0x24
 801e3e0:	b10d      	cbz	r5, 801e3e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801e3e2:	3501      	adds	r5, #1
 801e3e4:	9508      	str	r5, [sp, #32]
 801e3e6:	3301      	adds	r3, #1
 801e3e8:	930d      	str	r3, [sp, #52]	; 0x34
 801e3ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e3ec:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801e3f0:	f1bb 0f00 	cmp.w	fp, #0
 801e3f4:	d0d6      	beq.n	801e3a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801e3f6:	f8bb 2000 	ldrh.w	r2, [fp]
 801e3fa:	2a00      	cmp	r2, #0
 801e3fc:	d1d6      	bne.n	801e3ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801e3fe:	f8bb 2000 	ldrh.w	r2, [fp]
 801e402:	2a00      	cmp	r2, #0
 801e404:	d0bb      	beq.n	801e37e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e406:	459a      	cmp	sl, r3
 801e408:	ddb9      	ble.n	801e37e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e40a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801e40e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801e412:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801e416:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801e41a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801e41e:	960e      	str	r6, [sp, #56]	; 0x38
 801e420:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801e424:	960f      	str	r6, [sp, #60]	; 0x3c
 801e426:	f1bb 0f00 	cmp.w	fp, #0
 801e42a:	d002      	beq.n	801e432 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801e42c:	f10b 0302 	add.w	r3, fp, #2
 801e430:	9309      	str	r3, [sp, #36]	; 0x24
 801e432:	b10d      	cbz	r5, 801e438 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801e434:	1c6b      	adds	r3, r5, #1
 801e436:	9308      	str	r3, [sp, #32]
 801e438:	ab0f      	add	r3, sp, #60	; 0x3c
 801e43a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801e43e:	a908      	add	r1, sp, #32
 801e440:	a809      	add	r0, sp, #36	; 0x24
 801e442:	9305      	str	r3, [sp, #20]
 801e444:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801e448:	9304      	str	r3, [sp, #16]
 801e44a:	ab0e      	add	r3, sp, #56	; 0x38
 801e44c:	9303      	str	r3, [sp, #12]
 801e44e:	ab0c      	add	r3, sp, #48	; 0x30
 801e450:	9302      	str	r3, [sp, #8]
 801e452:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801e456:	9301      	str	r3, [sp, #4]
 801e458:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801e45c:	9300      	str	r3, [sp, #0]
 801e45e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801e462:	f7ff fea8 	bl	801e1b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801e466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e468:	2b00      	cmp	r3, #0
 801e46a:	bfbf      	itttt	lt
 801e46c:	6823      	ldrlt	r3, [r4, #0]
 801e46e:	3404      	addlt	r4, #4
 801e470:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e474:	930e      	strlt	r3, [sp, #56]	; 0x38
 801e476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e478:	2b00      	cmp	r3, #0
 801e47a:	bfbe      	ittt	lt
 801e47c:	6823      	ldrlt	r3, [r4, #0]
 801e47e:	3404      	addlt	r4, #4
 801e480:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e484:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801e488:	bfb8      	it	lt
 801e48a:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801e48c:	b1d9      	cbz	r1, 801e4c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801e48e:	880b      	ldrh	r3, [r1, #0]
 801e490:	2b69      	cmp	r3, #105	; 0x69
 801e492:	d01f      	beq.n	801e4d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e494:	d82f      	bhi.n	801e4f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801e496:	2b58      	cmp	r3, #88	; 0x58
 801e498:	d01c      	beq.n	801e4d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e49a:	d818      	bhi.n	801e4ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801e49c:	2b25      	cmp	r3, #37	; 0x25
 801e49e:	d034      	beq.n	801e50a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801e4a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e4a2:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801e4a6:	f1bb 0f00 	cmp.w	fp, #0
 801e4aa:	f000 80b7 	beq.w	801e61c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801e4ae:	f8bb 5000 	ldrh.w	r5, [fp]
 801e4b2:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801e4b6:	3301      	adds	r3, #1
 801e4b8:	930d      	str	r3, [sp, #52]	; 0x34
 801e4ba:	e029      	b.n	801e510 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801e4bc:	b10d      	cbz	r5, 801e4c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801e4be:	782a      	ldrb	r2, [r5, #0]
 801e4c0:	e786      	b.n	801e3d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801e4c2:	462a      	mov	r2, r5
 801e4c4:	e784      	b.n	801e3d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801e4c6:	2a00      	cmp	r2, #0
 801e4c8:	d0ea      	beq.n	801e4a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e4ca:	7813      	ldrb	r3, [r2, #0]
 801e4cc:	e7e0      	b.n	801e490 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801e4ce:	3b63      	subs	r3, #99	; 0x63
 801e4d0:	2b01      	cmp	r3, #1
 801e4d2:	d8e5      	bhi.n	801e4a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e4d4:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801e4d8:	b329      	cbz	r1, 801e526 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801e4da:	880b      	ldrh	r3, [r1, #0]
 801e4dc:	2b69      	cmp	r3, #105	; 0x69
 801e4de:	d063      	beq.n	801e5a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801e4e0:	d825      	bhi.n	801e52e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801e4e2:	2b63      	cmp	r3, #99	; 0x63
 801e4e4:	d038      	beq.n	801e558 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801e4e6:	2b64      	cmp	r3, #100	; 0x64
 801e4e8:	d05e      	beq.n	801e5a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801e4ea:	2b58      	cmp	r3, #88	; 0x58
 801e4ec:	d07a      	beq.n	801e5e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801e4ee:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801e4f2:	4625      	mov	r5, r4
 801e4f4:	e036      	b.n	801e564 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e4f6:	2b73      	cmp	r3, #115	; 0x73
 801e4f8:	d0ec      	beq.n	801e4d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e4fa:	d802      	bhi.n	801e502 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801e4fc:	2b6f      	cmp	r3, #111	; 0x6f
 801e4fe:	d1cf      	bne.n	801e4a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e500:	e7e8      	b.n	801e4d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e502:	2b75      	cmp	r3, #117	; 0x75
 801e504:	d0e6      	beq.n	801e4d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e506:	2b78      	cmp	r3, #120	; 0x78
 801e508:	e7f9      	b.n	801e4fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801e50a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e50c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801e510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e512:	b10b      	cbz	r3, 801e518 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801e514:	3302      	adds	r3, #2
 801e516:	9309      	str	r3, [sp, #36]	; 0x24
 801e518:	9b08      	ldr	r3, [sp, #32]
 801e51a:	2b00      	cmp	r3, #0
 801e51c:	f43f af2f 	beq.w	801e37e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e520:	3301      	adds	r3, #1
 801e522:	9308      	str	r3, [sp, #32]
 801e524:	e72b      	b.n	801e37e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e526:	2a00      	cmp	r2, #0
 801e528:	d0e1      	beq.n	801e4ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e52a:	7813      	ldrb	r3, [r2, #0]
 801e52c:	e7d6      	b.n	801e4dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801e52e:	2b73      	cmp	r3, #115	; 0x73
 801e530:	d036      	beq.n	801e5a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801e532:	d807      	bhi.n	801e544 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801e534:	2b6f      	cmp	r3, #111	; 0x6f
 801e536:	d1da      	bne.n	801e4ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e538:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e53a:	1d25      	adds	r5, r4, #4
 801e53c:	2308      	movs	r3, #8
 801e53e:	eba8 0202 	sub.w	r2, r8, r2
 801e542:	e049      	b.n	801e5d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801e544:	2b75      	cmp	r3, #117	; 0x75
 801e546:	d042      	beq.n	801e5ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801e548:	2b78      	cmp	r3, #120	; 0x78
 801e54a:	d1d0      	bne.n	801e4ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e54c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e54e:	1d25      	adds	r5, r4, #4
 801e550:	2310      	movs	r3, #16
 801e552:	eba8 0202 	sub.w	r2, r8, r2
 801e556:	e03f      	b.n	801e5d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801e558:	7823      	ldrb	r3, [r4, #0]
 801e55a:	1d25      	adds	r5, r4, #4
 801e55c:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801e560:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801e564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e566:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801e56a:	2b00      	cmp	r3, #0
 801e56c:	d051      	beq.n	801e612 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801e56e:	881a      	ldrh	r2, [r3, #0]
 801e570:	a80d      	add	r0, sp, #52	; 0x34
 801e572:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801e576:	462c      	mov	r4, r5
 801e578:	9005      	str	r0, [sp, #20]
 801e57a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801e57e:	9004      	str	r0, [sp, #16]
 801e580:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e582:	9003      	str	r0, [sp, #12]
 801e584:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801e588:	9002      	str	r0, [sp, #8]
 801e58a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e58c:	9001      	str	r0, [sp, #4]
 801e58e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801e592:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801e596:	9000      	str	r0, [sp, #0]
 801e598:	a810      	add	r0, sp, #64	; 0x40
 801e59a:	f7ff fd49 	bl	801e030 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801e59e:	e7b7      	b.n	801e510 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801e5a0:	1d25      	adds	r5, r4, #4
 801e5a2:	6823      	ldr	r3, [r4, #0]
 801e5a4:	9310      	str	r3, [sp, #64]	; 0x40
 801e5a6:	e7dd      	b.n	801e564 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e5a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e5aa:	230a      	movs	r3, #10
 801e5ac:	4649      	mov	r1, r9
 801e5ae:	6820      	ldr	r0, [r4, #0]
 801e5b0:	eba8 0202 	sub.w	r2, r8, r2
 801e5b4:	1d25      	adds	r5, r4, #4
 801e5b6:	b292      	uxth	r2, r2
 801e5b8:	f7ff fd08 	bl	801dfcc <_ZN8touchgfx7Unicode4itoaElPtti>
 801e5bc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801e5c0:	2b2d      	cmp	r3, #45	; 0x2d
 801e5c2:	d1cf      	bne.n	801e564 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e5c4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e5c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e5ca:	3302      	adds	r3, #2
 801e5cc:	e7ea      	b.n	801e5a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801e5ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e5d0:	1d25      	adds	r5, r4, #4
 801e5d2:	230a      	movs	r3, #10
 801e5d4:	eba8 0202 	sub.w	r2, r8, r2
 801e5d8:	b292      	uxth	r2, r2
 801e5da:	4649      	mov	r1, r9
 801e5dc:	6820      	ldr	r0, [r4, #0]
 801e5de:	f7ff fcd7 	bl	801df90 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801e5e2:	e7bf      	b.n	801e564 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e5e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e5e6:	2310      	movs	r3, #16
 801e5e8:	4649      	mov	r1, r9
 801e5ea:	6820      	ldr	r0, [r4, #0]
 801e5ec:	eba8 0202 	sub.w	r2, r8, r2
 801e5f0:	1d25      	adds	r5, r4, #4
 801e5f2:	b292      	uxth	r2, r2
 801e5f4:	f7ff fccc 	bl	801df90 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801e5f8:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801e5fc:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801e600:	2b00      	cmp	r3, #0
 801e602:	d0af      	beq.n	801e564 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e604:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801e608:	2919      	cmp	r1, #25
 801e60a:	d8f7      	bhi.n	801e5fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801e60c:	3b20      	subs	r3, #32
 801e60e:	8013      	strh	r3, [r2, #0]
 801e610:	e7f4      	b.n	801e5fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801e612:	9a08      	ldr	r2, [sp, #32]
 801e614:	2a00      	cmp	r2, #0
 801e616:	d0ab      	beq.n	801e570 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801e618:	7812      	ldrb	r2, [r2, #0]
 801e61a:	e7a9      	b.n	801e570 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801e61c:	2d00      	cmp	r5, #0
 801e61e:	f43f af48 	beq.w	801e4b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801e622:	782d      	ldrb	r5, [r5, #0]
 801e624:	e745      	b.n	801e4b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801e626 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801e626:	b507      	push	{r0, r1, r2, lr}
 801e628:	9300      	str	r3, [sp, #0]
 801e62a:	4613      	mov	r3, r2
 801e62c:	2200      	movs	r2, #0
 801e62e:	f7ff fe92 	bl	801e356 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801e632:	b003      	add	sp, #12
 801e634:	f85d fb04 	ldr.w	pc, [sp], #4

0801e638 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801e638:	b40c      	push	{r2, r3}
 801e63a:	b507      	push	{r0, r1, r2, lr}
 801e63c:	ab04      	add	r3, sp, #16
 801e63e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e642:	9301      	str	r3, [sp, #4]
 801e644:	f7ff ffef 	bl	801e626 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801e648:	b003      	add	sp, #12
 801e64a:	f85d eb04 	ldr.w	lr, [sp], #4
 801e64e:	b002      	add	sp, #8
 801e650:	4770      	bx	lr
	...

0801e654 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801e654:	4b01      	ldr	r3, [pc, #4]	; (801e65c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801e656:	6018      	str	r0, [r3, #0]
 801e658:	4770      	bx	lr
 801e65a:	bf00      	nop
 801e65c:	2000b4bc 	.word	0x2000b4bc

0801e660 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801e660:	4b07      	ldr	r3, [pc, #28]	; (801e680 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801e662:	881a      	ldrh	r2, [r3, #0]
 801e664:	4282      	cmp	r2, r0
 801e666:	d809      	bhi.n	801e67c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801e668:	4b06      	ldr	r3, [pc, #24]	; (801e684 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801e66a:	881b      	ldrh	r3, [r3, #0]
 801e66c:	4413      	add	r3, r2
 801e66e:	4298      	cmp	r0, r3
 801e670:	da04      	bge.n	801e67c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801e672:	4b05      	ldr	r3, [pc, #20]	; (801e688 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801e674:	681b      	ldr	r3, [r3, #0]
 801e676:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e67a:	4770      	bx	lr
 801e67c:	2000      	movs	r0, #0
 801e67e:	4770      	bx	lr
 801e680:	2000b4dc 	.word	0x2000b4dc
 801e684:	2000b4e0 	.word	0x2000b4e0
 801e688:	2000b4c0 	.word	0x2000b4c0

0801e68c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801e68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e690:	4d28      	ldr	r5, [pc, #160]	; (801e734 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801e692:	682b      	ldr	r3, [r5, #0]
 801e694:	2b00      	cmp	r3, #0
 801e696:	d04a      	beq.n	801e72e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801e698:	4a27      	ldr	r2, [pc, #156]	; (801e738 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801e69a:	4e28      	ldr	r6, [pc, #160]	; (801e73c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801e69c:	8810      	ldrh	r0, [r2, #0]
 801e69e:	f8b6 8000 	ldrh.w	r8, [r6]
 801e6a2:	4c27      	ldr	r4, [pc, #156]	; (801e740 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801e6a4:	4440      	add	r0, r8
 801e6a6:	4f27      	ldr	r7, [pc, #156]	; (801e744 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801e6a8:	1c41      	adds	r1, r0, #1
 801e6aa:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801e6ae:	f021 0101 	bic.w	r1, r1, #1
 801e6b2:	eb03 020e 	add.w	r2, r3, lr
 801e6b6:	0409      	lsls	r1, r1, #16
 801e6b8:	6022      	str	r2, [r4, #0]
 801e6ba:	0c09      	lsrs	r1, r1, #16
 801e6bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801e6c0:	eb0e 010c 	add.w	r1, lr, ip
 801e6c4:	185a      	adds	r2, r3, r1
 801e6c6:	603a      	str	r2, [r7, #0]
 801e6c8:	220e      	movs	r2, #14
 801e6ca:	fb02 f208 	mul.w	r2, r2, r8
 801e6ce:	3203      	adds	r2, #3
 801e6d0:	f022 0203 	bic.w	r2, r2, #3
 801e6d4:	4411      	add	r1, r2
 801e6d6:	440b      	add	r3, r1
 801e6d8:	491b      	ldr	r1, [pc, #108]	; (801e748 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801e6da:	600b      	str	r3, [r1, #0]
 801e6dc:	2300      	movs	r3, #0
 801e6de:	491b      	ldr	r1, [pc, #108]	; (801e74c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801e6e0:	800b      	strh	r3, [r1, #0]
 801e6e2:	491b      	ldr	r1, [pc, #108]	; (801e750 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801e6e4:	6809      	ldr	r1, [r1, #0]
 801e6e6:	eba1 010e 	sub.w	r1, r1, lr
 801e6ea:	eba1 010c 	sub.w	r1, r1, ip
 801e6ee:	469c      	mov	ip, r3
 801e6f0:	1a8a      	subs	r2, r1, r2
 801e6f2:	4918      	ldr	r1, [pc, #96]	; (801e754 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801e6f4:	600a      	str	r2, [r1, #0]
 801e6f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e6fa:	4a17      	ldr	r2, [pc, #92]	; (801e758 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801e6fc:	8013      	strh	r3, [r2, #0]
 801e6fe:	4283      	cmp	r3, r0
 801e700:	d10d      	bne.n	801e71e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801e702:	8835      	ldrh	r5, [r6, #0]
 801e704:	2300      	movs	r3, #0
 801e706:	6838      	ldr	r0, [r7, #0]
 801e708:	240e      	movs	r4, #14
 801e70a:	429d      	cmp	r5, r3
 801e70c:	d90f      	bls.n	801e72e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801e70e:	fb04 0203 	mla	r2, r4, r3, r0
 801e712:	3301      	adds	r3, #1
 801e714:	7b11      	ldrb	r1, [r2, #12]
 801e716:	f36f 1145 	bfc	r1, #5, #1
 801e71a:	7311      	strb	r1, [r2, #12]
 801e71c:	e7f5      	b.n	801e70a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801e71e:	682a      	ldr	r2, [r5, #0]
 801e720:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801e724:	6822      	ldr	r2, [r4, #0]
 801e726:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801e72a:	3301      	adds	r3, #1
 801e72c:	e7e7      	b.n	801e6fe <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801e72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e732:	bf00      	nop
 801e734:	2000b4c0 	.word	0x2000b4c0
 801e738:	2000b4dc 	.word	0x2000b4dc
 801e73c:	2000b4e0 	.word	0x2000b4e0
 801e740:	2000b4d4 	.word	0x2000b4d4
 801e744:	2000b4c4 	.word	0x2000b4c4
 801e748:	2000b4cc 	.word	0x2000b4cc
 801e74c:	2000b4de 	.word	0x2000b4de
 801e750:	2000b4c8 	.word	0x2000b4c8
 801e754:	2000b4d8 	.word	0x2000b4d8
 801e758:	2000b4d0 	.word	0x2000b4d0

0801e75c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801e75c:	4b10      	ldr	r3, [pc, #64]	; (801e7a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801e75e:	b510      	push	{r4, lr}
 801e760:	681b      	ldr	r3, [r3, #0]
 801e762:	b9db      	cbnz	r3, 801e79c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801e764:	b1d1      	cbz	r1, 801e79c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801e766:	4b0f      	ldr	r3, [pc, #60]	; (801e7a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801e768:	240e      	movs	r4, #14
 801e76a:	801a      	strh	r2, [r3, #0]
 801e76c:	b292      	uxth	r2, r2
 801e76e:	4b0e      	ldr	r3, [pc, #56]	; (801e7a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801e770:	881b      	ldrh	r3, [r3, #0]
 801e772:	4413      	add	r3, r2
 801e774:	4362      	muls	r2, r4
 801e776:	2406      	movs	r4, #6
 801e778:	fb04 2203 	mla	r2, r4, r3, r2
 801e77c:	428a      	cmp	r2, r1
 801e77e:	d305      	bcc.n	801e78c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801e780:	4b0a      	ldr	r3, [pc, #40]	; (801e7ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801e782:	2137      	movs	r1, #55	; 0x37
 801e784:	4a0a      	ldr	r2, [pc, #40]	; (801e7b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801e786:	480b      	ldr	r0, [pc, #44]	; (801e7b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801e788:	f009 fe7c 	bl	8028484 <__assert_func>
 801e78c:	4b0a      	ldr	r3, [pc, #40]	; (801e7b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801e78e:	6019      	str	r1, [r3, #0]
 801e790:	4b0a      	ldr	r3, [pc, #40]	; (801e7bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801e792:	6018      	str	r0, [r3, #0]
 801e794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e798:	f7ff bf78 	b.w	801e68c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801e79c:	bd10      	pop	{r4, pc}
 801e79e:	bf00      	nop
 801e7a0:	2000b4cc 	.word	0x2000b4cc
 801e7a4:	2000b4e0 	.word	0x2000b4e0
 801e7a8:	2000b4dc 	.word	0x2000b4dc
 801e7ac:	0802d7bd 	.word	0x0802d7bd
 801e7b0:	0802d816 	.word	0x0802d816
 801e7b4:	0802d798 	.word	0x0802d798
 801e7b8:	2000b4c8 	.word	0x2000b4c8
 801e7bc:	2000b4c0 	.word	0x2000b4c0

0801e7c0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801e7c0:	b470      	push	{r4, r5, r6}
 801e7c2:	4c07      	ldr	r4, [pc, #28]	; (801e7e0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801e7c4:	4605      	mov	r5, r0
 801e7c6:	4610      	mov	r0, r2
 801e7c8:	9a03      	ldr	r2, [sp, #12]
 801e7ca:	6826      	ldr	r6, [r4, #0]
 801e7cc:	b936      	cbnz	r6, 801e7dc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801e7ce:	6025      	str	r5, [r4, #0]
 801e7d0:	4c04      	ldr	r4, [pc, #16]	; (801e7e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801e7d2:	8021      	strh	r1, [r4, #0]
 801e7d4:	4619      	mov	r1, r3
 801e7d6:	bc70      	pop	{r4, r5, r6}
 801e7d8:	f7ff bfc0 	b.w	801e75c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801e7dc:	bc70      	pop	{r4, r5, r6}
 801e7de:	4770      	bx	lr
 801e7e0:	2000b4e4 	.word	0x2000b4e4
 801e7e4:	2000b4dc 	.word	0x2000b4dc

0801e7e8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801e7e8:	b508      	push	{r3, lr}
 801e7ea:	4b14      	ldr	r3, [pc, #80]	; (801e83c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801e7ec:	6819      	ldr	r1, [r3, #0]
 801e7ee:	b931      	cbnz	r1, 801e7fe <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801e7f0:	4b13      	ldr	r3, [pc, #76]	; (801e840 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801e7f2:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 801e7f6:	4a13      	ldr	r2, [pc, #76]	; (801e844 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801e7f8:	4813      	ldr	r0, [pc, #76]	; (801e848 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801e7fa:	f009 fe43 	bl	8028484 <__assert_func>
 801e7fe:	4a13      	ldr	r2, [pc, #76]	; (801e84c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801e800:	8803      	ldrh	r3, [r0, #0]
 801e802:	8812      	ldrh	r2, [r2, #0]
 801e804:	4293      	cmp	r3, r2
 801e806:	d204      	bcs.n	801e812 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801e808:	2214      	movs	r2, #20
 801e80a:	fb02 1303 	mla	r3, r2, r3, r1
 801e80e:	8918      	ldrh	r0, [r3, #8]
 801e810:	bd08      	pop	{r3, pc}
 801e812:	490f      	ldr	r1, [pc, #60]	; (801e850 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801e814:	8809      	ldrh	r1, [r1, #0]
 801e816:	4411      	add	r1, r2
 801e818:	428b      	cmp	r3, r1
 801e81a:	da06      	bge.n	801e82a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801e81c:	1a9b      	subs	r3, r3, r2
 801e81e:	4a0d      	ldr	r2, [pc, #52]	; (801e854 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801e820:	210e      	movs	r1, #14
 801e822:	6812      	ldr	r2, [r2, #0]
 801e824:	fb01 2303 	mla	r3, r1, r3, r2
 801e828:	e7f1      	b.n	801e80e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801e82a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e82e:	4293      	cmp	r3, r2
 801e830:	bf0a      	itet	eq
 801e832:	4b09      	ldreq	r3, [pc, #36]	; (801e858 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801e834:	2000      	movne	r0, #0
 801e836:	8818      	ldrheq	r0, [r3, #0]
 801e838:	e7ea      	b.n	801e810 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801e83a:	bf00      	nop
 801e83c:	2000b4e4 	.word	0x2000b4e4
 801e840:	0802cacc 	.word	0x0802cacc
 801e844:	0802d8c3 	.word	0x0802d8c3
 801e848:	0802d798 	.word	0x0802d798
 801e84c:	2000b4dc 	.word	0x2000b4dc
 801e850:	2000b4e0 	.word	0x2000b4e0
 801e854:	2000b4c4 	.word	0x2000b4c4
 801e858:	2000b410 	.word	0x2000b410

0801e85c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801e85c:	b508      	push	{r3, lr}
 801e85e:	4b14      	ldr	r3, [pc, #80]	; (801e8b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801e860:	6819      	ldr	r1, [r3, #0]
 801e862:	b931      	cbnz	r1, 801e872 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801e864:	4b13      	ldr	r3, [pc, #76]	; (801e8b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801e866:	f44f 7143 	mov.w	r1, #780	; 0x30c
 801e86a:	4a13      	ldr	r2, [pc, #76]	; (801e8b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801e86c:	4813      	ldr	r0, [pc, #76]	; (801e8bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801e86e:	f009 fe09 	bl	8028484 <__assert_func>
 801e872:	4a13      	ldr	r2, [pc, #76]	; (801e8c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801e874:	8803      	ldrh	r3, [r0, #0]
 801e876:	8812      	ldrh	r2, [r2, #0]
 801e878:	4293      	cmp	r3, r2
 801e87a:	d204      	bcs.n	801e886 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801e87c:	2214      	movs	r2, #20
 801e87e:	fb02 1303 	mla	r3, r2, r3, r1
 801e882:	8958      	ldrh	r0, [r3, #10]
 801e884:	bd08      	pop	{r3, pc}
 801e886:	490f      	ldr	r1, [pc, #60]	; (801e8c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801e888:	8809      	ldrh	r1, [r1, #0]
 801e88a:	4411      	add	r1, r2
 801e88c:	428b      	cmp	r3, r1
 801e88e:	da06      	bge.n	801e89e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801e890:	1a9b      	subs	r3, r3, r2
 801e892:	4a0d      	ldr	r2, [pc, #52]	; (801e8c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801e894:	210e      	movs	r1, #14
 801e896:	6812      	ldr	r2, [r2, #0]
 801e898:	fb01 2303 	mla	r3, r1, r3, r2
 801e89c:	e7f1      	b.n	801e882 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801e89e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e8a2:	4293      	cmp	r3, r2
 801e8a4:	bf0a      	itet	eq
 801e8a6:	4b09      	ldreq	r3, [pc, #36]	; (801e8cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801e8a8:	2000      	movne	r0, #0
 801e8aa:	8818      	ldrheq	r0, [r3, #0]
 801e8ac:	e7ea      	b.n	801e884 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801e8ae:	bf00      	nop
 801e8b0:	2000b4e4 	.word	0x2000b4e4
 801e8b4:	0802cacc 	.word	0x0802cacc
 801e8b8:	0802d8ef 	.word	0x0802d8ef
 801e8bc:	0802d798 	.word	0x0802d798
 801e8c0:	2000b4dc 	.word	0x2000b4dc
 801e8c4:	2000b4e0 	.word	0x2000b4e0
 801e8c8:	2000b4c4 	.word	0x2000b4c4
 801e8cc:	2000b412 	.word	0x2000b412

0801e8d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801e8d0:	4b23      	ldr	r3, [pc, #140]	; (801e960 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801e8d2:	b510      	push	{r4, lr}
 801e8d4:	681c      	ldr	r4, [r3, #0]
 801e8d6:	b934      	cbnz	r4, 801e8e6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801e8d8:	4b22      	ldr	r3, [pc, #136]	; (801e964 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801e8da:	f44f 7148 	mov.w	r1, #800	; 0x320
 801e8de:	4a22      	ldr	r2, [pc, #136]	; (801e968 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801e8e0:	4822      	ldr	r0, [pc, #136]	; (801e96c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801e8e2:	f009 fdcf 	bl	8028484 <__assert_func>
 801e8e6:	4a22      	ldr	r2, [pc, #136]	; (801e970 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801e8e8:	880b      	ldrh	r3, [r1, #0]
 801e8ea:	8812      	ldrh	r2, [r2, #0]
 801e8ec:	4293      	cmp	r3, r2
 801e8ee:	d211      	bcs.n	801e914 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801e8f0:	2214      	movs	r2, #20
 801e8f2:	fb02 4303 	mla	r3, r2, r3, r4
 801e8f6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801e8fa:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801e8fe:	8a1a      	ldrh	r2, [r3, #16]
 801e900:	8a5b      	ldrh	r3, [r3, #18]
 801e902:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e906:	8004      	strh	r4, [r0, #0]
 801e908:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e90c:	8041      	strh	r1, [r0, #2]
 801e90e:	8082      	strh	r2, [r0, #4]
 801e910:	80c3      	strh	r3, [r0, #6]
 801e912:	e00e      	b.n	801e932 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801e914:	4917      	ldr	r1, [pc, #92]	; (801e974 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801e916:	8809      	ldrh	r1, [r1, #0]
 801e918:	4411      	add	r1, r2
 801e91a:	428b      	cmp	r3, r1
 801e91c:	da0a      	bge.n	801e934 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801e91e:	1a9b      	subs	r3, r3, r2
 801e920:	4a15      	ldr	r2, [pc, #84]	; (801e978 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801e922:	210e      	movs	r1, #14
 801e924:	6812      	ldr	r2, [r2, #0]
 801e926:	fb01 2303 	mla	r3, r1, r3, r2
 801e92a:	681a      	ldr	r2, [r3, #0]
 801e92c:	6002      	str	r2, [r0, #0]
 801e92e:	685a      	ldr	r2, [r3, #4]
 801e930:	6042      	str	r2, [r0, #4]
 801e932:	bd10      	pop	{r4, pc}
 801e934:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e938:	4293      	cmp	r3, r2
 801e93a:	d10b      	bne.n	801e954 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801e93c:	4b0f      	ldr	r3, [pc, #60]	; (801e97c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801e93e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e942:	4b0f      	ldr	r3, [pc, #60]	; (801e980 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801e944:	8081      	strh	r1, [r0, #4]
 801e946:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e94a:	2300      	movs	r3, #0
 801e94c:	80c2      	strh	r2, [r0, #6]
 801e94e:	8003      	strh	r3, [r0, #0]
 801e950:	8043      	strh	r3, [r0, #2]
 801e952:	e7ee      	b.n	801e932 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801e954:	2300      	movs	r3, #0
 801e956:	8003      	strh	r3, [r0, #0]
 801e958:	8043      	strh	r3, [r0, #2]
 801e95a:	8083      	strh	r3, [r0, #4]
 801e95c:	e7d8      	b.n	801e910 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801e95e:	bf00      	nop
 801e960:	2000b4e4 	.word	0x2000b4e4
 801e964:	0802cacc 	.word	0x0802cacc
 801e968:	0802d85c 	.word	0x0802d85c
 801e96c:	0802d798 	.word	0x0802d798
 801e970:	2000b4dc 	.word	0x2000b4dc
 801e974:	2000b4e0 	.word	0x2000b4e0
 801e978:	2000b4c4 	.word	0x2000b4c4
 801e97c:	2000b410 	.word	0x2000b410
 801e980:	2000b412 	.word	0x2000b412

0801e984 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801e984:	b508      	push	{r3, lr}
 801e986:	4b12      	ldr	r3, [pc, #72]	; (801e9d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801e988:	6819      	ldr	r1, [r3, #0]
 801e98a:	b931      	cbnz	r1, 801e99a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801e98c:	4b11      	ldr	r3, [pc, #68]	; (801e9d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e98e:	f44f 7151 	mov.w	r1, #836	; 0x344
 801e992:	4a11      	ldr	r2, [pc, #68]	; (801e9d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801e994:	4811      	ldr	r0, [pc, #68]	; (801e9dc <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801e996:	f009 fd75 	bl	8028484 <__assert_func>
 801e99a:	8803      	ldrh	r3, [r0, #0]
 801e99c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e9a0:	4293      	cmp	r3, r2
 801e9a2:	d012      	beq.n	801e9ca <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801e9a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e9a8:	4293      	cmp	r3, r2
 801e9aa:	d103      	bne.n	801e9b4 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801e9ac:	4b0c      	ldr	r3, [pc, #48]	; (801e9e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801e9ae:	681b      	ldr	r3, [r3, #0]
 801e9b0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801e9b2:	bd08      	pop	{r3, pc}
 801e9b4:	4a0b      	ldr	r2, [pc, #44]	; (801e9e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801e9b6:	6812      	ldr	r2, [r2, #0]
 801e9b8:	b11a      	cbz	r2, 801e9c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801e9ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e9be:	2800      	cmp	r0, #0
 801e9c0:	d1f7      	bne.n	801e9b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e9c2:	2214      	movs	r2, #20
 801e9c4:	4353      	muls	r3, r2
 801e9c6:	58c8      	ldr	r0, [r1, r3]
 801e9c8:	e7f3      	b.n	801e9b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e9ca:	2000      	movs	r0, #0
 801e9cc:	e7f1      	b.n	801e9b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e9ce:	bf00      	nop
 801e9d0:	2000b4e4 	.word	0x2000b4e4
 801e9d4:	0802cacc 	.word	0x0802cacc
 801e9d8:	0802d892 	.word	0x0802d892
 801e9dc:	0802d798 	.word	0x0802d798
 801e9e0:	2000b41c 	.word	0x2000b41c
 801e9e4:	2000b4c0 	.word	0x2000b4c0

0801e9e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801e9e8:	8802      	ldrh	r2, [r0, #0]
 801e9ea:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801e9ee:	429a      	cmp	r2, r3
 801e9f0:	d840      	bhi.n	801ea74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801e9f2:	4b21      	ldr	r3, [pc, #132]	; (801ea78 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801e9f4:	881b      	ldrh	r3, [r3, #0]
 801e9f6:	429a      	cmp	r2, r3
 801e9f8:	d220      	bcs.n	801ea3c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801e9fa:	4b20      	ldr	r3, [pc, #128]	; (801ea7c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801e9fc:	6819      	ldr	r1, [r3, #0]
 801e9fe:	2314      	movs	r3, #20
 801ea00:	fb03 1302 	mla	r3, r3, r2, r1
 801ea04:	6858      	ldr	r0, [r3, #4]
 801ea06:	2800      	cmp	r0, #0
 801ea08:	d035      	beq.n	801ea76 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ea0a:	491d      	ldr	r1, [pc, #116]	; (801ea80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ea0c:	6809      	ldr	r1, [r1, #0]
 801ea0e:	2900      	cmp	r1, #0
 801ea10:	d031      	beq.n	801ea76 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ea12:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ea16:	b371      	cbz	r1, 801ea76 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ea18:	895a      	ldrh	r2, [r3, #10]
 801ea1a:	8918      	ldrh	r0, [r3, #8]
 801ea1c:	4350      	muls	r0, r2
 801ea1e:	7c5a      	ldrb	r2, [r3, #17]
 801ea20:	7cdb      	ldrb	r3, [r3, #19]
 801ea22:	0952      	lsrs	r2, r2, #5
 801ea24:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ea28:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ea2c:	2b0b      	cmp	r3, #11
 801ea2e:	bf18      	it	ne
 801ea30:	0040      	lslne	r0, r0, #1
 801ea32:	3003      	adds	r0, #3
 801ea34:	f020 0003 	bic.w	r0, r0, #3
 801ea38:	4408      	add	r0, r1
 801ea3a:	4770      	bx	lr
 801ea3c:	4911      	ldr	r1, [pc, #68]	; (801ea84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ea3e:	8809      	ldrh	r1, [r1, #0]
 801ea40:	4419      	add	r1, r3
 801ea42:	428a      	cmp	r2, r1
 801ea44:	da16      	bge.n	801ea74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801ea46:	4910      	ldr	r1, [pc, #64]	; (801ea88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ea48:	1ad3      	subs	r3, r2, r3
 801ea4a:	200e      	movs	r0, #14
 801ea4c:	6809      	ldr	r1, [r1, #0]
 801ea4e:	fb00 1303 	mla	r3, r0, r3, r1
 801ea52:	7b19      	ldrb	r1, [r3, #12]
 801ea54:	f001 011f 	and.w	r1, r1, #31
 801ea58:	290b      	cmp	r1, #11
 801ea5a:	d10b      	bne.n	801ea74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801ea5c:	8919      	ldrh	r1, [r3, #8]
 801ea5e:	8958      	ldrh	r0, [r3, #10]
 801ea60:	4b07      	ldr	r3, [pc, #28]	; (801ea80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ea62:	4348      	muls	r0, r1
 801ea64:	6819      	ldr	r1, [r3, #0]
 801ea66:	3003      	adds	r0, #3
 801ea68:	f020 0303 	bic.w	r3, r0, #3
 801ea6c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ea70:	4418      	add	r0, r3
 801ea72:	4770      	bx	lr
 801ea74:	2000      	movs	r0, #0
 801ea76:	4770      	bx	lr
 801ea78:	2000b4dc 	.word	0x2000b4dc
 801ea7c:	2000b4e4 	.word	0x2000b4e4
 801ea80:	2000b4c0 	.word	0x2000b4c0
 801ea84:	2000b4e0 	.word	0x2000b4e0
 801ea88:	2000b4c4 	.word	0x2000b4c4

0801ea8c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801ea8c:	4b19      	ldr	r3, [pc, #100]	; (801eaf4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801ea8e:	6819      	ldr	r1, [r3, #0]
 801ea90:	8803      	ldrh	r3, [r0, #0]
 801ea92:	b1e9      	cbz	r1, 801ead0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801ea94:	4a18      	ldr	r2, [pc, #96]	; (801eaf8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801ea96:	8812      	ldrh	r2, [r2, #0]
 801ea98:	429a      	cmp	r2, r3
 801ea9a:	d90a      	bls.n	801eab2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801ea9c:	2214      	movs	r2, #20
 801ea9e:	fb02 1303 	mla	r3, r2, r3, r1
 801eaa2:	7c58      	ldrb	r0, [r3, #17]
 801eaa4:	0942      	lsrs	r2, r0, #5
 801eaa6:	7cd8      	ldrb	r0, [r3, #19]
 801eaa8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801eaac:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801eab0:	4770      	bx	lr
 801eab2:	4912      	ldr	r1, [pc, #72]	; (801eafc <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801eab4:	8809      	ldrh	r1, [r1, #0]
 801eab6:	4411      	add	r1, r2
 801eab8:	428b      	cmp	r3, r1
 801eaba:	da09      	bge.n	801ead0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801eabc:	1a9b      	subs	r3, r3, r2
 801eabe:	4a10      	ldr	r2, [pc, #64]	; (801eb00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801eac0:	210e      	movs	r1, #14
 801eac2:	6812      	ldr	r2, [r2, #0]
 801eac4:	fb01 2303 	mla	r3, r1, r3, r2
 801eac8:	7b18      	ldrb	r0, [r3, #12]
 801eaca:	f000 001f 	and.w	r0, r0, #31
 801eace:	4770      	bx	lr
 801ead0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ead4:	4293      	cmp	r3, r2
 801ead6:	d10a      	bne.n	801eaee <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801ead8:	4b0a      	ldr	r3, [pc, #40]	; (801eb04 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801eada:	681b      	ldr	r3, [r3, #0]
 801eadc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801eae0:	b10a      	cbz	r2, 801eae6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801eae2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801eae4:	b900      	cbnz	r0, 801eae8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801eae6:	6898      	ldr	r0, [r3, #8]
 801eae8:	6803      	ldr	r3, [r0, #0]
 801eaea:	6a1b      	ldr	r3, [r3, #32]
 801eaec:	4718      	bx	r3
 801eaee:	2000      	movs	r0, #0
 801eaf0:	4770      	bx	lr
 801eaf2:	bf00      	nop
 801eaf4:	2000b4e4 	.word	0x2000b4e4
 801eaf8:	2000b4dc 	.word	0x2000b4dc
 801eafc:	2000b4e0 	.word	0x2000b4e0
 801eb00:	2000b4c4 	.word	0x2000b4c4
 801eb04:	2000b41c 	.word	0x2000b41c

0801eb08 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801eb08:	2018      	movs	r0, #24
 801eb0a:	4770      	bx	lr

0801eb0c <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801eb0c:	2001      	movs	r0, #1
 801eb0e:	4770      	bx	lr

0801eb10 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801eb10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801eb14:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801eb18:	4770      	bx	lr

0801eb1a <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801eb1a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801eb1e:	4770      	bx	lr

0801eb20 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801eb20:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801eb24:	4770      	bx	lr

0801eb26 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801eb26:	b2c8      	uxtb	r0, r1
 801eb28:	4770      	bx	lr

0801eb2a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801eb2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb2e:	b085      	sub	sp, #20
 801eb30:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801eb32:	9203      	str	r2, [sp, #12]
 801eb34:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801eb38:	6878      	ldr	r0, [r7, #4]
 801eb3a:	9201      	str	r2, [sp, #4]
 801eb3c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801eb3e:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801eb42:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801eb46:	fa1f fc84 	uxth.w	ip, r4
 801eb4a:	43e4      	mvns	r4, r4
 801eb4c:	9100      	str	r1, [sp, #0]
 801eb4e:	b2e4      	uxtb	r4, r4
 801eb50:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801eb54:	fb00 2505 	mla	r5, r0, r5, r2
 801eb58:	683a      	ldr	r2, [r7, #0]
 801eb5a:	6877      	ldr	r7, [r6, #4]
 801eb5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eb60:	3704      	adds	r7, #4
 801eb62:	4415      	add	r5, r2
 801eb64:	6832      	ldr	r2, [r6, #0]
 801eb66:	9202      	str	r2, [sp, #8]
 801eb68:	9a00      	ldr	r2, [sp, #0]
 801eb6a:	2a00      	cmp	r2, #0
 801eb6c:	dc03      	bgt.n	801eb76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801eb6e:	9a03      	ldr	r2, [sp, #12]
 801eb70:	2a00      	cmp	r2, #0
 801eb72:	f340 8116 	ble.w	801eda2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801eb76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eb78:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801eb7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eb7e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801eb82:	2b00      	cmp	r3, #0
 801eb84:	dd0f      	ble.n	801eba6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801eb86:	1406      	asrs	r6, r0, #16
 801eb88:	d406      	bmi.n	801eb98 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801eb8a:	4546      	cmp	r6, r8
 801eb8c:	da04      	bge.n	801eb98 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801eb8e:	1416      	asrs	r6, r2, #16
 801eb90:	d402      	bmi.n	801eb98 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801eb92:	9901      	ldr	r1, [sp, #4]
 801eb94:	428e      	cmp	r6, r1
 801eb96:	db07      	blt.n	801eba8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801eb98:	9911      	ldr	r1, [sp, #68]	; 0x44
 801eb9a:	3b01      	subs	r3, #1
 801eb9c:	3503      	adds	r5, #3
 801eb9e:	4408      	add	r0, r1
 801eba0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801eba2:	440a      	add	r2, r1
 801eba4:	e7ed      	b.n	801eb82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801eba6:	d011      	beq.n	801ebcc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801eba8:	1e5e      	subs	r6, r3, #1
 801ebaa:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ebac:	fb01 0e06 	mla	lr, r1, r6, r0
 801ebb0:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801ebb4:	d548      	bpl.n	801ec48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801ebb6:	4699      	mov	r9, r3
 801ebb8:	462e      	mov	r6, r5
 801ebba:	f1b9 0f00 	cmp.w	r9, #0
 801ebbe:	f300 809e 	bgt.w	801ecfe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801ebc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ebc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ebca:	441d      	add	r5, r3
 801ebcc:	9b00      	ldr	r3, [sp, #0]
 801ebce:	2b00      	cmp	r3, #0
 801ebd0:	f340 80e7 	ble.w	801eda2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801ebd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ebd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ebda:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ebde:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ebe2:	eef0 6a62 	vmov.f32	s13, s5
 801ebe6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ebea:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ebee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ebf2:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801ebf6:	eef0 6a43 	vmov.f32	s13, s6
 801ebfa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ebfe:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801ec02:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ec06:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ec0a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ec0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ec12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ec16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ec1a:	ee12 2a90 	vmov	r2, s5
 801ec1e:	eef0 2a47 	vmov.f32	s5, s14
 801ec22:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec26:	ee13 2a10 	vmov	r2, s6
 801ec2a:	9311      	str	r3, [sp, #68]	; 0x44
 801ec2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec2e:	eeb0 3a67 	vmov.f32	s6, s15
 801ec32:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec36:	9312      	str	r3, [sp, #72]	; 0x48
 801ec38:	9b00      	ldr	r3, [sp, #0]
 801ec3a:	9a03      	ldr	r2, [sp, #12]
 801ec3c:	3b01      	subs	r3, #1
 801ec3e:	9300      	str	r3, [sp, #0]
 801ec40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec42:	bf08      	it	eq
 801ec44:	4613      	moveq	r3, r2
 801ec46:	e78f      	b.n	801eb68 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801ec48:	45c6      	cmp	lr, r8
 801ec4a:	dab4      	bge.n	801ebb6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801ec4c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ec4e:	fb01 2606 	mla	r6, r1, r6, r2
 801ec52:	1436      	asrs	r6, r6, #16
 801ec54:	d4af      	bmi.n	801ebb6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801ec56:	9901      	ldr	r1, [sp, #4]
 801ec58:	428e      	cmp	r6, r1
 801ec5a:	daac      	bge.n	801ebb6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801ec5c:	1cee      	adds	r6, r5, #3
 801ec5e:	4699      	mov	r9, r3
 801ec60:	f1b9 0f00 	cmp.w	r9, #0
 801ec64:	f106 0603 	add.w	r6, r6, #3
 801ec68:	ddab      	ble.n	801ebc2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801ec6a:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801ec6e:	9902      	ldr	r1, [sp, #8]
 801ec70:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801ec74:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801ec78:	fb08 1e0e 	mla	lr, r8, lr, r1
 801ec7c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ec7e:	fb1b fb04 	smulbb	fp, fp, r4
 801ec82:	f109 39ff 	add.w	r9, r9, #4294967295
 801ec86:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801ec8a:	4408      	add	r0, r1
 801ec8c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ec8e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ec92:	440a      	add	r2, r1
 801ec94:	eb07 0a0e 	add.w	sl, r7, lr
 801ec98:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801ec9c:	fb0e be0c 	mla	lr, lr, ip, fp
 801eca0:	fa1f fe8e 	uxth.w	lr, lr
 801eca4:	f10e 0b01 	add.w	fp, lr, #1
 801eca8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ecac:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801ecb0:	fb1b fb04 	smulbb	fp, fp, r4
 801ecb4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ecb8:	f806 ec06 	strb.w	lr, [r6, #-6]
 801ecbc:	f89a e001 	ldrb.w	lr, [sl, #1]
 801ecc0:	fb0e be0c 	mla	lr, lr, ip, fp
 801ecc4:	fa1f fe8e 	uxth.w	lr, lr
 801ecc8:	f10e 0b01 	add.w	fp, lr, #1
 801eccc:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ecd0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ecd4:	f806 ec05 	strb.w	lr, [r6, #-5]
 801ecd8:	f89a e002 	ldrb.w	lr, [sl, #2]
 801ecdc:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801ece0:	fb1a fa04 	smulbb	sl, sl, r4
 801ece4:	fb0e ae0c 	mla	lr, lr, ip, sl
 801ece8:	fa1f fe8e 	uxth.w	lr, lr
 801ecec:	f10e 0a01 	add.w	sl, lr, #1
 801ecf0:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801ecf4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ecf8:	f806 ec04 	strb.w	lr, [r6, #-4]
 801ecfc:	e7b0      	b.n	801ec60 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ecfe:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801ed02:	d446      	bmi.n	801ed92 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801ed04:	45c2      	cmp	sl, r8
 801ed06:	da44      	bge.n	801ed92 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801ed08:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801ed0c:	d441      	bmi.n	801ed92 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801ed0e:	9901      	ldr	r1, [sp, #4]
 801ed10:	458e      	cmp	lr, r1
 801ed12:	da3e      	bge.n	801ed92 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801ed14:	9902      	ldr	r1, [sp, #8]
 801ed16:	f896 b000 	ldrb.w	fp, [r6]
 801ed1a:	fb08 1e0e 	mla	lr, r8, lr, r1
 801ed1e:	fb1b fb04 	smulbb	fp, fp, r4
 801ed22:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801ed26:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ed2a:	eb07 0a0e 	add.w	sl, r7, lr
 801ed2e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801ed32:	fb0e be0c 	mla	lr, lr, ip, fp
 801ed36:	fa1f fe8e 	uxth.w	lr, lr
 801ed3a:	f10e 0b01 	add.w	fp, lr, #1
 801ed3e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ed42:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ed46:	fb1b fb04 	smulbb	fp, fp, r4
 801ed4a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ed4e:	f886 e000 	strb.w	lr, [r6]
 801ed52:	f89a e001 	ldrb.w	lr, [sl, #1]
 801ed56:	fb0e be0c 	mla	lr, lr, ip, fp
 801ed5a:	fa1f fe8e 	uxth.w	lr, lr
 801ed5e:	f10e 0b01 	add.w	fp, lr, #1
 801ed62:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ed66:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ed6a:	f886 e001 	strb.w	lr, [r6, #1]
 801ed6e:	f89a e002 	ldrb.w	lr, [sl, #2]
 801ed72:	f896 a002 	ldrb.w	sl, [r6, #2]
 801ed76:	fb1a fa04 	smulbb	sl, sl, r4
 801ed7a:	fb0e ae0c 	mla	lr, lr, ip, sl
 801ed7e:	fa1f fe8e 	uxth.w	lr, lr
 801ed82:	f10e 0a01 	add.w	sl, lr, #1
 801ed86:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801ed8a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ed8e:	f886 e002 	strb.w	lr, [r6, #2]
 801ed92:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ed94:	3603      	adds	r6, #3
 801ed96:	f109 39ff 	add.w	r9, r9, #4294967295
 801ed9a:	4408      	add	r0, r1
 801ed9c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ed9e:	440a      	add	r2, r1
 801eda0:	e70b      	b.n	801ebba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801eda2:	b005      	add	sp, #20
 801eda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eda8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801eda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edac:	b085      	sub	sp, #20
 801edae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801edb2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801edb4:	9203      	str	r2, [sp, #12]
 801edb6:	6870      	ldr	r0, [r6, #4]
 801edb8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801edba:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801edbe:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801edc2:	9101      	str	r1, [sp, #4]
 801edc4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801edc8:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801edcc:	fb00 2404 	mla	r4, r0, r4, r2
 801edd0:	6832      	ldr	r2, [r6, #0]
 801edd2:	686e      	ldr	r6, [r5, #4]
 801edd4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801edd8:	3604      	adds	r6, #4
 801edda:	4414      	add	r4, r2
 801eddc:	682a      	ldr	r2, [r5, #0]
 801edde:	9202      	str	r2, [sp, #8]
 801ede0:	9a01      	ldr	r2, [sp, #4]
 801ede2:	2a00      	cmp	r2, #0
 801ede4:	dc03      	bgt.n	801edee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801ede6:	9a03      	ldr	r2, [sp, #12]
 801ede8:	2a00      	cmp	r2, #0
 801edea:	f340 80b2 	ble.w	801ef52 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801edee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801edf0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801edf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801edf6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801edfa:	2b00      	cmp	r3, #0
 801edfc:	dd0c      	ble.n	801ee18 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801edfe:	1405      	asrs	r5, r0, #16
 801ee00:	d405      	bmi.n	801ee0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801ee02:	4575      	cmp	r5, lr
 801ee04:	da03      	bge.n	801ee0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801ee06:	1415      	asrs	r5, r2, #16
 801ee08:	d401      	bmi.n	801ee0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801ee0a:	4545      	cmp	r5, r8
 801ee0c:	db05      	blt.n	801ee1a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801ee0e:	4460      	add	r0, ip
 801ee10:	443a      	add	r2, r7
 801ee12:	3b01      	subs	r3, #1
 801ee14:	3403      	adds	r4, #3
 801ee16:	e7f0      	b.n	801edfa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801ee18:	d03d      	beq.n	801ee96 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801ee1a:	1e5d      	subs	r5, r3, #1
 801ee1c:	fb0c 0905 	mla	r9, ip, r5, r0
 801ee20:	ea5f 4929 	movs.w	r9, r9, asr #16
 801ee24:	d42c      	bmi.n	801ee80 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801ee26:	45f1      	cmp	r9, lr
 801ee28:	da2a      	bge.n	801ee80 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801ee2a:	fb07 2505 	mla	r5, r7, r5, r2
 801ee2e:	142d      	asrs	r5, r5, #16
 801ee30:	d426      	bmi.n	801ee80 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801ee32:	4545      	cmp	r5, r8
 801ee34:	da24      	bge.n	801ee80 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801ee36:	1ce5      	adds	r5, r4, #3
 801ee38:	469a      	mov	sl, r3
 801ee3a:	f1ba 0f00 	cmp.w	sl, #0
 801ee3e:	f105 0503 	add.w	r5, r5, #3
 801ee42:	dd23      	ble.n	801ee8c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801ee44:	ea4f 4922 	mov.w	r9, r2, asr #16
 801ee48:	9902      	ldr	r1, [sp, #8]
 801ee4a:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801ee4e:	443a      	add	r2, r7
 801ee50:	fb0e 1909 	mla	r9, lr, r9, r1
 801ee54:	4460      	add	r0, ip
 801ee56:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ee5a:	f819 900b 	ldrb.w	r9, [r9, fp]
 801ee5e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ee62:	eb06 0b09 	add.w	fp, r6, r9
 801ee66:	f816 9009 	ldrb.w	r9, [r6, r9]
 801ee6a:	f805 9c06 	strb.w	r9, [r5, #-6]
 801ee6e:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801ee72:	f805 9c05 	strb.w	r9, [r5, #-5]
 801ee76:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801ee7a:	f805 9c04 	strb.w	r9, [r5, #-4]
 801ee7e:	e7dc      	b.n	801ee3a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801ee80:	2500      	movs	r5, #0
 801ee82:	eba3 0905 	sub.w	r9, r3, r5
 801ee86:	f1b9 0f00 	cmp.w	r9, #0
 801ee8a:	dc3c      	bgt.n	801ef06 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801ee8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ee90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ee94:	441c      	add	r4, r3
 801ee96:	9b01      	ldr	r3, [sp, #4]
 801ee98:	2b00      	cmp	r3, #0
 801ee9a:	dd5a      	ble.n	801ef52 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801ee9c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eea2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eea6:	eeb0 6a62 	vmov.f32	s12, s5
 801eeaa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eeae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eeb2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eeb6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801eeba:	eeb0 6a43 	vmov.f32	s12, s6
 801eebe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eec2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801eec6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eeca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eece:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eed2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eed6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eeda:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eede:	ee12 2a90 	vmov	r2, s5
 801eee2:	eef0 2a47 	vmov.f32	s5, s14
 801eee6:	fb92 fcf3 	sdiv	ip, r2, r3
 801eeea:	ee13 2a10 	vmov	r2, s6
 801eeee:	eeb0 3a67 	vmov.f32	s6, s15
 801eef2:	fb92 f7f3 	sdiv	r7, r2, r3
 801eef6:	9b01      	ldr	r3, [sp, #4]
 801eef8:	9a03      	ldr	r2, [sp, #12]
 801eefa:	3b01      	subs	r3, #1
 801eefc:	9301      	str	r3, [sp, #4]
 801eefe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ef00:	bf08      	it	eq
 801ef02:	4613      	moveq	r3, r2
 801ef04:	e76c      	b.n	801ede0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801ef06:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801ef0a:	d41e      	bmi.n	801ef4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801ef0c:	45f2      	cmp	sl, lr
 801ef0e:	da1c      	bge.n	801ef4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801ef10:	ea5f 4922 	movs.w	r9, r2, asr #16
 801ef14:	d419      	bmi.n	801ef4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801ef16:	45c1      	cmp	r9, r8
 801ef18:	da17      	bge.n	801ef4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801ef1a:	9902      	ldr	r1, [sp, #8]
 801ef1c:	fb0e 1909 	mla	r9, lr, r9, r1
 801ef20:	f819 900a 	ldrb.w	r9, [r9, sl]
 801ef24:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ef28:	f816 b009 	ldrb.w	fp, [r6, r9]
 801ef2c:	eb06 0a09 	add.w	sl, r6, r9
 801ef30:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801ef34:	f804 b009 	strb.w	fp, [r4, r9]
 801ef38:	44a1      	add	r9, r4
 801ef3a:	f89a b001 	ldrb.w	fp, [sl, #1]
 801ef3e:	f889 b001 	strb.w	fp, [r9, #1]
 801ef42:	f89a a002 	ldrb.w	sl, [sl, #2]
 801ef46:	f889 a002 	strb.w	sl, [r9, #2]
 801ef4a:	4460      	add	r0, ip
 801ef4c:	443a      	add	r2, r7
 801ef4e:	3501      	adds	r5, #1
 801ef50:	e797      	b.n	801ee82 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801ef52:	b005      	add	sp, #20
 801ef54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef58 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ef58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef5c:	b087      	sub	sp, #28
 801ef5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ef62:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801ef64:	9204      	str	r2, [sp, #16]
 801ef66:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801ef6a:	6870      	ldr	r0, [r6, #4]
 801ef6c:	9205      	str	r2, [sp, #20]
 801ef6e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801ef70:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801ef74:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801ef78:	9101      	str	r1, [sp, #4]
 801ef7a:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801ef7e:	fb00 2505 	mla	r5, r0, r5, r2
 801ef82:	6832      	ldr	r2, [r6, #0]
 801ef84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ef88:	4415      	add	r5, r2
 801ef8a:	6822      	ldr	r2, [r4, #0]
 801ef8c:	9202      	str	r2, [sp, #8]
 801ef8e:	6862      	ldr	r2, [r4, #4]
 801ef90:	3204      	adds	r2, #4
 801ef92:	9203      	str	r2, [sp, #12]
 801ef94:	9a01      	ldr	r2, [sp, #4]
 801ef96:	2a00      	cmp	r2, #0
 801ef98:	dc03      	bgt.n	801efa2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801ef9a:	9a04      	ldr	r2, [sp, #16]
 801ef9c:	2a00      	cmp	r2, #0
 801ef9e:	f340 8124 	ble.w	801f1ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801efa2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801efa4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801efa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801efaa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801efae:	2b00      	cmp	r3, #0
 801efb0:	dd0e      	ble.n	801efd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801efb2:	1422      	asrs	r2, r4, #16
 801efb4:	d405      	bmi.n	801efc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801efb6:	4572      	cmp	r2, lr
 801efb8:	da03      	bge.n	801efc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801efba:	1402      	asrs	r2, r0, #16
 801efbc:	d401      	bmi.n	801efc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801efbe:	4542      	cmp	r2, r8
 801efc0:	db07      	blt.n	801efd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801efc2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801efc4:	3b01      	subs	r3, #1
 801efc6:	3503      	adds	r5, #3
 801efc8:	4414      	add	r4, r2
 801efca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801efcc:	4410      	add	r0, r2
 801efce:	e7ee      	b.n	801efae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801efd0:	d010      	beq.n	801eff4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801efd2:	1e5a      	subs	r2, r3, #1
 801efd4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801efd6:	fb06 4602 	mla	r6, r6, r2, r4
 801efda:	1436      	asrs	r6, r6, #16
 801efdc:	d546      	bpl.n	801f06c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801efde:	4699      	mov	r9, r3
 801efe0:	462f      	mov	r7, r5
 801efe2:	f1b9 0f00 	cmp.w	r9, #0
 801efe6:	f300 80a5 	bgt.w	801f134 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801efea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801efee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eff2:	441d      	add	r5, r3
 801eff4:	9b01      	ldr	r3, [sp, #4]
 801eff6:	2b00      	cmp	r3, #0
 801eff8:	f340 80f7 	ble.w	801f1ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801effc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f000:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f002:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f006:	eeb0 6a62 	vmov.f32	s12, s5
 801f00a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f00e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f012:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f016:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f01a:	eeb0 6a43 	vmov.f32	s12, s6
 801f01e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f022:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f026:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f02a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f02e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f032:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f036:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f03a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f03e:	ee12 2a90 	vmov	r2, s5
 801f042:	eef0 2a47 	vmov.f32	s5, s14
 801f046:	fb92 f3f3 	sdiv	r3, r2, r3
 801f04a:	ee13 2a10 	vmov	r2, s6
 801f04e:	9313      	str	r3, [sp, #76]	; 0x4c
 801f050:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f052:	eeb0 3a67 	vmov.f32	s6, s15
 801f056:	fb92 f3f3 	sdiv	r3, r2, r3
 801f05a:	9314      	str	r3, [sp, #80]	; 0x50
 801f05c:	9b01      	ldr	r3, [sp, #4]
 801f05e:	9a04      	ldr	r2, [sp, #16]
 801f060:	3b01      	subs	r3, #1
 801f062:	9301      	str	r3, [sp, #4]
 801f064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f066:	bf08      	it	eq
 801f068:	4613      	moveq	r3, r2
 801f06a:	e793      	b.n	801ef94 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801f06c:	4576      	cmp	r6, lr
 801f06e:	dab6      	bge.n	801efde <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801f070:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801f072:	fb06 0202 	mla	r2, r6, r2, r0
 801f076:	1412      	asrs	r2, r2, #16
 801f078:	d4b1      	bmi.n	801efde <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801f07a:	4542      	cmp	r2, r8
 801f07c:	daaf      	bge.n	801efde <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801f07e:	1cef      	adds	r7, r5, #3
 801f080:	4699      	mov	r9, r3
 801f082:	f1b9 0f00 	cmp.w	r9, #0
 801f086:	ddb0      	ble.n	801efea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801f088:	9902      	ldr	r1, [sp, #8]
 801f08a:	1402      	asrs	r2, r0, #16
 801f08c:	1426      	asrs	r6, r4, #16
 801f08e:	fb0e 1202 	mla	r2, lr, r2, r1
 801f092:	9903      	ldr	r1, [sp, #12]
 801f094:	5d92      	ldrb	r2, [r2, r6]
 801f096:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801f09a:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801f09e:	d041      	beq.n	801f124 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801f0a0:	9a05      	ldr	r2, [sp, #20]
 801f0a2:	fa5f fb86 	uxtb.w	fp, r6
 801f0a6:	fb02 fc0c 	mul.w	ip, r2, ip
 801f0aa:	f10c 0201 	add.w	r2, ip, #1
 801f0ae:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801f0b2:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801f0b6:	1212      	asrs	r2, r2, #8
 801f0b8:	fa1f fa82 	uxth.w	sl, r2
 801f0bc:	43d2      	mvns	r2, r2
 801f0be:	fb1b fb0a 	smulbb	fp, fp, sl
 801f0c2:	b2d2      	uxtb	r2, r2
 801f0c4:	fb0c bc02 	mla	ip, ip, r2, fp
 801f0c8:	fa1f fc8c 	uxth.w	ip, ip
 801f0cc:	f10c 0b01 	add.w	fp, ip, #1
 801f0d0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f0d4:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801f0d8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f0dc:	fb1b fb0a 	smulbb	fp, fp, sl
 801f0e0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f0e4:	fb16 fa0a 	smulbb	sl, r6, sl
 801f0e8:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801f0ec:	f807 cc03 	strb.w	ip, [r7, #-3]
 801f0f0:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801f0f4:	fb06 aa02 	mla	sl, r6, r2, sl
 801f0f8:	fb0c bc02 	mla	ip, ip, r2, fp
 801f0fc:	fa1f fa8a 	uxth.w	sl, sl
 801f100:	fa1f fc8c 	uxth.w	ip, ip
 801f104:	f10a 0601 	add.w	r6, sl, #1
 801f108:	f10c 0b01 	add.w	fp, ip, #1
 801f10c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801f110:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f114:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f118:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f11c:	f807 ac01 	strb.w	sl, [r7, #-1]
 801f120:	f807 cc02 	strb.w	ip, [r7, #-2]
 801f124:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f126:	3703      	adds	r7, #3
 801f128:	f109 39ff 	add.w	r9, r9, #4294967295
 801f12c:	4414      	add	r4, r2
 801f12e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f130:	4410      	add	r0, r2
 801f132:	e7a6      	b.n	801f082 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801f134:	1426      	asrs	r6, r4, #16
 801f136:	d450      	bmi.n	801f1da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f138:	4576      	cmp	r6, lr
 801f13a:	da4e      	bge.n	801f1da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f13c:	1402      	asrs	r2, r0, #16
 801f13e:	d44c      	bmi.n	801f1da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f140:	4542      	cmp	r2, r8
 801f142:	da4a      	bge.n	801f1da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f144:	9902      	ldr	r1, [sp, #8]
 801f146:	fb0e 1202 	mla	r2, lr, r2, r1
 801f14a:	9903      	ldr	r1, [sp, #12]
 801f14c:	5d92      	ldrb	r2, [r2, r6]
 801f14e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801f152:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801f156:	d040      	beq.n	801f1da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f158:	9a05      	ldr	r2, [sp, #20]
 801f15a:	fa5f fb86 	uxtb.w	fp, r6
 801f15e:	fb02 fc0c 	mul.w	ip, r2, ip
 801f162:	f10c 0201 	add.w	r2, ip, #1
 801f166:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801f16a:	f897 c000 	ldrb.w	ip, [r7]
 801f16e:	1212      	asrs	r2, r2, #8
 801f170:	fa1f fa82 	uxth.w	sl, r2
 801f174:	43d2      	mvns	r2, r2
 801f176:	fb1b fb0a 	smulbb	fp, fp, sl
 801f17a:	b2d2      	uxtb	r2, r2
 801f17c:	fb0c bc02 	mla	ip, ip, r2, fp
 801f180:	fa1f fc8c 	uxth.w	ip, ip
 801f184:	f10c 0b01 	add.w	fp, ip, #1
 801f188:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f18c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801f190:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f194:	fb1b fb0a 	smulbb	fp, fp, sl
 801f198:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f19c:	fb16 fa0a 	smulbb	sl, r6, sl
 801f1a0:	78be      	ldrb	r6, [r7, #2]
 801f1a2:	f887 c000 	strb.w	ip, [r7]
 801f1a6:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f1aa:	fb06 aa02 	mla	sl, r6, r2, sl
 801f1ae:	fb0c bc02 	mla	ip, ip, r2, fp
 801f1b2:	fa1f fa8a 	uxth.w	sl, sl
 801f1b6:	fa1f fc8c 	uxth.w	ip, ip
 801f1ba:	f10a 0601 	add.w	r6, sl, #1
 801f1be:	f10c 0b01 	add.w	fp, ip, #1
 801f1c2:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801f1c6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f1ca:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f1ce:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f1d2:	f887 a002 	strb.w	sl, [r7, #2]
 801f1d6:	f887 c001 	strb.w	ip, [r7, #1]
 801f1da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f1dc:	3703      	adds	r7, #3
 801f1de:	f109 39ff 	add.w	r9, r9, #4294967295
 801f1e2:	4414      	add	r4, r2
 801f1e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f1e6:	4410      	add	r0, r2
 801f1e8:	e6fb      	b.n	801efe2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801f1ea:	b007      	add	sp, #28
 801f1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f1f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1f4:	b085      	sub	sp, #20
 801f1f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f1fa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f1fc:	9203      	str	r2, [sp, #12]
 801f1fe:	6870      	ldr	r0, [r6, #4]
 801f200:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801f202:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801f206:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801f20a:	9100      	str	r1, [sp, #0]
 801f20c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f210:	fb00 2404 	mla	r4, r0, r4, r2
 801f214:	6832      	ldr	r2, [r6, #0]
 801f216:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f21a:	4414      	add	r4, r2
 801f21c:	682a      	ldr	r2, [r5, #0]
 801f21e:	9201      	str	r2, [sp, #4]
 801f220:	686a      	ldr	r2, [r5, #4]
 801f222:	3204      	adds	r2, #4
 801f224:	9202      	str	r2, [sp, #8]
 801f226:	9a00      	ldr	r2, [sp, #0]
 801f228:	2a00      	cmp	r2, #0
 801f22a:	dc03      	bgt.n	801f234 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801f22c:	9a03      	ldr	r2, [sp, #12]
 801f22e:	2a00      	cmp	r2, #0
 801f230:	f340 8131 	ble.w	801f496 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801f234:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f236:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f23a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f23c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f240:	2b00      	cmp	r3, #0
 801f242:	dd0e      	ble.n	801f262 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f244:	1405      	asrs	r5, r0, #16
 801f246:	d405      	bmi.n	801f254 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f248:	4575      	cmp	r5, lr
 801f24a:	da03      	bge.n	801f254 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f24c:	1415      	asrs	r5, r2, #16
 801f24e:	d401      	bmi.n	801f254 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f250:	4545      	cmp	r5, r8
 801f252:	db07      	blt.n	801f264 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801f254:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f256:	3b01      	subs	r3, #1
 801f258:	3403      	adds	r4, #3
 801f25a:	4428      	add	r0, r5
 801f25c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f25e:	442a      	add	r2, r5
 801f260:	e7ee      	b.n	801f240 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801f262:	d06f      	beq.n	801f344 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801f264:	1e5d      	subs	r5, r3, #1
 801f266:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f268:	fb06 0605 	mla	r6, r6, r5, r0
 801f26c:	1436      	asrs	r6, r6, #16
 801f26e:	d460      	bmi.n	801f332 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f270:	4576      	cmp	r6, lr
 801f272:	da5e      	bge.n	801f332 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f274:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f276:	fb06 2505 	mla	r5, r6, r5, r2
 801f27a:	142d      	asrs	r5, r5, #16
 801f27c:	d459      	bmi.n	801f332 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f27e:	4545      	cmp	r5, r8
 801f280:	da57      	bge.n	801f332 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f282:	1ce5      	adds	r5, r4, #3
 801f284:	469a      	mov	sl, r3
 801f286:	f1ba 0f00 	cmp.w	sl, #0
 801f28a:	dd56      	ble.n	801f33a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801f28c:	9901      	ldr	r1, [sp, #4]
 801f28e:	1416      	asrs	r6, r2, #16
 801f290:	1407      	asrs	r7, r0, #16
 801f292:	fb0e 1606 	mla	r6, lr, r6, r1
 801f296:	9902      	ldr	r1, [sp, #8]
 801f298:	5df6      	ldrb	r6, [r6, r7]
 801f29a:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801f29e:	0e37      	lsrs	r7, r6, #24
 801f2a0:	2fff      	cmp	r7, #255	; 0xff
 801f2a2:	f000 80ef 	beq.w	801f484 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801f2a6:	fa5f fc87 	uxtb.w	ip, r7
 801f2aa:	b3d7      	cbz	r7, 801f322 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801f2ac:	fa1f f78c 	uxth.w	r7, ip
 801f2b0:	ea6f 0c0c 	mvn.w	ip, ip
 801f2b4:	fa5f fb86 	uxtb.w	fp, r6
 801f2b8:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801f2bc:	fa5f fc8c 	uxtb.w	ip, ip
 801f2c0:	fb1b fb07 	smulbb	fp, fp, r7
 801f2c4:	fb09 b90c 	mla	r9, r9, ip, fp
 801f2c8:	fa1f f989 	uxth.w	r9, r9
 801f2cc:	f109 0b01 	add.w	fp, r9, #1
 801f2d0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f2d4:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801f2d8:	fb1b fb0c 	smulbb	fp, fp, ip
 801f2dc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f2e0:	f805 9c03 	strb.w	r9, [r5, #-3]
 801f2e4:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801f2e8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f2ec:	fb09 b907 	mla	r9, r9, r7, fp
 801f2f0:	fa1f f989 	uxth.w	r9, r9
 801f2f4:	f109 0b01 	add.w	fp, r9, #1
 801f2f8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f2fc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f300:	f805 9c02 	strb.w	r9, [r5, #-2]
 801f304:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801f308:	fb19 fc0c 	smulbb	ip, r9, ip
 801f30c:	fb06 c607 	mla	r6, r6, r7, ip
 801f310:	b2b6      	uxth	r6, r6
 801f312:	f106 0c01 	add.w	ip, r6, #1
 801f316:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801f31a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f31e:	f805 cc01 	strb.w	ip, [r5, #-1]
 801f322:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f324:	3503      	adds	r5, #3
 801f326:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f32a:	4408      	add	r0, r1
 801f32c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f32e:	440a      	add	r2, r1
 801f330:	e7a9      	b.n	801f286 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801f332:	2600      	movs	r6, #0
 801f334:	1b9d      	subs	r5, r3, r6
 801f336:	2d00      	cmp	r5, #0
 801f338:	dc40      	bgt.n	801f3bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801f33a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f33e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f342:	441c      	add	r4, r3
 801f344:	9b00      	ldr	r3, [sp, #0]
 801f346:	2b00      	cmp	r3, #0
 801f348:	f340 80a5 	ble.w	801f496 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801f34c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f352:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f356:	eeb0 6a62 	vmov.f32	s12, s5
 801f35a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f35e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f362:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f366:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f36a:	eeb0 6a43 	vmov.f32	s12, s6
 801f36e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f372:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f376:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f37a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f37e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f382:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f386:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f38a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f38e:	ee12 2a90 	vmov	r2, s5
 801f392:	eef0 2a47 	vmov.f32	s5, s14
 801f396:	fb92 f3f3 	sdiv	r3, r2, r3
 801f39a:	ee13 2a10 	vmov	r2, s6
 801f39e:	9311      	str	r3, [sp, #68]	; 0x44
 801f3a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f3a2:	eeb0 3a67 	vmov.f32	s6, s15
 801f3a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3aa:	9312      	str	r3, [sp, #72]	; 0x48
 801f3ac:	9b00      	ldr	r3, [sp, #0]
 801f3ae:	9a03      	ldr	r2, [sp, #12]
 801f3b0:	3b01      	subs	r3, #1
 801f3b2:	9300      	str	r3, [sp, #0]
 801f3b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f3b6:	bf08      	it	eq
 801f3b8:	4613      	moveq	r3, r2
 801f3ba:	e734      	b.n	801f226 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801f3bc:	1407      	asrs	r7, r0, #16
 801f3be:	d450      	bmi.n	801f462 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f3c0:	4577      	cmp	r7, lr
 801f3c2:	da4e      	bge.n	801f462 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f3c4:	1415      	asrs	r5, r2, #16
 801f3c6:	d44c      	bmi.n	801f462 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f3c8:	4545      	cmp	r5, r8
 801f3ca:	da4a      	bge.n	801f462 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f3cc:	9901      	ldr	r1, [sp, #4]
 801f3ce:	fb0e 1505 	mla	r5, lr, r5, r1
 801f3d2:	9902      	ldr	r1, [sp, #8]
 801f3d4:	5ded      	ldrb	r5, [r5, r7]
 801f3d6:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801f3da:	0e2f      	lsrs	r7, r5, #24
 801f3dc:	2fff      	cmp	r7, #255	; 0xff
 801f3de:	d046      	beq.n	801f46e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801f3e0:	fa5f f987 	uxtb.w	r9, r7
 801f3e4:	b3ef      	cbz	r7, 801f462 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f3e6:	fa1f fc89 	uxth.w	ip, r9
 801f3ea:	ea6f 0909 	mvn.w	r9, r9
 801f3ee:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801f3f2:	fa5f fb85 	uxtb.w	fp, r5
 801f3f6:	f814 a007 	ldrb.w	sl, [r4, r7]
 801f3fa:	fa5f f989 	uxtb.w	r9, r9
 801f3fe:	fb1b fb0c 	smulbb	fp, fp, ip
 801f402:	fb0a ba09 	mla	sl, sl, r9, fp
 801f406:	fa1f fa8a 	uxth.w	sl, sl
 801f40a:	f10a 0b01 	add.w	fp, sl, #1
 801f40e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801f412:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f416:	f804 a007 	strb.w	sl, [r4, r7]
 801f41a:	4427      	add	r7, r4
 801f41c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f420:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801f424:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f428:	fb1b fb09 	smulbb	fp, fp, r9
 801f42c:	fb0a ba0c 	mla	sl, sl, ip, fp
 801f430:	fa1f fa8a 	uxth.w	sl, sl
 801f434:	f10a 0b01 	add.w	fp, sl, #1
 801f438:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801f43c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f440:	f887 a001 	strb.w	sl, [r7, #1]
 801f444:	f897 a002 	ldrb.w	sl, [r7, #2]
 801f448:	fb1a f909 	smulbb	r9, sl, r9
 801f44c:	fb05 950c 	mla	r5, r5, ip, r9
 801f450:	b2ad      	uxth	r5, r5
 801f452:	f105 0901 	add.w	r9, r5, #1
 801f456:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801f45a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f45e:	f887 9002 	strb.w	r9, [r7, #2]
 801f462:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f464:	3601      	adds	r6, #1
 801f466:	4408      	add	r0, r1
 801f468:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f46a:	440a      	add	r2, r1
 801f46c:	e762      	b.n	801f334 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801f46e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801f472:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801f476:	55e5      	strb	r5, [r4, r7]
 801f478:	4427      	add	r7, r4
 801f47a:	0c2d      	lsrs	r5, r5, #16
 801f47c:	f887 c001 	strb.w	ip, [r7, #1]
 801f480:	70bd      	strb	r5, [r7, #2]
 801f482:	e7ee      	b.n	801f462 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f484:	0a37      	lsrs	r7, r6, #8
 801f486:	f805 6c03 	strb.w	r6, [r5, #-3]
 801f48a:	0c36      	lsrs	r6, r6, #16
 801f48c:	f805 7c02 	strb.w	r7, [r5, #-2]
 801f490:	f805 6c01 	strb.w	r6, [r5, #-1]
 801f494:	e745      	b.n	801f322 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801f496:	b005      	add	sp, #20
 801f498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f49c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f49c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4a0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f4a2:	9201      	str	r2, [sp, #4]
 801f4a4:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801f4a8:	6870      	ldr	r0, [r6, #4]
 801f4aa:	9200      	str	r2, [sp, #0]
 801f4ac:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801f4b0:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801f4b4:	fa1f fc85 	uxth.w	ip, r5
 801f4b8:	43ed      	mvns	r5, r5
 801f4ba:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801f4be:	b2ed      	uxtb	r5, r5
 801f4c0:	fb00 2404 	mla	r4, r0, r4, r2
 801f4c4:	6832      	ldr	r2, [r6, #0]
 801f4c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f4ca:	4414      	add	r4, r2
 801f4cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f4ce:	f8d2 8000 	ldr.w	r8, [r2]
 801f4d2:	2900      	cmp	r1, #0
 801f4d4:	dc03      	bgt.n	801f4de <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801f4d6:	9a01      	ldr	r2, [sp, #4]
 801f4d8:	2a00      	cmp	r2, #0
 801f4da:	f340 8104 	ble.w	801f6e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f4de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f4e0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f4e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f4e6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f4ea:	2b00      	cmp	r3, #0
 801f4ec:	dd0f      	ble.n	801f50e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f4ee:	1406      	asrs	r6, r0, #16
 801f4f0:	d406      	bmi.n	801f500 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f4f2:	4576      	cmp	r6, lr
 801f4f4:	da04      	bge.n	801f500 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f4f6:	1416      	asrs	r6, r2, #16
 801f4f8:	d402      	bmi.n	801f500 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f4fa:	9f00      	ldr	r7, [sp, #0]
 801f4fc:	42be      	cmp	r6, r7
 801f4fe:	db07      	blt.n	801f510 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801f500:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f502:	3b01      	subs	r3, #1
 801f504:	3403      	adds	r4, #3
 801f506:	4430      	add	r0, r6
 801f508:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f50a:	4432      	add	r2, r6
 801f50c:	e7ed      	b.n	801f4ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801f50e:	d05f      	beq.n	801f5d0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801f510:	1e5e      	subs	r6, r3, #1
 801f512:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f514:	fb07 0706 	mla	r7, r7, r6, r0
 801f518:	143f      	asrs	r7, r7, #16
 801f51a:	d450      	bmi.n	801f5be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f51c:	4577      	cmp	r7, lr
 801f51e:	da4e      	bge.n	801f5be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f520:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f522:	fb07 2606 	mla	r6, r7, r6, r2
 801f526:	1436      	asrs	r6, r6, #16
 801f528:	d449      	bmi.n	801f5be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f52a:	9f00      	ldr	r7, [sp, #0]
 801f52c:	42be      	cmp	r6, r7
 801f52e:	da46      	bge.n	801f5be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f530:	1ce6      	adds	r6, r4, #3
 801f532:	4699      	mov	r9, r3
 801f534:	f1b9 0f00 	cmp.w	r9, #0
 801f538:	f106 0603 	add.w	r6, r6, #3
 801f53c:	dd43      	ble.n	801f5c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801f53e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801f542:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801f546:	1417      	asrs	r7, r2, #16
 801f548:	f109 39ff 	add.w	r9, r9, #4294967295
 801f54c:	fb1b fb05 	smulbb	fp, fp, r5
 801f550:	fb0e a707 	mla	r7, lr, r7, sl
 801f554:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f558:	eb08 0a07 	add.w	sl, r8, r7
 801f55c:	f818 7007 	ldrb.w	r7, [r8, r7]
 801f560:	fb07 b70c 	mla	r7, r7, ip, fp
 801f564:	b2bf      	uxth	r7, r7
 801f566:	f107 0b01 	add.w	fp, r7, #1
 801f56a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f56e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801f572:	fb1b fb05 	smulbb	fp, fp, r5
 801f576:	123f      	asrs	r7, r7, #8
 801f578:	f806 7c06 	strb.w	r7, [r6, #-6]
 801f57c:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801f580:	fb07 b70c 	mla	r7, r7, ip, fp
 801f584:	b2bf      	uxth	r7, r7
 801f586:	f107 0b01 	add.w	fp, r7, #1
 801f58a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f58e:	123f      	asrs	r7, r7, #8
 801f590:	f806 7c05 	strb.w	r7, [r6, #-5]
 801f594:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801f598:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801f59c:	fb1a fa05 	smulbb	sl, sl, r5
 801f5a0:	fb07 a70c 	mla	r7, r7, ip, sl
 801f5a4:	b2bf      	uxth	r7, r7
 801f5a6:	f107 0a01 	add.w	sl, r7, #1
 801f5aa:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801f5ae:	123f      	asrs	r7, r7, #8
 801f5b0:	f806 7c04 	strb.w	r7, [r6, #-4]
 801f5b4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f5b6:	4438      	add	r0, r7
 801f5b8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f5ba:	443a      	add	r2, r7
 801f5bc:	e7ba      	b.n	801f534 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801f5be:	2700      	movs	r7, #0
 801f5c0:	1bde      	subs	r6, r3, r7
 801f5c2:	2e00      	cmp	r6, #0
 801f5c4:	dc3f      	bgt.n	801f646 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801f5c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f5ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f5ce:	441c      	add	r4, r3
 801f5d0:	2900      	cmp	r1, #0
 801f5d2:	f340 8088 	ble.w	801f6e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f5d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f5da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f5dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f5e0:	3901      	subs	r1, #1
 801f5e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f5e6:	eef0 6a62 	vmov.f32	s13, s5
 801f5ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f5ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f5f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f5f6:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801f5fa:	eef0 6a43 	vmov.f32	s13, s6
 801f5fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f602:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801f606:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f60a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f60e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f612:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f616:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f61a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f61e:	ee12 2a90 	vmov	r2, s5
 801f622:	eef0 2a47 	vmov.f32	s5, s14
 801f626:	fb92 f3f3 	sdiv	r3, r2, r3
 801f62a:	ee13 2a10 	vmov	r2, s6
 801f62e:	930f      	str	r3, [sp, #60]	; 0x3c
 801f630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f632:	eeb0 3a67 	vmov.f32	s6, s15
 801f636:	fb92 f3f3 	sdiv	r3, r2, r3
 801f63a:	9a01      	ldr	r2, [sp, #4]
 801f63c:	9310      	str	r3, [sp, #64]	; 0x40
 801f63e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f640:	bf08      	it	eq
 801f642:	4613      	moveq	r3, r2
 801f644:	e745      	b.n	801f4d2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801f646:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801f64a:	d446      	bmi.n	801f6da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801f64c:	45f2      	cmp	sl, lr
 801f64e:	da44      	bge.n	801f6da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801f650:	ea5f 4922 	movs.w	r9, r2, asr #16
 801f654:	d441      	bmi.n	801f6da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801f656:	9e00      	ldr	r6, [sp, #0]
 801f658:	45b1      	cmp	r9, r6
 801f65a:	da3e      	bge.n	801f6da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801f65c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801f660:	fb0e a909 	mla	r9, lr, r9, sl
 801f664:	f814 b006 	ldrb.w	fp, [r4, r6]
 801f668:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f66c:	fb1b fb05 	smulbb	fp, fp, r5
 801f670:	eb08 0a09 	add.w	sl, r8, r9
 801f674:	f818 9009 	ldrb.w	r9, [r8, r9]
 801f678:	fb09 b90c 	mla	r9, r9, ip, fp
 801f67c:	fa1f f989 	uxth.w	r9, r9
 801f680:	f109 0b01 	add.w	fp, r9, #1
 801f684:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f688:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f68c:	f804 9006 	strb.w	r9, [r4, r6]
 801f690:	4426      	add	r6, r4
 801f692:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801f696:	f896 b001 	ldrb.w	fp, [r6, #1]
 801f69a:	fb1b fb05 	smulbb	fp, fp, r5
 801f69e:	fb09 b90c 	mla	r9, r9, ip, fp
 801f6a2:	fa1f f989 	uxth.w	r9, r9
 801f6a6:	f109 0b01 	add.w	fp, r9, #1
 801f6aa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f6ae:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f6b2:	f886 9001 	strb.w	r9, [r6, #1]
 801f6b6:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801f6ba:	f896 a002 	ldrb.w	sl, [r6, #2]
 801f6be:	fb1a fa05 	smulbb	sl, sl, r5
 801f6c2:	fb09 a90c 	mla	r9, r9, ip, sl
 801f6c6:	fa1f f989 	uxth.w	r9, r9
 801f6ca:	f109 0a01 	add.w	sl, r9, #1
 801f6ce:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f6d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f6d6:	f886 9002 	strb.w	r9, [r6, #2]
 801f6da:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f6dc:	3701      	adds	r7, #1
 801f6de:	4430      	add	r0, r6
 801f6e0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f6e2:	4432      	add	r2, r6
 801f6e4:	e76c      	b.n	801f5c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801f6e6:	b003      	add	sp, #12
 801f6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f6ec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f6ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6f0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f6f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f6f6:	9201      	str	r2, [sp, #4]
 801f6f8:	6868      	ldr	r0, [r5, #4]
 801f6fa:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801f6fe:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801f702:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801f706:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801f70a:	fb00 2404 	mla	r4, r0, r4, r2
 801f70e:	682a      	ldr	r2, [r5, #0]
 801f710:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f714:	4414      	add	r4, r2
 801f716:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f718:	f8d2 9000 	ldr.w	r9, [r2]
 801f71c:	2900      	cmp	r1, #0
 801f71e:	dc03      	bgt.n	801f728 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801f720:	9a01      	ldr	r2, [sp, #4]
 801f722:	2a00      	cmp	r2, #0
 801f724:	f340 80a8 	ble.w	801f878 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801f728:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f72a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f72e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f730:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f734:	2b00      	cmp	r3, #0
 801f736:	dd0c      	ble.n	801f752 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801f738:	1405      	asrs	r5, r0, #16
 801f73a:	d405      	bmi.n	801f748 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801f73c:	4565      	cmp	r5, ip
 801f73e:	da03      	bge.n	801f748 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801f740:	1415      	asrs	r5, r2, #16
 801f742:	d401      	bmi.n	801f748 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801f744:	4575      	cmp	r5, lr
 801f746:	db05      	blt.n	801f754 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801f748:	4438      	add	r0, r7
 801f74a:	4432      	add	r2, r6
 801f74c:	3b01      	subs	r3, #1
 801f74e:	3403      	adds	r4, #3
 801f750:	e7f0      	b.n	801f734 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801f752:	d03a      	beq.n	801f7ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801f754:	1e5d      	subs	r5, r3, #1
 801f756:	fb07 0805 	mla	r8, r7, r5, r0
 801f75a:	ea5f 4828 	movs.w	r8, r8, asr #16
 801f75e:	d429      	bmi.n	801f7b4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f760:	45e0      	cmp	r8, ip
 801f762:	da27      	bge.n	801f7b4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f764:	fb06 2505 	mla	r5, r6, r5, r2
 801f768:	142d      	asrs	r5, r5, #16
 801f76a:	d423      	bmi.n	801f7b4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f76c:	4575      	cmp	r5, lr
 801f76e:	da21      	bge.n	801f7b4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f770:	f104 0803 	add.w	r8, r4, #3
 801f774:	469a      	mov	sl, r3
 801f776:	f1ba 0f00 	cmp.w	sl, #0
 801f77a:	f108 0803 	add.w	r8, r8, #3
 801f77e:	dd1f      	ble.n	801f7c0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801f780:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801f784:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f788:	1415      	asrs	r5, r2, #16
 801f78a:	4438      	add	r0, r7
 801f78c:	4432      	add	r2, r6
 801f78e:	fb0c b505 	mla	r5, ip, r5, fp
 801f792:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f796:	eb09 0b05 	add.w	fp, r9, r5
 801f79a:	f819 5005 	ldrb.w	r5, [r9, r5]
 801f79e:	f808 5c06 	strb.w	r5, [r8, #-6]
 801f7a2:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801f7a6:	f808 5c05 	strb.w	r5, [r8, #-5]
 801f7aa:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801f7ae:	f808 5c04 	strb.w	r5, [r8, #-4]
 801f7b2:	e7e0      	b.n	801f776 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801f7b4:	2500      	movs	r5, #0
 801f7b6:	eba3 0805 	sub.w	r8, r3, r5
 801f7ba:	f1b8 0f00 	cmp.w	r8, #0
 801f7be:	dc38      	bgt.n	801f832 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801f7c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f7c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f7c8:	441c      	add	r4, r3
 801f7ca:	2900      	cmp	r1, #0
 801f7cc:	dd54      	ble.n	801f878 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801f7ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f7d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f7d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f7d8:	3901      	subs	r1, #1
 801f7da:	eeb0 6a62 	vmov.f32	s12, s5
 801f7de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f7e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f7e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7ea:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801f7ee:	eeb0 6a43 	vmov.f32	s12, s6
 801f7f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7f6:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801f7fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f7fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f802:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f806:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f80a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f80e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f812:	ee12 2a90 	vmov	r2, s5
 801f816:	eef0 2a47 	vmov.f32	s5, s14
 801f81a:	fb92 f7f3 	sdiv	r7, r2, r3
 801f81e:	ee13 2a10 	vmov	r2, s6
 801f822:	eeb0 3a67 	vmov.f32	s6, s15
 801f826:	fb92 f6f3 	sdiv	r6, r2, r3
 801f82a:	9a01      	ldr	r2, [sp, #4]
 801f82c:	bf08      	it	eq
 801f82e:	4613      	moveq	r3, r2
 801f830:	e774      	b.n	801f71c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801f832:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801f836:	d41b      	bmi.n	801f870 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801f838:	45e2      	cmp	sl, ip
 801f83a:	da19      	bge.n	801f870 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801f83c:	ea5f 4822 	movs.w	r8, r2, asr #16
 801f840:	d416      	bmi.n	801f870 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801f842:	45f0      	cmp	r8, lr
 801f844:	da14      	bge.n	801f870 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801f846:	fb0c a808 	mla	r8, ip, r8, sl
 801f84a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f84e:	f819 b008 	ldrb.w	fp, [r9, r8]
 801f852:	eb09 0a08 	add.w	sl, r9, r8
 801f856:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801f85a:	f804 b008 	strb.w	fp, [r4, r8]
 801f85e:	44a0      	add	r8, r4
 801f860:	f89a b001 	ldrb.w	fp, [sl, #1]
 801f864:	f888 b001 	strb.w	fp, [r8, #1]
 801f868:	f89a a002 	ldrb.w	sl, [sl, #2]
 801f86c:	f888 a002 	strb.w	sl, [r8, #2]
 801f870:	4438      	add	r0, r7
 801f872:	4432      	add	r2, r6
 801f874:	3501      	adds	r5, #1
 801f876:	e79e      	b.n	801f7b6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801f878:	b003      	add	sp, #12
 801f87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f87e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f87e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f882:	b085      	sub	sp, #20
 801f884:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f888:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f88a:	9202      	str	r2, [sp, #8]
 801f88c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f890:	6860      	ldr	r0, [r4, #4]
 801f892:	9203      	str	r2, [sp, #12]
 801f894:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801f898:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801f89c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801f8a0:	fb00 2505 	mla	r5, r0, r5, r2
 801f8a4:	6822      	ldr	r2, [r4, #0]
 801f8a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f8aa:	4415      	add	r5, r2
 801f8ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f8ae:	6812      	ldr	r2, [r2, #0]
 801f8b0:	9201      	str	r2, [sp, #4]
 801f8b2:	2900      	cmp	r1, #0
 801f8b4:	dc03      	bgt.n	801f8be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801f8b6:	9a02      	ldr	r2, [sp, #8]
 801f8b8:	2a00      	cmp	r2, #0
 801f8ba:	f340 811c 	ble.w	801faf6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801f8be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f8c0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801f8c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f8c6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f8ca:	2b00      	cmp	r3, #0
 801f8cc:	dd0e      	ble.n	801f8ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f8ce:	1422      	asrs	r2, r4, #16
 801f8d0:	d405      	bmi.n	801f8de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801f8d2:	4572      	cmp	r2, lr
 801f8d4:	da03      	bge.n	801f8de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801f8d6:	1402      	asrs	r2, r0, #16
 801f8d8:	d401      	bmi.n	801f8de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801f8da:	4542      	cmp	r2, r8
 801f8dc:	db07      	blt.n	801f8ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801f8de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f8e0:	3b01      	subs	r3, #1
 801f8e2:	3503      	adds	r5, #3
 801f8e4:	4414      	add	r4, r2
 801f8e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f8e8:	4410      	add	r0, r2
 801f8ea:	e7ee      	b.n	801f8ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801f8ec:	d072      	beq.n	801f9d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801f8ee:	1e5a      	subs	r2, r3, #1
 801f8f0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f8f2:	fb06 4602 	mla	r6, r6, r2, r4
 801f8f6:	1436      	asrs	r6, r6, #16
 801f8f8:	d461      	bmi.n	801f9be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801f8fa:	4576      	cmp	r6, lr
 801f8fc:	da5f      	bge.n	801f9be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801f8fe:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f900:	fb06 0202 	mla	r2, r6, r2, r0
 801f904:	1412      	asrs	r2, r2, #16
 801f906:	d45a      	bmi.n	801f9be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801f908:	4542      	cmp	r2, r8
 801f90a:	da58      	bge.n	801f9be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801f90c:	1cef      	adds	r7, r5, #3
 801f90e:	4699      	mov	r9, r3
 801f910:	f1b9 0f00 	cmp.w	r9, #0
 801f914:	dd59      	ble.n	801f9ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801f916:	1426      	asrs	r6, r4, #16
 801f918:	1402      	asrs	r2, r0, #16
 801f91a:	fb0e 6202 	mla	r2, lr, r2, r6
 801f91e:	9e01      	ldr	r6, [sp, #4]
 801f920:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801f924:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801f928:	d041      	beq.n	801f9ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801f92a:	9a03      	ldr	r2, [sp, #12]
 801f92c:	fa5f fb86 	uxtb.w	fp, r6
 801f930:	fb02 fc0c 	mul.w	ip, r2, ip
 801f934:	f10c 0201 	add.w	r2, ip, #1
 801f938:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801f93c:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801f940:	1212      	asrs	r2, r2, #8
 801f942:	fa1f fa82 	uxth.w	sl, r2
 801f946:	43d2      	mvns	r2, r2
 801f948:	fb1b fb0a 	smulbb	fp, fp, sl
 801f94c:	b2d2      	uxtb	r2, r2
 801f94e:	fb0c bc02 	mla	ip, ip, r2, fp
 801f952:	fa1f fc8c 	uxth.w	ip, ip
 801f956:	f10c 0b01 	add.w	fp, ip, #1
 801f95a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f95e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801f962:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f966:	fb1b fb0a 	smulbb	fp, fp, sl
 801f96a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f96e:	fb16 fa0a 	smulbb	sl, r6, sl
 801f972:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801f976:	f807 cc03 	strb.w	ip, [r7, #-3]
 801f97a:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801f97e:	fb06 aa02 	mla	sl, r6, r2, sl
 801f982:	fb0c bc02 	mla	ip, ip, r2, fp
 801f986:	fa1f fa8a 	uxth.w	sl, sl
 801f98a:	fa1f fc8c 	uxth.w	ip, ip
 801f98e:	f10a 0601 	add.w	r6, sl, #1
 801f992:	f10c 0b01 	add.w	fp, ip, #1
 801f996:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801f99a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f99e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f9a2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f9a6:	f807 ac01 	strb.w	sl, [r7, #-1]
 801f9aa:	f807 cc02 	strb.w	ip, [r7, #-2]
 801f9ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f9b0:	3703      	adds	r7, #3
 801f9b2:	f109 39ff 	add.w	r9, r9, #4294967295
 801f9b6:	4414      	add	r4, r2
 801f9b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f9ba:	4410      	add	r0, r2
 801f9bc:	e7a8      	b.n	801f910 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801f9be:	f04f 0c00 	mov.w	ip, #0
 801f9c2:	eba3 020c 	sub.w	r2, r3, ip
 801f9c6:	2a00      	cmp	r2, #0
 801f9c8:	dc3d      	bgt.n	801fa46 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801f9ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f9ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f9d2:	441d      	add	r5, r3
 801f9d4:	2900      	cmp	r1, #0
 801f9d6:	f340 808e 	ble.w	801faf6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801f9da:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f9de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f9e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f9e4:	3901      	subs	r1, #1
 801f9e6:	eeb0 6a62 	vmov.f32	s12, s5
 801f9ea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f9ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f9f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9f6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f9fa:	eeb0 6a43 	vmov.f32	s12, s6
 801f9fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fa02:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fa06:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fa0a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fa0e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fa12:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fa16:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fa1a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fa1e:	ee12 2a90 	vmov	r2, s5
 801fa22:	eef0 2a47 	vmov.f32	s5, s14
 801fa26:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa2a:	ee13 2a10 	vmov	r2, s6
 801fa2e:	9311      	str	r3, [sp, #68]	; 0x44
 801fa30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa32:	eeb0 3a67 	vmov.f32	s6, s15
 801fa36:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa3a:	9a02      	ldr	r2, [sp, #8]
 801fa3c:	9312      	str	r3, [sp, #72]	; 0x48
 801fa3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa40:	bf08      	it	eq
 801fa42:	4613      	moveq	r3, r2
 801fa44:	e735      	b.n	801f8b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801fa46:	1426      	asrs	r6, r4, #16
 801fa48:	d44e      	bmi.n	801fae8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fa4a:	4576      	cmp	r6, lr
 801fa4c:	da4c      	bge.n	801fae8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fa4e:	1402      	asrs	r2, r0, #16
 801fa50:	d44a      	bmi.n	801fae8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fa52:	4542      	cmp	r2, r8
 801fa54:	da48      	bge.n	801fae8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fa56:	fb0e 6202 	mla	r2, lr, r2, r6
 801fa5a:	9e01      	ldr	r6, [sp, #4]
 801fa5c:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801fa60:	0e3a      	lsrs	r2, r7, #24
 801fa62:	d041      	beq.n	801fae8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801fa64:	9e03      	ldr	r6, [sp, #12]
 801fa66:	fa5f fb87 	uxtb.w	fp, r7
 801fa6a:	4372      	muls	r2, r6
 801fa6c:	1c56      	adds	r6, r2, #1
 801fa6e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fa72:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801fa76:	1212      	asrs	r2, r2, #8
 801fa78:	f815 9006 	ldrb.w	r9, [r5, r6]
 801fa7c:	fa1f fa82 	uxth.w	sl, r2
 801fa80:	43d2      	mvns	r2, r2
 801fa82:	fb1b fb0a 	smulbb	fp, fp, sl
 801fa86:	b2d2      	uxtb	r2, r2
 801fa88:	fb09 b902 	mla	r9, r9, r2, fp
 801fa8c:	fa1f f989 	uxth.w	r9, r9
 801fa90:	f109 0b01 	add.w	fp, r9, #1
 801fa94:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fa98:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801fa9c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801faa0:	fb1b fb0a 	smulbb	fp, fp, sl
 801faa4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801faa8:	fb17 fa0a 	smulbb	sl, r7, sl
 801faac:	f805 9006 	strb.w	r9, [r5, r6]
 801fab0:	442e      	add	r6, r5
 801fab2:	78b7      	ldrb	r7, [r6, #2]
 801fab4:	f896 9001 	ldrb.w	r9, [r6, #1]
 801fab8:	fb07 aa02 	mla	sl, r7, r2, sl
 801fabc:	fb09 b902 	mla	r9, r9, r2, fp
 801fac0:	fa1f fa8a 	uxth.w	sl, sl
 801fac4:	fa1f f989 	uxth.w	r9, r9
 801fac8:	f10a 0701 	add.w	r7, sl, #1
 801facc:	f109 0b01 	add.w	fp, r9, #1
 801fad0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fad4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801fad8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fadc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fae0:	f886 a002 	strb.w	sl, [r6, #2]
 801fae4:	f886 9001 	strb.w	r9, [r6, #1]
 801fae8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801faea:	f10c 0c01 	add.w	ip, ip, #1
 801faee:	4414      	add	r4, r2
 801faf0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801faf2:	4410      	add	r0, r2
 801faf4:	e765      	b.n	801f9c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801faf6:	b005      	add	sp, #20
 801faf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fafc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb00:	b085      	sub	sp, #20
 801fb02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fb06:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fb08:	9203      	str	r2, [sp, #12]
 801fb0a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801fb0e:	6860      	ldr	r0, [r4, #4]
 801fb10:	9201      	str	r2, [sp, #4]
 801fb12:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801fb16:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801fb1a:	fb00 2505 	mla	r5, r0, r5, r2
 801fb1e:	6822      	ldr	r2, [r4, #0]
 801fb20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fb24:	4415      	add	r5, r2
 801fb26:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fb28:	6812      	ldr	r2, [r2, #0]
 801fb2a:	9202      	str	r2, [sp, #8]
 801fb2c:	2900      	cmp	r1, #0
 801fb2e:	dc03      	bgt.n	801fb38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801fb30:	9a03      	ldr	r2, [sp, #12]
 801fb32:	2a00      	cmp	r2, #0
 801fb34:	f340 8122 	ble.w	801fd7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801fb38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fb3a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801fb3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fb40:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fb44:	2b00      	cmp	r3, #0
 801fb46:	dd0f      	ble.n	801fb68 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801fb48:	1422      	asrs	r2, r4, #16
 801fb4a:	d406      	bmi.n	801fb5a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801fb4c:	4572      	cmp	r2, lr
 801fb4e:	da04      	bge.n	801fb5a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801fb50:	1402      	asrs	r2, r0, #16
 801fb52:	d402      	bmi.n	801fb5a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801fb54:	9e01      	ldr	r6, [sp, #4]
 801fb56:	42b2      	cmp	r2, r6
 801fb58:	db07      	blt.n	801fb6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fb5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fb5c:	3b01      	subs	r3, #1
 801fb5e:	3503      	adds	r5, #3
 801fb60:	4414      	add	r4, r2
 801fb62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fb64:	4410      	add	r0, r2
 801fb66:	e7ed      	b.n	801fb44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801fb68:	d06e      	beq.n	801fc48 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801fb6a:	1e5a      	subs	r2, r3, #1
 801fb6c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fb6e:	fb06 4602 	mla	r6, r6, r2, r4
 801fb72:	1436      	asrs	r6, r6, #16
 801fb74:	d45d      	bmi.n	801fc32 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801fb76:	4576      	cmp	r6, lr
 801fb78:	da5b      	bge.n	801fc32 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801fb7a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801fb7c:	fb06 0202 	mla	r2, r6, r2, r0
 801fb80:	1412      	asrs	r2, r2, #16
 801fb82:	d456      	bmi.n	801fc32 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801fb84:	9e01      	ldr	r6, [sp, #4]
 801fb86:	42b2      	cmp	r2, r6
 801fb88:	da53      	bge.n	801fc32 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801fb8a:	1cee      	adds	r6, r5, #3
 801fb8c:	469a      	mov	sl, r3
 801fb8e:	f1ba 0f00 	cmp.w	sl, #0
 801fb92:	dd54      	ble.n	801fc3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801fb94:	1427      	asrs	r7, r4, #16
 801fb96:	1402      	asrs	r2, r0, #16
 801fb98:	fb0e 7202 	mla	r2, lr, r2, r7
 801fb9c:	9f02      	ldr	r7, [sp, #8]
 801fb9e:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801fba2:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801fba6:	d03c      	beq.n	801fc22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801fba8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fbac:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801fbb0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801fbb4:	fa5f f28c 	uxtb.w	r2, ip
 801fbb8:	b2ff      	uxtb	r7, r7
 801fbba:	f000 80d8 	beq.w	801fd6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801fbbe:	fa1f f882 	uxth.w	r8, r2
 801fbc2:	43d2      	mvns	r2, r2
 801fbc4:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801fbc8:	fb17 f708 	smulbb	r7, r7, r8
 801fbcc:	b2d2      	uxtb	r2, r2
 801fbce:	fb19 f908 	smulbb	r9, r9, r8
 801fbd2:	fb0c 7702 	mla	r7, ip, r2, r7
 801fbd6:	fb1b f808 	smulbb	r8, fp, r8
 801fbda:	b2bf      	uxth	r7, r7
 801fbdc:	f107 0c01 	add.w	ip, r7, #1
 801fbe0:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801fbe4:	123f      	asrs	r7, r7, #8
 801fbe6:	f806 7c03 	strb.w	r7, [r6, #-3]
 801fbea:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801fbee:	fb07 9902 	mla	r9, r7, r2, r9
 801fbf2:	fa1f f989 	uxth.w	r9, r9
 801fbf6:	f109 0701 	add.w	r7, r9, #1
 801fbfa:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801fbfe:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801fc02:	fb07 8802 	mla	r8, r7, r2, r8
 801fc06:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fc0a:	fa1f f888 	uxth.w	r8, r8
 801fc0e:	f806 9c02 	strb.w	r9, [r6, #-2]
 801fc12:	f108 0201 	add.w	r2, r8, #1
 801fc16:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801fc1a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fc1e:	f806 8c01 	strb.w	r8, [r6, #-1]
 801fc22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fc24:	3603      	adds	r6, #3
 801fc26:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fc2a:	4414      	add	r4, r2
 801fc2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fc2e:	4410      	add	r0, r2
 801fc30:	e7ad      	b.n	801fb8e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801fc32:	f04f 0c00 	mov.w	ip, #0
 801fc36:	eba3 020c 	sub.w	r2, r3, ip
 801fc3a:	2a00      	cmp	r2, #0
 801fc3c:	dc3d      	bgt.n	801fcba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801fc3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fc46:	441d      	add	r5, r3
 801fc48:	2900      	cmp	r1, #0
 801fc4a:	f340 8097 	ble.w	801fd7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801fc4e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fc54:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc58:	3901      	subs	r1, #1
 801fc5a:	eeb0 6a62 	vmov.f32	s12, s5
 801fc5e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fc62:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc6a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fc6e:	eeb0 6a43 	vmov.f32	s12, s6
 801fc72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc76:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fc7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fc7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc82:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc86:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc8e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fc92:	ee12 2a90 	vmov	r2, s5
 801fc96:	eef0 2a47 	vmov.f32	s5, s14
 801fc9a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc9e:	ee13 2a10 	vmov	r2, s6
 801fca2:	9311      	str	r3, [sp, #68]	; 0x44
 801fca4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fca6:	eeb0 3a67 	vmov.f32	s6, s15
 801fcaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcae:	9a03      	ldr	r2, [sp, #12]
 801fcb0:	9312      	str	r3, [sp, #72]	; 0x48
 801fcb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fcb4:	bf08      	it	eq
 801fcb6:	4613      	moveq	r3, r2
 801fcb8:	e738      	b.n	801fb2c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801fcba:	1426      	asrs	r6, r4, #16
 801fcbc:	d448      	bmi.n	801fd50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801fcbe:	4576      	cmp	r6, lr
 801fcc0:	da46      	bge.n	801fd50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801fcc2:	1402      	asrs	r2, r0, #16
 801fcc4:	d444      	bmi.n	801fd50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801fcc6:	9f01      	ldr	r7, [sp, #4]
 801fcc8:	42ba      	cmp	r2, r7
 801fcca:	da41      	bge.n	801fd50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801fccc:	fb0e 6202 	mla	r2, lr, r2, r6
 801fcd0:	9e02      	ldr	r6, [sp, #8]
 801fcd2:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801fcd6:	0e3a      	lsrs	r2, r7, #24
 801fcd8:	d03a      	beq.n	801fd50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801fcda:	2aff      	cmp	r2, #255	; 0xff
 801fcdc:	b2d6      	uxtb	r6, r2
 801fcde:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801fce2:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801fce6:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801fcea:	b2ff      	uxtb	r7, r7
 801fcec:	d037      	beq.n	801fd5e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801fcee:	fa1f f986 	uxth.w	r9, r6
 801fcf2:	4462      	add	r2, ip
 801fcf4:	43f6      	mvns	r6, r6
 801fcf6:	f815 8002 	ldrb.w	r8, [r5, r2]
 801fcfa:	fb17 f709 	smulbb	r7, r7, r9
 801fcfe:	fb1a fa09 	smulbb	sl, sl, r9
 801fd02:	b2f6      	uxtb	r6, r6
 801fd04:	fb1b f909 	smulbb	r9, fp, r9
 801fd08:	fb08 7706 	mla	r7, r8, r6, r7
 801fd0c:	b2bf      	uxth	r7, r7
 801fd0e:	f107 0801 	add.w	r8, r7, #1
 801fd12:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801fd16:	123f      	asrs	r7, r7, #8
 801fd18:	54af      	strb	r7, [r5, r2]
 801fd1a:	442a      	add	r2, r5
 801fd1c:	7857      	ldrb	r7, [r2, #1]
 801fd1e:	fb07 aa06 	mla	sl, r7, r6, sl
 801fd22:	fa1f fa8a 	uxth.w	sl, sl
 801fd26:	f10a 0701 	add.w	r7, sl, #1
 801fd2a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fd2e:	7897      	ldrb	r7, [r2, #2]
 801fd30:	fb07 9906 	mla	r9, r7, r6, r9
 801fd34:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fd38:	fa1f f989 	uxth.w	r9, r9
 801fd3c:	f882 a001 	strb.w	sl, [r2, #1]
 801fd40:	f109 0601 	add.w	r6, r9, #1
 801fd44:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801fd48:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fd4c:	f882 9002 	strb.w	r9, [r2, #2]
 801fd50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd52:	f10c 0c01 	add.w	ip, ip, #1
 801fd56:	4414      	add	r4, r2
 801fd58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fd5a:	4410      	add	r0, r2
 801fd5c:	e76b      	b.n	801fc36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801fd5e:	4462      	add	r2, ip
 801fd60:	54af      	strb	r7, [r5, r2]
 801fd62:	442a      	add	r2, r5
 801fd64:	f882 a001 	strb.w	sl, [r2, #1]
 801fd68:	f882 b002 	strb.w	fp, [r2, #2]
 801fd6c:	e7f0      	b.n	801fd50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801fd6e:	f806 7c03 	strb.w	r7, [r6, #-3]
 801fd72:	f806 9c02 	strb.w	r9, [r6, #-2]
 801fd76:	f806 bc01 	strb.w	fp, [r6, #-1]
 801fd7a:	e752      	b.n	801fc22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801fd7c:	b005      	add	sp, #20
 801fd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fd84 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd88:	b087      	sub	sp, #28
 801fd8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fd8e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fd90:	9204      	str	r2, [sp, #16]
 801fd92:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801fd96:	6860      	ldr	r0, [r4, #4]
 801fd98:	9205      	str	r2, [sp, #20]
 801fd9a:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801fd9e:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801fda2:	9101      	str	r1, [sp, #4]
 801fda4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801fda8:	fb00 2505 	mla	r5, r0, r5, r2
 801fdac:	6822      	ldr	r2, [r4, #0]
 801fdae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fdb2:	4415      	add	r5, r2
 801fdb4:	f10e 0201 	add.w	r2, lr, #1
 801fdb8:	f022 0201 	bic.w	r2, r2, #1
 801fdbc:	9202      	str	r2, [sp, #8]
 801fdbe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801fdc0:	6812      	ldr	r2, [r2, #0]
 801fdc2:	9203      	str	r2, [sp, #12]
 801fdc4:	9a01      	ldr	r2, [sp, #4]
 801fdc6:	2a00      	cmp	r2, #0
 801fdc8:	dc03      	bgt.n	801fdd2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801fdca:	9a04      	ldr	r2, [sp, #16]
 801fdcc:	2a00      	cmp	r2, #0
 801fdce:	f340 8132 	ble.w	8020036 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801fdd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fdd4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801fdd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fdda:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fdde:	2b00      	cmp	r3, #0
 801fde0:	dd0e      	ble.n	801fe00 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801fde2:	1422      	asrs	r2, r4, #16
 801fde4:	d405      	bmi.n	801fdf2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fde6:	4596      	cmp	lr, r2
 801fde8:	dd03      	ble.n	801fdf2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fdea:	1402      	asrs	r2, r0, #16
 801fdec:	d401      	bmi.n	801fdf2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fdee:	4542      	cmp	r2, r8
 801fdf0:	db07      	blt.n	801fe02 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801fdf2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fdf4:	3b01      	subs	r3, #1
 801fdf6:	3503      	adds	r5, #3
 801fdf8:	4414      	add	r4, r2
 801fdfa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fdfc:	4410      	add	r0, r2
 801fdfe:	e7ee      	b.n	801fdde <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801fe00:	d010      	beq.n	801fe24 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801fe02:	1e5a      	subs	r2, r3, #1
 801fe04:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801fe06:	fb06 4602 	mla	r6, r6, r2, r4
 801fe0a:	1436      	asrs	r6, r6, #16
 801fe0c:	d546      	bpl.n	801fe9c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801fe0e:	4699      	mov	r9, r3
 801fe10:	462e      	mov	r6, r5
 801fe12:	f1b9 0f00 	cmp.w	r9, #0
 801fe16:	f300 80ac 	bgt.w	801ff72 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801fe1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fe1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fe22:	441d      	add	r5, r3
 801fe24:	9b01      	ldr	r3, [sp, #4]
 801fe26:	2b00      	cmp	r3, #0
 801fe28:	f340 8105 	ble.w	8020036 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801fe2c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fe30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe32:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fe36:	eeb0 6a62 	vmov.f32	s12, s5
 801fe3a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fe3e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fe42:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe46:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801fe4a:	eeb0 6a43 	vmov.f32	s12, s6
 801fe4e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe52:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fe56:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fe5a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe5e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe62:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe66:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe6a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fe6e:	ee12 2a90 	vmov	r2, s5
 801fe72:	eef0 2a47 	vmov.f32	s5, s14
 801fe76:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe7a:	ee13 2a10 	vmov	r2, s6
 801fe7e:	9313      	str	r3, [sp, #76]	; 0x4c
 801fe80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe82:	eeb0 3a67 	vmov.f32	s6, s15
 801fe86:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe8a:	9314      	str	r3, [sp, #80]	; 0x50
 801fe8c:	9b01      	ldr	r3, [sp, #4]
 801fe8e:	9a04      	ldr	r2, [sp, #16]
 801fe90:	3b01      	subs	r3, #1
 801fe92:	9301      	str	r3, [sp, #4]
 801fe94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe96:	bf08      	it	eq
 801fe98:	4613      	moveq	r3, r2
 801fe9a:	e793      	b.n	801fdc4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801fe9c:	45b6      	cmp	lr, r6
 801fe9e:	ddb6      	ble.n	801fe0e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801fea0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801fea2:	fb06 0202 	mla	r2, r6, r2, r0
 801fea6:	1412      	asrs	r2, r2, #16
 801fea8:	d4b1      	bmi.n	801fe0e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801feaa:	4542      	cmp	r2, r8
 801feac:	daaf      	bge.n	801fe0e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801feae:	1cee      	adds	r6, r5, #3
 801feb0:	4699      	mov	r9, r3
 801feb2:	f1b9 0f00 	cmp.w	r9, #0
 801feb6:	ddb0      	ble.n	801fe1a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801feb8:	1422      	asrs	r2, r4, #16
 801feba:	9902      	ldr	r1, [sp, #8]
 801febc:	1407      	asrs	r7, r0, #16
 801febe:	fb01 2707 	mla	r7, r1, r7, r2
 801fec2:	9903      	ldr	r1, [sp, #12]
 801fec4:	087a      	lsrs	r2, r7, #1
 801fec6:	5c8a      	ldrb	r2, [r1, r2]
 801fec8:	07f9      	lsls	r1, r7, #31
 801feca:	bf54      	ite	pl
 801fecc:	f002 020f 	andpl.w	r2, r2, #15
 801fed0:	1112      	asrmi	r2, r2, #4
 801fed2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fed6:	b2d2      	uxtb	r2, r2
 801fed8:	2a00      	cmp	r2, #0
 801feda:	d042      	beq.n	801ff62 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801fedc:	4957      	ldr	r1, [pc, #348]	; (802003c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801fede:	680f      	ldr	r7, [r1, #0]
 801fee0:	9905      	ldr	r1, [sp, #20]
 801fee2:	fa5f fb87 	uxtb.w	fp, r7
 801fee6:	434a      	muls	r2, r1
 801fee8:	f102 0c01 	add.w	ip, r2, #1
 801feec:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801fef0:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801fef4:	1212      	asrs	r2, r2, #8
 801fef6:	fa1f fa82 	uxth.w	sl, r2
 801fefa:	43d2      	mvns	r2, r2
 801fefc:	fb1b fb0a 	smulbb	fp, fp, sl
 801ff00:	b2d2      	uxtb	r2, r2
 801ff02:	fb0c bc02 	mla	ip, ip, r2, fp
 801ff06:	fa1f fc8c 	uxth.w	ip, ip
 801ff0a:	f10c 0b01 	add.w	fp, ip, #1
 801ff0e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ff12:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ff16:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ff1a:	fb1b fb0a 	smulbb	fp, fp, sl
 801ff1e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ff22:	fb17 fa0a 	smulbb	sl, r7, sl
 801ff26:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801ff2a:	f806 cc03 	strb.w	ip, [r6, #-3]
 801ff2e:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801ff32:	fb07 aa02 	mla	sl, r7, r2, sl
 801ff36:	fb0c bc02 	mla	ip, ip, r2, fp
 801ff3a:	fa1f fa8a 	uxth.w	sl, sl
 801ff3e:	fa1f fc8c 	uxth.w	ip, ip
 801ff42:	f10a 0701 	add.w	r7, sl, #1
 801ff46:	f10c 0b01 	add.w	fp, ip, #1
 801ff4a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff4e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ff52:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ff56:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ff5a:	f806 ac01 	strb.w	sl, [r6, #-1]
 801ff5e:	f806 cc02 	strb.w	ip, [r6, #-2]
 801ff62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ff64:	3603      	adds	r6, #3
 801ff66:	f109 39ff 	add.w	r9, r9, #4294967295
 801ff6a:	4414      	add	r4, r2
 801ff6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ff6e:	4410      	add	r0, r2
 801ff70:	e79f      	b.n	801feb2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801ff72:	1422      	asrs	r2, r4, #16
 801ff74:	d457      	bmi.n	8020026 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ff76:	4596      	cmp	lr, r2
 801ff78:	dd55      	ble.n	8020026 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ff7a:	1407      	asrs	r7, r0, #16
 801ff7c:	d453      	bmi.n	8020026 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ff7e:	4547      	cmp	r7, r8
 801ff80:	da51      	bge.n	8020026 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ff82:	9902      	ldr	r1, [sp, #8]
 801ff84:	fb07 2701 	mla	r7, r7, r1, r2
 801ff88:	9903      	ldr	r1, [sp, #12]
 801ff8a:	087a      	lsrs	r2, r7, #1
 801ff8c:	07ff      	lsls	r7, r7, #31
 801ff8e:	5c8a      	ldrb	r2, [r1, r2]
 801ff90:	bf54      	ite	pl
 801ff92:	f002 020f 	andpl.w	r2, r2, #15
 801ff96:	1112      	asrmi	r2, r2, #4
 801ff98:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ff9c:	b2d2      	uxtb	r2, r2
 801ff9e:	2a00      	cmp	r2, #0
 801ffa0:	d041      	beq.n	8020026 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ffa2:	4926      	ldr	r1, [pc, #152]	; (802003c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801ffa4:	680f      	ldr	r7, [r1, #0]
 801ffa6:	9905      	ldr	r1, [sp, #20]
 801ffa8:	fa5f fb87 	uxtb.w	fp, r7
 801ffac:	434a      	muls	r2, r1
 801ffae:	f102 0c01 	add.w	ip, r2, #1
 801ffb2:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801ffb6:	f896 c000 	ldrb.w	ip, [r6]
 801ffba:	1212      	asrs	r2, r2, #8
 801ffbc:	fa1f fa82 	uxth.w	sl, r2
 801ffc0:	43d2      	mvns	r2, r2
 801ffc2:	fb1b fb0a 	smulbb	fp, fp, sl
 801ffc6:	b2d2      	uxtb	r2, r2
 801ffc8:	fb0c bc02 	mla	ip, ip, r2, fp
 801ffcc:	fa1f fc8c 	uxth.w	ip, ip
 801ffd0:	f10c 0b01 	add.w	fp, ip, #1
 801ffd4:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ffd8:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ffdc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ffe0:	fb1b fb0a 	smulbb	fp, fp, sl
 801ffe4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ffe8:	fb17 fa0a 	smulbb	sl, r7, sl
 801ffec:	78b7      	ldrb	r7, [r6, #2]
 801ffee:	f886 c000 	strb.w	ip, [r6]
 801fff2:	f896 c001 	ldrb.w	ip, [r6, #1]
 801fff6:	fb07 aa02 	mla	sl, r7, r2, sl
 801fffa:	fb0c bc02 	mla	ip, ip, r2, fp
 801fffe:	fa1f fa8a 	uxth.w	sl, sl
 8020002:	fa1f fc8c 	uxth.w	ip, ip
 8020006:	f10a 0701 	add.w	r7, sl, #1
 802000a:	f10c 0b01 	add.w	fp, ip, #1
 802000e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020012:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020016:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802001a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802001e:	f886 a002 	strb.w	sl, [r6, #2]
 8020022:	f886 c001 	strb.w	ip, [r6, #1]
 8020026:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020028:	3603      	adds	r6, #3
 802002a:	f109 39ff 	add.w	r9, r9, #4294967295
 802002e:	4414      	add	r4, r2
 8020030:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020032:	4410      	add	r0, r2
 8020034:	e6ed      	b.n	801fe12 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8020036:	b007      	add	sp, #28
 8020038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802003c:	2000b444 	.word	0x2000b444

08020040 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020044:	b087      	sub	sp, #28
 8020046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802004a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802004c:	9205      	str	r2, [sp, #20]
 802004e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8020052:	6860      	ldr	r0, [r4, #4]
 8020054:	9202      	str	r2, [sp, #8]
 8020056:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 802005a:	9101      	str	r1, [sp, #4]
 802005c:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 8020060:	fb00 2606 	mla	r6, r0, r6, r2
 8020064:	6822      	ldr	r2, [r4, #0]
 8020066:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802006a:	4416      	add	r6, r2
 802006c:	f108 0201 	add.w	r2, r8, #1
 8020070:	f022 0201 	bic.w	r2, r2, #1
 8020074:	9203      	str	r2, [sp, #12]
 8020076:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8020078:	6812      	ldr	r2, [r2, #0]
 802007a:	9204      	str	r2, [sp, #16]
 802007c:	9a01      	ldr	r2, [sp, #4]
 802007e:	2a00      	cmp	r2, #0
 8020080:	dc03      	bgt.n	802008a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8020082:	9a05      	ldr	r2, [sp, #20]
 8020084:	2a00      	cmp	r2, #0
 8020086:	f340 813a 	ble.w	80202fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 802008a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802008c:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8020090:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020092:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8020096:	2b00      	cmp	r3, #0
 8020098:	dd0f      	ble.n	80200ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 802009a:	142a      	asrs	r2, r5, #16
 802009c:	d406      	bmi.n	80200ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802009e:	4590      	cmp	r8, r2
 80200a0:	dd04      	ble.n	80200ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80200a2:	1422      	asrs	r2, r4, #16
 80200a4:	d402      	bmi.n	80200ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80200a6:	9802      	ldr	r0, [sp, #8]
 80200a8:	4282      	cmp	r2, r0
 80200aa:	db07      	blt.n	80200bc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 80200ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80200ae:	3b01      	subs	r3, #1
 80200b0:	3603      	adds	r6, #3
 80200b2:	4415      	add	r5, r2
 80200b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80200b6:	4414      	add	r4, r2
 80200b8:	e7ed      	b.n	8020096 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 80200ba:	d073      	beq.n	80201a4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 80200bc:	1e5a      	subs	r2, r3, #1
 80200be:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80200c0:	fb00 5002 	mla	r0, r0, r2, r5
 80200c4:	1400      	asrs	r0, r0, #16
 80200c6:	d464      	bmi.n	8020192 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 80200c8:	4580      	cmp	r8, r0
 80200ca:	dd62      	ble.n	8020192 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 80200cc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80200ce:	fb00 4202 	mla	r2, r0, r2, r4
 80200d2:	1412      	asrs	r2, r2, #16
 80200d4:	d45d      	bmi.n	8020192 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 80200d6:	9802      	ldr	r0, [sp, #8]
 80200d8:	4282      	cmp	r2, r0
 80200da:	da5a      	bge.n	8020192 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 80200dc:	1cf0      	adds	r0, r6, #3
 80200de:	469a      	mov	sl, r3
 80200e0:	f1ba 0f00 	cmp.w	sl, #0
 80200e4:	dd59      	ble.n	802019a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 80200e6:	142a      	asrs	r2, r5, #16
 80200e8:	9903      	ldr	r1, [sp, #12]
 80200ea:	1427      	asrs	r7, r4, #16
 80200ec:	fb01 2707 	mla	r7, r1, r7, r2
 80200f0:	9904      	ldr	r1, [sp, #16]
 80200f2:	087a      	lsrs	r2, r7, #1
 80200f4:	5c8a      	ldrb	r2, [r1, r2]
 80200f6:	07f9      	lsls	r1, r7, #31
 80200f8:	bf54      	ite	pl
 80200fa:	f002 020f 	andpl.w	r2, r2, #15
 80200fe:	1112      	asrmi	r2, r2, #4
 8020100:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020104:	b2d2      	uxtb	r2, r2
 8020106:	2a00      	cmp	r2, #0
 8020108:	d03b      	beq.n	8020182 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 802010a:	497e      	ldr	r1, [pc, #504]	; (8020304 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 802010c:	2aff      	cmp	r2, #255	; 0xff
 802010e:	680f      	ldr	r7, [r1, #0]
 8020110:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8020114:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8020118:	b2ff      	uxtb	r7, r7
 802011a:	f000 80e9 	beq.w	80202f0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 802011e:	fa1f fe82 	uxth.w	lr, r2
 8020122:	43d2      	mvns	r2, r2
 8020124:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8020128:	fb17 f70e 	smulbb	r7, r7, lr
 802012c:	b2d2      	uxtb	r2, r2
 802012e:	fb19 f90e 	smulbb	r9, r9, lr
 8020132:	fb0c 7702 	mla	r7, ip, r2, r7
 8020136:	fb1b fe0e 	smulbb	lr, fp, lr
 802013a:	b2bf      	uxth	r7, r7
 802013c:	f107 0c01 	add.w	ip, r7, #1
 8020140:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8020144:	123f      	asrs	r7, r7, #8
 8020146:	f800 7c03 	strb.w	r7, [r0, #-3]
 802014a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 802014e:	fb07 9902 	mla	r9, r7, r2, r9
 8020152:	fa1f f989 	uxth.w	r9, r9
 8020156:	f109 0701 	add.w	r7, r9, #1
 802015a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802015e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8020162:	fb07 ee02 	mla	lr, r7, r2, lr
 8020166:	ea4f 2929 	mov.w	r9, r9, asr #8
 802016a:	fa1f fe8e 	uxth.w	lr, lr
 802016e:	f800 9c02 	strb.w	r9, [r0, #-2]
 8020172:	f10e 0201 	add.w	r2, lr, #1
 8020176:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 802017a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802017e:	f800 ec01 	strb.w	lr, [r0, #-1]
 8020182:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020184:	3003      	adds	r0, #3
 8020186:	f10a 3aff 	add.w	sl, sl, #4294967295
 802018a:	4415      	add	r5, r2
 802018c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802018e:	4414      	add	r4, r2
 8020190:	e7a6      	b.n	80200e0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8020192:	2700      	movs	r7, #0
 8020194:	1bda      	subs	r2, r3, r7
 8020196:	2a00      	cmp	r2, #0
 8020198:	dc40      	bgt.n	802021c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 802019a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802019e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80201a2:	441e      	add	r6, r3
 80201a4:	9b01      	ldr	r3, [sp, #4]
 80201a6:	2b00      	cmp	r3, #0
 80201a8:	f340 80a9 	ble.w	80202fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 80201ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 80201b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80201b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80201b6:	eeb0 6a62 	vmov.f32	s12, s5
 80201ba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80201be:	ee31 1a05 	vadd.f32	s2, s2, s10
 80201c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80201c6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80201ca:	eeb0 6a43 	vmov.f32	s12, s6
 80201ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80201d2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80201d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80201da:	ee61 7a27 	vmul.f32	s15, s2, s15
 80201de:	ee77 2a62 	vsub.f32	s5, s14, s5
 80201e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80201e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80201ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80201ee:	ee12 2a90 	vmov	r2, s5
 80201f2:	eef0 2a47 	vmov.f32	s5, s14
 80201f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80201fa:	ee13 2a10 	vmov	r2, s6
 80201fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8020200:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020202:	eeb0 3a67 	vmov.f32	s6, s15
 8020206:	fb92 f3f3 	sdiv	r3, r2, r3
 802020a:	9314      	str	r3, [sp, #80]	; 0x50
 802020c:	9b01      	ldr	r3, [sp, #4]
 802020e:	9a05      	ldr	r2, [sp, #20]
 8020210:	3b01      	subs	r3, #1
 8020212:	9301      	str	r3, [sp, #4]
 8020214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020216:	bf08      	it	eq
 8020218:	4613      	moveq	r3, r2
 802021a:	e72f      	b.n	802007c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 802021c:	142a      	asrs	r2, r5, #16
 802021e:	d458      	bmi.n	80202d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8020220:	4590      	cmp	r8, r2
 8020222:	dd56      	ble.n	80202d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8020224:	1420      	asrs	r0, r4, #16
 8020226:	d454      	bmi.n	80202d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8020228:	9902      	ldr	r1, [sp, #8]
 802022a:	4288      	cmp	r0, r1
 802022c:	da51      	bge.n	80202d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 802022e:	9903      	ldr	r1, [sp, #12]
 8020230:	fb00 2001 	mla	r0, r0, r1, r2
 8020234:	9904      	ldr	r1, [sp, #16]
 8020236:	0842      	lsrs	r2, r0, #1
 8020238:	07c0      	lsls	r0, r0, #31
 802023a:	5c8a      	ldrb	r2, [r1, r2]
 802023c:	bf54      	ite	pl
 802023e:	f002 020f 	andpl.w	r2, r2, #15
 8020242:	1112      	asrmi	r2, r2, #4
 8020244:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020248:	b2d2      	uxtb	r2, r2
 802024a:	2a00      	cmp	r2, #0
 802024c:	d041      	beq.n	80202d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 802024e:	492d      	ldr	r1, [pc, #180]	; (8020304 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 8020250:	2aff      	cmp	r2, #255	; 0xff
 8020252:	6808      	ldr	r0, [r1, #0]
 8020254:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8020258:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 802025c:	fa5f fc80 	uxtb.w	ip, r0
 8020260:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8020264:	d03b      	beq.n	80202de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 8020266:	fa1f f982 	uxth.w	r9, r2
 802026a:	4438      	add	r0, r7
 802026c:	43d2      	mvns	r2, r2
 802026e:	f816 e000 	ldrb.w	lr, [r6, r0]
 8020272:	fb1c fc09 	smulbb	ip, ip, r9
 8020276:	fb1a fa09 	smulbb	sl, sl, r9
 802027a:	b2d2      	uxtb	r2, r2
 802027c:	fb1b f909 	smulbb	r9, fp, r9
 8020280:	fb0e cc02 	mla	ip, lr, r2, ip
 8020284:	fa1f fc8c 	uxth.w	ip, ip
 8020288:	f10c 0e01 	add.w	lr, ip, #1
 802028c:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8020290:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020294:	f806 c000 	strb.w	ip, [r6, r0]
 8020298:	4430      	add	r0, r6
 802029a:	f890 c001 	ldrb.w	ip, [r0, #1]
 802029e:	fb0c aa02 	mla	sl, ip, r2, sl
 80202a2:	fa1f fa8a 	uxth.w	sl, sl
 80202a6:	f10a 0c01 	add.w	ip, sl, #1
 80202aa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80202ae:	f890 c002 	ldrb.w	ip, [r0, #2]
 80202b2:	fb0c 9902 	mla	r9, ip, r2, r9
 80202b6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80202ba:	fa1f f989 	uxth.w	r9, r9
 80202be:	f880 a001 	strb.w	sl, [r0, #1]
 80202c2:	f109 0201 	add.w	r2, r9, #1
 80202c6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80202ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 80202ce:	f880 9002 	strb.w	r9, [r0, #2]
 80202d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80202d4:	3701      	adds	r7, #1
 80202d6:	4415      	add	r5, r2
 80202d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80202da:	4414      	add	r4, r2
 80202dc:	e75a      	b.n	8020194 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 80202de:	4438      	add	r0, r7
 80202e0:	f806 c000 	strb.w	ip, [r6, r0]
 80202e4:	4430      	add	r0, r6
 80202e6:	f880 a001 	strb.w	sl, [r0, #1]
 80202ea:	f880 b002 	strb.w	fp, [r0, #2]
 80202ee:	e7f0      	b.n	80202d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80202f0:	f800 7c03 	strb.w	r7, [r0, #-3]
 80202f4:	f800 9c02 	strb.w	r9, [r0, #-2]
 80202f8:	f800 bc01 	strb.w	fp, [r0, #-1]
 80202fc:	e741      	b.n	8020182 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 80202fe:	b007      	add	sp, #28
 8020300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020304:	2000b444 	.word	0x2000b444

08020308 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8020308:	4770      	bx	lr

0802030a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 802030a:	4770      	bx	lr

0802030c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 802030c:	4770      	bx	lr

0802030e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 802030e:	4770      	bx	lr

08020310 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020310:	4770      	bx	lr

08020312 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020312:	4770      	bx	lr

08020314 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020314:	4770      	bx	lr

08020316 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020316:	4770      	bx	lr

08020318 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020318:	4770      	bx	lr

0802031a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802031a:	4770      	bx	lr

0802031c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802031c:	4770      	bx	lr

0802031e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802031e:	4770      	bx	lr

08020320 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020320:	4770      	bx	lr

08020322 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020322:	4770      	bx	lr

08020324 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020324:	4770      	bx	lr

08020326 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020326:	4770      	bx	lr

08020328 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020328:	4770      	bx	lr

0802032a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802032a:	4770      	bx	lr

0802032c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802032c:	4770      	bx	lr

0802032e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802032e:	4770      	bx	lr

08020330 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8020330:	2bff      	cmp	r3, #255	; 0xff
 8020332:	b508      	push	{r3, lr}
 8020334:	d04f      	beq.n	80203d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8020336:	2a2c      	cmp	r2, #44	; 0x2c
 8020338:	d032      	beq.n	80203a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 802033a:	d80f      	bhi.n	802035c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 802033c:	2a08      	cmp	r2, #8
 802033e:	d046      	beq.n	80203ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8020340:	d805      	bhi.n	802034e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 8020342:	2a04      	cmp	r2, #4
 8020344:	d041      	beq.n	80203ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8020346:	2a05      	cmp	r2, #5
 8020348:	d03d      	beq.n	80203c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 802034a:	2000      	movs	r0, #0
 802034c:	e027      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802034e:	2a0a      	cmp	r2, #10
 8020350:	d03d      	beq.n	80203ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8020352:	d301      	bcc.n	8020358 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8020354:	2a0b      	cmp	r2, #11
 8020356:	d1f8      	bne.n	802034a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020358:	6c00      	ldr	r0, [r0, #64]	; 0x40
 802035a:	e020      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802035c:	2a30      	cmp	r2, #48	; 0x30
 802035e:	d038      	beq.n	80203d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8020360:	d808      	bhi.n	8020374 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 8020362:	2a2e      	cmp	r2, #46	; 0x2e
 8020364:	684b      	ldr	r3, [r1, #4]
 8020366:	d029      	beq.n	80203bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8020368:	d90b      	bls.n	8020382 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 802036a:	781b      	ldrb	r3, [r3, #0]
 802036c:	2b00      	cmp	r3, #0
 802036e:	d1ec      	bne.n	802034a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020370:	6a00      	ldr	r0, [r0, #32]
 8020372:	e014      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020374:	2a32      	cmp	r2, #50	; 0x32
 8020376:	d02c      	beq.n	80203d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8020378:	d301      	bcc.n	802037e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 802037a:	2a33      	cmp	r2, #51	; 0x33
 802037c:	d1e5      	bne.n	802034a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802037e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8020380:	e00d      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020382:	781b      	ldrb	r3, [r3, #0]
 8020384:	2b01      	cmp	r3, #1
 8020386:	d009      	beq.n	802039c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8020388:	d3f2      	bcc.n	8020370 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 802038a:	2b02      	cmp	r3, #2
 802038c:	d1dd      	bne.n	802034a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802038e:	4b39      	ldr	r3, [pc, #228]	; (8020474 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8020390:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8020394:	4a38      	ldr	r2, [pc, #224]	; (8020478 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8020396:	4839      	ldr	r0, [pc, #228]	; (802047c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8020398:	f008 f874 	bl	8028484 <__assert_func>
 802039c:	6900      	ldr	r0, [r0, #16]
 802039e:	bd08      	pop	{r3, pc}
 80203a0:	684b      	ldr	r3, [r1, #4]
 80203a2:	781b      	ldrb	r3, [r3, #0]
 80203a4:	2b01      	cmp	r3, #1
 80203a6:	d007      	beq.n	80203b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 80203a8:	d30b      	bcc.n	80203c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80203aa:	2b02      	cmp	r3, #2
 80203ac:	d1cd      	bne.n	802034a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80203ae:	4b31      	ldr	r3, [pc, #196]	; (8020474 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80203b0:	f44f 6181 	mov.w	r1, #1032	; 0x408
 80203b4:	4a30      	ldr	r2, [pc, #192]	; (8020478 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80203b6:	e7ee      	b.n	8020396 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80203b8:	6880      	ldr	r0, [r0, #8]
 80203ba:	e7f0      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80203bc:	781b      	ldrb	r3, [r3, #0]
 80203be:	2b00      	cmp	r3, #0
 80203c0:	d1c3      	bne.n	802034a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80203c2:	6980      	ldr	r0, [r0, #24]
 80203c4:	e7eb      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80203c6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80203c8:	e7e9      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80203ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80203cc:	e7e7      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80203ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80203d0:	e7e5      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80203d2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80203d4:	e7e3      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80203d6:	2a2c      	cmp	r2, #44	; 0x2c
 80203d8:	d030      	beq.n	802043c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 80203da:	d80f      	bhi.n	80203fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 80203dc:	2a08      	cmp	r2, #8
 80203de:	d044      	beq.n	802046a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80203e0:	d805      	bhi.n	80203ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 80203e2:	2a04      	cmp	r2, #4
 80203e4:	d03f      	beq.n	8020466 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 80203e6:	2a05      	cmp	r2, #5
 80203e8:	d1af      	bne.n	802034a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80203ea:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80203ec:	e7d7      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80203ee:	2a0a      	cmp	r2, #10
 80203f0:	d03b      	beq.n	802046a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80203f2:	d301      	bcc.n	80203f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 80203f4:	2a0b      	cmp	r2, #11
 80203f6:	d1a8      	bne.n	802034a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80203f8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80203fa:	e7d0      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80203fc:	2a30      	cmp	r2, #48	; 0x30
 80203fe:	d036      	beq.n	802046e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8020400:	d808      	bhi.n	8020414 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 8020402:	2a2e      	cmp	r2, #46	; 0x2e
 8020404:	684b      	ldr	r3, [r1, #4]
 8020406:	d028      	beq.n	802045a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8020408:	d90b      	bls.n	8020422 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 802040a:	781b      	ldrb	r3, [r3, #0]
 802040c:	2b00      	cmp	r3, #0
 802040e:	d19c      	bne.n	802034a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020410:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8020412:	e7c4      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020414:	2a32      	cmp	r2, #50	; 0x32
 8020416:	d02a      	beq.n	802046e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8020418:	d301      	bcc.n	802041e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 802041a:	2a33      	cmp	r2, #51	; 0x33
 802041c:	d195      	bne.n	802034a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802041e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8020420:	e7bd      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020422:	781b      	ldrb	r3, [r3, #0]
 8020424:	2b01      	cmp	r3, #1
 8020426:	d007      	beq.n	8020438 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8020428:	d3f2      	bcc.n	8020410 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 802042a:	2b02      	cmp	r3, #2
 802042c:	d18d      	bne.n	802034a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802042e:	4b11      	ldr	r3, [pc, #68]	; (8020474 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8020430:	f240 4139 	movw	r1, #1081	; 0x439
 8020434:	4a10      	ldr	r2, [pc, #64]	; (8020478 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8020436:	e7ae      	b.n	8020396 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8020438:	6940      	ldr	r0, [r0, #20]
 802043a:	e7b0      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802043c:	684b      	ldr	r3, [r1, #4]
 802043e:	781b      	ldrb	r3, [r3, #0]
 8020440:	2b01      	cmp	r3, #1
 8020442:	d008      	beq.n	8020456 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8020444:	d30d      	bcc.n	8020462 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8020446:	2b02      	cmp	r3, #2
 8020448:	f47f af7f 	bne.w	802034a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802044c:	4b09      	ldr	r3, [pc, #36]	; (8020474 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 802044e:	f240 4145 	movw	r1, #1093	; 0x445
 8020452:	4a09      	ldr	r2, [pc, #36]	; (8020478 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8020454:	e79f      	b.n	8020396 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8020456:	68c0      	ldr	r0, [r0, #12]
 8020458:	e7a1      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802045a:	781b      	ldrb	r3, [r3, #0]
 802045c:	2b00      	cmp	r3, #0
 802045e:	f47f af74 	bne.w	802034a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020462:	69c0      	ldr	r0, [r0, #28]
 8020464:	e79b      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020466:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8020468:	e799      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802046a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 802046c:	e797      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802046e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8020470:	e795      	b.n	802039e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020472:	bf00      	nop
 8020474:	0802dad3 	.word	0x0802dad3
 8020478:	0802e283 	.word	0x0802e283
 802047c:	0802db1f 	.word	0x0802db1f

08020480 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8020480:	b508      	push	{r3, lr}
 8020482:	4b06      	ldr	r3, [pc, #24]	; (802049c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8020484:	8818      	ldrh	r0, [r3, #0]
 8020486:	b928      	cbnz	r0, 8020494 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8020488:	4b05      	ldr	r3, [pc, #20]	; (80204a0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 802048a:	2155      	movs	r1, #85	; 0x55
 802048c:	4a05      	ldr	r2, [pc, #20]	; (80204a4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 802048e:	4806      	ldr	r0, [pc, #24]	; (80204a8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 8020490:	f007 fff8 	bl	8028484 <__assert_func>
 8020494:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020498:	b280      	uxth	r0, r0
 802049a:	bd08      	pop	{r3, pc}
 802049c:	2000b416 	.word	0x2000b416
 80204a0:	0802dd6c 	.word	0x0802dd6c
 80204a4:	0802e248 	.word	0x0802e248
 80204a8:	0802ddae 	.word	0x0802ddae

080204ac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80204ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204b0:	4616      	mov	r6, r2
 80204b2:	b087      	sub	sp, #28
 80204b4:	461f      	mov	r7, r3
 80204b6:	b34b      	cbz	r3, 802050c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80204b8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80204bc:	2b00      	cmp	r3, #0
 80204be:	dd25      	ble.n	802050c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80204c0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80204c4:	2b00      	cmp	r3, #0
 80204c6:	dd21      	ble.n	802050c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80204c8:	6808      	ldr	r0, [r1, #0]
 80204ca:	ab04      	add	r3, sp, #16
 80204cc:	6849      	ldr	r1, [r1, #4]
 80204ce:	4c5a      	ldr	r4, [pc, #360]	; (8020638 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 80204d0:	c303      	stmia	r3!, {r0, r1}
 80204d2:	a804      	add	r0, sp, #16
 80204d4:	f7fb fd12 	bl	801befc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80204d8:	6820      	ldr	r0, [r4, #0]
 80204da:	6803      	ldr	r3, [r0, #0]
 80204dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80204de:	4798      	blx	r3
 80204e0:	2fff      	cmp	r7, #255	; 0xff
 80204e2:	4623      	mov	r3, r4
 80204e4:	d015      	beq.n	8020512 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80204e6:	f010 0f08 	tst.w	r0, #8
 80204ea:	d015      	beq.n	8020518 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 80204ec:	6818      	ldr	r0, [r3, #0]
 80204ee:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80204f2:	6801      	ldr	r1, [r0, #0]
 80204f4:	9401      	str	r4, [sp, #4]
 80204f6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80204fa:	9702      	str	r7, [sp, #8]
 80204fc:	9400      	str	r4, [sp, #0]
 80204fe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020502:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8020504:	4631      	mov	r1, r6
 8020506:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802050a:	47a0      	blx	r4
 802050c:	b007      	add	sp, #28
 802050e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020512:	f010 0f02 	tst.w	r0, #2
 8020516:	e7e8      	b.n	80204ea <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3e>
 8020518:	6818      	ldr	r0, [r3, #0]
 802051a:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 802051e:	6803      	ldr	r3, [r0, #0]
 8020520:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8020524:	6a1b      	ldr	r3, [r3, #32]
 8020526:	4798      	blx	r3
 8020528:	4944      	ldr	r1, [pc, #272]	; (802063c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>)
 802052a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802052e:	2fff      	cmp	r7, #255	; 0xff
 8020530:	f8b1 c000 	ldrh.w	ip, [r1]
 8020534:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8020538:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802053c:	4688      	mov	r8, r1
 802053e:	fb0c 2303 	mla	r3, ip, r3, r2
 8020542:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8020546:	b2f2      	uxtb	r2, r6
 8020548:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 802054c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020550:	4418      	add	r0, r3
 8020552:	d112      	bne.n	802057a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xce>
 8020554:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020558:	2100      	movs	r1, #0
 802055a:	42a9      	cmp	r1, r5
 802055c:	da66      	bge.n	802062c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 802055e:	4603      	mov	r3, r0
 8020560:	2700      	movs	r7, #0
 8020562:	42a7      	cmp	r7, r4
 8020564:	f103 0303 	add.w	r3, r3, #3
 8020568:	da57      	bge.n	802061a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 802056a:	f803 2c03 	strb.w	r2, [r3, #-3]
 802056e:	3701      	adds	r7, #1
 8020570:	f803 ec02 	strb.w	lr, [r3, #-2]
 8020574:	f803 cc01 	strb.w	ip, [r3, #-1]
 8020578:	e7f3      	b.n	8020562 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 802057a:	b2bb      	uxth	r3, r7
 802057c:	f04f 0800 	mov.w	r8, #0
 8020580:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020584:	fb0c fc03 	mul.w	ip, ip, r3
 8020588:	fb0e fe03 	mul.w	lr, lr, r3
 802058c:	435a      	muls	r2, r3
 802058e:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 8020592:	460f      	mov	r7, r1
 8020594:	b29b      	uxth	r3, r3
 8020596:	45a8      	cmp	r8, r5
 8020598:	da48      	bge.n	802062c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 802059a:	4601      	mov	r1, r0
 802059c:	f04f 0a00 	mov.w	sl, #0
 80205a0:	45a2      	cmp	sl, r4
 80205a2:	f101 0103 	add.w	r1, r1, #3
 80205a6:	da2f      	bge.n	8020608 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>
 80205a8:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 80205ac:	f10a 0a01 	add.w	sl, sl, #1
 80205b0:	fb19 f903 	smulbb	r9, r9, r3
 80205b4:	4491      	add	r9, r2
 80205b6:	fa1f f989 	uxth.w	r9, r9
 80205ba:	f109 0b01 	add.w	fp, r9, #1
 80205be:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80205c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80205c6:	f801 9c03 	strb.w	r9, [r1, #-3]
 80205ca:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 80205ce:	fb19 f903 	smulbb	r9, r9, r3
 80205d2:	44f1      	add	r9, lr
 80205d4:	fa1f f989 	uxth.w	r9, r9
 80205d8:	f109 0b01 	add.w	fp, r9, #1
 80205dc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80205e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80205e4:	f801 9c02 	strb.w	r9, [r1, #-2]
 80205e8:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 80205ec:	fb19 f903 	smulbb	r9, r9, r3
 80205f0:	44e1      	add	r9, ip
 80205f2:	fa1f f989 	uxth.w	r9, r9
 80205f6:	f109 0b01 	add.w	fp, r9, #1
 80205fa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80205fe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020602:	f801 9c01 	strb.w	r9, [r1, #-1]
 8020606:	e7cb      	b.n	80205a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf4>
 8020608:	8839      	ldrh	r1, [r7, #0]
 802060a:	f108 0801 	add.w	r8, r8, #1
 802060e:	1b09      	subs	r1, r1, r4
 8020610:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020614:	4431      	add	r1, r6
 8020616:	4408      	add	r0, r1
 8020618:	e7bd      	b.n	8020596 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xea>
 802061a:	f8b8 3000 	ldrh.w	r3, [r8]
 802061e:	3101      	adds	r1, #1
 8020620:	1b1b      	subs	r3, r3, r4
 8020622:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020626:	4433      	add	r3, r6
 8020628:	4418      	add	r0, r3
 802062a:	e796      	b.n	802055a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xae>
 802062c:	4b02      	ldr	r3, [pc, #8]	; (8020638 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 802062e:	6818      	ldr	r0, [r3, #0]
 8020630:	6803      	ldr	r3, [r0, #0]
 8020632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020634:	4798      	blx	r3
 8020636:	e769      	b.n	802050c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8020638:	2000b41c 	.word	0x2000b41c
 802063c:	2000b416 	.word	0x2000b416

08020640 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020644:	b08d      	sub	sp, #52	; 0x34
 8020646:	460c      	mov	r4, r1
 8020648:	4617      	mov	r7, r2
 802064a:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 802064e:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 8020652:	2e00      	cmp	r6, #0
 8020654:	d04a      	beq.n	80206ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020656:	6810      	ldr	r0, [r2, #0]
 8020658:	ad08      	add	r5, sp, #32
 802065a:	6851      	ldr	r1, [r2, #4]
 802065c:	c503      	stmia	r5!, {r0, r1}
 802065e:	6818      	ldr	r0, [r3, #0]
 8020660:	ad0a      	add	r5, sp, #40	; 0x28
 8020662:	6859      	ldr	r1, [r3, #4]
 8020664:	c503      	stmia	r5!, {r0, r1}
 8020666:	a808      	add	r0, sp, #32
 8020668:	f7fb fc48 	bl	801befc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802066c:	4639      	mov	r1, r7
 802066e:	a80a      	add	r0, sp, #40	; 0x28
 8020670:	4f59      	ldr	r7, [pc, #356]	; (80207d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 8020672:	f7fb fc2b 	bl	801becc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020676:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 802067a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 802067e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8020682:	6838      	ldr	r0, [r7, #0]
 8020684:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020688:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 802068c:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 8020690:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020694:	440c      	add	r4, r1
 8020696:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 802069a:	440a      	add	r2, r1
 802069c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80206a0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80206a4:	4413      	add	r3, r2
 80206a6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80206aa:	6803      	ldr	r3, [r0, #0]
 80206ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80206ae:	4798      	blx	r3
 80206b0:	2eff      	cmp	r6, #255	; 0xff
 80206b2:	f000 8089 	beq.w	80207c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 80206b6:	0743      	lsls	r3, r0, #29
 80206b8:	d405      	bmi.n	80206c6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 80206ba:	f1b9 0f00 	cmp.w	r9, #0
 80206be:	d018      	beq.n	80206f2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80206c0:	f010 0f10 	tst.w	r0, #16
 80206c4:	d015      	beq.n	80206f2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80206c6:	6838      	ldr	r0, [r7, #0]
 80206c8:	b2ad      	uxth	r5, r5
 80206ca:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80206ce:	6801      	ldr	r1, [r0, #0]
 80206d0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80206d4:	9500      	str	r5, [sp, #0]
 80206d6:	e9cd 6903 	strd	r6, r9, [sp, #12]
 80206da:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 80206de:	9602      	str	r6, [sp, #8]
 80206e0:	fa1f f688 	uxth.w	r6, r8
 80206e4:	9601      	str	r6, [sp, #4]
 80206e6:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 80206e8:	4621      	mov	r1, r4
 80206ea:	47a8      	blx	r5
 80206ec:	b00d      	add	sp, #52	; 0x34
 80206ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206f2:	6838      	ldr	r0, [r7, #0]
 80206f4:	6803      	ldr	r3, [r0, #0]
 80206f6:	6a1b      	ldr	r3, [r3, #32]
 80206f8:	4798      	blx	r3
 80206fa:	4a38      	ldr	r2, [pc, #224]	; (80207dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 80206fc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8020700:	2eff      	cmp	r6, #255	; 0xff
 8020702:	8813      	ldrh	r3, [r2, #0]
 8020704:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 8020708:	fb0c 1303 	mla	r3, ip, r3, r1
 802070c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8020710:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020714:	4418      	add	r0, r3
 8020716:	d032      	beq.n	802077e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8020718:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 802071c:	f04f 0c00 	mov.w	ip, #0
 8020720:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 8020724:	9306      	str	r3, [sp, #24]
 8020726:	45c4      	cmp	ip, r8
 8020728:	da49      	bge.n	80207be <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 802072a:	4686      	mov	lr, r0
 802072c:	46a1      	mov	r9, r4
 802072e:	eba9 0304 	sub.w	r3, r9, r4
 8020732:	428b      	cmp	r3, r1
 8020734:	da13      	bge.n	802075e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 8020736:	f819 3b01 	ldrb.w	r3, [r9], #1
 802073a:	f89e b000 	ldrb.w	fp, [lr]
 802073e:	9307      	str	r3, [sp, #28]
 8020740:	9b06      	ldr	r3, [sp, #24]
 8020742:	fb1b fb03 	smulbb	fp, fp, r3
 8020746:	9b07      	ldr	r3, [sp, #28]
 8020748:	fb03 b306 	mla	r3, r3, r6, fp
 802074c:	b29b      	uxth	r3, r3
 802074e:	f103 0b01 	add.w	fp, r3, #1
 8020752:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8020756:	121b      	asrs	r3, r3, #8
 8020758:	f80e 3b01 	strb.w	r3, [lr], #1
 802075c:	e7e7      	b.n	802072e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 802075e:	8813      	ldrh	r3, [r2, #0]
 8020760:	f10c 0c01 	add.w	ip, ip, #1
 8020764:	1b5b      	subs	r3, r3, r5
 8020766:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802076a:	4453      	add	r3, sl
 802076c:	4418      	add	r0, r3
 802076e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8020772:	1b5b      	subs	r3, r3, r5
 8020774:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020778:	4453      	add	r3, sl
 802077a:	441c      	add	r4, r3
 802077c:	e7d3      	b.n	8020726 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 802077e:	2600      	movs	r6, #0
 8020780:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 8020784:	4546      	cmp	r6, r8
 8020786:	da1a      	bge.n	80207be <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 8020788:	f100 3eff 	add.w	lr, r0, #4294967295
 802078c:	4623      	mov	r3, r4
 802078e:	eba3 0904 	sub.w	r9, r3, r4
 8020792:	4589      	cmp	r9, r1
 8020794:	da04      	bge.n	80207a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 8020796:	f813 9b01 	ldrb.w	r9, [r3], #1
 802079a:	f80e 9f01 	strb.w	r9, [lr, #1]!
 802079e:	e7f6      	b.n	802078e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 80207a0:	8813      	ldrh	r3, [r2, #0]
 80207a2:	3601      	adds	r6, #1
 80207a4:	1b5b      	subs	r3, r3, r5
 80207a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80207aa:	4463      	add	r3, ip
 80207ac:	4418      	add	r0, r3
 80207ae:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80207b2:	1b5b      	subs	r3, r3, r5
 80207b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80207b8:	4463      	add	r3, ip
 80207ba:	441c      	add	r4, r3
 80207bc:	e7e2      	b.n	8020784 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 80207be:	6838      	ldr	r0, [r7, #0]
 80207c0:	6803      	ldr	r3, [r0, #0]
 80207c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80207c4:	4798      	blx	r3
 80207c6:	e791      	b.n	80206ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80207c8:	f1b9 0f00 	cmp.w	r9, #0
 80207cc:	f47f af78 	bne.w	80206c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 80207d0:	f010 0f01 	tst.w	r0, #1
 80207d4:	e776      	b.n	80206c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 80207d6:	bf00      	nop
 80207d8:	2000b41c 	.word	0x2000b41c
 80207dc:	2000b416 	.word	0x2000b416

080207e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80207e0:	b510      	push	{r4, lr}
 80207e2:	4604      	mov	r4, r0
 80207e4:	2104      	movs	r1, #4
 80207e6:	f007 fe21 	bl	802842c <_ZdlPvj>
 80207ea:	4620      	mov	r0, r4
 80207ec:	bd10      	pop	{r4, pc}

080207ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80207ee:	b510      	push	{r4, lr}
 80207f0:	4604      	mov	r4, r0
 80207f2:	2104      	movs	r1, #4
 80207f4:	f007 fe1a 	bl	802842c <_ZdlPvj>
 80207f8:	4620      	mov	r0, r4
 80207fa:	bd10      	pop	{r4, pc}

080207fc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80207fc:	b510      	push	{r4, lr}
 80207fe:	4604      	mov	r4, r0
 8020800:	2104      	movs	r1, #4
 8020802:	f007 fe13 	bl	802842c <_ZdlPvj>
 8020806:	4620      	mov	r0, r4
 8020808:	bd10      	pop	{r4, pc}

0802080a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 802080a:	b510      	push	{r4, lr}
 802080c:	4604      	mov	r4, r0
 802080e:	2104      	movs	r1, #4
 8020810:	f007 fe0c 	bl	802842c <_ZdlPvj>
 8020814:	4620      	mov	r0, r4
 8020816:	bd10      	pop	{r4, pc}

08020818 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020818:	b510      	push	{r4, lr}
 802081a:	4604      	mov	r4, r0
 802081c:	2104      	movs	r1, #4
 802081e:	f007 fe05 	bl	802842c <_ZdlPvj>
 8020822:	4620      	mov	r0, r4
 8020824:	bd10      	pop	{r4, pc}

08020826 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020826:	b510      	push	{r4, lr}
 8020828:	4604      	mov	r4, r0
 802082a:	2104      	movs	r1, #4
 802082c:	f007 fdfe 	bl	802842c <_ZdlPvj>
 8020830:	4620      	mov	r0, r4
 8020832:	bd10      	pop	{r4, pc}

08020834 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020834:	b510      	push	{r4, lr}
 8020836:	4604      	mov	r4, r0
 8020838:	2104      	movs	r1, #4
 802083a:	f007 fdf7 	bl	802842c <_ZdlPvj>
 802083e:	4620      	mov	r0, r4
 8020840:	bd10      	pop	{r4, pc}

08020842 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020842:	b510      	push	{r4, lr}
 8020844:	4604      	mov	r4, r0
 8020846:	2104      	movs	r1, #4
 8020848:	f007 fdf0 	bl	802842c <_ZdlPvj>
 802084c:	4620      	mov	r0, r4
 802084e:	bd10      	pop	{r4, pc}

08020850 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020850:	b510      	push	{r4, lr}
 8020852:	4604      	mov	r4, r0
 8020854:	2104      	movs	r1, #4
 8020856:	f007 fde9 	bl	802842c <_ZdlPvj>
 802085a:	4620      	mov	r0, r4
 802085c:	bd10      	pop	{r4, pc}

0802085e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802085e:	b510      	push	{r4, lr}
 8020860:	4604      	mov	r4, r0
 8020862:	2104      	movs	r1, #4
 8020864:	f007 fde2 	bl	802842c <_ZdlPvj>
 8020868:	4620      	mov	r0, r4
 802086a:	bd10      	pop	{r4, pc}

0802086c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 802086c:	b510      	push	{r4, lr}
 802086e:	4604      	mov	r4, r0
 8020870:	2104      	movs	r1, #4
 8020872:	f007 fddb 	bl	802842c <_ZdlPvj>
 8020876:	4620      	mov	r0, r4
 8020878:	bd10      	pop	{r4, pc}

0802087a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 802087a:	b510      	push	{r4, lr}
 802087c:	4604      	mov	r4, r0
 802087e:	2104      	movs	r1, #4
 8020880:	f007 fdd4 	bl	802842c <_ZdlPvj>
 8020884:	4620      	mov	r0, r4
 8020886:	bd10      	pop	{r4, pc}

08020888 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020888:	b510      	push	{r4, lr}
 802088a:	4604      	mov	r4, r0
 802088c:	2104      	movs	r1, #4
 802088e:	f007 fdcd 	bl	802842c <_ZdlPvj>
 8020892:	4620      	mov	r0, r4
 8020894:	bd10      	pop	{r4, pc}

08020896 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020896:	b510      	push	{r4, lr}
 8020898:	4604      	mov	r4, r0
 802089a:	2104      	movs	r1, #4
 802089c:	f007 fdc6 	bl	802842c <_ZdlPvj>
 80208a0:	4620      	mov	r0, r4
 80208a2:	bd10      	pop	{r4, pc}

080208a4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80208a4:	b510      	push	{r4, lr}
 80208a6:	4604      	mov	r4, r0
 80208a8:	2104      	movs	r1, #4
 80208aa:	f007 fdbf 	bl	802842c <_ZdlPvj>
 80208ae:	4620      	mov	r0, r4
 80208b0:	bd10      	pop	{r4, pc}

080208b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80208b2:	b510      	push	{r4, lr}
 80208b4:	4604      	mov	r4, r0
 80208b6:	2104      	movs	r1, #4
 80208b8:	f007 fdb8 	bl	802842c <_ZdlPvj>
 80208bc:	4620      	mov	r0, r4
 80208be:	bd10      	pop	{r4, pc}

080208c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80208c0:	b510      	push	{r4, lr}
 80208c2:	4604      	mov	r4, r0
 80208c4:	2104      	movs	r1, #4
 80208c6:	f007 fdb1 	bl	802842c <_ZdlPvj>
 80208ca:	4620      	mov	r0, r4
 80208cc:	bd10      	pop	{r4, pc}

080208ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80208ce:	b510      	push	{r4, lr}
 80208d0:	4604      	mov	r4, r0
 80208d2:	2104      	movs	r1, #4
 80208d4:	f007 fdaa 	bl	802842c <_ZdlPvj>
 80208d8:	4620      	mov	r0, r4
 80208da:	bd10      	pop	{r4, pc}

080208dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80208dc:	b510      	push	{r4, lr}
 80208de:	4604      	mov	r4, r0
 80208e0:	2104      	movs	r1, #4
 80208e2:	f007 fda3 	bl	802842c <_ZdlPvj>
 80208e6:	4620      	mov	r0, r4
 80208e8:	bd10      	pop	{r4, pc}

080208ea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80208ea:	b510      	push	{r4, lr}
 80208ec:	4604      	mov	r4, r0
 80208ee:	2104      	movs	r1, #4
 80208f0:	f007 fd9c 	bl	802842c <_ZdlPvj>
 80208f4:	4620      	mov	r0, r4
 80208f6:	bd10      	pop	{r4, pc}

080208f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80208f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208fc:	4d9e      	ldr	r5, [pc, #632]	; (8020b78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80208fe:	4690      	mov	r8, r2
 8020900:	b08f      	sub	sp, #60	; 0x3c
 8020902:	4604      	mov	r4, r0
 8020904:	682a      	ldr	r2, [r5, #0]
 8020906:	4689      	mov	r9, r1
 8020908:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 802090c:	2a02      	cmp	r2, #2
 802090e:	d106      	bne.n	802091e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8020910:	4b9a      	ldr	r3, [pc, #616]	; (8020b7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8020912:	f240 11ef 	movw	r1, #495	; 0x1ef
 8020916:	4a9a      	ldr	r2, [pc, #616]	; (8020b80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020918:	489a      	ldr	r0, [pc, #616]	; (8020b84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 802091a:	f007 fdb3 	bl	8028484 <__assert_func>
 802091e:	ae0e      	add	r6, sp, #56	; 0x38
 8020920:	f826 3d24 	strh.w	r3, [r6, #-36]!
 8020924:	4630      	mov	r0, r6
 8020926:	f7fe f8b1 	bl	801ea8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 802092a:	6823      	ldr	r3, [r4, #0]
 802092c:	4607      	mov	r7, r0
 802092e:	4620      	mov	r0, r4
 8020930:	6a1b      	ldr	r3, [r3, #32]
 8020932:	4798      	blx	r3
 8020934:	4287      	cmp	r7, r0
 8020936:	d004      	beq.n	8020942 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8020938:	4b93      	ldr	r3, [pc, #588]	; (8020b88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 802093a:	f240 11f1 	movw	r1, #497	; 0x1f1
 802093e:	4a90      	ldr	r2, [pc, #576]	; (8020b80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020940:	e7ea      	b.n	8020918 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020942:	4630      	mov	r0, r6
 8020944:	f7fe f81e 	bl	801e984 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020948:	4607      	mov	r7, r0
 802094a:	b920      	cbnz	r0, 8020956 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 802094c:	4b8f      	ldr	r3, [pc, #572]	; (8020b8c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 802094e:	f240 11f3 	movw	r1, #499	; 0x1f3
 8020952:	4a8b      	ldr	r2, [pc, #556]	; (8020b80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020954:	e7e0      	b.n	8020918 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020956:	f8d8 0000 	ldr.w	r0, [r8]
 802095a:	ab06      	add	r3, sp, #24
 802095c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020960:	f9b8 a000 	ldrsh.w	sl, [r8]
 8020964:	c303      	stmia	r3!, {r0, r1}
 8020966:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802096a:	ab08      	add	r3, sp, #32
 802096c:	f8d9 0000 	ldr.w	r0, [r9]
 8020970:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8020974:	c303      	stmia	r3!, {r0, r1}
 8020976:	4630      	mov	r0, r6
 8020978:	f7fd ff36 	bl	801e7e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802097c:	4680      	mov	r8, r0
 802097e:	4630      	mov	r0, r6
 8020980:	4e83      	ldr	r6, [pc, #524]	; (8020b90 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 8020982:	f7fd ff6b 	bl	801e85c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020986:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 802098a:	f10d 0920 	add.w	r9, sp, #32
 802098e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8020992:	a806      	add	r0, sp, #24
 8020994:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8020998:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 802099c:	f7fb faae 	bl	801befc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80209a0:	4648      	mov	r0, r9
 80209a2:	f7fb faab 	bl	801befc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80209a6:	a80a      	add	r0, sp, #40	; 0x28
 80209a8:	f7fb faa8 	bl	801befc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80209ac:	4b79      	ldr	r3, [pc, #484]	; (8020b94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 80209ae:	2100      	movs	r1, #0
 80209b0:	f9b6 2000 	ldrsh.w	r2, [r6]
 80209b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80209b8:	4648      	mov	r0, r9
 80209ba:	910c      	str	r1, [sp, #48]	; 0x30
 80209bc:	a90c      	add	r1, sp, #48	; 0x30
 80209be:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80209c2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80209c6:	f7f7 fc1f 	bl	8018208 <_ZN8touchgfx4RectaNERKS0_>
 80209ca:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 80209ce:	9602      	str	r6, [sp, #8]
 80209d0:	f1bc 0f00 	cmp.w	ip, #0
 80209d4:	f340 80a4 	ble.w	8020b20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 80209d8:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 80209dc:	2e00      	cmp	r6, #0
 80209de:	f340 809f 	ble.w	8020b20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 80209e2:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80209e6:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80209ea:	4288      	cmp	r0, r1
 80209ec:	db36      	blt.n	8020a5c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 80209ee:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80209f2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80209f6:	429a      	cmp	r2, r3
 80209f8:	db30      	blt.n	8020a5c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 80209fa:	4460      	add	r0, ip
 80209fc:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8020a00:	4461      	add	r1, ip
 8020a02:	b200      	sxth	r0, r0
 8020a04:	b209      	sxth	r1, r1
 8020a06:	4288      	cmp	r0, r1
 8020a08:	dc28      	bgt.n	8020a5c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8020a0a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8020a0e:	4432      	add	r2, r6
 8020a10:	440b      	add	r3, r1
 8020a12:	b212      	sxth	r2, r2
 8020a14:	b21b      	sxth	r3, r3
 8020a16:	429a      	cmp	r2, r3
 8020a18:	dc20      	bgt.n	8020a5c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8020a1a:	6823      	ldr	r3, [r4, #0]
 8020a1c:	4620      	mov	r0, r4
 8020a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a20:	4798      	blx	r3
 8020a22:	4682      	mov	sl, r0
 8020a24:	6828      	ldr	r0, [r5, #0]
 8020a26:	6803      	ldr	r3, [r0, #0]
 8020a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020a2a:	4798      	blx	r3
 8020a2c:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8020a30:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020a34:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8020a38:	9303      	str	r3, [sp, #12]
 8020a3a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8020a3e:	1a9b      	subs	r3, r3, r2
 8020a40:	b29b      	uxth	r3, r3
 8020a42:	b21c      	sxth	r4, r3
 8020a44:	2c00      	cmp	r4, #0
 8020a46:	dc0e      	bgt.n	8020a66 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 8020a48:	b134      	cbz	r4, 8020a58 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 8020a4a:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020a4e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8020a52:	4413      	add	r3, r2
 8020a54:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8020a58:	463c      	mov	r4, r7
 8020a5a:	e00b      	b.n	8020a74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 8020a5c:	4b4e      	ldr	r3, [pc, #312]	; (8020b98 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 8020a5e:	f240 2101 	movw	r1, #513	; 0x201
 8020a62:	4a47      	ldr	r2, [pc, #284]	; (8020b80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020a64:	e758      	b.n	8020918 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020a66:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020a6a:	ebab 0303 	sub.w	r3, fp, r3
 8020a6e:	443c      	add	r4, r7
 8020a70:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8020a74:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020a78:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020a7c:	1a9b      	subs	r3, r3, r2
 8020a7e:	b29b      	uxth	r3, r3
 8020a80:	b219      	sxth	r1, r3
 8020a82:	2900      	cmp	r1, #0
 8020a84:	dd50      	ble.n	8020b28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 8020a86:	9a03      	ldr	r2, [sp, #12]
 8020a88:	fb02 4401 	mla	r4, r2, r1, r4
 8020a8c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8020a90:	1ad3      	subs	r3, r2, r3
 8020a92:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8020a96:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8020a9a:	f1bc 0f00 	cmp.w	ip, #0
 8020a9e:	dd3f      	ble.n	8020b20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020aa0:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8020aa4:	2e00      	cmp	r6, #0
 8020aa6:	dd3b      	ble.n	8020b20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020aa8:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8020aac:	2203      	movs	r2, #3
 8020aae:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8020ab2:	fb0a f801 	mul.w	r8, sl, r1
 8020ab6:	fb13 8802 	smlabb	r8, r3, r2, r8
 8020aba:	9a02      	ldr	r2, [sp, #8]
 8020abc:	4480      	add	r8, r0
 8020abe:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8020ac2:	8812      	ldrh	r2, [r2, #0]
 8020ac4:	4584      	cmp	ip, r0
 8020ac6:	eba2 0303 	sub.w	r3, r2, r3
 8020aca:	bfa8      	it	ge
 8020acc:	4684      	movge	ip, r0
 8020ace:	459c      	cmp	ip, r3
 8020ad0:	bfa8      	it	ge
 8020ad2:	469c      	movge	ip, r3
 8020ad4:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8020ad8:	429e      	cmp	r6, r3
 8020ada:	bfa8      	it	ge
 8020adc:	461e      	movge	r6, r3
 8020ade:	4b2d      	ldr	r3, [pc, #180]	; (8020b94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 8020ae0:	881b      	ldrh	r3, [r3, #0]
 8020ae2:	1a59      	subs	r1, r3, r1
 8020ae4:	4633      	mov	r3, r6
 8020ae6:	428e      	cmp	r6, r1
 8020ae8:	bfa8      	it	ge
 8020aea:	460b      	movge	r3, r1
 8020aec:	4562      	cmp	r2, ip
 8020aee:	9302      	str	r3, [sp, #8]
 8020af0:	d12d      	bne.n	8020b4e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 8020af2:	455a      	cmp	r2, fp
 8020af4:	d12b      	bne.n	8020b4e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 8020af6:	6828      	ldr	r0, [r5, #0]
 8020af8:	6803      	ldr	r3, [r0, #0]
 8020afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020afc:	4798      	blx	r3
 8020afe:	07c3      	lsls	r3, r0, #31
 8020b00:	d51b      	bpl.n	8020b3a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 8020b02:	6828      	ldr	r0, [r5, #0]
 8020b04:	9b02      	ldr	r3, [sp, #8]
 8020b06:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 8020b0a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8020b0e:	6803      	ldr	r3, [r0, #0]
 8020b10:	f8cd b000 	str.w	fp, [sp]
 8020b14:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8020b16:	4623      	mov	r3, r4
 8020b18:	e899 0006 	ldmia.w	r9, {r1, r2}
 8020b1c:	47a8      	blx	r5
 8020b1e:	4607      	mov	r7, r0
 8020b20:	4638      	mov	r0, r7
 8020b22:	b00f      	add	sp, #60	; 0x3c
 8020b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b28:	bf1f      	itttt	ne
 8020b2a:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 8020b2e:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8020b32:	189b      	addne	r3, r3, r2
 8020b34:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8020b38:	e7ad      	b.n	8020a96 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 8020b3a:	6828      	ldr	r0, [r5, #0]
 8020b3c:	4642      	mov	r2, r8
 8020b3e:	4621      	mov	r1, r4
 8020b40:	6803      	ldr	r3, [r0, #0]
 8020b42:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8020b44:	9b02      	ldr	r3, [sp, #8]
 8020b46:	fb03 f30a 	mul.w	r3, r3, sl
 8020b4a:	47a8      	blx	r5
 8020b4c:	e7e8      	b.n	8020b20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020b4e:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 8020b52:	f04f 0900 	mov.w	r9, #0
 8020b56:	9b02      	ldr	r3, [sp, #8]
 8020b58:	454b      	cmp	r3, r9
 8020b5a:	dde1      	ble.n	8020b20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020b5c:	6828      	ldr	r0, [r5, #0]
 8020b5e:	4642      	mov	r2, r8
 8020b60:	4621      	mov	r1, r4
 8020b62:	44d0      	add	r8, sl
 8020b64:	6803      	ldr	r3, [r0, #0]
 8020b66:	f109 0901 	add.w	r9, r9, #1
 8020b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020b6c:	461e      	mov	r6, r3
 8020b6e:	465b      	mov	r3, fp
 8020b70:	47b0      	blx	r6
 8020b72:	9b03      	ldr	r3, [sp, #12]
 8020b74:	441c      	add	r4, r3
 8020b76:	e7ee      	b.n	8020b56 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 8020b78:	2000b41c 	.word	0x2000b41c
 8020b7c:	0802db51 	.word	0x0802db51
 8020b80:	0802e32d 	.word	0x0802e32d
 8020b84:	0802db1f 	.word	0x0802db1f
 8020b88:	0802dc03 	.word	0x0802dc03
 8020b8c:	0802dc58 	.word	0x0802dc58
 8020b90:	2000b416 	.word	0x2000b416
 8020b94:	2000b418 	.word	0x2000b418
 8020b98:	0802dc96 	.word	0x0802dc96

08020b9c <_ZN8touchgfx8LCD24bppC1Ev>:
 8020b9c:	4a0b      	ldr	r2, [pc, #44]	; (8020bcc <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 8020b9e:	6002      	str	r2, [r0, #0]
 8020ba0:	2200      	movs	r2, #0
 8020ba2:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8020ba6:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8020baa:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8020bae:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8020bb2:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8020bb6:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8020bba:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8020bbe:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8020bc2:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8020bc6:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8020bca:	4770      	bx	lr
 8020bcc:	0802df7c 	.word	0x0802df7c

08020bd0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8020bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bd4:	b093      	sub	sp, #76	; 0x4c
 8020bd6:	880c      	ldrh	r4, [r1, #0]
 8020bd8:	4605      	mov	r5, r0
 8020bda:	460f      	mov	r7, r1
 8020bdc:	4691      	mov	r9, r2
 8020bde:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 8020be2:	b12c      	cbz	r4, 8020bf0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8020be4:	4b71      	ldr	r3, [pc, #452]	; (8020dac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8020be6:	2168      	movs	r1, #104	; 0x68
 8020be8:	4a71      	ldr	r2, [pc, #452]	; (8020db0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8020bea:	4872      	ldr	r0, [pc, #456]	; (8020db4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8020bec:	f007 fc4a 	bl	8028484 <__assert_func>
 8020bf0:	6810      	ldr	r0, [r2, #0]
 8020bf2:	ae0e      	add	r6, sp, #56	; 0x38
 8020bf4:	6851      	ldr	r1, [r2, #4]
 8020bf6:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8020dbc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 8020bfa:	c603      	stmia	r6!, {r0, r1}
 8020bfc:	6818      	ldr	r0, [r3, #0]
 8020bfe:	ae10      	add	r6, sp, #64	; 0x40
 8020c00:	6859      	ldr	r1, [r3, #4]
 8020c02:	c603      	stmia	r6!, {r0, r1}
 8020c04:	a80e      	add	r0, sp, #56	; 0x38
 8020c06:	f7fb f979 	bl	801befc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020c0a:	4649      	mov	r1, r9
 8020c0c:	a810      	add	r0, sp, #64	; 0x40
 8020c0e:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8020db8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8020c12:	f7fb f95b 	bl	801becc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020c16:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8020c1a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8020c1e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8020c22:	f8d9 0000 	ldr.w	r0, [r9]
 8020c26:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020c2a:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 8020c2e:	440d      	add	r5, r1
 8020c30:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8020c34:	440a      	add	r2, r1
 8020c36:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8020c3a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020c3e:	4413      	add	r3, r2
 8020c40:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8020c44:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8020c48:	930b      	str	r3, [sp, #44]	; 0x2c
 8020c4a:	6803      	ldr	r3, [r0, #0]
 8020c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020c50:	4798      	blx	r3
 8020c52:	2801      	cmp	r0, #1
 8020c54:	d11e      	bne.n	8020c94 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 8020c56:	220b      	movs	r2, #11
 8020c58:	9008      	str	r0, [sp, #32]
 8020c5a:	b2b6      	uxth	r6, r6
 8020c5c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8020c60:	9207      	str	r2, [sp, #28]
 8020c62:	4629      	mov	r1, r5
 8020c64:	f8ba 2000 	ldrh.w	r2, [sl]
 8020c68:	f8cd 8010 	str.w	r8, [sp, #16]
 8020c6c:	9601      	str	r6, [sp, #4]
 8020c6e:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8020c72:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8020c76:	9203      	str	r2, [sp, #12]
 8020c78:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8020c7c:	9202      	str	r2, [sp, #8]
 8020c7e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8020c82:	9200      	str	r2, [sp, #0]
 8020c84:	463a      	mov	r2, r7
 8020c86:	f8d9 0000 	ldr.w	r0, [r9]
 8020c8a:	f7f7 ff0b 	bl	8018aa4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8020c8e:	b013      	add	sp, #76	; 0x4c
 8020c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c94:	f8d9 0000 	ldr.w	r0, [r9]
 8020c98:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 8020c9c:	6803      	ldr	r3, [r0, #0]
 8020c9e:	6a1b      	ldr	r3, [r3, #32]
 8020ca0:	4798      	blx	r3
 8020ca2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8020ca6:	f8ba 3000 	ldrh.w	r3, [sl]
 8020caa:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8020cae:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8020cb2:	fb01 2303 	mla	r3, r1, r3, r2
 8020cb6:	4621      	mov	r1, r4
 8020cb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020cbc:	4418      	add	r0, r3
 8020cbe:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8020cc2:	930c      	str	r3, [sp, #48]	; 0x30
 8020cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020cc6:	4299      	cmp	r1, r3
 8020cc8:	da6a      	bge.n	8020da0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8020cca:	1cc2      	adds	r2, r0, #3
 8020ccc:	46aa      	mov	sl, r5
 8020cce:	ebaa 0305 	sub.w	r3, sl, r5
 8020cd2:	429e      	cmp	r6, r3
 8020cd4:	dd55      	ble.n	8020d82 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 8020cd6:	2404      	movs	r4, #4
 8020cd8:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8020cdc:	fb14 4303 	smlabb	r3, r4, r3, r4
 8020ce0:	eb07 0e03 	add.w	lr, r7, r3
 8020ce4:	f89e 4003 	ldrb.w	r4, [lr, #3]
 8020ce8:	b184      	cbz	r4, 8020d0c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8020cea:	2cff      	cmp	r4, #255	; 0xff
 8020cec:	f817 b003 	ldrb.w	fp, [r7, r3]
 8020cf0:	d10e      	bne.n	8020d10 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8020cf2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020cf6:	d10b      	bne.n	8020d10 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8020cf8:	f802 bc03 	strb.w	fp, [r2, #-3]
 8020cfc:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8020d00:	f802 3c02 	strb.w	r3, [r2, #-2]
 8020d04:	f89e 3002 	ldrb.w	r3, [lr, #2]
 8020d08:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020d0c:	3203      	adds	r2, #3
 8020d0e:	e7de      	b.n	8020cce <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 8020d10:	fb08 f404 	mul.w	r4, r8, r4
 8020d14:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 8020d18:	1c63      	adds	r3, r4, #1
 8020d1a:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8020d1e:	121b      	asrs	r3, r3, #8
 8020d20:	b29c      	uxth	r4, r3
 8020d22:	43db      	mvns	r3, r3
 8020d24:	fb1b fb04 	smulbb	fp, fp, r4
 8020d28:	b2db      	uxtb	r3, r3
 8020d2a:	fb0c bc03 	mla	ip, ip, r3, fp
 8020d2e:	fa1f fc8c 	uxth.w	ip, ip
 8020d32:	f10c 0b01 	add.w	fp, ip, #1
 8020d36:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020d3a:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 8020d3e:	fb1b fb03 	smulbb	fp, fp, r3
 8020d42:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020d46:	f802 cc03 	strb.w	ip, [r2, #-3]
 8020d4a:	f89e c001 	ldrb.w	ip, [lr, #1]
 8020d4e:	fb0c bc04 	mla	ip, ip, r4, fp
 8020d52:	fa1f fc8c 	uxth.w	ip, ip
 8020d56:	f10c 0b01 	add.w	fp, ip, #1
 8020d5a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020d5e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020d62:	f802 cc02 	strb.w	ip, [r2, #-2]
 8020d66:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 8020d6a:	f89e e002 	ldrb.w	lr, [lr, #2]
 8020d6e:	fb1c f303 	smulbb	r3, ip, r3
 8020d72:	fb0e 3304 	mla	r3, lr, r4, r3
 8020d76:	b29b      	uxth	r3, r3
 8020d78:	1c5c      	adds	r4, r3, #1
 8020d7a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8020d7e:	121b      	asrs	r3, r3, #8
 8020d80:	e7c2      	b.n	8020d08 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8020d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020d84:	3101      	adds	r1, #1
 8020d86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020d88:	881b      	ldrh	r3, [r3, #0]
 8020d8a:	1b9b      	subs	r3, r3, r6
 8020d8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020d90:	4413      	add	r3, r2
 8020d92:	4418      	add	r0, r3
 8020d94:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8020d98:	1b9b      	subs	r3, r3, r6
 8020d9a:	444b      	add	r3, r9
 8020d9c:	441d      	add	r5, r3
 8020d9e:	e791      	b.n	8020cc4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8020da0:	4b05      	ldr	r3, [pc, #20]	; (8020db8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8020da2:	6818      	ldr	r0, [r3, #0]
 8020da4:	6803      	ldr	r3, [r0, #0]
 8020da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020da8:	4798      	blx	r3
 8020daa:	e770      	b.n	8020c8e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8020dac:	0802da83 	.word	0x0802da83
 8020db0:	0802e14f 	.word	0x0802e14f
 8020db4:	0802db1f 	.word	0x0802db1f
 8020db8:	2000b41c 	.word	0x2000b41c
 8020dbc:	2000b416 	.word	0x2000b416

08020dc0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8020dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dc4:	4614      	mov	r4, r2
 8020dc6:	880a      	ldrh	r2, [r1, #0]
 8020dc8:	b091      	sub	sp, #68	; 0x44
 8020dca:	4680      	mov	r8, r0
 8020dcc:	2a01      	cmp	r2, #1
 8020dce:	460e      	mov	r6, r1
 8020dd0:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8020dd4:	d005      	beq.n	8020de2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 8020dd6:	4b6d      	ldr	r3, [pc, #436]	; (8020f8c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8020dd8:	21b6      	movs	r1, #182	; 0xb6
 8020dda:	4a6d      	ldr	r2, [pc, #436]	; (8020f90 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 8020ddc:	486d      	ldr	r0, [pc, #436]	; (8020f94 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8020dde:	f007 fb51 	bl	8028484 <__assert_func>
 8020de2:	6820      	ldr	r0, [r4, #0]
 8020de4:	ad0c      	add	r5, sp, #48	; 0x30
 8020de6:	6861      	ldr	r1, [r4, #4]
 8020de8:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8020f98 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 8020dec:	c503      	stmia	r5!, {r0, r1}
 8020dee:	6818      	ldr	r0, [r3, #0]
 8020df0:	ad0e      	add	r5, sp, #56	; 0x38
 8020df2:	6859      	ldr	r1, [r3, #4]
 8020df4:	c503      	stmia	r5!, {r0, r1}
 8020df6:	a80c      	add	r0, sp, #48	; 0x30
 8020df8:	f7fb f880 	bl	801befc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020dfc:	4621      	mov	r1, r4
 8020dfe:	a80e      	add	r0, sp, #56	; 0x38
 8020e00:	f7fb f864 	bl	801becc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020e04:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020e08:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020e0c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8020e10:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 8020e14:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020e18:	eb08 0401 	add.w	r4, r8, r1
 8020e1c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8020e20:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8020f9c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 8020e24:	440a      	add	r2, r1
 8020e26:	f8d8 0000 	ldr.w	r0, [r8]
 8020e2a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020e2e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8020e32:	4413      	add	r3, r2
 8020e34:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020e38:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8020e3c:	930a      	str	r3, [sp, #40]	; 0x28
 8020e3e:	6803      	ldr	r3, [r0, #0]
 8020e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020e44:	4798      	blx	r3
 8020e46:	2801      	cmp	r0, #1
 8020e48:	d11e      	bne.n	8020e88 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 8020e4a:	220b      	movs	r2, #11
 8020e4c:	9008      	str	r0, [sp, #32]
 8020e4e:	b2ad      	uxth	r5, r5
 8020e50:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8020e54:	9207      	str	r2, [sp, #28]
 8020e56:	4621      	mov	r1, r4
 8020e58:	f8b9 2000 	ldrh.w	r2, [r9]
 8020e5c:	9501      	str	r5, [sp, #4]
 8020e5e:	9206      	str	r2, [sp, #24]
 8020e60:	2200      	movs	r2, #0
 8020e62:	e9cd 7204 	strd	r7, r2, [sp, #16]
 8020e66:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8020e6a:	9203      	str	r2, [sp, #12]
 8020e6c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020e70:	9202      	str	r2, [sp, #8]
 8020e72:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020e76:	9200      	str	r2, [sp, #0]
 8020e78:	4632      	mov	r2, r6
 8020e7a:	f8d8 0000 	ldr.w	r0, [r8]
 8020e7e:	f7f7 fe11 	bl	8018aa4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8020e82:	b011      	add	sp, #68	; 0x44
 8020e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e88:	f8d8 0000 	ldr.w	r0, [r8]
 8020e8c:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 8020e90:	6803      	ldr	r3, [r0, #0]
 8020e92:	6a1b      	ldr	r3, [r3, #32]
 8020e94:	4798      	blx	r3
 8020e96:	f8b9 3000 	ldrh.w	r3, [r9]
 8020e9a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8020e9e:	f04f 0e00 	mov.w	lr, #0
 8020ea2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020ea6:	fa1f f987 	uxth.w	r9, r7
 8020eaa:	fb01 2303 	mla	r3, r1, r3, r2
 8020eae:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 8020eb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020eb6:	b289      	uxth	r1, r1
 8020eb8:	4418      	add	r0, r3
 8020eba:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8020ebe:	930b      	str	r3, [sp, #44]	; 0x2c
 8020ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ec2:	459e      	cmp	lr, r3
 8020ec4:	da5c      	bge.n	8020f80 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 8020ec6:	1cc3      	adds	r3, r0, #3
 8020ec8:	46a2      	mov	sl, r4
 8020eca:	ebaa 0204 	sub.w	r2, sl, r4
 8020ece:	4295      	cmp	r5, r2
 8020ed0:	dd46      	ble.n	8020f60 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 8020ed2:	f04f 0c03 	mov.w	ip, #3
 8020ed6:	f04f 0b04 	mov.w	fp, #4
 8020eda:	f81a 2b01 	ldrb.w	r2, [sl], #1
 8020ede:	2fff      	cmp	r7, #255	; 0xff
 8020ee0:	fb1c b202 	smlabb	r2, ip, r2, fp
 8020ee4:	eb06 0c02 	add.w	ip, r6, r2
 8020ee8:	f816 b002 	ldrb.w	fp, [r6, r2]
 8020eec:	d02f      	beq.n	8020f4e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 8020eee:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8020ef2:	fb12 f201 	smulbb	r2, r2, r1
 8020ef6:	fb0b 2209 	mla	r2, fp, r9, r2
 8020efa:	b292      	uxth	r2, r2
 8020efc:	f102 0b01 	add.w	fp, r2, #1
 8020f00:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8020f04:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 8020f08:	fb1b fb01 	smulbb	fp, fp, r1
 8020f0c:	1212      	asrs	r2, r2, #8
 8020f0e:	f803 2c03 	strb.w	r2, [r3, #-3]
 8020f12:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020f16:	fb02 b209 	mla	r2, r2, r9, fp
 8020f1a:	b292      	uxth	r2, r2
 8020f1c:	f102 0b01 	add.w	fp, r2, #1
 8020f20:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8020f24:	1212      	asrs	r2, r2, #8
 8020f26:	f803 2c02 	strb.w	r2, [r3, #-2]
 8020f2a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8020f2e:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 8020f32:	fb1c fc01 	smulbb	ip, ip, r1
 8020f36:	fb02 c209 	mla	r2, r2, r9, ip
 8020f3a:	b292      	uxth	r2, r2
 8020f3c:	f102 0c01 	add.w	ip, r2, #1
 8020f40:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020f44:	1212      	asrs	r2, r2, #8
 8020f46:	f803 2c01 	strb.w	r2, [r3, #-1]
 8020f4a:	3303      	adds	r3, #3
 8020f4c:	e7bd      	b.n	8020eca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 8020f4e:	f803 bc03 	strb.w	fp, [r3, #-3]
 8020f52:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020f56:	f803 2c02 	strb.w	r2, [r3, #-2]
 8020f5a:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8020f5e:	e7f2      	b.n	8020f46 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 8020f60:	4b0d      	ldr	r3, [pc, #52]	; (8020f98 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8020f62:	f10e 0e01 	add.w	lr, lr, #1
 8020f66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020f68:	881b      	ldrh	r3, [r3, #0]
 8020f6a:	1b5b      	subs	r3, r3, r5
 8020f6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f70:	4413      	add	r3, r2
 8020f72:	4418      	add	r0, r3
 8020f74:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020f78:	1b5b      	subs	r3, r3, r5
 8020f7a:	4443      	add	r3, r8
 8020f7c:	441c      	add	r4, r3
 8020f7e:	e79f      	b.n	8020ec0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 8020f80:	4b06      	ldr	r3, [pc, #24]	; (8020f9c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8020f82:	6818      	ldr	r0, [r3, #0]
 8020f84:	6803      	ldr	r3, [r0, #0]
 8020f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020f88:	4798      	blx	r3
 8020f8a:	e77a      	b.n	8020e82 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 8020f8c:	0802d967 	.word	0x0802d967
 8020f90:	0802e042 	.word	0x0802e042
 8020f94:	0802db1f 	.word	0x0802db1f
 8020f98:	2000b416 	.word	0x2000b416
 8020f9c:	2000b41c 	.word	0x2000b41c

08020fa0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8020fa0:	b570      	push	{r4, r5, r6, lr}
 8020fa2:	780d      	ldrb	r5, [r1, #0]
 8020fa4:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8020fa8:	2d01      	cmp	r5, #1
 8020faa:	d00d      	beq.n	8020fc8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8020fac:	d307      	bcc.n	8020fbe <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8020fae:	2d02      	cmp	r5, #2
 8020fb0:	d10f      	bne.n	8020fd2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8020fb2:	4b08      	ldr	r3, [pc, #32]	; (8020fd4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8020fb4:	215b      	movs	r1, #91	; 0x5b
 8020fb6:	4a08      	ldr	r2, [pc, #32]	; (8020fd8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8020fb8:	4808      	ldr	r0, [pc, #32]	; (8020fdc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 8020fba:	f007 fa63 	bl	8028484 <__assert_func>
 8020fbe:	9404      	str	r4, [sp, #16]
 8020fc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020fc4:	f7ff be04 	b.w	8020bd0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8020fc8:	9404      	str	r4, [sp, #16]
 8020fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020fce:	f7ff bef7 	b.w	8020dc0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8020fd2:	bd70      	pop	{r4, r5, r6, pc}
 8020fd4:	0802d91c 	.word	0x0802d91c
 8020fd8:	0802dfc0 	.word	0x0802dfc0
 8020fdc:	0802db1f 	.word	0x0802db1f

08020fe0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8020fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fe4:	4605      	mov	r5, r0
 8020fe6:	b08f      	sub	sp, #60	; 0x3c
 8020fe8:	460c      	mov	r4, r1
 8020fea:	461f      	mov	r7, r3
 8020fec:	2b00      	cmp	r3, #0
 8020fee:	d04e      	beq.n	802108e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 8020ff0:	6808      	ldr	r0, [r1, #0]
 8020ff2:	ab0a      	add	r3, sp, #40	; 0x28
 8020ff4:	6849      	ldr	r1, [r1, #4]
 8020ff6:	4e81      	ldr	r6, [pc, #516]	; (80211fc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 8020ff8:	c303      	stmia	r3!, {r0, r1}
 8020ffa:	6810      	ldr	r0, [r2, #0]
 8020ffc:	ab0c      	add	r3, sp, #48	; 0x30
 8020ffe:	6851      	ldr	r1, [r2, #4]
 8021000:	c303      	stmia	r3!, {r0, r1}
 8021002:	a80a      	add	r0, sp, #40	; 0x28
 8021004:	f7fa ff7a 	bl	801befc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021008:	4621      	mov	r1, r4
 802100a:	a80c      	add	r0, sp, #48	; 0x30
 802100c:	f7fa ff5e 	bl	801becc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021010:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8021014:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8021018:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802101c:	6830      	ldr	r0, [r6, #0]
 802101e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021022:	f9bd 4034 	ldrsh.w	r4, [sp, #52]	; 0x34
 8021026:	f9bd 8036 	ldrsh.w	r8, [sp, #54]	; 0x36
 802102a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 802102e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8021032:	440a      	add	r2, r1
 8021034:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8021038:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 802103c:	4413      	add	r3, r2
 802103e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021042:	6803      	ldr	r3, [r0, #0]
 8021044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021046:	4798      	blx	r3
 8021048:	2fff      	cmp	r7, #255	; 0xff
 802104a:	4633      	mov	r3, r6
 802104c:	4e6c      	ldr	r6, [pc, #432]	; (8021200 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 802104e:	d021      	beq.n	8021094 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 8021050:	f010 0f04 	tst.w	r0, #4
 8021054:	6818      	ldr	r0, [r3, #0]
 8021056:	d020      	beq.n	802109a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 8021058:	2100      	movs	r1, #0
 802105a:	f04f 0e01 	mov.w	lr, #1
 802105e:	f8d0 c000 	ldr.w	ip, [r0]
 8021062:	b2a4      	uxth	r4, r4
 8021064:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8021068:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 802106c:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 8021070:	8836      	ldrh	r6, [r6, #0]
 8021072:	9703      	str	r7, [sp, #12]
 8021074:	9400      	str	r4, [sp, #0]
 8021076:	e9cd 1604 	strd	r1, r6, [sp, #16]
 802107a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802107e:	9102      	str	r1, [sp, #8]
 8021080:	fa1f f188 	uxth.w	r1, r8
 8021084:	9101      	str	r1, [sp, #4]
 8021086:	4629      	mov	r1, r5
 8021088:	f8dc 4034 	ldr.w	r4, [ip, #52]	; 0x34
 802108c:	47a0      	blx	r4
 802108e:	b00f      	add	sp, #60	; 0x3c
 8021090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021094:	f010 0f01 	tst.w	r0, #1
 8021098:	e7dc      	b.n	8021054 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x74>
 802109a:	6803      	ldr	r3, [r0, #0]
 802109c:	6a1b      	ldr	r3, [r3, #32]
 802109e:	4798      	blx	r3
 80210a0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80210a4:	8833      	ldrh	r3, [r6, #0]
 80210a6:	2fff      	cmp	r7, #255	; 0xff
 80210a8:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 80210ac:	fb01 2303 	mla	r3, r1, r3, r2
 80210b0:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 80210b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80210b8:	4418      	add	r0, r3
 80210ba:	d128      	bne.n	802110e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x12e>
 80210bc:	0051      	lsls	r1, r2, #1
 80210be:	2700      	movs	r7, #0
 80210c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80210c4:	4547      	cmp	r7, r8
 80210c6:	f280 8092 	bge.w	80211ee <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 80210ca:	4684      	mov	ip, r0
 80210cc:	f04f 0e00 	mov.w	lr, #0
 80210d0:	45a6      	cmp	lr, r4
 80210d2:	f10c 0c03 	add.w	ip, ip, #3
 80210d6:	da7c      	bge.n	80211d2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1f2>
 80210d8:	f835 901e 	ldrh.w	r9, [r5, lr, lsl #1]
 80210dc:	f10e 0e01 	add.w	lr, lr, #1
 80210e0:	ea4f 2a29 	mov.w	sl, r9, asr #8
 80210e4:	f3c9 0b82 	ubfx	fp, r9, #2, #3
 80210e8:	ea4f 03e9 	mov.w	r3, r9, asr #3
 80210ec:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 80210f0:	ea4b 09c9 	orr.w	r9, fp, r9, lsl #3
 80210f4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80210f8:	ea4a 1a5a 	orr.w	sl, sl, sl, lsr #5
 80210fc:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8021100:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8021104:	f80c ac01 	strb.w	sl, [ip, #-1]
 8021108:	f80c 3c02 	strb.w	r3, [ip, #-2]
 802110c:	e7e0      	b.n	80210d0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xf0>
 802110e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8021112:	ea6f 0c07 	mvn.w	ip, r7
 8021116:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 802111a:	f04f 0900 	mov.w	r9, #0
 802111e:	9309      	str	r3, [sp, #36]	; 0x24
 8021120:	fa5f fc8c 	uxtb.w	ip, ip
 8021124:	b2bb      	uxth	r3, r7
 8021126:	45c1      	cmp	r9, r8
 8021128:	da61      	bge.n	80211ee <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 802112a:	4601      	mov	r1, r0
 802112c:	f04f 0e00 	mov.w	lr, #0
 8021130:	45a6      	cmp	lr, r4
 8021132:	f101 0103 	add.w	r1, r1, #3
 8021136:	da3b      	bge.n	80211b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d0>
 8021138:	f835 201e 	ldrh.w	r2, [r5, lr, lsl #1]
 802113c:	f10e 0e01 	add.w	lr, lr, #1
 8021140:	f3c2 0b82 	ubfx	fp, r2, #2, #3
 8021144:	1216      	asrs	r6, r2, #8
 8021146:	10d7      	asrs	r7, r2, #3
 8021148:	ea4b 02c2 	orr.w	r2, fp, r2, lsl #3
 802114c:	f811 bc03 	ldrb.w	fp, [r1, #-3]
 8021150:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021154:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021158:	fb1b fb0c 	smulbb	fp, fp, ip
 802115c:	b2d2      	uxtb	r2, r2
 802115e:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8021162:	fb02 b203 	mla	r2, r2, r3, fp
 8021166:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802116a:	fb17 f703 	smulbb	r7, r7, r3
 802116e:	fb16 f603 	smulbb	r6, r6, r3
 8021172:	b292      	uxth	r2, r2
 8021174:	f102 0b01 	add.w	fp, r2, #1
 8021178:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802117c:	1212      	asrs	r2, r2, #8
 802117e:	f801 2c03 	strb.w	r2, [r1, #-3]
 8021182:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 8021186:	fb02 770c 	mla	r7, r2, ip, r7
 802118a:	b2bf      	uxth	r7, r7
 802118c:	1c7a      	adds	r2, r7, #1
 802118e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8021192:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8021196:	fb02 660c 	mla	r6, r2, ip, r6
 802119a:	123f      	asrs	r7, r7, #8
 802119c:	b2b6      	uxth	r6, r6
 802119e:	f801 7c02 	strb.w	r7, [r1, #-2]
 80211a2:	1c72      	adds	r2, r6, #1
 80211a4:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80211a8:	1236      	asrs	r6, r6, #8
 80211aa:	f801 6c01 	strb.w	r6, [r1, #-1]
 80211ae:	e7bf      	b.n	8021130 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x150>
 80211b0:	4a13      	ldr	r2, [pc, #76]	; (8021200 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 80211b2:	f109 0901 	add.w	r9, r9, #1
 80211b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80211b8:	8812      	ldrh	r2, [r2, #0]
 80211ba:	1b12      	subs	r2, r2, r4
 80211bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80211c0:	440a      	add	r2, r1
 80211c2:	4410      	add	r0, r2
 80211c4:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80211c8:	1b12      	subs	r2, r2, r4
 80211ca:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 80211ce:	4415      	add	r5, r2
 80211d0:	e7a9      	b.n	8021126 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x146>
 80211d2:	8833      	ldrh	r3, [r6, #0]
 80211d4:	3701      	adds	r7, #1
 80211d6:	1b1b      	subs	r3, r3, r4
 80211d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80211dc:	4413      	add	r3, r2
 80211de:	4418      	add	r0, r3
 80211e0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80211e4:	1b1b      	subs	r3, r3, r4
 80211e6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80211ea:	441d      	add	r5, r3
 80211ec:	e76a      	b.n	80210c4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xe4>
 80211ee:	4b03      	ldr	r3, [pc, #12]	; (80211fc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 80211f0:	6818      	ldr	r0, [r3, #0]
 80211f2:	6803      	ldr	r3, [r0, #0]
 80211f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80211f6:	4798      	blx	r3
 80211f8:	e749      	b.n	802108e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 80211fa:	bf00      	nop
 80211fc:	2000b41c 	.word	0x2000b41c
 8021200:	2000b416 	.word	0x2000b416

08021204 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8021204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021208:	b08b      	sub	sp, #44	; 0x2c
 802120a:	460c      	mov	r4, r1
 802120c:	4680      	mov	r8, r0
 802120e:	469a      	mov	sl, r3
 8021210:	6808      	ldr	r0, [r1, #0]
 8021212:	ab06      	add	r3, sp, #24
 8021214:	6849      	ldr	r1, [r1, #4]
 8021216:	c303      	stmia	r3!, {r0, r1}
 8021218:	6810      	ldr	r0, [r2, #0]
 802121a:	ab08      	add	r3, sp, #32
 802121c:	6851      	ldr	r1, [r2, #4]
 802121e:	c303      	stmia	r3!, {r0, r1}
 8021220:	a806      	add	r0, sp, #24
 8021222:	f7fa fe6b 	bl	801befc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021226:	4621      	mov	r1, r4
 8021228:	a808      	add	r0, sp, #32
 802122a:	4c61      	ldr	r4, [pc, #388]	; (80213b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 802122c:	f7fa fe4e 	bl	801becc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021230:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021234:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8021238:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 802123c:	6820      	ldr	r0, [r4, #0]
 802123e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021242:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 8021246:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 802124a:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 802124e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8021252:	440a      	add	r2, r1
 8021254:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021258:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 802125c:	4413      	add	r3, r2
 802125e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8021262:	6803      	ldr	r3, [r0, #0]
 8021264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021266:	4798      	blx	r3
 8021268:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802126c:	d118      	bne.n	80212a0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 802126e:	f010 0f20 	tst.w	r0, #32
 8021272:	6820      	ldr	r0, [r4, #0]
 8021274:	d017      	beq.n	80212a6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8021276:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 802127a:	b2bf      	uxth	r7, r7
 802127c:	6801      	ldr	r1, [r0, #0]
 802127e:	9402      	str	r4, [sp, #8]
 8021280:	fa1f f489 	uxth.w	r4, r9
 8021284:	f8cd a00c 	str.w	sl, [sp, #12]
 8021288:	9401      	str	r4, [sp, #4]
 802128a:	9700      	str	r7, [sp, #0]
 802128c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8021290:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8021292:	4641      	mov	r1, r8
 8021294:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021298:	47a0      	blx	r4
 802129a:	b00b      	add	sp, #44	; 0x2c
 802129c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80212a4:	e7e5      	b.n	8021272 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80212a6:	6803      	ldr	r3, [r0, #0]
 80212a8:	6a1b      	ldr	r3, [r3, #32]
 80212aa:	4798      	blx	r3
 80212ac:	4b41      	ldr	r3, [pc, #260]	; (80213b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 80212ae:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80212b2:	f04f 0c00 	mov.w	ip, #0
 80212b6:	881a      	ldrh	r2, [r3, #0]
 80212b8:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 80212bc:	fb04 1202 	mla	r2, r4, r2, r1
 80212c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80212c4:	4410      	add	r0, r2
 80212c6:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 80212ca:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80212ce:	0092      	lsls	r2, r2, #2
 80212d0:	9105      	str	r1, [sp, #20]
 80212d2:	9204      	str	r2, [sp, #16]
 80212d4:	45cc      	cmp	ip, r9
 80212d6:	da65      	bge.n	80213a4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 80212d8:	1cc4      	adds	r4, r0, #3
 80212da:	f108 0504 	add.w	r5, r8, #4
 80212de:	f04f 0e00 	mov.w	lr, #0
 80212e2:	45be      	cmp	lr, r7
 80212e4:	da4d      	bge.n	8021382 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 80212e6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80212ea:	b181      	cbz	r1, 802130e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80212ec:	29ff      	cmp	r1, #255	; 0xff
 80212ee:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 80212f2:	d111      	bne.n	8021318 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 80212f4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80212f8:	d10e      	bne.n	8021318 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 80212fa:	f804 bc03 	strb.w	fp, [r4, #-3]
 80212fe:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8021302:	f804 2c02 	strb.w	r2, [r4, #-2]
 8021306:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 802130a:	f804 2c01 	strb.w	r2, [r4, #-1]
 802130e:	f10e 0e01 	add.w	lr, lr, #1
 8021312:	3403      	adds	r4, #3
 8021314:	3504      	adds	r5, #4
 8021316:	e7e4      	b.n	80212e2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 8021318:	fb0a f101 	mul.w	r1, sl, r1
 802131c:	1c4a      	adds	r2, r1, #1
 802131e:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8021322:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8021326:	1212      	asrs	r2, r2, #8
 8021328:	b296      	uxth	r6, r2
 802132a:	43d2      	mvns	r2, r2
 802132c:	fb1b fb06 	smulbb	fp, fp, r6
 8021330:	b2d2      	uxtb	r2, r2
 8021332:	fb01 b102 	mla	r1, r1, r2, fp
 8021336:	b289      	uxth	r1, r1
 8021338:	f101 0b01 	add.w	fp, r1, #1
 802133c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8021340:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 8021344:	fb1b fb02 	smulbb	fp, fp, r2
 8021348:	1209      	asrs	r1, r1, #8
 802134a:	f804 1c03 	strb.w	r1, [r4, #-3]
 802134e:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 8021352:	fb01 b106 	mla	r1, r1, r6, fp
 8021356:	b289      	uxth	r1, r1
 8021358:	f101 0b01 	add.w	fp, r1, #1
 802135c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8021360:	1209      	asrs	r1, r1, #8
 8021362:	f804 1c02 	strb.w	r1, [r4, #-2]
 8021366:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802136a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 802136e:	fb11 f202 	smulbb	r2, r1, r2
 8021372:	fb0b 2206 	mla	r2, fp, r6, r2
 8021376:	b292      	uxth	r2, r2
 8021378:	1c56      	adds	r6, r2, #1
 802137a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802137e:	1212      	asrs	r2, r2, #8
 8021380:	e7c3      	b.n	802130a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 8021382:	881a      	ldrh	r2, [r3, #0]
 8021384:	f10c 0c01 	add.w	ip, ip, #1
 8021388:	9905      	ldr	r1, [sp, #20]
 802138a:	1bd2      	subs	r2, r2, r7
 802138c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021390:	440a      	add	r2, r1
 8021392:	9904      	ldr	r1, [sp, #16]
 8021394:	4410      	add	r0, r2
 8021396:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802139a:	1bd2      	subs	r2, r2, r7
 802139c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80213a0:	4490      	add	r8, r2
 80213a2:	e797      	b.n	80212d4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 80213a4:	4b02      	ldr	r3, [pc, #8]	; (80213b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 80213a6:	6818      	ldr	r0, [r3, #0]
 80213a8:	6803      	ldr	r3, [r0, #0]
 80213aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80213ac:	4798      	blx	r3
 80213ae:	e774      	b.n	802129a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80213b0:	2000b41c 	.word	0x2000b41c
 80213b4:	2000b416 	.word	0x2000b416

080213b8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80213b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80213bc:	b085      	sub	sp, #20
 80213be:	4606      	mov	r6, r0
 80213c0:	460c      	mov	r4, r1
 80213c2:	4691      	mov	r9, r2
 80213c4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80213c8:	4698      	mov	r8, r3
 80213ca:	b3a5      	cbz	r5, 8021436 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 80213cc:	4608      	mov	r0, r1
 80213ce:	f7fd fa0b 	bl	801e7e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80213d2:	4607      	mov	r7, r0
 80213d4:	4620      	mov	r0, r4
 80213d6:	f7fd fa41 	bl	801e85c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80213da:	f8ad 000e 	strh.w	r0, [sp, #14]
 80213de:	4620      	mov	r0, r4
 80213e0:	f8ad 9008 	strh.w	r9, [sp, #8]
 80213e4:	f8ad 800a 	strh.w	r8, [sp, #10]
 80213e8:	f8ad 700c 	strh.w	r7, [sp, #12]
 80213ec:	f7fd fb4e 	bl	801ea8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80213f0:	b1a0      	cbz	r0, 802141c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 80213f2:	4620      	mov	r0, r4
 80213f4:	f7fd fb4a 	bl	801ea8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80213f8:	2801      	cmp	r0, #1
 80213fa:	d00f      	beq.n	802141c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 80213fc:	4620      	mov	r0, r4
 80213fe:	f7fd fb45 	bl	801ea8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021402:	2802      	cmp	r0, #2
 8021404:	d00a      	beq.n	802141c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 8021406:	4620      	mov	r0, r4
 8021408:	f7fd fb40 	bl	801ea8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 802140c:	280b      	cmp	r0, #11
 802140e:	d005      	beq.n	802141c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 8021410:	4b21      	ldr	r3, [pc, #132]	; (8021498 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe0>)
 8021412:	213f      	movs	r1, #63	; 0x3f
 8021414:	4a21      	ldr	r2, [pc, #132]	; (802149c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe4>)
 8021416:	4822      	ldr	r0, [pc, #136]	; (80214a0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe8>)
 8021418:	f007 f834 	bl	8028484 <__assert_func>
 802141c:	4620      	mov	r0, r4
 802141e:	f7fd fb35 	bl	801ea8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021422:	2802      	cmp	r0, #2
 8021424:	4620      	mov	r0, r4
 8021426:	d109      	bne.n	802143c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>
 8021428:	f7fd faac 	bl	801e984 <_ZNK8touchgfx6Bitmap7getDataEv>
 802142c:	462b      	mov	r3, r5
 802142e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021430:	a902      	add	r1, sp, #8
 8021432:	f7ff fee7 	bl	8021204 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021436:	b005      	add	sp, #20
 8021438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802143c:	f7fd fb26 	bl	801ea8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021440:	280b      	cmp	r0, #11
 8021442:	4620      	mov	r0, r4
 8021444:	d10d      	bne.n	8021462 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8021446:	f7fd fa9d 	bl	801e984 <_ZNK8touchgfx6Bitmap7getDataEv>
 802144a:	4606      	mov	r6, r0
 802144c:	4620      	mov	r0, r4
 802144e:	f7fd facb 	bl	801e9e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8021452:	9500      	str	r5, [sp, #0]
 8021454:	4601      	mov	r1, r0
 8021456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021458:	aa02      	add	r2, sp, #8
 802145a:	4630      	mov	r0, r6
 802145c:	f7ff fda0 	bl	8020fa0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8021460:	e7e9      	b.n	8021436 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 8021462:	f7fd fb13 	bl	801ea8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021466:	b940      	cbnz	r0, 802147a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc2>
 8021468:	4620      	mov	r0, r4
 802146a:	f7fd fa8b 	bl	801e984 <_ZNK8touchgfx6Bitmap7getDataEv>
 802146e:	462b      	mov	r3, r5
 8021470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021472:	a902      	add	r1, sp, #8
 8021474:	f7ff fdb4 	bl	8020fe0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8021478:	e7dd      	b.n	8021436 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 802147a:	6833      	ldr	r3, [r6, #0]
 802147c:	4620      	mov	r0, r4
 802147e:	68df      	ldr	r7, [r3, #12]
 8021480:	f7fd fa80 	bl	801e984 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021484:	2300      	movs	r3, #0
 8021486:	4601      	mov	r1, r0
 8021488:	aa02      	add	r2, sp, #8
 802148a:	4630      	mov	r0, r6
 802148c:	e9cd 5300 	strd	r5, r3, [sp]
 8021490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021492:	47b8      	blx	r7
 8021494:	e7cf      	b.n	8021436 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 8021496:	bf00      	nop
 8021498:	0802d9b5 	.word	0x0802d9b5
 802149c:	0802e0cb 	.word	0x0802e0cb
 80214a0:	0802db1f 	.word	0x0802db1f

080214a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80214a4:	b570      	push	{r4, r5, r6, lr}
 80214a6:	9d04      	ldr	r5, [sp, #16]
 80214a8:	460c      	mov	r4, r1
 80214aa:	4619      	mov	r1, r3
 80214ac:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80214b0:	2a0c      	cmp	r2, #12
 80214b2:	d826      	bhi.n	8021502 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 80214b4:	e8df f002 	tbb	[pc, r2]
 80214b8:	200e1407 	.word	0x200e1407
 80214bc:	20202020 	.word	0x20202020
 80214c0:	20202020 	.word	0x20202020
 80214c4:	20          	.byte	0x20
 80214c5:	00          	.byte	0x00
 80214c6:	4b0f      	ldr	r3, [pc, #60]	; (8021504 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 80214c8:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80214cc:	4a0e      	ldr	r2, [pc, #56]	; (8021508 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80214ce:	480f      	ldr	r0, [pc, #60]	; (802150c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80214d0:	f006 ffd8 	bl	8028484 <__assert_func>
 80214d4:	462a      	mov	r2, r5
 80214d6:	4620      	mov	r0, r4
 80214d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80214dc:	f7ff be92 	b.w	8021204 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80214e0:	6802      	ldr	r2, [r0, #0]
 80214e2:	2600      	movs	r6, #0
 80214e4:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80214e8:	68d6      	ldr	r6, [r2, #12]
 80214ea:	462b      	mov	r3, r5
 80214ec:	460a      	mov	r2, r1
 80214ee:	4621      	mov	r1, r4
 80214f0:	46b4      	mov	ip, r6
 80214f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80214f6:	4760      	bx	ip
 80214f8:	4b05      	ldr	r3, [pc, #20]	; (8021510 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 80214fa:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 80214fe:	4a02      	ldr	r2, [pc, #8]	; (8021508 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8021500:	e7e5      	b.n	80214ce <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8021502:	bd70      	pop	{r4, r5, r6, pc}
 8021504:	0802dcf6 	.word	0x0802dcf6
 8021508:	0802e3b3 	.word	0x0802e3b3
 802150c:	0802db1f 	.word	0x0802db1f
 8021510:	0802dd37 	.word	0x0802dd37

08021514 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8021514:	b158      	cbz	r0, 802152e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8021516:	2902      	cmp	r1, #2
 8021518:	d00f      	beq.n	802153a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 802151a:	2903      	cmp	r1, #3
 802151c:	d010      	beq.n	8021540 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 802151e:	2901      	cmp	r1, #1
 8021520:	d101      	bne.n	8021526 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8021522:	2001      	movs	r0, #1
 8021524:	4770      	bx	lr
 8021526:	4b08      	ldr	r3, [pc, #32]	; (8021548 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8021528:	8819      	ldrh	r1, [r3, #0]
 802152a:	4248      	negs	r0, r1
 802152c:	4770      	bx	lr
 802152e:	2902      	cmp	r1, #2
 8021530:	d006      	beq.n	8021540 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8021532:	2903      	cmp	r1, #3
 8021534:	d0f7      	beq.n	8021526 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8021536:	2901      	cmp	r1, #1
 8021538:	d1f3      	bne.n	8021522 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 802153a:	4b03      	ldr	r3, [pc, #12]	; (8021548 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 802153c:	8818      	ldrh	r0, [r3, #0]
 802153e:	4770      	bx	lr
 8021540:	f04f 30ff 	mov.w	r0, #4294967295
 8021544:	4770      	bx	lr
 8021546:	bf00      	nop
 8021548:	2000b416 	.word	0x2000b416

0802154c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 802154c:	b170      	cbz	r0, 802156c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 802154e:	2902      	cmp	r1, #2
 8021550:	d012      	beq.n	8021578 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 8021552:	2903      	cmp	r1, #3
 8021554:	d006      	beq.n	8021564 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8021556:	2901      	cmp	r1, #1
 8021558:	d001      	beq.n	802155e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 802155a:	2001      	movs	r0, #1
 802155c:	4770      	bx	lr
 802155e:	4b08      	ldr	r3, [pc, #32]	; (8021580 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8021560:	8818      	ldrh	r0, [r3, #0]
 8021562:	4770      	bx	lr
 8021564:	4b06      	ldr	r3, [pc, #24]	; (8021580 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8021566:	8818      	ldrh	r0, [r3, #0]
 8021568:	4240      	negs	r0, r0
 802156a:	4770      	bx	lr
 802156c:	2902      	cmp	r1, #2
 802156e:	d0f9      	beq.n	8021564 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8021570:	2903      	cmp	r1, #3
 8021572:	d0f2      	beq.n	802155a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8021574:	2901      	cmp	r1, #1
 8021576:	d1f2      	bne.n	802155e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8021578:	f04f 30ff 	mov.w	r0, #4294967295
 802157c:	4770      	bx	lr
 802157e:	bf00      	nop
 8021580:	2000b416 	.word	0x2000b416

08021584 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8021584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021588:	b097      	sub	sp, #92	; 0x5c
 802158a:	910b      	str	r1, [sp, #44]	; 0x2c
 802158c:	a912      	add	r1, sp, #72	; 0x48
 802158e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8021592:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8021596:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 802159a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 802159e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 80215a2:	e881 000c 	stmia.w	r1, {r2, r3}
 80215a6:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 80215aa:	9308      	str	r3, [sp, #32]
 80215ac:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80215b0:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 80215b4:	9310      	str	r3, [sp, #64]	; 0x40
 80215b6:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 80215ba:	798d      	ldrb	r5, [r1, #6]
 80215bc:	930c      	str	r3, [sp, #48]	; 0x30
 80215be:	7b4b      	ldrb	r3, [r1, #13]
 80215c0:	0158      	lsls	r0, r3, #5
 80215c2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80215c6:	4328      	orrs	r0, r5
 80215c8:	9007      	str	r0, [sp, #28]
 80215ca:	f000 8184 	beq.w	80218d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 80215ce:	011b      	lsls	r3, r3, #4
 80215d0:	79c8      	ldrb	r0, [r1, #7]
 80215d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80215d6:	4303      	orrs	r3, r0
 80215d8:	9309      	str	r3, [sp, #36]	; 0x24
 80215da:	f000 817c 	beq.w	80218d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 80215de:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80215e2:	b29b      	uxth	r3, r3
 80215e4:	2f00      	cmp	r7, #0
 80215e6:	f000 8122 	beq.w	802182e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 80215ea:	1aff      	subs	r7, r7, r3
 80215ec:	b2bf      	uxth	r7, r7
 80215ee:	043b      	lsls	r3, r7, #16
 80215f0:	d502      	bpl.n	80215f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80215f2:	1bf6      	subs	r6, r6, r7
 80215f4:	2700      	movs	r7, #0
 80215f6:	b236      	sxth	r6, r6
 80215f8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80215fc:	a812      	add	r0, sp, #72	; 0x48
 80215fe:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8021602:	428e      	cmp	r6, r1
 8021604:	b28b      	uxth	r3, r1
 8021606:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 802160a:	bfbf      	itttt	lt
 802160c:	18ff      	addlt	r7, r7, r3
 802160e:	1bbe      	sublt	r6, r7, r6
 8021610:	b2b7      	uxthlt	r7, r6
 8021612:	460e      	movlt	r6, r1
 8021614:	8891      	ldrh	r1, [r2, #4]
 8021616:	440b      	add	r3, r1
 8021618:	4631      	mov	r1, r6
 802161a:	b21b      	sxth	r3, r3
 802161c:	930f      	str	r3, [sp, #60]	; 0x3c
 802161e:	88d3      	ldrh	r3, [r2, #6]
 8021620:	9a08      	ldr	r2, [sp, #32]
 8021622:	449a      	add	sl, r3
 8021624:	fa0f f38a 	sxth.w	r3, sl
 8021628:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 802162c:	930e      	str	r3, [sp, #56]	; 0x38
 802162e:	4bb2      	ldr	r3, [pc, #712]	; (80218f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 8021630:	f893 b000 	ldrb.w	fp, [r3]
 8021634:	f10b 3cff 	add.w	ip, fp, #4294967295
 8021638:	f1dc 0300 	rsbs	r3, ip, #0
 802163c:	eb43 030c 	adc.w	r3, r3, ip
 8021640:	930d      	str	r3, [sp, #52]	; 0x34
 8021642:	464b      	mov	r3, r9
 8021644:	f7fa fb34 	bl	801bcb0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8021648:	4631      	mov	r1, r6
 802164a:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 802164e:	464b      	mov	r3, r9
 8021650:	9a08      	ldr	r2, [sp, #32]
 8021652:	a812      	add	r0, sp, #72	; 0x48
 8021654:	f7fa fb44 	bl	801bce0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8021658:	a916      	add	r1, sp, #88	; 0x58
 802165a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 802165e:	a815      	add	r0, sp, #84	; 0x54
 8021660:	f7fa fc1e 	bl	801bea0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8021664:	f1b9 0f00 	cmp.w	r9, #0
 8021668:	f040 80e4 	bne.w	8021834 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b0>
 802166c:	f1bb 0f01 	cmp.w	fp, #1
 8021670:	f040 80e8 	bne.w	8021844 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c0>
 8021674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021676:	2b00      	cmp	r3, #0
 8021678:	f040 8132 	bne.w	80218e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 802167c:	4b9f      	ldr	r3, [pc, #636]	; (80218fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 802167e:	6818      	ldr	r0, [r3, #0]
 8021680:	6803      	ldr	r3, [r0, #0]
 8021682:	6a1b      	ldr	r3, [r3, #32]
 8021684:	4798      	blx	r3
 8021686:	4a9e      	ldr	r2, [pc, #632]	; (8021900 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8021688:	f1b8 0f01 	cmp.w	r8, #1
 802168c:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8021690:	8811      	ldrh	r1, [r2, #0]
 8021692:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8021696:	fb01 2303 	mla	r3, r1, r3, r2
 802169a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802169e:	4403      	add	r3, r0
 80216a0:	9309      	str	r3, [sp, #36]	; 0x24
 80216a2:	f04f 0301 	mov.w	r3, #1
 80216a6:	fa03 f308 	lsl.w	r3, r3, r8
 80216aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80216ae:	b2db      	uxtb	r3, r3
 80216b0:	9311      	str	r3, [sp, #68]	; 0x44
 80216b2:	f000 8117 	beq.w	80218e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 80216b6:	f1b8 0f02 	cmp.w	r8, #2
 80216ba:	f000 8115 	beq.w	80218e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x364>
 80216be:	f1b8 0f04 	cmp.w	r8, #4
 80216c2:	bf14      	ite	ne
 80216c4:	2301      	movne	r3, #1
 80216c6:	2311      	moveq	r3, #17
 80216c8:	930a      	str	r3, [sp, #40]	; 0x28
 80216ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80216cc:	b153      	cbz	r3, 80216e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 80216ce:	2508      	movs	r5, #8
 80216d0:	9a07      	ldr	r2, [sp, #28]
 80216d2:	fb95 f3f8 	sdiv	r3, r5, r8
 80216d6:	1e5d      	subs	r5, r3, #1
 80216d8:	4415      	add	r5, r2
 80216da:	fb95 f5f3 	sdiv	r5, r5, r3
 80216de:	fb15 f503 	smulbb	r5, r5, r3
 80216e2:	b2ad      	uxth	r5, r5
 80216e4:	b907      	cbnz	r7, 80216e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x164>
 80216e6:	b174      	cbz	r4, 8021706 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x182>
 80216e8:	fb15 7304 	smlabb	r3, r5, r4, r7
 80216ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80216ee:	ebaa 0a04 	sub.w	sl, sl, r4
 80216f2:	fb13 f308 	smulbb	r3, r3, r8
 80216f6:	fa1f fa8a 	uxth.w	sl, sl
 80216fa:	b29b      	uxth	r3, r3
 80216fc:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8021700:	f003 0407 	and.w	r4, r3, #7
 8021704:	9226      	str	r2, [sp, #152]	; 0x98
 8021706:	4649      	mov	r1, r9
 8021708:	980d      	ldr	r0, [sp, #52]	; 0x34
 802170a:	f7ff ff03 	bl	8021514 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 802170e:	4649      	mov	r1, r9
 8021710:	4683      	mov	fp, r0
 8021712:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021714:	f7ff ff1a 	bl	802154c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8021718:	9a08      	ldr	r2, [sp, #32]
 802171a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802171c:	1bf6      	subs	r6, r6, r7
 802171e:	1a9b      	subs	r3, r3, r2
 8021720:	459a      	cmp	sl, r3
 8021722:	bfa8      	it	ge
 8021724:	469a      	movge	sl, r3
 8021726:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021728:	1b9e      	subs	r6, r3, r6
 802172a:	9b07      	ldr	r3, [sp, #28]
 802172c:	429e      	cmp	r6, r3
 802172e:	bfd4      	ite	le
 8021730:	ebc7 0706 	rsble	r7, r7, r6
 8021734:	ebc7 0703 	rsbgt	r7, r7, r3
 8021738:	1bed      	subs	r5, r5, r7
 802173a:	fb0b 0017 	mls	r0, fp, r7, r0
 802173e:	fb08 f305 	mul.w	r3, r8, r5
 8021742:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021746:	9308      	str	r3, [sp, #32]
 8021748:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802174a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 802174e:	930d      	str	r3, [sp, #52]	; 0x34
 8021750:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021752:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021756:	930e      	str	r3, [sp, #56]	; 0x38
 8021758:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802175a:	b2de      	uxtb	r6, r3
 802175c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802175e:	781a      	ldrb	r2, [r3, #0]
 8021760:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8021764:	ea27 7be7 	bic.w	fp, r7, r7, asr #31
 8021768:	4122      	asrs	r2, r4
 802176a:	9307      	str	r3, [sp, #28]
 802176c:	fb03 0b0b 	mla	fp, r3, fp, r0
 8021770:	b2d2      	uxtb	r2, r2
 8021772:	f1ba 0f00 	cmp.w	sl, #0
 8021776:	f340 80d8 	ble.w	802192a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a6>
 802177a:	46be      	mov	lr, r7
 802177c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802177e:	f1be 0f00 	cmp.w	lr, #0
 8021782:	f340 80bf 	ble.w	8021904 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8021786:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021788:	4013      	ands	r3, r2
 802178a:	d03e      	beq.n	802180a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 802178c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802178e:	fb13 f300 	smulbb	r3, r3, r0
 8021792:	2bfe      	cmp	r3, #254	; 0xfe
 8021794:	dd03      	ble.n	802179e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x21a>
 8021796:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021798:	28ff      	cmp	r0, #255	; 0xff
 802179a:	f000 80a7 	beq.w	80218ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x368>
 802179e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80217a0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80217a2:	fb10 f303 	smulbb	r3, r0, r3
 80217a6:	b29b      	uxth	r3, r3
 80217a8:	1c58      	adds	r0, r3, #1
 80217aa:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80217ae:	7808      	ldrb	r0, [r1, #0]
 80217b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80217b4:	fa1f fc83 	uxth.w	ip, r3
 80217b8:	43db      	mvns	r3, r3
 80217ba:	fb16 f90c 	smulbb	r9, r6, ip
 80217be:	b2db      	uxtb	r3, r3
 80217c0:	fb00 9003 	mla	r0, r0, r3, r9
 80217c4:	b280      	uxth	r0, r0
 80217c6:	f100 0901 	add.w	r9, r0, #1
 80217ca:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80217ce:	fb15 f90c 	smulbb	r9, r5, ip
 80217d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80217d4:	1200      	asrs	r0, r0, #8
 80217d6:	fb15 fc0c 	smulbb	ip, r5, ip
 80217da:	7008      	strb	r0, [r1, #0]
 80217dc:	7848      	ldrb	r0, [r1, #1]
 80217de:	fb00 9003 	mla	r0, r0, r3, r9
 80217e2:	b280      	uxth	r0, r0
 80217e4:	f100 0901 	add.w	r9, r0, #1
 80217e8:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80217ec:	1200      	asrs	r0, r0, #8
 80217ee:	7048      	strb	r0, [r1, #1]
 80217f0:	7888      	ldrb	r0, [r1, #2]
 80217f2:	fb00 cc03 	mla	ip, r0, r3, ip
 80217f6:	fa1f fc8c 	uxth.w	ip, ip
 80217fa:	f10c 0301 	add.w	r3, ip, #1
 80217fe:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021802:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021806:	f881 c002 	strb.w	ip, [r1, #2]
 802180a:	4444      	add	r4, r8
 802180c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021810:	b2a4      	uxth	r4, r4
 8021812:	2c07      	cmp	r4, #7
 8021814:	bf89      	itett	hi
 8021816:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8021818:	fa42 f208 	asrls.w	r2, r2, r8
 802181c:	2400      	movhi	r4, #0
 802181e:	785a      	ldrbhi	r2, [r3, #1]
 8021820:	bf8a      	itet	hi
 8021822:	3301      	addhi	r3, #1
 8021824:	b2d2      	uxtbls	r2, r2
 8021826:	9326      	strhi	r3, [sp, #152]	; 0x98
 8021828:	9b07      	ldr	r3, [sp, #28]
 802182a:	4419      	add	r1, r3
 802182c:	e7a7      	b.n	802177e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 802182e:	441e      	add	r6, r3
 8021830:	b236      	sxth	r6, r6
 8021832:	e6e1      	b.n	80215f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8021834:	f1b9 0f01 	cmp.w	r9, #1
 8021838:	f47f af1c 	bne.w	8021674 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802183c:	f1bb 0f01 	cmp.w	fp, #1
 8021840:	f47f af18 	bne.w	8021674 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021844:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 80218fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8021848:	f8db 0000 	ldr.w	r0, [fp]
 802184c:	6803      	ldr	r3, [r0, #0]
 802184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021850:	4798      	blx	r3
 8021852:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8021856:	465a      	mov	r2, fp
 8021858:	d006      	beq.n	8021868 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 802185a:	f1b8 0f04 	cmp.w	r8, #4
 802185e:	d13d      	bne.n	80218dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x358>
 8021860:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021862:	3300      	adds	r3, #0
 8021864:	bf18      	it	ne
 8021866:	2301      	movne	r3, #1
 8021868:	05c0      	lsls	r0, r0, #23
 802186a:	d567      	bpl.n	802193c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 802186c:	f1b8 0f08 	cmp.w	r8, #8
 8021870:	d164      	bne.n	802193c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 8021872:	2b00      	cmp	r3, #0
 8021874:	bf0c      	ite	eq
 8021876:	f44f 7180 	moveq.w	r1, #256	; 0x100
 802187a:	2180      	movne	r1, #128	; 0x80
 802187c:	2f00      	cmp	r7, #0
 802187e:	f47f aef9 	bne.w	8021674 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021882:	2c00      	cmp	r4, #0
 8021884:	f47f aef6 	bne.w	8021674 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021888:	9b07      	ldr	r3, [sp, #28]
 802188a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802188c:	18f3      	adds	r3, r6, r3
 802188e:	4283      	cmp	r3, r0
 8021890:	f73f aef0 	bgt.w	8021674 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021894:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
 8021898:	4403      	add	r3, r0
 802189a:	980e      	ldr	r0, [sp, #56]	; 0x38
 802189c:	4283      	cmp	r3, r0
 802189e:	f73f aee9 	bgt.w	8021674 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80218a2:	f1b8 0f08 	cmp.w	r8, #8
 80218a6:	6810      	ldr	r0, [r2, #0]
 80218a8:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80218ac:	bf18      	it	ne
 80218ae:	3501      	addne	r5, #1
 80218b0:	6804      	ldr	r4, [r0, #0]
 80218b2:	9105      	str	r1, [sp, #20]
 80218b4:	bf18      	it	ne
 80218b6:	f025 0501 	bicne.w	r5, r5, #1
 80218ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80218bc:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80218c0:	bf18      	it	ne
 80218c2:	b2ad      	uxthne	r5, r5
 80218c4:	9104      	str	r1, [sp, #16]
 80218c6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80218c8:	e9cd 5a00 	strd	r5, sl, [sp]
 80218cc:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80218d0:	9926      	ldr	r1, [sp, #152]	; 0x98
 80218d2:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80218d4:	47a0      	blx	r4
 80218d6:	b017      	add	sp, #92	; 0x5c
 80218d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218dc:	2300      	movs	r3, #0
 80218de:	e7c3      	b.n	8021868 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 80218e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80218e2:	e6d0      	b.n	8021686 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 80218e4:	23ff      	movs	r3, #255	; 0xff
 80218e6:	e6ef      	b.n	80216c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 80218e8:	2355      	movs	r3, #85	; 0x55
 80218ea:	e6ed      	b.n	80216c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 80218ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80218ee:	700e      	strb	r6, [r1, #0]
 80218f0:	704b      	strb	r3, [r1, #1]
 80218f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80218f4:	708b      	strb	r3, [r1, #2]
 80218f6:	e788      	b.n	802180a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 80218f8:	2000b414 	.word	0x2000b414
 80218fc:	2000b41c 	.word	0x2000b41c
 8021900:	2000b416 	.word	0x2000b416
 8021904:	9b08      	ldr	r3, [sp, #32]
 8021906:	b153      	cbz	r3, 802191e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8021908:	441c      	add	r4, r3
 802190a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802190c:	b2a4      	uxth	r4, r4
 802190e:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8021912:	f004 0407 	and.w	r4, r4, #7
 8021916:	781a      	ldrb	r2, [r3, #0]
 8021918:	9326      	str	r3, [sp, #152]	; 0x98
 802191a:	4122      	asrs	r2, r4
 802191c:	b2d2      	uxtb	r2, r2
 802191e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021920:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021924:	445b      	add	r3, fp
 8021926:	9309      	str	r3, [sp, #36]	; 0x24
 8021928:	e723      	b.n	8021772 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 802192a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802192c:	2b00      	cmp	r3, #0
 802192e:	d1d2      	bne.n	80218d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8021930:	4b05      	ldr	r3, [pc, #20]	; (8021948 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c4>)
 8021932:	6818      	ldr	r0, [r3, #0]
 8021934:	6803      	ldr	r3, [r0, #0]
 8021936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021938:	4798      	blx	r3
 802193a:	e7cc      	b.n	80218d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 802193c:	2b00      	cmp	r3, #0
 802193e:	f43f ae99 	beq.w	8021674 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021942:	2180      	movs	r1, #128	; 0x80
 8021944:	e79a      	b.n	802187c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 8021946:	bf00      	nop
 8021948:	2000b41c 	.word	0x2000b41c

0802194c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 802194c:	b538      	push	{r3, r4, r5, lr}
 802194e:	4c15      	ldr	r4, [pc, #84]	; (80219a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8021950:	4605      	mov	r5, r0
 8021952:	7823      	ldrb	r3, [r4, #0]
 8021954:	f3bf 8f5b 	dmb	ish
 8021958:	07da      	lsls	r2, r3, #31
 802195a:	d40b      	bmi.n	8021974 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802195c:	4620      	mov	r0, r4
 802195e:	f006 fd67 	bl	8028430 <__cxa_guard_acquire>
 8021962:	b138      	cbz	r0, 8021974 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021964:	4620      	mov	r0, r4
 8021966:	f006 fd6f 	bl	8028448 <__cxa_guard_release>
 802196a:	4a0f      	ldr	r2, [pc, #60]	; (80219a8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802196c:	490f      	ldr	r1, [pc, #60]	; (80219ac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802196e:	4810      	ldr	r0, [pc, #64]	; (80219b0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021970:	f006 fd54 	bl	802841c <__aeabi_atexit>
 8021974:	4c0f      	ldr	r4, [pc, #60]	; (80219b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8021976:	7823      	ldrb	r3, [r4, #0]
 8021978:	f3bf 8f5b 	dmb	ish
 802197c:	07db      	lsls	r3, r3, #31
 802197e:	d40b      	bmi.n	8021998 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021980:	4620      	mov	r0, r4
 8021982:	f006 fd55 	bl	8028430 <__cxa_guard_acquire>
 8021986:	b138      	cbz	r0, 8021998 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021988:	4620      	mov	r0, r4
 802198a:	f006 fd5d 	bl	8028448 <__cxa_guard_release>
 802198e:	4a06      	ldr	r2, [pc, #24]	; (80219a8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021990:	4909      	ldr	r1, [pc, #36]	; (80219b8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8021992:	480a      	ldr	r0, [pc, #40]	; (80219bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021994:	f006 fd42 	bl	802841c <__aeabi_atexit>
 8021998:	4b05      	ldr	r3, [pc, #20]	; (80219b0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802199a:	612b      	str	r3, [r5, #16]
 802199c:	4b07      	ldr	r3, [pc, #28]	; (80219bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802199e:	616b      	str	r3, [r5, #20]
 80219a0:	bd38      	pop	{r3, r4, r5, pc}
 80219a2:	bf00      	nop
 80219a4:	2000b528 	.word	0x2000b528
 80219a8:	20000000 	.word	0x20000000
 80219ac:	0802032b 	.word	0x0802032b
 80219b0:	20000084 	.word	0x20000084
 80219b4:	2000b52c 	.word	0x2000b52c
 80219b8:	08020329 	.word	0x08020329
 80219bc:	20000088 	.word	0x20000088

080219c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80219c0:	b538      	push	{r3, r4, r5, lr}
 80219c2:	4c15      	ldr	r4, [pc, #84]	; (8021a18 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80219c4:	4605      	mov	r5, r0
 80219c6:	7823      	ldrb	r3, [r4, #0]
 80219c8:	f3bf 8f5b 	dmb	ish
 80219cc:	07da      	lsls	r2, r3, #31
 80219ce:	d40b      	bmi.n	80219e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80219d0:	4620      	mov	r0, r4
 80219d2:	f006 fd2d 	bl	8028430 <__cxa_guard_acquire>
 80219d6:	b138      	cbz	r0, 80219e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80219d8:	4620      	mov	r0, r4
 80219da:	f006 fd35 	bl	8028448 <__cxa_guard_release>
 80219de:	4a0f      	ldr	r2, [pc, #60]	; (8021a1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80219e0:	490f      	ldr	r1, [pc, #60]	; (8021a20 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80219e2:	4810      	ldr	r0, [pc, #64]	; (8021a24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80219e4:	f006 fd1a 	bl	802841c <__aeabi_atexit>
 80219e8:	4c0f      	ldr	r4, [pc, #60]	; (8021a28 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80219ea:	7823      	ldrb	r3, [r4, #0]
 80219ec:	f3bf 8f5b 	dmb	ish
 80219f0:	07db      	lsls	r3, r3, #31
 80219f2:	d40b      	bmi.n	8021a0c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80219f4:	4620      	mov	r0, r4
 80219f6:	f006 fd1b 	bl	8028430 <__cxa_guard_acquire>
 80219fa:	b138      	cbz	r0, 8021a0c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80219fc:	4620      	mov	r0, r4
 80219fe:	f006 fd23 	bl	8028448 <__cxa_guard_release>
 8021a02:	4a06      	ldr	r2, [pc, #24]	; (8021a1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021a04:	4909      	ldr	r1, [pc, #36]	; (8021a2c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8021a06:	480a      	ldr	r0, [pc, #40]	; (8021a30 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021a08:	f006 fd08 	bl	802841c <__aeabi_atexit>
 8021a0c:	4b05      	ldr	r3, [pc, #20]	; (8021a24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021a0e:	60ab      	str	r3, [r5, #8]
 8021a10:	4b07      	ldr	r3, [pc, #28]	; (8021a30 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021a12:	60eb      	str	r3, [r5, #12]
 8021a14:	bd38      	pop	{r3, r4, r5, pc}
 8021a16:	bf00      	nop
 8021a18:	2000b508 	.word	0x2000b508
 8021a1c:	20000000 	.word	0x20000000
 8021a20:	0802032f 	.word	0x0802032f
 8021a24:	20000064 	.word	0x20000064
 8021a28:	2000b50c 	.word	0x2000b50c
 8021a2c:	0802032d 	.word	0x0802032d
 8021a30:	20000068 	.word	0x20000068

08021a34 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8021a34:	b510      	push	{r4, lr}
 8021a36:	4604      	mov	r4, r0
 8021a38:	f7ff ff88 	bl	802194c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8021a3c:	4620      	mov	r0, r4
 8021a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a42:	f7ff bfbd 	b.w	80219c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08021a48 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8021a48:	b538      	push	{r3, r4, r5, lr}
 8021a4a:	4c15      	ldr	r4, [pc, #84]	; (8021aa0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8021a4c:	4605      	mov	r5, r0
 8021a4e:	7823      	ldrb	r3, [r4, #0]
 8021a50:	f3bf 8f5b 	dmb	ish
 8021a54:	07da      	lsls	r2, r3, #31
 8021a56:	d40b      	bmi.n	8021a70 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021a58:	4620      	mov	r0, r4
 8021a5a:	f006 fce9 	bl	8028430 <__cxa_guard_acquire>
 8021a5e:	b138      	cbz	r0, 8021a70 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021a60:	4620      	mov	r0, r4
 8021a62:	f006 fcf1 	bl	8028448 <__cxa_guard_release>
 8021a66:	4a0f      	ldr	r2, [pc, #60]	; (8021aa4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021a68:	490f      	ldr	r1, [pc, #60]	; (8021aa8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8021a6a:	4810      	ldr	r0, [pc, #64]	; (8021aac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021a6c:	f006 fcd6 	bl	802841c <__aeabi_atexit>
 8021a70:	4c0f      	ldr	r4, [pc, #60]	; (8021ab0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8021a72:	7823      	ldrb	r3, [r4, #0]
 8021a74:	f3bf 8f5b 	dmb	ish
 8021a78:	07db      	lsls	r3, r3, #31
 8021a7a:	d40b      	bmi.n	8021a94 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021a7c:	4620      	mov	r0, r4
 8021a7e:	f006 fcd7 	bl	8028430 <__cxa_guard_acquire>
 8021a82:	b138      	cbz	r0, 8021a94 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021a84:	4620      	mov	r0, r4
 8021a86:	f006 fcdf 	bl	8028448 <__cxa_guard_release>
 8021a8a:	4a06      	ldr	r2, [pc, #24]	; (8021aa4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021a8c:	4909      	ldr	r1, [pc, #36]	; (8021ab4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8021a8e:	480a      	ldr	r0, [pc, #40]	; (8021ab8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021a90:	f006 fcc4 	bl	802841c <__aeabi_atexit>
 8021a94:	4b05      	ldr	r3, [pc, #20]	; (8021aac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021a96:	622b      	str	r3, [r5, #32]
 8021a98:	4b07      	ldr	r3, [pc, #28]	; (8021ab8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021a9a:	626b      	str	r3, [r5, #36]	; 0x24
 8021a9c:	bd38      	pop	{r3, r4, r5, pc}
 8021a9e:	bf00      	nop
 8021aa0:	2000b530 	.word	0x2000b530
 8021aa4:	20000000 	.word	0x20000000
 8021aa8:	08020323 	.word	0x08020323
 8021aac:	2000008c 	.word	0x2000008c
 8021ab0:	2000b534 	.word	0x2000b534
 8021ab4:	08020321 	.word	0x08020321
 8021ab8:	20000090 	.word	0x20000090

08021abc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8021abc:	b538      	push	{r3, r4, r5, lr}
 8021abe:	4c15      	ldr	r4, [pc, #84]	; (8021b14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8021ac0:	4605      	mov	r5, r0
 8021ac2:	7823      	ldrb	r3, [r4, #0]
 8021ac4:	f3bf 8f5b 	dmb	ish
 8021ac8:	07da      	lsls	r2, r3, #31
 8021aca:	d40b      	bmi.n	8021ae4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021acc:	4620      	mov	r0, r4
 8021ace:	f006 fcaf 	bl	8028430 <__cxa_guard_acquire>
 8021ad2:	b138      	cbz	r0, 8021ae4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021ad4:	4620      	mov	r0, r4
 8021ad6:	f006 fcb7 	bl	8028448 <__cxa_guard_release>
 8021ada:	4a0f      	ldr	r2, [pc, #60]	; (8021b18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021adc:	490f      	ldr	r1, [pc, #60]	; (8021b1c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8021ade:	4810      	ldr	r0, [pc, #64]	; (8021b20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021ae0:	f006 fc9c 	bl	802841c <__aeabi_atexit>
 8021ae4:	4c0f      	ldr	r4, [pc, #60]	; (8021b24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8021ae6:	7823      	ldrb	r3, [r4, #0]
 8021ae8:	f3bf 8f5b 	dmb	ish
 8021aec:	07db      	lsls	r3, r3, #31
 8021aee:	d40b      	bmi.n	8021b08 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021af0:	4620      	mov	r0, r4
 8021af2:	f006 fc9d 	bl	8028430 <__cxa_guard_acquire>
 8021af6:	b138      	cbz	r0, 8021b08 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021af8:	4620      	mov	r0, r4
 8021afa:	f006 fca5 	bl	8028448 <__cxa_guard_release>
 8021afe:	4a06      	ldr	r2, [pc, #24]	; (8021b18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021b00:	4909      	ldr	r1, [pc, #36]	; (8021b28 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8021b02:	480a      	ldr	r0, [pc, #40]	; (8021b2c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021b04:	f006 fc8a 	bl	802841c <__aeabi_atexit>
 8021b08:	4b05      	ldr	r3, [pc, #20]	; (8021b20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021b0a:	61ab      	str	r3, [r5, #24]
 8021b0c:	4b07      	ldr	r3, [pc, #28]	; (8021b2c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021b0e:	61eb      	str	r3, [r5, #28]
 8021b10:	bd38      	pop	{r3, r4, r5, pc}
 8021b12:	bf00      	nop
 8021b14:	2000b510 	.word	0x2000b510
 8021b18:	20000000 	.word	0x20000000
 8021b1c:	08020327 	.word	0x08020327
 8021b20:	2000006c 	.word	0x2000006c
 8021b24:	2000b514 	.word	0x2000b514
 8021b28:	08020325 	.word	0x08020325
 8021b2c:	20000070 	.word	0x20000070

08021b30 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8021b30:	b510      	push	{r4, lr}
 8021b32:	4604      	mov	r4, r0
 8021b34:	f7ff ff88 	bl	8021a48 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8021b38:	4620      	mov	r0, r4
 8021b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021b3e:	f7ff bfbd 	b.w	8021abc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021b44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8021b44:	b538      	push	{r3, r4, r5, lr}
 8021b46:	4c15      	ldr	r4, [pc, #84]	; (8021b9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8021b48:	4605      	mov	r5, r0
 8021b4a:	7823      	ldrb	r3, [r4, #0]
 8021b4c:	f3bf 8f5b 	dmb	ish
 8021b50:	07da      	lsls	r2, r3, #31
 8021b52:	d40b      	bmi.n	8021b6c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8021b54:	4620      	mov	r0, r4
 8021b56:	f006 fc6b 	bl	8028430 <__cxa_guard_acquire>
 8021b5a:	b138      	cbz	r0, 8021b6c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8021b5c:	4620      	mov	r0, r4
 8021b5e:	f006 fc73 	bl	8028448 <__cxa_guard_release>
 8021b62:	4a0f      	ldr	r2, [pc, #60]	; (8021ba0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8021b64:	490f      	ldr	r1, [pc, #60]	; (8021ba4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8021b66:	4810      	ldr	r0, [pc, #64]	; (8021ba8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8021b68:	f006 fc58 	bl	802841c <__aeabi_atexit>
 8021b6c:	4c0f      	ldr	r4, [pc, #60]	; (8021bac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8021b6e:	7823      	ldrb	r3, [r4, #0]
 8021b70:	f3bf 8f5b 	dmb	ish
 8021b74:	07db      	lsls	r3, r3, #31
 8021b76:	d40b      	bmi.n	8021b90 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8021b78:	4620      	mov	r0, r4
 8021b7a:	f006 fc59 	bl	8028430 <__cxa_guard_acquire>
 8021b7e:	b138      	cbz	r0, 8021b90 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8021b80:	4620      	mov	r0, r4
 8021b82:	f006 fc61 	bl	8028448 <__cxa_guard_release>
 8021b86:	4a06      	ldr	r2, [pc, #24]	; (8021ba0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8021b88:	4909      	ldr	r1, [pc, #36]	; (8021bb0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8021b8a:	480a      	ldr	r0, [pc, #40]	; (8021bb4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8021b8c:	f006 fc46 	bl	802841c <__aeabi_atexit>
 8021b90:	4b05      	ldr	r3, [pc, #20]	; (8021ba8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8021b92:	632b      	str	r3, [r5, #48]	; 0x30
 8021b94:	4b07      	ldr	r3, [pc, #28]	; (8021bb4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8021b96:	636b      	str	r3, [r5, #52]	; 0x34
 8021b98:	bd38      	pop	{r3, r4, r5, pc}
 8021b9a:	bf00      	nop
 8021b9c:	2000b518 	.word	0x2000b518
 8021ba0:	20000000 	.word	0x20000000
 8021ba4:	0802031b 	.word	0x0802031b
 8021ba8:	20000074 	.word	0x20000074
 8021bac:	2000b51c 	.word	0x2000b51c
 8021bb0:	08020319 	.word	0x08020319
 8021bb4:	20000078 	.word	0x20000078

08021bb8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8021bb8:	b538      	push	{r3, r4, r5, lr}
 8021bba:	4c15      	ldr	r4, [pc, #84]	; (8021c10 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8021bbc:	4605      	mov	r5, r0
 8021bbe:	7823      	ldrb	r3, [r4, #0]
 8021bc0:	f3bf 8f5b 	dmb	ish
 8021bc4:	07da      	lsls	r2, r3, #31
 8021bc6:	d40b      	bmi.n	8021be0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021bc8:	4620      	mov	r0, r4
 8021bca:	f006 fc31 	bl	8028430 <__cxa_guard_acquire>
 8021bce:	b138      	cbz	r0, 8021be0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021bd0:	4620      	mov	r0, r4
 8021bd2:	f006 fc39 	bl	8028448 <__cxa_guard_release>
 8021bd6:	4a0f      	ldr	r2, [pc, #60]	; (8021c14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8021bd8:	490f      	ldr	r1, [pc, #60]	; (8021c18 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8021bda:	4810      	ldr	r0, [pc, #64]	; (8021c1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8021bdc:	f006 fc1e 	bl	802841c <__aeabi_atexit>
 8021be0:	4c0f      	ldr	r4, [pc, #60]	; (8021c20 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8021be2:	7823      	ldrb	r3, [r4, #0]
 8021be4:	f3bf 8f5b 	dmb	ish
 8021be8:	07db      	lsls	r3, r3, #31
 8021bea:	d40b      	bmi.n	8021c04 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8021bec:	4620      	mov	r0, r4
 8021bee:	f006 fc1f 	bl	8028430 <__cxa_guard_acquire>
 8021bf2:	b138      	cbz	r0, 8021c04 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8021bf4:	4620      	mov	r0, r4
 8021bf6:	f006 fc27 	bl	8028448 <__cxa_guard_release>
 8021bfa:	4a06      	ldr	r2, [pc, #24]	; (8021c14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8021bfc:	4909      	ldr	r1, [pc, #36]	; (8021c24 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8021bfe:	480a      	ldr	r0, [pc, #40]	; (8021c28 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8021c00:	f006 fc0c 	bl	802841c <__aeabi_atexit>
 8021c04:	4b05      	ldr	r3, [pc, #20]	; (8021c1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8021c06:	62ab      	str	r3, [r5, #40]	; 0x28
 8021c08:	4b07      	ldr	r3, [pc, #28]	; (8021c28 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8021c0a:	62eb      	str	r3, [r5, #44]	; 0x2c
 8021c0c:	bd38      	pop	{r3, r4, r5, pc}
 8021c0e:	bf00      	nop
 8021c10:	2000b4f0 	.word	0x2000b4f0
 8021c14:	20000000 	.word	0x20000000
 8021c18:	0802031f 	.word	0x0802031f
 8021c1c:	2000004c 	.word	0x2000004c
 8021c20:	2000b4f4 	.word	0x2000b4f4
 8021c24:	0802031d 	.word	0x0802031d
 8021c28:	20000050 	.word	0x20000050

08021c2c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8021c2c:	b510      	push	{r4, lr}
 8021c2e:	4604      	mov	r4, r0
 8021c30:	f7ff ff88 	bl	8021b44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8021c34:	4620      	mov	r0, r4
 8021c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021c3a:	f7ff bfbd 	b.w	8021bb8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08021c40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8021c40:	b538      	push	{r3, r4, r5, lr}
 8021c42:	4c15      	ldr	r4, [pc, #84]	; (8021c98 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8021c44:	4605      	mov	r5, r0
 8021c46:	7823      	ldrb	r3, [r4, #0]
 8021c48:	f3bf 8f5b 	dmb	ish
 8021c4c:	07da      	lsls	r2, r3, #31
 8021c4e:	d40b      	bmi.n	8021c68 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021c50:	4620      	mov	r0, r4
 8021c52:	f006 fbed 	bl	8028430 <__cxa_guard_acquire>
 8021c56:	b138      	cbz	r0, 8021c68 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021c58:	4620      	mov	r0, r4
 8021c5a:	f006 fbf5 	bl	8028448 <__cxa_guard_release>
 8021c5e:	4a0f      	ldr	r2, [pc, #60]	; (8021c9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021c60:	490f      	ldr	r1, [pc, #60]	; (8021ca0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8021c62:	4810      	ldr	r0, [pc, #64]	; (8021ca4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021c64:	f006 fbda 	bl	802841c <__aeabi_atexit>
 8021c68:	4c0f      	ldr	r4, [pc, #60]	; (8021ca8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8021c6a:	7823      	ldrb	r3, [r4, #0]
 8021c6c:	f3bf 8f5b 	dmb	ish
 8021c70:	07db      	lsls	r3, r3, #31
 8021c72:	d40b      	bmi.n	8021c8c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021c74:	4620      	mov	r0, r4
 8021c76:	f006 fbdb 	bl	8028430 <__cxa_guard_acquire>
 8021c7a:	b138      	cbz	r0, 8021c8c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021c7c:	4620      	mov	r0, r4
 8021c7e:	f006 fbe3 	bl	8028448 <__cxa_guard_release>
 8021c82:	4a06      	ldr	r2, [pc, #24]	; (8021c9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021c84:	4909      	ldr	r1, [pc, #36]	; (8021cac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8021c86:	480a      	ldr	r0, [pc, #40]	; (8021cb0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021c88:	f006 fbc8 	bl	802841c <__aeabi_atexit>
 8021c8c:	4b05      	ldr	r3, [pc, #20]	; (8021ca4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021c8e:	642b      	str	r3, [r5, #64]	; 0x40
 8021c90:	4b07      	ldr	r3, [pc, #28]	; (8021cb0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021c92:	646b      	str	r3, [r5, #68]	; 0x44
 8021c94:	bd38      	pop	{r3, r4, r5, pc}
 8021c96:	bf00      	nop
 8021c98:	2000b520 	.word	0x2000b520
 8021c9c:	20000000 	.word	0x20000000
 8021ca0:	08020313 	.word	0x08020313
 8021ca4:	2000007c 	.word	0x2000007c
 8021ca8:	2000b524 	.word	0x2000b524
 8021cac:	08020311 	.word	0x08020311
 8021cb0:	20000080 	.word	0x20000080

08021cb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8021cb4:	b538      	push	{r3, r4, r5, lr}
 8021cb6:	4c15      	ldr	r4, [pc, #84]	; (8021d0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8021cb8:	4605      	mov	r5, r0
 8021cba:	7823      	ldrb	r3, [r4, #0]
 8021cbc:	f3bf 8f5b 	dmb	ish
 8021cc0:	07da      	lsls	r2, r3, #31
 8021cc2:	d40b      	bmi.n	8021cdc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021cc4:	4620      	mov	r0, r4
 8021cc6:	f006 fbb3 	bl	8028430 <__cxa_guard_acquire>
 8021cca:	b138      	cbz	r0, 8021cdc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021ccc:	4620      	mov	r0, r4
 8021cce:	f006 fbbb 	bl	8028448 <__cxa_guard_release>
 8021cd2:	4a0f      	ldr	r2, [pc, #60]	; (8021d10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021cd4:	490f      	ldr	r1, [pc, #60]	; (8021d14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8021cd6:	4810      	ldr	r0, [pc, #64]	; (8021d18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021cd8:	f006 fba0 	bl	802841c <__aeabi_atexit>
 8021cdc:	4c0f      	ldr	r4, [pc, #60]	; (8021d1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8021cde:	7823      	ldrb	r3, [r4, #0]
 8021ce0:	f3bf 8f5b 	dmb	ish
 8021ce4:	07db      	lsls	r3, r3, #31
 8021ce6:	d40b      	bmi.n	8021d00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021ce8:	4620      	mov	r0, r4
 8021cea:	f006 fba1 	bl	8028430 <__cxa_guard_acquire>
 8021cee:	b138      	cbz	r0, 8021d00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021cf0:	4620      	mov	r0, r4
 8021cf2:	f006 fba9 	bl	8028448 <__cxa_guard_release>
 8021cf6:	4a06      	ldr	r2, [pc, #24]	; (8021d10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021cf8:	4909      	ldr	r1, [pc, #36]	; (8021d20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8021cfa:	480a      	ldr	r0, [pc, #40]	; (8021d24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021cfc:	f006 fb8e 	bl	802841c <__aeabi_atexit>
 8021d00:	4b05      	ldr	r3, [pc, #20]	; (8021d18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021d02:	63ab      	str	r3, [r5, #56]	; 0x38
 8021d04:	4b07      	ldr	r3, [pc, #28]	; (8021d24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021d06:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021d08:	bd38      	pop	{r3, r4, r5, pc}
 8021d0a:	bf00      	nop
 8021d0c:	2000b500 	.word	0x2000b500
 8021d10:	20000000 	.word	0x20000000
 8021d14:	08020317 	.word	0x08020317
 8021d18:	2000005c 	.word	0x2000005c
 8021d1c:	2000b504 	.word	0x2000b504
 8021d20:	08020315 	.word	0x08020315
 8021d24:	20000060 	.word	0x20000060

08021d28 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8021d28:	b510      	push	{r4, lr}
 8021d2a:	4604      	mov	r4, r0
 8021d2c:	f7ff ff88 	bl	8021c40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8021d30:	4620      	mov	r0, r4
 8021d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021d36:	f7ff bfbd 	b.w	8021cb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08021d3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8021d3c:	b538      	push	{r3, r4, r5, lr}
 8021d3e:	4c15      	ldr	r4, [pc, #84]	; (8021d94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8021d40:	4605      	mov	r5, r0
 8021d42:	7823      	ldrb	r3, [r4, #0]
 8021d44:	f3bf 8f5b 	dmb	ish
 8021d48:	07da      	lsls	r2, r3, #31
 8021d4a:	d40b      	bmi.n	8021d64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021d4c:	4620      	mov	r0, r4
 8021d4e:	f006 fb6f 	bl	8028430 <__cxa_guard_acquire>
 8021d52:	b138      	cbz	r0, 8021d64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021d54:	4620      	mov	r0, r4
 8021d56:	f006 fb77 	bl	8028448 <__cxa_guard_release>
 8021d5a:	4a0f      	ldr	r2, [pc, #60]	; (8021d98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021d5c:	490f      	ldr	r1, [pc, #60]	; (8021d9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8021d5e:	4810      	ldr	r0, [pc, #64]	; (8021da0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021d60:	f006 fb5c 	bl	802841c <__aeabi_atexit>
 8021d64:	4c0f      	ldr	r4, [pc, #60]	; (8021da4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8021d66:	7823      	ldrb	r3, [r4, #0]
 8021d68:	f3bf 8f5b 	dmb	ish
 8021d6c:	07db      	lsls	r3, r3, #31
 8021d6e:	d40b      	bmi.n	8021d88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021d70:	4620      	mov	r0, r4
 8021d72:	f006 fb5d 	bl	8028430 <__cxa_guard_acquire>
 8021d76:	b138      	cbz	r0, 8021d88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021d78:	4620      	mov	r0, r4
 8021d7a:	f006 fb65 	bl	8028448 <__cxa_guard_release>
 8021d7e:	4a06      	ldr	r2, [pc, #24]	; (8021d98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021d80:	4909      	ldr	r1, [pc, #36]	; (8021da8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021d82:	480a      	ldr	r0, [pc, #40]	; (8021dac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021d84:	f006 fb4a 	bl	802841c <__aeabi_atexit>
 8021d88:	4b05      	ldr	r3, [pc, #20]	; (8021da0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021d8a:	652b      	str	r3, [r5, #80]	; 0x50
 8021d8c:	4b07      	ldr	r3, [pc, #28]	; (8021dac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021d8e:	656b      	str	r3, [r5, #84]	; 0x54
 8021d90:	bd38      	pop	{r3, r4, r5, pc}
 8021d92:	bf00      	nop
 8021d94:	2000b4f8 	.word	0x2000b4f8
 8021d98:	20000000 	.word	0x20000000
 8021d9c:	0802030b 	.word	0x0802030b
 8021da0:	20000054 	.word	0x20000054
 8021da4:	2000b4fc 	.word	0x2000b4fc
 8021da8:	08020309 	.word	0x08020309
 8021dac:	20000058 	.word	0x20000058

08021db0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021db0:	b538      	push	{r3, r4, r5, lr}
 8021db2:	4c15      	ldr	r4, [pc, #84]	; (8021e08 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8021db4:	4605      	mov	r5, r0
 8021db6:	7823      	ldrb	r3, [r4, #0]
 8021db8:	f3bf 8f5b 	dmb	ish
 8021dbc:	07da      	lsls	r2, r3, #31
 8021dbe:	d40b      	bmi.n	8021dd8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021dc0:	4620      	mov	r0, r4
 8021dc2:	f006 fb35 	bl	8028430 <__cxa_guard_acquire>
 8021dc6:	b138      	cbz	r0, 8021dd8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021dc8:	4620      	mov	r0, r4
 8021dca:	f006 fb3d 	bl	8028448 <__cxa_guard_release>
 8021dce:	4a0f      	ldr	r2, [pc, #60]	; (8021e0c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021dd0:	490f      	ldr	r1, [pc, #60]	; (8021e10 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8021dd2:	4810      	ldr	r0, [pc, #64]	; (8021e14 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021dd4:	f006 fb22 	bl	802841c <__aeabi_atexit>
 8021dd8:	4c0f      	ldr	r4, [pc, #60]	; (8021e18 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8021dda:	7823      	ldrb	r3, [r4, #0]
 8021ddc:	f3bf 8f5b 	dmb	ish
 8021de0:	07db      	lsls	r3, r3, #31
 8021de2:	d40b      	bmi.n	8021dfc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021de4:	4620      	mov	r0, r4
 8021de6:	f006 fb23 	bl	8028430 <__cxa_guard_acquire>
 8021dea:	b138      	cbz	r0, 8021dfc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021dec:	4620      	mov	r0, r4
 8021dee:	f006 fb2b 	bl	8028448 <__cxa_guard_release>
 8021df2:	4a06      	ldr	r2, [pc, #24]	; (8021e0c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021df4:	4909      	ldr	r1, [pc, #36]	; (8021e1c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8021df6:	480a      	ldr	r0, [pc, #40]	; (8021e20 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021df8:	f006 fb10 	bl	802841c <__aeabi_atexit>
 8021dfc:	4b05      	ldr	r3, [pc, #20]	; (8021e14 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021dfe:	64ab      	str	r3, [r5, #72]	; 0x48
 8021e00:	4b07      	ldr	r3, [pc, #28]	; (8021e20 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021e02:	64eb      	str	r3, [r5, #76]	; 0x4c
 8021e04:	bd38      	pop	{r3, r4, r5, pc}
 8021e06:	bf00      	nop
 8021e08:	2000b4e8 	.word	0x2000b4e8
 8021e0c:	20000000 	.word	0x20000000
 8021e10:	0802030f 	.word	0x0802030f
 8021e14:	20000044 	.word	0x20000044
 8021e18:	2000b4ec 	.word	0x2000b4ec
 8021e1c:	0802030d 	.word	0x0802030d
 8021e20:	20000048 	.word	0x20000048

08021e24 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8021e24:	b510      	push	{r4, lr}
 8021e26:	4604      	mov	r4, r0
 8021e28:	f7ff ff88 	bl	8021d3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8021e2c:	4620      	mov	r0, r4
 8021e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e32:	f7ff bfbd 	b.w	8021db0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08021e36 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8021e36:	b510      	push	{r4, lr}
 8021e38:	4604      	mov	r4, r0
 8021e3a:	f7ff fff3 	bl	8021e24 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8021e3e:	4620      	mov	r0, r4
 8021e40:	f7ff ff72 	bl	8021d28 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8021e44:	4620      	mov	r0, r4
 8021e46:	f7ff fe73 	bl	8021b30 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8021e4a:	4620      	mov	r0, r4
 8021e4c:	f7ff fdf2 	bl	8021a34 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8021e50:	4620      	mov	r0, r4
 8021e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e56:	f7ff bee9 	b.w	8021c2c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08021e5c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8021e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e60:	b087      	sub	sp, #28
 8021e62:	7888      	ldrb	r0, [r1, #2]
 8021e64:	4616      	mov	r6, r2
 8021e66:	9001      	str	r0, [sp, #4]
 8021e68:	7848      	ldrb	r0, [r1, #1]
 8021e6a:	9100      	str	r1, [sp, #0]
 8021e6c:	9002      	str	r0, [sp, #8]
 8021e6e:	7808      	ldrb	r0, [r1, #0]
 8021e70:	9901      	ldr	r1, [sp, #4]
 8021e72:	9003      	str	r0, [sp, #12]
 8021e74:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021e78:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8021e7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8021e80:	9902      	ldr	r1, [sp, #8]
 8021e82:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8021e86:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8021e8a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8021e8e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8021e92:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8021e96:	9005      	str	r0, [sp, #20]
 8021e98:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8021e9c:	fb05 ca0e 	mla	sl, r5, lr, ip
 8021ea0:	2d00      	cmp	r5, #0
 8021ea2:	eb06 080a 	add.w	r8, r6, sl
 8021ea6:	db4a      	blt.n	8021f3e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8021ea8:	45a9      	cmp	r9, r5
 8021eaa:	dd48      	ble.n	8021f3e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8021eac:	f1bc 0f00 	cmp.w	ip, #0
 8021eb0:	db43      	blt.n	8021f3a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8021eb2:	45e6      	cmp	lr, ip
 8021eb4:	dd41      	ble.n	8021f3a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 8021eb6:	f816 600a 	ldrb.w	r6, [r6, sl]
 8021eba:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021ebe:	441e      	add	r6, r3
 8021ec0:	f11c 0001 	adds.w	r0, ip, #1
 8021ec4:	d43e      	bmi.n	8021f44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8021ec6:	4586      	cmp	lr, r0
 8021ec8:	dd3c      	ble.n	8021f44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8021eca:	2a00      	cmp	r2, #0
 8021ecc:	d03a      	beq.n	8021f44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8021ece:	f898 0001 	ldrb.w	r0, [r8, #1]
 8021ed2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021ed6:	4418      	add	r0, r3
 8021ed8:	3501      	adds	r5, #1
 8021eda:	d437      	bmi.n	8021f4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8021edc:	45a9      	cmp	r9, r5
 8021ede:	dd35      	ble.n	8021f4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8021ee0:	b3a4      	cbz	r4, 8021f4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8021ee2:	f1bc 0f00 	cmp.w	ip, #0
 8021ee6:	db2f      	blt.n	8021f48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8021ee8:	45e6      	cmp	lr, ip
 8021eea:	dd2d      	ble.n	8021f48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8021eec:	f818 500e 	ldrb.w	r5, [r8, lr]
 8021ef0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021ef4:	441d      	add	r5, r3
 8021ef6:	f11c 0c01 	adds.w	ip, ip, #1
 8021efa:	d42a      	bmi.n	8021f52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8021efc:	45e6      	cmp	lr, ip
 8021efe:	dd28      	ble.n	8021f52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8021f00:	b33a      	cbz	r2, 8021f52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8021f02:	44c6      	add	lr, r8
 8021f04:	f89e c001 	ldrb.w	ip, [lr, #1]
 8021f08:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021f0c:	4463      	add	r3, ip
 8021f0e:	ea6f 0c07 	mvn.w	ip, r7
 8021f12:	2a0f      	cmp	r2, #15
 8021f14:	f896 a000 	ldrb.w	sl, [r6]
 8021f18:	fa5f fc8c 	uxtb.w	ip, ip
 8021f1c:	f890 b000 	ldrb.w	fp, [r0]
 8021f20:	f895 9000 	ldrb.w	r9, [r5]
 8021f24:	7819      	ldrb	r1, [r3, #0]
 8021f26:	d801      	bhi.n	8021f2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 8021f28:	2c0f      	cmp	r4, #15
 8021f2a:	d914      	bls.n	8021f56 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 8021f2c:	4b40      	ldr	r3, [pc, #256]	; (8022030 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8021f2e:	f240 11a5 	movw	r1, #421	; 0x1a5
 8021f32:	4a40      	ldr	r2, [pc, #256]	; (8022034 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8021f34:	4840      	ldr	r0, [pc, #256]	; (8022038 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 8021f36:	f006 faa5 	bl	8028484 <__assert_func>
 8021f3a:	ae05      	add	r6, sp, #20
 8021f3c:	e7c0      	b.n	8021ec0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 8021f3e:	a805      	add	r0, sp, #20
 8021f40:	4606      	mov	r6, r0
 8021f42:	e7c9      	b.n	8021ed8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 8021f44:	a805      	add	r0, sp, #20
 8021f46:	e7c7      	b.n	8021ed8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 8021f48:	ad05      	add	r5, sp, #20
 8021f4a:	e7d4      	b.n	8021ef6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 8021f4c:	ab05      	add	r3, sp, #20
 8021f4e:	461d      	mov	r5, r3
 8021f50:	e7dd      	b.n	8021f0e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 8021f52:	ab05      	add	r3, sp, #20
 8021f54:	e7db      	b.n	8021f0e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 8021f56:	b292      	uxth	r2, r2
 8021f58:	b2a4      	uxth	r4, r4
 8021f5a:	fa1f fc8c 	uxth.w	ip, ip
 8021f5e:	fb02 f804 	mul.w	r8, r2, r4
 8021f62:	0112      	lsls	r2, r2, #4
 8021f64:	b2bf      	uxth	r7, r7
 8021f66:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8021f6a:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8021f6e:	eba2 0208 	sub.w	r2, r2, r8
 8021f72:	b2a4      	uxth	r4, r4
 8021f74:	b292      	uxth	r2, r2
 8021f76:	ebae 0e04 	sub.w	lr, lr, r4
 8021f7a:	fb02 fb0b 	mul.w	fp, r2, fp
 8021f7e:	fa1f fe8e 	uxth.w	lr, lr
 8021f82:	fb0e ba0a 	mla	sl, lr, sl, fp
 8021f86:	fb04 aa09 	mla	sl, r4, r9, sl
 8021f8a:	fb08 aa01 	mla	sl, r8, r1, sl
 8021f8e:	9903      	ldr	r1, [sp, #12]
 8021f90:	fb11 f90c 	smulbb	r9, r1, ip
 8021f94:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8021f98:	9900      	ldr	r1, [sp, #0]
 8021f9a:	fb0a 9a07 	mla	sl, sl, r7, r9
 8021f9e:	fa1f fa8a 	uxth.w	sl, sl
 8021fa2:	f10a 0901 	add.w	r9, sl, #1
 8021fa6:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8021faa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021fae:	f881 a000 	strb.w	sl, [r1]
 8021fb2:	f890 a001 	ldrb.w	sl, [r0, #1]
 8021fb6:	f896 9001 	ldrb.w	r9, [r6, #1]
 8021fba:	fb02 fa0a 	mul.w	sl, r2, sl
 8021fbe:	9902      	ldr	r1, [sp, #8]
 8021fc0:	fb0e aa09 	mla	sl, lr, r9, sl
 8021fc4:	f895 9001 	ldrb.w	r9, [r5, #1]
 8021fc8:	fb04 aa09 	mla	sl, r4, r9, sl
 8021fcc:	f893 9001 	ldrb.w	r9, [r3, #1]
 8021fd0:	fb08 a909 	mla	r9, r8, r9, sl
 8021fd4:	fb11 fa0c 	smulbb	sl, r1, ip
 8021fd8:	9900      	ldr	r1, [sp, #0]
 8021fda:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8021fde:	fb09 a907 	mla	r9, r9, r7, sl
 8021fe2:	fa1f f989 	uxth.w	r9, r9
 8021fe6:	f109 0a01 	add.w	sl, r9, #1
 8021fea:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8021fee:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021ff2:	f881 9001 	strb.w	r9, [r1, #1]
 8021ff6:	7880      	ldrb	r0, [r0, #2]
 8021ff8:	78b6      	ldrb	r6, [r6, #2]
 8021ffa:	4342      	muls	r2, r0
 8021ffc:	78a8      	ldrb	r0, [r5, #2]
 8021ffe:	789b      	ldrb	r3, [r3, #2]
 8022000:	fb0e 2206 	mla	r2, lr, r6, r2
 8022004:	fb04 2400 	mla	r4, r4, r0, r2
 8022008:	fb08 4803 	mla	r8, r8, r3, r4
 802200c:	9b01      	ldr	r3, [sp, #4]
 802200e:	fb13 fc0c 	smulbb	ip, r3, ip
 8022012:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8022016:	fb08 c707 	mla	r7, r8, r7, ip
 802201a:	b2bf      	uxth	r7, r7
 802201c:	f107 0c01 	add.w	ip, r7, #1
 8022020:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8022024:	123f      	asrs	r7, r7, #8
 8022026:	708f      	strb	r7, [r1, #2]
 8022028:	b007      	add	sp, #28
 802202a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802202e:	bf00      	nop
 8022030:	0802dce5 	.word	0x0802dce5
 8022034:	0802e1da 	.word	0x0802e1da
 8022038:	0802ddae 	.word	0x0802ddae

0802203c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802203c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022040:	ed2d 8b08 	vpush	{d8-d11}
 8022044:	b095      	sub	sp, #84	; 0x54
 8022046:	eeb0 aa40 	vmov.f32	s20, s0
 802204a:	eef0 9a60 	vmov.f32	s19, s1
 802204e:	930a      	str	r3, [sp, #40]	; 0x28
 8022050:	eeb0 9a41 	vmov.f32	s18, s2
 8022054:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8022058:	eeb0 8a62 	vmov.f32	s16, s5
 802205c:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 802205e:	eef0 8a43 	vmov.f32	s17, s6
 8022062:	930c      	str	r3, [sp, #48]	; 0x30
 8022064:	eef0 ba44 	vmov.f32	s23, s8
 8022068:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802206c:	eeb0 ba64 	vmov.f32	s22, s9
 8022070:	9013      	str	r0, [sp, #76]	; 0x4c
 8022072:	eef0 aa45 	vmov.f32	s21, s10
 8022076:	9310      	str	r3, [sp, #64]	; 0x40
 8022078:	6860      	ldr	r0, [r4, #4]
 802207a:	910f      	str	r1, [sp, #60]	; 0x3c
 802207c:	9212      	str	r2, [sp, #72]	; 0x48
 802207e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8022080:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8022084:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8022088:	fb00 1303 	mla	r3, r0, r3, r1
 802208c:	6821      	ldr	r1, [r4, #0]
 802208e:	6854      	ldr	r4, [r2, #4]
 8022090:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022094:	18cb      	adds	r3, r1, r3
 8022096:	930b      	str	r3, [sp, #44]	; 0x2c
 8022098:	6813      	ldr	r3, [r2, #0]
 802209a:	930e      	str	r3, [sp, #56]	; 0x38
 802209c:	1d23      	adds	r3, r4, #4
 802209e:	9309      	str	r3, [sp, #36]	; 0x24
 80220a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80220a2:	43db      	mvns	r3, r3
 80220a4:	b2db      	uxtb	r3, r3
 80220a6:	930d      	str	r3, [sp, #52]	; 0x34
 80220a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80220aa:	2b00      	cmp	r3, #0
 80220ac:	dc03      	bgt.n	80220b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80220ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80220b0:	2b00      	cmp	r3, #0
 80220b2:	f340 823c 	ble.w	802252e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 80220b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220b8:	2b00      	cmp	r3, #0
 80220ba:	f340 8115 	ble.w	80222e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 80220be:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80220c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80220c2:	1412      	asrs	r2, r2, #16
 80220c4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80220c8:	d431      	bmi.n	802212e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80220ca:	1c51      	adds	r1, r2, #1
 80220cc:	428d      	cmp	r5, r1
 80220ce:	dd31      	ble.n	8022134 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80220d0:	2b00      	cmp	r3, #0
 80220d2:	db2f      	blt.n	8022134 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80220d4:	1c59      	adds	r1, r3, #1
 80220d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80220d8:	4288      	cmp	r0, r1
 80220da:	dd2b      	ble.n	8022134 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80220dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220de:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80220e0:	3b01      	subs	r3, #1
 80220e2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80220e4:	fb02 1203 	mla	r2, r2, r3, r1
 80220e8:	1412      	asrs	r2, r2, #16
 80220ea:	d42d      	bmi.n	8022148 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 80220ec:	3201      	adds	r2, #1
 80220ee:	4295      	cmp	r5, r2
 80220f0:	dd2a      	ble.n	8022148 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 80220f2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80220f4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80220f6:	fb02 1303 	mla	r3, r2, r3, r1
 80220fa:	141b      	asrs	r3, r3, #16
 80220fc:	d424      	bmi.n	8022148 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 80220fe:	3301      	adds	r3, #1
 8022100:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022102:	429a      	cmp	r2, r3
 8022104:	dd20      	ble.n	8022148 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8022106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022108:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 802210c:	f103 0c03 	add.w	ip, r3, #3
 8022110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022112:	9311      	str	r3, [sp, #68]	; 0x44
 8022114:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022116:	2b00      	cmp	r3, #0
 8022118:	f300 814f 	bgt.w	80223ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 802211c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802211e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022120:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022124:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022128:	441a      	add	r2, r3
 802212a:	920b      	str	r2, [sp, #44]	; 0x2c
 802212c:	e0de      	b.n	80222ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 802212e:	1c51      	adds	r1, r2, #1
 8022130:	f040 80cb 	bne.w	80222ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8022134:	42aa      	cmp	r2, r5
 8022136:	f280 80c8 	bge.w	80222ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 802213a:	1c5f      	adds	r7, r3, #1
 802213c:	f2c0 80c5 	blt.w	80222ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8022140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022142:	4293      	cmp	r3, r2
 8022144:	f280 80c1 	bge.w	80222ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8022148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802214a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802214c:	9311      	str	r3, [sp, #68]	; 0x44
 802214e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022150:	2b00      	cmp	r3, #0
 8022152:	dde3      	ble.n	802211c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8022154:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022156:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022158:	141a      	asrs	r2, r3, #16
 802215a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802215c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802215e:	1400      	asrs	r0, r0, #16
 8022160:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8022164:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022168:	f100 810e 	bmi.w	8022388 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 802216c:	1c46      	adds	r6, r0, #1
 802216e:	42b5      	cmp	r5, r6
 8022170:	f340 810c 	ble.w	802238c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8022174:	2a00      	cmp	r2, #0
 8022176:	f2c0 8109 	blt.w	802238c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 802217a:	1c56      	adds	r6, r2, #1
 802217c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802217e:	42b4      	cmp	r4, r6
 8022180:	f340 8104 	ble.w	802238c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8022184:	fb02 0005 	mla	r0, r2, r5, r0
 8022188:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802218a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802218c:	f814 e000 	ldrb.w	lr, [r4, r0]
 8022190:	4402      	add	r2, r0
 8022192:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022194:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022198:	eb00 080e 	add.w	r8, r0, lr
 802219c:	2b00      	cmp	r3, #0
 802219e:	f000 80e4 	beq.w	802236a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 80221a2:	f892 c001 	ldrb.w	ip, [r2, #1]
 80221a6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80221aa:	4484      	add	ip, r0
 80221ac:	2900      	cmp	r1, #0
 80221ae:	f000 80e5 	beq.w	802237c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 80221b2:	1950      	adds	r0, r2, r5
 80221b4:	5d52      	ldrb	r2, [r2, r5]
 80221b6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80221b8:	7840      	ldrb	r0, [r0, #1]
 80221ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80221be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80221c2:	4422      	add	r2, r4
 80221c4:	4420      	add	r0, r4
 80221c6:	b29b      	uxth	r3, r3
 80221c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80221ca:	b289      	uxth	r1, r1
 80221cc:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 80221d0:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80221d4:	fb03 fa01 	mul.w	sl, r3, r1
 80221d8:	011b      	lsls	r3, r3, #4
 80221da:	f89c e000 	ldrb.w	lr, [ip]
 80221de:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 80221e2:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 80221e6:	eba3 030a 	sub.w	r3, r3, sl
 80221ea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80221ec:	b289      	uxth	r1, r1
 80221ee:	b29b      	uxth	r3, r3
 80221f0:	eba9 0901 	sub.w	r9, r9, r1
 80221f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80221f8:	fa1f f989 	uxth.w	r9, r9
 80221fc:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022200:	f892 b000 	ldrb.w	fp, [r2]
 8022204:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022208:	f890 b000 	ldrb.w	fp, [r0]
 802220c:	fb0a ee0b 	mla	lr, sl, fp, lr
 8022210:	f897 b000 	ldrb.w	fp, [r7]
 8022214:	fb1b fb04 	smulbb	fp, fp, r4
 8022218:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802221c:	fb0e be06 	mla	lr, lr, r6, fp
 8022220:	fa1f fe8e 	uxth.w	lr, lr
 8022224:	f10e 0b01 	add.w	fp, lr, #1
 8022228:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 802222c:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8022230:	f887 b000 	strb.w	fp, [r7]
 8022234:	f89c e001 	ldrb.w	lr, [ip, #1]
 8022238:	f898 b001 	ldrb.w	fp, [r8, #1]
 802223c:	fb03 fe0e 	mul.w	lr, r3, lr
 8022240:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022244:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022248:	fb01 ee0b 	mla	lr, r1, fp, lr
 802224c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022250:	fb0a ee0b 	mla	lr, sl, fp, lr
 8022254:	f897 b001 	ldrb.w	fp, [r7, #1]
 8022258:	fb1b fb04 	smulbb	fp, fp, r4
 802225c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8022260:	fb0e be06 	mla	lr, lr, r6, fp
 8022264:	fa1f fe8e 	uxth.w	lr, lr
 8022268:	f10e 0b01 	add.w	fp, lr, #1
 802226c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8022270:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022274:	f887 e001 	strb.w	lr, [r7, #1]
 8022278:	f89c c002 	ldrb.w	ip, [ip, #2]
 802227c:	f898 e002 	ldrb.w	lr, [r8, #2]
 8022280:	fb03 f30c 	mul.w	r3, r3, ip
 8022284:	fb09 330e 	mla	r3, r9, lr, r3
 8022288:	f892 e002 	ldrb.w	lr, [r2, #2]
 802228c:	7882      	ldrb	r2, [r0, #2]
 802228e:	fb01 310e 	mla	r1, r1, lr, r3
 8022292:	fb0a 1a02 	mla	sl, sl, r2, r1
 8022296:	78b9      	ldrb	r1, [r7, #2]
 8022298:	fb11 f104 	smulbb	r1, r1, r4
 802229c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80222a0:	fb0a 1606 	mla	r6, sl, r6, r1
 80222a4:	b2b6      	uxth	r6, r6
 80222a6:	1c73      	adds	r3, r6, #1
 80222a8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80222ac:	1236      	asrs	r6, r6, #8
 80222ae:	70be      	strb	r6, [r7, #2]
 80222b0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80222b2:	3703      	adds	r7, #3
 80222b4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80222b6:	4413      	add	r3, r2
 80222b8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80222ba:	9327      	str	r3, [sp, #156]	; 0x9c
 80222bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80222be:	4413      	add	r3, r2
 80222c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80222c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80222c4:	3b01      	subs	r3, #1
 80222c6:	9311      	str	r3, [sp, #68]	; 0x44
 80222c8:	e741      	b.n	802214e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 80222ca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80222cc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80222ce:	4413      	add	r3, r2
 80222d0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80222d2:	9327      	str	r3, [sp, #156]	; 0x9c
 80222d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80222d6:	4413      	add	r3, r2
 80222d8:	9328      	str	r3, [sp, #160]	; 0xa0
 80222da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80222dc:	3b01      	subs	r3, #1
 80222de:	930a      	str	r3, [sp, #40]	; 0x28
 80222e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80222e2:	3303      	adds	r3, #3
 80222e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80222e6:	e6e6      	b.n	80220b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80222e8:	f47f aef8 	bne.w	80220dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 80222ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80222ee:	2b00      	cmp	r3, #0
 80222f0:	f340 811d 	ble.w	802252e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 80222f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80222f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80222fa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80222fe:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022302:	eef0 6a48 	vmov.f32	s13, s16
 8022306:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802230a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802230e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022312:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8022316:	eef0 6a68 	vmov.f32	s13, s17
 802231a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802231e:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8022322:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022326:	ee69 7a27 	vmul.f32	s15, s18, s15
 802232a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802232e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022332:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022336:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802233a:	ee18 2a10 	vmov	r2, s16
 802233e:	eeb0 8a47 	vmov.f32	s16, s14
 8022342:	fb92 f3f3 	sdiv	r3, r2, r3
 8022346:	ee18 2a90 	vmov	r2, s17
 802234a:	9329      	str	r3, [sp, #164]	; 0xa4
 802234c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802234e:	eef0 8a67 	vmov.f32	s17, s15
 8022352:	fb92 f3f3 	sdiv	r3, r2, r3
 8022356:	932a      	str	r3, [sp, #168]	; 0xa8
 8022358:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802235a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802235c:	3b01      	subs	r3, #1
 802235e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022360:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022362:	bf08      	it	eq
 8022364:	4613      	moveq	r3, r2
 8022366:	930a      	str	r3, [sp, #40]	; 0x28
 8022368:	e69e      	b.n	80220a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802236a:	b151      	cbz	r1, 8022382 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802236c:	5d52      	ldrb	r2, [r2, r5]
 802236e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022370:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022374:	4402      	add	r2, r0
 8022376:	4640      	mov	r0, r8
 8022378:	46c4      	mov	ip, r8
 802237a:	e724      	b.n	80221c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 802237c:	4640      	mov	r0, r8
 802237e:	4642      	mov	r2, r8
 8022380:	e721      	b.n	80221c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8022382:	4640      	mov	r0, r8
 8022384:	4642      	mov	r2, r8
 8022386:	e7f7      	b.n	8022378 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 8022388:	1c46      	adds	r6, r0, #1
 802238a:	d191      	bne.n	80222b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802238c:	4285      	cmp	r5, r0
 802238e:	dd8f      	ble.n	80222b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8022390:	1c54      	adds	r4, r2, #1
 8022392:	db8d      	blt.n	80222b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8022394:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022396:	4294      	cmp	r4, r2
 8022398:	dd8a      	ble.n	80222b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802239a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802239c:	9002      	str	r0, [sp, #8]
 802239e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80223a0:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80223a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80223a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80223a8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80223ac:	e9cd 5300 	strd	r5, r3, [sp]
 80223b0:	4639      	mov	r1, r7
 80223b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80223b4:	f7ff fd52 	bl	8021e5c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80223b8:	e77a      	b.n	80222b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80223ba:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80223bc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80223be:	1410      	asrs	r0, r2, #16
 80223c0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80223c4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80223c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80223c8:	1412      	asrs	r2, r2, #16
 80223ca:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80223ce:	fb05 2000 	mla	r0, r5, r0, r2
 80223d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80223d4:	f814 8000 	ldrb.w	r8, [r4, r0]
 80223d8:	4402      	add	r2, r0
 80223da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80223dc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80223e0:	eb00 0708 	add.w	r7, r0, r8
 80223e4:	2b00      	cmp	r3, #0
 80223e6:	f000 8093 	beq.w	8022510 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 80223ea:	7856      	ldrb	r6, [r2, #1]
 80223ec:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80223f0:	4406      	add	r6, r0
 80223f2:	2900      	cmp	r1, #0
 80223f4:	f000 8095 	beq.w	8022522 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80223f8:	1950      	adds	r0, r2, r5
 80223fa:	5d52      	ldrb	r2, [r2, r5]
 80223fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80223fe:	7840      	ldrb	r0, [r0, #1]
 8022400:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022404:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022408:	4422      	add	r2, r4
 802240a:	4420      	add	r0, r4
 802240c:	b29b      	uxth	r3, r3
 802240e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022410:	b289      	uxth	r1, r1
 8022412:	f10c 0c03 	add.w	ip, ip, #3
 8022416:	f814 b008 	ldrb.w	fp, [r4, r8]
 802241a:	fb03 f901 	mul.w	r9, r3, r1
 802241e:	011b      	lsls	r3, r3, #4
 8022420:	f896 8000 	ldrb.w	r8, [r6]
 8022424:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022428:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802242c:	eba3 0309 	sub.w	r3, r3, r9
 8022430:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022432:	b289      	uxth	r1, r1
 8022434:	b29b      	uxth	r3, r3
 8022436:	ebae 0e01 	sub.w	lr, lr, r1
 802243a:	fb03 f808 	mul.w	r8, r3, r8
 802243e:	fa1f fe8e 	uxth.w	lr, lr
 8022442:	fb0e 880b 	mla	r8, lr, fp, r8
 8022446:	f892 b000 	ldrb.w	fp, [r2]
 802244a:	fb01 880b 	mla	r8, r1, fp, r8
 802244e:	f890 b000 	ldrb.w	fp, [r0]
 8022452:	fb09 880b 	mla	r8, r9, fp, r8
 8022456:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 802245a:	fb1b fb04 	smulbb	fp, fp, r4
 802245e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8022462:	fb08 b80a 	mla	r8, r8, sl, fp
 8022466:	fa1f f888 	uxth.w	r8, r8
 802246a:	f108 0b01 	add.w	fp, r8, #1
 802246e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8022472:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022476:	f80c 8c06 	strb.w	r8, [ip, #-6]
 802247a:	f896 8001 	ldrb.w	r8, [r6, #1]
 802247e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8022482:	fb03 f808 	mul.w	r8, r3, r8
 8022486:	fb0e 880b 	mla	r8, lr, fp, r8
 802248a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802248e:	fb01 880b 	mla	r8, r1, fp, r8
 8022492:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022496:	fb09 880b 	mla	r8, r9, fp, r8
 802249a:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 802249e:	fb1b fb04 	smulbb	fp, fp, r4
 80224a2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80224a6:	fb08 b80a 	mla	r8, r8, sl, fp
 80224aa:	fa1f f888 	uxth.w	r8, r8
 80224ae:	f108 0b01 	add.w	fp, r8, #1
 80224b2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80224b6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80224ba:	f80c 8c05 	strb.w	r8, [ip, #-5]
 80224be:	78b6      	ldrb	r6, [r6, #2]
 80224c0:	78bf      	ldrb	r7, [r7, #2]
 80224c2:	4373      	muls	r3, r6
 80224c4:	7896      	ldrb	r6, [r2, #2]
 80224c6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80224c8:	fb0e 3307 	mla	r3, lr, r7, r3
 80224cc:	fb01 3306 	mla	r3, r1, r6, r3
 80224d0:	7886      	ldrb	r6, [r0, #2]
 80224d2:	fb09 3906 	mla	r9, r9, r6, r3
 80224d6:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 80224da:	fb13 f304 	smulbb	r3, r3, r4
 80224de:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80224e2:	fb09 390a 	mla	r9, r9, sl, r3
 80224e6:	fa1f f989 	uxth.w	r9, r9
 80224ea:	f109 0301 	add.w	r3, r9, #1
 80224ee:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80224f2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80224f4:	4413      	add	r3, r2
 80224f6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80224f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80224fc:	9327      	str	r3, [sp, #156]	; 0x9c
 80224fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022500:	f80c 9c04 	strb.w	r9, [ip, #-4]
 8022504:	4413      	add	r3, r2
 8022506:	9328      	str	r3, [sp, #160]	; 0xa0
 8022508:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802250a:	3b01      	subs	r3, #1
 802250c:	9311      	str	r3, [sp, #68]	; 0x44
 802250e:	e601      	b.n	8022114 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8022510:	b151      	cbz	r1, 8022528 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 8022512:	5d52      	ldrb	r2, [r2, r5]
 8022514:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022516:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802251a:	4402      	add	r2, r0
 802251c:	4638      	mov	r0, r7
 802251e:	463e      	mov	r6, r7
 8022520:	e774      	b.n	802240c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8022522:	4638      	mov	r0, r7
 8022524:	463a      	mov	r2, r7
 8022526:	e771      	b.n	802240c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8022528:	4638      	mov	r0, r7
 802252a:	463a      	mov	r2, r7
 802252c:	e7f7      	b.n	802251e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802252e:	b015      	add	sp, #84	; 0x54
 8022530:	ecbd 8b08 	vpop	{d8-d11}
 8022534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022538 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8022538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802253c:	780d      	ldrb	r5, [r1, #0]
 802253e:	f891 9002 	ldrb.w	r9, [r1, #2]
 8022542:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 8022546:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 802254a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 802254e:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8022552:	f891 9001 	ldrb.w	r9, [r1, #1]
 8022556:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 802255a:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 802255e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8022562:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8022566:	9501      	str	r5, [sp, #4]
 8022568:	fb06 470c 	mla	r7, r6, ip, r4
 802256c:	2e00      	cmp	r6, #0
 802256e:	eb02 0e07 	add.w	lr, r2, r7
 8022572:	db46      	blt.n	8022602 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8022574:	45b0      	cmp	r8, r6
 8022576:	dd44      	ble.n	8022602 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8022578:	2c00      	cmp	r4, #0
 802257a:	db40      	blt.n	80225fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 802257c:	45a4      	cmp	ip, r4
 802257e:	dd3e      	ble.n	80225fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8022580:	5dd7      	ldrb	r7, [r2, r7]
 8022582:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022586:	441f      	add	r7, r3
 8022588:	1c62      	adds	r2, r4, #1
 802258a:	d43d      	bmi.n	8022608 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 802258c:	4594      	cmp	ip, r2
 802258e:	dd3b      	ble.n	8022608 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8022590:	f1ba 0f00 	cmp.w	sl, #0
 8022594:	d038      	beq.n	8022608 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8022596:	f89e 5001 	ldrb.w	r5, [lr, #1]
 802259a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802259e:	441d      	add	r5, r3
 80225a0:	3601      	adds	r6, #1
 80225a2:	d435      	bmi.n	8022610 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80225a4:	45b0      	cmp	r8, r6
 80225a6:	dd33      	ble.n	8022610 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80225a8:	b390      	cbz	r0, 8022610 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80225aa:	2c00      	cmp	r4, #0
 80225ac:	db2e      	blt.n	802260c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 80225ae:	45a4      	cmp	ip, r4
 80225b0:	dd2c      	ble.n	802260c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 80225b2:	f81e 600c 	ldrb.w	r6, [lr, ip]
 80225b6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80225ba:	441e      	add	r6, r3
 80225bc:	1c62      	adds	r2, r4, #1
 80225be:	d42a      	bmi.n	8022616 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 80225c0:	4594      	cmp	ip, r2
 80225c2:	dd28      	ble.n	8022616 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 80225c4:	f1ba 0f00 	cmp.w	sl, #0
 80225c8:	d025      	beq.n	8022616 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 80225ca:	44f4      	add	ip, lr
 80225cc:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80225d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80225d4:	4413      	add	r3, r2
 80225d6:	f1ba 0f0f 	cmp.w	sl, #15
 80225da:	f897 8000 	ldrb.w	r8, [r7]
 80225de:	f895 9000 	ldrb.w	r9, [r5]
 80225e2:	f896 e000 	ldrb.w	lr, [r6]
 80225e6:	f893 c000 	ldrb.w	ip, [r3]
 80225ea:	d801      	bhi.n	80225f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 80225ec:	280f      	cmp	r0, #15
 80225ee:	d914      	bls.n	802261a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 80225f0:	4b29      	ldr	r3, [pc, #164]	; (8022698 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 80225f2:	f240 11a5 	movw	r1, #421	; 0x1a5
 80225f6:	4a29      	ldr	r2, [pc, #164]	; (802269c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 80225f8:	4829      	ldr	r0, [pc, #164]	; (80226a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 80225fa:	f005 ff43 	bl	8028484 <__assert_func>
 80225fe:	af01      	add	r7, sp, #4
 8022600:	e7c2      	b.n	8022588 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8022602:	ad01      	add	r5, sp, #4
 8022604:	462f      	mov	r7, r5
 8022606:	e7cb      	b.n	80225a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8022608:	ad01      	add	r5, sp, #4
 802260a:	e7c9      	b.n	80225a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 802260c:	ae01      	add	r6, sp, #4
 802260e:	e7d5      	b.n	80225bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 8022610:	ab01      	add	r3, sp, #4
 8022612:	461e      	mov	r6, r3
 8022614:	e7df      	b.n	80225d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 8022616:	ab01      	add	r3, sp, #4
 8022618:	e7dd      	b.n	80225d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 802261a:	fa1f f48a 	uxth.w	r4, sl
 802261e:	b280      	uxth	r0, r0
 8022620:	fb04 fa00 	mul.w	sl, r4, r0
 8022624:	0124      	lsls	r4, r4, #4
 8022626:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802262a:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 802262e:	b282      	uxth	r2, r0
 8022630:	eba4 000a 	sub.w	r0, r4, sl
 8022634:	ebab 0b02 	sub.w	fp, fp, r2
 8022638:	b280      	uxth	r0, r0
 802263a:	fa1f fb8b 	uxth.w	fp, fp
 802263e:	fb00 f909 	mul.w	r9, r0, r9
 8022642:	fb0b 9808 	mla	r8, fp, r8, r9
 8022646:	fb02 8e0e 	mla	lr, r2, lr, r8
 802264a:	fb0a ec0c 	mla	ip, sl, ip, lr
 802264e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022652:	f881 c000 	strb.w	ip, [r1]
 8022656:	786c      	ldrb	r4, [r5, #1]
 8022658:	f897 c001 	ldrb.w	ip, [r7, #1]
 802265c:	4344      	muls	r4, r0
 802265e:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8022662:	7874      	ldrb	r4, [r6, #1]
 8022664:	fb02 cc04 	mla	ip, r2, r4, ip
 8022668:	785c      	ldrb	r4, [r3, #1]
 802266a:	fb0a c404 	mla	r4, sl, r4, ip
 802266e:	1224      	asrs	r4, r4, #8
 8022670:	704c      	strb	r4, [r1, #1]
 8022672:	78ad      	ldrb	r5, [r5, #2]
 8022674:	78bc      	ldrb	r4, [r7, #2]
 8022676:	4368      	muls	r0, r5
 8022678:	fb0b 0b04 	mla	fp, fp, r4, r0
 802267c:	78b0      	ldrb	r0, [r6, #2]
 802267e:	fb02 b000 	mla	r0, r2, r0, fp
 8022682:	789a      	ldrb	r2, [r3, #2]
 8022684:	fb0a 0a02 	mla	sl, sl, r2, r0
 8022688:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802268c:	f881 a002 	strb.w	sl, [r1, #2]
 8022690:	b003      	add	sp, #12
 8022692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022696:	bf00      	nop
 8022698:	0802dce5 	.word	0x0802dce5
 802269c:	0802e1da 	.word	0x0802e1da
 80226a0:	0802ddae 	.word	0x0802ddae

080226a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80226a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226a8:	ed2d 8b0a 	vpush	{d8-d12}
 80226ac:	b08f      	sub	sp, #60	; 0x3c
 80226ae:	eeb0 aa40 	vmov.f32	s20, s0
 80226b2:	eef0 9a60 	vmov.f32	s19, s1
 80226b6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80226b8:	eeb0 9a41 	vmov.f32	s18, s2
 80226bc:	9307      	str	r3, [sp, #28]
 80226be:	eeb0 8a62 	vmov.f32	s16, s5
 80226c2:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 80226c6:	eef0 8a43 	vmov.f32	s17, s6
 80226ca:	900d      	str	r0, [sp, #52]	; 0x34
 80226cc:	eeb0 ca44 	vmov.f32	s24, s8
 80226d0:	6860      	ldr	r0, [r4, #4]
 80226d2:	eef0 ba64 	vmov.f32	s23, s9
 80226d6:	9309      	str	r3, [sp, #36]	; 0x24
 80226d8:	eeb0 ba45 	vmov.f32	s22, s10
 80226dc:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80226e0:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 80226e4:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 80226e8:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 80226ec:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80226ee:	fb00 1303 	mla	r3, r0, r3, r1
 80226f2:	6821      	ldr	r1, [r4, #0]
 80226f4:	6854      	ldr	r4, [r2, #4]
 80226f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80226fa:	3404      	adds	r4, #4
 80226fc:	18cb      	adds	r3, r1, r3
 80226fe:	9308      	str	r3, [sp, #32]
 8022700:	6813      	ldr	r3, [r2, #0]
 8022702:	930a      	str	r3, [sp, #40]	; 0x28
 8022704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022706:	2b00      	cmp	r3, #0
 8022708:	dc03      	bgt.n	8022712 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802270a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802270c:	2b00      	cmp	r3, #0
 802270e:	f340 81d2 	ble.w	8022ab6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8022712:	9b07      	ldr	r3, [sp, #28]
 8022714:	2b00      	cmp	r3, #0
 8022716:	f340 80e3 	ble.w	80228e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 802271a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802271c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802271e:	1412      	asrs	r2, r2, #16
 8022720:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022724:	d42f      	bmi.n	8022786 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8022726:	1c51      	adds	r1, r2, #1
 8022728:	428d      	cmp	r5, r1
 802272a:	dd2f      	ble.n	802278c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 802272c:	2b00      	cmp	r3, #0
 802272e:	db2d      	blt.n	802278c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8022730:	1c59      	adds	r1, r3, #1
 8022732:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022734:	4288      	cmp	r0, r1
 8022736:	dd29      	ble.n	802278c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8022738:	9b07      	ldr	r3, [sp, #28]
 802273a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802273c:	3b01      	subs	r3, #1
 802273e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8022740:	fb02 1203 	mla	r2, r2, r3, r1
 8022744:	1412      	asrs	r2, r2, #16
 8022746:	d42b      	bmi.n	80227a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022748:	3201      	adds	r2, #1
 802274a:	4295      	cmp	r5, r2
 802274c:	dd28      	ble.n	80227a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802274e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022750:	9924      	ldr	r1, [sp, #144]	; 0x90
 8022752:	fb02 1303 	mla	r3, r2, r3, r1
 8022756:	141b      	asrs	r3, r3, #16
 8022758:	d422      	bmi.n	80227a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802275a:	3301      	adds	r3, #1
 802275c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802275e:	429a      	cmp	r2, r3
 8022760:	dd1e      	ble.n	80227a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022762:	9b08      	ldr	r3, [sp, #32]
 8022764:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8022768:	f103 0803 	add.w	r8, r3, #3
 802276c:	f1ba 0f00 	cmp.w	sl, #0
 8022770:	f300 8119 	bgt.w	80229a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 8022774:	9b07      	ldr	r3, [sp, #28]
 8022776:	9a08      	ldr	r2, [sp, #32]
 8022778:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802277c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022780:	441a      	add	r2, r3
 8022782:	9208      	str	r2, [sp, #32]
 8022784:	e0ae      	b.n	80228e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 8022786:	1c51      	adds	r1, r2, #1
 8022788:	f040 809b 	bne.w	80228c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 802278c:	42aa      	cmp	r2, r5
 802278e:	f280 8098 	bge.w	80228c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8022792:	1c5a      	adds	r2, r3, #1
 8022794:	f2c0 8095 	blt.w	80228c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8022798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802279a:	4293      	cmp	r3, r2
 802279c:	f280 8091 	bge.w	80228c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80227a0:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 80227a4:	f1bb 0f00 	cmp.w	fp, #0
 80227a8:	dde4      	ble.n	8022774 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80227aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80227ac:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80227ae:	141a      	asrs	r2, r3, #16
 80227b0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80227b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80227b4:	1400      	asrs	r0, r0, #16
 80227b6:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80227ba:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80227be:	f100 80dc 	bmi.w	802297a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 80227c2:	1c47      	adds	r7, r0, #1
 80227c4:	42bd      	cmp	r5, r7
 80227c6:	f340 80da 	ble.w	802297e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 80227ca:	2a00      	cmp	r2, #0
 80227cc:	f2c0 80d7 	blt.w	802297e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 80227d0:	f102 0c01 	add.w	ip, r2, #1
 80227d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80227d6:	4567      	cmp	r7, ip
 80227d8:	f340 80d1 	ble.w	802297e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 80227dc:	fb02 0005 	mla	r0, r2, r5, r0
 80227e0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80227e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80227e4:	f817 8000 	ldrb.w	r8, [r7, r0]
 80227e8:	4402      	add	r2, r0
 80227ea:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80227ee:	eb04 0c08 	add.w	ip, r4, r8
 80227f2:	2b00      	cmp	r3, #0
 80227f4:	f000 80b3 	beq.w	802295e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 80227f8:	7857      	ldrb	r7, [r2, #1]
 80227fa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80227fe:	4427      	add	r7, r4
 8022800:	2900      	cmp	r1, #0
 8022802:	f000 80b4 	beq.w	802296e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 8022806:	1950      	adds	r0, r2, r5
 8022808:	5d52      	ldrb	r2, [r2, r5]
 802280a:	7840      	ldrb	r0, [r0, #1]
 802280c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022810:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022814:	4422      	add	r2, r4
 8022816:	4420      	add	r0, r4
 8022818:	b29b      	uxth	r3, r3
 802281a:	f814 a008 	ldrb.w	sl, [r4, r8]
 802281e:	b289      	uxth	r1, r1
 8022820:	f897 8000 	ldrb.w	r8, [r7]
 8022824:	fb03 f901 	mul.w	r9, r3, r1
 8022828:	011b      	lsls	r3, r3, #4
 802282a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802282e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022832:	eba3 0309 	sub.w	r3, r3, r9
 8022836:	b289      	uxth	r1, r1
 8022838:	b29b      	uxth	r3, r3
 802283a:	ebae 0e01 	sub.w	lr, lr, r1
 802283e:	fb03 f808 	mul.w	r8, r3, r8
 8022842:	fa1f fe8e 	uxth.w	lr, lr
 8022846:	fb0e 880a 	mla	r8, lr, sl, r8
 802284a:	f892 a000 	ldrb.w	sl, [r2]
 802284e:	fb01 880a 	mla	r8, r1, sl, r8
 8022852:	f890 a000 	ldrb.w	sl, [r0]
 8022856:	fb09 880a 	mla	r8, r9, sl, r8
 802285a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802285e:	f886 8000 	strb.w	r8, [r6]
 8022862:	f897 8001 	ldrb.w	r8, [r7, #1]
 8022866:	f89c a001 	ldrb.w	sl, [ip, #1]
 802286a:	fb03 f808 	mul.w	r8, r3, r8
 802286e:	fb0e 880a 	mla	r8, lr, sl, r8
 8022872:	f892 a001 	ldrb.w	sl, [r2, #1]
 8022876:	fb01 880a 	mla	r8, r1, sl, r8
 802287a:	f890 a001 	ldrb.w	sl, [r0, #1]
 802287e:	fb09 880a 	mla	r8, r9, sl, r8
 8022882:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022886:	f886 8001 	strb.w	r8, [r6, #1]
 802288a:	78bf      	ldrb	r7, [r7, #2]
 802288c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8022890:	437b      	muls	r3, r7
 8022892:	7892      	ldrb	r2, [r2, #2]
 8022894:	fb0e 330c 	mla	r3, lr, ip, r3
 8022898:	fb01 3102 	mla	r1, r1, r2, r3
 802289c:	7882      	ldrb	r2, [r0, #2]
 802289e:	fb09 1902 	mla	r9, r9, r2, r1
 80228a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80228a6:	f886 9002 	strb.w	r9, [r6, #2]
 80228aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80228ac:	3603      	adds	r6, #3
 80228ae:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80228b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80228b4:	4413      	add	r3, r2
 80228b6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80228b8:	9323      	str	r3, [sp, #140]	; 0x8c
 80228ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80228bc:	4413      	add	r3, r2
 80228be:	9324      	str	r3, [sp, #144]	; 0x90
 80228c0:	e770      	b.n	80227a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 80228c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80228c4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80228c6:	4413      	add	r3, r2
 80228c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80228ca:	9323      	str	r3, [sp, #140]	; 0x8c
 80228cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80228ce:	4413      	add	r3, r2
 80228d0:	9324      	str	r3, [sp, #144]	; 0x90
 80228d2:	9b07      	ldr	r3, [sp, #28]
 80228d4:	3b01      	subs	r3, #1
 80228d6:	9307      	str	r3, [sp, #28]
 80228d8:	9b08      	ldr	r3, [sp, #32]
 80228da:	3303      	adds	r3, #3
 80228dc:	9308      	str	r3, [sp, #32]
 80228de:	e718      	b.n	8022712 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80228e0:	f47f af2a 	bne.w	8022738 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80228e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80228e6:	2b00      	cmp	r3, #0
 80228e8:	f340 80e5 	ble.w	8022ab6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 80228ec:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80228f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80228f2:	ee79 9aab 	vadd.f32	s19, s19, s23
 80228f6:	eef0 6a48 	vmov.f32	s13, s16
 80228fa:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80228fe:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8022902:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022906:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 802290a:	eef0 6a68 	vmov.f32	s13, s17
 802290e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022912:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 8022916:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802291a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802291e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022922:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022926:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802292a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802292e:	ee18 2a10 	vmov	r2, s16
 8022932:	eeb0 8a47 	vmov.f32	s16, s14
 8022936:	fb92 f3f3 	sdiv	r3, r2, r3
 802293a:	ee18 2a90 	vmov	r2, s17
 802293e:	9325      	str	r3, [sp, #148]	; 0x94
 8022940:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022942:	eef0 8a67 	vmov.f32	s17, s15
 8022946:	fb92 f3f3 	sdiv	r3, r2, r3
 802294a:	9326      	str	r3, [sp, #152]	; 0x98
 802294c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802294e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022950:	3b01      	subs	r3, #1
 8022952:	930b      	str	r3, [sp, #44]	; 0x2c
 8022954:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022956:	bf08      	it	eq
 8022958:	4613      	moveq	r3, r2
 802295a:	9307      	str	r3, [sp, #28]
 802295c:	e6d2      	b.n	8022704 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 802295e:	b149      	cbz	r1, 8022974 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8022960:	5d52      	ldrb	r2, [r2, r5]
 8022962:	4660      	mov	r0, ip
 8022964:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022968:	4422      	add	r2, r4
 802296a:	4667      	mov	r7, ip
 802296c:	e754      	b.n	8022818 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 802296e:	4660      	mov	r0, ip
 8022970:	4662      	mov	r2, ip
 8022972:	e751      	b.n	8022818 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8022974:	4660      	mov	r0, ip
 8022976:	4662      	mov	r2, ip
 8022978:	e7f7      	b.n	802296a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 802297a:	1c47      	adds	r7, r0, #1
 802297c:	d195      	bne.n	80228aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 802297e:	4285      	cmp	r5, r0
 8022980:	dd93      	ble.n	80228aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022982:	1c57      	adds	r7, r2, #1
 8022984:	db91      	blt.n	80228aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022986:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022988:	4297      	cmp	r7, r2
 802298a:	dd8e      	ble.n	80228aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 802298c:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8022990:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8022994:	e9cd 5700 	strd	r5, r7, [sp]
 8022998:	4623      	mov	r3, r4
 802299a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802299c:	4631      	mov	r1, r6
 802299e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80229a0:	f7ff fdca 	bl	8022538 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80229a4:	e781      	b.n	80228aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80229a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80229a8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80229aa:	1410      	asrs	r0, r2, #16
 80229ac:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80229b0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80229b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80229b4:	1412      	asrs	r2, r2, #16
 80229b6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80229ba:	fb05 2000 	mla	r0, r5, r0, r2
 80229be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80229c0:	f816 e000 	ldrb.w	lr, [r6, r0]
 80229c4:	4402      	add	r2, r0
 80229c6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80229ca:	eb04 070e 	add.w	r7, r4, lr
 80229ce:	2b00      	cmp	r3, #0
 80229d0:	d063      	beq.n	8022a9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 80229d2:	7856      	ldrb	r6, [r2, #1]
 80229d4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80229d8:	4426      	add	r6, r4
 80229da:	2900      	cmp	r1, #0
 80229dc:	d065      	beq.n	8022aaa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 80229de:	1950      	adds	r0, r2, r5
 80229e0:	5d52      	ldrb	r2, [r2, r5]
 80229e2:	7840      	ldrb	r0, [r0, #1]
 80229e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80229e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80229ec:	4422      	add	r2, r4
 80229ee:	4420      	add	r0, r4
 80229f0:	b29b      	uxth	r3, r3
 80229f2:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80229f6:	b289      	uxth	r1, r1
 80229f8:	f896 e000 	ldrb.w	lr, [r6]
 80229fc:	f108 0803 	add.w	r8, r8, #3
 8022a00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022a04:	fb03 f901 	mul.w	r9, r3, r1
 8022a08:	011b      	lsls	r3, r3, #4
 8022a0a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022a0e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8022a12:	eba3 0309 	sub.w	r3, r3, r9
 8022a16:	b289      	uxth	r1, r1
 8022a18:	b29b      	uxth	r3, r3
 8022a1a:	ebac 0c01 	sub.w	ip, ip, r1
 8022a1e:	fb03 fe0e 	mul.w	lr, r3, lr
 8022a22:	fa1f fc8c 	uxth.w	ip, ip
 8022a26:	fb0c ee0b 	mla	lr, ip, fp, lr
 8022a2a:	f892 b000 	ldrb.w	fp, [r2]
 8022a2e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022a32:	f890 b000 	ldrb.w	fp, [r0]
 8022a36:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022a3a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022a3e:	f808 ec06 	strb.w	lr, [r8, #-6]
 8022a42:	f896 e001 	ldrb.w	lr, [r6, #1]
 8022a46:	f897 b001 	ldrb.w	fp, [r7, #1]
 8022a4a:	fb03 fe0e 	mul.w	lr, r3, lr
 8022a4e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8022a52:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022a56:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022a5a:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022a5e:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022a62:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022a66:	f808 ec05 	strb.w	lr, [r8, #-5]
 8022a6a:	78b6      	ldrb	r6, [r6, #2]
 8022a6c:	78bf      	ldrb	r7, [r7, #2]
 8022a6e:	4373      	muls	r3, r6
 8022a70:	7896      	ldrb	r6, [r2, #2]
 8022a72:	7882      	ldrb	r2, [r0, #2]
 8022a74:	fb0c 3307 	mla	r3, ip, r7, r3
 8022a78:	fb01 3306 	mla	r3, r1, r6, r3
 8022a7c:	fb09 3902 	mla	r9, r9, r2, r3
 8022a80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022a82:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022a84:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022a88:	4413      	add	r3, r2
 8022a8a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022a8c:	f808 9c04 	strb.w	r9, [r8, #-4]
 8022a90:	9323      	str	r3, [sp, #140]	; 0x8c
 8022a92:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022a94:	4413      	add	r3, r2
 8022a96:	9324      	str	r3, [sp, #144]	; 0x90
 8022a98:	e668      	b.n	802276c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8022a9a:	b149      	cbz	r1, 8022ab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 8022a9c:	5d52      	ldrb	r2, [r2, r5]
 8022a9e:	4638      	mov	r0, r7
 8022aa0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022aa4:	4422      	add	r2, r4
 8022aa6:	463e      	mov	r6, r7
 8022aa8:	e7a2      	b.n	80229f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8022aaa:	4638      	mov	r0, r7
 8022aac:	463a      	mov	r2, r7
 8022aae:	e79f      	b.n	80229f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8022ab0:	4638      	mov	r0, r7
 8022ab2:	463a      	mov	r2, r7
 8022ab4:	e7f7      	b.n	8022aa6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 8022ab6:	b00f      	add	sp, #60	; 0x3c
 8022ab8:	ecbd 8b0a 	vpop	{d8-d12}
 8022abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022ac0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8022ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ac4:	b087      	sub	sp, #28
 8022ac6:	7888      	ldrb	r0, [r1, #2]
 8022ac8:	9002      	str	r0, [sp, #8]
 8022aca:	7848      	ldrb	r0, [r1, #1]
 8022acc:	9e02      	ldr	r6, [sp, #8]
 8022ace:	9003      	str	r0, [sp, #12]
 8022ad0:	7808      	ldrb	r0, [r1, #0]
 8022ad2:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8022ad6:	9004      	str	r0, [sp, #16]
 8022ad8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8022adc:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8022ae0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8022ae4:	9e03      	ldr	r6, [sp, #12]
 8022ae6:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 8022aea:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8022aee:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8022af2:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 8022af6:	fb04 7508 	mla	r5, r4, r8, r7
 8022afa:	2c00      	cmp	r4, #0
 8022afc:	eb02 0905 	add.w	r9, r2, r5
 8022b00:	db45      	blt.n	8022b8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8022b02:	45a2      	cmp	sl, r4
 8022b04:	dd43      	ble.n	8022b8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8022b06:	2f00      	cmp	r7, #0
 8022b08:	db3f      	blt.n	8022b8a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8022b0a:	45b8      	cmp	r8, r7
 8022b0c:	dd3d      	ble.n	8022b8a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8022b0e:	5d52      	ldrb	r2, [r2, r5]
 8022b10:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8022b14:	1c7a      	adds	r2, r7, #1
 8022b16:	d43d      	bmi.n	8022b94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8022b18:	4590      	cmp	r8, r2
 8022b1a:	dd3b      	ble.n	8022b94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8022b1c:	f1bc 0f00 	cmp.w	ip, #0
 8022b20:	d038      	beq.n	8022b94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8022b22:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022b26:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8022b2a:	3401      	adds	r4, #1
 8022b2c:	d436      	bmi.n	8022b9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8022b2e:	45a2      	cmp	sl, r4
 8022b30:	dd34      	ble.n	8022b9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8022b32:	f1be 0f00 	cmp.w	lr, #0
 8022b36:	d031      	beq.n	8022b9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8022b38:	2f00      	cmp	r7, #0
 8022b3a:	db2d      	blt.n	8022b98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8022b3c:	45b8      	cmp	r8, r7
 8022b3e:	dd2b      	ble.n	8022b98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8022b40:	f819 2008 	ldrb.w	r2, [r9, r8]
 8022b44:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8022b48:	3701      	adds	r7, #1
 8022b4a:	d409      	bmi.n	8022b60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022b4c:	45b8      	cmp	r8, r7
 8022b4e:	dd07      	ble.n	8022b60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022b50:	f1bc 0f00 	cmp.w	ip, #0
 8022b54:	d004      	beq.n	8022b60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022b56:	44c8      	add	r8, r9
 8022b58:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022b5c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8022b60:	f1bc 0f0f 	cmp.w	ip, #15
 8022b64:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8022b68:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8022b6c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022b70:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8022b74:	d802      	bhi.n	8022b7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 8022b76:	f1be 0f0f 	cmp.w	lr, #15
 8022b7a:	d911      	bls.n	8022ba0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 8022b7c:	4b77      	ldr	r3, [pc, #476]	; (8022d5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 8022b7e:	f240 11a5 	movw	r1, #421	; 0x1a5
 8022b82:	4a77      	ldr	r2, [pc, #476]	; (8022d60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 8022b84:	4877      	ldr	r0, [pc, #476]	; (8022d64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 8022b86:	f005 fc7d 	bl	8028484 <__assert_func>
 8022b8a:	4606      	mov	r6, r0
 8022b8c:	e7c2      	b.n	8022b14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 8022b8e:	4605      	mov	r5, r0
 8022b90:	4606      	mov	r6, r0
 8022b92:	e7ca      	b.n	8022b2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8022b94:	4605      	mov	r5, r0
 8022b96:	e7c8      	b.n	8022b2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8022b98:	4604      	mov	r4, r0
 8022b9a:	e7d5      	b.n	8022b48 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8022b9c:	4604      	mov	r4, r0
 8022b9e:	e7df      	b.n	8022b60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022ba0:	fa1f fc8c 	uxth.w	ip, ip
 8022ba4:	fa1f f28e 	uxth.w	r2, lr
 8022ba8:	fb02 fe0c 	mul.w	lr, r2, ip
 8022bac:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8022bb0:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 8022bb4:	ebac 070e 	sub.w	r7, ip, lr
 8022bb8:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8022bbc:	b292      	uxth	r2, r2
 8022bbe:	b2bf      	uxth	r7, r7
 8022bc0:	1a9b      	subs	r3, r3, r2
 8022bc2:	fb07 fc0a 	mul.w	ip, r7, sl
 8022bc6:	b29b      	uxth	r3, r3
 8022bc8:	fb03 cc0b 	mla	ip, r3, fp, ip
 8022bcc:	9301      	str	r3, [sp, #4]
 8022bce:	fb02 cc09 	mla	ip, r2, r9, ip
 8022bd2:	fb0e cc08 	mla	ip, lr, r8, ip
 8022bd6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8022bda:	9305      	str	r3, [sp, #20]
 8022bdc:	2b00      	cmp	r3, #0
 8022bde:	f000 80b9 	beq.w	8022d54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 8022be2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022be6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022bea:	fb0b fc0c 	mul.w	ip, fp, ip
 8022bee:	fb0b f606 	mul.w	r6, fp, r6
 8022bf2:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8022bf6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022bfa:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8022bfe:	44dc      	add	ip, fp
 8022c00:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8022c04:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022c08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c0c:	fb0a fb0b 	mul.w	fp, sl, fp
 8022c10:	fb0a fa05 	mul.w	sl, sl, r5
 8022c14:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8022c18:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8022c1c:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 8022c20:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8022c24:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022c28:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022c2c:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 8022c30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022c34:	0a36      	lsrs	r6, r6, #8
 8022c36:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022c3a:	44dc      	add	ip, fp
 8022c3c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022c40:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022c44:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022c48:	fb09 fb0b 	mul.w	fp, r9, fp
 8022c4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c50:	fb09 f904 	mul.w	r9, r9, r4
 8022c54:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022c58:	ea4f 251b 	mov.w	r5, fp, lsr #8
 8022c5c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022c60:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8022c64:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022c68:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022c6c:	fb0c fc07 	mul.w	ip, ip, r7
 8022c70:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8022c74:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 8022c78:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022c7c:	445d      	add	r5, fp
 8022c7e:	fb08 f404 	mul.w	r4, r8, r4
 8022c82:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022c86:	fb08 f800 	mul.w	r8, r8, r0
 8022c8a:	0a2d      	lsrs	r5, r5, #8
 8022c8c:	0a20      	lsrs	r0, r4, #8
 8022c8e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8022c92:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022c96:	fb07 f70a 	mul.w	r7, r7, sl
 8022c9a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022c9e:	4404      	add	r4, r0
 8022ca0:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8022ca4:	0a24      	lsrs	r4, r4, #8
 8022ca6:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8022caa:	9801      	ldr	r0, [sp, #4]
 8022cac:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022cb0:	fb03 cc00 	mla	ip, r3, r0, ip
 8022cb4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022cb8:	fb00 7606 	mla	r6, r0, r6, r7
 8022cbc:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8022cc0:	fb04 cc0e 	mla	ip, r4, lr, ip
 8022cc4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022cc8:	b280      	uxth	r0, r0
 8022cca:	9c04      	ldr	r4, [sp, #16]
 8022ccc:	fb05 cc02 	mla	ip, r5, r2, ip
 8022cd0:	fb0e 6e08 	mla	lr, lr, r8, r6
 8022cd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022cd8:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8022cdc:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 8022ce0:	fb02 ec0c 	mla	ip, r2, ip, lr
 8022ce4:	9a05      	ldr	r2, [sp, #20]
 8022ce6:	4342      	muls	r2, r0
 8022ce8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022cec:	1c53      	adds	r3, r2, #1
 8022cee:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022cf2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022cf6:	ea45 0c0c 	orr.w	ip, r5, ip
 8022cfa:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8022cfe:	fa5f f28c 	uxtb.w	r2, ip
 8022d02:	b2db      	uxtb	r3, r3
 8022d04:	fb14 f403 	smulbb	r4, r4, r3
 8022d08:	fb02 4200 	mla	r2, r2, r0, r4
 8022d0c:	b292      	uxth	r2, r2
 8022d0e:	1c54      	adds	r4, r2, #1
 8022d10:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8022d14:	9c03      	ldr	r4, [sp, #12]
 8022d16:	fb14 f403 	smulbb	r4, r4, r3
 8022d1a:	1212      	asrs	r2, r2, #8
 8022d1c:	700a      	strb	r2, [r1, #0]
 8022d1e:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8022d22:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022d26:	fb02 4200 	mla	r2, r2, r0, r4
 8022d2a:	b292      	uxth	r2, r2
 8022d2c:	1c54      	adds	r4, r2, #1
 8022d2e:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8022d32:	1212      	asrs	r2, r2, #8
 8022d34:	704a      	strb	r2, [r1, #1]
 8022d36:	9a02      	ldr	r2, [sp, #8]
 8022d38:	fb12 f303 	smulbb	r3, r2, r3
 8022d3c:	fb0c 3c00 	mla	ip, ip, r0, r3
 8022d40:	fa1f fc8c 	uxth.w	ip, ip
 8022d44:	f10c 0301 	add.w	r3, ip, #1
 8022d48:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022d4c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022d50:	f881 c002 	strb.w	ip, [r1, #2]
 8022d54:	b007      	add	sp, #28
 8022d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d5a:	bf00      	nop
 8022d5c:	0802dce5 	.word	0x0802dce5
 8022d60:	0802e1da 	.word	0x0802e1da
 8022d64:	0802ddae 	.word	0x0802ddae

08022d68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d6c:	ed2d 8b08 	vpush	{d8-d11}
 8022d70:	b09b      	sub	sp, #108	; 0x6c
 8022d72:	eeb0 aa40 	vmov.f32	s20, s0
 8022d76:	eef0 9a60 	vmov.f32	s19, s1
 8022d7a:	930a      	str	r3, [sp, #40]	; 0x28
 8022d7c:	eeb0 9a41 	vmov.f32	s18, s2
 8022d80:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8022d84:	eeb0 8a62 	vmov.f32	s16, s5
 8022d88:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8022d8a:	eef0 8a43 	vmov.f32	s17, s6
 8022d8e:	9312      	str	r3, [sp, #72]	; 0x48
 8022d90:	eef0 ba44 	vmov.f32	s23, s8
 8022d94:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8022d98:	eeb0 ba64 	vmov.f32	s22, s9
 8022d9c:	9019      	str	r0, [sp, #100]	; 0x64
 8022d9e:	eef0 aa45 	vmov.f32	s21, s10
 8022da2:	9114      	str	r1, [sp, #80]	; 0x50
 8022da4:	9317      	str	r3, [sp, #92]	; 0x5c
 8022da6:	6868      	ldr	r0, [r5, #4]
 8022da8:	9218      	str	r2, [sp, #96]	; 0x60
 8022daa:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8022dac:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8022db0:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8022db4:	fb00 1303 	mla	r3, r0, r3, r1
 8022db8:	6829      	ldr	r1, [r5, #0]
 8022dba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022dbe:	18cb      	adds	r3, r1, r3
 8022dc0:	930d      	str	r3, [sp, #52]	; 0x34
 8022dc2:	6813      	ldr	r3, [r2, #0]
 8022dc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8022dc6:	6853      	ldr	r3, [r2, #4]
 8022dc8:	3304      	adds	r3, #4
 8022dca:	9309      	str	r3, [sp, #36]	; 0x24
 8022dcc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022dce:	2b00      	cmp	r3, #0
 8022dd0:	dc03      	bgt.n	8022dda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022dd2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022dd4:	2b00      	cmp	r3, #0
 8022dd6:	f340 8352 	ble.w	802347e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8022dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ddc:	2b00      	cmp	r3, #0
 8022dde:	f340 81a2 	ble.w	8023126 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 8022de2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022de4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022de6:	1412      	asrs	r2, r2, #16
 8022de8:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022dec:	d431      	bmi.n	8022e52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8022dee:	1c51      	adds	r1, r2, #1
 8022df0:	428c      	cmp	r4, r1
 8022df2:	dd31      	ble.n	8022e58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8022df4:	2b00      	cmp	r3, #0
 8022df6:	db2f      	blt.n	8022e58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8022df8:	1c59      	adds	r1, r3, #1
 8022dfa:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022dfc:	4288      	cmp	r0, r1
 8022dfe:	dd2b      	ble.n	8022e58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8022e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e02:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022e04:	3b01      	subs	r3, #1
 8022e06:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8022e08:	fb02 1203 	mla	r2, r2, r3, r1
 8022e0c:	1412      	asrs	r2, r2, #16
 8022e0e:	d42d      	bmi.n	8022e6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022e10:	3201      	adds	r2, #1
 8022e12:	4294      	cmp	r4, r2
 8022e14:	dd2a      	ble.n	8022e6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022e16:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8022e18:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8022e1a:	fb02 1303 	mla	r3, r2, r3, r1
 8022e1e:	141b      	asrs	r3, r3, #16
 8022e20:	d424      	bmi.n	8022e6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022e22:	3301      	adds	r3, #1
 8022e24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022e26:	429a      	cmp	r2, r3
 8022e28:	dd20      	ble.n	8022e6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8022e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022e2c:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8022e30:	f103 0e03 	add.w	lr, r3, #3
 8022e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e36:	9315      	str	r3, [sp, #84]	; 0x54
 8022e38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022e3a:	2b00      	cmp	r3, #0
 8022e3c:	f300 81de 	bgt.w	80231fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 8022e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022e44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022e48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022e4c:	441a      	add	r2, r3
 8022e4e:	920d      	str	r2, [sp, #52]	; 0x34
 8022e50:	e16b      	b.n	802312a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 8022e52:	1c51      	adds	r1, r2, #1
 8022e54:	f040 8158 	bne.w	8023108 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022e58:	42a2      	cmp	r2, r4
 8022e5a:	f280 8155 	bge.w	8023108 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022e5e:	1c5a      	adds	r2, r3, #1
 8022e60:	f2c0 8152 	blt.w	8023108 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022e64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022e66:	4293      	cmp	r3, r2
 8022e68:	f280 814e 	bge.w	8023108 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e6e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022e70:	9316      	str	r3, [sp, #88]	; 0x58
 8022e72:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8022e76:	9315      	str	r3, [sp, #84]	; 0x54
 8022e78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022e7a:	2b00      	cmp	r3, #0
 8022e7c:	dde0      	ble.n	8022e40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8022e7e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022e80:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022e82:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8022e86:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022e88:	141b      	asrs	r3, r3, #16
 8022e8a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022e8e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022e90:	1412      	asrs	r2, r2, #16
 8022e92:	f100 819a 	bmi.w	80231ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 8022e96:	1c55      	adds	r5, r2, #1
 8022e98:	42ac      	cmp	r4, r5
 8022e9a:	f340 8198 	ble.w	80231ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8022e9e:	2b00      	cmp	r3, #0
 8022ea0:	f2c0 8195 	blt.w	80231ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8022ea4:	1c5d      	adds	r5, r3, #1
 8022ea6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8022ea8:	42af      	cmp	r7, r5
 8022eaa:	f340 8190 	ble.w	80231ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8022eae:	fb03 2304 	mla	r3, r3, r4, r2
 8022eb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022eb4:	18d5      	adds	r5, r2, r3
 8022eb6:	5cd3      	ldrb	r3, [r2, r3]
 8022eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022ebe:	0e1f      	lsrs	r7, r3, #24
 8022ec0:	2800      	cmp	r0, #0
 8022ec2:	f000 8171 	beq.w	80231a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8022ec6:	f895 c001 	ldrb.w	ip, [r5, #1]
 8022eca:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8022ece:	920e      	str	r2, [sp, #56]	; 0x38
 8022ed0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022ed4:	2900      	cmp	r1, #0
 8022ed6:	f000 8172 	beq.w	80231be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8022eda:	eb05 0c04 	add.w	ip, r5, r4
 8022ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022ee0:	5d2d      	ldrb	r5, [r5, r4]
 8022ee2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8022ee6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8022eea:	950b      	str	r5, [sp, #44]	; 0x2c
 8022eec:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8022ef0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8022ef2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022ef6:	0e15      	lsrs	r5, r2, #24
 8022ef8:	920f      	str	r2, [sp, #60]	; 0x3c
 8022efa:	b280      	uxth	r0, r0
 8022efc:	b289      	uxth	r1, r1
 8022efe:	fb00 fa01 	mul.w	sl, r0, r1
 8022f02:	0100      	lsls	r0, r0, #4
 8022f04:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8022f08:	eba0 080a 	sub.w	r8, r0, sl
 8022f0c:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8022f10:	b289      	uxth	r1, r1
 8022f12:	fa1f f888 	uxth.w	r8, r8
 8022f16:	1a52      	subs	r2, r2, r1
 8022f18:	fb08 f00e 	mul.w	r0, r8, lr
 8022f1c:	b292      	uxth	r2, r2
 8022f1e:	fb02 0007 	mla	r0, r2, r7, r0
 8022f22:	fb01 0009 	mla	r0, r1, r9, r0
 8022f26:	fb0a 0005 	mla	r0, sl, r5, r0
 8022f2a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022f2e:	2800      	cmp	r0, #0
 8022f30:	f000 80dd 	beq.w	80230ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8022f34:	2fff      	cmp	r7, #255	; 0xff
 8022f36:	d01a      	beq.n	8022f6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022f38:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022f3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022f40:	fb07 fc0c 	mul.w	ip, r7, ip
 8022f44:	435f      	muls	r7, r3
 8022f46:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022f4a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022f4e:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8022f52:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022f56:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8022f5a:	4463      	add	r3, ip
 8022f5c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022f60:	0a1b      	lsrs	r3, r3, #8
 8022f62:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022f66:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022f6a:	ea43 030b 	orr.w	r3, r3, fp
 8022f6e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022f72:	d01e      	beq.n	8022fb2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8022f74:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022f76:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8022f7a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022f7e:	fb0e fb0b 	mul.w	fp, lr, fp
 8022f82:	fb0e fe07 	mul.w	lr, lr, r7
 8022f86:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022f8a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022f8e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022f92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f96:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022f9a:	44dc      	add	ip, fp
 8022f9c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022fa0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022fa4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022fa8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022fac:	ea4c 070e 	orr.w	r7, ip, lr
 8022fb0:	970e      	str	r7, [sp, #56]	; 0x38
 8022fb2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022fb6:	d01e      	beq.n	8022ff6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8022fb8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022fba:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022fbe:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022fc2:	fb09 fe0e 	mul.w	lr, r9, lr
 8022fc6:	fb09 f907 	mul.w	r9, r9, r7
 8022fca:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022fce:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022fd2:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022fd6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022fda:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022fde:	44f4      	add	ip, lr
 8022fe0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022fe4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022fe8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022fec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ff0:	ea4c 0709 	orr.w	r7, ip, r9
 8022ff4:	970b      	str	r7, [sp, #44]	; 0x2c
 8022ff6:	2dff      	cmp	r5, #255	; 0xff
 8022ff8:	d01c      	beq.n	8023034 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 8022ffa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022ffc:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8023000:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023004:	fb05 fe0e 	mul.w	lr, r5, lr
 8023008:	437d      	muls	r5, r7
 802300a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802300e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023012:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8023016:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802301a:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 802301e:	44f4      	add	ip, lr
 8023020:	0a2d      	lsrs	r5, r5, #8
 8023022:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023026:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802302a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802302e:	ea4c 0505 	orr.w	r5, ip, r5
 8023032:	950f      	str	r5, [sp, #60]	; 0x3c
 8023034:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023036:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802303a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802303e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023042:	fb08 f505 	mul.w	r5, r8, r5
 8023046:	fb02 5507 	mla	r5, r2, r7, r5
 802304a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802304c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023050:	fb01 5507 	mla	r5, r1, r7, r5
 8023054:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023056:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802305a:	fb0a 5507 	mla	r5, sl, r7, r5
 802305e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8023060:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023064:	0a2d      	lsrs	r5, r5, #8
 8023066:	fb08 f807 	mul.w	r8, r8, r7
 802306a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802306e:	fb02 8303 	mla	r3, r2, r3, r8
 8023072:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023074:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023078:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802307a:	fb01 330c 	mla	r3, r1, ip, r3
 802307e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8023082:	fb0a 3a01 	mla	sl, sl, r1, r3
 8023086:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023088:	9915      	ldr	r1, [sp, #84]	; 0x54
 802308a:	4343      	muls	r3, r0
 802308c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023090:	1c58      	adds	r0, r3, #1
 8023092:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023096:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802309a:	ea45 050a 	orr.w	r5, r5, sl
 802309e:	7833      	ldrb	r3, [r6, #0]
 80230a0:	b2ea      	uxtb	r2, r5
 80230a2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80230a6:	fb12 f201 	smulbb	r2, r2, r1
 80230aa:	b2c0      	uxtb	r0, r0
 80230ac:	fb03 2300 	mla	r3, r3, r0, r2
 80230b0:	b29b      	uxth	r3, r3
 80230b2:	1c5a      	adds	r2, r3, #1
 80230b4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80230b8:	7872      	ldrb	r2, [r6, #1]
 80230ba:	fb12 f200 	smulbb	r2, r2, r0
 80230be:	121b      	asrs	r3, r3, #8
 80230c0:	7033      	strb	r3, [r6, #0]
 80230c2:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80230c6:	0c2d      	lsrs	r5, r5, #16
 80230c8:	fb03 2301 	mla	r3, r3, r1, r2
 80230cc:	b29b      	uxth	r3, r3
 80230ce:	1c5a      	adds	r2, r3, #1
 80230d0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80230d4:	121b      	asrs	r3, r3, #8
 80230d6:	7073      	strb	r3, [r6, #1]
 80230d8:	78b3      	ldrb	r3, [r6, #2]
 80230da:	fb13 f000 	smulbb	r0, r3, r0
 80230de:	fb05 0501 	mla	r5, r5, r1, r0
 80230e2:	b2ad      	uxth	r5, r5
 80230e4:	1c6b      	adds	r3, r5, #1
 80230e6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80230ea:	122d      	asrs	r5, r5, #8
 80230ec:	70b5      	strb	r5, [r6, #2]
 80230ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80230f0:	3603      	adds	r6, #3
 80230f2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80230f4:	4413      	add	r3, r2
 80230f6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80230f8:	932d      	str	r3, [sp, #180]	; 0xb4
 80230fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80230fc:	4413      	add	r3, r2
 80230fe:	932e      	str	r3, [sp, #184]	; 0xb8
 8023100:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023102:	3b01      	subs	r3, #1
 8023104:	9316      	str	r3, [sp, #88]	; 0x58
 8023106:	e6b7      	b.n	8022e78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8023108:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802310a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802310c:	4413      	add	r3, r2
 802310e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8023110:	932d      	str	r3, [sp, #180]	; 0xb4
 8023112:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023114:	4413      	add	r3, r2
 8023116:	932e      	str	r3, [sp, #184]	; 0xb8
 8023118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802311a:	3b01      	subs	r3, #1
 802311c:	930a      	str	r3, [sp, #40]	; 0x28
 802311e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023120:	3303      	adds	r3, #3
 8023122:	930d      	str	r3, [sp, #52]	; 0x34
 8023124:	e659      	b.n	8022dda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8023126:	f47f ae6b 	bne.w	8022e00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 802312a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802312c:	2b00      	cmp	r3, #0
 802312e:	f340 81a6 	ble.w	802347e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8023132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023136:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023138:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802313c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023140:	eef0 6a48 	vmov.f32	s13, s16
 8023144:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023148:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802314c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023150:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8023154:	eef0 6a68 	vmov.f32	s13, s17
 8023158:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802315c:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8023160:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023164:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023168:	ee37 8a48 	vsub.f32	s16, s14, s16
 802316c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023170:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023174:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023178:	ee18 2a10 	vmov	r2, s16
 802317c:	eeb0 8a47 	vmov.f32	s16, s14
 8023180:	fb92 f3f3 	sdiv	r3, r2, r3
 8023184:	ee18 2a90 	vmov	r2, s17
 8023188:	932f      	str	r3, [sp, #188]	; 0xbc
 802318a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802318c:	eef0 8a67 	vmov.f32	s17, s15
 8023190:	fb92 f3f3 	sdiv	r3, r2, r3
 8023194:	9330      	str	r3, [sp, #192]	; 0xc0
 8023196:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023198:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802319a:	3b01      	subs	r3, #1
 802319c:	9314      	str	r3, [sp, #80]	; 0x50
 802319e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80231a0:	bf08      	it	eq
 80231a2:	4613      	moveq	r3, r2
 80231a4:	930a      	str	r3, [sp, #40]	; 0x28
 80231a6:	e611      	b.n	8022dcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80231a8:	b161      	cbz	r1, 80231c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 80231aa:	5d2a      	ldrb	r2, [r5, r4]
 80231ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80231ae:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80231b2:	25ff      	movs	r5, #255	; 0xff
 80231b4:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80231b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80231ba:	46ae      	mov	lr, r5
 80231bc:	e69d      	b.n	8022efa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 80231be:	25ff      	movs	r5, #255	; 0xff
 80231c0:	46a9      	mov	r9, r5
 80231c2:	e69a      	b.n	8022efa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 80231c4:	25ff      	movs	r5, #255	; 0xff
 80231c6:	46a9      	mov	r9, r5
 80231c8:	e7f7      	b.n	80231ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 80231ca:	1c57      	adds	r7, r2, #1
 80231cc:	d18f      	bne.n	80230ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80231ce:	4294      	cmp	r4, r2
 80231d0:	dd8d      	ble.n	80230ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80231d2:	1c5d      	adds	r5, r3, #1
 80231d4:	db8b      	blt.n	80230ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80231d6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80231d8:	429d      	cmp	r5, r3
 80231da:	dd88      	ble.n	80230ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80231dc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80231de:	9202      	str	r2, [sp, #8]
 80231e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80231e2:	e9cd 3003 	strd	r3, r0, [sp, #12]
 80231e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80231e8:	9819      	ldr	r0, [sp, #100]	; 0x64
 80231ea:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80231ee:	e9cd 4300 	strd	r4, r3, [sp]
 80231f2:	4631      	mov	r1, r6
 80231f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80231f6:	f7ff fc63 	bl	8022ac0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80231fa:	e778      	b.n	80230ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80231fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80231fe:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023200:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8023204:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023206:	1412      	asrs	r2, r2, #16
 8023208:	f3c3 3003 	ubfx	r0, r3, #12, #4
 802320c:	141b      	asrs	r3, r3, #16
 802320e:	fb04 2303 	mla	r3, r4, r3, r2
 8023212:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023214:	18d5      	adds	r5, r2, r3
 8023216:	5cd3      	ldrb	r3, [r2, r3]
 8023218:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802321a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802321e:	0e1e      	lsrs	r6, r3, #24
 8023220:	2900      	cmp	r1, #0
 8023222:	f000 811b 	beq.w	802345c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 8023226:	786a      	ldrb	r2, [r5, #1]
 8023228:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802322a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 802322e:	9210      	str	r2, [sp, #64]	; 0x40
 8023230:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8023234:	2800      	cmp	r0, #0
 8023236:	f000 811c 	beq.w	8023472 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 802323a:	192a      	adds	r2, r5, r4
 802323c:	5d2d      	ldrb	r5, [r5, r4]
 802323e:	7852      	ldrb	r2, [r2, #1]
 8023240:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8023244:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8023248:	950c      	str	r5, [sp, #48]	; 0x30
 802324a:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802324e:	0e15      	lsrs	r5, r2, #24
 8023250:	9211      	str	r2, [sp, #68]	; 0x44
 8023252:	b289      	uxth	r1, r1
 8023254:	b280      	uxth	r0, r0
 8023256:	fb01 fa00 	mul.w	sl, r1, r0
 802325a:	0109      	lsls	r1, r1, #4
 802325c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023260:	eba1 080a 	sub.w	r8, r1, sl
 8023264:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8023268:	b280      	uxth	r0, r0
 802326a:	fa1f f888 	uxth.w	r8, r8
 802326e:	1a12      	subs	r2, r2, r0
 8023270:	fb08 f10c 	mul.w	r1, r8, ip
 8023274:	b292      	uxth	r2, r2
 8023276:	fb02 1106 	mla	r1, r2, r6, r1
 802327a:	fb00 1109 	mla	r1, r0, r9, r1
 802327e:	fb0a 1105 	mla	r1, sl, r5, r1
 8023282:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023286:	2900      	cmp	r1, #0
 8023288:	f000 80da 	beq.w	8023440 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 802328c:	2eff      	cmp	r6, #255	; 0xff
 802328e:	d016      	beq.n	80232be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 8023290:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8023294:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023298:	4377      	muls	r7, r6
 802329a:	435e      	muls	r6, r3
 802329c:	0a3b      	lsrs	r3, r7, #8
 802329e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80232a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80232a6:	443b      	add	r3, r7
 80232a8:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80232ac:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80232b0:	0a1b      	lsrs	r3, r3, #8
 80232b2:	0a3f      	lsrs	r7, r7, #8
 80232b4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80232b8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80232bc:	433b      	orrs	r3, r7
 80232be:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80232c2:	d01d      	beq.n	8023300 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 80232c4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80232c6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80232c8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80232cc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80232d0:	fb0c f606 	mul.w	r6, ip, r6
 80232d4:	fb0c fc07 	mul.w	ip, ip, r7
 80232d8:	0a37      	lsrs	r7, r6, #8
 80232da:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80232de:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80232e2:	4437      	add	r7, r6
 80232e4:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 80232e8:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80232ec:	0a3f      	lsrs	r7, r7, #8
 80232ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80232f2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80232f6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80232fa:	ea47 060c 	orr.w	r6, r7, ip
 80232fe:	9610      	str	r6, [sp, #64]	; 0x40
 8023300:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023304:	d01d      	beq.n	8023342 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8023306:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023308:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802330c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023310:	fb09 fc0c 	mul.w	ip, r9, ip
 8023314:	fb09 f906 	mul.w	r9, r9, r6
 8023318:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802331c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023320:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8023324:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023328:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 802332c:	4467      	add	r7, ip
 802332e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023332:	0a3f      	lsrs	r7, r7, #8
 8023334:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023338:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802333c:	ea47 0609 	orr.w	r6, r7, r9
 8023340:	960c      	str	r6, [sp, #48]	; 0x30
 8023342:	2dff      	cmp	r5, #255	; 0xff
 8023344:	d01a      	beq.n	802337c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 8023346:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8023348:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802334c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023350:	fb05 fc0c 	mul.w	ip, r5, ip
 8023354:	4375      	muls	r5, r6
 8023356:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802335a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802335e:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8023362:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023366:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802336a:	4467      	add	r7, ip
 802336c:	0a2d      	lsrs	r5, r5, #8
 802336e:	0a3f      	lsrs	r7, r7, #8
 8023370:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023374:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023378:	433d      	orrs	r5, r7
 802337a:	9511      	str	r5, [sp, #68]	; 0x44
 802337c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802337e:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8023382:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023386:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802338a:	fb08 f505 	mul.w	r5, r8, r5
 802338e:	fb02 5506 	mla	r5, r2, r6, r5
 8023392:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023394:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023398:	fb00 5506 	mla	r5, r0, r6, r5
 802339c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802339e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80233a2:	fb0a 5506 	mla	r5, sl, r6, r5
 80233a6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80233a8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80233ac:	0a2d      	lsrs	r5, r5, #8
 80233ae:	fb08 f806 	mul.w	r8, r8, r6
 80233b2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80233b6:	fb02 8303 	mla	r3, r2, r3, r8
 80233ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80233bc:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80233c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80233c2:	fb00 3307 	mla	r3, r0, r7, r3
 80233c6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80233ca:	fb0a 3c0c 	mla	ip, sl, ip, r3
 80233ce:	fb01 f30b 	mul.w	r3, r1, fp
 80233d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80233d6:	1c59      	adds	r1, r3, #1
 80233d8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80233dc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80233e0:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80233e4:	ea45 050c 	orr.w	r5, r5, ip
 80233e8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80233ec:	b2ea      	uxtb	r2, r5
 80233ee:	b2c9      	uxtb	r1, r1
 80233f0:	fb12 f20b 	smulbb	r2, r2, fp
 80233f4:	fb03 2301 	mla	r3, r3, r1, r2
 80233f8:	b29b      	uxth	r3, r3
 80233fa:	1c5a      	adds	r2, r3, #1
 80233fc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023400:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023404:	fb12 f201 	smulbb	r2, r2, r1
 8023408:	121b      	asrs	r3, r3, #8
 802340a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802340e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8023412:	0c2d      	lsrs	r5, r5, #16
 8023414:	fb03 230b 	mla	r3, r3, fp, r2
 8023418:	b29b      	uxth	r3, r3
 802341a:	1c5a      	adds	r2, r3, #1
 802341c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023420:	121b      	asrs	r3, r3, #8
 8023422:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8023426:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802342a:	fb13 f101 	smulbb	r1, r3, r1
 802342e:	fb05 150b 	mla	r5, r5, fp, r1
 8023432:	b2ad      	uxth	r5, r5
 8023434:	1c69      	adds	r1, r5, #1
 8023436:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802343a:	122d      	asrs	r5, r5, #8
 802343c:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8023440:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023442:	f10e 0e03 	add.w	lr, lr, #3
 8023446:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023448:	4413      	add	r3, r2
 802344a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802344c:	932d      	str	r3, [sp, #180]	; 0xb4
 802344e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023450:	4413      	add	r3, r2
 8023452:	932e      	str	r3, [sp, #184]	; 0xb8
 8023454:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023456:	3b01      	subs	r3, #1
 8023458:	9315      	str	r3, [sp, #84]	; 0x54
 802345a:	e4ed      	b.n	8022e38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 802345c:	b160      	cbz	r0, 8023478 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 802345e:	5d2a      	ldrb	r2, [r5, r4]
 8023460:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023462:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023466:	25ff      	movs	r5, #255	; 0xff
 8023468:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802346c:	920c      	str	r2, [sp, #48]	; 0x30
 802346e:	46ac      	mov	ip, r5
 8023470:	e6ef      	b.n	8023252 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8023472:	25ff      	movs	r5, #255	; 0xff
 8023474:	46a9      	mov	r9, r5
 8023476:	e6ec      	b.n	8023252 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8023478:	25ff      	movs	r5, #255	; 0xff
 802347a:	46a9      	mov	r9, r5
 802347c:	e7f7      	b.n	802346e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 802347e:	b01b      	add	sp, #108	; 0x6c
 8023480:	ecbd 8b08 	vpop	{d8-d11}
 8023484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023488 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8023488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802348c:	b085      	sub	sp, #20
 802348e:	7888      	ldrb	r0, [r1, #2]
 8023490:	4692      	mov	sl, r2
 8023492:	4698      	mov	r8, r3
 8023494:	9000      	str	r0, [sp, #0]
 8023496:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 802349a:	7848      	ldrb	r0, [r1, #1]
 802349c:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80234a0:	9001      	str	r0, [sp, #4]
 80234a2:	7808      	ldrb	r0, [r1, #0]
 80234a4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80234a8:	9002      	str	r0, [sp, #8]
 80234aa:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80234ae:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80234b2:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80234b6:	fb04 560c 	mla	r6, r4, ip, r5
 80234ba:	2c00      	cmp	r4, #0
 80234bc:	eb02 0e06 	add.w	lr, r2, r6
 80234c0:	9a00      	ldr	r2, [sp, #0]
 80234c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80234c6:	9a01      	ldr	r2, [sp, #4]
 80234c8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80234cc:	db3e      	blt.n	802354c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 80234ce:	45a1      	cmp	r9, r4
 80234d0:	dd3c      	ble.n	802354c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 80234d2:	2d00      	cmp	r5, #0
 80234d4:	db38      	blt.n	8023548 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 80234d6:	45ac      	cmp	ip, r5
 80234d8:	dd36      	ble.n	8023548 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 80234da:	f81a 2006 	ldrb.w	r2, [sl, r6]
 80234de:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80234e2:	1c6e      	adds	r6, r5, #1
 80234e4:	d435      	bmi.n	8023552 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 80234e6:	45b4      	cmp	ip, r6
 80234e8:	dd33      	ble.n	8023552 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 80234ea:	b393      	cbz	r3, 8023552 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 80234ec:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80234f0:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 80234f4:	3401      	adds	r4, #1
 80234f6:	d430      	bmi.n	802355a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 80234f8:	45a1      	cmp	r9, r4
 80234fa:	dd2e      	ble.n	802355a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 80234fc:	b36f      	cbz	r7, 802355a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 80234fe:	2d00      	cmp	r5, #0
 8023500:	db29      	blt.n	8023556 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8023502:	45ac      	cmp	ip, r5
 8023504:	dd27      	ble.n	8023556 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8023506:	f81e 400c 	ldrb.w	r4, [lr, ip]
 802350a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 802350e:	3501      	adds	r5, #1
 8023510:	d407      	bmi.n	8023522 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8023512:	45ac      	cmp	ip, r5
 8023514:	dd05      	ble.n	8023522 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8023516:	b123      	cbz	r3, 8023522 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8023518:	44f4      	add	ip, lr
 802351a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802351e:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8023522:	2b0f      	cmp	r3, #15
 8023524:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8023528:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802352c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023530:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8023534:	d801      	bhi.n	802353a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8023536:	2f0f      	cmp	r7, #15
 8023538:	d911      	bls.n	802355e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 802353a:	4b76      	ldr	r3, [pc, #472]	; (8023714 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 802353c:	f240 11a5 	movw	r1, #421	; 0x1a5
 8023540:	4a75      	ldr	r2, [pc, #468]	; (8023718 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8023542:	4876      	ldr	r0, [pc, #472]	; (802371c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8023544:	f004 ff9e 	bl	8028484 <__assert_func>
 8023548:	4602      	mov	r2, r0
 802354a:	e7ca      	b.n	80234e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 802354c:	4606      	mov	r6, r0
 802354e:	4602      	mov	r2, r0
 8023550:	e7d0      	b.n	80234f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8023552:	4606      	mov	r6, r0
 8023554:	e7ce      	b.n	80234f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8023556:	4604      	mov	r4, r0
 8023558:	e7d9      	b.n	802350e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 802355a:	4604      	mov	r4, r0
 802355c:	e7e1      	b.n	8023522 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802355e:	b29b      	uxth	r3, r3
 8023560:	b2bf      	uxth	r7, r7
 8023562:	fb07 fe03 	mul.w	lr, r7, r3
 8023566:	011b      	lsls	r3, r3, #4
 8023568:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802356c:	eba3 0c0e 	sub.w	ip, r3, lr
 8023570:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8023574:	b2bf      	uxth	r7, r7
 8023576:	fa1f fc8c 	uxth.w	ip, ip
 802357a:	1bed      	subs	r5, r5, r7
 802357c:	fb0c f30a 	mul.w	r3, ip, sl
 8023580:	b2ad      	uxth	r5, r5
 8023582:	fb05 330b 	mla	r3, r5, fp, r3
 8023586:	fb07 3309 	mla	r3, r7, r9, r3
 802358a:	fb0e 3308 	mla	r3, lr, r8, r3
 802358e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023592:	9303      	str	r3, [sp, #12]
 8023594:	2b00      	cmp	r3, #0
 8023596:	f000 80b9 	beq.w	802370c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 802359a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802359e:	d018      	beq.n	80235d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 80235a0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80235a4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80235a8:	fb0b f303 	mul.w	r3, fp, r3
 80235ac:	fb0b fb02 	mul.w	fp, fp, r2
 80235b0:	0a1a      	lsrs	r2, r3, #8
 80235b2:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80235b6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80235ba:	441a      	add	r2, r3
 80235bc:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80235c0:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80235c4:	0a12      	lsrs	r2, r2, #8
 80235c6:	0a1b      	lsrs	r3, r3, #8
 80235c8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80235cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80235d0:	431a      	orrs	r2, r3
 80235d2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80235d6:	d019      	beq.n	802360c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 80235d8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80235dc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80235e0:	fb0a fb0b 	mul.w	fp, sl, fp
 80235e4:	fb0a fa06 	mul.w	sl, sl, r6
 80235e8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80235ec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80235f0:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80235f4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80235f8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80235fc:	445e      	add	r6, fp
 80235fe:	0a1b      	lsrs	r3, r3, #8
 8023600:	0a36      	lsrs	r6, r6, #8
 8023602:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023606:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802360a:	431e      	orrs	r6, r3
 802360c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023610:	d019      	beq.n	8023646 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 8023612:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8023616:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802361a:	fb09 fa0a 	mul.w	sl, r9, sl
 802361e:	fb09 f904 	mul.w	r9, r9, r4
 8023622:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8023626:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802362a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802362e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023632:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8023636:	4454      	add	r4, sl
 8023638:	0a1b      	lsrs	r3, r3, #8
 802363a:	0a24      	lsrs	r4, r4, #8
 802363c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023640:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023644:	431c      	orrs	r4, r3
 8023646:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802364a:	d019      	beq.n	8023680 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 802364c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8023650:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023654:	fb08 f909 	mul.w	r9, r8, r9
 8023658:	fb08 f800 	mul.w	r8, r8, r0
 802365c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8023660:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8023664:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8023668:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802366c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8023670:	4448      	add	r0, r9
 8023672:	0a1b      	lsrs	r3, r3, #8
 8023674:	0a00      	lsrs	r0, r0, #8
 8023676:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802367a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802367e:	4318      	orrs	r0, r3
 8023680:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8023684:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023688:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802368c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023690:	fb0c f808 	mul.w	r8, ip, r8
 8023694:	fb0c f606 	mul.w	r6, ip, r6
 8023698:	fb05 8803 	mla	r8, r5, r3, r8
 802369c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80236a0:	fb05 6202 	mla	r2, r5, r2, r6
 80236a4:	fb07 8803 	mla	r8, r7, r3, r8
 80236a8:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80236ac:	fb0e 8303 	mla	r3, lr, r3, r8
 80236b0:	0a1b      	lsrs	r3, r3, #8
 80236b2:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80236b6:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 80236ba:	9c02      	ldr	r4, [sp, #8]
 80236bc:	fb07 2703 	mla	r7, r7, r3, r2
 80236c0:	9a03      	ldr	r2, [sp, #12]
 80236c2:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80236c6:	43d2      	mvns	r2, r2
 80236c8:	fb0e 7303 	mla	r3, lr, r3, r7
 80236cc:	b2d2      	uxtb	r2, r2
 80236ce:	0a1b      	lsrs	r3, r3, #8
 80236d0:	4354      	muls	r4, r2
 80236d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80236d6:	1c60      	adds	r0, r4, #1
 80236d8:	ea48 0303 	orr.w	r3, r8, r3
 80236dc:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80236e0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80236e4:	7008      	strb	r0, [r1, #0]
 80236e6:	9801      	ldr	r0, [sp, #4]
 80236e8:	4350      	muls	r0, r2
 80236ea:	1c44      	adds	r4, r0, #1
 80236ec:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 80236f0:	0a18      	lsrs	r0, r3, #8
 80236f2:	0c1b      	lsrs	r3, r3, #16
 80236f4:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80236f8:	7048      	strb	r0, [r1, #1]
 80236fa:	9800      	ldr	r0, [sp, #0]
 80236fc:	4350      	muls	r0, r2
 80236fe:	4602      	mov	r2, r0
 8023700:	3001      	adds	r0, #1
 8023702:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023706:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802370a:	708b      	strb	r3, [r1, #2]
 802370c:	b005      	add	sp, #20
 802370e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023712:	bf00      	nop
 8023714:	0802dce5 	.word	0x0802dce5
 8023718:	0802e1da 	.word	0x0802e1da
 802371c:	0802ddae 	.word	0x0802ddae

08023720 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023724:	ed2d 8b08 	vpush	{d8-d11}
 8023728:	b097      	sub	sp, #92	; 0x5c
 802372a:	eeb0 aa40 	vmov.f32	s20, s0
 802372e:	eef0 9a60 	vmov.f32	s19, s1
 8023732:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8023734:	eeb0 9a41 	vmov.f32	s18, s2
 8023738:	9308      	str	r3, [sp, #32]
 802373a:	eeb0 8a62 	vmov.f32	s16, s5
 802373e:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8023742:	eef0 8a43 	vmov.f32	s17, s6
 8023746:	9015      	str	r0, [sp, #84]	; 0x54
 8023748:	eef0 ba44 	vmov.f32	s23, s8
 802374c:	6868      	ldr	r0, [r5, #4]
 802374e:	eeb0 ba64 	vmov.f32	s22, s9
 8023752:	9112      	str	r1, [sp, #72]	; 0x48
 8023754:	eef0 aa45 	vmov.f32	s21, s10
 8023758:	9310      	str	r3, [sp, #64]	; 0x40
 802375a:	9214      	str	r2, [sp, #80]	; 0x50
 802375c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 802375e:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8023762:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8023766:	fb00 1303 	mla	r3, r0, r3, r1
 802376a:	6829      	ldr	r1, [r5, #0]
 802376c:	6855      	ldr	r5, [r2, #4]
 802376e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023772:	3504      	adds	r5, #4
 8023774:	18cb      	adds	r3, r1, r3
 8023776:	930b      	str	r3, [sp, #44]	; 0x2c
 8023778:	6813      	ldr	r3, [r2, #0]
 802377a:	9311      	str	r3, [sp, #68]	; 0x44
 802377c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802377e:	2b00      	cmp	r3, #0
 8023780:	dc03      	bgt.n	802378a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8023782:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023784:	2b00      	cmp	r3, #0
 8023786:	f340 8333 	ble.w	8023df0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 802378a:	9b08      	ldr	r3, [sp, #32]
 802378c:	2b00      	cmp	r3, #0
 802378e:	f340 8190 	ble.w	8023ab2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8023792:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023794:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023796:	1412      	asrs	r2, r2, #16
 8023798:	ea4f 4323 	mov.w	r3, r3, asr #16
 802379c:	d42f      	bmi.n	80237fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802379e:	1c51      	adds	r1, r2, #1
 80237a0:	428c      	cmp	r4, r1
 80237a2:	dd2f      	ble.n	8023804 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80237a4:	2b00      	cmp	r3, #0
 80237a6:	db2d      	blt.n	8023804 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80237a8:	1c59      	adds	r1, r3, #1
 80237aa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80237ac:	4288      	cmp	r0, r1
 80237ae:	dd29      	ble.n	8023804 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80237b0:	9b08      	ldr	r3, [sp, #32]
 80237b2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80237b4:	3b01      	subs	r3, #1
 80237b6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80237b8:	fb02 1203 	mla	r2, r2, r3, r1
 80237bc:	1412      	asrs	r2, r2, #16
 80237be:	d42b      	bmi.n	8023818 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80237c0:	3201      	adds	r2, #1
 80237c2:	4294      	cmp	r4, r2
 80237c4:	dd28      	ble.n	8023818 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80237c6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80237c8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80237ca:	fb02 1303 	mla	r3, r2, r3, r1
 80237ce:	141b      	asrs	r3, r3, #16
 80237d0:	d422      	bmi.n	8023818 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80237d2:	3301      	adds	r3, #1
 80237d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80237d6:	429a      	cmp	r2, r3
 80237d8:	dd1e      	ble.n	8023818 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80237da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80237dc:	f103 0803 	add.w	r8, r3, #3
 80237e0:	9b08      	ldr	r3, [sp, #32]
 80237e2:	9307      	str	r3, [sp, #28]
 80237e4:	9b07      	ldr	r3, [sp, #28]
 80237e6:	2b00      	cmp	r3, #0
 80237e8:	f300 81ca 	bgt.w	8023b80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 80237ec:	9b08      	ldr	r3, [sp, #32]
 80237ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80237f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80237f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80237f8:	441a      	add	r2, r3
 80237fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80237fc:	e15b      	b.n	8023ab6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 80237fe:	1c51      	adds	r1, r2, #1
 8023800:	f040 8148 	bne.w	8023a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8023804:	42a2      	cmp	r2, r4
 8023806:	f280 8145 	bge.w	8023a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 802380a:	1c5a      	adds	r2, r3, #1
 802380c:	f2c0 8142 	blt.w	8023a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8023810:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023812:	4293      	cmp	r3, r2
 8023814:	f280 813e 	bge.w	8023a94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8023818:	9b08      	ldr	r3, [sp, #32]
 802381a:	9313      	str	r3, [sp, #76]	; 0x4c
 802381c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802381e:	9307      	str	r3, [sp, #28]
 8023820:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023822:	2b00      	cmp	r3, #0
 8023824:	dde2      	ble.n	80237ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8023826:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023828:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802382a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802382e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023830:	141b      	asrs	r3, r3, #16
 8023832:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8023836:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023838:	1412      	asrs	r2, r2, #16
 802383a:	f100 818b 	bmi.w	8023b54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 802383e:	1c56      	adds	r6, r2, #1
 8023840:	42b4      	cmp	r4, r6
 8023842:	f340 8189 	ble.w	8023b58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8023846:	2b00      	cmp	r3, #0
 8023848:	f2c0 8186 	blt.w	8023b58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 802384c:	1c5e      	adds	r6, r3, #1
 802384e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8023850:	42b7      	cmp	r7, r6
 8023852:	f340 8181 	ble.w	8023b58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8023856:	fb03 2304 	mla	r3, r3, r4, r2
 802385a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802385c:	18d6      	adds	r6, r2, r3
 802385e:	5cd3      	ldrb	r3, [r2, r3]
 8023860:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023864:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023868:	2900      	cmp	r1, #0
 802386a:	f000 8163 	beq.w	8023b34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 802386e:	7872      	ldrb	r2, [r6, #1]
 8023870:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023874:	920c      	str	r2, [sp, #48]	; 0x30
 8023876:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802387a:	2800      	cmp	r0, #0
 802387c:	f000 8164 	beq.w	8023b48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8023880:	1932      	adds	r2, r6, r4
 8023882:	5d36      	ldrb	r6, [r6, r4]
 8023884:	7852      	ldrb	r2, [r2, #1]
 8023886:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 802388a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802388e:	9609      	str	r6, [sp, #36]	; 0x24
 8023890:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023894:	0e16      	lsrs	r6, r2, #24
 8023896:	920d      	str	r2, [sp, #52]	; 0x34
 8023898:	b289      	uxth	r1, r1
 802389a:	b280      	uxth	r0, r0
 802389c:	fb01 fb00 	mul.w	fp, r1, r0
 80238a0:	0109      	lsls	r1, r1, #4
 80238a2:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80238a6:	eba1 090b 	sub.w	r9, r1, fp
 80238aa:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80238ae:	b280      	uxth	r0, r0
 80238b0:	fa1f f989 	uxth.w	r9, r9
 80238b4:	1a12      	subs	r2, r2, r0
 80238b6:	fb09 f108 	mul.w	r1, r9, r8
 80238ba:	b292      	uxth	r2, r2
 80238bc:	fb02 110c 	mla	r1, r2, ip, r1
 80238c0:	fb00 110a 	mla	r1, r0, sl, r1
 80238c4:	fb0b 1106 	mla	r1, fp, r6, r1
 80238c8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80238cc:	2900      	cmp	r1, #0
 80238ce:	f000 80d2 	beq.w	8023a76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80238d2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80238d6:	d01b      	beq.n	8023910 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 80238d8:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80238dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80238e0:	fb0c fe0e 	mul.w	lr, ip, lr
 80238e4:	fb0c fc03 	mul.w	ip, ip, r3
 80238e8:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80238ec:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80238f0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80238f4:	4473      	add	r3, lr
 80238f6:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80238fa:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80238fe:	0a1b      	lsrs	r3, r3, #8
 8023900:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023904:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023908:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802390c:	ea43 030e 	orr.w	r3, r3, lr
 8023910:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023914:	d01e      	beq.n	8023954 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8023916:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023918:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802391c:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8023920:	fb08 fc0c 	mul.w	ip, r8, ip
 8023924:	fb08 f80e 	mul.w	r8, r8, lr
 8023928:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802392c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023930:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023934:	44e6      	add	lr, ip
 8023936:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 802393a:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 802393e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023942:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023946:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802394a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802394e:	ea4e 0708 	orr.w	r7, lr, r8
 8023952:	970c      	str	r7, [sp, #48]	; 0x30
 8023954:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023958:	d01e      	beq.n	8023998 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 802395a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802395c:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8023960:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8023964:	fb0a f808 	mul.w	r8, sl, r8
 8023968:	fb0a fa0c 	mul.w	sl, sl, ip
 802396c:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8023970:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8023974:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023978:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802397c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023980:	44c6      	add	lr, r8
 8023982:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023986:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802398a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802398e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023992:	ea4e 070a 	orr.w	r7, lr, sl
 8023996:	9709      	str	r7, [sp, #36]	; 0x24
 8023998:	2eff      	cmp	r6, #255	; 0xff
 802399a:	d01d      	beq.n	80239d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 802399c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802399e:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80239a2:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80239a6:	fb06 f808 	mul.w	r8, r6, r8
 80239aa:	fb06 f60c 	mul.w	r6, r6, ip
 80239ae:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80239b2:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80239b6:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80239ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80239be:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80239c2:	44c6      	add	lr, r8
 80239c4:	0a36      	lsrs	r6, r6, #8
 80239c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80239ca:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80239ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80239d2:	ea4e 0606 	orr.w	r6, lr, r6
 80239d6:	960d      	str	r6, [sp, #52]	; 0x34
 80239d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80239da:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80239de:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80239e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80239e4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80239e8:	43c9      	mvns	r1, r1
 80239ea:	fb09 f606 	mul.w	r6, r9, r6
 80239ee:	b2c9      	uxtb	r1, r1
 80239f0:	fb02 660c 	mla	r6, r2, ip, r6
 80239f4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80239f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80239fa:	fb00 660c 	mla	r6, r0, ip, r6
 80239fe:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8023a02:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023a04:	fb0b 660c 	mla	r6, fp, ip, r6
 8023a08:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8023a0c:	fb09 f90c 	mul.w	r9, r9, ip
 8023a10:	0a36      	lsrs	r6, r6, #8
 8023a12:	fb02 9303 	mla	r3, r2, r3, r9
 8023a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023a18:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023a1c:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8023a20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023a22:	fb00 330e 	mla	r3, r0, lr, r3
 8023a26:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8023a2a:	fb0b 3b00 	mla	fp, fp, r0, r3
 8023a2e:	9b07      	ldr	r3, [sp, #28]
 8023a30:	781b      	ldrb	r3, [r3, #0]
 8023a32:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023a36:	fb03 f201 	mul.w	r2, r3, r1
 8023a3a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023a3e:	1c53      	adds	r3, r2, #1
 8023a40:	ea46 060b 	orr.w	r6, r6, fp
 8023a44:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023a48:	9a07      	ldr	r2, [sp, #28]
 8023a4a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8023a4e:	7013      	strb	r3, [r2, #0]
 8023a50:	7853      	ldrb	r3, [r2, #1]
 8023a52:	434b      	muls	r3, r1
 8023a54:	1c5a      	adds	r2, r3, #1
 8023a56:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023a5a:	0a33      	lsrs	r3, r6, #8
 8023a5c:	0c36      	lsrs	r6, r6, #16
 8023a5e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023a62:	9a07      	ldr	r2, [sp, #28]
 8023a64:	7053      	strb	r3, [r2, #1]
 8023a66:	7893      	ldrb	r3, [r2, #2]
 8023a68:	4359      	muls	r1, r3
 8023a6a:	1c4b      	adds	r3, r1, #1
 8023a6c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023a70:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8023a74:	7096      	strb	r6, [r2, #2]
 8023a76:	9b07      	ldr	r3, [sp, #28]
 8023a78:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023a7a:	3303      	adds	r3, #3
 8023a7c:	9307      	str	r3, [sp, #28]
 8023a7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023a80:	4413      	add	r3, r2
 8023a82:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023a84:	9329      	str	r3, [sp, #164]	; 0xa4
 8023a86:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023a88:	4413      	add	r3, r2
 8023a8a:	932a      	str	r3, [sp, #168]	; 0xa8
 8023a8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023a8e:	3b01      	subs	r3, #1
 8023a90:	9313      	str	r3, [sp, #76]	; 0x4c
 8023a92:	e6c5      	b.n	8023820 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8023a94:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023a96:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023a98:	4413      	add	r3, r2
 8023a9a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023a9c:	9329      	str	r3, [sp, #164]	; 0xa4
 8023a9e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023aa0:	4413      	add	r3, r2
 8023aa2:	932a      	str	r3, [sp, #168]	; 0xa8
 8023aa4:	9b08      	ldr	r3, [sp, #32]
 8023aa6:	3b01      	subs	r3, #1
 8023aa8:	9308      	str	r3, [sp, #32]
 8023aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023aac:	3303      	adds	r3, #3
 8023aae:	930b      	str	r3, [sp, #44]	; 0x2c
 8023ab0:	e66b      	b.n	802378a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8023ab2:	f47f ae7d 	bne.w	80237b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8023ab6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023ab8:	2b00      	cmp	r3, #0
 8023aba:	f340 8199 	ble.w	8023df0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8023abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023ac2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023ac4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023ac8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023acc:	eef0 6a48 	vmov.f32	s13, s16
 8023ad0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023ad4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023ad8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023adc:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8023ae0:	eef0 6a68 	vmov.f32	s13, s17
 8023ae4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023ae8:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8023aec:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023af0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023af4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023af8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023afc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023b00:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023b04:	ee18 2a10 	vmov	r2, s16
 8023b08:	eeb0 8a47 	vmov.f32	s16, s14
 8023b0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b10:	ee18 2a90 	vmov	r2, s17
 8023b14:	932b      	str	r3, [sp, #172]	; 0xac
 8023b16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023b18:	eef0 8a67 	vmov.f32	s17, s15
 8023b1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b20:	932c      	str	r3, [sp, #176]	; 0xb0
 8023b22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023b24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023b26:	3b01      	subs	r3, #1
 8023b28:	9312      	str	r3, [sp, #72]	; 0x48
 8023b2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023b2c:	bf08      	it	eq
 8023b2e:	4613      	moveq	r3, r2
 8023b30:	9308      	str	r3, [sp, #32]
 8023b32:	e623      	b.n	802377c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8023b34:	b158      	cbz	r0, 8023b4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8023b36:	5d32      	ldrb	r2, [r6, r4]
 8023b38:	26ff      	movs	r6, #255	; 0xff
 8023b3a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023b3e:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8023b42:	9209      	str	r2, [sp, #36]	; 0x24
 8023b44:	46b0      	mov	r8, r6
 8023b46:	e6a7      	b.n	8023898 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8023b48:	26ff      	movs	r6, #255	; 0xff
 8023b4a:	46b2      	mov	sl, r6
 8023b4c:	e6a4      	b.n	8023898 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8023b4e:	26ff      	movs	r6, #255	; 0xff
 8023b50:	46b2      	mov	sl, r6
 8023b52:	e7f7      	b.n	8023b44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8023b54:	1c57      	adds	r7, r2, #1
 8023b56:	d18e      	bne.n	8023a76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023b58:	4294      	cmp	r4, r2
 8023b5a:	dd8c      	ble.n	8023a76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023b5c:	1c5e      	adds	r6, r3, #1
 8023b5e:	db8a      	blt.n	8023a76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023b60:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8023b62:	429e      	cmp	r6, r3
 8023b64:	dd87      	ble.n	8023a76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023b66:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8023b6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8023b6e:	e9cd 4600 	strd	r4, r6, [sp]
 8023b72:	462b      	mov	r3, r5
 8023b74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023b76:	9907      	ldr	r1, [sp, #28]
 8023b78:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023b7a:	f7ff fc85 	bl	8023488 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8023b7e:	e77a      	b.n	8023a76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023b80:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023b82:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023b84:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023b88:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023b8a:	1409      	asrs	r1, r1, #16
 8023b8c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8023b90:	141b      	asrs	r3, r3, #16
 8023b92:	fb04 1303 	mla	r3, r4, r3, r1
 8023b96:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023b98:	18ce      	adds	r6, r1, r3
 8023b9a:	5ccb      	ldrb	r3, [r1, r3]
 8023b9c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023ba0:	0e1f      	lsrs	r7, r3, #24
 8023ba2:	2a00      	cmp	r2, #0
 8023ba4:	f000 8114 	beq.w	8023dd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8023ba8:	7871      	ldrb	r1, [r6, #1]
 8023baa:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8023bae:	910e      	str	r1, [sp, #56]	; 0x38
 8023bb0:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8023bb4:	2800      	cmp	r0, #0
 8023bb6:	f000 8115 	beq.w	8023de4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8023bba:	1931      	adds	r1, r6, r4
 8023bbc:	5d36      	ldrb	r6, [r6, r4]
 8023bbe:	7849      	ldrb	r1, [r1, #1]
 8023bc0:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8023bc4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8023bc8:	960a      	str	r6, [sp, #40]	; 0x28
 8023bca:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023bce:	0e0e      	lsrs	r6, r1, #24
 8023bd0:	910f      	str	r1, [sp, #60]	; 0x3c
 8023bd2:	b292      	uxth	r2, r2
 8023bd4:	b280      	uxth	r0, r0
 8023bd6:	fb02 fb00 	mul.w	fp, r2, r0
 8023bda:	0112      	lsls	r2, r2, #4
 8023bdc:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8023be0:	eba2 090b 	sub.w	r9, r2, fp
 8023be4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023be8:	b280      	uxth	r0, r0
 8023bea:	fa1f f989 	uxth.w	r9, r9
 8023bee:	1a09      	subs	r1, r1, r0
 8023bf0:	fb09 f20e 	mul.w	r2, r9, lr
 8023bf4:	b289      	uxth	r1, r1
 8023bf6:	fb01 2207 	mla	r2, r1, r7, r2
 8023bfa:	fb00 220a 	mla	r2, r0, sl, r2
 8023bfe:	fb0b 2206 	mla	r2, fp, r6, r2
 8023c02:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023c06:	9213      	str	r2, [sp, #76]	; 0x4c
 8023c08:	2a00      	cmp	r2, #0
 8023c0a:	f000 80d4 	beq.w	8023db6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8023c0e:	2fff      	cmp	r7, #255	; 0xff
 8023c10:	d01a      	beq.n	8023c48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8023c12:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023c16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c1a:	fb07 fc0c 	mul.w	ip, r7, ip
 8023c1e:	435f      	muls	r7, r3
 8023c20:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8023c24:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023c28:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023c2c:	4463      	add	r3, ip
 8023c2e:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8023c32:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8023c36:	0a1b      	lsrs	r3, r3, #8
 8023c38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c3c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023c40:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023c44:	ea43 030c 	orr.w	r3, r3, ip
 8023c48:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023c4c:	d01f      	beq.n	8023c8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8023c4e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8023c50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023c52:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023c56:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023c5a:	fb0e f707 	mul.w	r7, lr, r7
 8023c5e:	fb0e fe0c 	mul.w	lr, lr, ip
 8023c62:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023c66:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023c6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c6e:	44bc      	add	ip, r7
 8023c70:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8023c74:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8023c78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c84:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023c88:	ea4c 020e 	orr.w	r2, ip, lr
 8023c8c:	920e      	str	r2, [sp, #56]	; 0x38
 8023c8e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023c92:	d01e      	beq.n	8023cd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8023c94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023c96:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023c9a:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023c9e:	fb0a fe0e 	mul.w	lr, sl, lr
 8023ca2:	fb0a fa07 	mul.w	sl, sl, r7
 8023ca6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023caa:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023cae:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023cb2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023cb6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023cba:	44f4      	add	ip, lr
 8023cbc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023cc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023cc4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023cc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023ccc:	ea4c 020a 	orr.w	r2, ip, sl
 8023cd0:	920a      	str	r2, [sp, #40]	; 0x28
 8023cd2:	2eff      	cmp	r6, #255	; 0xff
 8023cd4:	d01c      	beq.n	8023d10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8023cd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023cd8:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023cdc:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023ce0:	fb06 fe0e 	mul.w	lr, r6, lr
 8023ce4:	437e      	muls	r6, r7
 8023ce6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023cea:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023cee:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023cf2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023cf6:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8023cfa:	44f4      	add	ip, lr
 8023cfc:	0a36      	lsrs	r6, r6, #8
 8023cfe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d02:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023d06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023d0a:	ea4c 0206 	orr.w	r2, ip, r6
 8023d0e:	920f      	str	r2, [sp, #60]	; 0x3c
 8023d10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023d12:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8023d16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023d1a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8023d1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023d20:	fb09 f606 	mul.w	r6, r9, r6
 8023d24:	fb01 6607 	mla	r6, r1, r7, r6
 8023d28:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8023d2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023d2e:	fb00 6607 	mla	r6, r0, r7, r6
 8023d32:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8023d36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023d38:	fb0b 6607 	mla	r6, fp, r7, r6
 8023d3c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023d40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023d42:	fb09 f907 	mul.w	r9, r9, r7
 8023d46:	0a36      	lsrs	r6, r6, #8
 8023d48:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023d4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023d4e:	fb01 9303 	mla	r3, r1, r3, r9
 8023d52:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023d56:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8023d5a:	fb00 330c 	mla	r3, r0, ip, r3
 8023d5e:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8023d62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023d64:	43da      	mvns	r2, r3
 8023d66:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8023d6a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023d6e:	b2d2      	uxtb	r2, r2
 8023d70:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023d74:	fb03 f102 	mul.w	r1, r3, r2
 8023d78:	ea46 060e 	orr.w	r6, r6, lr
 8023d7c:	1c4b      	adds	r3, r1, #1
 8023d7e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023d82:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8023d86:	f808 3c03 	strb.w	r3, [r8, #-3]
 8023d8a:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8023d8e:	4353      	muls	r3, r2
 8023d90:	1c59      	adds	r1, r3, #1
 8023d92:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023d96:	0a33      	lsrs	r3, r6, #8
 8023d98:	0c36      	lsrs	r6, r6, #16
 8023d9a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023d9e:	f808 3c02 	strb.w	r3, [r8, #-2]
 8023da2:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8023da6:	435a      	muls	r2, r3
 8023da8:	1c53      	adds	r3, r2, #1
 8023daa:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023dae:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8023db2:	f808 6c01 	strb.w	r6, [r8, #-1]
 8023db6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023db8:	f108 0803 	add.w	r8, r8, #3
 8023dbc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023dbe:	4413      	add	r3, r2
 8023dc0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023dc2:	9329      	str	r3, [sp, #164]	; 0xa4
 8023dc4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023dc6:	4413      	add	r3, r2
 8023dc8:	932a      	str	r3, [sp, #168]	; 0xa8
 8023dca:	9b07      	ldr	r3, [sp, #28]
 8023dcc:	3b01      	subs	r3, #1
 8023dce:	e508      	b.n	80237e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8023dd0:	b158      	cbz	r0, 8023dea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 8023dd2:	5d31      	ldrb	r1, [r6, r4]
 8023dd4:	26ff      	movs	r6, #255	; 0xff
 8023dd6:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8023dda:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023dde:	910a      	str	r1, [sp, #40]	; 0x28
 8023de0:	46b6      	mov	lr, r6
 8023de2:	e6f6      	b.n	8023bd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8023de4:	26ff      	movs	r6, #255	; 0xff
 8023de6:	46b2      	mov	sl, r6
 8023de8:	e6f3      	b.n	8023bd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8023dea:	26ff      	movs	r6, #255	; 0xff
 8023dec:	46b2      	mov	sl, r6
 8023dee:	e7f7      	b.n	8023de0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8023df0:	b017      	add	sp, #92	; 0x5c
 8023df2:	ecbd 8b08 	vpop	{d8-d11}
 8023df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023dfc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8023dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e00:	b08d      	sub	sp, #52	; 0x34
 8023e02:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8023e06:	9103      	str	r1, [sp, #12]
 8023e08:	fb07 5803 	mla	r8, r7, r3, r5
 8023e0c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8023e10:	9803      	ldr	r0, [sp, #12]
 8023e12:	2f00      	cmp	r7, #0
 8023e14:	910b      	str	r1, [sp, #44]	; 0x2c
 8023e16:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023e1a:	9903      	ldr	r1, [sp, #12]
 8023e1c:	9c03      	ldr	r4, [sp, #12]
 8023e1e:	eb02 0608 	add.w	r6, r2, r8
 8023e22:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8023e26:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8023e2a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8023e2e:	7809      	ldrb	r1, [r1, #0]
 8023e30:	7840      	ldrb	r0, [r0, #1]
 8023e32:	78a4      	ldrb	r4, [r4, #2]
 8023e34:	db51      	blt.n	8023eda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8023e36:	45be      	cmp	lr, r7
 8023e38:	dd4f      	ble.n	8023eda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8023e3a:	2d00      	cmp	r5, #0
 8023e3c:	db49      	blt.n	8023ed2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8023e3e:	42ab      	cmp	r3, r5
 8023e40:	dd47      	ble.n	8023ed2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8023e42:	f812 2008 	ldrb.w	r2, [r2, r8]
 8023e46:	9204      	str	r2, [sp, #16]
 8023e48:	7872      	ldrb	r2, [r6, #1]
 8023e4a:	9205      	str	r2, [sp, #20]
 8023e4c:	78b2      	ldrb	r2, [r6, #2]
 8023e4e:	9206      	str	r2, [sp, #24]
 8023e50:	1c6a      	adds	r2, r5, #1
 8023e52:	d449      	bmi.n	8023ee8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8023e54:	4293      	cmp	r3, r2
 8023e56:	dd47      	ble.n	8023ee8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8023e58:	f1bc 0f00 	cmp.w	ip, #0
 8023e5c:	d044      	beq.n	8023ee8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8023e5e:	7972      	ldrb	r2, [r6, #5]
 8023e60:	f896 b003 	ldrb.w	fp, [r6, #3]
 8023e64:	f896 a004 	ldrb.w	sl, [r6, #4]
 8023e68:	9201      	str	r2, [sp, #4]
 8023e6a:	3701      	adds	r7, #1
 8023e6c:	d444      	bmi.n	8023ef8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8023e6e:	45be      	cmp	lr, r7
 8023e70:	dd42      	ble.n	8023ef8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8023e72:	f1b9 0f00 	cmp.w	r9, #0
 8023e76:	f000 80c1 	beq.w	8023ffc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8023e7a:	2d00      	cmp	r5, #0
 8023e7c:	db38      	blt.n	8023ef0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8023e7e:	42ab      	cmp	r3, r5
 8023e80:	dd36      	ble.n	8023ef0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8023e82:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8023e86:	f816 8002 	ldrb.w	r8, [r6, r2]
 8023e8a:	2203      	movs	r2, #3
 8023e8c:	fb03 6702 	mla	r7, r3, r2, r6
 8023e90:	fb03 6202 	mla	r2, r3, r2, r6
 8023e94:	787f      	ldrb	r7, [r7, #1]
 8023e96:	f892 e002 	ldrb.w	lr, [r2, #2]
 8023e9a:	9702      	str	r7, [sp, #8]
 8023e9c:	3501      	adds	r5, #1
 8023e9e:	d432      	bmi.n	8023f06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8023ea0:	42ab      	cmp	r3, r5
 8023ea2:	dd30      	ble.n	8023f06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8023ea4:	f1bc 0f00 	cmp.w	ip, #0
 8023ea8:	d031      	beq.n	8023f0e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8023eaa:	2703      	movs	r7, #3
 8023eac:	fb13 7207 	smlabb	r2, r3, r7, r7
 8023eb0:	5cb5      	ldrb	r5, [r6, r2]
 8023eb2:	fb03 6207 	mla	r2, r3, r7, r6
 8023eb6:	fb03 6307 	mla	r3, r3, r7, r6
 8023eba:	7912      	ldrb	r2, [r2, #4]
 8023ebc:	795e      	ldrb	r6, [r3, #5]
 8023ebe:	f1bc 0f0f 	cmp.w	ip, #15
 8023ec2:	d927      	bls.n	8023f14 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8023ec4:	4b53      	ldr	r3, [pc, #332]	; (8024014 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8023ec6:	f240 11a5 	movw	r1, #421	; 0x1a5
 8023eca:	4a53      	ldr	r2, [pc, #332]	; (8024018 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8023ecc:	4853      	ldr	r0, [pc, #332]	; (802401c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8023ece:	f004 fad9 	bl	8028484 <__assert_func>
 8023ed2:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8023ed6:	9104      	str	r1, [sp, #16]
 8023ed8:	e7ba      	b.n	8023e50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8023eda:	9401      	str	r4, [sp, #4]
 8023edc:	4682      	mov	sl, r0
 8023ede:	468b      	mov	fp, r1
 8023ee0:	9104      	str	r1, [sp, #16]
 8023ee2:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8023ee6:	e7c0      	b.n	8023e6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8023ee8:	9401      	str	r4, [sp, #4]
 8023eea:	4682      	mov	sl, r0
 8023eec:	468b      	mov	fp, r1
 8023eee:	e7bc      	b.n	8023e6a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8023ef0:	46a6      	mov	lr, r4
 8023ef2:	9002      	str	r0, [sp, #8]
 8023ef4:	4688      	mov	r8, r1
 8023ef6:	e7d1      	b.n	8023e9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8023ef8:	4626      	mov	r6, r4
 8023efa:	4602      	mov	r2, r0
 8023efc:	460d      	mov	r5, r1
 8023efe:	46a6      	mov	lr, r4
 8023f00:	9002      	str	r0, [sp, #8]
 8023f02:	4688      	mov	r8, r1
 8023f04:	e7db      	b.n	8023ebe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8023f06:	4626      	mov	r6, r4
 8023f08:	4602      	mov	r2, r0
 8023f0a:	460d      	mov	r5, r1
 8023f0c:	e7d7      	b.n	8023ebe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8023f0e:	4626      	mov	r6, r4
 8023f10:	4602      	mov	r2, r0
 8023f12:	460d      	mov	r5, r1
 8023f14:	f1b9 0f0f 	cmp.w	r9, #15
 8023f18:	d8d4      	bhi.n	8023ec4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8023f1a:	fa1f f38c 	uxth.w	r3, ip
 8023f1e:	fa1f fc89 	uxth.w	ip, r9
 8023f22:	fb03 f70c 	mul.w	r7, r3, ip
 8023f26:	011b      	lsls	r3, r3, #4
 8023f28:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8023f2c:	9707      	str	r7, [sp, #28]
 8023f2e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8023f32:	fa1f fc8c 	uxth.w	ip, ip
 8023f36:	eba7 070c 	sub.w	r7, r7, ip
 8023f3a:	b2bf      	uxth	r7, r7
 8023f3c:	9709      	str	r7, [sp, #36]	; 0x24
 8023f3e:	9f07      	ldr	r7, [sp, #28]
 8023f40:	1bdb      	subs	r3, r3, r7
 8023f42:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8023f46:	b29b      	uxth	r3, r3
 8023f48:	9708      	str	r7, [sp, #32]
 8023f4a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8023f4e:	ea6f 0907 	mvn.w	r9, r7
 8023f52:	fb03 fb0b 	mul.w	fp, r3, fp
 8023f56:	9f04      	ldr	r7, [sp, #16]
 8023f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f5a:	fa5f f989 	uxtb.w	r9, r9
 8023f5e:	fb03 bb07 	mla	fp, r3, r7, fp
 8023f62:	9f07      	ldr	r7, [sp, #28]
 8023f64:	fb11 f109 	smulbb	r1, r1, r9
 8023f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f6a:	fb0c b808 	mla	r8, ip, r8, fp
 8023f6e:	fb10 f009 	smulbb	r0, r0, r9
 8023f72:	fb14 f409 	smulbb	r4, r4, r9
 8023f76:	fb07 8805 	mla	r8, r7, r5, r8
 8023f7a:	9d08      	ldr	r5, [sp, #32]
 8023f7c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023f7e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8023f82:	fb08 1805 	mla	r8, r8, r5, r1
 8023f86:	9d05      	ldr	r5, [sp, #20]
 8023f88:	fa1f f888 	uxth.w	r8, r8
 8023f8c:	f108 0101 	add.w	r1, r8, #1
 8023f90:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8023f94:	9903      	ldr	r1, [sp, #12]
 8023f96:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023f9a:	f881 8000 	strb.w	r8, [r1]
 8023f9e:	fb03 f10a 	mul.w	r1, r3, sl
 8023fa2:	fb07 1105 	mla	r1, r7, r5, r1
 8023fa6:	9d02      	ldr	r5, [sp, #8]
 8023fa8:	fb0c 1105 	mla	r1, ip, r5, r1
 8023fac:	9d07      	ldr	r5, [sp, #28]
 8023fae:	fb05 1102 	mla	r1, r5, r2, r1
 8023fb2:	9a08      	ldr	r2, [sp, #32]
 8023fb4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023fb8:	fb01 0102 	mla	r1, r1, r2, r0
 8023fbc:	9a03      	ldr	r2, [sp, #12]
 8023fbe:	b289      	uxth	r1, r1
 8023fc0:	1c48      	adds	r0, r1, #1
 8023fc2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8023fc6:	1209      	asrs	r1, r1, #8
 8023fc8:	7051      	strb	r1, [r2, #1]
 8023fca:	9a01      	ldr	r2, [sp, #4]
 8023fcc:	4353      	muls	r3, r2
 8023fce:	9a06      	ldr	r2, [sp, #24]
 8023fd0:	fb07 3702 	mla	r7, r7, r2, r3
 8023fd4:	9b08      	ldr	r3, [sp, #32]
 8023fd6:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8023fda:	fb05 c606 	mla	r6, r5, r6, ip
 8023fde:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023fe2:	fb06 4603 	mla	r6, r6, r3, r4
 8023fe6:	9b03      	ldr	r3, [sp, #12]
 8023fe8:	b2b6      	uxth	r6, r6
 8023fea:	f106 0e01 	add.w	lr, r6, #1
 8023fee:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8023ff2:	1236      	asrs	r6, r6, #8
 8023ff4:	709e      	strb	r6, [r3, #2]
 8023ff6:	b00d      	add	sp, #52	; 0x34
 8023ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ffc:	f1bc 0f0f 	cmp.w	ip, #15
 8024000:	f63f af60 	bhi.w	8023ec4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8024004:	4626      	mov	r6, r4
 8024006:	4602      	mov	r2, r0
 8024008:	460d      	mov	r5, r1
 802400a:	46a6      	mov	lr, r4
 802400c:	9002      	str	r0, [sp, #8]
 802400e:	4688      	mov	r8, r1
 8024010:	e783      	b.n	8023f1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8024012:	bf00      	nop
 8024014:	0802dce5 	.word	0x0802dce5
 8024018:	0802e1da 	.word	0x0802e1da
 802401c:	0802ddae 	.word	0x0802ddae

08024020 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024024:	ed2d 8b08 	vpush	{d8-d11}
 8024028:	b0a1      	sub	sp, #132	; 0x84
 802402a:	eeb0 aa40 	vmov.f32	s20, s0
 802402e:	eef0 9a60 	vmov.f32	s19, s1
 8024032:	9307      	str	r3, [sp, #28]
 8024034:	eeb0 9a41 	vmov.f32	s18, s2
 8024038:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 802403c:	eeb0 8a62 	vmov.f32	s16, s5
 8024040:	9210      	str	r2, [sp, #64]	; 0x40
 8024042:	eef0 8a43 	vmov.f32	s17, s6
 8024046:	9308      	str	r3, [sp, #32]
 8024048:	eef0 ba44 	vmov.f32	s23, s8
 802404c:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 8024050:	eeb0 ba64 	vmov.f32	s22, s9
 8024054:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8024056:	eef0 aa45 	vmov.f32	s21, s10
 802405a:	930a      	str	r3, [sp, #40]	; 0x28
 802405c:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8024060:	901f      	str	r0, [sp, #124]	; 0x7c
 8024062:	930f      	str	r3, [sp, #60]	; 0x3c
 8024064:	6850      	ldr	r0, [r2, #4]
 8024066:	910e      	str	r1, [sp, #56]	; 0x38
 8024068:	6812      	ldr	r2, [r2, #0]
 802406a:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 802406e:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 8024072:	fb00 1303 	mla	r3, r0, r3, r1
 8024076:	9908      	ldr	r1, [sp, #32]
 8024078:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802407c:	18d3      	adds	r3, r2, r3
 802407e:	2203      	movs	r2, #3
 8024080:	9309      	str	r3, [sp, #36]	; 0x24
 8024082:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8024084:	681b      	ldr	r3, [r3, #0]
 8024086:	930c      	str	r3, [sp, #48]	; 0x30
 8024088:	f06f 0304 	mvn.w	r3, #4
 802408c:	fb11 3302 	smlabb	r3, r1, r2, r3
 8024090:	930d      	str	r3, [sp, #52]	; 0x34
 8024092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024094:	43db      	mvns	r3, r3
 8024096:	b2db      	uxtb	r3, r3
 8024098:	930b      	str	r3, [sp, #44]	; 0x2c
 802409a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802409c:	2b00      	cmp	r3, #0
 802409e:	dc03      	bgt.n	80240a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80240a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80240a2:	2b00      	cmp	r3, #0
 80240a4:	f340 81df 	ble.w	8024466 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80240a8:	9b07      	ldr	r3, [sp, #28]
 80240aa:	2b00      	cmp	r3, #0
 80240ac:	f340 80f2 	ble.w	8024294 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80240b0:	ea5f 4228 	movs.w	r2, r8, asr #16
 80240b4:	ea4f 432b 	mov.w	r3, fp, asr #16
 80240b8:	d430      	bmi.n	802411c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80240ba:	1c51      	adds	r1, r2, #1
 80240bc:	9808      	ldr	r0, [sp, #32]
 80240be:	4281      	cmp	r1, r0
 80240c0:	da2f      	bge.n	8024122 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80240c2:	2b00      	cmp	r3, #0
 80240c4:	db2d      	blt.n	8024122 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80240c6:	1c59      	adds	r1, r3, #1
 80240c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80240ca:	4288      	cmp	r0, r1
 80240cc:	dd29      	ble.n	8024122 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80240ce:	9b07      	ldr	r3, [sp, #28]
 80240d0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80240d2:	3b01      	subs	r3, #1
 80240d4:	fb02 8203 	mla	r2, r2, r3, r8
 80240d8:	1412      	asrs	r2, r2, #16
 80240da:	d42d      	bmi.n	8024138 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80240dc:	3201      	adds	r2, #1
 80240de:	9908      	ldr	r1, [sp, #32]
 80240e0:	4291      	cmp	r1, r2
 80240e2:	dd29      	ble.n	8024138 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80240e4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80240e6:	fb02 b303 	mla	r3, r2, r3, fp
 80240ea:	141b      	asrs	r3, r3, #16
 80240ec:	d424      	bmi.n	8024138 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80240ee:	3301      	adds	r3, #1
 80240f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80240f2:	429a      	cmp	r2, r3
 80240f4:	dd20      	ble.n	8024138 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80240f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240f8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80240fc:	1cde      	adds	r6, r3, #3
 80240fe:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 8024102:	f1bc 0f00 	cmp.w	ip, #0
 8024106:	f300 811f 	bgt.w	8024348 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 802410a:	9b07      	ldr	r3, [sp, #28]
 802410c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024112:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024116:	4423      	add	r3, r4
 8024118:	9309      	str	r3, [sp, #36]	; 0x24
 802411a:	e0bd      	b.n	8024298 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 802411c:	1c57      	adds	r7, r2, #1
 802411e:	f040 80ae 	bne.w	802427e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8024122:	9908      	ldr	r1, [sp, #32]
 8024124:	428a      	cmp	r2, r1
 8024126:	f280 80aa 	bge.w	802427e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802412a:	1c5e      	adds	r6, r3, #1
 802412c:	f2c0 80a7 	blt.w	802427e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8024130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024132:	4293      	cmp	r3, r2
 8024134:	f280 80a3 	bge.w	802427e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8024138:	f8dd a01c 	ldr.w	sl, [sp, #28]
 802413c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802413e:	f1ba 0f00 	cmp.w	sl, #0
 8024142:	dde2      	ble.n	802410a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8024144:	ea5f 4028 	movs.w	r0, r8, asr #16
 8024148:	f3c8 3303 	ubfx	r3, r8, #12, #4
 802414c:	ea4f 412b 	mov.w	r1, fp, asr #16
 8024150:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8024154:	f100 80df 	bmi.w	8024316 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8024158:	1c45      	adds	r5, r0, #1
 802415a:	9f08      	ldr	r7, [sp, #32]
 802415c:	42af      	cmp	r7, r5
 802415e:	f340 80dc 	ble.w	802431a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8024162:	2900      	cmp	r1, #0
 8024164:	f2c0 80d9 	blt.w	802431a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8024168:	1c4d      	adds	r5, r1, #1
 802416a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802416c:	42af      	cmp	r7, r5
 802416e:	f340 80d4 	ble.w	802431a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8024172:	9d08      	ldr	r5, [sp, #32]
 8024174:	fb05 0101 	mla	r1, r5, r1, r0
 8024178:	980c      	ldr	r0, [sp, #48]	; 0x30
 802417a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802417e:	1845      	adds	r5, r0, r1
 8024180:	5c40      	ldrb	r0, [r0, r1]
 8024182:	792f      	ldrb	r7, [r5, #4]
 8024184:	7869      	ldrb	r1, [r5, #1]
 8024186:	9711      	str	r7, [sp, #68]	; 0x44
 8024188:	796f      	ldrb	r7, [r5, #5]
 802418a:	f895 e002 	ldrb.w	lr, [r5, #2]
 802418e:	f895 9003 	ldrb.w	r9, [r5, #3]
 8024192:	9712      	str	r7, [sp, #72]	; 0x48
 8024194:	b17a      	cbz	r2, 80241b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8024196:	3505      	adds	r5, #5
 8024198:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802419a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802419c:	19ef      	adds	r7, r5, r7
 802419e:	5d2d      	ldrb	r5, [r5, r4]
 80241a0:	787c      	ldrb	r4, [r7, #1]
 80241a2:	9513      	str	r5, [sp, #76]	; 0x4c
 80241a4:	9415      	str	r4, [sp, #84]	; 0x54
 80241a6:	78bc      	ldrb	r4, [r7, #2]
 80241a8:	9417      	str	r4, [sp, #92]	; 0x5c
 80241aa:	78fc      	ldrb	r4, [r7, #3]
 80241ac:	9414      	str	r4, [sp, #80]	; 0x50
 80241ae:	793c      	ldrb	r4, [r7, #4]
 80241b0:	9416      	str	r4, [sp, #88]	; 0x58
 80241b2:	797c      	ldrb	r4, [r7, #5]
 80241b4:	9418      	str	r4, [sp, #96]	; 0x60
 80241b6:	b29b      	uxth	r3, r3
 80241b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80241ba:	b292      	uxth	r2, r2
 80241bc:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80241c0:	fb03 f702 	mul.w	r7, r3, r2
 80241c4:	011b      	lsls	r3, r3, #4
 80241c6:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 80241ca:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80241ce:	1bdb      	subs	r3, r3, r7
 80241d0:	b292      	uxth	r2, r2
 80241d2:	b29b      	uxth	r3, r3
 80241d4:	ebac 0c02 	sub.w	ip, ip, r2
 80241d8:	fb03 f909 	mul.w	r9, r3, r9
 80241dc:	fa1f fc8c 	uxth.w	ip, ip
 80241e0:	fb0c 9000 	mla	r0, ip, r0, r9
 80241e4:	f896 9000 	ldrb.w	r9, [r6]
 80241e8:	fb02 0004 	mla	r0, r2, r4, r0
 80241ec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80241ee:	fb07 0004 	mla	r0, r7, r4, r0
 80241f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80241f4:	fb19 f904 	smulbb	r9, r9, r4
 80241f8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80241fc:	fb00 9005 	mla	r0, r0, r5, r9
 8024200:	b280      	uxth	r0, r0
 8024202:	f100 0901 	add.w	r9, r0, #1
 8024206:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802420a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802420c:	4358      	muls	r0, r3
 802420e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024212:	fb0c 0101 	mla	r1, ip, r1, r0
 8024216:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024218:	f886 9000 	strb.w	r9, [r6]
 802421c:	fb02 1100 	mla	r1, r2, r0, r1
 8024220:	9816      	ldr	r0, [sp, #88]	; 0x58
 8024222:	fb07 1100 	mla	r1, r7, r0, r1
 8024226:	7870      	ldrb	r0, [r6, #1]
 8024228:	fb10 f004 	smulbb	r0, r0, r4
 802422c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024230:	fb01 0105 	mla	r1, r1, r5, r0
 8024234:	b289      	uxth	r1, r1
 8024236:	1c48      	adds	r0, r1, #1
 8024238:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802423c:	1209      	asrs	r1, r1, #8
 802423e:	7071      	strb	r1, [r6, #1]
 8024240:	9912      	ldr	r1, [sp, #72]	; 0x48
 8024242:	434b      	muls	r3, r1
 8024244:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8024246:	fb0c 330e 	mla	r3, ip, lr, r3
 802424a:	fb02 3201 	mla	r2, r2, r1, r3
 802424e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024250:	fb07 2703 	mla	r7, r7, r3, r2
 8024254:	78b2      	ldrb	r2, [r6, #2]
 8024256:	fb12 f204 	smulbb	r2, r2, r4
 802425a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802425e:	fb07 2505 	mla	r5, r7, r5, r2
 8024262:	b2ad      	uxth	r5, r5
 8024264:	1c6f      	adds	r7, r5, #1
 8024266:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 802426a:	122d      	asrs	r5, r5, #8
 802426c:	70b5      	strb	r5, [r6, #2]
 802426e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8024270:	3603      	adds	r6, #3
 8024272:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024276:	4498      	add	r8, r3
 8024278:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802427a:	449b      	add	fp, r3
 802427c:	e75f      	b.n	802413e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 802427e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8024280:	4498      	add	r8, r3
 8024282:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8024284:	449b      	add	fp, r3
 8024286:	9b07      	ldr	r3, [sp, #28]
 8024288:	3b01      	subs	r3, #1
 802428a:	9307      	str	r3, [sp, #28]
 802428c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802428e:	3303      	adds	r3, #3
 8024290:	9309      	str	r3, [sp, #36]	; 0x24
 8024292:	e709      	b.n	80240a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8024294:	f47f af1b 	bne.w	80240ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8024298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802429a:	2b00      	cmp	r3, #0
 802429c:	f340 80e3 	ble.w	8024466 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80242a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80242a4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80242a6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80242aa:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80242ae:	eef0 6a48 	vmov.f32	s13, s16
 80242b2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80242b6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80242ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80242be:	ee16 8a90 	vmov	r8, s13
 80242c2:	eef0 6a68 	vmov.f32	s13, s17
 80242c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80242ca:	ee16 ba90 	vmov	fp, s13
 80242ce:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80242d2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80242d6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80242da:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80242de:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80242e2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80242e6:	ee18 2a10 	vmov	r2, s16
 80242ea:	eeb0 8a47 	vmov.f32	s16, s14
 80242ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80242f2:	ee18 2a90 	vmov	r2, s17
 80242f6:	9335      	str	r3, [sp, #212]	; 0xd4
 80242f8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80242fa:	eef0 8a67 	vmov.f32	s17, s15
 80242fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8024302:	9336      	str	r3, [sp, #216]	; 0xd8
 8024304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024306:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024308:	3b01      	subs	r3, #1
 802430a:	930e      	str	r3, [sp, #56]	; 0x38
 802430c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802430e:	bf08      	it	eq
 8024310:	4613      	moveq	r3, r2
 8024312:	9307      	str	r3, [sp, #28]
 8024314:	e6c1      	b.n	802409a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8024316:	1c45      	adds	r5, r0, #1
 8024318:	d1a9      	bne.n	802426e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802431a:	9c08      	ldr	r4, [sp, #32]
 802431c:	42a0      	cmp	r0, r4
 802431e:	daa6      	bge.n	802426e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8024320:	1c4c      	adds	r4, r1, #1
 8024322:	dba4      	blt.n	802426e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8024324:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024326:	428c      	cmp	r4, r1
 8024328:	dda1      	ble.n	802426e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802432a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802432c:	9001      	str	r0, [sp, #4]
 802432e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024330:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8024334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024336:	4631      	mov	r1, r6
 8024338:	e9cd 2404 	strd	r2, r4, [sp, #16]
 802433c:	9300      	str	r3, [sp, #0]
 802433e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024340:	9b08      	ldr	r3, [sp, #32]
 8024342:	f7ff fd5b 	bl	8023dfc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8024346:	e792      	b.n	802426e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8024348:	ea4f 4228 	mov.w	r2, r8, asr #16
 802434c:	9c08      	ldr	r4, [sp, #32]
 802434e:	ea4f 402b 	mov.w	r0, fp, asr #16
 8024352:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8024356:	f3c8 3303 	ubfx	r3, r8, #12, #4
 802435a:	fb04 2000 	mla	r0, r4, r0, r2
 802435e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024360:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024362:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024366:	4402      	add	r2, r0
 8024368:	5c25      	ldrb	r5, [r4, r0]
 802436a:	7894      	ldrb	r4, [r2, #2]
 802436c:	7850      	ldrb	r0, [r2, #1]
 802436e:	9411      	str	r4, [sp, #68]	; 0x44
 8024370:	7954      	ldrb	r4, [r2, #5]
 8024372:	f892 a003 	ldrb.w	sl, [r2, #3]
 8024376:	f892 9004 	ldrb.w	r9, [r2, #4]
 802437a:	9412      	str	r4, [sp, #72]	; 0x48
 802437c:	b171      	cbz	r1, 802439c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802437e:	3205      	adds	r2, #5
 8024380:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024382:	1917      	adds	r7, r2, r4
 8024384:	5d12      	ldrb	r2, [r2, r4]
 8024386:	9219      	str	r2, [sp, #100]	; 0x64
 8024388:	787a      	ldrb	r2, [r7, #1]
 802438a:	921b      	str	r2, [sp, #108]	; 0x6c
 802438c:	78ba      	ldrb	r2, [r7, #2]
 802438e:	921d      	str	r2, [sp, #116]	; 0x74
 8024390:	78fa      	ldrb	r2, [r7, #3]
 8024392:	921a      	str	r2, [sp, #104]	; 0x68
 8024394:	793a      	ldrb	r2, [r7, #4]
 8024396:	921c      	str	r2, [sp, #112]	; 0x70
 8024398:	797a      	ldrb	r2, [r7, #5]
 802439a:	921e      	str	r2, [sp, #120]	; 0x78
 802439c:	b29b      	uxth	r3, r3
 802439e:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80243a0:	b289      	uxth	r1, r1
 80243a2:	3603      	adds	r6, #3
 80243a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80243a8:	fb03 f201 	mul.w	r2, r3, r1
 80243ac:	011b      	lsls	r3, r3, #4
 80243ae:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 80243b2:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80243b6:	1a9b      	subs	r3, r3, r2
 80243b8:	b289      	uxth	r1, r1
 80243ba:	b29b      	uxth	r3, r3
 80243bc:	1a7f      	subs	r7, r7, r1
 80243be:	fb03 fa0a 	mul.w	sl, r3, sl
 80243c2:	b2bf      	uxth	r7, r7
 80243c4:	fb03 f909 	mul.w	r9, r3, r9
 80243c8:	fb07 a505 	mla	r5, r7, r5, sl
 80243cc:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 80243d0:	fb07 9000 	mla	r0, r7, r0, r9
 80243d4:	fb01 5504 	mla	r5, r1, r4, r5
 80243d8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80243da:	fb02 5504 	mla	r5, r2, r4, r5
 80243de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80243e0:	fb1a fa04 	smulbb	sl, sl, r4
 80243e4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80243e8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80243ea:	fb05 a50e 	mla	r5, r5, lr, sl
 80243ee:	fb01 0004 	mla	r0, r1, r4, r0
 80243f2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80243f4:	b2ad      	uxth	r5, r5
 80243f6:	fb02 0004 	mla	r0, r2, r4, r0
 80243fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80243fc:	f105 0a01 	add.w	sl, r5, #1
 8024400:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024404:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8024408:	122d      	asrs	r5, r5, #8
 802440a:	f806 5c06 	strb.w	r5, [r6, #-6]
 802440e:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 8024412:	fb15 f504 	smulbb	r5, r5, r4
 8024416:	fb00 500e 	mla	r0, r0, lr, r5
 802441a:	b280      	uxth	r0, r0
 802441c:	1c45      	adds	r5, r0, #1
 802441e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024422:	1200      	asrs	r0, r0, #8
 8024424:	f806 0c05 	strb.w	r0, [r6, #-5]
 8024428:	9812      	ldr	r0, [sp, #72]	; 0x48
 802442a:	4343      	muls	r3, r0
 802442c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802442e:	fb07 3300 	mla	r3, r7, r0, r3
 8024432:	981d      	ldr	r0, [sp, #116]	; 0x74
 8024434:	fb01 3100 	mla	r1, r1, r0, r3
 8024438:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802443a:	fb02 1203 	mla	r2, r2, r3, r1
 802443e:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 8024442:	fb11 f104 	smulbb	r1, r1, r4
 8024446:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802444a:	fb02 120e 	mla	r2, r2, lr, r1
 802444e:	b292      	uxth	r2, r2
 8024450:	1c53      	adds	r3, r2, #1
 8024452:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024456:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8024458:	1212      	asrs	r2, r2, #8
 802445a:	4498      	add	r8, r3
 802445c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802445e:	f806 2c04 	strb.w	r2, [r6, #-4]
 8024462:	449b      	add	fp, r3
 8024464:	e64d      	b.n	8024102 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8024466:	b021      	add	sp, #132	; 0x84
 8024468:	ecbd 8b08 	vpop	{d8-d11}
 802446c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024470 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8024470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024474:	b085      	sub	sp, #20
 8024476:	784d      	ldrb	r5, [r1, #1]
 8024478:	788e      	ldrb	r6, [r1, #2]
 802447a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 802447e:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8024482:	9403      	str	r4, [sp, #12]
 8024484:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8024488:	780c      	ldrb	r4, [r1, #0]
 802448a:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 802448e:	fb07 ce03 	mla	lr, r7, r3, ip
 8024492:	2f00      	cmp	r7, #0
 8024494:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8024498:	eb02 0b0e 	add.w	fp, r2, lr
 802449c:	db56      	blt.n	802454c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802449e:	45b9      	cmp	r9, r7
 80244a0:	dd54      	ble.n	802454c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80244a2:	f1bc 0f00 	cmp.w	ip, #0
 80244a6:	db4d      	blt.n	8024544 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80244a8:	4563      	cmp	r3, ip
 80244aa:	dd4b      	ble.n	8024544 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80244ac:	f812 200e 	ldrb.w	r2, [r2, lr]
 80244b0:	9200      	str	r2, [sp, #0]
 80244b2:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80244b6:	9201      	str	r2, [sp, #4]
 80244b8:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80244bc:	9202      	str	r2, [sp, #8]
 80244be:	f11c 0201 	adds.w	r2, ip, #1
 80244c2:	d44a      	bmi.n	802455a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80244c4:	4293      	cmp	r3, r2
 80244c6:	dd48      	ble.n	802455a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80244c8:	2800      	cmp	r0, #0
 80244ca:	d046      	beq.n	802455a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80244cc:	f89b e003 	ldrb.w	lr, [fp, #3]
 80244d0:	f89b 8004 	ldrb.w	r8, [fp, #4]
 80244d4:	f89b a005 	ldrb.w	sl, [fp, #5]
 80244d8:	3701      	adds	r7, #1
 80244da:	d446      	bmi.n	802456a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 80244dc:	45b9      	cmp	r9, r7
 80244de:	dd44      	ble.n	802456a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 80244e0:	9a03      	ldr	r2, [sp, #12]
 80244e2:	2a00      	cmp	r2, #0
 80244e4:	d045      	beq.n	8024572 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 80244e6:	f1bc 0f00 	cmp.w	ip, #0
 80244ea:	db3a      	blt.n	8024562 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 80244ec:	4563      	cmp	r3, ip
 80244ee:	dd38      	ble.n	8024562 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 80244f0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80244f4:	f04f 0903 	mov.w	r9, #3
 80244f8:	f81b 7002 	ldrb.w	r7, [fp, r2]
 80244fc:	fb03 b209 	mla	r2, r3, r9, fp
 8024500:	fb03 b909 	mla	r9, r3, r9, fp
 8024504:	7852      	ldrb	r2, [r2, #1]
 8024506:	f899 9002 	ldrb.w	r9, [r9, #2]
 802450a:	f11c 0c01 	adds.w	ip, ip, #1
 802450e:	d40d      	bmi.n	802452c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8024510:	4563      	cmp	r3, ip
 8024512:	dd0b      	ble.n	802452c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8024514:	b160      	cbz	r0, 8024530 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8024516:	2603      	movs	r6, #3
 8024518:	fb13 6406 	smlabb	r4, r3, r6, r6
 802451c:	fb03 b506 	mla	r5, r3, r6, fp
 8024520:	fb03 b306 	mla	r3, r3, r6, fp
 8024524:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8024528:	792d      	ldrb	r5, [r5, #4]
 802452a:	795e      	ldrb	r6, [r3, #5]
 802452c:	280f      	cmp	r0, #15
 802452e:	d802      	bhi.n	8024536 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8024530:	9b03      	ldr	r3, [sp, #12]
 8024532:	2b0f      	cmp	r3, #15
 8024534:	d922      	bls.n	802457c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8024536:	4b2f      	ldr	r3, [pc, #188]	; (80245f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8024538:	f240 11a5 	movw	r1, #421	; 0x1a5
 802453c:	4a2e      	ldr	r2, [pc, #184]	; (80245f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 802453e:	482f      	ldr	r0, [pc, #188]	; (80245fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8024540:	f003 ffa0 	bl	8028484 <__assert_func>
 8024544:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8024548:	9400      	str	r4, [sp, #0]
 802454a:	e7b8      	b.n	80244be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 802454c:	46b2      	mov	sl, r6
 802454e:	46a8      	mov	r8, r5
 8024550:	46a6      	mov	lr, r4
 8024552:	9400      	str	r4, [sp, #0]
 8024554:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8024558:	e7be      	b.n	80244d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 802455a:	46b2      	mov	sl, r6
 802455c:	46a8      	mov	r8, r5
 802455e:	46a6      	mov	lr, r4
 8024560:	e7ba      	b.n	80244d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8024562:	46b1      	mov	r9, r6
 8024564:	462a      	mov	r2, r5
 8024566:	4627      	mov	r7, r4
 8024568:	e7cf      	b.n	802450a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 802456a:	46b1      	mov	r9, r6
 802456c:	462a      	mov	r2, r5
 802456e:	4627      	mov	r7, r4
 8024570:	e7dc      	b.n	802452c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8024572:	280f      	cmp	r0, #15
 8024574:	d8df      	bhi.n	8024536 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8024576:	46b1      	mov	r9, r6
 8024578:	462a      	mov	r2, r5
 802457a:	4627      	mov	r7, r4
 802457c:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8024580:	b280      	uxth	r0, r0
 8024582:	fb00 f30b 	mul.w	r3, r0, fp
 8024586:	0100      	lsls	r0, r0, #4
 8024588:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 802458c:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8024590:	1ac0      	subs	r0, r0, r3
 8024592:	fa1f fb8b 	uxth.w	fp, fp
 8024596:	b280      	uxth	r0, r0
 8024598:	ebac 0c0b 	sub.w	ip, ip, fp
 802459c:	9003      	str	r0, [sp, #12]
 802459e:	fa1f fc8c 	uxth.w	ip, ip
 80245a2:	fb00 fe0e 	mul.w	lr, r0, lr
 80245a6:	9800      	ldr	r0, [sp, #0]
 80245a8:	fb0c ee00 	mla	lr, ip, r0, lr
 80245ac:	9803      	ldr	r0, [sp, #12]
 80245ae:	fb00 f808 	mul.w	r8, r0, r8
 80245b2:	9801      	ldr	r0, [sp, #4]
 80245b4:	fb0b ee07 	mla	lr, fp, r7, lr
 80245b8:	fb0c 8800 	mla	r8, ip, r0, r8
 80245bc:	fb03 ee04 	mla	lr, r3, r4, lr
 80245c0:	fb0b 8202 	mla	r2, fp, r2, r8
 80245c4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80245c8:	fb03 2505 	mla	r5, r3, r5, r2
 80245cc:	9a03      	ldr	r2, [sp, #12]
 80245ce:	f881 e000 	strb.w	lr, [r1]
 80245d2:	fb02 f00a 	mul.w	r0, r2, sl
 80245d6:	9a02      	ldr	r2, [sp, #8]
 80245d8:	122d      	asrs	r5, r5, #8
 80245da:	fb0c 0c02 	mla	ip, ip, r2, r0
 80245de:	704d      	strb	r5, [r1, #1]
 80245e0:	fb0b c909 	mla	r9, fp, r9, ip
 80245e4:	fb03 9606 	mla	r6, r3, r6, r9
 80245e8:	1236      	asrs	r6, r6, #8
 80245ea:	708e      	strb	r6, [r1, #2]
 80245ec:	b005      	add	sp, #20
 80245ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80245f2:	bf00      	nop
 80245f4:	0802dce5 	.word	0x0802dce5
 80245f8:	0802e1da 	.word	0x0802e1da
 80245fc:	0802ddae 	.word	0x0802ddae

08024600 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024604:	ed2d 8b0a 	vpush	{d8-d12}
 8024608:	b09d      	sub	sp, #116	; 0x74
 802460a:	eeb0 aa40 	vmov.f32	s20, s0
 802460e:	eef0 9a60 	vmov.f32	s19, s1
 8024612:	9306      	str	r3, [sp, #24]
 8024614:	eeb0 9a41 	vmov.f32	s18, s2
 8024618:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 802461c:	eeb0 8a62 	vmov.f32	s16, s5
 8024620:	901b      	str	r0, [sp, #108]	; 0x6c
 8024622:	eef0 8a43 	vmov.f32	s17, s6
 8024626:	9307      	str	r3, [sp, #28]
 8024628:	eeb0 ca44 	vmov.f32	s24, s8
 802462c:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8024630:	eef0 ba64 	vmov.f32	s23, s9
 8024634:	eeb0 ba45 	vmov.f32	s22, s10
 8024638:	9309      	str	r3, [sp, #36]	; 0x24
 802463a:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802463e:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8024642:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8024644:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8024648:	6850      	ldr	r0, [r2, #4]
 802464a:	6812      	ldr	r2, [r2, #0]
 802464c:	fb00 1303 	mla	r3, r0, r3, r1
 8024650:	9907      	ldr	r1, [sp, #28]
 8024652:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024656:	18d3      	adds	r3, r2, r3
 8024658:	2203      	movs	r2, #3
 802465a:	9308      	str	r3, [sp, #32]
 802465c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802465e:	681b      	ldr	r3, [r3, #0]
 8024660:	930a      	str	r3, [sp, #40]	; 0x28
 8024662:	f06f 0304 	mvn.w	r3, #4
 8024666:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 802466a:	fb11 3302 	smlabb	r3, r1, r2, r3
 802466e:	930b      	str	r3, [sp, #44]	; 0x2c
 8024670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024672:	2b00      	cmp	r3, #0
 8024674:	dc03      	bgt.n	802467e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8024676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024678:	2b00      	cmp	r3, #0
 802467a:	f340 8193 	ble.w	80249a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 802467e:	9b06      	ldr	r3, [sp, #24]
 8024680:	2b00      	cmp	r3, #0
 8024682:	f340 80d0 	ble.w	8024826 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8024686:	1432      	asrs	r2, r6, #16
 8024688:	ea4f 4325 	mov.w	r3, r5, asr #16
 802468c:	d42f      	bmi.n	80246ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802468e:	1c51      	adds	r1, r2, #1
 8024690:	9807      	ldr	r0, [sp, #28]
 8024692:	4281      	cmp	r1, r0
 8024694:	da2e      	bge.n	80246f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8024696:	2b00      	cmp	r3, #0
 8024698:	db2c      	blt.n	80246f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802469a:	1c59      	adds	r1, r3, #1
 802469c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802469e:	4288      	cmp	r0, r1
 80246a0:	dd28      	ble.n	80246f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80246a2:	9b06      	ldr	r3, [sp, #24]
 80246a4:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80246a6:	3b01      	subs	r3, #1
 80246a8:	fb02 6203 	mla	r2, r2, r3, r6
 80246ac:	1412      	asrs	r2, r2, #16
 80246ae:	d42c      	bmi.n	802470a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80246b0:	3201      	adds	r2, #1
 80246b2:	9907      	ldr	r1, [sp, #28]
 80246b4:	4291      	cmp	r1, r2
 80246b6:	dd28      	ble.n	802470a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80246b8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80246ba:	fb02 5303 	mla	r3, r2, r3, r5
 80246be:	141b      	asrs	r3, r3, #16
 80246c0:	d423      	bmi.n	802470a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80246c2:	3301      	adds	r3, #1
 80246c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80246c6:	429a      	cmp	r2, r3
 80246c8:	dd1f      	ble.n	802470a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80246ca:	9b08      	ldr	r3, [sp, #32]
 80246cc:	f8dd e018 	ldr.w	lr, [sp, #24]
 80246d0:	f103 0c03 	add.w	ip, r3, #3
 80246d4:	f1be 0f00 	cmp.w	lr, #0
 80246d8:	f300 80fa 	bgt.w	80248d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80246dc:	9b06      	ldr	r3, [sp, #24]
 80246de:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80246e2:	9b08      	ldr	r3, [sp, #32]
 80246e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80246e8:	4423      	add	r3, r4
 80246ea:	9308      	str	r3, [sp, #32]
 80246ec:	e09d      	b.n	802482a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 80246ee:	1c51      	adds	r1, r2, #1
 80246f0:	f040 808e 	bne.w	8024810 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80246f4:	9907      	ldr	r1, [sp, #28]
 80246f6:	428a      	cmp	r2, r1
 80246f8:	f280 808a 	bge.w	8024810 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80246fc:	1c5f      	adds	r7, r3, #1
 80246fe:	f2c0 8087 	blt.w	8024810 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8024702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024704:	4293      	cmp	r3, r2
 8024706:	f280 8083 	bge.w	8024810 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 802470a:	9f06      	ldr	r7, [sp, #24]
 802470c:	f8dd a020 	ldr.w	sl, [sp, #32]
 8024710:	2f00      	cmp	r7, #0
 8024712:	dde3      	ble.n	80246dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8024714:	1432      	asrs	r2, r6, #16
 8024716:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802471a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802471e:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8024722:	f100 80bf 	bmi.w	80248a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8024726:	1c50      	adds	r0, r2, #1
 8024728:	9c07      	ldr	r4, [sp, #28]
 802472a:	4284      	cmp	r4, r0
 802472c:	f340 80bc 	ble.w	80248a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8024730:	2b00      	cmp	r3, #0
 8024732:	f2c0 80b9 	blt.w	80248a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8024736:	1c58      	adds	r0, r3, #1
 8024738:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802473a:	4284      	cmp	r4, r0
 802473c:	f340 80b4 	ble.w	80248a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8024740:	9807      	ldr	r0, [sp, #28]
 8024742:	fb00 2303 	mla	r3, r0, r3, r2
 8024746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024748:	980a      	ldr	r0, [sp, #40]	; 0x28
 802474a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802474e:	441a      	add	r2, r3
 8024750:	f810 c003 	ldrb.w	ip, [r0, r3]
 8024754:	7953      	ldrb	r3, [r2, #5]
 8024756:	7850      	ldrb	r0, [r2, #1]
 8024758:	f892 e002 	ldrb.w	lr, [r2, #2]
 802475c:	f892 9003 	ldrb.w	r9, [r2, #3]
 8024760:	f892 8004 	ldrb.w	r8, [r2, #4]
 8024764:	930e      	str	r3, [sp, #56]	; 0x38
 8024766:	f1bb 0f00 	cmp.w	fp, #0
 802476a:	d00f      	beq.n	802478c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 802476c:	3205      	adds	r2, #5
 802476e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024770:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024772:	18d3      	adds	r3, r2, r3
 8024774:	5d12      	ldrb	r2, [r2, r4]
 8024776:	920f      	str	r2, [sp, #60]	; 0x3c
 8024778:	785a      	ldrb	r2, [r3, #1]
 802477a:	9211      	str	r2, [sp, #68]	; 0x44
 802477c:	789a      	ldrb	r2, [r3, #2]
 802477e:	9213      	str	r2, [sp, #76]	; 0x4c
 8024780:	78da      	ldrb	r2, [r3, #3]
 8024782:	9210      	str	r2, [sp, #64]	; 0x40
 8024784:	791a      	ldrb	r2, [r3, #4]
 8024786:	795b      	ldrb	r3, [r3, #5]
 8024788:	9212      	str	r2, [sp, #72]	; 0x48
 802478a:	9314      	str	r3, [sp, #80]	; 0x50
 802478c:	b28b      	uxth	r3, r1
 802478e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024790:	fa1f f28b 	uxth.w	r2, fp
 8024794:	fb03 fb02 	mul.w	fp, r3, r2
 8024798:	011b      	lsls	r3, r3, #4
 802479a:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 802479e:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 80247a2:	eba3 030b 	sub.w	r3, r3, fp
 80247a6:	b292      	uxth	r2, r2
 80247a8:	b29b      	uxth	r3, r3
 80247aa:	1a89      	subs	r1, r1, r2
 80247ac:	fb03 f808 	mul.w	r8, r3, r8
 80247b0:	b289      	uxth	r1, r1
 80247b2:	fb03 f909 	mul.w	r9, r3, r9
 80247b6:	fb01 8800 	mla	r8, r1, r0, r8
 80247ba:	9811      	ldr	r0, [sp, #68]	; 0x44
 80247bc:	fb01 990c 	mla	r9, r1, ip, r9
 80247c0:	fb02 8800 	mla	r8, r2, r0, r8
 80247c4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80247c6:	fb02 9904 	mla	r9, r2, r4, r9
 80247ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80247cc:	fb0b 8800 	mla	r8, fp, r0, r8
 80247d0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80247d2:	fb0b 9904 	mla	r9, fp, r4, r9
 80247d6:	4343      	muls	r3, r0
 80247d8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80247dc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80247e0:	fb01 330e 	mla	r3, r1, lr, r3
 80247e4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80247e6:	f88a 9000 	strb.w	r9, [sl]
 80247ea:	fb02 3201 	mla	r2, r2, r1, r3
 80247ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80247f0:	f88a 8001 	strb.w	r8, [sl, #1]
 80247f4:	fb0b 2b03 	mla	fp, fp, r3, r2
 80247f8:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80247fc:	f88a b002 	strb.w	fp, [sl, #2]
 8024800:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024802:	f10a 0a03 	add.w	sl, sl, #3
 8024806:	3f01      	subs	r7, #1
 8024808:	441e      	add	r6, r3
 802480a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802480c:	441d      	add	r5, r3
 802480e:	e77f      	b.n	8024710 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8024810:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024812:	441e      	add	r6, r3
 8024814:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024816:	441d      	add	r5, r3
 8024818:	9b06      	ldr	r3, [sp, #24]
 802481a:	3b01      	subs	r3, #1
 802481c:	9306      	str	r3, [sp, #24]
 802481e:	9b08      	ldr	r3, [sp, #32]
 8024820:	3303      	adds	r3, #3
 8024822:	9308      	str	r3, [sp, #32]
 8024824:	e72b      	b.n	802467e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8024826:	f47f af3c 	bne.w	80246a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 802482a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802482c:	2b00      	cmp	r3, #0
 802482e:	f340 80b9 	ble.w	80249a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8024832:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8024836:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024838:	ee79 9aab 	vadd.f32	s19, s19, s23
 802483c:	eef0 6a48 	vmov.f32	s13, s16
 8024840:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8024844:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8024848:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802484c:	ee16 6a90 	vmov	r6, s13
 8024850:	eef0 6a68 	vmov.f32	s13, s17
 8024854:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024858:	ee16 5a90 	vmov	r5, s13
 802485c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024860:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024864:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024868:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802486c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024870:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024874:	ee18 2a10 	vmov	r2, s16
 8024878:	eeb0 8a47 	vmov.f32	s16, s14
 802487c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024880:	ee18 2a90 	vmov	r2, s17
 8024884:	9333      	str	r3, [sp, #204]	; 0xcc
 8024886:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024888:	eef0 8a67 	vmov.f32	s17, s15
 802488c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024890:	9334      	str	r3, [sp, #208]	; 0xd0
 8024892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024894:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024896:	3b01      	subs	r3, #1
 8024898:	930c      	str	r3, [sp, #48]	; 0x30
 802489a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802489c:	bf08      	it	eq
 802489e:	4613      	moveq	r3, r2
 80248a0:	9306      	str	r3, [sp, #24]
 80248a2:	e6e5      	b.n	8024670 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80248a4:	1c54      	adds	r4, r2, #1
 80248a6:	d1ab      	bne.n	8024800 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80248a8:	9807      	ldr	r0, [sp, #28]
 80248aa:	4282      	cmp	r2, r0
 80248ac:	daa8      	bge.n	8024800 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80248ae:	1c58      	adds	r0, r3, #1
 80248b0:	dba6      	blt.n	8024800 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80248b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80248b4:	4298      	cmp	r0, r3
 80248b6:	dda3      	ble.n	8024800 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80248b8:	9000      	str	r0, [sp, #0]
 80248ba:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80248bc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80248c0:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 80248c4:	9b07      	ldr	r3, [sp, #28]
 80248c6:	4651      	mov	r1, sl
 80248c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80248ca:	f7ff fdd1 	bl	8024470 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80248ce:	e797      	b.n	8024800 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80248d0:	1431      	asrs	r1, r6, #16
 80248d2:	9c07      	ldr	r4, [sp, #28]
 80248d4:	1428      	asrs	r0, r5, #16
 80248d6:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80248da:	f3c6 3303 	ubfx	r3, r6, #12, #4
 80248de:	fb04 1000 	mla	r0, r4, r0, r1
 80248e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80248e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80248e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80248ea:	4401      	add	r1, r0
 80248ec:	5c20      	ldrb	r0, [r4, r0]
 80248ee:	f891 8002 	ldrb.w	r8, [r1, #2]
 80248f2:	900e      	str	r0, [sp, #56]	; 0x38
 80248f4:	f891 a003 	ldrb.w	sl, [r1, #3]
 80248f8:	7848      	ldrb	r0, [r1, #1]
 80248fa:	f891 9004 	ldrb.w	r9, [r1, #4]
 80248fe:	f891 b005 	ldrb.w	fp, [r1, #5]
 8024902:	b172      	cbz	r2, 8024922 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8024904:	3105      	adds	r1, #5
 8024906:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024908:	190f      	adds	r7, r1, r4
 802490a:	5d09      	ldrb	r1, [r1, r4]
 802490c:	9115      	str	r1, [sp, #84]	; 0x54
 802490e:	7879      	ldrb	r1, [r7, #1]
 8024910:	9117      	str	r1, [sp, #92]	; 0x5c
 8024912:	78b9      	ldrb	r1, [r7, #2]
 8024914:	9119      	str	r1, [sp, #100]	; 0x64
 8024916:	78f9      	ldrb	r1, [r7, #3]
 8024918:	9116      	str	r1, [sp, #88]	; 0x58
 802491a:	7939      	ldrb	r1, [r7, #4]
 802491c:	9118      	str	r1, [sp, #96]	; 0x60
 802491e:	7979      	ldrb	r1, [r7, #5]
 8024920:	911a      	str	r1, [sp, #104]	; 0x68
 8024922:	b29b      	uxth	r3, r3
 8024924:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024926:	b292      	uxth	r2, r2
 8024928:	f10c 0c03 	add.w	ip, ip, #3
 802492c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024930:	fb03 f102 	mul.w	r1, r3, r2
 8024934:	011b      	lsls	r3, r3, #4
 8024936:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 802493a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802493e:	1a5b      	subs	r3, r3, r1
 8024940:	b292      	uxth	r2, r2
 8024942:	b29b      	uxth	r3, r3
 8024944:	1abf      	subs	r7, r7, r2
 8024946:	fb03 f909 	mul.w	r9, r3, r9
 802494a:	b2bf      	uxth	r7, r7
 802494c:	fb03 fa0a 	mul.w	sl, r3, sl
 8024950:	fb03 f30b 	mul.w	r3, r3, fp
 8024954:	fb07 9900 	mla	r9, r7, r0, r9
 8024958:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802495a:	fb07 aa04 	mla	sl, r7, r4, sl
 802495e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024960:	fb02 9900 	mla	r9, r2, r0, r9
 8024964:	9818      	ldr	r0, [sp, #96]	; 0x60
 8024966:	fb07 3308 	mla	r3, r7, r8, r3
 802496a:	fb01 9900 	mla	r9, r1, r0, r9
 802496e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8024970:	fb02 aa04 	mla	sl, r2, r4, sl
 8024974:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024976:	fb02 3200 	mla	r2, r2, r0, r3
 802497a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802497c:	fb01 aa04 	mla	sl, r1, r4, sl
 8024980:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024984:	fb01 2103 	mla	r1, r1, r3, r2
 8024988:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802498a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802498e:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8024992:	1209      	asrs	r1, r1, #8
 8024994:	441e      	add	r6, r3
 8024996:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024998:	f80c ac06 	strb.w	sl, [ip, #-6]
 802499c:	f80c 1c04 	strb.w	r1, [ip, #-4]
 80249a0:	441d      	add	r5, r3
 80249a2:	e697      	b.n	80246d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 80249a4:	b01d      	add	sp, #116	; 0x74
 80249a6:	ecbd 8b0a 	vpop	{d8-d12}
 80249aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080249b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80249b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249b4:	b085      	sub	sp, #20
 80249b6:	7888      	ldrb	r0, [r1, #2]
 80249b8:	4691      	mov	r9, r2
 80249ba:	9000      	str	r0, [sp, #0]
 80249bc:	7848      	ldrb	r0, [r1, #1]
 80249be:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80249c2:	9001      	str	r0, [sp, #4]
 80249c4:	7808      	ldrb	r0, [r1, #0]
 80249c6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80249ca:	9002      	str	r0, [sp, #8]
 80249cc:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80249d0:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80249d4:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 80249d8:	fb04 c603 	mla	r6, r4, r3, ip
 80249dc:	2c00      	cmp	r4, #0
 80249de:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80249e2:	9a00      	ldr	r2, [sp, #0]
 80249e4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80249e8:	9a01      	ldr	r2, [sp, #4]
 80249ea:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80249ee:	db3a      	blt.n	8024a66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80249f0:	45a0      	cmp	r8, r4
 80249f2:	dd38      	ble.n	8024a66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80249f4:	f1bc 0f00 	cmp.w	ip, #0
 80249f8:	db33      	blt.n	8024a62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80249fa:	4563      	cmp	r3, ip
 80249fc:	dd31      	ble.n	8024a62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80249fe:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8024a02:	f11c 0601 	adds.w	r6, ip, #1
 8024a06:	d431      	bmi.n	8024a6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8024a08:	42b3      	cmp	r3, r6
 8024a0a:	dd2f      	ble.n	8024a6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8024a0c:	b375      	cbz	r5, 8024a6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8024a0e:	f8de 6004 	ldr.w	r6, [lr, #4]
 8024a12:	3401      	adds	r4, #1
 8024a14:	d42e      	bmi.n	8024a74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8024a16:	45a0      	cmp	r8, r4
 8024a18:	dd2c      	ble.n	8024a74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8024a1a:	b35f      	cbz	r7, 8024a74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8024a1c:	f1bc 0f00 	cmp.w	ip, #0
 8024a20:	db26      	blt.n	8024a70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8024a22:	4563      	cmp	r3, ip
 8024a24:	dd24      	ble.n	8024a70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8024a26:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8024a2a:	f11c 0c01 	adds.w	ip, ip, #1
 8024a2e:	d405      	bmi.n	8024a3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024a30:	4563      	cmp	r3, ip
 8024a32:	dd03      	ble.n	8024a3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024a34:	b115      	cbz	r5, 8024a3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024a36:	3301      	adds	r3, #1
 8024a38:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8024a3c:	2d0f      	cmp	r5, #15
 8024a3e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8024a42:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024a46:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024a4a:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8024a4e:	d801      	bhi.n	8024a54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8024a50:	2f0f      	cmp	r7, #15
 8024a52:	d911      	bls.n	8024a78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8024a54:	4b80      	ldr	r3, [pc, #512]	; (8024c58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8024a56:	f240 11a5 	movw	r1, #421	; 0x1a5
 8024a5a:	4a80      	ldr	r2, [pc, #512]	; (8024c5c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8024a5c:	4880      	ldr	r0, [pc, #512]	; (8024c60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8024a5e:	f003 fd11 	bl	8028484 <__assert_func>
 8024a62:	4602      	mov	r2, r0
 8024a64:	e7cd      	b.n	8024a02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8024a66:	4606      	mov	r6, r0
 8024a68:	4602      	mov	r2, r0
 8024a6a:	e7d2      	b.n	8024a12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8024a6c:	4606      	mov	r6, r0
 8024a6e:	e7d0      	b.n	8024a12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8024a70:	4604      	mov	r4, r0
 8024a72:	e7da      	b.n	8024a2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8024a74:	4604      	mov	r4, r0
 8024a76:	e7e1      	b.n	8024a3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024a78:	b2ab      	uxth	r3, r5
 8024a7a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024a7e:	b2bf      	uxth	r7, r7
 8024a80:	fb03 fe07 	mul.w	lr, r3, r7
 8024a84:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8024a88:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024a8c:	eba3 0c0e 	sub.w	ip, r3, lr
 8024a90:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8024a94:	b2bf      	uxth	r7, r7
 8024a96:	fa1f fc8c 	uxth.w	ip, ip
 8024a9a:	eba5 0507 	sub.w	r5, r5, r7
 8024a9e:	fb0c f30a 	mul.w	r3, ip, sl
 8024aa2:	b2ad      	uxth	r5, r5
 8024aa4:	fb05 330b 	mla	r3, r5, fp, r3
 8024aa8:	fb07 3309 	mla	r3, r7, r9, r3
 8024aac:	fb0e 3308 	mla	r3, lr, r8, r3
 8024ab0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024ab4:	9303      	str	r3, [sp, #12]
 8024ab6:	d018      	beq.n	8024aea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8024ab8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8024abc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024ac0:	fb0b f303 	mul.w	r3, fp, r3
 8024ac4:	fb0b fb02 	mul.w	fp, fp, r2
 8024ac8:	0a1a      	lsrs	r2, r3, #8
 8024aca:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8024ace:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024ad2:	441a      	add	r2, r3
 8024ad4:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8024ad8:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8024adc:	0a12      	lsrs	r2, r2, #8
 8024ade:	0a1b      	lsrs	r3, r3, #8
 8024ae0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024ae4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024ae8:	431a      	orrs	r2, r3
 8024aea:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024aee:	d019      	beq.n	8024b24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8024af0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8024af4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024af8:	fb0a fb0b 	mul.w	fp, sl, fp
 8024afc:	fb0a fa06 	mul.w	sl, sl, r6
 8024b00:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8024b04:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024b08:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8024b0c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024b10:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8024b14:	445e      	add	r6, fp
 8024b16:	0a1b      	lsrs	r3, r3, #8
 8024b18:	0a36      	lsrs	r6, r6, #8
 8024b1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b1e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024b22:	431e      	orrs	r6, r3
 8024b24:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024b28:	d019      	beq.n	8024b5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8024b2a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8024b2e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024b32:	fb09 fa0a 	mul.w	sl, r9, sl
 8024b36:	fb09 f904 	mul.w	r9, r9, r4
 8024b3a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8024b3e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024b42:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8024b46:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024b4a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8024b4e:	4454      	add	r4, sl
 8024b50:	0a1b      	lsrs	r3, r3, #8
 8024b52:	0a24      	lsrs	r4, r4, #8
 8024b54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b58:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024b5c:	431c      	orrs	r4, r3
 8024b5e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024b62:	d019      	beq.n	8024b98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8024b64:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8024b68:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024b6c:	fb08 f909 	mul.w	r9, r8, r9
 8024b70:	fb08 f800 	mul.w	r8, r8, r0
 8024b74:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8024b78:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024b7c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8024b80:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024b84:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8024b88:	4448      	add	r0, r9
 8024b8a:	0a1b      	lsrs	r3, r3, #8
 8024b8c:	0a00      	lsrs	r0, r0, #8
 8024b8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b92:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024b96:	4318      	orrs	r0, r3
 8024b98:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8024b9c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024ba0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8024ba4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024ba8:	fb0c f808 	mul.w	r8, ip, r8
 8024bac:	fb0c f606 	mul.w	r6, ip, r6
 8024bb0:	fb05 8803 	mla	r8, r5, r3, r8
 8024bb4:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8024bb8:	fb05 6202 	mla	r2, r5, r2, r6
 8024bbc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024bc0:	fb07 8803 	mla	r8, r7, r3, r8
 8024bc4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8024bc8:	fb07 2704 	mla	r7, r7, r4, r2
 8024bcc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024bd0:	fb0e 8303 	mla	r3, lr, r3, r8
 8024bd4:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8024bd8:	fb0e 7e00 	mla	lr, lr, r0, r7
 8024bdc:	9803      	ldr	r0, [sp, #12]
 8024bde:	b292      	uxth	r2, r2
 8024be0:	9c02      	ldr	r4, [sp, #8]
 8024be2:	0a1b      	lsrs	r3, r3, #8
 8024be4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024be8:	4350      	muls	r0, r2
 8024bea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024bee:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024bf2:	ea43 0e0e 	orr.w	lr, r3, lr
 8024bf6:	1c43      	adds	r3, r0, #1
 8024bf8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024bfc:	fa5f f08e 	uxtb.w	r0, lr
 8024c00:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8024c04:	b2db      	uxtb	r3, r3
 8024c06:	fb14 f403 	smulbb	r4, r4, r3
 8024c0a:	fb00 4002 	mla	r0, r0, r2, r4
 8024c0e:	b280      	uxth	r0, r0
 8024c10:	1c44      	adds	r4, r0, #1
 8024c12:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8024c16:	9c01      	ldr	r4, [sp, #4]
 8024c18:	fb14 f403 	smulbb	r4, r4, r3
 8024c1c:	1200      	asrs	r0, r0, #8
 8024c1e:	7008      	strb	r0, [r1, #0]
 8024c20:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8024c24:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8024c28:	fb00 4002 	mla	r0, r0, r2, r4
 8024c2c:	b280      	uxth	r0, r0
 8024c2e:	1c44      	adds	r4, r0, #1
 8024c30:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8024c34:	1200      	asrs	r0, r0, #8
 8024c36:	7048      	strb	r0, [r1, #1]
 8024c38:	9800      	ldr	r0, [sp, #0]
 8024c3a:	fb10 f303 	smulbb	r3, r0, r3
 8024c3e:	fb0e 3202 	mla	r2, lr, r2, r3
 8024c42:	b292      	uxth	r2, r2
 8024c44:	f102 0e01 	add.w	lr, r2, #1
 8024c48:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8024c4c:	1212      	asrs	r2, r2, #8
 8024c4e:	708a      	strb	r2, [r1, #2]
 8024c50:	b005      	add	sp, #20
 8024c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c56:	bf00      	nop
 8024c58:	0802dce5 	.word	0x0802dce5
 8024c5c:	0802e1da 	.word	0x0802e1da
 8024c60:	0802ddae 	.word	0x0802ddae

08024c64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c68:	ed2d 8b08 	vpush	{d8-d11}
 8024c6c:	b099      	sub	sp, #100	; 0x64
 8024c6e:	eeb0 aa40 	vmov.f32	s20, s0
 8024c72:	eef0 9a60 	vmov.f32	s19, s1
 8024c76:	9306      	str	r3, [sp, #24]
 8024c78:	eeb0 9a41 	vmov.f32	s18, s2
 8024c7c:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8024c80:	eeb0 8a62 	vmov.f32	s16, s5
 8024c84:	9216      	str	r2, [sp, #88]	; 0x58
 8024c86:	eef0 8a43 	vmov.f32	s17, s6
 8024c8a:	9307      	str	r3, [sp, #28]
 8024c8c:	eef0 ba44 	vmov.f32	s23, s8
 8024c90:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8024c94:	eeb0 ba64 	vmov.f32	s22, s9
 8024c98:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8024c9a:	eef0 aa45 	vmov.f32	s21, s10
 8024c9e:	9310      	str	r3, [sp, #64]	; 0x40
 8024ca0:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8024ca4:	9017      	str	r0, [sp, #92]	; 0x5c
 8024ca6:	9112      	str	r1, [sp, #72]	; 0x48
 8024ca8:	6850      	ldr	r0, [r2, #4]
 8024caa:	9315      	str	r3, [sp, #84]	; 0x54
 8024cac:	6812      	ldr	r2, [r2, #0]
 8024cae:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8024cb0:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8024cb4:	fb00 1303 	mla	r3, r0, r3, r1
 8024cb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024cbc:	18d3      	adds	r3, r2, r3
 8024cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8024cc0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024cc2:	681b      	ldr	r3, [r3, #0]
 8024cc4:	9311      	str	r3, [sp, #68]	; 0x44
 8024cc6:	9b07      	ldr	r3, [sp, #28]
 8024cc8:	009b      	lsls	r3, r3, #2
 8024cca:	930e      	str	r3, [sp, #56]	; 0x38
 8024ccc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024cce:	2b00      	cmp	r3, #0
 8024cd0:	dc03      	bgt.n	8024cda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8024cd2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024cd4:	2b00      	cmp	r3, #0
 8024cd6:	f340 833b 	ble.w	8025350 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8024cda:	9b06      	ldr	r3, [sp, #24]
 8024cdc:	2b00      	cmp	r3, #0
 8024cde:	f340 8197 	ble.w	8025010 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8024ce2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024ce4:	1423      	asrs	r3, r4, #16
 8024ce6:	1412      	asrs	r2, r2, #16
 8024ce8:	d432      	bmi.n	8024d50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8024cea:	1c51      	adds	r1, r2, #1
 8024cec:	9807      	ldr	r0, [sp, #28]
 8024cee:	4288      	cmp	r0, r1
 8024cf0:	dd31      	ble.n	8024d56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8024cf2:	2b00      	cmp	r3, #0
 8024cf4:	db2f      	blt.n	8024d56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8024cf6:	1c59      	adds	r1, r3, #1
 8024cf8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024cfa:	4288      	cmp	r0, r1
 8024cfc:	dd2b      	ble.n	8024d56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8024cfe:	9b06      	ldr	r3, [sp, #24]
 8024d00:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024d02:	3b01      	subs	r3, #1
 8024d04:	992b      	ldr	r1, [sp, #172]	; 0xac
 8024d06:	fb02 1203 	mla	r2, r2, r3, r1
 8024d0a:	1412      	asrs	r2, r2, #16
 8024d0c:	d42e      	bmi.n	8024d6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8024d0e:	3201      	adds	r2, #1
 8024d10:	9907      	ldr	r1, [sp, #28]
 8024d12:	4291      	cmp	r1, r2
 8024d14:	dd2a      	ble.n	8024d6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8024d16:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8024d18:	fb02 4303 	mla	r3, r2, r3, r4
 8024d1c:	141b      	asrs	r3, r3, #16
 8024d1e:	d425      	bmi.n	8024d6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8024d20:	3301      	adds	r3, #1
 8024d22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024d24:	429a      	cmp	r2, r3
 8024d26:	dd21      	ble.n	8024d6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8024d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024d2a:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8024d2e:	f103 0e03 	add.w	lr, r3, #3
 8024d32:	9b06      	ldr	r3, [sp, #24]
 8024d34:	9313      	str	r3, [sp, #76]	; 0x4c
 8024d36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024d38:	2b00      	cmp	r3, #0
 8024d3a:	f300 81d2 	bgt.w	80250e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8024d3e:	9b06      	ldr	r3, [sp, #24]
 8024d40:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024d46:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024d4a:	4423      	add	r3, r4
 8024d4c:	930a      	str	r3, [sp, #40]	; 0x28
 8024d4e:	e161      	b.n	8025014 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8024d50:	1c51      	adds	r1, r2, #1
 8024d52:	f040 8150 	bne.w	8024ff6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024d56:	9907      	ldr	r1, [sp, #28]
 8024d58:	428a      	cmp	r2, r1
 8024d5a:	f280 814c 	bge.w	8024ff6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024d5e:	1c5a      	adds	r2, r3, #1
 8024d60:	f2c0 8149 	blt.w	8024ff6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024d64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024d66:	4293      	cmp	r3, r2
 8024d68:	f280 8145 	bge.w	8024ff6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024d6c:	9b06      	ldr	r3, [sp, #24]
 8024d6e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8024d70:	9314      	str	r3, [sp, #80]	; 0x50
 8024d72:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8024d76:	9313      	str	r3, [sp, #76]	; 0x4c
 8024d78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024d7a:	2b00      	cmp	r3, #0
 8024d7c:	dddf      	ble.n	8024d3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8024d7e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024d80:	1423      	asrs	r3, r4, #16
 8024d82:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8024d86:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8024d8a:	1412      	asrs	r2, r2, #16
 8024d8c:	f100 8190 	bmi.w	80250b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8024d90:	1c55      	adds	r5, r2, #1
 8024d92:	9f07      	ldr	r7, [sp, #28]
 8024d94:	42af      	cmp	r7, r5
 8024d96:	f340 818d 	ble.w	80250b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8024d9a:	2b00      	cmp	r3, #0
 8024d9c:	f2c0 818a 	blt.w	80250b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8024da0:	1c5d      	adds	r5, r3, #1
 8024da2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8024da4:	42af      	cmp	r7, r5
 8024da6:	f340 8185 	ble.w	80250b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8024daa:	9d07      	ldr	r5, [sp, #28]
 8024dac:	fb03 2305 	mla	r3, r3, r5, r2
 8024db0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024db2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8024db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024dba:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024dbe:	2800      	cmp	r0, #0
 8024dc0:	f000 8167 	beq.w	8025092 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8024dc4:	686a      	ldr	r2, [r5, #4]
 8024dc6:	920b      	str	r2, [sp, #44]	; 0x2c
 8024dc8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024dcc:	2900      	cmp	r1, #0
 8024dce:	f000 8169 	beq.w	80250a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 8024dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024dd4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8024dd6:	18aa      	adds	r2, r5, r2
 8024dd8:	59ed      	ldr	r5, [r5, r7]
 8024dda:	6852      	ldr	r2, [r2, #4]
 8024ddc:	9508      	str	r5, [sp, #32]
 8024dde:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8024de2:	0e15      	lsrs	r5, r2, #24
 8024de4:	920c      	str	r2, [sp, #48]	; 0x30
 8024de6:	b280      	uxth	r0, r0
 8024de8:	b289      	uxth	r1, r1
 8024dea:	fb00 fb01 	mul.w	fp, r0, r1
 8024dee:	0100      	lsls	r0, r0, #4
 8024df0:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8024df4:	eba0 090b 	sub.w	r9, r0, fp
 8024df8:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8024dfc:	b289      	uxth	r1, r1
 8024dfe:	fa1f f989 	uxth.w	r9, r9
 8024e02:	1a52      	subs	r2, r2, r1
 8024e04:	fb09 f008 	mul.w	r0, r9, r8
 8024e08:	b292      	uxth	r2, r2
 8024e0a:	fb02 000c 	mla	r0, r2, ip, r0
 8024e0e:	fb01 000a 	mla	r0, r1, sl, r0
 8024e12:	fb0b 0005 	mla	r0, fp, r5, r0
 8024e16:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024e1a:	2800      	cmp	r0, #0
 8024e1c:	f000 80e0 	beq.w	8024fe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8024e20:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024e24:	d01b      	beq.n	8024e5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8024e26:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024e2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024e2e:	fb0c fe0e 	mul.w	lr, ip, lr
 8024e32:	fb0c fc03 	mul.w	ip, ip, r3
 8024e36:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8024e3a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024e3e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024e42:	4473      	add	r3, lr
 8024e44:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8024e48:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8024e4c:	0a1b      	lsrs	r3, r3, #8
 8024e4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024e52:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024e56:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024e5a:	ea43 030e 	orr.w	r3, r3, lr
 8024e5e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024e62:	d01e      	beq.n	8024ea2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8024e64:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024e66:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024e6a:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8024e6e:	fb08 fc0c 	mul.w	ip, r8, ip
 8024e72:	fb08 f80e 	mul.w	r8, r8, lr
 8024e76:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024e7a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024e7e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024e82:	44e6      	add	lr, ip
 8024e84:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8024e88:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8024e8c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024e90:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024e94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024e98:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024e9c:	ea4e 0708 	orr.w	r7, lr, r8
 8024ea0:	970b      	str	r7, [sp, #44]	; 0x2c
 8024ea2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024ea6:	d01e      	beq.n	8024ee6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8024ea8:	9f08      	ldr	r7, [sp, #32]
 8024eaa:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8024eae:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8024eb2:	fb0a f808 	mul.w	r8, sl, r8
 8024eb6:	fb0a fa0c 	mul.w	sl, sl, ip
 8024eba:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8024ebe:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8024ec2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024ec6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024eca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024ece:	44c6      	add	lr, r8
 8024ed0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024ed4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024ed8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024edc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024ee0:	ea4e 070a 	orr.w	r7, lr, sl
 8024ee4:	9708      	str	r7, [sp, #32]
 8024ee6:	2dff      	cmp	r5, #255	; 0xff
 8024ee8:	d01d      	beq.n	8024f26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8024eea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024eec:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8024ef0:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8024ef4:	fb05 f808 	mul.w	r8, r5, r8
 8024ef8:	fb05 f50c 	mul.w	r5, r5, ip
 8024efc:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8024f00:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8024f04:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8024f08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024f0c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8024f10:	44c6      	add	lr, r8
 8024f12:	0a2d      	lsrs	r5, r5, #8
 8024f14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024f18:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024f1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024f20:	ea4e 0505 	orr.w	r5, lr, r5
 8024f24:	950c      	str	r5, [sp, #48]	; 0x30
 8024f26:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024f28:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024f2c:	9f08      	ldr	r7, [sp, #32]
 8024f2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024f32:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024f36:	fb09 f505 	mul.w	r5, r9, r5
 8024f3a:	fb02 550c 	mla	r5, r2, ip, r5
 8024f3e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024f42:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024f44:	fb01 550c 	mla	r5, r1, ip, r5
 8024f48:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024f4c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024f4e:	fb0b 550c 	mla	r5, fp, ip, r5
 8024f52:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8024f56:	fb09 f90c 	mul.w	r9, r9, ip
 8024f5a:	0a2d      	lsrs	r5, r5, #8
 8024f5c:	fb02 9303 	mla	r3, r2, r3, r9
 8024f60:	9a08      	ldr	r2, [sp, #32]
 8024f62:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024f66:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8024f6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024f6c:	fb01 330e 	mla	r3, r1, lr, r3
 8024f70:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8024f74:	fb0b 3b01 	mla	fp, fp, r1, r3
 8024f78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024f7a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8024f7c:	4343      	muls	r3, r0
 8024f7e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024f82:	1c58      	adds	r0, r3, #1
 8024f84:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024f88:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024f8c:	ea45 050b 	orr.w	r5, r5, fp
 8024f90:	7833      	ldrb	r3, [r6, #0]
 8024f92:	b2ea      	uxtb	r2, r5
 8024f94:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024f98:	fb12 f201 	smulbb	r2, r2, r1
 8024f9c:	b2c0      	uxtb	r0, r0
 8024f9e:	fb03 2300 	mla	r3, r3, r0, r2
 8024fa2:	b29b      	uxth	r3, r3
 8024fa4:	1c5a      	adds	r2, r3, #1
 8024fa6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024faa:	7872      	ldrb	r2, [r6, #1]
 8024fac:	fb12 f200 	smulbb	r2, r2, r0
 8024fb0:	121b      	asrs	r3, r3, #8
 8024fb2:	7033      	strb	r3, [r6, #0]
 8024fb4:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8024fb8:	0c2d      	lsrs	r5, r5, #16
 8024fba:	fb03 2301 	mla	r3, r3, r1, r2
 8024fbe:	b29b      	uxth	r3, r3
 8024fc0:	1c5a      	adds	r2, r3, #1
 8024fc2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024fc6:	121b      	asrs	r3, r3, #8
 8024fc8:	7073      	strb	r3, [r6, #1]
 8024fca:	78b3      	ldrb	r3, [r6, #2]
 8024fcc:	fb13 f000 	smulbb	r0, r3, r0
 8024fd0:	fb05 0501 	mla	r5, r5, r1, r0
 8024fd4:	b2ad      	uxth	r5, r5
 8024fd6:	1c6b      	adds	r3, r5, #1
 8024fd8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024fdc:	122d      	asrs	r5, r5, #8
 8024fde:	70b5      	strb	r5, [r6, #2]
 8024fe0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024fe2:	3603      	adds	r6, #3
 8024fe4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024fe6:	4413      	add	r3, r2
 8024fe8:	932b      	str	r3, [sp, #172]	; 0xac
 8024fea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024fec:	441c      	add	r4, r3
 8024fee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024ff0:	3b01      	subs	r3, #1
 8024ff2:	9314      	str	r3, [sp, #80]	; 0x50
 8024ff4:	e6c0      	b.n	8024d78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8024ff6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024ff8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024ffa:	4413      	add	r3, r2
 8024ffc:	932b      	str	r3, [sp, #172]	; 0xac
 8024ffe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025000:	441c      	add	r4, r3
 8025002:	9b06      	ldr	r3, [sp, #24]
 8025004:	3b01      	subs	r3, #1
 8025006:	9306      	str	r3, [sp, #24]
 8025008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802500a:	3303      	adds	r3, #3
 802500c:	930a      	str	r3, [sp, #40]	; 0x28
 802500e:	e664      	b.n	8024cda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8025010:	f47f ae75 	bne.w	8024cfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8025014:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025016:	2b00      	cmp	r3, #0
 8025018:	f340 819a 	ble.w	8025350 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 802501c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025020:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025022:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025026:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802502a:	eef0 6a48 	vmov.f32	s13, s16
 802502e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025032:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025036:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802503a:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 802503e:	eef0 6a68 	vmov.f32	s13, s17
 8025042:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025046:	ee16 4a90 	vmov	r4, s13
 802504a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802504e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025052:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025056:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802505a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802505e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025062:	ee18 2a10 	vmov	r2, s16
 8025066:	eeb0 8a47 	vmov.f32	s16, s14
 802506a:	fb92 f3f3 	sdiv	r3, r2, r3
 802506e:	ee18 2a90 	vmov	r2, s17
 8025072:	932d      	str	r3, [sp, #180]	; 0xb4
 8025074:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025076:	eef0 8a67 	vmov.f32	s17, s15
 802507a:	fb92 f3f3 	sdiv	r3, r2, r3
 802507e:	932e      	str	r3, [sp, #184]	; 0xb8
 8025080:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025082:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8025084:	3b01      	subs	r3, #1
 8025086:	9312      	str	r3, [sp, #72]	; 0x48
 8025088:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802508a:	bf08      	it	eq
 802508c:	4613      	moveq	r3, r2
 802508e:	9306      	str	r3, [sp, #24]
 8025090:	e61c      	b.n	8024ccc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8025092:	b151      	cbz	r1, 80250aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8025094:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025096:	58aa      	ldr	r2, [r5, r2]
 8025098:	25ff      	movs	r5, #255	; 0xff
 802509a:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802509e:	9208      	str	r2, [sp, #32]
 80250a0:	46a8      	mov	r8, r5
 80250a2:	e6a0      	b.n	8024de6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80250a4:	25ff      	movs	r5, #255	; 0xff
 80250a6:	46aa      	mov	sl, r5
 80250a8:	e69d      	b.n	8024de6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80250aa:	25ff      	movs	r5, #255	; 0xff
 80250ac:	46aa      	mov	sl, r5
 80250ae:	e7f7      	b.n	80250a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 80250b0:	1c57      	adds	r7, r2, #1
 80250b2:	d195      	bne.n	8024fe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80250b4:	9d07      	ldr	r5, [sp, #28]
 80250b6:	4295      	cmp	r5, r2
 80250b8:	dd92      	ble.n	8024fe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80250ba:	1c5d      	adds	r5, r3, #1
 80250bc:	db90      	blt.n	8024fe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80250be:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80250c0:	429d      	cmp	r5, r3
 80250c2:	dd8d      	ble.n	8024fe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80250c4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80250c6:	9201      	str	r2, [sp, #4]
 80250c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80250ca:	e9cd 3002 	strd	r3, r0, [sp, #8]
 80250ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80250d0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80250d2:	9300      	str	r3, [sp, #0]
 80250d4:	9b07      	ldr	r3, [sp, #28]
 80250d6:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80250da:	4631      	mov	r1, r6
 80250dc:	f7ff fc68 	bl	80249b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80250e0:	e77e      	b.n	8024fe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80250e2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80250e4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80250e8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80250ea:	9d07      	ldr	r5, [sp, #28]
 80250ec:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80250f0:	1412      	asrs	r2, r2, #16
 80250f2:	1423      	asrs	r3, r4, #16
 80250f4:	fb05 2303 	mla	r3, r5, r3, r2
 80250f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80250fa:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80250fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025102:	0e1e      	lsrs	r6, r3, #24
 8025104:	2900      	cmp	r1, #0
 8025106:	f000 8114 	beq.w	8025332 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 802510a:	686a      	ldr	r2, [r5, #4]
 802510c:	920d      	str	r2, [sp, #52]	; 0x34
 802510e:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8025112:	2800      	cmp	r0, #0
 8025114:	f000 8116 	beq.w	8025344 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8025118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802511a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802511c:	18aa      	adds	r2, r5, r2
 802511e:	59ed      	ldr	r5, [r5, r7]
 8025120:	6852      	ldr	r2, [r2, #4]
 8025122:	9509      	str	r5, [sp, #36]	; 0x24
 8025124:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8025128:	0e15      	lsrs	r5, r2, #24
 802512a:	920f      	str	r2, [sp, #60]	; 0x3c
 802512c:	b289      	uxth	r1, r1
 802512e:	b280      	uxth	r0, r0
 8025130:	fb01 fa00 	mul.w	sl, r1, r0
 8025134:	0109      	lsls	r1, r1, #4
 8025136:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802513a:	eba1 080a 	sub.w	r8, r1, sl
 802513e:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8025142:	b280      	uxth	r0, r0
 8025144:	fa1f f888 	uxth.w	r8, r8
 8025148:	1a12      	subs	r2, r2, r0
 802514a:	fb08 f10c 	mul.w	r1, r8, ip
 802514e:	b292      	uxth	r2, r2
 8025150:	fb02 1106 	mla	r1, r2, r6, r1
 8025154:	fb00 1109 	mla	r1, r0, r9, r1
 8025158:	fb0a 1105 	mla	r1, sl, r5, r1
 802515c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025160:	2900      	cmp	r1, #0
 8025162:	f000 80da 	beq.w	802531a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8025166:	2eff      	cmp	r6, #255	; 0xff
 8025168:	d016      	beq.n	8025198 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 802516a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802516e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025172:	4377      	muls	r7, r6
 8025174:	435e      	muls	r6, r3
 8025176:	0a3b      	lsrs	r3, r7, #8
 8025178:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802517c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025180:	443b      	add	r3, r7
 8025182:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8025186:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802518a:	0a1b      	lsrs	r3, r3, #8
 802518c:	0a3f      	lsrs	r7, r7, #8
 802518e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025192:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025196:	433b      	orrs	r3, r7
 8025198:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802519c:	d01d      	beq.n	80251da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 802519e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80251a0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80251a2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80251a6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80251aa:	fb0c f606 	mul.w	r6, ip, r6
 80251ae:	fb0c fc07 	mul.w	ip, ip, r7
 80251b2:	0a37      	lsrs	r7, r6, #8
 80251b4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80251b8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80251bc:	4437      	add	r7, r6
 80251be:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 80251c2:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80251c6:	0a3f      	lsrs	r7, r7, #8
 80251c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80251cc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80251d0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80251d4:	ea47 060c 	orr.w	r6, r7, ip
 80251d8:	960d      	str	r6, [sp, #52]	; 0x34
 80251da:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80251de:	d01d      	beq.n	802521c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 80251e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80251e2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80251e6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80251ea:	fb09 fc0c 	mul.w	ip, r9, ip
 80251ee:	fb09 f906 	mul.w	r9, r9, r6
 80251f2:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80251f6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80251fa:	f509 7680 	add.w	r6, r9, #256	; 0x100
 80251fe:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025202:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8025206:	4467      	add	r7, ip
 8025208:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802520c:	0a3f      	lsrs	r7, r7, #8
 802520e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025212:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025216:	ea47 0609 	orr.w	r6, r7, r9
 802521a:	9609      	str	r6, [sp, #36]	; 0x24
 802521c:	2dff      	cmp	r5, #255	; 0xff
 802521e:	d01a      	beq.n	8025256 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8025220:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8025222:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8025226:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802522a:	fb05 fc0c 	mul.w	ip, r5, ip
 802522e:	4375      	muls	r5, r6
 8025230:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8025234:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025238:	f505 7680 	add.w	r6, r5, #256	; 0x100
 802523c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025240:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8025244:	4467      	add	r7, ip
 8025246:	0a2d      	lsrs	r5, r5, #8
 8025248:	0a3f      	lsrs	r7, r7, #8
 802524a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802524e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025252:	433d      	orrs	r5, r7
 8025254:	950f      	str	r5, [sp, #60]	; 0x3c
 8025256:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025258:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802525c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025260:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025264:	fb08 f505 	mul.w	r5, r8, r5
 8025268:	fb02 5506 	mla	r5, r2, r6, r5
 802526c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802526e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025272:	fb00 5506 	mla	r5, r0, r6, r5
 8025276:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8025278:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802527c:	fb0a 5506 	mla	r5, sl, r6, r5
 8025280:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8025282:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025286:	0a2d      	lsrs	r5, r5, #8
 8025288:	fb08 f806 	mul.w	r8, r8, r6
 802528c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025290:	fb02 8303 	mla	r3, r2, r3, r8
 8025294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025296:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 802529a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802529c:	fb00 3307 	mla	r3, r0, r7, r3
 80252a0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80252a4:	fb0a 3c0c 	mla	ip, sl, ip, r3
 80252a8:	fb01 f30b 	mul.w	r3, r1, fp
 80252ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80252b0:	1c59      	adds	r1, r3, #1
 80252b2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80252b6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80252ba:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80252be:	ea45 050c 	orr.w	r5, r5, ip
 80252c2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80252c6:	b2ea      	uxtb	r2, r5
 80252c8:	b2c9      	uxtb	r1, r1
 80252ca:	fb12 f20b 	smulbb	r2, r2, fp
 80252ce:	fb03 2301 	mla	r3, r3, r1, r2
 80252d2:	b29b      	uxth	r3, r3
 80252d4:	1c5a      	adds	r2, r3, #1
 80252d6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80252da:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80252de:	fb12 f201 	smulbb	r2, r2, r1
 80252e2:	121b      	asrs	r3, r3, #8
 80252e4:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80252e8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80252ec:	0c2d      	lsrs	r5, r5, #16
 80252ee:	fb03 230b 	mla	r3, r3, fp, r2
 80252f2:	b29b      	uxth	r3, r3
 80252f4:	1c5a      	adds	r2, r3, #1
 80252f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80252fa:	121b      	asrs	r3, r3, #8
 80252fc:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8025300:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8025304:	fb13 f101 	smulbb	r1, r3, r1
 8025308:	fb05 150b 	mla	r5, r5, fp, r1
 802530c:	b2ad      	uxth	r5, r5
 802530e:	1c69      	adds	r1, r5, #1
 8025310:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8025314:	122d      	asrs	r5, r5, #8
 8025316:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802531a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802531c:	f10e 0e03 	add.w	lr, lr, #3
 8025320:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025322:	4413      	add	r3, r2
 8025324:	932b      	str	r3, [sp, #172]	; 0xac
 8025326:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025328:	441c      	add	r4, r3
 802532a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802532c:	3b01      	subs	r3, #1
 802532e:	9313      	str	r3, [sp, #76]	; 0x4c
 8025330:	e501      	b.n	8024d36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8025332:	b150      	cbz	r0, 802534a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8025334:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025336:	58aa      	ldr	r2, [r5, r2]
 8025338:	25ff      	movs	r5, #255	; 0xff
 802533a:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802533e:	9209      	str	r2, [sp, #36]	; 0x24
 8025340:	46ac      	mov	ip, r5
 8025342:	e6f3      	b.n	802512c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8025344:	25ff      	movs	r5, #255	; 0xff
 8025346:	46a9      	mov	r9, r5
 8025348:	e6f0      	b.n	802512c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 802534a:	25ff      	movs	r5, #255	; 0xff
 802534c:	46a9      	mov	r9, r5
 802534e:	e7f7      	b.n	8025340 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8025350:	b019      	add	sp, #100	; 0x64
 8025352:	ecbd 8b08 	vpop	{d8-d11}
 8025356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802535c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 802535c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025360:	b085      	sub	sp, #20
 8025362:	7888      	ldrb	r0, [r1, #2]
 8025364:	4691      	mov	r9, r2
 8025366:	9000      	str	r0, [sp, #0]
 8025368:	7848      	ldrb	r0, [r1, #1]
 802536a:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802536e:	9001      	str	r0, [sp, #4]
 8025370:	7808      	ldrb	r0, [r1, #0]
 8025372:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8025376:	9002      	str	r0, [sp, #8]
 8025378:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802537c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8025380:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8025384:	fb04 c603 	mla	r6, r4, r3, ip
 8025388:	2c00      	cmp	r4, #0
 802538a:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802538e:	9a00      	ldr	r2, [sp, #0]
 8025390:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8025394:	9a01      	ldr	r2, [sp, #4]
 8025396:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 802539a:	db3a      	blt.n	8025412 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 802539c:	45a0      	cmp	r8, r4
 802539e:	dd38      	ble.n	8025412 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80253a0:	f1bc 0f00 	cmp.w	ip, #0
 80253a4:	db33      	blt.n	802540e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80253a6:	4563      	cmp	r3, ip
 80253a8:	dd31      	ble.n	802540e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80253aa:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80253ae:	f11c 0601 	adds.w	r6, ip, #1
 80253b2:	d431      	bmi.n	8025418 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80253b4:	42b3      	cmp	r3, r6
 80253b6:	dd2f      	ble.n	8025418 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80253b8:	b375      	cbz	r5, 8025418 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80253ba:	f8de 6004 	ldr.w	r6, [lr, #4]
 80253be:	3401      	adds	r4, #1
 80253c0:	d42e      	bmi.n	8025420 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80253c2:	45a0      	cmp	r8, r4
 80253c4:	dd2c      	ble.n	8025420 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80253c6:	b35f      	cbz	r7, 8025420 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80253c8:	f1bc 0f00 	cmp.w	ip, #0
 80253cc:	db26      	blt.n	802541c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 80253ce:	4563      	cmp	r3, ip
 80253d0:	dd24      	ble.n	802541c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 80253d2:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 80253d6:	f11c 0c01 	adds.w	ip, ip, #1
 80253da:	d405      	bmi.n	80253e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80253dc:	4563      	cmp	r3, ip
 80253de:	dd03      	ble.n	80253e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80253e0:	b115      	cbz	r5, 80253e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80253e2:	3301      	adds	r3, #1
 80253e4:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80253e8:	2d0f      	cmp	r5, #15
 80253ea:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80253ee:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80253f2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80253f6:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80253fa:	d801      	bhi.n	8025400 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 80253fc:	2f0f      	cmp	r7, #15
 80253fe:	d911      	bls.n	8025424 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8025400:	4b77      	ldr	r3, [pc, #476]	; (80255e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8025402:	f240 11a5 	movw	r1, #421	; 0x1a5
 8025406:	4a77      	ldr	r2, [pc, #476]	; (80255e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8025408:	4877      	ldr	r0, [pc, #476]	; (80255e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 802540a:	f003 f83b 	bl	8028484 <__assert_func>
 802540e:	4602      	mov	r2, r0
 8025410:	e7cd      	b.n	80253ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8025412:	4606      	mov	r6, r0
 8025414:	4602      	mov	r2, r0
 8025416:	e7d2      	b.n	80253be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8025418:	4606      	mov	r6, r0
 802541a:	e7d0      	b.n	80253be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 802541c:	4604      	mov	r4, r0
 802541e:	e7da      	b.n	80253d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8025420:	4604      	mov	r4, r0
 8025422:	e7e1      	b.n	80253e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8025424:	b2ab      	uxth	r3, r5
 8025426:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802542a:	b2bf      	uxth	r7, r7
 802542c:	fb03 fe07 	mul.w	lr, r3, r7
 8025430:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8025434:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8025438:	eba3 0c0e 	sub.w	ip, r3, lr
 802543c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8025440:	b2bf      	uxth	r7, r7
 8025442:	fa1f fc8c 	uxth.w	ip, ip
 8025446:	eba5 0507 	sub.w	r5, r5, r7
 802544a:	fb0c f30a 	mul.w	r3, ip, sl
 802544e:	b2ad      	uxth	r5, r5
 8025450:	fb05 330b 	mla	r3, r5, fp, r3
 8025454:	fb07 3309 	mla	r3, r7, r9, r3
 8025458:	fb0e 3308 	mla	r3, lr, r8, r3
 802545c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025460:	9303      	str	r3, [sp, #12]
 8025462:	d018      	beq.n	8025496 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8025464:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025468:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802546c:	fb0b f303 	mul.w	r3, fp, r3
 8025470:	fb0b fb02 	mul.w	fp, fp, r2
 8025474:	0a1a      	lsrs	r2, r3, #8
 8025476:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802547a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802547e:	441a      	add	r2, r3
 8025480:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8025484:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8025488:	0a12      	lsrs	r2, r2, #8
 802548a:	0a1b      	lsrs	r3, r3, #8
 802548c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025490:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025494:	431a      	orrs	r2, r3
 8025496:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802549a:	d019      	beq.n	80254d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 802549c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80254a0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80254a4:	fb0a fb0b 	mul.w	fp, sl, fp
 80254a8:	fb0a fa06 	mul.w	sl, sl, r6
 80254ac:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80254b0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80254b4:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80254b8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80254bc:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80254c0:	445e      	add	r6, fp
 80254c2:	0a1b      	lsrs	r3, r3, #8
 80254c4:	0a36      	lsrs	r6, r6, #8
 80254c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80254ca:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80254ce:	431e      	orrs	r6, r3
 80254d0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80254d4:	d019      	beq.n	802550a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 80254d6:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80254da:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80254de:	fb09 fa0a 	mul.w	sl, r9, sl
 80254e2:	fb09 f904 	mul.w	r9, r9, r4
 80254e6:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80254ea:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80254ee:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80254f2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80254f6:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80254fa:	4454      	add	r4, sl
 80254fc:	0a1b      	lsrs	r3, r3, #8
 80254fe:	0a24      	lsrs	r4, r4, #8
 8025500:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025504:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025508:	431c      	orrs	r4, r3
 802550a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802550e:	d019      	beq.n	8025544 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8025510:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8025514:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025518:	fb08 f909 	mul.w	r9, r8, r9
 802551c:	fb08 f800 	mul.w	r8, r8, r0
 8025520:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8025524:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8025528:	f508 7380 	add.w	r3, r8, #256	; 0x100
 802552c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025530:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8025534:	4448      	add	r0, r9
 8025536:	0a1b      	lsrs	r3, r3, #8
 8025538:	0a00      	lsrs	r0, r0, #8
 802553a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802553e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025542:	4318      	orrs	r0, r3
 8025544:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8025548:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802554c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025550:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025554:	fb0c f808 	mul.w	r8, ip, r8
 8025558:	fb0c f606 	mul.w	r6, ip, r6
 802555c:	fb05 8803 	mla	r8, r5, r3, r8
 8025560:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8025564:	fb05 6202 	mla	r2, r5, r2, r6
 8025568:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802556c:	fb07 8803 	mla	r8, r7, r3, r8
 8025570:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8025574:	fb07 2704 	mla	r7, r7, r4, r2
 8025578:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802557c:	fb0e 8303 	mla	r3, lr, r3, r8
 8025580:	fb0e 7e00 	mla	lr, lr, r0, r7
 8025584:	9802      	ldr	r0, [sp, #8]
 8025586:	0a1b      	lsrs	r3, r3, #8
 8025588:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802558c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025590:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025594:	ea43 0e0e 	orr.w	lr, r3, lr
 8025598:	9b03      	ldr	r3, [sp, #12]
 802559a:	43db      	mvns	r3, r3
 802559c:	b2db      	uxtb	r3, r3
 802559e:	4358      	muls	r0, r3
 80255a0:	1c42      	adds	r2, r0, #1
 80255a2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80255a6:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80255aa:	700a      	strb	r2, [r1, #0]
 80255ac:	9a01      	ldr	r2, [sp, #4]
 80255ae:	435a      	muls	r2, r3
 80255b0:	1c50      	adds	r0, r2, #1
 80255b2:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80255b6:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80255ba:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80255be:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80255c2:	704a      	strb	r2, [r1, #1]
 80255c4:	9a00      	ldr	r2, [sp, #0]
 80255c6:	435a      	muls	r2, r3
 80255c8:	4613      	mov	r3, r2
 80255ca:	3201      	adds	r2, #1
 80255cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80255d0:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80255d4:	f881 e002 	strb.w	lr, [r1, #2]
 80255d8:	b005      	add	sp, #20
 80255da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255de:	bf00      	nop
 80255e0:	0802dce5 	.word	0x0802dce5
 80255e4:	0802e1da 	.word	0x0802e1da
 80255e8:	0802ddae 	.word	0x0802ddae

080255ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80255ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255f0:	ed2d 8b08 	vpush	{d8-d11}
 80255f4:	b097      	sub	sp, #92	; 0x5c
 80255f6:	eeb0 aa40 	vmov.f32	s20, s0
 80255fa:	eef0 9a60 	vmov.f32	s19, s1
 80255fe:	9306      	str	r3, [sp, #24]
 8025600:	eeb0 9a41 	vmov.f32	s18, s2
 8025604:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8025608:	eeb0 8a62 	vmov.f32	s16, s5
 802560c:	9214      	str	r2, [sp, #80]	; 0x50
 802560e:	eef0 8a43 	vmov.f32	s17, s6
 8025612:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025614:	eef0 ba44 	vmov.f32	s23, s8
 8025618:	9307      	str	r3, [sp, #28]
 802561a:	eeb0 ba64 	vmov.f32	s22, s9
 802561e:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8025622:	eef0 aa45 	vmov.f32	s21, s10
 8025626:	9015      	str	r0, [sp, #84]	; 0x54
 8025628:	9112      	str	r1, [sp, #72]	; 0x48
 802562a:	6850      	ldr	r0, [r2, #4]
 802562c:	9310      	str	r3, [sp, #64]	; 0x40
 802562e:	6812      	ldr	r2, [r2, #0]
 8025630:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8025632:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025636:	fb00 1303 	mla	r3, r0, r3, r1
 802563a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802563e:	18d3      	adds	r3, r2, r3
 8025640:	930a      	str	r3, [sp, #40]	; 0x28
 8025642:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8025644:	681b      	ldr	r3, [r3, #0]
 8025646:	9311      	str	r3, [sp, #68]	; 0x44
 8025648:	9b07      	ldr	r3, [sp, #28]
 802564a:	009b      	lsls	r3, r3, #2
 802564c:	930e      	str	r3, [sp, #56]	; 0x38
 802564e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025650:	2b00      	cmp	r3, #0
 8025652:	dc03      	bgt.n	802565c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8025654:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025656:	2b00      	cmp	r3, #0
 8025658:	f340 832e 	ble.w	8025cb8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 802565c:	9b06      	ldr	r3, [sp, #24]
 802565e:	2b00      	cmp	r3, #0
 8025660:	f340 8186 	ble.w	8025970 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 8025664:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025666:	1423      	asrs	r3, r4, #16
 8025668:	1412      	asrs	r2, r2, #16
 802566a:	d42f      	bmi.n	80256cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 802566c:	1c51      	adds	r1, r2, #1
 802566e:	9807      	ldr	r0, [sp, #28]
 8025670:	4288      	cmp	r0, r1
 8025672:	dd2e      	ble.n	80256d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8025674:	2b00      	cmp	r3, #0
 8025676:	db2c      	blt.n	80256d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8025678:	1c59      	adds	r1, r3, #1
 802567a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802567c:	4288      	cmp	r0, r1
 802567e:	dd28      	ble.n	80256d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8025680:	9b06      	ldr	r3, [sp, #24]
 8025682:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025684:	3b01      	subs	r3, #1
 8025686:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8025688:	fb02 1203 	mla	r2, r2, r3, r1
 802568c:	1412      	asrs	r2, r2, #16
 802568e:	d42b      	bmi.n	80256e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8025690:	3201      	adds	r2, #1
 8025692:	9907      	ldr	r1, [sp, #28]
 8025694:	4291      	cmp	r1, r2
 8025696:	dd27      	ble.n	80256e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8025698:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802569a:	fb02 4303 	mla	r3, r2, r3, r4
 802569e:	141b      	asrs	r3, r3, #16
 80256a0:	d422      	bmi.n	80256e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80256a2:	3301      	adds	r3, #1
 80256a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80256a6:	429a      	cmp	r2, r3
 80256a8:	dd1e      	ble.n	80256e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80256aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80256ac:	f8dd b018 	ldr.w	fp, [sp, #24]
 80256b0:	1cdd      	adds	r5, r3, #3
 80256b2:	f1bb 0f00 	cmp.w	fp, #0
 80256b6:	f300 81c4 	bgt.w	8025a42 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 80256ba:	9b06      	ldr	r3, [sp, #24]
 80256bc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80256c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80256c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80256c6:	4423      	add	r3, r4
 80256c8:	930a      	str	r3, [sp, #40]	; 0x28
 80256ca:	e153      	b.n	8025974 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 80256cc:	1c51      	adds	r1, r2, #1
 80256ce:	f040 8142 	bne.w	8025956 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80256d2:	9907      	ldr	r1, [sp, #28]
 80256d4:	428a      	cmp	r2, r1
 80256d6:	f280 813e 	bge.w	8025956 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80256da:	1c5a      	adds	r2, r3, #1
 80256dc:	f2c0 813b 	blt.w	8025956 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80256e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80256e2:	4293      	cmp	r3, r2
 80256e4:	f280 8137 	bge.w	8025956 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80256e8:	9b06      	ldr	r3, [sp, #24]
 80256ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80256ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80256ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80256f0:	2b00      	cmp	r3, #0
 80256f2:	dde2      	ble.n	80256ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 80256f4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80256f6:	1423      	asrs	r3, r4, #16
 80256f8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80256fa:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80256fe:	1409      	asrs	r1, r1, #16
 8025700:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8025704:	f100 8187 	bmi.w	8025a16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8025708:	1c4e      	adds	r6, r1, #1
 802570a:	9f07      	ldr	r7, [sp, #28]
 802570c:	42b7      	cmp	r7, r6
 802570e:	f340 8184 	ble.w	8025a1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8025712:	2b00      	cmp	r3, #0
 8025714:	f2c0 8181 	blt.w	8025a1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8025718:	1c5e      	adds	r6, r3, #1
 802571a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802571c:	42b7      	cmp	r7, r6
 802571e:	f340 817c 	ble.w	8025a1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8025722:	9e07      	ldr	r6, [sp, #28]
 8025724:	fb03 1306 	mla	r3, r3, r6, r1
 8025728:	9911      	ldr	r1, [sp, #68]	; 0x44
 802572a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 802572e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8025732:	0e1f      	lsrs	r7, r3, #24
 8025734:	2a00      	cmp	r2, #0
 8025736:	f000 815c 	beq.w	80259f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 802573a:	6871      	ldr	r1, [r6, #4]
 802573c:	910b      	str	r1, [sp, #44]	; 0x2c
 802573e:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8025742:	2800      	cmp	r0, #0
 8025744:	f000 815e 	beq.w	8025a04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8025748:	990e      	ldr	r1, [sp, #56]	; 0x38
 802574a:	eb06 0c01 	add.w	ip, r6, r1
 802574e:	5876      	ldr	r6, [r6, r1]
 8025750:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8025754:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8025758:	9608      	str	r6, [sp, #32]
 802575a:	0e0e      	lsrs	r6, r1, #24
 802575c:	910c      	str	r1, [sp, #48]	; 0x30
 802575e:	b292      	uxth	r2, r2
 8025760:	b280      	uxth	r0, r0
 8025762:	fb02 fa00 	mul.w	sl, r2, r0
 8025766:	0112      	lsls	r2, r2, #4
 8025768:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802576c:	eba2 080a 	sub.w	r8, r2, sl
 8025770:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025774:	b280      	uxth	r0, r0
 8025776:	fa1f f888 	uxth.w	r8, r8
 802577a:	1a09      	subs	r1, r1, r0
 802577c:	fb08 f20e 	mul.w	r2, r8, lr
 8025780:	b289      	uxth	r1, r1
 8025782:	fb01 2207 	mla	r2, r1, r7, r2
 8025786:	fb00 2209 	mla	r2, r0, r9, r2
 802578a:	fb0a 2206 	mla	r2, sl, r6, r2
 802578e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025792:	2a00      	cmp	r2, #0
 8025794:	f000 80d4 	beq.w	8025940 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025798:	2fff      	cmp	r7, #255	; 0xff
 802579a:	d01a      	beq.n	80257d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 802579c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80257a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80257a4:	fb07 fc0c 	mul.w	ip, r7, ip
 80257a8:	435f      	muls	r7, r3
 80257aa:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80257ae:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80257b2:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80257b6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80257ba:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80257be:	4463      	add	r3, ip
 80257c0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80257c4:	0a1b      	lsrs	r3, r3, #8
 80257c6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80257ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80257ce:	ea43 030b 	orr.w	r3, r3, fp
 80257d2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80257d6:	d01e      	beq.n	8025816 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 80257d8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80257da:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 80257de:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80257e2:	fb0e fb0b 	mul.w	fp, lr, fp
 80257e6:	fb0e fe07 	mul.w	lr, lr, r7
 80257ea:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80257ee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80257f2:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80257f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80257fa:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80257fe:	44dc      	add	ip, fp
 8025800:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025804:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025808:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802580c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025810:	ea4c 070e 	orr.w	r7, ip, lr
 8025814:	970b      	str	r7, [sp, #44]	; 0x2c
 8025816:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802581a:	d01e      	beq.n	802585a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802581c:	9f08      	ldr	r7, [sp, #32]
 802581e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025822:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025826:	fb09 fe0e 	mul.w	lr, r9, lr
 802582a:	fb09 f907 	mul.w	r9, r9, r7
 802582e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025832:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025836:	f509 7780 	add.w	r7, r9, #256	; 0x100
 802583a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802583e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8025842:	44f4      	add	ip, lr
 8025844:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025848:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802584c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025850:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025854:	ea4c 0709 	orr.w	r7, ip, r9
 8025858:	9708      	str	r7, [sp, #32]
 802585a:	2eff      	cmp	r6, #255	; 0xff
 802585c:	d01c      	beq.n	8025898 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 802585e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8025860:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025864:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025868:	fb06 fe0e 	mul.w	lr, r6, lr
 802586c:	437e      	muls	r6, r7
 802586e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025872:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025876:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802587a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802587e:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8025882:	44f4      	add	ip, lr
 8025884:	0a36      	lsrs	r6, r6, #8
 8025886:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802588a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802588e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025892:	ea4c 0606 	orr.w	r6, ip, r6
 8025896:	960c      	str	r6, [sp, #48]	; 0x30
 8025898:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802589a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802589e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80258a2:	2aff      	cmp	r2, #255	; 0xff
 80258a4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80258a8:	fb08 f606 	mul.w	r6, r8, r6
 80258ac:	fb01 6607 	mla	r6, r1, r7, r6
 80258b0:	9f08      	ldr	r7, [sp, #32]
 80258b2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80258b6:	fb00 6607 	mla	r6, r0, r7, r6
 80258ba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80258bc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80258c0:	fb0a 6607 	mla	r6, sl, r7, r6
 80258c4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80258c6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80258ca:	ea4f 2616 	mov.w	r6, r6, lsr #8
 80258ce:	fb08 f807 	mul.w	r8, r8, r7
 80258d2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80258d6:	fb01 8303 	mla	r3, r1, r3, r8
 80258da:	9908      	ldr	r1, [sp, #32]
 80258dc:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80258e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80258e2:	fb00 330c 	mla	r3, r0, ip, r3
 80258e6:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80258ea:	fb0a 3a00 	mla	sl, sl, r0, r3
 80258ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80258f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80258f6:	ea46 060a 	orr.w	r6, r6, sl
 80258fa:	b2f0      	uxtb	r0, r6
 80258fc:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8025900:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8025904:	f000 8084 	beq.w	8025a10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8025908:	43d2      	mvns	r2, r2
 802590a:	782b      	ldrb	r3, [r5, #0]
 802590c:	b2d2      	uxtb	r2, r2
 802590e:	fb03 f702 	mul.w	r7, r3, r2
 8025912:	1c7b      	adds	r3, r7, #1
 8025914:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8025918:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802591c:	702b      	strb	r3, [r5, #0]
 802591e:	786b      	ldrb	r3, [r5, #1]
 8025920:	fb03 f002 	mul.w	r0, r3, r2
 8025924:	1c43      	adds	r3, r0, #1
 8025926:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802592a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802592e:	706b      	strb	r3, [r5, #1]
 8025930:	78ab      	ldrb	r3, [r5, #2]
 8025932:	4353      	muls	r3, r2
 8025934:	1c5a      	adds	r2, r3, #1
 8025936:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802593a:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802593e:	70ae      	strb	r6, [r5, #2]
 8025940:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025942:	3503      	adds	r5, #3
 8025944:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025946:	4413      	add	r3, r2
 8025948:	9329      	str	r3, [sp, #164]	; 0xa4
 802594a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802594c:	441c      	add	r4, r3
 802594e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025950:	3b01      	subs	r3, #1
 8025952:	9313      	str	r3, [sp, #76]	; 0x4c
 8025954:	e6cb      	b.n	80256ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8025956:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025958:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802595a:	4413      	add	r3, r2
 802595c:	9329      	str	r3, [sp, #164]	; 0xa4
 802595e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025960:	441c      	add	r4, r3
 8025962:	9b06      	ldr	r3, [sp, #24]
 8025964:	3b01      	subs	r3, #1
 8025966:	9306      	str	r3, [sp, #24]
 8025968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802596a:	3303      	adds	r3, #3
 802596c:	930a      	str	r3, [sp, #40]	; 0x28
 802596e:	e675      	b.n	802565c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8025970:	f47f ae86 	bne.w	8025680 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8025974:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025976:	2b00      	cmp	r3, #0
 8025978:	f340 819e 	ble.w	8025cb8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 802597c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025980:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025982:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025986:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802598a:	eef0 6a48 	vmov.f32	s13, s16
 802598e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025992:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025996:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802599a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802599e:	eef0 6a68 	vmov.f32	s13, s17
 80259a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80259a6:	ee16 4a90 	vmov	r4, s13
 80259aa:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80259ae:	ee69 7a27 	vmul.f32	s15, s18, s15
 80259b2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80259b6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80259ba:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80259be:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80259c2:	ee18 2a10 	vmov	r2, s16
 80259c6:	eeb0 8a47 	vmov.f32	s16, s14
 80259ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80259ce:	ee18 2a90 	vmov	r2, s17
 80259d2:	932b      	str	r3, [sp, #172]	; 0xac
 80259d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80259d6:	eef0 8a67 	vmov.f32	s17, s15
 80259da:	fb92 f3f3 	sdiv	r3, r2, r3
 80259de:	932c      	str	r3, [sp, #176]	; 0xb0
 80259e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80259e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80259e4:	3b01      	subs	r3, #1
 80259e6:	9312      	str	r3, [sp, #72]	; 0x48
 80259e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80259ea:	bf08      	it	eq
 80259ec:	4613      	moveq	r3, r2
 80259ee:	9306      	str	r3, [sp, #24]
 80259f0:	e62d      	b.n	802564e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 80259f2:	b150      	cbz	r0, 8025a0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 80259f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80259f6:	5871      	ldr	r1, [r6, r1]
 80259f8:	26ff      	movs	r6, #255	; 0xff
 80259fa:	ea4f 6911 	mov.w	r9, r1, lsr #24
 80259fe:	9108      	str	r1, [sp, #32]
 8025a00:	46b6      	mov	lr, r6
 8025a02:	e6ac      	b.n	802575e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8025a04:	26ff      	movs	r6, #255	; 0xff
 8025a06:	46b1      	mov	r9, r6
 8025a08:	e6a9      	b.n	802575e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8025a0a:	26ff      	movs	r6, #255	; 0xff
 8025a0c:	46b1      	mov	r9, r6
 8025a0e:	e7f7      	b.n	8025a00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8025a10:	7028      	strb	r0, [r5, #0]
 8025a12:	7069      	strb	r1, [r5, #1]
 8025a14:	e793      	b.n	802593e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8025a16:	1c4f      	adds	r7, r1, #1
 8025a18:	d192      	bne.n	8025940 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025a1a:	9e07      	ldr	r6, [sp, #28]
 8025a1c:	428e      	cmp	r6, r1
 8025a1e:	dd8f      	ble.n	8025940 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025a20:	1c5e      	adds	r6, r3, #1
 8025a22:	db8d      	blt.n	8025940 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025a24:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8025a26:	429e      	cmp	r6, r3
 8025a28:	dd8a      	ble.n	8025940 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025a2a:	9600      	str	r6, [sp, #0]
 8025a2c:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8025a30:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8025a34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025a36:	4629      	mov	r1, r5
 8025a38:	9b07      	ldr	r3, [sp, #28]
 8025a3a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025a3c:	f7ff fc8e 	bl	802535c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8025a40:	e77e      	b.n	8025940 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025a42:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025a44:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025a48:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8025a4a:	9e07      	ldr	r6, [sp, #28]
 8025a4c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025a50:	1409      	asrs	r1, r1, #16
 8025a52:	1423      	asrs	r3, r4, #16
 8025a54:	fb06 1303 	mla	r3, r6, r3, r1
 8025a58:	9911      	ldr	r1, [sp, #68]	; 0x44
 8025a5a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8025a5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8025a62:	0e1f      	lsrs	r7, r3, #24
 8025a64:	2a00      	cmp	r2, #0
 8025a66:	f000 8113 	beq.w	8025c90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8025a6a:	6871      	ldr	r1, [r6, #4]
 8025a6c:	910d      	str	r1, [sp, #52]	; 0x34
 8025a6e:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8025a72:	2800      	cmp	r0, #0
 8025a74:	f000 8115 	beq.w	8025ca2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8025a78:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025a7a:	eb06 0c01 	add.w	ip, r6, r1
 8025a7e:	5876      	ldr	r6, [r6, r1]
 8025a80:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8025a84:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8025a88:	9609      	str	r6, [sp, #36]	; 0x24
 8025a8a:	0e0e      	lsrs	r6, r1, #24
 8025a8c:	910f      	str	r1, [sp, #60]	; 0x3c
 8025a8e:	b292      	uxth	r2, r2
 8025a90:	b280      	uxth	r0, r0
 8025a92:	fb02 fa00 	mul.w	sl, r2, r0
 8025a96:	0112      	lsls	r2, r2, #4
 8025a98:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8025a9c:	eba2 080a 	sub.w	r8, r2, sl
 8025aa0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025aa4:	b280      	uxth	r0, r0
 8025aa6:	fa1f f888 	uxth.w	r8, r8
 8025aaa:	1a09      	subs	r1, r1, r0
 8025aac:	fb08 f20e 	mul.w	r2, r8, lr
 8025ab0:	b289      	uxth	r1, r1
 8025ab2:	fb01 2207 	mla	r2, r1, r7, r2
 8025ab6:	fb00 2209 	mla	r2, r0, r9, r2
 8025aba:	fb0a 2206 	mla	r2, sl, r6, r2
 8025abe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025ac2:	2a00      	cmp	r2, #0
 8025ac4:	f000 80da 	beq.w	8025c7c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8025ac8:	2fff      	cmp	r7, #255	; 0xff
 8025aca:	d01a      	beq.n	8025b02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8025acc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025ad0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025ad4:	fb07 fc0c 	mul.w	ip, r7, ip
 8025ad8:	435f      	muls	r7, r3
 8025ada:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025ade:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025ae2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025ae6:	4463      	add	r3, ip
 8025ae8:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8025aec:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8025af0:	0a1b      	lsrs	r3, r3, #8
 8025af2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025af6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025afa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025afe:	ea43 030c 	orr.w	r3, r3, ip
 8025b02:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025b06:	d021      	beq.n	8025b4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8025b08:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8025b0a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025b0e:	fb0e f707 	mul.w	r7, lr, r7
 8025b12:	9713      	str	r7, [sp, #76]	; 0x4c
 8025b14:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8025b16:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8025b1a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8025b1c:	fb0e fe0c 	mul.w	lr, lr, ip
 8025b20:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025b24:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025b28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b2c:	44bc      	add	ip, r7
 8025b2e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8025b32:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8025b36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b3a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025b3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b42:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025b46:	ea4c 070e 	orr.w	r7, ip, lr
 8025b4a:	970d      	str	r7, [sp, #52]	; 0x34
 8025b4c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025b50:	d01e      	beq.n	8025b90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8025b52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025b54:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025b58:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025b5c:	fb09 fe0e 	mul.w	lr, r9, lr
 8025b60:	fb09 f907 	mul.w	r9, r9, r7
 8025b64:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025b68:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025b6c:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8025b70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b74:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8025b78:	44f4      	add	ip, lr
 8025b7a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025b7e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b82:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025b86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b8a:	ea4c 0709 	orr.w	r7, ip, r9
 8025b8e:	9709      	str	r7, [sp, #36]	; 0x24
 8025b90:	2eff      	cmp	r6, #255	; 0xff
 8025b92:	d01c      	beq.n	8025bce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8025b94:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025b96:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025b9a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025b9e:	fb06 fe0e 	mul.w	lr, r6, lr
 8025ba2:	437e      	muls	r6, r7
 8025ba4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025ba8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025bac:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8025bb0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025bb4:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8025bb8:	44f4      	add	ip, lr
 8025bba:	0a36      	lsrs	r6, r6, #8
 8025bbc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025bc0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025bc4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025bc8:	ea4c 0606 	orr.w	r6, ip, r6
 8025bcc:	960f      	str	r6, [sp, #60]	; 0x3c
 8025bce:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8025bd0:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8025bd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025bd8:	2aff      	cmp	r2, #255	; 0xff
 8025bda:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025bde:	fb08 f606 	mul.w	r6, r8, r6
 8025be2:	fb01 6607 	mla	r6, r1, r7, r6
 8025be6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025be8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025bec:	fb00 6607 	mla	r6, r0, r7, r6
 8025bf0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025bf2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025bf6:	fb0a 6607 	mla	r6, sl, r7, r6
 8025bfa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8025bfc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025c00:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8025c04:	fb08 f807 	mul.w	r8, r8, r7
 8025c08:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025c0c:	fb01 8303 	mla	r3, r1, r3, r8
 8025c10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025c12:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8025c16:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025c18:	fb00 330c 	mla	r3, r0, ip, r3
 8025c1c:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8025c20:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8025c24:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025c28:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025c2c:	ea46 060e 	orr.w	r6, r6, lr
 8025c30:	b2f0      	uxtb	r0, r6
 8025c32:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8025c36:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8025c3a:	d038      	beq.n	8025cae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8025c3c:	43d2      	mvns	r2, r2
 8025c3e:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8025c42:	b2d2      	uxtb	r2, r2
 8025c44:	4357      	muls	r7, r2
 8025c46:	1c7b      	adds	r3, r7, #1
 8025c48:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8025c4c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025c50:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8025c54:	4350      	muls	r0, r2
 8025c56:	f805 3c03 	strb.w	r3, [r5, #-3]
 8025c5a:	1c43      	adds	r3, r0, #1
 8025c5c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025c60:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025c64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8025c68:	4353      	muls	r3, r2
 8025c6a:	f805 1c02 	strb.w	r1, [r5, #-2]
 8025c6e:	1c5a      	adds	r2, r3, #1
 8025c70:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025c74:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8025c78:	f805 6c01 	strb.w	r6, [r5, #-1]
 8025c7c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025c7e:	3503      	adds	r5, #3
 8025c80:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025c82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025c86:	4413      	add	r3, r2
 8025c88:	9329      	str	r3, [sp, #164]	; 0xa4
 8025c8a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025c8c:	441c      	add	r4, r3
 8025c8e:	e510      	b.n	80256b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8025c90:	b150      	cbz	r0, 8025ca8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8025c92:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025c94:	5871      	ldr	r1, [r6, r1]
 8025c96:	26ff      	movs	r6, #255	; 0xff
 8025c98:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8025c9c:	9109      	str	r1, [sp, #36]	; 0x24
 8025c9e:	46b6      	mov	lr, r6
 8025ca0:	e6f5      	b.n	8025a8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8025ca2:	26ff      	movs	r6, #255	; 0xff
 8025ca4:	46b1      	mov	r9, r6
 8025ca6:	e6f2      	b.n	8025a8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8025ca8:	26ff      	movs	r6, #255	; 0xff
 8025caa:	46b1      	mov	r9, r6
 8025cac:	e7f7      	b.n	8025c9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8025cae:	f805 0c03 	strb.w	r0, [r5, #-3]
 8025cb2:	f805 1c02 	strb.w	r1, [r5, #-2]
 8025cb6:	e7df      	b.n	8025c78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8025cb8:	b017      	add	sp, #92	; 0x5c
 8025cba:	ecbd 8b08 	vpop	{d8-d11}
 8025cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025cc4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8025cc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025cc8:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8025ccc:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8025cd0:	2800      	cmp	r0, #0
 8025cd2:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8025cd6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8025cda:	fb0c 0e03 	mla	lr, ip, r3, r0
 8025cde:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8025ce2:	db6b      	blt.n	8025dbc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025ce4:	4580      	cmp	r8, r0
 8025ce6:	dd69      	ble.n	8025dbc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025ce8:	f1bc 0f00 	cmp.w	ip, #0
 8025cec:	db66      	blt.n	8025dbc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025cee:	45e1      	cmp	r9, ip
 8025cf0:	dd64      	ble.n	8025dbc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8025cf2:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8025cf6:	f01e 0f01 	tst.w	lr, #1
 8025cfa:	5d16      	ldrb	r6, [r2, r4]
 8025cfc:	bf0c      	ite	eq
 8025cfe:	f006 060f 	andeq.w	r6, r6, #15
 8025d02:	1136      	asrne	r6, r6, #4
 8025d04:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8025d08:	b2f6      	uxtb	r6, r6
 8025d0a:	f110 0a01 	adds.w	sl, r0, #1
 8025d0e:	d457      	bmi.n	8025dc0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025d10:	45d0      	cmp	r8, sl
 8025d12:	dd55      	ble.n	8025dc0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025d14:	f1bc 0f00 	cmp.w	ip, #0
 8025d18:	db52      	blt.n	8025dc0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025d1a:	45e1      	cmp	r9, ip
 8025d1c:	dd50      	ble.n	8025dc0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8025d1e:	2f00      	cmp	r7, #0
 8025d20:	f000 80ac 	beq.w	8025e7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8025d24:	f10e 0b01 	add.w	fp, lr, #1
 8025d28:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8025d2c:	f01b 0f01 	tst.w	fp, #1
 8025d30:	5d14      	ldrb	r4, [r2, r4]
 8025d32:	bf0c      	ite	eq
 8025d34:	f004 040f 	andeq.w	r4, r4, #15
 8025d38:	1124      	asrne	r4, r4, #4
 8025d3a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025d3e:	b2e4      	uxtb	r4, r4
 8025d40:	2d00      	cmp	r5, #0
 8025d42:	f000 8096 	beq.w	8025e72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8025d46:	2800      	cmp	r0, #0
 8025d48:	f10c 0c01 	add.w	ip, ip, #1
 8025d4c:	db3c      	blt.n	8025dc8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025d4e:	4580      	cmp	r8, r0
 8025d50:	dd3a      	ble.n	8025dc8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025d52:	f1bc 0f00 	cmp.w	ip, #0
 8025d56:	db37      	blt.n	8025dc8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025d58:	45e1      	cmp	r9, ip
 8025d5a:	dd35      	ble.n	8025dc8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025d5c:	eb03 0b0e 	add.w	fp, r3, lr
 8025d60:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8025d64:	f01b 0f01 	tst.w	fp, #1
 8025d68:	5c10      	ldrb	r0, [r2, r0]
 8025d6a:	bf0c      	ite	eq
 8025d6c:	f000 000f 	andeq.w	r0, r0, #15
 8025d70:	1100      	asrne	r0, r0, #4
 8025d72:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025d76:	b2c0      	uxtb	r0, r0
 8025d78:	f1ba 0f00 	cmp.w	sl, #0
 8025d7c:	db26      	blt.n	8025dcc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025d7e:	45d0      	cmp	r8, sl
 8025d80:	dd24      	ble.n	8025dcc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025d82:	f1bc 0f00 	cmp.w	ip, #0
 8025d86:	db21      	blt.n	8025dcc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025d88:	45e1      	cmp	r9, ip
 8025d8a:	dd1f      	ble.n	8025dcc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025d8c:	b307      	cbz	r7, 8025dd0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8025d8e:	3301      	adds	r3, #1
 8025d90:	449e      	add	lr, r3
 8025d92:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8025d96:	f01e 0f01 	tst.w	lr, #1
 8025d9a:	5cd3      	ldrb	r3, [r2, r3]
 8025d9c:	bf0c      	ite	eq
 8025d9e:	f003 030f 	andeq.w	r3, r3, #15
 8025da2:	111b      	asrne	r3, r3, #4
 8025da4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025da8:	b2db      	uxtb	r3, r3
 8025daa:	2f0f      	cmp	r7, #15
 8025dac:	d911      	bls.n	8025dd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8025dae:	4b35      	ldr	r3, [pc, #212]	; (8025e84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8025db0:	f240 11a5 	movw	r1, #421	; 0x1a5
 8025db4:	4a34      	ldr	r2, [pc, #208]	; (8025e88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8025db6:	4835      	ldr	r0, [pc, #212]	; (8025e8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8025db8:	f002 fb64 	bl	8028484 <__assert_func>
 8025dbc:	2600      	movs	r6, #0
 8025dbe:	e7a4      	b.n	8025d0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8025dc0:	2400      	movs	r4, #0
 8025dc2:	e7bd      	b.n	8025d40 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8025dc4:	463c      	mov	r4, r7
 8025dc6:	e7be      	b.n	8025d46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8025dc8:	2000      	movs	r0, #0
 8025dca:	e7d5      	b.n	8025d78 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8025dcc:	2300      	movs	r3, #0
 8025dce:	e7ec      	b.n	8025daa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8025dd0:	463b      	mov	r3, r7
 8025dd2:	2d0f      	cmp	r5, #15
 8025dd4:	d8eb      	bhi.n	8025dae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8025dd6:	b2bf      	uxth	r7, r7
 8025dd8:	b2ad      	uxth	r5, r5
 8025dda:	fb07 f205 	mul.w	r2, r7, r5
 8025dde:	013f      	lsls	r7, r7, #4
 8025de0:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8025de4:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8025de8:	1abf      	subs	r7, r7, r2
 8025dea:	b2ad      	uxth	r5, r5
 8025dec:	b2bf      	uxth	r7, r7
 8025dee:	ebac 0c05 	sub.w	ip, ip, r5
 8025df2:	437c      	muls	r4, r7
 8025df4:	fa1f fc8c 	uxth.w	ip, ip
 8025df8:	fb06 440c 	mla	r4, r6, ip, r4
 8025dfc:	fb05 4400 	mla	r4, r5, r0, r4
 8025e00:	fb02 4203 	mla	r2, r2, r3, r4
 8025e04:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025e08:	b38a      	cbz	r2, 8025e6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8025e0a:	4b21      	ldr	r3, [pc, #132]	; (8025e90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8025e0c:	681c      	ldr	r4, [r3, #0]
 8025e0e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8025e12:	b2e5      	uxtb	r5, r4
 8025e14:	4353      	muls	r3, r2
 8025e16:	1c5a      	adds	r2, r3, #1
 8025e18:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025e1c:	1212      	asrs	r2, r2, #8
 8025e1e:	b290      	uxth	r0, r2
 8025e20:	43d2      	mvns	r2, r2
 8025e22:	fb15 f500 	smulbb	r5, r5, r0
 8025e26:	b2d3      	uxtb	r3, r2
 8025e28:	780a      	ldrb	r2, [r1, #0]
 8025e2a:	fb02 5203 	mla	r2, r2, r3, r5
 8025e2e:	b292      	uxth	r2, r2
 8025e30:	1c55      	adds	r5, r2, #1
 8025e32:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8025e36:	784d      	ldrb	r5, [r1, #1]
 8025e38:	fb15 f503 	smulbb	r5, r5, r3
 8025e3c:	1212      	asrs	r2, r2, #8
 8025e3e:	700a      	strb	r2, [r1, #0]
 8025e40:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8025e44:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8025e48:	fb02 5200 	mla	r2, r2, r0, r5
 8025e4c:	b292      	uxth	r2, r2
 8025e4e:	1c55      	adds	r5, r2, #1
 8025e50:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8025e54:	1212      	asrs	r2, r2, #8
 8025e56:	704a      	strb	r2, [r1, #1]
 8025e58:	788a      	ldrb	r2, [r1, #2]
 8025e5a:	fb12 f303 	smulbb	r3, r2, r3
 8025e5e:	fb04 3300 	mla	r3, r4, r0, r3
 8025e62:	b29b      	uxth	r3, r3
 8025e64:	1c5a      	adds	r2, r3, #1
 8025e66:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025e6a:	121b      	asrs	r3, r3, #8
 8025e6c:	708b      	strb	r3, [r1, #2]
 8025e6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e72:	2f0f      	cmp	r7, #15
 8025e74:	d89b      	bhi.n	8025dae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8025e76:	462b      	mov	r3, r5
 8025e78:	4628      	mov	r0, r5
 8025e7a:	e7ac      	b.n	8025dd6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8025e7c:	2d00      	cmp	r5, #0
 8025e7e:	d1a1      	bne.n	8025dc4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8025e80:	462c      	mov	r4, r5
 8025e82:	e7f8      	b.n	8025e76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8025e84:	0802dce5 	.word	0x0802dce5
 8025e88:	0802e1da 	.word	0x0802e1da
 8025e8c:	0802ddae 	.word	0x0802ddae
 8025e90:	2000b444 	.word	0x2000b444

08025e94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8025e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e98:	ed2d 8b08 	vpush	{d8-d11}
 8025e9c:	b097      	sub	sp, #92	; 0x5c
 8025e9e:	eeb0 aa40 	vmov.f32	s20, s0
 8025ea2:	eef0 9a60 	vmov.f32	s19, s1
 8025ea6:	9308      	str	r3, [sp, #32]
 8025ea8:	eeb0 9a41 	vmov.f32	s18, s2
 8025eac:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8025eb0:	eeb0 8a62 	vmov.f32	s16, s5
 8025eb4:	9214      	str	r2, [sp, #80]	; 0x50
 8025eb6:	eef0 8a43 	vmov.f32	s17, s6
 8025eba:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025ebc:	eef0 ba44 	vmov.f32	s23, s8
 8025ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8025ec2:	eeb0 ba64 	vmov.f32	s22, s9
 8025ec6:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8025eca:	eef0 aa45 	vmov.f32	s21, s10
 8025ece:	9015      	str	r0, [sp, #84]	; 0x54
 8025ed0:	910c      	str	r1, [sp, #48]	; 0x30
 8025ed2:	930e      	str	r3, [sp, #56]	; 0x38
 8025ed4:	6850      	ldr	r0, [r2, #4]
 8025ed6:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8025eda:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025ede:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8025ee2:	fb00 1803 	mla	r8, r0, r3, r1
 8025ee6:	6813      	ldr	r3, [r2, #0]
 8025ee8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025eec:	4498      	add	r8, r3
 8025eee:	f10b 0301 	add.w	r3, fp, #1
 8025ef2:	f023 0301 	bic.w	r3, r3, #1
 8025ef6:	930f      	str	r3, [sp, #60]	; 0x3c
 8025ef8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8025efa:	681f      	ldr	r7, [r3, #0]
 8025efc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025efe:	2b00      	cmp	r3, #0
 8025f00:	dc03      	bgt.n	8025f0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8025f02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025f04:	2b00      	cmp	r3, #0
 8025f06:	f340 8238 	ble.w	802637a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8025f0a:	9b08      	ldr	r3, [sp, #32]
 8025f0c:	2b00      	cmp	r3, #0
 8025f0e:	f340 810c 	ble.w	802612a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8025f12:	142a      	asrs	r2, r5, #16
 8025f14:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025f18:	d42c      	bmi.n	8025f74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8025f1a:	1c51      	adds	r1, r2, #1
 8025f1c:	458b      	cmp	fp, r1
 8025f1e:	dd2c      	ble.n	8025f7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8025f20:	2b00      	cmp	r3, #0
 8025f22:	db2a      	blt.n	8025f7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8025f24:	1c59      	adds	r1, r3, #1
 8025f26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025f28:	4288      	cmp	r0, r1
 8025f2a:	dd26      	ble.n	8025f7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8025f2c:	9b08      	ldr	r3, [sp, #32]
 8025f2e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025f30:	3b01      	subs	r3, #1
 8025f32:	fb02 5203 	mla	r2, r2, r3, r5
 8025f36:	1412      	asrs	r2, r2, #16
 8025f38:	d429      	bmi.n	8025f8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8025f3a:	3201      	adds	r2, #1
 8025f3c:	4593      	cmp	fp, r2
 8025f3e:	dd26      	ble.n	8025f8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8025f40:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8025f42:	fb02 6303 	mla	r3, r2, r3, r6
 8025f46:	141b      	asrs	r3, r3, #16
 8025f48:	d421      	bmi.n	8025f8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8025f4a:	3301      	adds	r3, #1
 8025f4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025f4e:	429a      	cmp	r2, r3
 8025f50:	dd1d      	ble.n	8025f8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8025f52:	f108 0e03 	add.w	lr, r8, #3
 8025f56:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8025f5a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8025f5e:	f1b9 0f00 	cmp.w	r9, #0
 8025f62:	f300 814f 	bgt.w	8026204 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 8025f66:	9b08      	ldr	r3, [sp, #32]
 8025f68:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025f6c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025f70:	44a0      	add	r8, r4
 8025f72:	e0dc      	b.n	802612e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8025f74:	1c51      	adds	r1, r2, #1
 8025f76:	f040 80ce 	bne.w	8026116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8025f7a:	4593      	cmp	fp, r2
 8025f7c:	f340 80cb 	ble.w	8026116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8025f80:	1c5a      	adds	r2, r3, #1
 8025f82:	f2c0 80c8 	blt.w	8026116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8025f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025f88:	4293      	cmp	r3, r2
 8025f8a:	f280 80c4 	bge.w	8026116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8025f8e:	9b08      	ldr	r3, [sp, #32]
 8025f90:	46c1      	mov	r9, r8
 8025f92:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8025f96:	930d      	str	r3, [sp, #52]	; 0x34
 8025f98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025f9a:	2b00      	cmp	r3, #0
 8025f9c:	dde3      	ble.n	8025f66 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8025f9e:	1428      	asrs	r0, r5, #16
 8025fa0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8025fa4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025fa8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025fac:	f100 8111 	bmi.w	80261d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8025fb0:	f100 0c01 	add.w	ip, r0, #1
 8025fb4:	45e3      	cmp	fp, ip
 8025fb6:	f340 810e 	ble.w	80261d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8025fba:	2b00      	cmp	r3, #0
 8025fbc:	f2c0 810b 	blt.w	80261d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8025fc0:	f103 0c01 	add.w	ip, r3, #1
 8025fc4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025fc6:	4564      	cmp	r4, ip
 8025fc8:	f340 8105 	ble.w	80261d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8025fcc:	fb03 030a 	mla	r3, r3, sl, r0
 8025fd0:	0858      	lsrs	r0, r3, #1
 8025fd2:	07dc      	lsls	r4, r3, #31
 8025fd4:	5c38      	ldrb	r0, [r7, r0]
 8025fd6:	bf54      	ite	pl
 8025fd8:	f000 000f 	andpl.w	r0, r0, #15
 8025fdc:	1100      	asrmi	r0, r0, #4
 8025fde:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025fe2:	b2c0      	uxtb	r0, r0
 8025fe4:	2a00      	cmp	r2, #0
 8025fe6:	f000 80e1 	beq.w	80261ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8025fea:	f103 0e01 	add.w	lr, r3, #1
 8025fee:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8025ff2:	f01e 0f01 	tst.w	lr, #1
 8025ff6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025ffa:	bf0c      	ite	eq
 8025ffc:	f00c 0c0f 	andeq.w	ip, ip, #15
 8026000:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8026004:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026008:	fa5f f48c 	uxtb.w	r4, ip
 802600c:	9410      	str	r4, [sp, #64]	; 0x40
 802600e:	b1f9      	cbz	r1, 8026050 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8026010:	4453      	add	r3, sl
 8026012:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026016:	07dc      	lsls	r4, r3, #31
 8026018:	f103 0301 	add.w	r3, r3, #1
 802601c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026020:	bf54      	ite	pl
 8026022:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026026:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802602a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802602e:	fa5f f48c 	uxtb.w	r4, ip
 8026032:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026036:	940a      	str	r4, [sp, #40]	; 0x28
 8026038:	07dc      	lsls	r4, r3, #31
 802603a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802603e:	bf54      	ite	pl
 8026040:	f00c 030f 	andpl.w	r3, ip, #15
 8026044:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8026048:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802604c:	b2db      	uxtb	r3, r3
 802604e:	9311      	str	r3, [sp, #68]	; 0x44
 8026050:	b292      	uxth	r2, r2
 8026052:	b289      	uxth	r1, r1
 8026054:	0113      	lsls	r3, r2, #4
 8026056:	fb02 fc01 	mul.w	ip, r2, r1
 802605a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802605c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8026060:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8026064:	eba3 030c 	sub.w	r3, r3, ip
 8026068:	b289      	uxth	r1, r1
 802606a:	b29b      	uxth	r3, r3
 802606c:	ebae 0e01 	sub.w	lr, lr, r1
 8026070:	4353      	muls	r3, r2
 8026072:	fa1f fe8e 	uxth.w	lr, lr
 8026076:	fb00 320e 	mla	r2, r0, lr, r3
 802607a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802607c:	fb01 2203 	mla	r2, r1, r3, r2
 8026080:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026082:	fb0c 2203 	mla	r2, ip, r3, r2
 8026086:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802608a:	2a00      	cmp	r2, #0
 802608c:	d039      	beq.n	8026102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802608e:	4bbd      	ldr	r3, [pc, #756]	; (8026384 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8026090:	6819      	ldr	r1, [r3, #0]
 8026092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026094:	fa5f fc81 	uxtb.w	ip, r1
 8026098:	435a      	muls	r2, r3
 802609a:	1c53      	adds	r3, r2, #1
 802609c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80260a0:	1212      	asrs	r2, r2, #8
 80260a2:	b290      	uxth	r0, r2
 80260a4:	43d2      	mvns	r2, r2
 80260a6:	fb1c fc00 	smulbb	ip, ip, r0
 80260aa:	b2d3      	uxtb	r3, r2
 80260ac:	f899 2000 	ldrb.w	r2, [r9]
 80260b0:	fb02 c203 	mla	r2, r2, r3, ip
 80260b4:	b292      	uxth	r2, r2
 80260b6:	f102 0c01 	add.w	ip, r2, #1
 80260ba:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80260be:	f899 c001 	ldrb.w	ip, [r9, #1]
 80260c2:	fb1c fc03 	smulbb	ip, ip, r3
 80260c6:	1212      	asrs	r2, r2, #8
 80260c8:	f889 2000 	strb.w	r2, [r9]
 80260cc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80260d0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80260d4:	fb02 c200 	mla	r2, r2, r0, ip
 80260d8:	b292      	uxth	r2, r2
 80260da:	f102 0c01 	add.w	ip, r2, #1
 80260de:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80260e2:	1212      	asrs	r2, r2, #8
 80260e4:	f889 2001 	strb.w	r2, [r9, #1]
 80260e8:	f899 2002 	ldrb.w	r2, [r9, #2]
 80260ec:	fb12 f303 	smulbb	r3, r2, r3
 80260f0:	fb01 3300 	mla	r3, r1, r0, r3
 80260f4:	b29b      	uxth	r3, r3
 80260f6:	1c5a      	adds	r2, r3, #1
 80260f8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80260fc:	121b      	asrs	r3, r3, #8
 80260fe:	f889 3002 	strb.w	r3, [r9, #2]
 8026102:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026104:	f109 0903 	add.w	r9, r9, #3
 8026108:	441d      	add	r5, r3
 802610a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802610c:	441e      	add	r6, r3
 802610e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026110:	3b01      	subs	r3, #1
 8026112:	930d      	str	r3, [sp, #52]	; 0x34
 8026114:	e740      	b.n	8025f98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8026116:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026118:	f108 0803 	add.w	r8, r8, #3
 802611c:	441d      	add	r5, r3
 802611e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026120:	441e      	add	r6, r3
 8026122:	9b08      	ldr	r3, [sp, #32]
 8026124:	3b01      	subs	r3, #1
 8026126:	9308      	str	r3, [sp, #32]
 8026128:	e6ef      	b.n	8025f0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802612a:	f47f aeff 	bne.w	8025f2c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 802612e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026130:	2b00      	cmp	r3, #0
 8026132:	f340 8122 	ble.w	802637a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8026136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802613a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802613c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026140:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026144:	eef0 6a48 	vmov.f32	s13, s16
 8026148:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802614c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026150:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026154:	ee16 5a90 	vmov	r5, s13
 8026158:	eef0 6a68 	vmov.f32	s13, s17
 802615c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026160:	ee16 6a90 	vmov	r6, s13
 8026164:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026168:	ee69 7a27 	vmul.f32	s15, s18, s15
 802616c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026170:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026174:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026178:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802617c:	ee18 2a10 	vmov	r2, s16
 8026180:	eeb0 8a47 	vmov.f32	s16, s14
 8026184:	fb92 f3f3 	sdiv	r3, r2, r3
 8026188:	ee18 2a90 	vmov	r2, s17
 802618c:	932b      	str	r3, [sp, #172]	; 0xac
 802618e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026190:	eef0 8a67 	vmov.f32	s17, s15
 8026194:	fb92 f3f3 	sdiv	r3, r2, r3
 8026198:	932c      	str	r3, [sp, #176]	; 0xb0
 802619a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802619c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802619e:	3b01      	subs	r3, #1
 80261a0:	930c      	str	r3, [sp, #48]	; 0x30
 80261a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80261a4:	bf08      	it	eq
 80261a6:	4613      	moveq	r3, r2
 80261a8:	9308      	str	r3, [sp, #32]
 80261aa:	e6a7      	b.n	8025efc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80261ac:	2900      	cmp	r1, #0
 80261ae:	f43f af4f 	beq.w	8026050 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80261b2:	4453      	add	r3, sl
 80261b4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80261b8:	07db      	lsls	r3, r3, #31
 80261ba:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80261be:	bf54      	ite	pl
 80261c0:	f00c 030f 	andpl.w	r3, ip, #15
 80261c4:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80261c8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80261cc:	b2db      	uxtb	r3, r3
 80261ce:	930a      	str	r3, [sp, #40]	; 0x28
 80261d0:	e73e      	b.n	8026050 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80261d2:	1c44      	adds	r4, r0, #1
 80261d4:	d195      	bne.n	8026102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80261d6:	4583      	cmp	fp, r0
 80261d8:	dd93      	ble.n	8026102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80261da:	1c5c      	adds	r4, r3, #1
 80261dc:	db91      	blt.n	8026102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80261de:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80261e0:	429c      	cmp	r4, r3
 80261e2:	dd8e      	ble.n	8026102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80261e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80261e6:	9002      	str	r0, [sp, #8]
 80261e8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80261ea:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80261ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80261f0:	463a      	mov	r2, r7
 80261f2:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80261f6:	e9cd b300 	strd	fp, r3, [sp]
 80261fa:	4649      	mov	r1, r9
 80261fc:	4653      	mov	r3, sl
 80261fe:	f7ff fd61 	bl	8025cc4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8026202:	e77e      	b.n	8026102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8026204:	142a      	asrs	r2, r5, #16
 8026206:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802620a:	1433      	asrs	r3, r6, #16
 802620c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026210:	fb0a 2303 	mla	r3, sl, r3, r2
 8026214:	085a      	lsrs	r2, r3, #1
 8026216:	07dc      	lsls	r4, r3, #31
 8026218:	5cba      	ldrb	r2, [r7, r2]
 802621a:	bf54      	ite	pl
 802621c:	f002 020f 	andpl.w	r2, r2, #15
 8026220:	1112      	asrmi	r2, r2, #4
 8026222:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026226:	b2d2      	uxtb	r2, r2
 8026228:	2900      	cmp	r1, #0
 802622a:	f000 8093 	beq.w	8026354 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 802622e:	1c5c      	adds	r4, r3, #1
 8026230:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8026234:	07e4      	lsls	r4, r4, #31
 8026236:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802623a:	bf54      	ite	pl
 802623c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026240:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026244:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026248:	fa5f f48c 	uxtb.w	r4, ip
 802624c:	9412      	str	r4, [sp, #72]	; 0x48
 802624e:	b300      	cbz	r0, 8026292 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8026250:	4453      	add	r3, sl
 8026252:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026256:	07dc      	lsls	r4, r3, #31
 8026258:	f103 0301 	add.w	r3, r3, #1
 802625c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026260:	bf54      	ite	pl
 8026262:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026266:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802626a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802626e:	fa5f f48c 	uxtb.w	r4, ip
 8026272:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026276:	940b      	str	r4, [sp, #44]	; 0x2c
 8026278:	07dc      	lsls	r4, r3, #31
 802627a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802627e:	bf54      	ite	pl
 8026280:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026284:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026288:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802628c:	fa5f f38c 	uxtb.w	r3, ip
 8026290:	9313      	str	r3, [sp, #76]	; 0x4c
 8026292:	b289      	uxth	r1, r1
 8026294:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026296:	b280      	uxth	r0, r0
 8026298:	fb01 f300 	mul.w	r3, r1, r0
 802629c:	0109      	lsls	r1, r1, #4
 802629e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80262a2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80262a6:	1ac9      	subs	r1, r1, r3
 80262a8:	b280      	uxth	r0, r0
 80262aa:	b289      	uxth	r1, r1
 80262ac:	ebac 0c00 	sub.w	ip, ip, r0
 80262b0:	4361      	muls	r1, r4
 80262b2:	fa1f fc8c 	uxth.w	ip, ip
 80262b6:	fb02 120c 	mla	r2, r2, ip, r1
 80262ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80262bc:	fb00 2001 	mla	r0, r0, r1, r2
 80262c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80262c2:	fb03 0302 	mla	r3, r3, r2, r0
 80262c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80262ca:	2b00      	cmp	r3, #0
 80262cc:	d039      	beq.n	8026342 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 80262ce:	4a2d      	ldr	r2, [pc, #180]	; (8026384 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 80262d0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80262d4:	6810      	ldr	r0, [r2, #0]
 80262d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80262d8:	fa5f fc80 	uxtb.w	ip, r0
 80262dc:	4353      	muls	r3, r2
 80262de:	1c5a      	adds	r2, r3, #1
 80262e0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80262e4:	121b      	asrs	r3, r3, #8
 80262e6:	b29a      	uxth	r2, r3
 80262e8:	43db      	mvns	r3, r3
 80262ea:	fb1c fc02 	smulbb	ip, ip, r2
 80262ee:	b2db      	uxtb	r3, r3
 80262f0:	fb01 c103 	mla	r1, r1, r3, ip
 80262f4:	b289      	uxth	r1, r1
 80262f6:	f101 0c01 	add.w	ip, r1, #1
 80262fa:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80262fe:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8026302:	fb1c fc03 	smulbb	ip, ip, r3
 8026306:	1209      	asrs	r1, r1, #8
 8026308:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802630c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8026310:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8026314:	fb01 c102 	mla	r1, r1, r2, ip
 8026318:	b289      	uxth	r1, r1
 802631a:	f101 0c01 	add.w	ip, r1, #1
 802631e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8026322:	1209      	asrs	r1, r1, #8
 8026324:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8026328:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 802632c:	fb11 f303 	smulbb	r3, r1, r3
 8026330:	fb00 3002 	mla	r0, r0, r2, r3
 8026334:	b280      	uxth	r0, r0
 8026336:	1c42      	adds	r2, r0, #1
 8026338:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802633c:	1200      	asrs	r0, r0, #8
 802633e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8026342:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026344:	f10e 0e03 	add.w	lr, lr, #3
 8026348:	f109 39ff 	add.w	r9, r9, #4294967295
 802634c:	441d      	add	r5, r3
 802634e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026350:	441e      	add	r6, r3
 8026352:	e604      	b.n	8025f5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8026354:	2800      	cmp	r0, #0
 8026356:	d09c      	beq.n	8026292 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8026358:	4453      	add	r3, sl
 802635a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802635e:	07db      	lsls	r3, r3, #31
 8026360:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026364:	bf54      	ite	pl
 8026366:	f00c 0c0f 	andpl.w	ip, ip, #15
 802636a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802636e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026372:	fa5f f38c 	uxtb.w	r3, ip
 8026376:	930b      	str	r3, [sp, #44]	; 0x2c
 8026378:	e78b      	b.n	8026292 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 802637a:	b017      	add	sp, #92	; 0x5c
 802637c:	ecbd 8b08 	vpop	{d8-d11}
 8026380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026384:	2000b444 	.word	0x2000b444

08026388 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8026388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802638c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8026390:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8026394:	2800      	cmp	r0, #0
 8026396:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802639a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802639e:	fb0c 0e03 	mla	lr, ip, r3, r0
 80263a2:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80263a6:	db6b      	blt.n	8026480 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80263a8:	4580      	cmp	r8, r0
 80263aa:	dd69      	ble.n	8026480 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80263ac:	f1bc 0f00 	cmp.w	ip, #0
 80263b0:	db66      	blt.n	8026480 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80263b2:	45e1      	cmp	r9, ip
 80263b4:	dd64      	ble.n	8026480 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80263b6:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80263ba:	f01e 0f01 	tst.w	lr, #1
 80263be:	5d16      	ldrb	r6, [r2, r4]
 80263c0:	bf0c      	ite	eq
 80263c2:	f006 060f 	andeq.w	r6, r6, #15
 80263c6:	1136      	asrne	r6, r6, #4
 80263c8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80263cc:	b2f6      	uxtb	r6, r6
 80263ce:	f110 0a01 	adds.w	sl, r0, #1
 80263d2:	d457      	bmi.n	8026484 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80263d4:	45d0      	cmp	r8, sl
 80263d6:	dd55      	ble.n	8026484 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80263d8:	f1bc 0f00 	cmp.w	ip, #0
 80263dc:	db52      	blt.n	8026484 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80263de:	45e1      	cmp	r9, ip
 80263e0:	dd50      	ble.n	8026484 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80263e2:	2f00      	cmp	r7, #0
 80263e4:	f000 80a5 	beq.w	8026532 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 80263e8:	f10e 0b01 	add.w	fp, lr, #1
 80263ec:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80263f0:	f01b 0f01 	tst.w	fp, #1
 80263f4:	5d14      	ldrb	r4, [r2, r4]
 80263f6:	bf0c      	ite	eq
 80263f8:	f004 040f 	andeq.w	r4, r4, #15
 80263fc:	1124      	asrne	r4, r4, #4
 80263fe:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8026402:	b2e4      	uxtb	r4, r4
 8026404:	2d00      	cmp	r5, #0
 8026406:	f000 808f 	beq.w	8026528 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 802640a:	2800      	cmp	r0, #0
 802640c:	f10c 0c01 	add.w	ip, ip, #1
 8026410:	db3c      	blt.n	802648c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8026412:	4580      	cmp	r8, r0
 8026414:	dd3a      	ble.n	802648c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8026416:	f1bc 0f00 	cmp.w	ip, #0
 802641a:	db37      	blt.n	802648c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802641c:	45e1      	cmp	r9, ip
 802641e:	dd35      	ble.n	802648c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8026420:	eb03 0b0e 	add.w	fp, r3, lr
 8026424:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8026428:	f01b 0f01 	tst.w	fp, #1
 802642c:	5c10      	ldrb	r0, [r2, r0]
 802642e:	bf0c      	ite	eq
 8026430:	f000 000f 	andeq.w	r0, r0, #15
 8026434:	1100      	asrne	r0, r0, #4
 8026436:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802643a:	b2c0      	uxtb	r0, r0
 802643c:	f1ba 0f00 	cmp.w	sl, #0
 8026440:	db26      	blt.n	8026490 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8026442:	45d0      	cmp	r8, sl
 8026444:	dd24      	ble.n	8026490 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8026446:	f1bc 0f00 	cmp.w	ip, #0
 802644a:	db21      	blt.n	8026490 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802644c:	45e1      	cmp	r9, ip
 802644e:	dd1f      	ble.n	8026490 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8026450:	b307      	cbz	r7, 8026494 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8026452:	3301      	adds	r3, #1
 8026454:	449e      	add	lr, r3
 8026456:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802645a:	f01e 0f01 	tst.w	lr, #1
 802645e:	5cd3      	ldrb	r3, [r2, r3]
 8026460:	bf0c      	ite	eq
 8026462:	f003 030f 	andeq.w	r3, r3, #15
 8026466:	111b      	asrne	r3, r3, #4
 8026468:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802646c:	b2db      	uxtb	r3, r3
 802646e:	2f0f      	cmp	r7, #15
 8026470:	d911      	bls.n	8026496 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8026472:	4b32      	ldr	r3, [pc, #200]	; (802653c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8026474:	f240 11a5 	movw	r1, #421	; 0x1a5
 8026478:	4a31      	ldr	r2, [pc, #196]	; (8026540 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 802647a:	4832      	ldr	r0, [pc, #200]	; (8026544 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 802647c:	f002 f802 	bl	8028484 <__assert_func>
 8026480:	2600      	movs	r6, #0
 8026482:	e7a4      	b.n	80263ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8026484:	2400      	movs	r4, #0
 8026486:	e7bd      	b.n	8026404 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8026488:	463c      	mov	r4, r7
 802648a:	e7be      	b.n	802640a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 802648c:	2000      	movs	r0, #0
 802648e:	e7d5      	b.n	802643c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8026490:	2300      	movs	r3, #0
 8026492:	e7ec      	b.n	802646e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8026494:	463b      	mov	r3, r7
 8026496:	2d0f      	cmp	r5, #15
 8026498:	d8eb      	bhi.n	8026472 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 802649a:	b2bf      	uxth	r7, r7
 802649c:	b2ad      	uxth	r5, r5
 802649e:	fb07 f205 	mul.w	r2, r7, r5
 80264a2:	013f      	lsls	r7, r7, #4
 80264a4:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80264a8:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80264ac:	1abf      	subs	r7, r7, r2
 80264ae:	b2ad      	uxth	r5, r5
 80264b0:	b2bf      	uxth	r7, r7
 80264b2:	ebac 0c05 	sub.w	ip, ip, r5
 80264b6:	437c      	muls	r4, r7
 80264b8:	fa1f fc8c 	uxth.w	ip, ip
 80264bc:	fb06 440c 	mla	r4, r6, ip, r4
 80264c0:	fb05 4400 	mla	r4, r5, r0, r4
 80264c4:	fb02 4303 	mla	r3, r2, r3, r4
 80264c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80264cc:	b353      	cbz	r3, 8026524 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 80264ce:	4a1e      	ldr	r2, [pc, #120]	; (8026548 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 80264d0:	7808      	ldrb	r0, [r1, #0]
 80264d2:	6814      	ldr	r4, [r2, #0]
 80264d4:	b29a      	uxth	r2, r3
 80264d6:	43db      	mvns	r3, r3
 80264d8:	b2e5      	uxtb	r5, r4
 80264da:	b2db      	uxtb	r3, r3
 80264dc:	fb15 f502 	smulbb	r5, r5, r2
 80264e0:	fb00 5003 	mla	r0, r0, r3, r5
 80264e4:	b280      	uxth	r0, r0
 80264e6:	1c45      	adds	r5, r0, #1
 80264e8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80264ec:	784d      	ldrb	r5, [r1, #1]
 80264ee:	fb15 f503 	smulbb	r5, r5, r3
 80264f2:	1200      	asrs	r0, r0, #8
 80264f4:	7008      	strb	r0, [r1, #0]
 80264f6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80264fa:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80264fe:	fb00 5002 	mla	r0, r0, r2, r5
 8026502:	b280      	uxth	r0, r0
 8026504:	1c45      	adds	r5, r0, #1
 8026506:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802650a:	1200      	asrs	r0, r0, #8
 802650c:	7048      	strb	r0, [r1, #1]
 802650e:	7888      	ldrb	r0, [r1, #2]
 8026510:	fb10 f303 	smulbb	r3, r0, r3
 8026514:	fb04 3202 	mla	r2, r4, r2, r3
 8026518:	b292      	uxth	r2, r2
 802651a:	1c53      	adds	r3, r2, #1
 802651c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026520:	1212      	asrs	r2, r2, #8
 8026522:	708a      	strb	r2, [r1, #2]
 8026524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026528:	2f0f      	cmp	r7, #15
 802652a:	d8a2      	bhi.n	8026472 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 802652c:	462b      	mov	r3, r5
 802652e:	4628      	mov	r0, r5
 8026530:	e7b3      	b.n	802649a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8026532:	2d00      	cmp	r5, #0
 8026534:	d1a8      	bne.n	8026488 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8026536:	462c      	mov	r4, r5
 8026538:	e7f8      	b.n	802652c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 802653a:	bf00      	nop
 802653c:	0802dce5 	.word	0x0802dce5
 8026540:	0802e1da 	.word	0x0802e1da
 8026544:	0802ddae 	.word	0x0802ddae
 8026548:	2000b444 	.word	0x2000b444

0802654c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802654c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026550:	ed2d 8b08 	vpush	{d8-d11}
 8026554:	b095      	sub	sp, #84	; 0x54
 8026556:	461c      	mov	r4, r3
 8026558:	eeb0 aa40 	vmov.f32	s20, s0
 802655c:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8026560:	eef0 9a60 	vmov.f32	s19, s1
 8026564:	920e      	str	r2, [sp, #56]	; 0x38
 8026566:	eeb0 9a41 	vmov.f32	s18, s2
 802656a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802656c:	eeb0 8a62 	vmov.f32	s16, s5
 8026570:	9307      	str	r3, [sp, #28]
 8026572:	eef0 8a43 	vmov.f32	s17, s6
 8026576:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 802657a:	eef0 ba44 	vmov.f32	s23, s8
 802657e:	9013      	str	r0, [sp, #76]	; 0x4c
 8026580:	eeb0 ba64 	vmov.f32	s22, s9
 8026584:	9109      	str	r1, [sp, #36]	; 0x24
 8026586:	eef0 aa45 	vmov.f32	s21, s10
 802658a:	9308      	str	r3, [sp, #32]
 802658c:	6850      	ldr	r0, [r2, #4]
 802658e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8026592:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8026596:	fb00 1803 	mla	r8, r0, r3, r1
 802659a:	6813      	ldr	r3, [r2, #0]
 802659c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80265a0:	4498      	add	r8, r3
 80265a2:	9b07      	ldr	r3, [sp, #28]
 80265a4:	3301      	adds	r3, #1
 80265a6:	f023 0301 	bic.w	r3, r3, #1
 80265aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80265ac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80265ae:	681f      	ldr	r7, [r3, #0]
 80265b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80265b2:	2b00      	cmp	r3, #0
 80265b4:	dc03      	bgt.n	80265be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80265b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80265b8:	2b00      	cmp	r3, #0
 80265ba:	f340 8238 	ble.w	8026a2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80265be:	2c00      	cmp	r4, #0
 80265c0:	f340 8109 	ble.w	80267d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 80265c4:	142a      	asrs	r2, r5, #16
 80265c6:	ea4f 4326 	mov.w	r3, r6, asr #16
 80265ca:	d42b      	bmi.n	8026624 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80265cc:	1c51      	adds	r1, r2, #1
 80265ce:	9807      	ldr	r0, [sp, #28]
 80265d0:	4288      	cmp	r0, r1
 80265d2:	dd2a      	ble.n	802662a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80265d4:	2b00      	cmp	r3, #0
 80265d6:	db28      	blt.n	802662a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80265d8:	1c59      	adds	r1, r3, #1
 80265da:	9808      	ldr	r0, [sp, #32]
 80265dc:	4288      	cmp	r0, r1
 80265de:	dd24      	ble.n	802662a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80265e0:	1e63      	subs	r3, r4, #1
 80265e2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80265e4:	fb02 5203 	mla	r2, r2, r3, r5
 80265e8:	1412      	asrs	r2, r2, #16
 80265ea:	d429      	bmi.n	8026640 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80265ec:	3201      	adds	r2, #1
 80265ee:	9907      	ldr	r1, [sp, #28]
 80265f0:	4291      	cmp	r1, r2
 80265f2:	dd25      	ble.n	8026640 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80265f4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80265f6:	fb02 6303 	mla	r3, r2, r3, r6
 80265fa:	141b      	asrs	r3, r3, #16
 80265fc:	d420      	bmi.n	8026640 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80265fe:	3301      	adds	r3, #1
 8026600:	9a08      	ldr	r2, [sp, #32]
 8026602:	429a      	cmp	r2, r3
 8026604:	dd1c      	ble.n	8026640 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8026606:	f108 0e03 	add.w	lr, r8, #3
 802660a:	46a1      	mov	r9, r4
 802660c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8026610:	f1b9 0f00 	cmp.w	r9, #0
 8026614:	f300 8155 	bgt.w	80268c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8026618:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802661c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026620:	44a0      	add	r8, r4
 8026622:	e0da      	b.n	80267da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8026624:	1c50      	adds	r0, r2, #1
 8026626:	f040 80ce 	bne.w	80267c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802662a:	9907      	ldr	r1, [sp, #28]
 802662c:	4291      	cmp	r1, r2
 802662e:	f340 80ca 	ble.w	80267c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8026632:	1c59      	adds	r1, r3, #1
 8026634:	f2c0 80c7 	blt.w	80267c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8026638:	9a08      	ldr	r2, [sp, #32]
 802663a:	4293      	cmp	r3, r2
 802663c:	f280 80c3 	bge.w	80267c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8026640:	46a3      	mov	fp, r4
 8026642:	46c1      	mov	r9, r8
 8026644:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8026648:	f1bb 0f00 	cmp.w	fp, #0
 802664c:	dde4      	ble.n	8026618 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 802664e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8026652:	1428      	asrs	r0, r5, #16
 8026654:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026658:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802665c:	920a      	str	r2, [sp, #40]	; 0x28
 802665e:	f100 8116 	bmi.w	802688e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8026662:	f100 0c01 	add.w	ip, r0, #1
 8026666:	9a07      	ldr	r2, [sp, #28]
 8026668:	4562      	cmp	r2, ip
 802666a:	f340 8112 	ble.w	8026892 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802666e:	2b00      	cmp	r3, #0
 8026670:	f2c0 810f 	blt.w	8026892 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8026674:	f103 0c01 	add.w	ip, r3, #1
 8026678:	9a08      	ldr	r2, [sp, #32]
 802667a:	4562      	cmp	r2, ip
 802667c:	f340 8109 	ble.w	8026892 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8026680:	fb03 030a 	mla	r3, r3, sl, r0
 8026684:	0858      	lsrs	r0, r3, #1
 8026686:	07da      	lsls	r2, r3, #31
 8026688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802668a:	5c38      	ldrb	r0, [r7, r0]
 802668c:	bf54      	ite	pl
 802668e:	f000 000f 	andpl.w	r0, r0, #15
 8026692:	1100      	asrmi	r0, r0, #4
 8026694:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026698:	b2c0      	uxtb	r0, r0
 802669a:	2a00      	cmp	r2, #0
 802669c:	f000 80dd 	beq.w	802685a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 80266a0:	f103 0e01 	add.w	lr, r3, #1
 80266a4:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80266a8:	f01e 0f01 	tst.w	lr, #1
 80266ac:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80266b0:	bf0c      	ite	eq
 80266b2:	f00c 0c0f 	andeq.w	ip, ip, #15
 80266b6:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80266ba:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80266be:	fa5f fc8c 	uxtb.w	ip, ip
 80266c2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80266c6:	b301      	cbz	r1, 802670a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80266c8:	4453      	add	r3, sl
 80266ca:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80266ce:	07da      	lsls	r2, r3, #31
 80266d0:	f103 0301 	add.w	r3, r3, #1
 80266d4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80266d8:	bf54      	ite	pl
 80266da:	f00c 0c0f 	andpl.w	ip, ip, #15
 80266de:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80266e2:	07da      	lsls	r2, r3, #31
 80266e4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80266e8:	fa5f fc8c 	uxtb.w	ip, ip
 80266ec:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80266f0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80266f4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80266f8:	bf54      	ite	pl
 80266fa:	f00c 030f 	andpl.w	r3, ip, #15
 80266fe:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8026702:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026706:	b2db      	uxtb	r3, r3
 8026708:	9310      	str	r3, [sp, #64]	; 0x40
 802670a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802670e:	b289      	uxth	r1, r1
 8026710:	fb02 f301 	mul.w	r3, r2, r1
 8026714:	0112      	lsls	r2, r2, #4
 8026716:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802671a:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 802671e:	1ad2      	subs	r2, r2, r3
 8026720:	fa1f fe81 	uxth.w	lr, r1
 8026724:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8026726:	b292      	uxth	r2, r2
 8026728:	ebac 0c0e 	sub.w	ip, ip, lr
 802672c:	434a      	muls	r2, r1
 802672e:	fa1f fc8c 	uxth.w	ip, ip
 8026732:	fb00 200c 	mla	r0, r0, ip, r2
 8026736:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026738:	fb0e 0002 	mla	r0, lr, r2, r0
 802673c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802673e:	fb03 0002 	mla	r0, r3, r2, r0
 8026742:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026746:	b3a8      	cbz	r0, 80267b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8026748:	4bbb      	ldr	r3, [pc, #748]	; (8026a38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 802674a:	28ff      	cmp	r0, #255	; 0xff
 802674c:	681b      	ldr	r3, [r3, #0]
 802674e:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8026752:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8026756:	b2db      	uxtb	r3, r3
 8026758:	f000 8092 	beq.w	8026880 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 802675c:	b282      	uxth	r2, r0
 802675e:	43c0      	mvns	r0, r0
 8026760:	f899 e000 	ldrb.w	lr, [r9]
 8026764:	fb13 f302 	smulbb	r3, r3, r2
 8026768:	b2c0      	uxtb	r0, r0
 802676a:	fb11 f102 	smulbb	r1, r1, r2
 802676e:	fb0e 3300 	mla	r3, lr, r0, r3
 8026772:	fb1c f202 	smulbb	r2, ip, r2
 8026776:	b29b      	uxth	r3, r3
 8026778:	f103 0e01 	add.w	lr, r3, #1
 802677c:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8026780:	121b      	asrs	r3, r3, #8
 8026782:	f889 3000 	strb.w	r3, [r9]
 8026786:	f899 3001 	ldrb.w	r3, [r9, #1]
 802678a:	fb03 1100 	mla	r1, r3, r0, r1
 802678e:	b289      	uxth	r1, r1
 8026790:	1c4b      	adds	r3, r1, #1
 8026792:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026796:	f899 3002 	ldrb.w	r3, [r9, #2]
 802679a:	fb03 2000 	mla	r0, r3, r0, r2
 802679e:	1209      	asrs	r1, r1, #8
 80267a0:	b280      	uxth	r0, r0
 80267a2:	f889 1001 	strb.w	r1, [r9, #1]
 80267a6:	f100 0c01 	add.w	ip, r0, #1
 80267aa:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80267ae:	1200      	asrs	r0, r0, #8
 80267b0:	f889 0002 	strb.w	r0, [r9, #2]
 80267b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80267b6:	f109 0903 	add.w	r9, r9, #3
 80267ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80267be:	441d      	add	r5, r3
 80267c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80267c2:	441e      	add	r6, r3
 80267c4:	e740      	b.n	8026648 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80267c6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80267c8:	3c01      	subs	r4, #1
 80267ca:	f108 0803 	add.w	r8, r8, #3
 80267ce:	441d      	add	r5, r3
 80267d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80267d2:	441e      	add	r6, r3
 80267d4:	e6f3      	b.n	80265be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80267d6:	f47f af03 	bne.w	80265e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80267da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80267dc:	2b00      	cmp	r3, #0
 80267de:	f340 8126 	ble.w	8026a2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80267e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80267e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80267e8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80267ec:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80267f0:	eef0 6a48 	vmov.f32	s13, s16
 80267f4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80267f8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80267fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026800:	ee16 5a90 	vmov	r5, s13
 8026804:	eef0 6a68 	vmov.f32	s13, s17
 8026808:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802680c:	ee16 6a90 	vmov	r6, s13
 8026810:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026814:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026818:	ee37 8a48 	vsub.f32	s16, s14, s16
 802681c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026820:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026824:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026828:	ee18 2a10 	vmov	r2, s16
 802682c:	eeb0 8a47 	vmov.f32	s16, s14
 8026830:	fb92 f3f3 	sdiv	r3, r2, r3
 8026834:	ee18 2a90 	vmov	r2, s17
 8026838:	9329      	str	r3, [sp, #164]	; 0xa4
 802683a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802683c:	eef0 8a67 	vmov.f32	s17, s15
 8026840:	fb92 f3f3 	sdiv	r3, r2, r3
 8026844:	932a      	str	r3, [sp, #168]	; 0xa8
 8026846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802684a:	3b01      	subs	r3, #1
 802684c:	9309      	str	r3, [sp, #36]	; 0x24
 802684e:	bf08      	it	eq
 8026850:	4614      	moveq	r4, r2
 8026852:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026854:	bf18      	it	ne
 8026856:	461c      	movne	r4, r3
 8026858:	e6aa      	b.n	80265b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 802685a:	2900      	cmp	r1, #0
 802685c:	f43f af55 	beq.w	802670a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8026860:	4453      	add	r3, sl
 8026862:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026866:	07db      	lsls	r3, r3, #31
 8026868:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802686c:	bf54      	ite	pl
 802686e:	f00c 030f 	andpl.w	r3, ip, #15
 8026872:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8026876:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802687a:	b2db      	uxtb	r3, r3
 802687c:	930c      	str	r3, [sp, #48]	; 0x30
 802687e:	e744      	b.n	802670a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8026880:	f889 3000 	strb.w	r3, [r9]
 8026884:	f889 1001 	strb.w	r1, [r9, #1]
 8026888:	f889 c002 	strb.w	ip, [r9, #2]
 802688c:	e792      	b.n	80267b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802688e:	1c42      	adds	r2, r0, #1
 8026890:	d190      	bne.n	80267b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8026892:	9a07      	ldr	r2, [sp, #28]
 8026894:	4282      	cmp	r2, r0
 8026896:	dd8d      	ble.n	80267b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8026898:	1c5a      	adds	r2, r3, #1
 802689a:	db8b      	blt.n	80267b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802689c:	9a08      	ldr	r2, [sp, #32]
 802689e:	429a      	cmp	r2, r3
 80268a0:	dd88      	ble.n	80267b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80268a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80268a4:	9105      	str	r1, [sp, #20]
 80268a6:	4649      	mov	r1, r9
 80268a8:	9002      	str	r0, [sp, #8]
 80268aa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80268ac:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80268b0:	9b08      	ldr	r3, [sp, #32]
 80268b2:	463a      	mov	r2, r7
 80268b4:	9301      	str	r3, [sp, #4]
 80268b6:	9b07      	ldr	r3, [sp, #28]
 80268b8:	9300      	str	r3, [sp, #0]
 80268ba:	4653      	mov	r3, sl
 80268bc:	f7ff fd64 	bl	8026388 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80268c0:	e778      	b.n	80267b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80268c2:	142a      	asrs	r2, r5, #16
 80268c4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80268c8:	1433      	asrs	r3, r6, #16
 80268ca:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80268ce:	fb0a 2303 	mla	r3, sl, r3, r2
 80268d2:	085a      	lsrs	r2, r3, #1
 80268d4:	07d9      	lsls	r1, r3, #31
 80268d6:	5cba      	ldrb	r2, [r7, r2]
 80268d8:	bf54      	ite	pl
 80268da:	f002 020f 	andpl.w	r2, r2, #15
 80268de:	1112      	asrmi	r2, r2, #4
 80268e0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80268e4:	b2d2      	uxtb	r2, r2
 80268e6:	2800      	cmp	r0, #0
 80268e8:	f000 808a 	beq.w	8026a00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 80268ec:	f103 0b01 	add.w	fp, r3, #1
 80268f0:	ea4f 015b 	mov.w	r1, fp, lsr #1
 80268f4:	f01b 0f01 	tst.w	fp, #1
 80268f8:	5c79      	ldrb	r1, [r7, r1]
 80268fa:	bf0c      	ite	eq
 80268fc:	f001 010f 	andeq.w	r1, r1, #15
 8026900:	1109      	asrne	r1, r1, #4
 8026902:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026906:	b2c9      	uxtb	r1, r1
 8026908:	9111      	str	r1, [sp, #68]	; 0x44
 802690a:	f1bc 0f00 	cmp.w	ip, #0
 802690e:	d019      	beq.n	8026944 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8026910:	4453      	add	r3, sl
 8026912:	0859      	lsrs	r1, r3, #1
 8026914:	f013 0f01 	tst.w	r3, #1
 8026918:	f103 0301 	add.w	r3, r3, #1
 802691c:	5c79      	ldrb	r1, [r7, r1]
 802691e:	bf0c      	ite	eq
 8026920:	f001 010f 	andeq.w	r1, r1, #15
 8026924:	1109      	asrne	r1, r1, #4
 8026926:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802692a:	b2c9      	uxtb	r1, r1
 802692c:	910d      	str	r1, [sp, #52]	; 0x34
 802692e:	0859      	lsrs	r1, r3, #1
 8026930:	07db      	lsls	r3, r3, #31
 8026932:	5c79      	ldrb	r1, [r7, r1]
 8026934:	bf54      	ite	pl
 8026936:	f001 010f 	andpl.w	r1, r1, #15
 802693a:	1109      	asrmi	r1, r1, #4
 802693c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026940:	b2c9      	uxtb	r1, r1
 8026942:	9112      	str	r1, [sp, #72]	; 0x48
 8026944:	b280      	uxth	r0, r0
 8026946:	fa1f fc8c 	uxth.w	ip, ip
 802694a:	fb00 f30c 	mul.w	r3, r0, ip
 802694e:	0100      	lsls	r0, r0, #4
 8026950:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8026954:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8026958:	1ac0      	subs	r0, r0, r3
 802695a:	fa1f fc8c 	uxth.w	ip, ip
 802695e:	b280      	uxth	r0, r0
 8026960:	eba1 010c 	sub.w	r1, r1, ip
 8026964:	fa1f fb81 	uxth.w	fp, r1
 8026968:	9911      	ldr	r1, [sp, #68]	; 0x44
 802696a:	4348      	muls	r0, r1
 802696c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802696e:	fb02 020b 	mla	r2, r2, fp, r0
 8026972:	fb0c 2c01 	mla	ip, ip, r1, r2
 8026976:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026978:	fb03 c302 	mla	r3, r3, r2, ip
 802697c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026980:	b3ab      	cbz	r3, 80269ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8026982:	4a2d      	ldr	r2, [pc, #180]	; (8026a38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8026984:	2bff      	cmp	r3, #255	; 0xff
 8026986:	6811      	ldr	r1, [r2, #0]
 8026988:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 802698c:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8026990:	b2c9      	uxtb	r1, r1
 8026992:	d045      	beq.n	8026a20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8026994:	b298      	uxth	r0, r3
 8026996:	43db      	mvns	r3, r3
 8026998:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 802699c:	fb11 f100 	smulbb	r1, r1, r0
 80269a0:	b2db      	uxtb	r3, r3
 80269a2:	fb1c fc00 	smulbb	ip, ip, r0
 80269a6:	fb02 1103 	mla	r1, r2, r3, r1
 80269aa:	fb1b f000 	smulbb	r0, fp, r0
 80269ae:	b289      	uxth	r1, r1
 80269b0:	1c4a      	adds	r2, r1, #1
 80269b2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80269b6:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80269ba:	fb02 cc03 	mla	ip, r2, r3, ip
 80269be:	1209      	asrs	r1, r1, #8
 80269c0:	fa1f fc8c 	uxth.w	ip, ip
 80269c4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80269c8:	f10c 0201 	add.w	r2, ip, #1
 80269cc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80269d0:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 80269d4:	fb02 0303 	mla	r3, r2, r3, r0
 80269d8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80269dc:	b29b      	uxth	r3, r3
 80269de:	f80e cc02 	strb.w	ip, [lr, #-2]
 80269e2:	1c5a      	adds	r2, r3, #1
 80269e4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80269e8:	121b      	asrs	r3, r3, #8
 80269ea:	f80e 3c01 	strb.w	r3, [lr, #-1]
 80269ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80269f0:	f10e 0e03 	add.w	lr, lr, #3
 80269f4:	f109 39ff 	add.w	r9, r9, #4294967295
 80269f8:	441d      	add	r5, r3
 80269fa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80269fc:	441e      	add	r6, r3
 80269fe:	e607      	b.n	8026610 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8026a00:	f1bc 0f00 	cmp.w	ip, #0
 8026a04:	d09e      	beq.n	8026944 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8026a06:	4453      	add	r3, sl
 8026a08:	0859      	lsrs	r1, r3, #1
 8026a0a:	07db      	lsls	r3, r3, #31
 8026a0c:	5c79      	ldrb	r1, [r7, r1]
 8026a0e:	bf54      	ite	pl
 8026a10:	f001 010f 	andpl.w	r1, r1, #15
 8026a14:	1109      	asrmi	r1, r1, #4
 8026a16:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026a1a:	b2c9      	uxtb	r1, r1
 8026a1c:	910d      	str	r1, [sp, #52]	; 0x34
 8026a1e:	e791      	b.n	8026944 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8026a20:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8026a24:	f80e cc02 	strb.w	ip, [lr, #-2]
 8026a28:	f80e bc01 	strb.w	fp, [lr, #-1]
 8026a2c:	e7df      	b.n	80269ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8026a2e:	b015      	add	sp, #84	; 0x54
 8026a30:	ecbd 8b08 	vpop	{d8-d11}
 8026a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a38:	2000b444 	.word	0x2000b444

08026a3c <CRC_Lock>:
 8026a3c:	4a1d      	ldr	r2, [pc, #116]	; (8026ab4 <CRC_Lock+0x78>)
 8026a3e:	b530      	push	{r4, r5, lr}
 8026a40:	6813      	ldr	r3, [r2, #0]
 8026a42:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8026a46:	f24c 2540 	movw	r5, #49728	; 0xc240
 8026a4a:	f023 0301 	bic.w	r3, r3, #1
 8026a4e:	6013      	str	r3, [r2, #0]
 8026a50:	4b19      	ldr	r3, [pc, #100]	; (8026ab8 <CRC_Lock+0x7c>)
 8026a52:	681a      	ldr	r2, [r3, #0]
 8026a54:	4022      	ands	r2, r4
 8026a56:	42aa      	cmp	r2, r5
 8026a58:	d005      	beq.n	8026a66 <CRC_Lock+0x2a>
 8026a5a:	681b      	ldr	r3, [r3, #0]
 8026a5c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8026a60:	4023      	ands	r3, r4
 8026a62:	4293      	cmp	r3, r2
 8026a64:	d11d      	bne.n	8026aa2 <CRC_Lock+0x66>
 8026a66:	4b15      	ldr	r3, [pc, #84]	; (8026abc <CRC_Lock+0x80>)
 8026a68:	681b      	ldr	r3, [r3, #0]
 8026a6a:	b9d3      	cbnz	r3, 8026aa2 <CRC_Lock+0x66>
 8026a6c:	4a14      	ldr	r2, [pc, #80]	; (8026ac0 <CRC_Lock+0x84>)
 8026a6e:	6813      	ldr	r3, [r2, #0]
 8026a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026a74:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8026a78:	d006      	beq.n	8026a88 <CRC_Lock+0x4c>
 8026a7a:	6813      	ldr	r3, [r2, #0]
 8026a7c:	f240 4283 	movw	r2, #1155	; 0x483
 8026a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026a84:	4293      	cmp	r3, r2
 8026a86:	d10c      	bne.n	8026aa2 <CRC_Lock+0x66>
 8026a88:	4b0e      	ldr	r3, [pc, #56]	; (8026ac4 <CRC_Lock+0x88>)
 8026a8a:	2201      	movs	r2, #1
 8026a8c:	601a      	str	r2, [r3, #0]
 8026a8e:	681a      	ldr	r2, [r3, #0]
 8026a90:	2a00      	cmp	r2, #0
 8026a92:	d1fc      	bne.n	8026a8e <CRC_Lock+0x52>
 8026a94:	4b0c      	ldr	r3, [pc, #48]	; (8026ac8 <CRC_Lock+0x8c>)
 8026a96:	6018      	str	r0, [r3, #0]
 8026a98:	6818      	ldr	r0, [r3, #0]
 8026a9a:	1a43      	subs	r3, r0, r1
 8026a9c:	4258      	negs	r0, r3
 8026a9e:	4158      	adcs	r0, r3
 8026aa0:	bd30      	pop	{r4, r5, pc}
 8026aa2:	4b0a      	ldr	r3, [pc, #40]	; (8026acc <CRC_Lock+0x90>)
 8026aa4:	2201      	movs	r2, #1
 8026aa6:	601a      	str	r2, [r3, #0]
 8026aa8:	681a      	ldr	r2, [r3, #0]
 8026aaa:	2a00      	cmp	r2, #0
 8026aac:	d1fc      	bne.n	8026aa8 <CRC_Lock+0x6c>
 8026aae:	4b08      	ldr	r3, [pc, #32]	; (8026ad0 <CRC_Lock+0x94>)
 8026ab0:	e7f1      	b.n	8026a96 <CRC_Lock+0x5a>
 8026ab2:	bf00      	nop
 8026ab4:	e0002000 	.word	0xe0002000
 8026ab8:	e000ed00 	.word	0xe000ed00
 8026abc:	e0042000 	.word	0xe0042000
 8026ac0:	5c001000 	.word	0x5c001000
 8026ac4:	58024c08 	.word	0x58024c08
 8026ac8:	58024c00 	.word	0x58024c00
 8026acc:	40023008 	.word	0x40023008
 8026ad0:	40023000 	.word	0x40023000

08026ad4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8026ad4:	6101      	str	r1, [r0, #16]
 8026ad6:	4770      	bx	lr

08026ad8 <_ZN8touchgfx8Gestures4tickEv>:
 8026ad8:	7b83      	ldrb	r3, [r0, #14]
 8026ada:	b14b      	cbz	r3, 8026af0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8026adc:	8903      	ldrh	r3, [r0, #8]
 8026ade:	3301      	adds	r3, #1
 8026ae0:	b29b      	uxth	r3, r3
 8026ae2:	2b07      	cmp	r3, #7
 8026ae4:	8103      	strh	r3, [r0, #8]
 8026ae6:	bf81      	itttt	hi
 8026ae8:	2300      	movhi	r3, #0
 8026aea:	8143      	strhhi	r3, [r0, #10]
 8026aec:	8183      	strhhi	r3, [r0, #12]
 8026aee:	7383      	strbhi	r3, [r0, #14]
 8026af0:	4770      	bx	lr
	...

08026af4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8026af4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8026af8:	4604      	mov	r4, r0
 8026afa:	4698      	mov	r8, r3
 8026afc:	8880      	ldrh	r0, [r0, #4]
 8026afe:	4617      	mov	r7, r2
 8026b00:	4b1d      	ldr	r3, [pc, #116]	; (8026b78 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8026b02:	460e      	mov	r6, r1
 8026b04:	f8ad 0006 	strh.w	r0, [sp, #6]
 8026b08:	eba8 0000 	sub.w	r0, r8, r0
 8026b0c:	9300      	str	r3, [sp, #0]
 8026b0e:	2300      	movs	r3, #0
 8026b10:	b280      	uxth	r0, r0
 8026b12:	8aa2      	ldrh	r2, [r4, #20]
 8026b14:	f88d 3004 	strb.w	r3, [sp, #4]
 8026b18:	b203      	sxth	r3, r0
 8026b1a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8026b1e:	88e1      	ldrh	r1, [r4, #6]
 8026b20:	2b00      	cmp	r3, #0
 8026b22:	f8ad 800a 	strh.w	r8, [sp, #10]
 8026b26:	f8ad 1008 	strh.w	r1, [sp, #8]
 8026b2a:	bfb8      	it	lt
 8026b2c:	4240      	neglt	r0, r0
 8026b2e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8026b32:	bfb8      	it	lt
 8026b34:	b203      	sxthlt	r3, r0
 8026b36:	4293      	cmp	r3, r2
 8026b38:	dc08      	bgt.n	8026b4c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8026b3a:	1a69      	subs	r1, r5, r1
 8026b3c:	b289      	uxth	r1, r1
 8026b3e:	b20b      	sxth	r3, r1
 8026b40:	2b00      	cmp	r3, #0
 8026b42:	bfbc      	itt	lt
 8026b44:	4249      	neglt	r1, r1
 8026b46:	b20b      	sxthlt	r3, r1
 8026b48:	429a      	cmp	r2, r3
 8026b4a:	da13      	bge.n	8026b74 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8026b4c:	6920      	ldr	r0, [r4, #16]
 8026b4e:	4669      	mov	r1, sp
 8026b50:	eba8 0606 	sub.w	r6, r8, r6
 8026b54:	1bef      	subs	r7, r5, r7
 8026b56:	6803      	ldr	r3, [r0, #0]
 8026b58:	685b      	ldr	r3, [r3, #4]
 8026b5a:	4798      	blx	r3
 8026b5c:	2300      	movs	r3, #0
 8026b5e:	2001      	movs	r0, #1
 8026b60:	8166      	strh	r6, [r4, #10]
 8026b62:	8123      	strh	r3, [r4, #8]
 8026b64:	81a7      	strh	r7, [r4, #12]
 8026b66:	f8a4 8004 	strh.w	r8, [r4, #4]
 8026b6a:	80e5      	strh	r5, [r4, #6]
 8026b6c:	73a0      	strb	r0, [r4, #14]
 8026b6e:	b004      	add	sp, #16
 8026b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026b74:	2000      	movs	r0, #0
 8026b76:	e7fa      	b.n	8026b6e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8026b78:	0802d140 	.word	0x0802d140

08026b7c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8026b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026b7e:	461e      	mov	r6, r3
 8026b80:	1e4b      	subs	r3, r1, #1
 8026b82:	b085      	sub	sp, #20
 8026b84:	4604      	mov	r4, r0
 8026b86:	2b01      	cmp	r3, #1
 8026b88:	460d      	mov	r5, r1
 8026b8a:	4617      	mov	r7, r2
 8026b8c:	d84b      	bhi.n	8026c26 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8026b8e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8026b92:	1cd3      	adds	r3, r2, #3
 8026b94:	b29b      	uxth	r3, r3
 8026b96:	2b06      	cmp	r3, #6
 8026b98:	d916      	bls.n	8026bc8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8026b9a:	f8df c098 	ldr.w	ip, [pc, #152]	; 8026c34 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8026b9e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026ba2:	f8cd c004 	str.w	ip, [sp, #4]
 8026ba6:	f04f 0c00 	mov.w	ip, #0
 8026baa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026bae:	6900      	ldr	r0, [r0, #16]
 8026bb0:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026bb4:	a901      	add	r1, sp, #4
 8026bb6:	f88d c008 	strb.w	ip, [sp, #8]
 8026bba:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026bbe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026bc2:	6803      	ldr	r3, [r0, #0]
 8026bc4:	689b      	ldr	r3, [r3, #8]
 8026bc6:	4798      	blx	r3
 8026bc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026bcc:	1cd3      	adds	r3, r2, #3
 8026bce:	b29b      	uxth	r3, r3
 8026bd0:	2b06      	cmp	r3, #6
 8026bd2:	d916      	bls.n	8026c02 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026bd4:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8026c34 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8026bd8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026bdc:	f8cd c004 	str.w	ip, [sp, #4]
 8026be0:	f04f 0c01 	mov.w	ip, #1
 8026be4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026be8:	6920      	ldr	r0, [r4, #16]
 8026bea:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026bee:	a901      	add	r1, sp, #4
 8026bf0:	f88d c008 	strb.w	ip, [sp, #8]
 8026bf4:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026bf8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026bfc:	6803      	ldr	r3, [r0, #0]
 8026bfe:	689b      	ldr	r3, [r3, #8]
 8026c00:	4798      	blx	r3
 8026c02:	4b0b      	ldr	r3, [pc, #44]	; (8026c30 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8026c04:	a901      	add	r1, sp, #4
 8026c06:	6920      	ldr	r0, [r4, #16]
 8026c08:	9301      	str	r3, [sp, #4]
 8026c0a:	2300      	movs	r3, #0
 8026c0c:	f88d 5008 	strb.w	r5, [sp, #8]
 8026c10:	f8ad 700a 	strh.w	r7, [sp, #10]
 8026c14:	f8ad 600c 	strh.w	r6, [sp, #12]
 8026c18:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026c1c:	6803      	ldr	r3, [r0, #0]
 8026c1e:	681b      	ldr	r3, [r3, #0]
 8026c20:	4798      	blx	r3
 8026c22:	b005      	add	sp, #20
 8026c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026c26:	2900      	cmp	r1, #0
 8026c28:	d1eb      	bne.n	8026c02 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026c2a:	80a2      	strh	r2, [r4, #4]
 8026c2c:	80c6      	strh	r6, [r0, #6]
 8026c2e:	e7e8      	b.n	8026c02 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026c30:	0802d12c 	.word	0x0802d12c
 8026c34:	0802d154 	.word	0x0802d154

08026c38 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>:
 8026c38:	10c9      	asrs	r1, r1, #3
 8026c3a:	2900      	cmp	r1, #0
 8026c3c:	bfb8      	it	lt
 8026c3e:	4249      	neglt	r1, r1
 8026c40:	2801      	cmp	r0, #1
 8026c42:	d108      	bne.n	8026c56 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 8026c44:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8026c48:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8026c4c:	4601      	mov	r1, r0
 8026c4e:	dd02      	ble.n	8026c56 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 8026c50:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8026c54:	4770      	bx	lr
 8026c56:	29ff      	cmp	r1, #255	; 0xff
 8026c58:	bfa8      	it	ge
 8026c5a:	21ff      	movge	r1, #255	; 0xff
 8026c5c:	4608      	mov	r0, r1
 8026c5e:	4770      	bx	lr

08026c60 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8026c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c64:	688c      	ldr	r4, [r1, #8]
 8026c66:	b087      	sub	sp, #28
 8026c68:	4607      	mov	r7, r0
 8026c6a:	2c00      	cmp	r4, #0
 8026c6c:	db2b      	blt.n	8026cc6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8026c6e:	6803      	ldr	r3, [r0, #0]
 8026c70:	691a      	ldr	r2, [r3, #16]
 8026c72:	42a2      	cmp	r2, r4
 8026c74:	dd27      	ble.n	8026cc6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8026c76:	685a      	ldr	r2, [r3, #4]
 8026c78:	695e      	ldr	r6, [r3, #20]
 8026c7a:	68cd      	ldr	r5, [r1, #12]
 8026c7c:	fb06 2604 	mla	r6, r6, r4, r2
 8026c80:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8026c84:	698a      	ldr	r2, [r1, #24]
 8026c86:	f893 a008 	ldrb.w	sl, [r3, #8]
 8026c8a:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8026c8e:	9205      	str	r2, [sp, #20]
 8026c90:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8026c94:	9b05      	ldr	r3, [sp, #20]
 8026c96:	6839      	ldr	r1, [r7, #0]
 8026c98:	eb03 0c02 	add.w	ip, r3, r2
 8026c9c:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8026ca0:	68c9      	ldr	r1, [r1, #12]
 8026ca2:	1898      	adds	r0, r3, r2
 8026ca4:	4288      	cmp	r0, r1
 8026ca6:	db02      	blt.n	8026cae <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8026ca8:	1a8b      	subs	r3, r1, r2
 8026caa:	2b00      	cmp	r3, #0
 8026cac:	dd09      	ble.n	8026cc2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8026cae:	6878      	ldr	r0, [r7, #4]
 8026cb0:	6801      	ldr	r1, [r0, #0]
 8026cb2:	9400      	str	r4, [sp, #0]
 8026cb4:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8026cb8:	4653      	mov	r3, sl
 8026cba:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8026cbe:	4631      	mov	r1, r6
 8026cc0:	47d8      	blx	fp
 8026cc2:	3d01      	subs	r5, #1
 8026cc4:	d1e4      	bne.n	8026c90 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8026cc6:	b007      	add	sp, #28
 8026cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026ccc <_ZN8touchgfx10Rasterizer6lineToEii>:
 8026ccc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8026cd0:	b90b      	cbnz	r3, 8026cd6 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8026cd2:	f001 b970 	b.w	8027fb6 <_ZN8touchgfx7Outline6lineToEii>
 8026cd6:	4770      	bx	lr

08026cd8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8026cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026cdc:	4604      	mov	r4, r0
 8026cde:	2600      	movs	r6, #0
 8026ce0:	4b8e      	ldr	r3, [pc, #568]	; (8026f1c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8026ce2:	f100 0518 	add.w	r5, r0, #24
 8026ce6:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8026cea:	b086      	sub	sp, #24
 8026cec:	4690      	mov	r8, r2
 8026cee:	e9c0 3100 	strd	r3, r1, [r0]
 8026cf2:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8026cf6:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8026cfa:	4628      	mov	r0, r5
 8026cfc:	f001 fb7a 	bl	80283f4 <_ZN8touchgfx15RenderingBufferC1Ev>
 8026d00:	4638      	mov	r0, r7
 8026d02:	f000 fb41 	bl	8027388 <_ZN8touchgfx7OutlineC1Ev>
 8026d06:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8026d0a:	f001 fb1f 	bl	802834c <_ZN8touchgfx8ScanlineC1Ev>
 8026d0e:	2301      	movs	r3, #1
 8026d10:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 8026d14:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8026d18:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8026d1c:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8026d20:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8026d24:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8026d28:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8026d2c:	f7f4 fa62 	bl	801b1f4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8026d30:	b928      	cbnz	r0, 8026d3e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8026d32:	4b7b      	ldr	r3, [pc, #492]	; (8026f20 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8026d34:	2118      	movs	r1, #24
 8026d36:	4a7b      	ldr	r2, [pc, #492]	; (8026f24 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8026d38:	487b      	ldr	r0, [pc, #492]	; (8026f28 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8026d3a:	f001 fba3 	bl	8028484 <__assert_func>
 8026d3e:	f9b8 2000 	ldrsh.w	r2, [r8]
 8026d42:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8026d46:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8026d4a:	4410      	add	r0, r2
 8026d4c:	9602      	str	r6, [sp, #8]
 8026d4e:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8026d52:	b280      	uxth	r0, r0
 8026d54:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8026d58:	fa0f fa80 	sxth.w	sl, r0
 8026d5c:	f1ba 0f00 	cmp.w	sl, #0
 8026d60:	dd70      	ble.n	8026e44 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026d62:	4591      	cmp	r9, r2
 8026d64:	dd6e      	ble.n	8026e44 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026d66:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8026d6a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8026d6e:	440b      	add	r3, r1
 8026d70:	b29b      	uxth	r3, r3
 8026d72:	b21e      	sxth	r6, r3
 8026d74:	2e00      	cmp	r6, #0
 8026d76:	dd65      	ble.n	8026e44 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026d78:	458e      	cmp	lr, r1
 8026d7a:	dd63      	ble.n	8026e44 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026d7c:	45d1      	cmp	r9, sl
 8026d7e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8026d82:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8026d86:	bfb8      	it	lt
 8026d88:	fa1f f089 	uxthlt.w	r0, r9
 8026d8c:	45b6      	cmp	lr, r6
 8026d8e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8026d92:	bfb8      	it	lt
 8026d94:	fa1f f38e 	uxthlt.w	r3, lr
 8026d98:	1a80      	subs	r0, r0, r2
 8026d9a:	f8ad 100a 	strh.w	r1, [sp, #10]
 8026d9e:	1a5b      	subs	r3, r3, r1
 8026da0:	f8ad 000c 	strh.w	r0, [sp, #12]
 8026da4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026da8:	f10d 0808 	add.w	r8, sp, #8
 8026dac:	ae04      	add	r6, sp, #16
 8026dae:	e898 0003 	ldmia.w	r8, {r0, r1}
 8026db2:	e886 0003 	stmia.w	r6, {r0, r1}
 8026db6:	f8dc 3000 	ldr.w	r3, [ip]
 8026dba:	4660      	mov	r0, ip
 8026dbc:	4631      	mov	r1, r6
 8026dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026dc0:	4798      	blx	r3
 8026dc2:	6861      	ldr	r1, [r4, #4]
 8026dc4:	4640      	mov	r0, r8
 8026dc6:	3104      	adds	r1, #4
 8026dc8:	f7f5 f880 	bl	801becc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8026dcc:	4630      	mov	r0, r6
 8026dce:	f7f5 f895 	bl	801befc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8026dd2:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8026dd6:	f7f4 f99d 	bl	801b114 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8026dda:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 8026dde:	4638      	mov	r0, r7
 8026de0:	f000 faae 	bl	8027340 <_ZN8touchgfx7Outline5resetEv>
 8026de4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8026de8:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8026dec:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8026df0:	015b      	lsls	r3, r3, #5
 8026df2:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 8026df6:	0152      	lsls	r2, r2, #5
 8026df8:	60e3      	str	r3, [r4, #12]
 8026dfa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8026dfe:	60a2      	str	r2, [r4, #8]
 8026e00:	015b      	lsls	r3, r3, #5
 8026e02:	6123      	str	r3, [r4, #16]
 8026e04:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8026e08:	015b      	lsls	r3, r3, #5
 8026e0a:	6163      	str	r3, [r4, #20]
 8026e0c:	4b47      	ldr	r3, [pc, #284]	; (8026f2c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8026e0e:	6818      	ldr	r0, [r3, #0]
 8026e10:	6803      	ldr	r3, [r0, #0]
 8026e12:	6a1b      	ldr	r3, [r3, #32]
 8026e14:	4798      	blx	r3
 8026e16:	4606      	mov	r6, r0
 8026e18:	f7e8 feac 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 8026e1c:	6803      	ldr	r3, [r0, #0]
 8026e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026e20:	4798      	blx	r3
 8026e22:	4607      	mov	r7, r0
 8026e24:	f7e8 fea6 	bl	800fb74 <_ZN8touchgfx3HAL3lcdEv>
 8026e28:	6803      	ldr	r3, [r0, #0]
 8026e2a:	6a1b      	ldr	r3, [r3, #32]
 8026e2c:	4798      	blx	r3
 8026e2e:	280c      	cmp	r0, #12
 8026e30:	d854      	bhi.n	8026edc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8026e32:	e8df f000 	tbb	[pc, r0]
 8026e36:	554b      	.short	0x554b
 8026e38:	2b6e0a66 	.word	0x2b6e0a66
 8026e3c:	5f5f5f3b 	.word	0x5f5f5f3b
 8026e40:	5f5f      	.short	0x5f5f
 8026e42:	6e          	.byte	0x6e
 8026e43:	00          	.byte	0x00
 8026e44:	2300      	movs	r3, #0
 8026e46:	9303      	str	r3, [sp, #12]
 8026e48:	e7ae      	b.n	8026da8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8026e4a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026e4e:	2108      	movs	r1, #8
 8026e50:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026e54:	fb92 f1f1 	sdiv	r1, r2, r1
 8026e58:	fb07 1303 	mla	r3, r7, r3, r1
 8026e5c:	441e      	add	r6, r3
 8026e5e:	4253      	negs	r3, r2
 8026e60:	f002 0207 	and.w	r2, r2, #7
 8026e64:	f003 0307 	and.w	r3, r3, #7
 8026e68:	bf58      	it	pl
 8026e6a:	425a      	negpl	r2, r3
 8026e6c:	b2d2      	uxtb	r2, r2
 8026e6e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8026e72:	4628      	mov	r0, r5
 8026e74:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8026e78:	6721      	str	r1, [r4, #112]	; 0x70
 8026e7a:	e9cd 1700 	strd	r1, r7, [sp]
 8026e7e:	4631      	mov	r1, r6
 8026e80:	f001 fac4 	bl	802840c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8026e84:	4620      	mov	r0, r4
 8026e86:	b006      	add	sp, #24
 8026e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026e8c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026e90:	2104      	movs	r1, #4
 8026e92:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026e96:	fb92 f1f1 	sdiv	r1, r2, r1
 8026e9a:	fb07 1303 	mla	r3, r7, r3, r1
 8026e9e:	441e      	add	r6, r3
 8026ea0:	4253      	negs	r3, r2
 8026ea2:	f002 0203 	and.w	r2, r2, #3
 8026ea6:	f003 0303 	and.w	r3, r3, #3
 8026eaa:	e7dd      	b.n	8026e68 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8026eac:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026eb0:	2102      	movs	r1, #2
 8026eb2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026eb6:	2a00      	cmp	r2, #0
 8026eb8:	fb92 f1f1 	sdiv	r1, r2, r1
 8026ebc:	f002 0201 	and.w	r2, r2, #1
 8026ec0:	fb07 1303 	mla	r3, r7, r3, r1
 8026ec4:	bfb8      	it	lt
 8026ec6:	4252      	neglt	r2, r2
 8026ec8:	441e      	add	r6, r3
 8026eca:	e7cf      	b.n	8026e6c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8026ecc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026ed0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026ed4:	437b      	muls	r3, r7
 8026ed6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8026eda:	441e      	add	r6, r3
 8026edc:	2200      	movs	r2, #0
 8026ede:	e7c6      	b.n	8026e6e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8026ee0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026ee4:	2103      	movs	r1, #3
 8026ee6:	fb07 f203 	mul.w	r2, r7, r3
 8026eea:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8026eee:	fb13 2301 	smlabb	r3, r3, r1, r2
 8026ef2:	e7f2      	b.n	8026eda <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8026ef4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026ef8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026efc:	fb07 2303 	mla	r3, r7, r3, r2
 8026f00:	e7eb      	b.n	8026eda <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8026f02:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026f06:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026f0a:	437b      	muls	r3, r7
 8026f0c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026f10:	e7e3      	b.n	8026eda <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8026f12:	4b07      	ldr	r3, [pc, #28]	; (8026f30 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8026f14:	2156      	movs	r1, #86	; 0x56
 8026f16:	4a03      	ldr	r2, [pc, #12]	; (8026f24 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8026f18:	e70e      	b.n	8026d38 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8026f1a:	bf00      	nop
 8026f1c:	0802e500 	.word	0x0802e500
 8026f20:	0802e44a 	.word	0x0802e44a
 8026f24:	0802e508 	.word	0x0802e508
 8026f28:	0802e4a6 	.word	0x0802e4a6
 8026f2c:	2000b41c 	.word	0x2000b41c
 8026f30:	0802e4da 	.word	0x0802e4da

08026f34 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8026f34:	6812      	ldr	r2, [r2, #0]
 8026f36:	2a00      	cmp	r2, #0
 8026f38:	db0b      	blt.n	8026f52 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8026f3a:	9800      	ldr	r0, [sp, #0]
 8026f3c:	6800      	ldr	r0, [r0, #0]
 8026f3e:	4290      	cmp	r0, r2
 8026f40:	bfd4      	ite	le
 8026f42:	2002      	movle	r0, #2
 8026f44:	2000      	movgt	r0, #0
 8026f46:	680a      	ldr	r2, [r1, #0]
 8026f48:	2a00      	cmp	r2, #0
 8026f4a:	da04      	bge.n	8026f56 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8026f4c:	f040 0004 	orr.w	r0, r0, #4
 8026f50:	4770      	bx	lr
 8026f52:	2001      	movs	r0, #1
 8026f54:	e7f7      	b.n	8026f46 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8026f56:	681b      	ldr	r3, [r3, #0]
 8026f58:	4293      	cmp	r3, r2
 8026f5a:	bfd8      	it	le
 8026f5c:	f040 0008 	orrle.w	r0, r0, #8
 8026f60:	4770      	bx	lr
	...

08026f64 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8026f64:	4b07      	ldr	r3, [pc, #28]	; (8026f84 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8026f66:	b510      	push	{r4, lr}
 8026f68:	781b      	ldrb	r3, [r3, #0]
 8026f6a:	2b01      	cmp	r3, #1
 8026f6c:	d108      	bne.n	8026f80 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8026f6e:	6843      	ldr	r3, [r0, #4]
 8026f70:	6814      	ldr	r4, [r2, #0]
 8026f72:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8026f76:	680b      	ldr	r3, [r1, #0]
 8026f78:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8026f7c:	6013      	str	r3, [r2, #0]
 8026f7e:	600c      	str	r4, [r1, #0]
 8026f80:	bd10      	pop	{r4, pc}
 8026f82:	bf00      	nop
 8026f84:	2000b414 	.word	0x2000b414

08026f88 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8026f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026f8a:	b085      	sub	sp, #20
 8026f8c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8026f90:	4604      	mov	r4, r0
 8026f92:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8026f96:	b33b      	cbz	r3, 8026fe8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8026f98:	aa02      	add	r2, sp, #8
 8026f9a:	a903      	add	r1, sp, #12
 8026f9c:	f7ff ffe2 	bl	8026f64 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8026fa0:	68a3      	ldr	r3, [r4, #8]
 8026fa2:	9e03      	ldr	r6, [sp, #12]
 8026fa4:	aa02      	add	r2, sp, #8
 8026fa6:	9f02      	ldr	r7, [sp, #8]
 8026fa8:	a903      	add	r1, sp, #12
 8026faa:	1af6      	subs	r6, r6, r3
 8026fac:	68e3      	ldr	r3, [r4, #12]
 8026fae:	4620      	mov	r0, r4
 8026fb0:	1aff      	subs	r7, r7, r3
 8026fb2:	f104 0314 	add.w	r3, r4, #20
 8026fb6:	9603      	str	r6, [sp, #12]
 8026fb8:	9300      	str	r3, [sp, #0]
 8026fba:	f104 0310 	add.w	r3, r4, #16
 8026fbe:	9702      	str	r7, [sp, #8]
 8026fc0:	f7ff ffb8 	bl	8026f34 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8026fc4:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8026fc8:	4605      	mov	r5, r0
 8026fca:	b97b      	cbnz	r3, 8026fec <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8026fcc:	463a      	mov	r2, r7
 8026fce:	4631      	mov	r1, r6
 8026fd0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8026fd4:	f7ff fe7a 	bl	8026ccc <_ZN8touchgfx10Rasterizer6lineToEii>
 8026fd8:	9b03      	ldr	r3, [sp, #12]
 8026fda:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8026fde:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8026fe2:	9b02      	ldr	r3, [sp, #8]
 8026fe4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8026fe8:	b005      	add	sp, #20
 8026fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026fec:	b110      	cbz	r0, 8026ff4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8026fee:	ea13 0200 	ands.w	r2, r3, r0
 8026ff2:	d11c      	bne.n	802702e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8026ff4:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 8026ff8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8026ffc:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 8027000:	b188      	cbz	r0, 8027026 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8027002:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 8027006:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802700a:	b913      	cbnz	r3, 8027012 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 802700c:	4630      	mov	r0, r6
 802700e:	f001 f802 	bl	8028016 <_ZN8touchgfx7Outline6moveToEii>
 8027012:	2300      	movs	r3, #0
 8027014:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8027018:	2301      	movs	r3, #1
 802701a:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802701e:	4630      	mov	r0, r6
 8027020:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8027024:	e7d6      	b.n	8026fd4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8027026:	4630      	mov	r0, r6
 8027028:	f7ff fe50 	bl	8026ccc <_ZN8touchgfx10Rasterizer6lineToEii>
 802702c:	e7f7      	b.n	802701e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802702e:	4615      	mov	r5, r2
 8027030:	e7d2      	b.n	8026fd8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08027032 <_ZN8touchgfx6Canvas5closeEv>:
 8027032:	b538      	push	{r3, r4, r5, lr}
 8027034:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8027038:	4604      	mov	r4, r0
 802703a:	b993      	cbnz	r3, 8027062 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802703c:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8027040:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 8027044:	4213      	tst	r3, r2
 8027046:	d10c      	bne.n	8027062 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8027048:	f100 0530 	add.w	r5, r0, #48	; 0x30
 802704c:	b123      	cbz	r3, 8027058 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802704e:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 8027052:	4628      	mov	r0, r5
 8027054:	f7ff fe3a 	bl	8026ccc <_ZN8touchgfx10Rasterizer6lineToEii>
 8027058:	4628      	mov	r0, r5
 802705a:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 802705e:	f7ff fe35 	bl	8026ccc <_ZN8touchgfx10Rasterizer6lineToEii>
 8027062:	2300      	movs	r3, #0
 8027064:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8027068:	bd38      	pop	{r3, r4, r5, pc}

0802706a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802706a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802706c:	b085      	sub	sp, #20
 802706e:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8027072:	4604      	mov	r4, r0
 8027074:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8027078:	b353      	cbz	r3, 80270d0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 802707a:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802707e:	b90b      	cbnz	r3, 8027084 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8027080:	f7ff ffd7 	bl	8027032 <_ZN8touchgfx6Canvas5closeEv>
 8027084:	aa02      	add	r2, sp, #8
 8027086:	a903      	add	r1, sp, #12
 8027088:	4620      	mov	r0, r4
 802708a:	f7ff ff6b 	bl	8026f64 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802708e:	68a3      	ldr	r3, [r4, #8]
 8027090:	9d03      	ldr	r5, [sp, #12]
 8027092:	aa02      	add	r2, sp, #8
 8027094:	9e02      	ldr	r6, [sp, #8]
 8027096:	a903      	add	r1, sp, #12
 8027098:	1aed      	subs	r5, r5, r3
 802709a:	68e3      	ldr	r3, [r4, #12]
 802709c:	4620      	mov	r0, r4
 802709e:	1af6      	subs	r6, r6, r3
 80270a0:	f104 0314 	add.w	r3, r4, #20
 80270a4:	9503      	str	r5, [sp, #12]
 80270a6:	9300      	str	r3, [sp, #0]
 80270a8:	f104 0310 	add.w	r3, r4, #16
 80270ac:	9602      	str	r6, [sp, #8]
 80270ae:	f7ff ff41 	bl	8026f34 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80270b2:	4607      	mov	r7, r0
 80270b4:	b170      	cbz	r0, 80270d4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 80270b6:	2301      	movs	r3, #1
 80270b8:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80270bc:	9a03      	ldr	r2, [sp, #12]
 80270be:	9b02      	ldr	r3, [sp, #8]
 80270c0:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 80270c4:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80270c8:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 80270cc:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 80270d0:	b005      	add	sp, #20
 80270d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80270d4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80270d8:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 80270dc:	b92b      	cbnz	r3, 80270ea <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 80270de:	4632      	mov	r2, r6
 80270e0:	4629      	mov	r1, r5
 80270e2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80270e6:	f000 ff96 	bl	8028016 <_ZN8touchgfx7Outline6moveToEii>
 80270ea:	2300      	movs	r3, #0
 80270ec:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80270f0:	2301      	movs	r3, #1
 80270f2:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80270f6:	e7e1      	b.n	80270bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

080270f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 80270f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80270fc:	4604      	mov	r4, r0
 80270fe:	b087      	sub	sp, #28
 8027100:	9105      	str	r1, [sp, #20]
 8027102:	f001 f8cc 	bl	802829e <_ZN8touchgfx7Outline8getCellsEv>
 8027106:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802710a:	4605      	mov	r5, r0
 802710c:	f1b9 0f00 	cmp.w	r9, #0
 8027110:	d103      	bne.n	802711a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8027112:	2001      	movs	r0, #1
 8027114:	b007      	add	sp, #28
 8027116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802711a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802711e:	2e00      	cmp	r6, #0
 8027120:	d139      	bne.n	8027196 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8027122:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8027126:	f105 0708 	add.w	r7, r5, #8
 802712a:	4640      	mov	r0, r8
 802712c:	f001 f8f9 	bl	8028322 <_ZN8touchgfx8Scanline5resetEv>
 8027130:	f109 33ff 	add.w	r3, r9, #4294967295
 8027134:	9303      	str	r3, [sp, #12]
 8027136:	f9b5 b000 	ldrsh.w	fp, [r5]
 802713a:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802713e:	46da      	mov	sl, fp
 8027140:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8027144:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8027148:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 802714c:	9b03      	ldr	r3, [sp, #12]
 802714e:	4416      	add	r6, r2
 8027150:	9504      	str	r5, [sp, #16]
 8027152:	463d      	mov	r5, r7
 8027154:	3b01      	subs	r3, #1
 8027156:	9303      	str	r3, [sp, #12]
 8027158:	3301      	adds	r3, #1
 802715a:	d01e      	beq.n	802719a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 802715c:	3708      	adds	r7, #8
 802715e:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8027162:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8027166:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 802716a:	4290      	cmp	r0, r2
 802716c:	d11e      	bne.n	80271ac <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802716e:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8027172:	4411      	add	r1, r2
 8027174:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8027178:	e7e8      	b.n	802714c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 802717a:	1c91      	adds	r1, r2, #2
 802717c:	f04f 0301 	mov.w	r3, #1
 8027180:	65e1      	str	r1, [r4, #92]	; 0x5c
 8027182:	8053      	strh	r3, [r2, #2]
 8027184:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8027186:	1c91      	adds	r1, r2, #2
 8027188:	65a1      	str	r1, [r4, #88]	; 0x58
 802718a:	f8a2 b002 	strh.w	fp, [r2, #2]
 802718e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8027190:	3201      	adds	r2, #1
 8027192:	6562      	str	r2, [r4, #84]	; 0x54
 8027194:	e03a      	b.n	802720c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8027196:	2000      	movs	r0, #0
 8027198:	e7bc      	b.n	8027114 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 802719a:	b951      	cbnz	r1, 80271b2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 802719c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802719e:	2b00      	cmp	r3, #0
 80271a0:	d0b7      	beq.n	8027112 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80271a2:	4641      	mov	r1, r8
 80271a4:	9805      	ldr	r0, [sp, #20]
 80271a6:	f7ff fd5b 	bl	8026c60 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80271aa:	e7b2      	b.n	8027112 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80271ac:	2900      	cmp	r1, #0
 80271ae:	d035      	beq.n	802721c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 80271b0:	9504      	str	r5, [sp, #16]
 80271b2:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 80271b6:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80271ba:	f7ff fd3d 	bl	8026c38 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 80271be:	4605      	mov	r5, r0
 80271c0:	b330      	cbz	r0, 8027210 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80271c2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80271c4:	b182      	cbz	r2, 80271e8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80271c6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80271c8:	454a      	cmp	r2, r9
 80271ca:	d00d      	beq.n	80271e8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80271cc:	4641      	mov	r1, r8
 80271ce:	9805      	ldr	r0, [sp, #20]
 80271d0:	f7ff fd46 	bl	8026c60 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80271d4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80271d8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80271da:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80271de:	65e2      	str	r2, [r4, #92]	; 0x5c
 80271e0:	2300      	movs	r3, #0
 80271e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80271e4:	6563      	str	r3, [r4, #84]	; 0x54
 80271e6:	65a2      	str	r2, [r4, #88]	; 0x58
 80271e8:	f1bb 0f00 	cmp.w	fp, #0
 80271ec:	db10      	blt.n	8027210 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80271ee:	f7f4 f80f 	bl	801b210 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80271f2:	4583      	cmp	fp, r0
 80271f4:	d20c      	bcs.n	8027210 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80271f6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80271f8:	f802 500b 	strb.w	r5, [r2, fp]
 80271fc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80271fe:	3201      	adds	r2, #1
 8027200:	455a      	cmp	r2, fp
 8027202:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8027204:	d1b9      	bne.n	802717a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8027206:	8811      	ldrh	r1, [r2, #0]
 8027208:	3101      	adds	r1, #1
 802720a:	8011      	strh	r1, [r2, #0]
 802720c:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8027210:	9b03      	ldr	r3, [sp, #12]
 8027212:	3301      	adds	r3, #1
 8027214:	d0c2      	beq.n	802719c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8027216:	f10b 0a01 	add.w	sl, fp, #1
 802721a:	9d04      	ldr	r5, [sp, #16]
 802721c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8027220:	4553      	cmp	r3, sl
 8027222:	dd88      	ble.n	8027136 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8027224:	01b1      	lsls	r1, r6, #6
 8027226:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802722a:	f7ff fd05 	bl	8026c38 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 802722e:	4683      	mov	fp, r0
 8027230:	2800      	cmp	r0, #0
 8027232:	d080      	beq.n	8027136 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8027234:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8027236:	b183      	cbz	r3, 802725a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8027238:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802723a:	454b      	cmp	r3, r9
 802723c:	d00d      	beq.n	802725a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802723e:	4641      	mov	r1, r8
 8027240:	9805      	ldr	r0, [sp, #20]
 8027242:	f7ff fd0d 	bl	8026c60 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8027246:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802724a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802724e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8027250:	65e3      	str	r3, [r4, #92]	; 0x5c
 8027252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027254:	65a3      	str	r3, [r4, #88]	; 0x58
 8027256:	2300      	movs	r3, #0
 8027258:	6563      	str	r3, [r4, #84]	; 0x54
 802725a:	f9b5 3000 	ldrsh.w	r3, [r5]
 802725e:	464a      	mov	r2, r9
 8027260:	f8cd b000 	str.w	fp, [sp]
 8027264:	4651      	mov	r1, sl
 8027266:	eba3 030a 	sub.w	r3, r3, sl
 802726a:	4640      	mov	r0, r8
 802726c:	f001 f880 	bl	8028370 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8027270:	e761      	b.n	8027136 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08027272 <_ZN8touchgfx6Canvas6renderEv>:
 8027272:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027274:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8027278:	4604      	mov	r4, r0
 802727a:	b913      	cbnz	r3, 8027282 <_ZN8touchgfx6Canvas6renderEv+0x10>
 802727c:	2001      	movs	r0, #1
 802727e:	b003      	add	sp, #12
 8027280:	bd30      	pop	{r4, r5, pc}
 8027282:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8027286:	2b00      	cmp	r3, #0
 8027288:	d12e      	bne.n	80272e8 <_ZN8touchgfx6Canvas6renderEv+0x76>
 802728a:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 802728e:	2b00      	cmp	r3, #0
 8027290:	d0f4      	beq.n	802727c <_ZN8touchgfx6Canvas6renderEv+0xa>
 8027292:	6840      	ldr	r0, [r0, #4]
 8027294:	6803      	ldr	r3, [r0, #0]
 8027296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8027298:	4798      	blx	r3
 802729a:	2800      	cmp	r0, #0
 802729c:	d0ee      	beq.n	802727c <_ZN8touchgfx6Canvas6renderEv+0xa>
 802729e:	4620      	mov	r0, r4
 80272a0:	f7ff fec7 	bl	8027032 <_ZN8touchgfx6Canvas5closeEv>
 80272a4:	6860      	ldr	r0, [r4, #4]
 80272a6:	6803      	ldr	r3, [r0, #0]
 80272a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80272aa:	4798      	blx	r3
 80272ac:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 80272b0:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 80272b4:	8082      	strh	r2, [r0, #4]
 80272b6:	80c3      	strh	r3, [r0, #6]
 80272b8:	6860      	ldr	r0, [r4, #4]
 80272ba:	6803      	ldr	r3, [r0, #0]
 80272bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80272be:	4798      	blx	r3
 80272c0:	4605      	mov	r5, r0
 80272c2:	6860      	ldr	r0, [r4, #4]
 80272c4:	6803      	ldr	r3, [r0, #0]
 80272c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80272c8:	4798      	blx	r3
 80272ca:	7228      	strb	r0, [r5, #8]
 80272cc:	6860      	ldr	r0, [r4, #4]
 80272ce:	6803      	ldr	r3, [r0, #0]
 80272d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80272d2:	4798      	blx	r3
 80272d4:	f104 0318 	add.w	r3, r4, #24
 80272d8:	4669      	mov	r1, sp
 80272da:	e9cd 3000 	strd	r3, r0, [sp]
 80272de:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80272e2:	f7ff ff09 	bl	80270f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 80272e6:	e7ca      	b.n	802727e <_ZN8touchgfx6Canvas6renderEv+0xc>
 80272e8:	2000      	movs	r0, #0
 80272ea:	e7c8      	b.n	802727e <_ZN8touchgfx6Canvas6renderEv+0xc>

080272ec <_ZN8touchgfx6CanvasD1Ev>:
 80272ec:	b538      	push	{r3, r4, r5, lr}
 80272ee:	4605      	mov	r5, r0
 80272f0:	4b08      	ldr	r3, [pc, #32]	; (8027314 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 80272f2:	4604      	mov	r4, r0
 80272f4:	f845 3b30 	str.w	r3, [r5], #48
 80272f8:	4b07      	ldr	r3, [pc, #28]	; (8027318 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 80272fa:	6818      	ldr	r0, [r3, #0]
 80272fc:	6803      	ldr	r3, [r0, #0]
 80272fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027300:	4798      	blx	r3
 8027302:	4628      	mov	r0, r5
 8027304:	f000 f814 	bl	8027330 <_ZN8touchgfx7OutlineD1Ev>
 8027308:	f104 0018 	add.w	r0, r4, #24
 802730c:	f001 f869 	bl	80283e2 <_ZN8touchgfx15RenderingBufferD1Ev>
 8027310:	4620      	mov	r0, r4
 8027312:	bd38      	pop	{r3, r4, r5, pc}
 8027314:	0802e500 	.word	0x0802e500
 8027318:	2000b41c 	.word	0x2000b41c

0802731c <_ZN8touchgfx6CanvasD0Ev>:
 802731c:	b510      	push	{r4, lr}
 802731e:	4604      	mov	r4, r0
 8027320:	f7ff ffe4 	bl	80272ec <_ZN8touchgfx6CanvasD1Ev>
 8027324:	21bc      	movs	r1, #188	; 0xbc
 8027326:	4620      	mov	r0, r4
 8027328:	f001 f880 	bl	802842c <_ZdlPvj>
 802732c:	4620      	mov	r0, r4
 802732e:	bd10      	pop	{r4, pc}

08027330 <_ZN8touchgfx7OutlineD1Ev>:
 8027330:	4770      	bx	lr

08027332 <_ZN8touchgfx7OutlineD0Ev>:
 8027332:	b510      	push	{r4, lr}
 8027334:	4604      	mov	r4, r0
 8027336:	2148      	movs	r1, #72	; 0x48
 8027338:	f001 f878 	bl	802842c <_ZdlPvj>
 802733c:	4620      	mov	r0, r4
 802733e:	bd10      	pop	{r4, pc}

08027340 <_ZN8touchgfx7Outline5resetEv>:
 8027340:	b510      	push	{r4, lr}
 8027342:	4604      	mov	r4, r0
 8027344:	f7f3 ff7c 	bl	801b240 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8027348:	60e0      	str	r0, [r4, #12]
 802734a:	f7f3 ff7f 	bl	801b24c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802734e:	68e3      	ldr	r3, [r4, #12]
 8027350:	2200      	movs	r2, #0
 8027352:	08c0      	lsrs	r0, r0, #3
 8027354:	6123      	str	r3, [r4, #16]
 8027356:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802735a:	6060      	str	r0, [r4, #4]
 802735c:	82a3      	strh	r3, [r4, #20]
 802735e:	82e3      	strh	r3, [r4, #22]
 8027360:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027362:	60a2      	str	r2, [r4, #8]
 8027364:	f023 0301 	bic.w	r3, r3, #1
 8027368:	8322      	strh	r2, [r4, #24]
 802736a:	8362      	strh	r2, [r4, #26]
 802736c:	f043 0302 	orr.w	r3, r3, #2
 8027370:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027374:	63e3      	str	r3, [r4, #60]	; 0x3c
 8027376:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802737a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802737e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8027382:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8027386:	bd10      	pop	{r4, pc}

08027388 <_ZN8touchgfx7OutlineC1Ev>:
 8027388:	4b0f      	ldr	r3, [pc, #60]	; (80273c8 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802738a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802738e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8027392:	b510      	push	{r4, lr}
 8027394:	6003      	str	r3, [r0, #0]
 8027396:	2300      	movs	r3, #0
 8027398:	4604      	mov	r4, r0
 802739a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802739e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80273a2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80273a6:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80273aa:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80273ae:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 80273b2:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80273b6:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 80273ba:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 80273be:	f7ff ffbf 	bl	8027340 <_ZN8touchgfx7Outline5resetEv>
 80273c2:	4620      	mov	r0, r4
 80273c4:	bd10      	pop	{r4, pc}
 80273c6:	bf00      	nop
 80273c8:	0802e560 	.word	0x0802e560

080273cc <_ZN8touchgfx7Outline10renderLineEiiii>:
 80273cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80273d0:	b093      	sub	sp, #76	; 0x4c
 80273d2:	4604      	mov	r4, r0
 80273d4:	1156      	asrs	r6, r2, #5
 80273d6:	f002 0e1f 	and.w	lr, r2, #31
 80273da:	981c      	ldr	r0, [sp, #112]	; 0x70
 80273dc:	9305      	str	r3, [sp, #20]
 80273de:	1143      	asrs	r3, r0, #5
 80273e0:	1145      	asrs	r5, r0, #5
 80273e2:	930c      	str	r3, [sp, #48]	; 0x30
 80273e4:	f000 031f 	and.w	r3, r0, #31
 80273e8:	9303      	str	r3, [sp, #12]
 80273ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80273ec:	42b3      	cmp	r3, r6
 80273ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80273f0:	bfc8      	it	gt
 80273f2:	6326      	strgt	r6, [r4, #48]	; 0x30
 80273f4:	42b3      	cmp	r3, r6
 80273f6:	bfdc      	itt	le
 80273f8:	1c73      	addle	r3, r6, #1
 80273fa:	63a3      	strle	r3, [r4, #56]	; 0x38
 80273fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80273fe:	42ab      	cmp	r3, r5
 8027400:	bfc8      	it	gt
 8027402:	462b      	movgt	r3, r5
 8027404:	ea4f 1560 	mov.w	r5, r0, asr #5
 8027408:	bfc8      	it	gt
 802740a:	6323      	strgt	r3, [r4, #48]	; 0x30
 802740c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802740e:	42ab      	cmp	r3, r5
 8027410:	bfd8      	it	le
 8027412:	462b      	movle	r3, r5
 8027414:	ea4f 1561 	mov.w	r5, r1, asr #5
 8027418:	bfdc      	itt	le
 802741a:	3301      	addle	r3, #1
 802741c:	63a3      	strle	r3, [r4, #56]	; 0x38
 802741e:	9b05      	ldr	r3, [sp, #20]
 8027420:	eba3 0a01 	sub.w	sl, r3, r1
 8027424:	1143      	asrs	r3, r0, #5
 8027426:	429e      	cmp	r6, r3
 8027428:	f040 8119 	bne.w	802765e <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 802742c:	9b05      	ldr	r3, [sp, #20]
 802742e:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8027432:	9b03      	ldr	r3, [sp, #12]
 8027434:	459e      	cmp	lr, r3
 8027436:	d12c      	bne.n	8027492 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8027438:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802743c:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8027440:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8027444:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8027448:	4291      	cmp	r1, r2
 802744a:	d037      	beq.n	80274bc <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802744c:	8b61      	ldrh	r1, [r4, #26]
 802744e:	8b22      	ldrh	r2, [r4, #24]
 8027450:	430a      	orrs	r2, r1
 8027452:	d00b      	beq.n	802746c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8027454:	2b00      	cmp	r3, #0
 8027456:	db09      	blt.n	802746c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8027458:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802745a:	429a      	cmp	r2, r3
 802745c:	dd06      	ble.n	802746c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802745e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8027462:	429a      	cmp	r2, r3
 8027464:	d308      	bcc.n	8027478 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 8027466:	2301      	movs	r3, #1
 8027468:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802746c:	f8a4 c014 	strh.w	ip, [r4, #20]
 8027470:	82e6      	strh	r6, [r4, #22]
 8027472:	2300      	movs	r3, #0
 8027474:	8323      	strh	r3, [r4, #24]
 8027476:	e0c6      	b.n	8027606 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8027478:	f104 0314 	add.w	r3, r4, #20
 802747c:	6922      	ldr	r2, [r4, #16]
 802747e:	cb03      	ldmia	r3!, {r0, r1}
 8027480:	6010      	str	r0, [r2, #0]
 8027482:	6051      	str	r1, [r2, #4]
 8027484:	6923      	ldr	r3, [r4, #16]
 8027486:	3308      	adds	r3, #8
 8027488:	6123      	str	r3, [r4, #16]
 802748a:	68a3      	ldr	r3, [r4, #8]
 802748c:	3301      	adds	r3, #1
 802748e:	60a3      	str	r3, [r4, #8]
 8027490:	e7ec      	b.n	802746c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8027492:	9b05      	ldr	r3, [sp, #20]
 8027494:	45ac      	cmp	ip, r5
 8027496:	f001 011f 	and.w	r1, r1, #31
 802749a:	8b20      	ldrh	r0, [r4, #24]
 802749c:	f003 031f 	and.w	r3, r3, #31
 80274a0:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80274a4:	9304      	str	r3, [sp, #16]
 80274a6:	9b03      	ldr	r3, [sp, #12]
 80274a8:	eba3 020e 	sub.w	r2, r3, lr
 80274ac:	d109      	bne.n	80274c2 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 80274ae:	9b04      	ldr	r3, [sp, #16]
 80274b0:	4410      	add	r0, r2
 80274b2:	4419      	add	r1, r3
 80274b4:	8320      	strh	r0, [r4, #24]
 80274b6:	fb02 8201 	mla	r2, r2, r1, r8
 80274ba:	8362      	strh	r2, [r4, #26]
 80274bc:	b013      	add	sp, #76	; 0x4c
 80274be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80274c2:	f1ba 0f00 	cmp.w	sl, #0
 80274c6:	f2c0 80a0 	blt.w	802760a <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 80274ca:	f1c1 0320 	rsb	r3, r1, #32
 80274ce:	f04f 0b20 	mov.w	fp, #32
 80274d2:	435a      	muls	r2, r3
 80274d4:	2301      	movs	r3, #1
 80274d6:	9302      	str	r3, [sp, #8]
 80274d8:	4459      	add	r1, fp
 80274da:	fb92 f7fa 	sdiv	r7, r2, sl
 80274de:	fb0a 2217 	mls	r2, sl, r7, r2
 80274e2:	2a00      	cmp	r2, #0
 80274e4:	bfbc      	itt	lt
 80274e6:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80274ea:	4452      	addlt	r2, sl
 80274ec:	fb07 8101 	mla	r1, r7, r1, r8
 80274f0:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80274f4:	4438      	add	r0, r7
 80274f6:	b20b      	sxth	r3, r1
 80274f8:	9902      	ldr	r1, [sp, #8]
 80274fa:	b200      	sxth	r0, r0
 80274fc:	9301      	str	r3, [sp, #4]
 80274fe:	8363      	strh	r3, [r4, #26]
 8027500:	186b      	adds	r3, r5, r1
 8027502:	0435      	lsls	r5, r6, #16
 8027504:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8027508:	8320      	strh	r0, [r4, #24]
 802750a:	eb03 0905 	add.w	r9, r3, r5
 802750e:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8027512:	9300      	str	r3, [sp, #0]
 8027514:	45c1      	cmp	r9, r8
 8027516:	9505      	str	r5, [sp, #20]
 8027518:	d014      	beq.n	8027544 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 802751a:	9b01      	ldr	r3, [sp, #4]
 802751c:	4303      	orrs	r3, r0
 802751e:	d00b      	beq.n	8027538 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8027520:	2900      	cmp	r1, #0
 8027522:	db09      	blt.n	8027538 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8027524:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027526:	428b      	cmp	r3, r1
 8027528:	dd06      	ble.n	8027538 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802752a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802752e:	4299      	cmp	r1, r3
 8027530:	d374      	bcc.n	802761c <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8027532:	2301      	movs	r3, #1
 8027534:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027538:	9b00      	ldr	r3, [sp, #0]
 802753a:	82e6      	strh	r6, [r4, #22]
 802753c:	82a3      	strh	r3, [r4, #20]
 802753e:	2300      	movs	r3, #0
 8027540:	8323      	strh	r3, [r4, #24]
 8027542:	8363      	strh	r3, [r4, #26]
 8027544:	9900      	ldr	r1, [sp, #0]
 8027546:	eb0e 0307 	add.w	r3, lr, r7
 802754a:	458c      	cmp	ip, r1
 802754c:	d04e      	beq.n	80275ec <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 802754e:	9903      	ldr	r1, [sp, #12]
 8027550:	eba2 020a 	sub.w	r2, r2, sl
 8027554:	1ac9      	subs	r1, r1, r3
 8027556:	9201      	str	r2, [sp, #4]
 8027558:	440f      	add	r7, r1
 802755a:	017f      	lsls	r7, r7, #5
 802755c:	fb97 fefa 	sdiv	lr, r7, sl
 8027560:	fb0a 771e 	mls	r7, sl, lr, r7
 8027564:	2f00      	cmp	r7, #0
 8027566:	bfbc      	itt	lt
 8027568:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802756c:	4457      	addlt	r7, sl
 802756e:	f10e 0101 	add.w	r1, lr, #1
 8027572:	9106      	str	r1, [sp, #24]
 8027574:	9a01      	ldr	r2, [sp, #4]
 8027576:	8b20      	ldrh	r0, [r4, #24]
 8027578:	19d2      	adds	r2, r2, r7
 802757a:	8b61      	ldrh	r1, [r4, #26]
 802757c:	9d02      	ldr	r5, [sp, #8]
 802757e:	9201      	str	r2, [sp, #4]
 8027580:	bf5b      	ittet	pl
 8027582:	eba2 020a 	subpl.w	r2, r2, sl
 8027586:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 802758a:	46f0      	movmi	r8, lr
 802758c:	9201      	strpl	r2, [sp, #4]
 802758e:	9a00      	ldr	r2, [sp, #0]
 8027590:	4440      	add	r0, r8
 8027592:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8027596:	4443      	add	r3, r8
 8027598:	442a      	add	r2, r5
 802759a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802759e:	9d05      	ldr	r5, [sp, #20]
 80275a0:	b200      	sxth	r0, r0
 80275a2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80275a6:	b209      	sxth	r1, r1
 80275a8:	4415      	add	r5, r2
 80275aa:	8320      	strh	r0, [r4, #24]
 80275ac:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80275b0:	8361      	strh	r1, [r4, #26]
 80275b2:	9200      	str	r2, [sp, #0]
 80275b4:	454d      	cmp	r5, r9
 80275b6:	d016      	beq.n	80275e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 80275b8:	4301      	orrs	r1, r0
 80275ba:	d00d      	beq.n	80275d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80275bc:	f1b8 0f00 	cmp.w	r8, #0
 80275c0:	db0a      	blt.n	80275d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80275c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80275c4:	4541      	cmp	r1, r8
 80275c6:	dd07      	ble.n	80275d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80275c8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80275cc:	4288      	cmp	r0, r1
 80275ce:	d335      	bcc.n	802763c <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 80275d0:	f04f 0101 	mov.w	r1, #1
 80275d4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80275d8:	9900      	ldr	r1, [sp, #0]
 80275da:	82e6      	strh	r6, [r4, #22]
 80275dc:	82a1      	strh	r1, [r4, #20]
 80275de:	f04f 0100 	mov.w	r1, #0
 80275e2:	8321      	strh	r1, [r4, #24]
 80275e4:	8361      	strh	r1, [r4, #26]
 80275e6:	9a00      	ldr	r2, [sp, #0]
 80275e8:	4594      	cmp	ip, r2
 80275ea:	d1c3      	bne.n	8027574 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 80275ec:	9a03      	ldr	r2, [sp, #12]
 80275ee:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 80275f2:	1ad3      	subs	r3, r2, r3
 80275f4:	8b22      	ldrh	r2, [r4, #24]
 80275f6:	441a      	add	r2, r3
 80275f8:	8322      	strh	r2, [r4, #24]
 80275fa:	9a04      	ldr	r2, [sp, #16]
 80275fc:	3220      	adds	r2, #32
 80275fe:	eba2 020b 	sub.w	r2, r2, fp
 8027602:	fb03 c302 	mla	r3, r3, r2, ip
 8027606:	8363      	strh	r3, [r4, #26]
 8027608:	e758      	b.n	80274bc <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802760a:	f04f 33ff 	mov.w	r3, #4294967295
 802760e:	434a      	muls	r2, r1
 8027610:	f1ca 0a00 	rsb	sl, sl, #0
 8027614:	f04f 0b00 	mov.w	fp, #0
 8027618:	9302      	str	r3, [sp, #8]
 802761a:	e75d      	b.n	80274d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 802761c:	f104 0314 	add.w	r3, r4, #20
 8027620:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8027624:	cb03      	ldmia	r3!, {r0, r1}
 8027626:	f8c8 0000 	str.w	r0, [r8]
 802762a:	f8c8 1004 	str.w	r1, [r8, #4]
 802762e:	6923      	ldr	r3, [r4, #16]
 8027630:	3308      	adds	r3, #8
 8027632:	6123      	str	r3, [r4, #16]
 8027634:	68a3      	ldr	r3, [r4, #8]
 8027636:	3301      	adds	r3, #1
 8027638:	60a3      	str	r3, [r4, #8]
 802763a:	e77d      	b.n	8027538 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802763c:	f104 0814 	add.w	r8, r4, #20
 8027640:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8027644:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8027648:	f8c9 0000 	str.w	r0, [r9]
 802764c:	f8c9 1004 	str.w	r1, [r9, #4]
 8027650:	6921      	ldr	r1, [r4, #16]
 8027652:	3108      	adds	r1, #8
 8027654:	6121      	str	r1, [r4, #16]
 8027656:	68a1      	ldr	r1, [r4, #8]
 8027658:	3101      	adds	r1, #1
 802765a:	60a1      	str	r1, [r4, #8]
 802765c:	e7bc      	b.n	80275d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802765e:	1a83      	subs	r3, r0, r2
 8027660:	9301      	str	r3, [sp, #4]
 8027662:	f1ba 0f00 	cmp.w	sl, #0
 8027666:	f040 8094 	bne.w	8027792 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 802766a:	9a01      	ldr	r2, [sp, #4]
 802766c:	0049      	lsls	r1, r1, #1
 802766e:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8027672:	2a00      	cmp	r2, #0
 8027674:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8027678:	8b62      	ldrh	r2, [r4, #26]
 802767a:	bfaa      	itet	ge
 802767c:	f04f 0a20 	movge.w	sl, #32
 8027680:	f04f 38ff 	movlt.w	r8, #4294967295
 8027684:	f04f 0801 	movge.w	r8, #1
 8027688:	8b21      	ldrh	r1, [r4, #24]
 802768a:	ebaa 0e0e 	sub.w	lr, sl, lr
 802768e:	4471      	add	r1, lr
 8027690:	fb0e 2e03 	mla	lr, lr, r3, r2
 8027694:	eb08 0206 	add.w	r2, r8, r6
 8027698:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 802769c:	b209      	sxth	r1, r1
 802769e:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 80276a2:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 80276a6:	8321      	strh	r1, [r4, #24]
 80276a8:	fa0f fe8e 	sxth.w	lr, lr
 80276ac:	42b7      	cmp	r7, r6
 80276ae:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80276b2:	d013      	beq.n	80276dc <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 80276b4:	ea51 010e 	orrs.w	r1, r1, lr
 80276b8:	d00b      	beq.n	80276d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80276ba:	2800      	cmp	r0, #0
 80276bc:	db09      	blt.n	80276d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80276be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80276c0:	4281      	cmp	r1, r0
 80276c2:	dd06      	ble.n	80276d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80276c4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80276c8:	4288      	cmp	r0, r1
 80276ca:	d339      	bcc.n	8027740 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 80276cc:	2101      	movs	r1, #1
 80276ce:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80276d2:	2100      	movs	r1, #0
 80276d4:	82a5      	strh	r5, [r4, #20]
 80276d6:	82e2      	strh	r2, [r4, #22]
 80276d8:	8321      	strh	r1, [r4, #24]
 80276da:	8361      	strh	r1, [r4, #26]
 80276dc:	f1aa 0610 	sub.w	r6, sl, #16
 80276e0:	f04f 0e00 	mov.w	lr, #0
 80276e4:	f04f 0b01 	mov.w	fp, #1
 80276e8:	0076      	lsls	r6, r6, #1
 80276ea:	fb06 f703 	mul.w	r7, r6, r3
 80276ee:	b236      	sxth	r6, r6
 80276f0:	b23f      	sxth	r7, r7
 80276f2:	ea46 0107 	orr.w	r1, r6, r7
 80276f6:	9100      	str	r1, [sp, #0]
 80276f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80276fa:	428a      	cmp	r2, r1
 80276fc:	d03e      	beq.n	802777c <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 80276fe:	4442      	add	r2, r8
 8027700:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8027704:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8027708:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 802770c:	8326      	strh	r6, [r4, #24]
 802770e:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8027712:	8367      	strh	r7, [r4, #26]
 8027714:	4584      	cmp	ip, r0
 8027716:	d0ef      	beq.n	80276f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8027718:	9800      	ldr	r0, [sp, #0]
 802771a:	b150      	cbz	r0, 8027732 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802771c:	2900      	cmp	r1, #0
 802771e:	db08      	blt.n	8027732 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8027720:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8027722:	4288      	cmp	r0, r1
 8027724:	dd05      	ble.n	8027732 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8027726:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802772a:	4288      	cmp	r0, r1
 802772c:	d315      	bcc.n	802775a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802772e:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8027732:	82a5      	strh	r5, [r4, #20]
 8027734:	82e2      	strh	r2, [r4, #22]
 8027736:	f8a4 e018 	strh.w	lr, [r4, #24]
 802773a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802773e:	e7db      	b.n	80276f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8027740:	f104 0614 	add.w	r6, r4, #20
 8027744:	6927      	ldr	r7, [r4, #16]
 8027746:	ce03      	ldmia	r6!, {r0, r1}
 8027748:	6038      	str	r0, [r7, #0]
 802774a:	6079      	str	r1, [r7, #4]
 802774c:	6921      	ldr	r1, [r4, #16]
 802774e:	3108      	adds	r1, #8
 8027750:	6121      	str	r1, [r4, #16]
 8027752:	68a1      	ldr	r1, [r4, #8]
 8027754:	3101      	adds	r1, #1
 8027756:	60a1      	str	r1, [r4, #8]
 8027758:	e7bb      	b.n	80276d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802775a:	f104 0c14 	add.w	ip, r4, #20
 802775e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8027762:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8027766:	f8c9 0000 	str.w	r0, [r9]
 802776a:	f8c9 1004 	str.w	r1, [r9, #4]
 802776e:	6921      	ldr	r1, [r4, #16]
 8027770:	3108      	adds	r1, #8
 8027772:	6121      	str	r1, [r4, #16]
 8027774:	68a1      	ldr	r1, [r4, #8]
 8027776:	3101      	adds	r1, #1
 8027778:	60a1      	str	r1, [r4, #8]
 802777a:	e7da      	b.n	8027732 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802777c:	9a03      	ldr	r2, [sp, #12]
 802777e:	8b61      	ldrh	r1, [r4, #26]
 8027780:	f1a2 0c20 	sub.w	ip, r2, #32
 8027784:	8b22      	ldrh	r2, [r4, #24]
 8027786:	44d4      	add	ip, sl
 8027788:	4462      	add	r2, ip
 802778a:	fb0c 1303 	mla	r3, ip, r3, r1
 802778e:	8322      	strh	r2, [r4, #24]
 8027790:	e739      	b.n	8027606 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8027792:	9b01      	ldr	r3, [sp, #4]
 8027794:	2b00      	cmp	r3, #0
 8027796:	db3f      	blt.n	8027818 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8027798:	2201      	movs	r2, #1
 802779a:	f1ce 0320 	rsb	r3, lr, #32
 802779e:	920b      	str	r2, [sp, #44]	; 0x2c
 80277a0:	2220      	movs	r2, #32
 80277a2:	fb0a f303 	mul.w	r3, sl, r3
 80277a6:	9202      	str	r2, [sp, #8]
 80277a8:	9a01      	ldr	r2, [sp, #4]
 80277aa:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80277ae:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80277b2:	fb93 f7f2 	sdiv	r7, r3, r2
 80277b6:	fb02 3317 	mls	r3, r2, r7, r3
 80277ba:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80277be:	2b00      	cmp	r3, #0
 80277c0:	9308      	str	r3, [sp, #32]
 80277c2:	bfbc      	itt	lt
 80277c4:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80277c8:	189b      	addlt	r3, r3, r2
 80277ca:	eb07 0b01 	add.w	fp, r7, r1
 80277ce:	bfb8      	it	lt
 80277d0:	9308      	strlt	r3, [sp, #32]
 80277d2:	ea4f 136b 	mov.w	r3, fp, asr #5
 80277d6:	9304      	str	r3, [sp, #16]
 80277d8:	9b02      	ldr	r3, [sp, #8]
 80277da:	4573      	cmp	r3, lr
 80277dc:	d133      	bne.n	8027846 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 80277de:	9b04      	ldr	r3, [sp, #16]
 80277e0:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 80277e4:	454b      	cmp	r3, r9
 80277e6:	d045      	beq.n	8027874 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80277e8:	8b62      	ldrh	r2, [r4, #26]
 80277ea:	8b23      	ldrh	r3, [r4, #24]
 80277ec:	4313      	orrs	r3, r2
 80277ee:	d00c      	beq.n	802780a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80277f0:	f1b8 0f00 	cmp.w	r8, #0
 80277f4:	db09      	blt.n	802780a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80277f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80277f8:	4543      	cmp	r3, r8
 80277fa:	dd06      	ble.n	802780a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80277fc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8027800:	429a      	cmp	r2, r3
 8027802:	d313      	bcc.n	802782c <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8027804:	2301      	movs	r3, #1
 8027806:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802780a:	9b04      	ldr	r3, [sp, #16]
 802780c:	82e6      	strh	r6, [r4, #22]
 802780e:	82a3      	strh	r3, [r4, #20]
 8027810:	2300      	movs	r3, #0
 8027812:	8323      	strh	r3, [r4, #24]
 8027814:	8363      	strh	r3, [r4, #26]
 8027816:	e02d      	b.n	8027874 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8027818:	9a01      	ldr	r2, [sp, #4]
 802781a:	fb0a f30e 	mul.w	r3, sl, lr
 802781e:	4252      	negs	r2, r2
 8027820:	9201      	str	r2, [sp, #4]
 8027822:	f04f 32ff 	mov.w	r2, #4294967295
 8027826:	920b      	str	r2, [sp, #44]	; 0x2c
 8027828:	2200      	movs	r2, #0
 802782a:	e7bc      	b.n	80277a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 802782c:	f104 0314 	add.w	r3, r4, #20
 8027830:	6922      	ldr	r2, [r4, #16]
 8027832:	cb03      	ldmia	r3!, {r0, r1}
 8027834:	6010      	str	r0, [r2, #0]
 8027836:	6051      	str	r1, [r2, #4]
 8027838:	6923      	ldr	r3, [r4, #16]
 802783a:	3308      	adds	r3, #8
 802783c:	6123      	str	r3, [r4, #16]
 802783e:	68a3      	ldr	r3, [r4, #8]
 8027840:	3301      	adds	r3, #1
 8027842:	60a3      	str	r3, [r4, #8]
 8027844:	e7e1      	b.n	802780a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8027846:	f00b 031f 	and.w	r3, fp, #31
 802784a:	f001 011f 	and.w	r1, r1, #31
 802784e:	8b20      	ldrh	r0, [r4, #24]
 8027850:	9309      	str	r3, [sp, #36]	; 0x24
 8027852:	9b02      	ldr	r3, [sp, #8]
 8027854:	eba3 020e 	sub.w	r2, r3, lr
 8027858:	8b63      	ldrh	r3, [r4, #26]
 802785a:	9300      	str	r3, [sp, #0]
 802785c:	9b04      	ldr	r3, [sp, #16]
 802785e:	42ab      	cmp	r3, r5
 8027860:	f040 80ef 	bne.w	8027a42 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8027864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027866:	4410      	add	r0, r2
 8027868:	4419      	add	r1, r3
 802786a:	9b00      	ldr	r3, [sp, #0]
 802786c:	8320      	strh	r0, [r4, #24]
 802786e:	fb02 3101 	mla	r1, r2, r1, r3
 8027872:	8361      	strh	r1, [r4, #26]
 8027874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027876:	9904      	ldr	r1, [sp, #16]
 8027878:	4433      	add	r3, r6
 802787a:	9300      	str	r3, [sp, #0]
 802787c:	9a00      	ldr	r2, [sp, #0]
 802787e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8027882:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8027886:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802788a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802788e:	4288      	cmp	r0, r1
 8027890:	d018      	beq.n	80278c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8027892:	8b60      	ldrh	r0, [r4, #26]
 8027894:	8b21      	ldrh	r1, [r4, #24]
 8027896:	ea50 0201 	orrs.w	r2, r0, r1
 802789a:	d00c      	beq.n	80278b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802789c:	2b00      	cmp	r3, #0
 802789e:	db0a      	blt.n	80278b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80278a0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80278a2:	4299      	cmp	r1, r3
 80278a4:	dd07      	ble.n	80278b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80278a6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80278aa:	4299      	cmp	r1, r3
 80278ac:	f0c0 818b 	bcc.w	8027bc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 80278b0:	2301      	movs	r3, #1
 80278b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80278b6:	9b04      	ldr	r3, [sp, #16]
 80278b8:	82a3      	strh	r3, [r4, #20]
 80278ba:	9b00      	ldr	r3, [sp, #0]
 80278bc:	82e3      	strh	r3, [r4, #22]
 80278be:	2300      	movs	r3, #0
 80278c0:	8323      	strh	r3, [r4, #24]
 80278c2:	8363      	strh	r3, [r4, #26]
 80278c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80278c6:	9a00      	ldr	r2, [sp, #0]
 80278c8:	4293      	cmp	r3, r2
 80278ca:	f000 808d 	beq.w	80279e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 80278ce:	ea4f 134a 	mov.w	r3, sl, lsl #5
 80278d2:	9901      	ldr	r1, [sp, #4]
 80278d4:	9801      	ldr	r0, [sp, #4]
 80278d6:	fb93 f1f1 	sdiv	r1, r3, r1
 80278da:	fb00 3311 	mls	r3, r0, r1, r3
 80278de:	9106      	str	r1, [sp, #24]
 80278e0:	2b00      	cmp	r3, #0
 80278e2:	9307      	str	r3, [sp, #28]
 80278e4:	da04      	bge.n	80278f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 80278e6:	1e4b      	subs	r3, r1, #1
 80278e8:	9306      	str	r3, [sp, #24]
 80278ea:	9b07      	ldr	r3, [sp, #28]
 80278ec:	4403      	add	r3, r0
 80278ee:	9307      	str	r3, [sp, #28]
 80278f0:	9b08      	ldr	r3, [sp, #32]
 80278f2:	f04f 0c00 	mov.w	ip, #0
 80278f6:	9901      	ldr	r1, [sp, #4]
 80278f8:	1a5b      	subs	r3, r3, r1
 80278fa:	4659      	mov	r1, fp
 80278fc:	9308      	str	r3, [sp, #32]
 80278fe:	9b02      	ldr	r3, [sp, #8]
 8027900:	f1c3 0320 	rsb	r3, r3, #32
 8027904:	930a      	str	r3, [sp, #40]	; 0x28
 8027906:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027908:	9b02      	ldr	r3, [sp, #8]
 802790a:	1a1b      	subs	r3, r3, r0
 802790c:	9309      	str	r3, [sp, #36]	; 0x24
 802790e:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8027912:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8027916:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 802791a:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 802791e:	181b      	adds	r3, r3, r0
 8027920:	bf58      	it	pl
 8027922:	9801      	ldrpl	r0, [sp, #4]
 8027924:	9308      	str	r3, [sp, #32]
 8027926:	bf54      	ite	pl
 8027928:	1a1b      	subpl	r3, r3, r0
 802792a:	9d06      	ldrmi	r5, [sp, #24]
 802792c:	9802      	ldr	r0, [sp, #8]
 802792e:	bf5e      	ittt	pl
 8027930:	9308      	strpl	r3, [sp, #32]
 8027932:	9b06      	ldrpl	r3, [sp, #24]
 8027934:	1c5d      	addpl	r5, r3, #1
 8027936:	44ab      	add	fp, r5
 8027938:	ea4f 136b 	mov.w	r3, fp, asr #5
 802793c:	9304      	str	r3, [sp, #16]
 802793e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027940:	4283      	cmp	r3, r0
 8027942:	f040 815a 	bne.w	8027bfa <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8027946:	9b04      	ldr	r3, [sp, #16]
 8027948:	9a00      	ldr	r2, [sp, #0]
 802794a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 802794e:	4543      	cmp	r3, r8
 8027950:	d01a      	beq.n	8027988 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8027952:	8b61      	ldrh	r1, [r4, #26]
 8027954:	8b23      	ldrh	r3, [r4, #24]
 8027956:	430b      	orrs	r3, r1
 8027958:	d00e      	beq.n	8027978 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802795a:	f1be 0f00 	cmp.w	lr, #0
 802795e:	db0b      	blt.n	8027978 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8027960:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027962:	4573      	cmp	r3, lr
 8027964:	dd08      	ble.n	8027978 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8027966:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802796a:	4299      	cmp	r1, r3
 802796c:	f0c0 8138 	bcc.w	8027be0 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8027970:	f04f 0301 	mov.w	r3, #1
 8027974:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027978:	9b04      	ldr	r3, [sp, #16]
 802797a:	f8a4 c018 	strh.w	ip, [r4, #24]
 802797e:	82a3      	strh	r3, [r4, #20]
 8027980:	9b00      	ldr	r3, [sp, #0]
 8027982:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027986:	82e3      	strh	r3, [r4, #22]
 8027988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802798a:	9a00      	ldr	r2, [sp, #0]
 802798c:	441a      	add	r2, r3
 802798e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8027992:	9200      	str	r2, [sp, #0]
 8027994:	9900      	ldr	r1, [sp, #0]
 8027996:	9a04      	ldr	r2, [sp, #16]
 8027998:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 802799c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80279a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80279a4:	4288      	cmp	r0, r1
 80279a6:	d01a      	beq.n	80279de <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 80279a8:	8b60      	ldrh	r0, [r4, #26]
 80279aa:	8b21      	ldrh	r1, [r4, #24]
 80279ac:	ea50 0201 	orrs.w	r2, r0, r1
 80279b0:	d00d      	beq.n	80279ce <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 80279b2:	2b00      	cmp	r3, #0
 80279b4:	db0b      	blt.n	80279ce <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 80279b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80279b8:	4299      	cmp	r1, r3
 80279ba:	dd08      	ble.n	80279ce <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 80279bc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80279c0:	4299      	cmp	r1, r3
 80279c2:	f0c0 81f9 	bcc.w	8027db8 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 80279c6:	f04f 0301 	mov.w	r3, #1
 80279ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80279ce:	9b04      	ldr	r3, [sp, #16]
 80279d0:	f8a4 c018 	strh.w	ip, [r4, #24]
 80279d4:	82a3      	strh	r3, [r4, #20]
 80279d6:	9b00      	ldr	r3, [sp, #0]
 80279d8:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80279dc:	82e3      	strh	r3, [r4, #22]
 80279de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80279e0:	4659      	mov	r1, fp
 80279e2:	9a00      	ldr	r2, [sp, #0]
 80279e4:	4293      	cmp	r3, r2
 80279e6:	d192      	bne.n	802790e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80279e8:	9b02      	ldr	r3, [sp, #8]
 80279ea:	f1c3 0c20 	rsb	ip, r3, #32
 80279ee:	9b05      	ldr	r3, [sp, #20]
 80279f0:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80279f4:	9b03      	ldr	r3, [sp, #12]
 80279f6:	459c      	cmp	ip, r3
 80279f8:	f040 81f8 	bne.w	8027dec <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 80279fc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8027a00:	9a00      	ldr	r2, [sp, #0]
 8027a02:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8027a06:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8027a0a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8027a0e:	4288      	cmp	r0, r1
 8027a10:	f43f ad54 	beq.w	80274bc <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8027a14:	8b60      	ldrh	r0, [r4, #26]
 8027a16:	8b21      	ldrh	r1, [r4, #24]
 8027a18:	ea50 0201 	orrs.w	r2, r0, r1
 8027a1c:	d00c      	beq.n	8027a38 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8027a1e:	2b00      	cmp	r3, #0
 8027a20:	db0a      	blt.n	8027a38 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8027a22:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027a24:	4299      	cmp	r1, r3
 8027a26:	dd07      	ble.n	8027a38 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8027a28:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8027a2c:	4299      	cmp	r1, r3
 8027a2e:	f0c0 81d0 	bcc.w	8027dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8027a32:	2301      	movs	r3, #1
 8027a34:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027a38:	9b00      	ldr	r3, [sp, #0]
 8027a3a:	f8a4 e014 	strh.w	lr, [r4, #20]
 8027a3e:	82e3      	strh	r3, [r4, #22]
 8027a40:	e517      	b.n	8027472 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8027a42:	2f00      	cmp	r7, #0
 8027a44:	f2c0 8097 	blt.w	8027b76 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8027a48:	2301      	movs	r3, #1
 8027a4a:	f1c1 0c20 	rsb	ip, r1, #32
 8027a4e:	9307      	str	r3, [sp, #28]
 8027a50:	2320      	movs	r3, #32
 8027a52:	fb02 f20c 	mul.w	r2, r2, ip
 8027a56:	9306      	str	r3, [sp, #24]
 8027a58:	9b06      	ldr	r3, [sp, #24]
 8027a5a:	fb92 fcf7 	sdiv	ip, r2, r7
 8027a5e:	fb07 221c 	mls	r2, r7, ip, r2
 8027a62:	4419      	add	r1, r3
 8027a64:	9b00      	ldr	r3, [sp, #0]
 8027a66:	2a00      	cmp	r2, #0
 8027a68:	bfbc      	itt	lt
 8027a6a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8027a6e:	19d2      	addlt	r2, r2, r7
 8027a70:	fb0c 3101 	mla	r1, ip, r1, r3
 8027a74:	9b07      	ldr	r3, [sp, #28]
 8027a76:	4460      	add	r0, ip
 8027a78:	441d      	add	r5, r3
 8027a7a:	0433      	lsls	r3, r6, #16
 8027a7c:	b200      	sxth	r0, r0
 8027a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8027a80:	18eb      	adds	r3, r5, r3
 8027a82:	b209      	sxth	r1, r1
 8027a84:	8320      	strh	r0, [r4, #24]
 8027a86:	454b      	cmp	r3, r9
 8027a88:	8361      	strh	r1, [r4, #26]
 8027a8a:	d014      	beq.n	8027ab6 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8027a8c:	ea50 0301 	orrs.w	r3, r0, r1
 8027a90:	d00c      	beq.n	8027aac <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8027a92:	f1b8 0f00 	cmp.w	r8, #0
 8027a96:	db09      	blt.n	8027aac <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8027a98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027a9a:	4543      	cmp	r3, r8
 8027a9c:	dd06      	ble.n	8027aac <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8027a9e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8027aa2:	4299      	cmp	r1, r3
 8027aa4:	d36e      	bcc.n	8027b84 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8027aa6:	2301      	movs	r3, #1
 8027aa8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027aac:	2300      	movs	r3, #0
 8027aae:	82a5      	strh	r5, [r4, #20]
 8027ab0:	82e6      	strh	r6, [r4, #22]
 8027ab2:	8323      	strh	r3, [r4, #24]
 8027ab4:	8363      	strh	r3, [r4, #26]
 8027ab6:	9904      	ldr	r1, [sp, #16]
 8027ab8:	eb0e 030c 	add.w	r3, lr, ip
 8027abc:	42a9      	cmp	r1, r5
 8027abe:	d04d      	beq.n	8027b5c <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8027ac0:	9902      	ldr	r1, [sp, #8]
 8027ac2:	1bd2      	subs	r2, r2, r7
 8027ac4:	1ac9      	subs	r1, r1, r3
 8027ac6:	9200      	str	r2, [sp, #0]
 8027ac8:	448c      	add	ip, r1
 8027aca:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8027ace:	fb9c fef7 	sdiv	lr, ip, r7
 8027ad2:	fb07 cc1e 	mls	ip, r7, lr, ip
 8027ad6:	f1bc 0f00 	cmp.w	ip, #0
 8027ada:	bfbc      	itt	lt
 8027adc:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8027ae0:	44bc      	addlt	ip, r7
 8027ae2:	f10e 0101 	add.w	r1, lr, #1
 8027ae6:	910d      	str	r1, [sp, #52]	; 0x34
 8027ae8:	9a00      	ldr	r2, [sp, #0]
 8027aea:	8b20      	ldrh	r0, [r4, #24]
 8027aec:	eb12 020c 	adds.w	r2, r2, ip
 8027af0:	8b61      	ldrh	r1, [r4, #26]
 8027af2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8027af6:	9200      	str	r2, [sp, #0]
 8027af8:	bf5b      	ittet	pl
 8027afa:	1bd2      	subpl	r2, r2, r7
 8027afc:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8027b00:	46f0      	movmi	r8, lr
 8027b02:	9200      	strpl	r2, [sp, #0]
 8027b04:	9a07      	ldr	r2, [sp, #28]
 8027b06:	4440      	add	r0, r8
 8027b08:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8027b0c:	4443      	add	r3, r8
 8027b0e:	4415      	add	r5, r2
 8027b10:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8027b14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027b16:	b200      	sxth	r0, r0
 8027b18:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8027b1c:	442a      	add	r2, r5
 8027b1e:	b209      	sxth	r1, r1
 8027b20:	8320      	strh	r0, [r4, #24]
 8027b22:	454a      	cmp	r2, r9
 8027b24:	8361      	strh	r1, [r4, #26]
 8027b26:	d016      	beq.n	8027b56 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8027b28:	ea50 0201 	orrs.w	r2, r0, r1
 8027b2c:	d00d      	beq.n	8027b4a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027b2e:	f1b8 0f00 	cmp.w	r8, #0
 8027b32:	db0a      	blt.n	8027b4a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027b34:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027b36:	4541      	cmp	r1, r8
 8027b38:	dd07      	ble.n	8027b4a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027b3a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027b3e:	4288      	cmp	r0, r1
 8027b40:	d330      	bcc.n	8027ba4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8027b42:	f04f 0201 	mov.w	r2, #1
 8027b46:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027b4a:	f04f 0200 	mov.w	r2, #0
 8027b4e:	82a5      	strh	r5, [r4, #20]
 8027b50:	82e6      	strh	r6, [r4, #22]
 8027b52:	8322      	strh	r2, [r4, #24]
 8027b54:	8362      	strh	r2, [r4, #26]
 8027b56:	9904      	ldr	r1, [sp, #16]
 8027b58:	42a9      	cmp	r1, r5
 8027b5a:	d1c5      	bne.n	8027ae8 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8027b5c:	9a02      	ldr	r2, [sp, #8]
 8027b5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027b60:	1ad3      	subs	r3, r2, r3
 8027b62:	8b22      	ldrh	r2, [r4, #24]
 8027b64:	3120      	adds	r1, #32
 8027b66:	441a      	add	r2, r3
 8027b68:	8322      	strh	r2, [r4, #24]
 8027b6a:	9a06      	ldr	r2, [sp, #24]
 8027b6c:	1a89      	subs	r1, r1, r2
 8027b6e:	8b62      	ldrh	r2, [r4, #26]
 8027b70:	fb03 2301 	mla	r3, r3, r1, r2
 8027b74:	e64e      	b.n	8027814 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8027b76:	f04f 33ff 	mov.w	r3, #4294967295
 8027b7a:	434a      	muls	r2, r1
 8027b7c:	427f      	negs	r7, r7
 8027b7e:	9307      	str	r3, [sp, #28]
 8027b80:	2300      	movs	r3, #0
 8027b82:	e768      	b.n	8027a56 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8027b84:	f104 0314 	add.w	r3, r4, #20
 8027b88:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8027b8c:	cb03      	ldmia	r3!, {r0, r1}
 8027b8e:	f8c8 0000 	str.w	r0, [r8]
 8027b92:	f8c8 1004 	str.w	r1, [r8, #4]
 8027b96:	6923      	ldr	r3, [r4, #16]
 8027b98:	3308      	adds	r3, #8
 8027b9a:	6123      	str	r3, [r4, #16]
 8027b9c:	68a3      	ldr	r3, [r4, #8]
 8027b9e:	3301      	adds	r3, #1
 8027ba0:	60a3      	str	r3, [r4, #8]
 8027ba2:	e783      	b.n	8027aac <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8027ba4:	f104 0814 	add.w	r8, r4, #20
 8027ba8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8027bac:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8027bb0:	f8c9 0000 	str.w	r0, [r9]
 8027bb4:	f8c9 1004 	str.w	r1, [r9, #4]
 8027bb8:	6921      	ldr	r1, [r4, #16]
 8027bba:	3108      	adds	r1, #8
 8027bbc:	6121      	str	r1, [r4, #16]
 8027bbe:	68a1      	ldr	r1, [r4, #8]
 8027bc0:	3101      	adds	r1, #1
 8027bc2:	60a1      	str	r1, [r4, #8]
 8027bc4:	e7c1      	b.n	8027b4a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027bc6:	f104 0314 	add.w	r3, r4, #20
 8027bca:	6925      	ldr	r5, [r4, #16]
 8027bcc:	cb03      	ldmia	r3!, {r0, r1}
 8027bce:	6028      	str	r0, [r5, #0]
 8027bd0:	6069      	str	r1, [r5, #4]
 8027bd2:	6923      	ldr	r3, [r4, #16]
 8027bd4:	3308      	adds	r3, #8
 8027bd6:	6123      	str	r3, [r4, #16]
 8027bd8:	68a3      	ldr	r3, [r4, #8]
 8027bda:	3301      	adds	r3, #1
 8027bdc:	60a3      	str	r3, [r4, #8]
 8027bde:	e66a      	b.n	80278b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8027be0:	f104 0314 	add.w	r3, r4, #20
 8027be4:	6925      	ldr	r5, [r4, #16]
 8027be6:	cb03      	ldmia	r3!, {r0, r1}
 8027be8:	6028      	str	r0, [r5, #0]
 8027bea:	6069      	str	r1, [r5, #4]
 8027bec:	6923      	ldr	r3, [r4, #16]
 8027bee:	3308      	adds	r3, #8
 8027bf0:	6123      	str	r3, [r4, #16]
 8027bf2:	68a3      	ldr	r3, [r4, #8]
 8027bf4:	3301      	adds	r3, #1
 8027bf6:	60a3      	str	r3, [r4, #8]
 8027bf8:	e6be      	b.n	8027978 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8027bfa:	f00b 031f 	and.w	r3, fp, #31
 8027bfe:	114f      	asrs	r7, r1, #5
 8027c00:	8b20      	ldrh	r0, [r4, #24]
 8027c02:	f001 011f 	and.w	r1, r1, #31
 8027c06:	930f      	str	r3, [sp, #60]	; 0x3c
 8027c08:	9b04      	ldr	r3, [sp, #16]
 8027c0a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8027c0e:	429f      	cmp	r7, r3
 8027c10:	d10a      	bne.n	8027c28 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8027c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027c14:	4418      	add	r0, r3
 8027c16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027c18:	4419      	add	r1, r3
 8027c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027c1c:	8320      	strh	r0, [r4, #24]
 8027c1e:	fb03 9901 	mla	r9, r3, r1, r9
 8027c22:	f8a4 901a 	strh.w	r9, [r4, #26]
 8027c26:	e6af      	b.n	8027988 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8027c28:	2d00      	cmp	r5, #0
 8027c2a:	f2c0 809b 	blt.w	8027d64 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8027c2e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8027c30:	f1c1 0320 	rsb	r3, r1, #32
 8027c34:	4373      	muls	r3, r6
 8027c36:	2601      	movs	r6, #1
 8027c38:	960e      	str	r6, [sp, #56]	; 0x38
 8027c3a:	2620      	movs	r6, #32
 8027c3c:	960d      	str	r6, [sp, #52]	; 0x34
 8027c3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027c40:	fb93 f6f5 	sdiv	r6, r3, r5
 8027c44:	4411      	add	r1, r2
 8027c46:	fb05 3316 	mls	r3, r5, r6, r3
 8027c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027c4c:	2b00      	cmp	r3, #0
 8027c4e:	4417      	add	r7, r2
 8027c50:	9a00      	ldr	r2, [sp, #0]
 8027c52:	bfbc      	itt	lt
 8027c54:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8027c58:	195b      	addlt	r3, r3, r5
 8027c5a:	0412      	lsls	r2, r2, #16
 8027c5c:	fb06 9101 	mla	r1, r6, r1, r9
 8027c60:	4430      	add	r0, r6
 8027c62:	eb07 0902 	add.w	r9, r7, r2
 8027c66:	9210      	str	r2, [sp, #64]	; 0x40
 8027c68:	b200      	sxth	r0, r0
 8027c6a:	b209      	sxth	r1, r1
 8027c6c:	45c1      	cmp	r9, r8
 8027c6e:	8320      	strh	r0, [r4, #24]
 8027c70:	8361      	strh	r1, [r4, #26]
 8027c72:	d017      	beq.n	8027ca4 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8027c74:	ea50 0201 	orrs.w	r2, r0, r1
 8027c78:	d00d      	beq.n	8027c96 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027c7a:	f1be 0f00 	cmp.w	lr, #0
 8027c7e:	db0a      	blt.n	8027c96 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027c80:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027c82:	4571      	cmp	r1, lr
 8027c84:	dd07      	ble.n	8027c96 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027c86:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027c8a:	4288      	cmp	r0, r1
 8027c8c:	d372      	bcc.n	8027d74 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8027c8e:	f04f 0201 	mov.w	r2, #1
 8027c92:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027c96:	9a00      	ldr	r2, [sp, #0]
 8027c98:	82a7      	strh	r7, [r4, #20]
 8027c9a:	82e2      	strh	r2, [r4, #22]
 8027c9c:	f8a4 c018 	strh.w	ip, [r4, #24]
 8027ca0:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027ca4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027ca6:	eb02 0e06 	add.w	lr, r2, r6
 8027caa:	9a04      	ldr	r2, [sp, #16]
 8027cac:	42ba      	cmp	r2, r7
 8027cae:	d049      	beq.n	8027d44 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8027cb0:	9a02      	ldr	r2, [sp, #8]
 8027cb2:	1b5b      	subs	r3, r3, r5
 8027cb4:	eba2 010e 	sub.w	r1, r2, lr
 8027cb8:	440e      	add	r6, r1
 8027cba:	0176      	lsls	r6, r6, #5
 8027cbc:	fb96 f8f5 	sdiv	r8, r6, r5
 8027cc0:	fb05 6618 	mls	r6, r5, r8, r6
 8027cc4:	2e00      	cmp	r6, #0
 8027cc6:	bfbc      	itt	lt
 8027cc8:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8027ccc:	1976      	addlt	r6, r6, r5
 8027cce:	f108 0201 	add.w	r2, r8, #1
 8027cd2:	9211      	str	r2, [sp, #68]	; 0x44
 8027cd4:	199b      	adds	r3, r3, r6
 8027cd6:	8b20      	ldrh	r0, [r4, #24]
 8027cd8:	8b61      	ldrh	r1, [r4, #26]
 8027cda:	bf54      	ite	pl
 8027cdc:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8027ce0:	46c1      	movmi	r9, r8
 8027ce2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027ce4:	bf58      	it	pl
 8027ce6:	1b5b      	subpl	r3, r3, r5
 8027ce8:	4448      	add	r0, r9
 8027cea:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8027cee:	4417      	add	r7, r2
 8027cf0:	44ce      	add	lr, r9
 8027cf2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027cf4:	b200      	sxth	r0, r0
 8027cf6:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8027cfa:	b209      	sxth	r1, r1
 8027cfc:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8027d00:	443a      	add	r2, r7
 8027d02:	8320      	strh	r0, [r4, #24]
 8027d04:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8027d08:	8361      	strh	r1, [r4, #26]
 8027d0a:	4552      	cmp	r2, sl
 8027d0c:	d017      	beq.n	8027d3e <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 8027d0e:	ea50 0201 	orrs.w	r2, r0, r1
 8027d12:	d00d      	beq.n	8027d30 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027d14:	f1b9 0f00 	cmp.w	r9, #0
 8027d18:	db0a      	blt.n	8027d30 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027d1a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027d1c:	4549      	cmp	r1, r9
 8027d1e:	dd07      	ble.n	8027d30 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027d20:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027d24:	4288      	cmp	r0, r1
 8027d26:	d336      	bcc.n	8027d96 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8027d28:	f04f 0201 	mov.w	r2, #1
 8027d2c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027d30:	9a00      	ldr	r2, [sp, #0]
 8027d32:	82a7      	strh	r7, [r4, #20]
 8027d34:	82e2      	strh	r2, [r4, #22]
 8027d36:	f8a4 c018 	strh.w	ip, [r4, #24]
 8027d3a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027d3e:	9a04      	ldr	r2, [sp, #16]
 8027d40:	42ba      	cmp	r2, r7
 8027d42:	d1c7      	bne.n	8027cd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8027d44:	9b02      	ldr	r3, [sp, #8]
 8027d46:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027d48:	eba3 0e0e 	sub.w	lr, r3, lr
 8027d4c:	8b23      	ldrh	r3, [r4, #24]
 8027d4e:	3120      	adds	r1, #32
 8027d50:	4473      	add	r3, lr
 8027d52:	8323      	strh	r3, [r4, #24]
 8027d54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027d56:	1ac9      	subs	r1, r1, r3
 8027d58:	8b63      	ldrh	r3, [r4, #26]
 8027d5a:	fb0e 3e01 	mla	lr, lr, r1, r3
 8027d5e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8027d62:	e611      	b.n	8027988 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8027d64:	f04f 36ff 	mov.w	r6, #4294967295
 8027d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027d6a:	426d      	negs	r5, r5
 8027d6c:	960e      	str	r6, [sp, #56]	; 0x38
 8027d6e:	2600      	movs	r6, #0
 8027d70:	434b      	muls	r3, r1
 8027d72:	e763      	b.n	8027c3c <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8027d74:	f104 0e14 	add.w	lr, r4, #20
 8027d78:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8027d7c:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8027d80:	f8c8 0000 	str.w	r0, [r8]
 8027d84:	f8c8 1004 	str.w	r1, [r8, #4]
 8027d88:	6921      	ldr	r1, [r4, #16]
 8027d8a:	3108      	adds	r1, #8
 8027d8c:	6121      	str	r1, [r4, #16]
 8027d8e:	68a1      	ldr	r1, [r4, #8]
 8027d90:	3101      	adds	r1, #1
 8027d92:	60a1      	str	r1, [r4, #8]
 8027d94:	e77f      	b.n	8027c96 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027d96:	f104 0914 	add.w	r9, r4, #20
 8027d9a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8027d9e:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8027da2:	f8ca 0000 	str.w	r0, [sl]
 8027da6:	f8ca 1004 	str.w	r1, [sl, #4]
 8027daa:	6921      	ldr	r1, [r4, #16]
 8027dac:	3108      	adds	r1, #8
 8027dae:	6121      	str	r1, [r4, #16]
 8027db0:	68a1      	ldr	r1, [r4, #8]
 8027db2:	3101      	adds	r1, #1
 8027db4:	60a1      	str	r1, [r4, #8]
 8027db6:	e7bb      	b.n	8027d30 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027db8:	f104 0314 	add.w	r3, r4, #20
 8027dbc:	6925      	ldr	r5, [r4, #16]
 8027dbe:	cb03      	ldmia	r3!, {r0, r1}
 8027dc0:	6028      	str	r0, [r5, #0]
 8027dc2:	6069      	str	r1, [r5, #4]
 8027dc4:	6923      	ldr	r3, [r4, #16]
 8027dc6:	3308      	adds	r3, #8
 8027dc8:	6123      	str	r3, [r4, #16]
 8027dca:	68a3      	ldr	r3, [r4, #8]
 8027dcc:	3301      	adds	r3, #1
 8027dce:	60a3      	str	r3, [r4, #8]
 8027dd0:	e5fd      	b.n	80279ce <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8027dd2:	f104 0314 	add.w	r3, r4, #20
 8027dd6:	6925      	ldr	r5, [r4, #16]
 8027dd8:	cb03      	ldmia	r3!, {r0, r1}
 8027dda:	6028      	str	r0, [r5, #0]
 8027ddc:	6069      	str	r1, [r5, #4]
 8027dde:	6923      	ldr	r3, [r4, #16]
 8027de0:	3308      	adds	r3, #8
 8027de2:	6123      	str	r3, [r4, #16]
 8027de4:	68a3      	ldr	r3, [r4, #8]
 8027de6:	3301      	adds	r3, #1
 8027de8:	60a3      	str	r3, [r4, #8]
 8027dea:	e625      	b.n	8027a38 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8027dec:	9b05      	ldr	r3, [sp, #20]
 8027dee:	ea4f 176b 	mov.w	r7, fp, asr #5
 8027df2:	f00b 081f 	and.w	r8, fp, #31
 8027df6:	8b20      	ldrh	r0, [r4, #24]
 8027df8:	f003 031f 	and.w	r3, r3, #31
 8027dfc:	4577      	cmp	r7, lr
 8027dfe:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8027e02:	9302      	str	r3, [sp, #8]
 8027e04:	9b03      	ldr	r3, [sp, #12]
 8027e06:	eba3 050c 	sub.w	r5, r3, ip
 8027e0a:	d108      	bne.n	8027e1e <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8027e0c:	9b02      	ldr	r3, [sp, #8]
 8027e0e:	4428      	add	r0, r5
 8027e10:	4498      	add	r8, r3
 8027e12:	8320      	strh	r0, [r4, #24]
 8027e14:	fb05 9508 	mla	r5, r5, r8, r9
 8027e18:	8365      	strh	r5, [r4, #26]
 8027e1a:	f7ff bb4f 	b.w	80274bc <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8027e1e:	9b05      	ldr	r3, [sp, #20]
 8027e20:	ebb3 030b 	subs.w	r3, r3, fp
 8027e24:	f100 809c 	bmi.w	8027f60 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8027e28:	f1c8 0120 	rsb	r1, r8, #32
 8027e2c:	2201      	movs	r2, #1
 8027e2e:	f04f 0b20 	mov.w	fp, #32
 8027e32:	434d      	muls	r5, r1
 8027e34:	9201      	str	r2, [sp, #4]
 8027e36:	9a01      	ldr	r2, [sp, #4]
 8027e38:	44d8      	add	r8, fp
 8027e3a:	fb95 f6f3 	sdiv	r6, r5, r3
 8027e3e:	fb03 5516 	mls	r5, r3, r6, r5
 8027e42:	4417      	add	r7, r2
 8027e44:	9a00      	ldr	r2, [sp, #0]
 8027e46:	2d00      	cmp	r5, #0
 8027e48:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8027e4c:	bfbc      	itt	lt
 8027e4e:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8027e52:	18ed      	addlt	r5, r5, r3
 8027e54:	eb07 0a02 	add.w	sl, r7, r2
 8027e58:	9204      	str	r2, [sp, #16]
 8027e5a:	fb06 9808 	mla	r8, r6, r8, r9
 8027e5e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8027e62:	4430      	add	r0, r6
 8027e64:	fa0f f188 	sxth.w	r1, r8
 8027e68:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8027e6c:	b200      	sxth	r0, r0
 8027e6e:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8027e72:	8361      	strh	r1, [r4, #26]
 8027e74:	8320      	strh	r0, [r4, #24]
 8027e76:	45ca      	cmp	sl, r9
 8027e78:	d015      	beq.n	8027ea6 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 8027e7a:	ea50 0201 	orrs.w	r2, r0, r1
 8027e7e:	d00c      	beq.n	8027e9a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8027e80:	f1b8 0f00 	cmp.w	r8, #0
 8027e84:	db09      	blt.n	8027e9a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8027e86:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027e88:	4541      	cmp	r1, r8
 8027e8a:	dd06      	ble.n	8027e9a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8027e8c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027e90:	4288      	cmp	r0, r1
 8027e92:	d36e      	bcc.n	8027f72 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8027e94:	2101      	movs	r1, #1
 8027e96:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8027e9a:	2100      	movs	r1, #0
 8027e9c:	9a00      	ldr	r2, [sp, #0]
 8027e9e:	82a7      	strh	r7, [r4, #20]
 8027ea0:	82e2      	strh	r2, [r4, #22]
 8027ea2:	8321      	strh	r1, [r4, #24]
 8027ea4:	8361      	strh	r1, [r4, #26]
 8027ea6:	45be      	cmp	lr, r7
 8027ea8:	44b4      	add	ip, r6
 8027eaa:	d048      	beq.n	8027f3e <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8027eac:	9a03      	ldr	r2, [sp, #12]
 8027eae:	1aed      	subs	r5, r5, r3
 8027eb0:	eba2 010c 	sub.w	r1, r2, ip
 8027eb4:	440e      	add	r6, r1
 8027eb6:	0176      	lsls	r6, r6, #5
 8027eb8:	fb96 f8f3 	sdiv	r8, r6, r3
 8027ebc:	fb03 6618 	mls	r6, r3, r8, r6
 8027ec0:	2e00      	cmp	r6, #0
 8027ec2:	bfbc      	itt	lt
 8027ec4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8027ec8:	18f6      	addlt	r6, r6, r3
 8027eca:	f108 0201 	add.w	r2, r8, #1
 8027ece:	9205      	str	r2, [sp, #20]
 8027ed0:	19ad      	adds	r5, r5, r6
 8027ed2:	8b20      	ldrh	r0, [r4, #24]
 8027ed4:	8b61      	ldrh	r1, [r4, #26]
 8027ed6:	bf54      	ite	pl
 8027ed8:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8027edc:	46c1      	movmi	r9, r8
 8027ede:	9a01      	ldr	r2, [sp, #4]
 8027ee0:	bf58      	it	pl
 8027ee2:	1aed      	subpl	r5, r5, r3
 8027ee4:	4448      	add	r0, r9
 8027ee6:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8027eea:	4417      	add	r7, r2
 8027eec:	44cc      	add	ip, r9
 8027eee:	9a04      	ldr	r2, [sp, #16]
 8027ef0:	b200      	sxth	r0, r0
 8027ef2:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8027ef6:	b209      	sxth	r1, r1
 8027ef8:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8027efc:	443a      	add	r2, r7
 8027efe:	8320      	strh	r0, [r4, #24]
 8027f00:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8027f04:	8361      	strh	r1, [r4, #26]
 8027f06:	4552      	cmp	r2, sl
 8027f08:	d017      	beq.n	8027f3a <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8027f0a:	ea50 0201 	orrs.w	r2, r0, r1
 8027f0e:	d00d      	beq.n	8027f2c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8027f10:	f1b9 0f00 	cmp.w	r9, #0
 8027f14:	db0a      	blt.n	8027f2c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8027f16:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027f18:	4549      	cmp	r1, r9
 8027f1a:	dd07      	ble.n	8027f2c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8027f1c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027f20:	4288      	cmp	r0, r1
 8027f22:	d337      	bcc.n	8027f94 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8027f24:	f04f 0201 	mov.w	r2, #1
 8027f28:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027f2c:	9a00      	ldr	r2, [sp, #0]
 8027f2e:	82a7      	strh	r7, [r4, #20]
 8027f30:	82e2      	strh	r2, [r4, #22]
 8027f32:	f04f 0200 	mov.w	r2, #0
 8027f36:	8322      	strh	r2, [r4, #24]
 8027f38:	8362      	strh	r2, [r4, #26]
 8027f3a:	45be      	cmp	lr, r7
 8027f3c:	d1c8      	bne.n	8027ed0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 8027f3e:	9b03      	ldr	r3, [sp, #12]
 8027f40:	8b62      	ldrh	r2, [r4, #26]
 8027f42:	eba3 0c0c 	sub.w	ip, r3, ip
 8027f46:	8b23      	ldrh	r3, [r4, #24]
 8027f48:	4463      	add	r3, ip
 8027f4a:	8323      	strh	r3, [r4, #24]
 8027f4c:	9b02      	ldr	r3, [sp, #8]
 8027f4e:	3320      	adds	r3, #32
 8027f50:	eba3 030b 	sub.w	r3, r3, fp
 8027f54:	fb0c 2c03 	mla	ip, ip, r3, r2
 8027f58:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027f5c:	f7ff baae 	b.w	80274bc <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8027f60:	f04f 32ff 	mov.w	r2, #4294967295
 8027f64:	fb05 f508 	mul.w	r5, r5, r8
 8027f68:	425b      	negs	r3, r3
 8027f6a:	f04f 0b00 	mov.w	fp, #0
 8027f6e:	9201      	str	r2, [sp, #4]
 8027f70:	e761      	b.n	8027e36 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 8027f72:	f104 0814 	add.w	r8, r4, #20
 8027f76:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8027f7a:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8027f7e:	f8c9 0000 	str.w	r0, [r9]
 8027f82:	f8c9 1004 	str.w	r1, [r9, #4]
 8027f86:	6921      	ldr	r1, [r4, #16]
 8027f88:	3108      	adds	r1, #8
 8027f8a:	6121      	str	r1, [r4, #16]
 8027f8c:	68a1      	ldr	r1, [r4, #8]
 8027f8e:	3101      	adds	r1, #1
 8027f90:	60a1      	str	r1, [r4, #8]
 8027f92:	e782      	b.n	8027e9a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8027f94:	f104 0914 	add.w	r9, r4, #20
 8027f98:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8027f9c:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8027fa0:	f8ca 0000 	str.w	r0, [sl]
 8027fa4:	f8ca 1004 	str.w	r1, [sl, #4]
 8027fa8:	6921      	ldr	r1, [r4, #16]
 8027faa:	3108      	adds	r1, #8
 8027fac:	6121      	str	r1, [r4, #16]
 8027fae:	68a1      	ldr	r1, [r4, #8]
 8027fb0:	3101      	adds	r1, #1
 8027fb2:	60a1      	str	r1, [r4, #8]
 8027fb4:	e7ba      	b.n	8027f2c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

08027fb6 <_ZN8touchgfx7Outline6lineToEii>:
 8027fb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027fb8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8027fba:	4604      	mov	r4, r0
 8027fbc:	460d      	mov	r5, r1
 8027fbe:	4616      	mov	r6, r2
 8027fc0:	079b      	lsls	r3, r3, #30
 8027fc2:	d526      	bpl.n	8028012 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8027fc4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8027fc8:	ea85 0001 	eor.w	r0, r5, r1
 8027fcc:	ea86 0302 	eor.w	r3, r6, r2
 8027fd0:	4303      	orrs	r3, r0
 8027fd2:	d01e      	beq.n	8028012 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8027fd4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8027fd6:	114b      	asrs	r3, r1, #5
 8027fd8:	9600      	str	r6, [sp, #0]
 8027fda:	4283      	cmp	r3, r0
 8027fdc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8027fde:	bfb8      	it	lt
 8027fe0:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8027fe2:	3301      	adds	r3, #1
 8027fe4:	4283      	cmp	r3, r0
 8027fe6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8027fe8:	bfc8      	it	gt
 8027fea:	6363      	strgt	r3, [r4, #52]	; 0x34
 8027fec:	116b      	asrs	r3, r5, #5
 8027fee:	4283      	cmp	r3, r0
 8027ff0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8027ff2:	bfb8      	it	lt
 8027ff4:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8027ff6:	3301      	adds	r3, #1
 8027ff8:	4283      	cmp	r3, r0
 8027ffa:	4620      	mov	r0, r4
 8027ffc:	bfc8      	it	gt
 8027ffe:	6363      	strgt	r3, [r4, #52]	; 0x34
 8028000:	462b      	mov	r3, r5
 8028002:	f7ff f9e3 	bl	80273cc <_ZN8touchgfx7Outline10renderLineEiiii>
 8028006:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8028008:	f043 0301 	orr.w	r3, r3, #1
 802800c:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8028010:	63e3      	str	r3, [r4, #60]	; 0x3c
 8028012:	b002      	add	sp, #8
 8028014:	bd70      	pop	{r4, r5, r6, pc}

08028016 <_ZN8touchgfx7Outline6moveToEii>:
 8028016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028018:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802801a:	4615      	mov	r5, r2
 802801c:	4604      	mov	r4, r0
 802801e:	460e      	mov	r6, r1
 8028020:	079a      	lsls	r2, r3, #30
 8028022:	d401      	bmi.n	8028028 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8028024:	f7ff f98c 	bl	8027340 <_ZN8touchgfx7Outline5resetEv>
 8028028:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802802a:	07db      	lsls	r3, r3, #31
 802802c:	d504      	bpl.n	8028038 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802802e:	4620      	mov	r0, r4
 8028030:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8028034:	f7ff ffbf 	bl	8027fb6 <_ZN8touchgfx7Outline6lineToEii>
 8028038:	ea4f 1c66 	mov.w	ip, r6, asr #5
 802803c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8028040:	116f      	asrs	r7, r5, #5
 8028042:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8028046:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802804a:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802804e:	4291      	cmp	r1, r2
 8028050:	d015      	beq.n	802807e <_ZN8touchgfx7Outline6moveToEii+0x68>
 8028052:	8b61      	ldrh	r1, [r4, #26]
 8028054:	8b22      	ldrh	r2, [r4, #24]
 8028056:	430a      	orrs	r2, r1
 8028058:	d00b      	beq.n	8028072 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802805a:	2b00      	cmp	r3, #0
 802805c:	db09      	blt.n	8028072 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802805e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8028060:	429a      	cmp	r2, r3
 8028062:	dd06      	ble.n	8028072 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8028064:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8028068:	429a      	cmp	r2, r3
 802806a:	d30d      	bcc.n	8028088 <_ZN8touchgfx7Outline6moveToEii+0x72>
 802806c:	2301      	movs	r3, #1
 802806e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8028072:	2300      	movs	r3, #0
 8028074:	f8a4 c014 	strh.w	ip, [r4, #20]
 8028078:	82e7      	strh	r7, [r4, #22]
 802807a:	8323      	strh	r3, [r4, #24]
 802807c:	8363      	strh	r3, [r4, #26]
 802807e:	61e6      	str	r6, [r4, #28]
 8028080:	62a5      	str	r5, [r4, #40]	; 0x28
 8028082:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8028086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028088:	f104 0314 	add.w	r3, r4, #20
 802808c:	6922      	ldr	r2, [r4, #16]
 802808e:	cb03      	ldmia	r3!, {r0, r1}
 8028090:	6010      	str	r0, [r2, #0]
 8028092:	6051      	str	r1, [r2, #4]
 8028094:	6923      	ldr	r3, [r4, #16]
 8028096:	3308      	adds	r3, #8
 8028098:	6123      	str	r3, [r4, #16]
 802809a:	68a3      	ldr	r3, [r4, #8]
 802809c:	3301      	adds	r3, #1
 802809e:	60a3      	str	r3, [r4, #8]
 80280a0:	e7e7      	b.n	8028072 <_ZN8touchgfx7Outline6moveToEii+0x5c>

080280a2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80280a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80280a6:	b0d1      	sub	sp, #324	; 0x144
 80280a8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80280ac:	466c      	mov	r4, sp
 80280ae:	1a0d      	subs	r5, r1, r0
 80280b0:	f100 0208 	add.w	r2, r0, #8
 80280b4:	2d48      	cmp	r5, #72	; 0x48
 80280b6:	f340 80ba 	ble.w	802822e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80280ba:	112d      	asrs	r5, r5, #4
 80280bc:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 80280c0:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 80280c4:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 80280c8:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80280cc:	f9b0 8000 	ldrsh.w	r8, [r0]
 80280d0:	681e      	ldr	r6, [r3, #0]
 80280d2:	6006      	str	r6, [r0, #0]
 80280d4:	685e      	ldr	r6, [r3, #4]
 80280d6:	6046      	str	r6, [r0, #4]
 80280d8:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 80280dc:	f8a3 c004 	strh.w	ip, [r3, #4]
 80280e0:	f8a3 e002 	strh.w	lr, [r3, #2]
 80280e4:	80df      	strh	r7, [r3, #6]
 80280e6:	f1a1 0308 	sub.w	r3, r1, #8
 80280ea:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80280ee:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 80280f2:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80280f6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80280fa:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80280fe:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8028102:	45ac      	cmp	ip, r5
 8028104:	dd0f      	ble.n	8028126 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8028106:	681d      	ldr	r5, [r3, #0]
 8028108:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 802810c:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8028110:	6015      	str	r5, [r2, #0]
 8028112:	685d      	ldr	r5, [r3, #4]
 8028114:	6055      	str	r5, [r2, #4]
 8028116:	f821 7c08 	strh.w	r7, [r1, #-8]
 802811a:	f821 6c06 	strh.w	r6, [r1, #-6]
 802811e:	f821 ec04 	strh.w	lr, [r1, #-4]
 8028122:	f821 cc02 	strh.w	ip, [r1, #-2]
 8028126:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 802812a:	f9b0 7000 	ldrsh.w	r7, [r0]
 802812e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8028132:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8028136:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802813a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802813e:	4565      	cmp	r5, ip
 8028140:	dd0d      	ble.n	802815e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8028142:	6815      	ldr	r5, [r2, #0]
 8028144:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8028148:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802814c:	6005      	str	r5, [r0, #0]
 802814e:	6855      	ldr	r5, [r2, #4]
 8028150:	8107      	strh	r7, [r0, #8]
 8028152:	6045      	str	r5, [r0, #4]
 8028154:	8146      	strh	r6, [r0, #10]
 8028156:	f8a0 e00c 	strh.w	lr, [r0, #12]
 802815a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802815e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8028162:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8028166:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802816a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802816e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8028172:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8028176:	45ac      	cmp	ip, r5
 8028178:	dd0f      	ble.n	802819a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802817a:	681d      	ldr	r5, [r3, #0]
 802817c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8028180:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8028184:	6005      	str	r5, [r0, #0]
 8028186:	685d      	ldr	r5, [r3, #4]
 8028188:	6045      	str	r5, [r0, #4]
 802818a:	f821 7c08 	strh.w	r7, [r1, #-8]
 802818e:	f821 6c06 	strh.w	r6, [r1, #-6]
 8028192:	f821 ec04 	strh.w	lr, [r1, #-4]
 8028196:	f821 cc02 	strh.w	ip, [r1, #-2]
 802819a:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802819e:	f102 0508 	add.w	r5, r2, #8
 80281a2:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 80281a6:	f9b0 e000 	ldrsh.w	lr, [r0]
 80281aa:	462f      	mov	r7, r5
 80281ac:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80281b0:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 80281b4:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 80281b8:	45b2      	cmp	sl, r6
 80281ba:	dc18      	bgt.n	80281ee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 80281bc:	3b08      	subs	r3, #8
 80281be:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 80281c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80281c6:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 80281ca:	45b2      	cmp	sl, r6
 80281cc:	dbf6      	blt.n	80281bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 80281ce:	42ab      	cmp	r3, r5
 80281d0:	681e      	ldr	r6, [r3, #0]
 80281d2:	d30e      	bcc.n	80281f2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 80281d4:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 80281d8:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80281dc:	602e      	str	r6, [r5, #0]
 80281de:	685e      	ldr	r6, [r3, #4]
 80281e0:	606e      	str	r6, [r5, #4]
 80281e2:	f8a3 9000 	strh.w	r9, [r3]
 80281e6:	f8a3 8002 	strh.w	r8, [r3, #2]
 80281ea:	809f      	strh	r7, [r3, #4]
 80281ec:	80da      	strh	r2, [r3, #6]
 80281ee:	462a      	mov	r2, r5
 80281f0:	e7d3      	b.n	802819a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80281f2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80281f6:	6006      	str	r6, [r0, #0]
 80281f8:	685e      	ldr	r6, [r3, #4]
 80281fa:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80281fe:	6046      	str	r6, [r0, #4]
 8028200:	1a1e      	subs	r6, r3, r0
 8028202:	80da      	strh	r2, [r3, #6]
 8028204:	1b4a      	subs	r2, r1, r5
 8028206:	f8a3 e000 	strh.w	lr, [r3]
 802820a:	10d2      	asrs	r2, r2, #3
 802820c:	f8a3 c002 	strh.w	ip, [r3, #2]
 8028210:	f8a3 8004 	strh.w	r8, [r3, #4]
 8028214:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8028218:	bfb5      	itete	lt
 802821a:	e9c4 0300 	strdlt	r0, r3, [r4]
 802821e:	4607      	movge	r7, r0
 8028220:	460b      	movlt	r3, r1
 8028222:	e9c4 5100 	strdge	r5, r1, [r4]
 8028226:	4638      	mov	r0, r7
 8028228:	3408      	adds	r4, #8
 802822a:	4619      	mov	r1, r3
 802822c:	e73f      	b.n	80280ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802822e:	4291      	cmp	r1, r2
 8028230:	d925      	bls.n	802827e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8028232:	f1a2 0310 	sub.w	r3, r2, #16
 8028236:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 802823a:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802823e:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8028242:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8028246:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 802824a:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802824e:	42b5      	cmp	r5, r6
 8028250:	dd13      	ble.n	802827a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8028252:	461d      	mov	r5, r3
 8028254:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8028258:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 802825c:	3b08      	subs	r3, #8
 802825e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8028262:	619e      	str	r6, [r3, #24]
 8028264:	42a8      	cmp	r0, r5
 8028266:	686e      	ldr	r6, [r5, #4]
 8028268:	f8a3 c010 	strh.w	ip, [r3, #16]
 802826c:	61de      	str	r6, [r3, #28]
 802826e:	825f      	strh	r7, [r3, #18]
 8028270:	f8a3 8014 	strh.w	r8, [r3, #20]
 8028274:	f8a3 e016 	strh.w	lr, [r3, #22]
 8028278:	d1dd      	bne.n	8028236 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 802827a:	3208      	adds	r2, #8
 802827c:	e7d7      	b.n	802822e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802827e:	466b      	mov	r3, sp
 8028280:	429c      	cmp	r4, r3
 8028282:	d903      	bls.n	802828c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8028284:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8028288:	3c08      	subs	r4, #8
 802828a:	e710      	b.n	80280ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802828c:	b051      	add	sp, #324	; 0x144
 802828e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028292 <_ZN8touchgfx7Outline9sortCellsEv>:
 8028292:	6881      	ldr	r1, [r0, #8]
 8028294:	b111      	cbz	r1, 802829c <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8028296:	68c0      	ldr	r0, [r0, #12]
 8028298:	f7ff bf03 	b.w	80280a2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 802829c:	4770      	bx	lr

0802829e <_ZN8touchgfx7Outline8getCellsEv>:
 802829e:	b510      	push	{r4, lr}
 80282a0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80282a2:	4604      	mov	r4, r0
 80282a4:	07da      	lsls	r2, r3, #31
 80282a6:	d507      	bpl.n	80282b8 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 80282a8:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 80282ac:	f7ff fe83 	bl	8027fb6 <_ZN8touchgfx7Outline6lineToEii>
 80282b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80282b2:	f023 0301 	bic.w	r3, r3, #1
 80282b6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80282b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80282ba:	079b      	lsls	r3, r3, #30
 80282bc:	d51a      	bpl.n	80282f4 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 80282be:	8b62      	ldrh	r2, [r4, #26]
 80282c0:	8b23      	ldrh	r3, [r4, #24]
 80282c2:	4313      	orrs	r3, r2
 80282c4:	d00d      	beq.n	80282e2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80282c6:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80282ca:	2b00      	cmp	r3, #0
 80282cc:	db09      	blt.n	80282e2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80282ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80282d0:	4293      	cmp	r3, r2
 80282d2:	da06      	bge.n	80282e2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80282d4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80282d8:	429a      	cmp	r2, r3
 80282da:	d80d      	bhi.n	80282f8 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 80282dc:	2301      	movs	r3, #1
 80282de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80282e2:	68a0      	ldr	r0, [r4, #8]
 80282e4:	b138      	cbz	r0, 80282f6 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 80282e6:	4620      	mov	r0, r4
 80282e8:	f7ff ffd3 	bl	8028292 <_ZN8touchgfx7Outline9sortCellsEv>
 80282ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80282ee:	f023 0302 	bic.w	r3, r3, #2
 80282f2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80282f4:	68e0      	ldr	r0, [r4, #12]
 80282f6:	bd10      	pop	{r4, pc}
 80282f8:	f104 0314 	add.w	r3, r4, #20
 80282fc:	6922      	ldr	r2, [r4, #16]
 80282fe:	cb03      	ldmia	r3!, {r0, r1}
 8028300:	6010      	str	r0, [r2, #0]
 8028302:	6051      	str	r1, [r2, #4]
 8028304:	6923      	ldr	r3, [r4, #16]
 8028306:	3308      	adds	r3, #8
 8028308:	6123      	str	r3, [r4, #16]
 802830a:	68a3      	ldr	r3, [r4, #8]
 802830c:	3301      	adds	r3, #1
 802830e:	60a3      	str	r3, [r4, #8]
 8028310:	e7e7      	b.n	80282e2 <_ZN8touchgfx7Outline8getCellsEv+0x44>

08028312 <_ZN8touchgfx8ScanlineD1Ev>:
 8028312:	4770      	bx	lr

08028314 <_ZN8touchgfx8ScanlineD0Ev>:
 8028314:	b510      	push	{r4, lr}
 8028316:	4604      	mov	r4, r0
 8028318:	2124      	movs	r1, #36	; 0x24
 802831a:	f000 f887 	bl	802842c <_ZdlPvj>
 802831e:	4620      	mov	r0, r4
 8028320:	bd10      	pop	{r4, pc}

08028322 <_ZN8touchgfx8Scanline5resetEv>:
 8028322:	b510      	push	{r4, lr}
 8028324:	4604      	mov	r4, r0
 8028326:	f7f2 ff79 	bl	801b21c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802832a:	61a0      	str	r0, [r4, #24]
 802832c:	f7f2 ff7c 	bl	801b228 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8028330:	61e0      	str	r0, [r4, #28]
 8028332:	f7f2 ff7f 	bl	801b234 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8028336:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802833a:	6220      	str	r0, [r4, #32]
 802833c:	6160      	str	r0, [r4, #20]
 802833e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8028342:	69e3      	ldr	r3, [r4, #28]
 8028344:	6123      	str	r3, [r4, #16]
 8028346:	2300      	movs	r3, #0
 8028348:	60e3      	str	r3, [r4, #12]
 802834a:	bd10      	pop	{r4, pc}

0802834c <_ZN8touchgfx8ScanlineC1Ev>:
 802834c:	4b07      	ldr	r3, [pc, #28]	; (802836c <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 802834e:	b510      	push	{r4, lr}
 8028350:	6003      	str	r3, [r0, #0]
 8028352:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8028356:	4604      	mov	r4, r0
 8028358:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802835c:	2300      	movs	r3, #0
 802835e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8028362:	6143      	str	r3, [r0, #20]
 8028364:	f7ff ffdd 	bl	8028322 <_ZN8touchgfx8Scanline5resetEv>
 8028368:	4620      	mov	r0, r4
 802836a:	bd10      	pop	{r4, pc}
 802836c:	0802e570 	.word	0x0802e570

08028370 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8028370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028374:	1e0c      	subs	r4, r1, #0
 8028376:	4605      	mov	r5, r0
 8028378:	4617      	mov	r7, r2
 802837a:	461e      	mov	r6, r3
 802837c:	da03      	bge.n	8028386 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802837e:	4426      	add	r6, r4
 8028380:	2e01      	cmp	r6, #1
 8028382:	d421      	bmi.n	80283c8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8028384:	2400      	movs	r4, #0
 8028386:	f7f2 ff43 	bl	801b210 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802838a:	42a0      	cmp	r0, r4
 802838c:	d91c      	bls.n	80283c8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802838e:	eb04 0806 	add.w	r8, r4, r6
 8028392:	f7f2 ff3d 	bl	801b210 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8028396:	4580      	cmp	r8, r0
 8028398:	d902      	bls.n	80283a0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802839a:	f7f2 ff39 	bl	801b210 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802839e:	1b06      	subs	r6, r0, r4
 80283a0:	69a8      	ldr	r0, [r5, #24]
 80283a2:	4632      	mov	r2, r6
 80283a4:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80283a8:	4420      	add	r0, r4
 80283aa:	f7f4 fc53 	bl	801cc54 <_ZN8touchgfx6memsetEPvhm>
 80283ae:	686b      	ldr	r3, [r5, #4]
 80283b0:	b2b2      	uxth	r2, r6
 80283b2:	3301      	adds	r3, #1
 80283b4:	42a3      	cmp	r3, r4
 80283b6:	696b      	ldr	r3, [r5, #20]
 80283b8:	d108      	bne.n	80283cc <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 80283ba:	8819      	ldrh	r1, [r3, #0]
 80283bc:	440a      	add	r2, r1
 80283be:	801a      	strh	r2, [r3, #0]
 80283c0:	3c01      	subs	r4, #1
 80283c2:	4434      	add	r4, r6
 80283c4:	e9c5 4701 	strd	r4, r7, [r5, #4]
 80283c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80283cc:	1c99      	adds	r1, r3, #2
 80283ce:	6169      	str	r1, [r5, #20]
 80283d0:	805a      	strh	r2, [r3, #2]
 80283d2:	692b      	ldr	r3, [r5, #16]
 80283d4:	1c9a      	adds	r2, r3, #2
 80283d6:	612a      	str	r2, [r5, #16]
 80283d8:	805c      	strh	r4, [r3, #2]
 80283da:	68eb      	ldr	r3, [r5, #12]
 80283dc:	3301      	adds	r3, #1
 80283de:	60eb      	str	r3, [r5, #12]
 80283e0:	e7ee      	b.n	80283c0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

080283e2 <_ZN8touchgfx15RenderingBufferD1Ev>:
 80283e2:	4770      	bx	lr

080283e4 <_ZN8touchgfx15RenderingBufferD0Ev>:
 80283e4:	b510      	push	{r4, lr}
 80283e6:	4604      	mov	r4, r0
 80283e8:	2118      	movs	r1, #24
 80283ea:	f000 f81f 	bl	802842c <_ZdlPvj>
 80283ee:	4620      	mov	r0, r4
 80283f0:	bd10      	pop	{r4, pc}
	...

080283f4 <_ZN8touchgfx15RenderingBufferC1Ev>:
 80283f4:	4a04      	ldr	r2, [pc, #16]	; (8028408 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 80283f6:	6002      	str	r2, [r0, #0]
 80283f8:	2200      	movs	r2, #0
 80283fa:	6042      	str	r2, [r0, #4]
 80283fc:	7202      	strb	r2, [r0, #8]
 80283fe:	6142      	str	r2, [r0, #20]
 8028400:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8028404:	4770      	bx	lr
 8028406:	bf00      	nop
 8028408:	0802e580 	.word	0x0802e580

0802840c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802840c:	60c3      	str	r3, [r0, #12]
 802840e:	9b00      	ldr	r3, [sp, #0]
 8028410:	6041      	str	r1, [r0, #4]
 8028412:	6103      	str	r3, [r0, #16]
 8028414:	9b01      	ldr	r3, [sp, #4]
 8028416:	7202      	strb	r2, [r0, #8]
 8028418:	6143      	str	r3, [r0, #20]
 802841a:	4770      	bx	lr

0802841c <__aeabi_atexit>:
 802841c:	460b      	mov	r3, r1
 802841e:	4601      	mov	r1, r0
 8028420:	4618      	mov	r0, r3
 8028422:	f000 b853 	b.w	80284cc <__cxa_atexit>

08028426 <__cxa_pure_virtual>:
 8028426:	b508      	push	{r3, lr}
 8028428:	f000 f820 	bl	802846c <_ZSt9terminatev>

0802842c <_ZdlPvj>:
 802842c:	f000 b80f 	b.w	802844e <_ZdlPv>

08028430 <__cxa_guard_acquire>:
 8028430:	6803      	ldr	r3, [r0, #0]
 8028432:	07db      	lsls	r3, r3, #31
 8028434:	d406      	bmi.n	8028444 <__cxa_guard_acquire+0x14>
 8028436:	7843      	ldrb	r3, [r0, #1]
 8028438:	b103      	cbz	r3, 802843c <__cxa_guard_acquire+0xc>
 802843a:	deff      	udf	#255	; 0xff
 802843c:	2301      	movs	r3, #1
 802843e:	7043      	strb	r3, [r0, #1]
 8028440:	4618      	mov	r0, r3
 8028442:	4770      	bx	lr
 8028444:	2000      	movs	r0, #0
 8028446:	4770      	bx	lr

08028448 <__cxa_guard_release>:
 8028448:	2301      	movs	r3, #1
 802844a:	6003      	str	r3, [r0, #0]
 802844c:	4770      	bx	lr

0802844e <_ZdlPv>:
 802844e:	f000 b88f 	b.w	8028570 <free>

08028452 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8028452:	b508      	push	{r3, lr}
 8028454:	4780      	blx	r0
 8028456:	f000 f80e 	bl	8028476 <abort>
	...

0802845c <_ZSt13get_terminatev>:
 802845c:	4b02      	ldr	r3, [pc, #8]	; (8028468 <_ZSt13get_terminatev+0xc>)
 802845e:	6818      	ldr	r0, [r3, #0]
 8028460:	f3bf 8f5b 	dmb	ish
 8028464:	4770      	bx	lr
 8028466:	bf00      	nop
 8028468:	20000094 	.word	0x20000094

0802846c <_ZSt9terminatev>:
 802846c:	b508      	push	{r3, lr}
 802846e:	f7ff fff5 	bl	802845c <_ZSt13get_terminatev>
 8028472:	f7ff ffee 	bl	8028452 <_ZN10__cxxabiv111__terminateEPFvvE>

08028476 <abort>:
 8028476:	b508      	push	{r3, lr}
 8028478:	2006      	movs	r0, #6
 802847a:	f000 fc3d 	bl	8028cf8 <raise>
 802847e:	2001      	movs	r0, #1
 8028480:	f7da fcfe 	bl	8002e80 <_exit>

08028484 <__assert_func>:
 8028484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8028486:	461c      	mov	r4, r3
 8028488:	4b09      	ldr	r3, [pc, #36]	; (80284b0 <__assert_func+0x2c>)
 802848a:	681b      	ldr	r3, [r3, #0]
 802848c:	4605      	mov	r5, r0
 802848e:	68d8      	ldr	r0, [r3, #12]
 8028490:	b152      	cbz	r2, 80284a8 <__assert_func+0x24>
 8028492:	4b08      	ldr	r3, [pc, #32]	; (80284b4 <__assert_func+0x30>)
 8028494:	9100      	str	r1, [sp, #0]
 8028496:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802849a:	4907      	ldr	r1, [pc, #28]	; (80284b8 <__assert_func+0x34>)
 802849c:	462b      	mov	r3, r5
 802849e:	4622      	mov	r2, r4
 80284a0:	f000 f828 	bl	80284f4 <fiprintf>
 80284a4:	f7ff ffe7 	bl	8028476 <abort>
 80284a8:	4b04      	ldr	r3, [pc, #16]	; (80284bc <__assert_func+0x38>)
 80284aa:	461a      	mov	r2, r3
 80284ac:	e7f2      	b.n	8028494 <__assert_func+0x10>
 80284ae:	bf00      	nop
 80284b0:	20000098 	.word	0x20000098
 80284b4:	0802e588 	.word	0x0802e588
 80284b8:	0802e595 	.word	0x0802e595
 80284bc:	0802e5c3 	.word	0x0802e5c3

080284c0 <atexit>:
 80284c0:	2300      	movs	r3, #0
 80284c2:	4601      	mov	r1, r0
 80284c4:	461a      	mov	r2, r3
 80284c6:	4618      	mov	r0, r3
 80284c8:	f000 bcf2 	b.w	8028eb0 <__register_exitproc>

080284cc <__cxa_atexit>:
 80284cc:	b510      	push	{r4, lr}
 80284ce:	4c05      	ldr	r4, [pc, #20]	; (80284e4 <__cxa_atexit+0x18>)
 80284d0:	4613      	mov	r3, r2
 80284d2:	b12c      	cbz	r4, 80284e0 <__cxa_atexit+0x14>
 80284d4:	460a      	mov	r2, r1
 80284d6:	4601      	mov	r1, r0
 80284d8:	2002      	movs	r0, #2
 80284da:	f000 fce9 	bl	8028eb0 <__register_exitproc>
 80284de:	bd10      	pop	{r4, pc}
 80284e0:	4620      	mov	r0, r4
 80284e2:	e7fc      	b.n	80284de <__cxa_atexit+0x12>
 80284e4:	08028eb1 	.word	0x08028eb1

080284e8 <__errno>:
 80284e8:	4b01      	ldr	r3, [pc, #4]	; (80284f0 <__errno+0x8>)
 80284ea:	6818      	ldr	r0, [r3, #0]
 80284ec:	4770      	bx	lr
 80284ee:	bf00      	nop
 80284f0:	20000098 	.word	0x20000098

080284f4 <fiprintf>:
 80284f4:	b40e      	push	{r1, r2, r3}
 80284f6:	b503      	push	{r0, r1, lr}
 80284f8:	4601      	mov	r1, r0
 80284fa:	ab03      	add	r3, sp, #12
 80284fc:	4805      	ldr	r0, [pc, #20]	; (8028514 <fiprintf+0x20>)
 80284fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8028502:	6800      	ldr	r0, [r0, #0]
 8028504:	9301      	str	r3, [sp, #4]
 8028506:	f000 f921 	bl	802874c <_vfiprintf_r>
 802850a:	b002      	add	sp, #8
 802850c:	f85d eb04 	ldr.w	lr, [sp], #4
 8028510:	b003      	add	sp, #12
 8028512:	4770      	bx	lr
 8028514:	20000098 	.word	0x20000098

08028518 <__libc_init_array>:
 8028518:	b570      	push	{r4, r5, r6, lr}
 802851a:	4e0d      	ldr	r6, [pc, #52]	; (8028550 <__libc_init_array+0x38>)
 802851c:	4c0d      	ldr	r4, [pc, #52]	; (8028554 <__libc_init_array+0x3c>)
 802851e:	1ba4      	subs	r4, r4, r6
 8028520:	10a4      	asrs	r4, r4, #2
 8028522:	2500      	movs	r5, #0
 8028524:	42a5      	cmp	r5, r4
 8028526:	d109      	bne.n	802853c <__libc_init_array+0x24>
 8028528:	4e0b      	ldr	r6, [pc, #44]	; (8028558 <__libc_init_array+0x40>)
 802852a:	4c0c      	ldr	r4, [pc, #48]	; (802855c <__libc_init_array+0x44>)
 802852c:	f000 ffb0 	bl	8029490 <_init>
 8028530:	1ba4      	subs	r4, r4, r6
 8028532:	10a4      	asrs	r4, r4, #2
 8028534:	2500      	movs	r5, #0
 8028536:	42a5      	cmp	r5, r4
 8028538:	d105      	bne.n	8028546 <__libc_init_array+0x2e>
 802853a:	bd70      	pop	{r4, r5, r6, pc}
 802853c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8028540:	4798      	blx	r3
 8028542:	3501      	adds	r5, #1
 8028544:	e7ee      	b.n	8028524 <__libc_init_array+0xc>
 8028546:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802854a:	4798      	blx	r3
 802854c:	3501      	adds	r5, #1
 802854e:	e7f2      	b.n	8028536 <__libc_init_array+0x1e>
 8028550:	080c2688 	.word	0x080c2688
 8028554:	080c2688 	.word	0x080c2688
 8028558:	080c2688 	.word	0x080c2688
 802855c:	080c269c 	.word	0x080c269c

08028560 <malloc>:
 8028560:	4b02      	ldr	r3, [pc, #8]	; (802856c <malloc+0xc>)
 8028562:	4601      	mov	r1, r0
 8028564:	6818      	ldr	r0, [r3, #0]
 8028566:	f000 b86d 	b.w	8028644 <_malloc_r>
 802856a:	bf00      	nop
 802856c:	20000098 	.word	0x20000098

08028570 <free>:
 8028570:	4b02      	ldr	r3, [pc, #8]	; (802857c <free+0xc>)
 8028572:	4601      	mov	r1, r0
 8028574:	6818      	ldr	r0, [r3, #0]
 8028576:	f000 b817 	b.w	80285a8 <_free_r>
 802857a:	bf00      	nop
 802857c:	20000098 	.word	0x20000098

08028580 <memcpy>:
 8028580:	b510      	push	{r4, lr}
 8028582:	1e43      	subs	r3, r0, #1
 8028584:	440a      	add	r2, r1
 8028586:	4291      	cmp	r1, r2
 8028588:	d100      	bne.n	802858c <memcpy+0xc>
 802858a:	bd10      	pop	{r4, pc}
 802858c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028590:	f803 4f01 	strb.w	r4, [r3, #1]!
 8028594:	e7f7      	b.n	8028586 <memcpy+0x6>

08028596 <memset>:
 8028596:	4402      	add	r2, r0
 8028598:	4603      	mov	r3, r0
 802859a:	4293      	cmp	r3, r2
 802859c:	d100      	bne.n	80285a0 <memset+0xa>
 802859e:	4770      	bx	lr
 80285a0:	f803 1b01 	strb.w	r1, [r3], #1
 80285a4:	e7f9      	b.n	802859a <memset+0x4>
	...

080285a8 <_free_r>:
 80285a8:	b538      	push	{r3, r4, r5, lr}
 80285aa:	4605      	mov	r5, r0
 80285ac:	2900      	cmp	r1, #0
 80285ae:	d045      	beq.n	802863c <_free_r+0x94>
 80285b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80285b4:	1f0c      	subs	r4, r1, #4
 80285b6:	2b00      	cmp	r3, #0
 80285b8:	bfb8      	it	lt
 80285ba:	18e4      	addlt	r4, r4, r3
 80285bc:	f000 feba 	bl	8029334 <__malloc_lock>
 80285c0:	4a1f      	ldr	r2, [pc, #124]	; (8028640 <_free_r+0x98>)
 80285c2:	6813      	ldr	r3, [r2, #0]
 80285c4:	4610      	mov	r0, r2
 80285c6:	b933      	cbnz	r3, 80285d6 <_free_r+0x2e>
 80285c8:	6063      	str	r3, [r4, #4]
 80285ca:	6014      	str	r4, [r2, #0]
 80285cc:	4628      	mov	r0, r5
 80285ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80285d2:	f000 beb0 	b.w	8029336 <__malloc_unlock>
 80285d6:	42a3      	cmp	r3, r4
 80285d8:	d90c      	bls.n	80285f4 <_free_r+0x4c>
 80285da:	6821      	ldr	r1, [r4, #0]
 80285dc:	1862      	adds	r2, r4, r1
 80285de:	4293      	cmp	r3, r2
 80285e0:	bf04      	itt	eq
 80285e2:	681a      	ldreq	r2, [r3, #0]
 80285e4:	685b      	ldreq	r3, [r3, #4]
 80285e6:	6063      	str	r3, [r4, #4]
 80285e8:	bf04      	itt	eq
 80285ea:	1852      	addeq	r2, r2, r1
 80285ec:	6022      	streq	r2, [r4, #0]
 80285ee:	6004      	str	r4, [r0, #0]
 80285f0:	e7ec      	b.n	80285cc <_free_r+0x24>
 80285f2:	4613      	mov	r3, r2
 80285f4:	685a      	ldr	r2, [r3, #4]
 80285f6:	b10a      	cbz	r2, 80285fc <_free_r+0x54>
 80285f8:	42a2      	cmp	r2, r4
 80285fa:	d9fa      	bls.n	80285f2 <_free_r+0x4a>
 80285fc:	6819      	ldr	r1, [r3, #0]
 80285fe:	1858      	adds	r0, r3, r1
 8028600:	42a0      	cmp	r0, r4
 8028602:	d10b      	bne.n	802861c <_free_r+0x74>
 8028604:	6820      	ldr	r0, [r4, #0]
 8028606:	4401      	add	r1, r0
 8028608:	1858      	adds	r0, r3, r1
 802860a:	4282      	cmp	r2, r0
 802860c:	6019      	str	r1, [r3, #0]
 802860e:	d1dd      	bne.n	80285cc <_free_r+0x24>
 8028610:	6810      	ldr	r0, [r2, #0]
 8028612:	6852      	ldr	r2, [r2, #4]
 8028614:	605a      	str	r2, [r3, #4]
 8028616:	4401      	add	r1, r0
 8028618:	6019      	str	r1, [r3, #0]
 802861a:	e7d7      	b.n	80285cc <_free_r+0x24>
 802861c:	d902      	bls.n	8028624 <_free_r+0x7c>
 802861e:	230c      	movs	r3, #12
 8028620:	602b      	str	r3, [r5, #0]
 8028622:	e7d3      	b.n	80285cc <_free_r+0x24>
 8028624:	6820      	ldr	r0, [r4, #0]
 8028626:	1821      	adds	r1, r4, r0
 8028628:	428a      	cmp	r2, r1
 802862a:	bf04      	itt	eq
 802862c:	6811      	ldreq	r1, [r2, #0]
 802862e:	6852      	ldreq	r2, [r2, #4]
 8028630:	6062      	str	r2, [r4, #4]
 8028632:	bf04      	itt	eq
 8028634:	1809      	addeq	r1, r1, r0
 8028636:	6021      	streq	r1, [r4, #0]
 8028638:	605c      	str	r4, [r3, #4]
 802863a:	e7c7      	b.n	80285cc <_free_r+0x24>
 802863c:	bd38      	pop	{r3, r4, r5, pc}
 802863e:	bf00      	nop
 8028640:	2000b538 	.word	0x2000b538

08028644 <_malloc_r>:
 8028644:	b570      	push	{r4, r5, r6, lr}
 8028646:	1ccd      	adds	r5, r1, #3
 8028648:	f025 0503 	bic.w	r5, r5, #3
 802864c:	3508      	adds	r5, #8
 802864e:	2d0c      	cmp	r5, #12
 8028650:	bf38      	it	cc
 8028652:	250c      	movcc	r5, #12
 8028654:	2d00      	cmp	r5, #0
 8028656:	4606      	mov	r6, r0
 8028658:	db01      	blt.n	802865e <_malloc_r+0x1a>
 802865a:	42a9      	cmp	r1, r5
 802865c:	d903      	bls.n	8028666 <_malloc_r+0x22>
 802865e:	230c      	movs	r3, #12
 8028660:	6033      	str	r3, [r6, #0]
 8028662:	2000      	movs	r0, #0
 8028664:	bd70      	pop	{r4, r5, r6, pc}
 8028666:	f000 fe65 	bl	8029334 <__malloc_lock>
 802866a:	4a21      	ldr	r2, [pc, #132]	; (80286f0 <_malloc_r+0xac>)
 802866c:	6814      	ldr	r4, [r2, #0]
 802866e:	4621      	mov	r1, r4
 8028670:	b991      	cbnz	r1, 8028698 <_malloc_r+0x54>
 8028672:	4c20      	ldr	r4, [pc, #128]	; (80286f4 <_malloc_r+0xb0>)
 8028674:	6823      	ldr	r3, [r4, #0]
 8028676:	b91b      	cbnz	r3, 8028680 <_malloc_r+0x3c>
 8028678:	4630      	mov	r0, r6
 802867a:	f000 fb05 	bl	8028c88 <_sbrk_r>
 802867e:	6020      	str	r0, [r4, #0]
 8028680:	4629      	mov	r1, r5
 8028682:	4630      	mov	r0, r6
 8028684:	f000 fb00 	bl	8028c88 <_sbrk_r>
 8028688:	1c43      	adds	r3, r0, #1
 802868a:	d124      	bne.n	80286d6 <_malloc_r+0x92>
 802868c:	230c      	movs	r3, #12
 802868e:	6033      	str	r3, [r6, #0]
 8028690:	4630      	mov	r0, r6
 8028692:	f000 fe50 	bl	8029336 <__malloc_unlock>
 8028696:	e7e4      	b.n	8028662 <_malloc_r+0x1e>
 8028698:	680b      	ldr	r3, [r1, #0]
 802869a:	1b5b      	subs	r3, r3, r5
 802869c:	d418      	bmi.n	80286d0 <_malloc_r+0x8c>
 802869e:	2b0b      	cmp	r3, #11
 80286a0:	d90f      	bls.n	80286c2 <_malloc_r+0x7e>
 80286a2:	600b      	str	r3, [r1, #0]
 80286a4:	50cd      	str	r5, [r1, r3]
 80286a6:	18cc      	adds	r4, r1, r3
 80286a8:	4630      	mov	r0, r6
 80286aa:	f000 fe44 	bl	8029336 <__malloc_unlock>
 80286ae:	f104 000b 	add.w	r0, r4, #11
 80286b2:	1d23      	adds	r3, r4, #4
 80286b4:	f020 0007 	bic.w	r0, r0, #7
 80286b8:	1ac3      	subs	r3, r0, r3
 80286ba:	d0d3      	beq.n	8028664 <_malloc_r+0x20>
 80286bc:	425a      	negs	r2, r3
 80286be:	50e2      	str	r2, [r4, r3]
 80286c0:	e7d0      	b.n	8028664 <_malloc_r+0x20>
 80286c2:	428c      	cmp	r4, r1
 80286c4:	684b      	ldr	r3, [r1, #4]
 80286c6:	bf16      	itet	ne
 80286c8:	6063      	strne	r3, [r4, #4]
 80286ca:	6013      	streq	r3, [r2, #0]
 80286cc:	460c      	movne	r4, r1
 80286ce:	e7eb      	b.n	80286a8 <_malloc_r+0x64>
 80286d0:	460c      	mov	r4, r1
 80286d2:	6849      	ldr	r1, [r1, #4]
 80286d4:	e7cc      	b.n	8028670 <_malloc_r+0x2c>
 80286d6:	1cc4      	adds	r4, r0, #3
 80286d8:	f024 0403 	bic.w	r4, r4, #3
 80286dc:	42a0      	cmp	r0, r4
 80286de:	d005      	beq.n	80286ec <_malloc_r+0xa8>
 80286e0:	1a21      	subs	r1, r4, r0
 80286e2:	4630      	mov	r0, r6
 80286e4:	f000 fad0 	bl	8028c88 <_sbrk_r>
 80286e8:	3001      	adds	r0, #1
 80286ea:	d0cf      	beq.n	802868c <_malloc_r+0x48>
 80286ec:	6025      	str	r5, [r4, #0]
 80286ee:	e7db      	b.n	80286a8 <_malloc_r+0x64>
 80286f0:	2000b538 	.word	0x2000b538
 80286f4:	2000b53c 	.word	0x2000b53c

080286f8 <__sfputc_r>:
 80286f8:	6893      	ldr	r3, [r2, #8]
 80286fa:	3b01      	subs	r3, #1
 80286fc:	2b00      	cmp	r3, #0
 80286fe:	b410      	push	{r4}
 8028700:	6093      	str	r3, [r2, #8]
 8028702:	da08      	bge.n	8028716 <__sfputc_r+0x1e>
 8028704:	6994      	ldr	r4, [r2, #24]
 8028706:	42a3      	cmp	r3, r4
 8028708:	db01      	blt.n	802870e <__sfputc_r+0x16>
 802870a:	290a      	cmp	r1, #10
 802870c:	d103      	bne.n	8028716 <__sfputc_r+0x1e>
 802870e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028712:	f000 bb0d 	b.w	8028d30 <__swbuf_r>
 8028716:	6813      	ldr	r3, [r2, #0]
 8028718:	1c58      	adds	r0, r3, #1
 802871a:	6010      	str	r0, [r2, #0]
 802871c:	7019      	strb	r1, [r3, #0]
 802871e:	4608      	mov	r0, r1
 8028720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028724:	4770      	bx	lr

08028726 <__sfputs_r>:
 8028726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028728:	4606      	mov	r6, r0
 802872a:	460f      	mov	r7, r1
 802872c:	4614      	mov	r4, r2
 802872e:	18d5      	adds	r5, r2, r3
 8028730:	42ac      	cmp	r4, r5
 8028732:	d101      	bne.n	8028738 <__sfputs_r+0x12>
 8028734:	2000      	movs	r0, #0
 8028736:	e007      	b.n	8028748 <__sfputs_r+0x22>
 8028738:	463a      	mov	r2, r7
 802873a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802873e:	4630      	mov	r0, r6
 8028740:	f7ff ffda 	bl	80286f8 <__sfputc_r>
 8028744:	1c43      	adds	r3, r0, #1
 8028746:	d1f3      	bne.n	8028730 <__sfputs_r+0xa>
 8028748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802874c <_vfiprintf_r>:
 802874c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028750:	460c      	mov	r4, r1
 8028752:	b09d      	sub	sp, #116	; 0x74
 8028754:	4617      	mov	r7, r2
 8028756:	461d      	mov	r5, r3
 8028758:	4606      	mov	r6, r0
 802875a:	b118      	cbz	r0, 8028764 <_vfiprintf_r+0x18>
 802875c:	6983      	ldr	r3, [r0, #24]
 802875e:	b90b      	cbnz	r3, 8028764 <_vfiprintf_r+0x18>
 8028760:	f000 fcfa 	bl	8029158 <__sinit>
 8028764:	4b7c      	ldr	r3, [pc, #496]	; (8028958 <_vfiprintf_r+0x20c>)
 8028766:	429c      	cmp	r4, r3
 8028768:	d158      	bne.n	802881c <_vfiprintf_r+0xd0>
 802876a:	6874      	ldr	r4, [r6, #4]
 802876c:	89a3      	ldrh	r3, [r4, #12]
 802876e:	0718      	lsls	r0, r3, #28
 8028770:	d55e      	bpl.n	8028830 <_vfiprintf_r+0xe4>
 8028772:	6923      	ldr	r3, [r4, #16]
 8028774:	2b00      	cmp	r3, #0
 8028776:	d05b      	beq.n	8028830 <_vfiprintf_r+0xe4>
 8028778:	2300      	movs	r3, #0
 802877a:	9309      	str	r3, [sp, #36]	; 0x24
 802877c:	2320      	movs	r3, #32
 802877e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028782:	2330      	movs	r3, #48	; 0x30
 8028784:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028788:	9503      	str	r5, [sp, #12]
 802878a:	f04f 0b01 	mov.w	fp, #1
 802878e:	46b8      	mov	r8, r7
 8028790:	4645      	mov	r5, r8
 8028792:	f815 3b01 	ldrb.w	r3, [r5], #1
 8028796:	b10b      	cbz	r3, 802879c <_vfiprintf_r+0x50>
 8028798:	2b25      	cmp	r3, #37	; 0x25
 802879a:	d154      	bne.n	8028846 <_vfiprintf_r+0xfa>
 802879c:	ebb8 0a07 	subs.w	sl, r8, r7
 80287a0:	d00b      	beq.n	80287ba <_vfiprintf_r+0x6e>
 80287a2:	4653      	mov	r3, sl
 80287a4:	463a      	mov	r2, r7
 80287a6:	4621      	mov	r1, r4
 80287a8:	4630      	mov	r0, r6
 80287aa:	f7ff ffbc 	bl	8028726 <__sfputs_r>
 80287ae:	3001      	adds	r0, #1
 80287b0:	f000 80c2 	beq.w	8028938 <_vfiprintf_r+0x1ec>
 80287b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80287b6:	4453      	add	r3, sl
 80287b8:	9309      	str	r3, [sp, #36]	; 0x24
 80287ba:	f898 3000 	ldrb.w	r3, [r8]
 80287be:	2b00      	cmp	r3, #0
 80287c0:	f000 80ba 	beq.w	8028938 <_vfiprintf_r+0x1ec>
 80287c4:	2300      	movs	r3, #0
 80287c6:	f04f 32ff 	mov.w	r2, #4294967295
 80287ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80287ce:	9304      	str	r3, [sp, #16]
 80287d0:	9307      	str	r3, [sp, #28]
 80287d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80287d6:	931a      	str	r3, [sp, #104]	; 0x68
 80287d8:	46a8      	mov	r8, r5
 80287da:	2205      	movs	r2, #5
 80287dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80287e0:	485e      	ldr	r0, [pc, #376]	; (802895c <_vfiprintf_r+0x210>)
 80287e2:	f7d7 fd15 	bl	8000210 <memchr>
 80287e6:	9b04      	ldr	r3, [sp, #16]
 80287e8:	bb78      	cbnz	r0, 802884a <_vfiprintf_r+0xfe>
 80287ea:	06d9      	lsls	r1, r3, #27
 80287ec:	bf44      	itt	mi
 80287ee:	2220      	movmi	r2, #32
 80287f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80287f4:	071a      	lsls	r2, r3, #28
 80287f6:	bf44      	itt	mi
 80287f8:	222b      	movmi	r2, #43	; 0x2b
 80287fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80287fe:	782a      	ldrb	r2, [r5, #0]
 8028800:	2a2a      	cmp	r2, #42	; 0x2a
 8028802:	d02a      	beq.n	802885a <_vfiprintf_r+0x10e>
 8028804:	9a07      	ldr	r2, [sp, #28]
 8028806:	46a8      	mov	r8, r5
 8028808:	2000      	movs	r0, #0
 802880a:	250a      	movs	r5, #10
 802880c:	4641      	mov	r1, r8
 802880e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028812:	3b30      	subs	r3, #48	; 0x30
 8028814:	2b09      	cmp	r3, #9
 8028816:	d969      	bls.n	80288ec <_vfiprintf_r+0x1a0>
 8028818:	b360      	cbz	r0, 8028874 <_vfiprintf_r+0x128>
 802881a:	e024      	b.n	8028866 <_vfiprintf_r+0x11a>
 802881c:	4b50      	ldr	r3, [pc, #320]	; (8028960 <_vfiprintf_r+0x214>)
 802881e:	429c      	cmp	r4, r3
 8028820:	d101      	bne.n	8028826 <_vfiprintf_r+0xda>
 8028822:	68b4      	ldr	r4, [r6, #8]
 8028824:	e7a2      	b.n	802876c <_vfiprintf_r+0x20>
 8028826:	4b4f      	ldr	r3, [pc, #316]	; (8028964 <_vfiprintf_r+0x218>)
 8028828:	429c      	cmp	r4, r3
 802882a:	bf08      	it	eq
 802882c:	68f4      	ldreq	r4, [r6, #12]
 802882e:	e79d      	b.n	802876c <_vfiprintf_r+0x20>
 8028830:	4621      	mov	r1, r4
 8028832:	4630      	mov	r0, r6
 8028834:	f000 face 	bl	8028dd4 <__swsetup_r>
 8028838:	2800      	cmp	r0, #0
 802883a:	d09d      	beq.n	8028778 <_vfiprintf_r+0x2c>
 802883c:	f04f 30ff 	mov.w	r0, #4294967295
 8028840:	b01d      	add	sp, #116	; 0x74
 8028842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028846:	46a8      	mov	r8, r5
 8028848:	e7a2      	b.n	8028790 <_vfiprintf_r+0x44>
 802884a:	4a44      	ldr	r2, [pc, #272]	; (802895c <_vfiprintf_r+0x210>)
 802884c:	1a80      	subs	r0, r0, r2
 802884e:	fa0b f000 	lsl.w	r0, fp, r0
 8028852:	4318      	orrs	r0, r3
 8028854:	9004      	str	r0, [sp, #16]
 8028856:	4645      	mov	r5, r8
 8028858:	e7be      	b.n	80287d8 <_vfiprintf_r+0x8c>
 802885a:	9a03      	ldr	r2, [sp, #12]
 802885c:	1d11      	adds	r1, r2, #4
 802885e:	6812      	ldr	r2, [r2, #0]
 8028860:	9103      	str	r1, [sp, #12]
 8028862:	2a00      	cmp	r2, #0
 8028864:	db01      	blt.n	802886a <_vfiprintf_r+0x11e>
 8028866:	9207      	str	r2, [sp, #28]
 8028868:	e004      	b.n	8028874 <_vfiprintf_r+0x128>
 802886a:	4252      	negs	r2, r2
 802886c:	f043 0302 	orr.w	r3, r3, #2
 8028870:	9207      	str	r2, [sp, #28]
 8028872:	9304      	str	r3, [sp, #16]
 8028874:	f898 3000 	ldrb.w	r3, [r8]
 8028878:	2b2e      	cmp	r3, #46	; 0x2e
 802887a:	d10e      	bne.n	802889a <_vfiprintf_r+0x14e>
 802887c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8028880:	2b2a      	cmp	r3, #42	; 0x2a
 8028882:	d138      	bne.n	80288f6 <_vfiprintf_r+0x1aa>
 8028884:	9b03      	ldr	r3, [sp, #12]
 8028886:	1d1a      	adds	r2, r3, #4
 8028888:	681b      	ldr	r3, [r3, #0]
 802888a:	9203      	str	r2, [sp, #12]
 802888c:	2b00      	cmp	r3, #0
 802888e:	bfb8      	it	lt
 8028890:	f04f 33ff 	movlt.w	r3, #4294967295
 8028894:	f108 0802 	add.w	r8, r8, #2
 8028898:	9305      	str	r3, [sp, #20]
 802889a:	4d33      	ldr	r5, [pc, #204]	; (8028968 <_vfiprintf_r+0x21c>)
 802889c:	f898 1000 	ldrb.w	r1, [r8]
 80288a0:	2203      	movs	r2, #3
 80288a2:	4628      	mov	r0, r5
 80288a4:	f7d7 fcb4 	bl	8000210 <memchr>
 80288a8:	b140      	cbz	r0, 80288bc <_vfiprintf_r+0x170>
 80288aa:	2340      	movs	r3, #64	; 0x40
 80288ac:	1b40      	subs	r0, r0, r5
 80288ae:	fa03 f000 	lsl.w	r0, r3, r0
 80288b2:	9b04      	ldr	r3, [sp, #16]
 80288b4:	4303      	orrs	r3, r0
 80288b6:	f108 0801 	add.w	r8, r8, #1
 80288ba:	9304      	str	r3, [sp, #16]
 80288bc:	f898 1000 	ldrb.w	r1, [r8]
 80288c0:	482a      	ldr	r0, [pc, #168]	; (802896c <_vfiprintf_r+0x220>)
 80288c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80288c6:	2206      	movs	r2, #6
 80288c8:	f108 0701 	add.w	r7, r8, #1
 80288cc:	f7d7 fca0 	bl	8000210 <memchr>
 80288d0:	2800      	cmp	r0, #0
 80288d2:	d037      	beq.n	8028944 <_vfiprintf_r+0x1f8>
 80288d4:	4b26      	ldr	r3, [pc, #152]	; (8028970 <_vfiprintf_r+0x224>)
 80288d6:	bb1b      	cbnz	r3, 8028920 <_vfiprintf_r+0x1d4>
 80288d8:	9b03      	ldr	r3, [sp, #12]
 80288da:	3307      	adds	r3, #7
 80288dc:	f023 0307 	bic.w	r3, r3, #7
 80288e0:	3308      	adds	r3, #8
 80288e2:	9303      	str	r3, [sp, #12]
 80288e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80288e6:	444b      	add	r3, r9
 80288e8:	9309      	str	r3, [sp, #36]	; 0x24
 80288ea:	e750      	b.n	802878e <_vfiprintf_r+0x42>
 80288ec:	fb05 3202 	mla	r2, r5, r2, r3
 80288f0:	2001      	movs	r0, #1
 80288f2:	4688      	mov	r8, r1
 80288f4:	e78a      	b.n	802880c <_vfiprintf_r+0xc0>
 80288f6:	2300      	movs	r3, #0
 80288f8:	f108 0801 	add.w	r8, r8, #1
 80288fc:	9305      	str	r3, [sp, #20]
 80288fe:	4619      	mov	r1, r3
 8028900:	250a      	movs	r5, #10
 8028902:	4640      	mov	r0, r8
 8028904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028908:	3a30      	subs	r2, #48	; 0x30
 802890a:	2a09      	cmp	r2, #9
 802890c:	d903      	bls.n	8028916 <_vfiprintf_r+0x1ca>
 802890e:	2b00      	cmp	r3, #0
 8028910:	d0c3      	beq.n	802889a <_vfiprintf_r+0x14e>
 8028912:	9105      	str	r1, [sp, #20]
 8028914:	e7c1      	b.n	802889a <_vfiprintf_r+0x14e>
 8028916:	fb05 2101 	mla	r1, r5, r1, r2
 802891a:	2301      	movs	r3, #1
 802891c:	4680      	mov	r8, r0
 802891e:	e7f0      	b.n	8028902 <_vfiprintf_r+0x1b6>
 8028920:	ab03      	add	r3, sp, #12
 8028922:	9300      	str	r3, [sp, #0]
 8028924:	4622      	mov	r2, r4
 8028926:	4b13      	ldr	r3, [pc, #76]	; (8028974 <_vfiprintf_r+0x228>)
 8028928:	a904      	add	r1, sp, #16
 802892a:	4630      	mov	r0, r6
 802892c:	f3af 8000 	nop.w
 8028930:	f1b0 3fff 	cmp.w	r0, #4294967295
 8028934:	4681      	mov	r9, r0
 8028936:	d1d5      	bne.n	80288e4 <_vfiprintf_r+0x198>
 8028938:	89a3      	ldrh	r3, [r4, #12]
 802893a:	065b      	lsls	r3, r3, #25
 802893c:	f53f af7e 	bmi.w	802883c <_vfiprintf_r+0xf0>
 8028940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028942:	e77d      	b.n	8028840 <_vfiprintf_r+0xf4>
 8028944:	ab03      	add	r3, sp, #12
 8028946:	9300      	str	r3, [sp, #0]
 8028948:	4622      	mov	r2, r4
 802894a:	4b0a      	ldr	r3, [pc, #40]	; (8028974 <_vfiprintf_r+0x228>)
 802894c:	a904      	add	r1, sp, #16
 802894e:	4630      	mov	r0, r6
 8028950:	f000 f888 	bl	8028a64 <_printf_i>
 8028954:	e7ec      	b.n	8028930 <_vfiprintf_r+0x1e4>
 8028956:	bf00      	nop
 8028958:	0802e620 	.word	0x0802e620
 802895c:	0802e5c8 	.word	0x0802e5c8
 8028960:	0802e640 	.word	0x0802e640
 8028964:	0802e600 	.word	0x0802e600
 8028968:	0802e5ce 	.word	0x0802e5ce
 802896c:	0802e5d2 	.word	0x0802e5d2
 8028970:	00000000 	.word	0x00000000
 8028974:	08028727 	.word	0x08028727

08028978 <_printf_common>:
 8028978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802897c:	4691      	mov	r9, r2
 802897e:	461f      	mov	r7, r3
 8028980:	688a      	ldr	r2, [r1, #8]
 8028982:	690b      	ldr	r3, [r1, #16]
 8028984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8028988:	4293      	cmp	r3, r2
 802898a:	bfb8      	it	lt
 802898c:	4613      	movlt	r3, r2
 802898e:	f8c9 3000 	str.w	r3, [r9]
 8028992:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8028996:	4606      	mov	r6, r0
 8028998:	460c      	mov	r4, r1
 802899a:	b112      	cbz	r2, 80289a2 <_printf_common+0x2a>
 802899c:	3301      	adds	r3, #1
 802899e:	f8c9 3000 	str.w	r3, [r9]
 80289a2:	6823      	ldr	r3, [r4, #0]
 80289a4:	0699      	lsls	r1, r3, #26
 80289a6:	bf42      	ittt	mi
 80289a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80289ac:	3302      	addmi	r3, #2
 80289ae:	f8c9 3000 	strmi.w	r3, [r9]
 80289b2:	6825      	ldr	r5, [r4, #0]
 80289b4:	f015 0506 	ands.w	r5, r5, #6
 80289b8:	d107      	bne.n	80289ca <_printf_common+0x52>
 80289ba:	f104 0a19 	add.w	sl, r4, #25
 80289be:	68e3      	ldr	r3, [r4, #12]
 80289c0:	f8d9 2000 	ldr.w	r2, [r9]
 80289c4:	1a9b      	subs	r3, r3, r2
 80289c6:	42ab      	cmp	r3, r5
 80289c8:	dc28      	bgt.n	8028a1c <_printf_common+0xa4>
 80289ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80289ce:	6822      	ldr	r2, [r4, #0]
 80289d0:	3300      	adds	r3, #0
 80289d2:	bf18      	it	ne
 80289d4:	2301      	movne	r3, #1
 80289d6:	0692      	lsls	r2, r2, #26
 80289d8:	d42d      	bmi.n	8028a36 <_printf_common+0xbe>
 80289da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80289de:	4639      	mov	r1, r7
 80289e0:	4630      	mov	r0, r6
 80289e2:	47c0      	blx	r8
 80289e4:	3001      	adds	r0, #1
 80289e6:	d020      	beq.n	8028a2a <_printf_common+0xb2>
 80289e8:	6823      	ldr	r3, [r4, #0]
 80289ea:	68e5      	ldr	r5, [r4, #12]
 80289ec:	f8d9 2000 	ldr.w	r2, [r9]
 80289f0:	f003 0306 	and.w	r3, r3, #6
 80289f4:	2b04      	cmp	r3, #4
 80289f6:	bf08      	it	eq
 80289f8:	1aad      	subeq	r5, r5, r2
 80289fa:	68a3      	ldr	r3, [r4, #8]
 80289fc:	6922      	ldr	r2, [r4, #16]
 80289fe:	bf0c      	ite	eq
 8028a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8028a04:	2500      	movne	r5, #0
 8028a06:	4293      	cmp	r3, r2
 8028a08:	bfc4      	itt	gt
 8028a0a:	1a9b      	subgt	r3, r3, r2
 8028a0c:	18ed      	addgt	r5, r5, r3
 8028a0e:	f04f 0900 	mov.w	r9, #0
 8028a12:	341a      	adds	r4, #26
 8028a14:	454d      	cmp	r5, r9
 8028a16:	d11a      	bne.n	8028a4e <_printf_common+0xd6>
 8028a18:	2000      	movs	r0, #0
 8028a1a:	e008      	b.n	8028a2e <_printf_common+0xb6>
 8028a1c:	2301      	movs	r3, #1
 8028a1e:	4652      	mov	r2, sl
 8028a20:	4639      	mov	r1, r7
 8028a22:	4630      	mov	r0, r6
 8028a24:	47c0      	blx	r8
 8028a26:	3001      	adds	r0, #1
 8028a28:	d103      	bne.n	8028a32 <_printf_common+0xba>
 8028a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8028a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028a32:	3501      	adds	r5, #1
 8028a34:	e7c3      	b.n	80289be <_printf_common+0x46>
 8028a36:	18e1      	adds	r1, r4, r3
 8028a38:	1c5a      	adds	r2, r3, #1
 8028a3a:	2030      	movs	r0, #48	; 0x30
 8028a3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8028a40:	4422      	add	r2, r4
 8028a42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8028a46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8028a4a:	3302      	adds	r3, #2
 8028a4c:	e7c5      	b.n	80289da <_printf_common+0x62>
 8028a4e:	2301      	movs	r3, #1
 8028a50:	4622      	mov	r2, r4
 8028a52:	4639      	mov	r1, r7
 8028a54:	4630      	mov	r0, r6
 8028a56:	47c0      	blx	r8
 8028a58:	3001      	adds	r0, #1
 8028a5a:	d0e6      	beq.n	8028a2a <_printf_common+0xb2>
 8028a5c:	f109 0901 	add.w	r9, r9, #1
 8028a60:	e7d8      	b.n	8028a14 <_printf_common+0x9c>
	...

08028a64 <_printf_i>:
 8028a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028a68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8028a6c:	460c      	mov	r4, r1
 8028a6e:	7e09      	ldrb	r1, [r1, #24]
 8028a70:	b085      	sub	sp, #20
 8028a72:	296e      	cmp	r1, #110	; 0x6e
 8028a74:	4617      	mov	r7, r2
 8028a76:	4606      	mov	r6, r0
 8028a78:	4698      	mov	r8, r3
 8028a7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028a7c:	f000 80b3 	beq.w	8028be6 <_printf_i+0x182>
 8028a80:	d822      	bhi.n	8028ac8 <_printf_i+0x64>
 8028a82:	2963      	cmp	r1, #99	; 0x63
 8028a84:	d036      	beq.n	8028af4 <_printf_i+0x90>
 8028a86:	d80a      	bhi.n	8028a9e <_printf_i+0x3a>
 8028a88:	2900      	cmp	r1, #0
 8028a8a:	f000 80b9 	beq.w	8028c00 <_printf_i+0x19c>
 8028a8e:	2958      	cmp	r1, #88	; 0x58
 8028a90:	f000 8083 	beq.w	8028b9a <_printf_i+0x136>
 8028a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028a98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8028a9c:	e032      	b.n	8028b04 <_printf_i+0xa0>
 8028a9e:	2964      	cmp	r1, #100	; 0x64
 8028aa0:	d001      	beq.n	8028aa6 <_printf_i+0x42>
 8028aa2:	2969      	cmp	r1, #105	; 0x69
 8028aa4:	d1f6      	bne.n	8028a94 <_printf_i+0x30>
 8028aa6:	6820      	ldr	r0, [r4, #0]
 8028aa8:	6813      	ldr	r3, [r2, #0]
 8028aaa:	0605      	lsls	r5, r0, #24
 8028aac:	f103 0104 	add.w	r1, r3, #4
 8028ab0:	d52a      	bpl.n	8028b08 <_printf_i+0xa4>
 8028ab2:	681b      	ldr	r3, [r3, #0]
 8028ab4:	6011      	str	r1, [r2, #0]
 8028ab6:	2b00      	cmp	r3, #0
 8028ab8:	da03      	bge.n	8028ac2 <_printf_i+0x5e>
 8028aba:	222d      	movs	r2, #45	; 0x2d
 8028abc:	425b      	negs	r3, r3
 8028abe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8028ac2:	486f      	ldr	r0, [pc, #444]	; (8028c80 <_printf_i+0x21c>)
 8028ac4:	220a      	movs	r2, #10
 8028ac6:	e039      	b.n	8028b3c <_printf_i+0xd8>
 8028ac8:	2973      	cmp	r1, #115	; 0x73
 8028aca:	f000 809d 	beq.w	8028c08 <_printf_i+0x1a4>
 8028ace:	d808      	bhi.n	8028ae2 <_printf_i+0x7e>
 8028ad0:	296f      	cmp	r1, #111	; 0x6f
 8028ad2:	d020      	beq.n	8028b16 <_printf_i+0xb2>
 8028ad4:	2970      	cmp	r1, #112	; 0x70
 8028ad6:	d1dd      	bne.n	8028a94 <_printf_i+0x30>
 8028ad8:	6823      	ldr	r3, [r4, #0]
 8028ada:	f043 0320 	orr.w	r3, r3, #32
 8028ade:	6023      	str	r3, [r4, #0]
 8028ae0:	e003      	b.n	8028aea <_printf_i+0x86>
 8028ae2:	2975      	cmp	r1, #117	; 0x75
 8028ae4:	d017      	beq.n	8028b16 <_printf_i+0xb2>
 8028ae6:	2978      	cmp	r1, #120	; 0x78
 8028ae8:	d1d4      	bne.n	8028a94 <_printf_i+0x30>
 8028aea:	2378      	movs	r3, #120	; 0x78
 8028aec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8028af0:	4864      	ldr	r0, [pc, #400]	; (8028c84 <_printf_i+0x220>)
 8028af2:	e055      	b.n	8028ba0 <_printf_i+0x13c>
 8028af4:	6813      	ldr	r3, [r2, #0]
 8028af6:	1d19      	adds	r1, r3, #4
 8028af8:	681b      	ldr	r3, [r3, #0]
 8028afa:	6011      	str	r1, [r2, #0]
 8028afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8028b04:	2301      	movs	r3, #1
 8028b06:	e08c      	b.n	8028c22 <_printf_i+0x1be>
 8028b08:	681b      	ldr	r3, [r3, #0]
 8028b0a:	6011      	str	r1, [r2, #0]
 8028b0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8028b10:	bf18      	it	ne
 8028b12:	b21b      	sxthne	r3, r3
 8028b14:	e7cf      	b.n	8028ab6 <_printf_i+0x52>
 8028b16:	6813      	ldr	r3, [r2, #0]
 8028b18:	6825      	ldr	r5, [r4, #0]
 8028b1a:	1d18      	adds	r0, r3, #4
 8028b1c:	6010      	str	r0, [r2, #0]
 8028b1e:	0628      	lsls	r0, r5, #24
 8028b20:	d501      	bpl.n	8028b26 <_printf_i+0xc2>
 8028b22:	681b      	ldr	r3, [r3, #0]
 8028b24:	e002      	b.n	8028b2c <_printf_i+0xc8>
 8028b26:	0668      	lsls	r0, r5, #25
 8028b28:	d5fb      	bpl.n	8028b22 <_printf_i+0xbe>
 8028b2a:	881b      	ldrh	r3, [r3, #0]
 8028b2c:	4854      	ldr	r0, [pc, #336]	; (8028c80 <_printf_i+0x21c>)
 8028b2e:	296f      	cmp	r1, #111	; 0x6f
 8028b30:	bf14      	ite	ne
 8028b32:	220a      	movne	r2, #10
 8028b34:	2208      	moveq	r2, #8
 8028b36:	2100      	movs	r1, #0
 8028b38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8028b3c:	6865      	ldr	r5, [r4, #4]
 8028b3e:	60a5      	str	r5, [r4, #8]
 8028b40:	2d00      	cmp	r5, #0
 8028b42:	f2c0 8095 	blt.w	8028c70 <_printf_i+0x20c>
 8028b46:	6821      	ldr	r1, [r4, #0]
 8028b48:	f021 0104 	bic.w	r1, r1, #4
 8028b4c:	6021      	str	r1, [r4, #0]
 8028b4e:	2b00      	cmp	r3, #0
 8028b50:	d13d      	bne.n	8028bce <_printf_i+0x16a>
 8028b52:	2d00      	cmp	r5, #0
 8028b54:	f040 808e 	bne.w	8028c74 <_printf_i+0x210>
 8028b58:	4665      	mov	r5, ip
 8028b5a:	2a08      	cmp	r2, #8
 8028b5c:	d10b      	bne.n	8028b76 <_printf_i+0x112>
 8028b5e:	6823      	ldr	r3, [r4, #0]
 8028b60:	07db      	lsls	r3, r3, #31
 8028b62:	d508      	bpl.n	8028b76 <_printf_i+0x112>
 8028b64:	6923      	ldr	r3, [r4, #16]
 8028b66:	6862      	ldr	r2, [r4, #4]
 8028b68:	429a      	cmp	r2, r3
 8028b6a:	bfde      	ittt	le
 8028b6c:	2330      	movle	r3, #48	; 0x30
 8028b6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8028b72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8028b76:	ebac 0305 	sub.w	r3, ip, r5
 8028b7a:	6123      	str	r3, [r4, #16]
 8028b7c:	f8cd 8000 	str.w	r8, [sp]
 8028b80:	463b      	mov	r3, r7
 8028b82:	aa03      	add	r2, sp, #12
 8028b84:	4621      	mov	r1, r4
 8028b86:	4630      	mov	r0, r6
 8028b88:	f7ff fef6 	bl	8028978 <_printf_common>
 8028b8c:	3001      	adds	r0, #1
 8028b8e:	d14d      	bne.n	8028c2c <_printf_i+0x1c8>
 8028b90:	f04f 30ff 	mov.w	r0, #4294967295
 8028b94:	b005      	add	sp, #20
 8028b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028b9a:	4839      	ldr	r0, [pc, #228]	; (8028c80 <_printf_i+0x21c>)
 8028b9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8028ba0:	6813      	ldr	r3, [r2, #0]
 8028ba2:	6821      	ldr	r1, [r4, #0]
 8028ba4:	1d1d      	adds	r5, r3, #4
 8028ba6:	681b      	ldr	r3, [r3, #0]
 8028ba8:	6015      	str	r5, [r2, #0]
 8028baa:	060a      	lsls	r2, r1, #24
 8028bac:	d50b      	bpl.n	8028bc6 <_printf_i+0x162>
 8028bae:	07ca      	lsls	r2, r1, #31
 8028bb0:	bf44      	itt	mi
 8028bb2:	f041 0120 	orrmi.w	r1, r1, #32
 8028bb6:	6021      	strmi	r1, [r4, #0]
 8028bb8:	b91b      	cbnz	r3, 8028bc2 <_printf_i+0x15e>
 8028bba:	6822      	ldr	r2, [r4, #0]
 8028bbc:	f022 0220 	bic.w	r2, r2, #32
 8028bc0:	6022      	str	r2, [r4, #0]
 8028bc2:	2210      	movs	r2, #16
 8028bc4:	e7b7      	b.n	8028b36 <_printf_i+0xd2>
 8028bc6:	064d      	lsls	r5, r1, #25
 8028bc8:	bf48      	it	mi
 8028bca:	b29b      	uxthmi	r3, r3
 8028bcc:	e7ef      	b.n	8028bae <_printf_i+0x14a>
 8028bce:	4665      	mov	r5, ip
 8028bd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8028bd4:	fb02 3311 	mls	r3, r2, r1, r3
 8028bd8:	5cc3      	ldrb	r3, [r0, r3]
 8028bda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8028bde:	460b      	mov	r3, r1
 8028be0:	2900      	cmp	r1, #0
 8028be2:	d1f5      	bne.n	8028bd0 <_printf_i+0x16c>
 8028be4:	e7b9      	b.n	8028b5a <_printf_i+0xf6>
 8028be6:	6813      	ldr	r3, [r2, #0]
 8028be8:	6825      	ldr	r5, [r4, #0]
 8028bea:	6961      	ldr	r1, [r4, #20]
 8028bec:	1d18      	adds	r0, r3, #4
 8028bee:	6010      	str	r0, [r2, #0]
 8028bf0:	0628      	lsls	r0, r5, #24
 8028bf2:	681b      	ldr	r3, [r3, #0]
 8028bf4:	d501      	bpl.n	8028bfa <_printf_i+0x196>
 8028bf6:	6019      	str	r1, [r3, #0]
 8028bf8:	e002      	b.n	8028c00 <_printf_i+0x19c>
 8028bfa:	066a      	lsls	r2, r5, #25
 8028bfc:	d5fb      	bpl.n	8028bf6 <_printf_i+0x192>
 8028bfe:	8019      	strh	r1, [r3, #0]
 8028c00:	2300      	movs	r3, #0
 8028c02:	6123      	str	r3, [r4, #16]
 8028c04:	4665      	mov	r5, ip
 8028c06:	e7b9      	b.n	8028b7c <_printf_i+0x118>
 8028c08:	6813      	ldr	r3, [r2, #0]
 8028c0a:	1d19      	adds	r1, r3, #4
 8028c0c:	6011      	str	r1, [r2, #0]
 8028c0e:	681d      	ldr	r5, [r3, #0]
 8028c10:	6862      	ldr	r2, [r4, #4]
 8028c12:	2100      	movs	r1, #0
 8028c14:	4628      	mov	r0, r5
 8028c16:	f7d7 fafb 	bl	8000210 <memchr>
 8028c1a:	b108      	cbz	r0, 8028c20 <_printf_i+0x1bc>
 8028c1c:	1b40      	subs	r0, r0, r5
 8028c1e:	6060      	str	r0, [r4, #4]
 8028c20:	6863      	ldr	r3, [r4, #4]
 8028c22:	6123      	str	r3, [r4, #16]
 8028c24:	2300      	movs	r3, #0
 8028c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028c2a:	e7a7      	b.n	8028b7c <_printf_i+0x118>
 8028c2c:	6923      	ldr	r3, [r4, #16]
 8028c2e:	462a      	mov	r2, r5
 8028c30:	4639      	mov	r1, r7
 8028c32:	4630      	mov	r0, r6
 8028c34:	47c0      	blx	r8
 8028c36:	3001      	adds	r0, #1
 8028c38:	d0aa      	beq.n	8028b90 <_printf_i+0x12c>
 8028c3a:	6823      	ldr	r3, [r4, #0]
 8028c3c:	079b      	lsls	r3, r3, #30
 8028c3e:	d413      	bmi.n	8028c68 <_printf_i+0x204>
 8028c40:	68e0      	ldr	r0, [r4, #12]
 8028c42:	9b03      	ldr	r3, [sp, #12]
 8028c44:	4298      	cmp	r0, r3
 8028c46:	bfb8      	it	lt
 8028c48:	4618      	movlt	r0, r3
 8028c4a:	e7a3      	b.n	8028b94 <_printf_i+0x130>
 8028c4c:	2301      	movs	r3, #1
 8028c4e:	464a      	mov	r2, r9
 8028c50:	4639      	mov	r1, r7
 8028c52:	4630      	mov	r0, r6
 8028c54:	47c0      	blx	r8
 8028c56:	3001      	adds	r0, #1
 8028c58:	d09a      	beq.n	8028b90 <_printf_i+0x12c>
 8028c5a:	3501      	adds	r5, #1
 8028c5c:	68e3      	ldr	r3, [r4, #12]
 8028c5e:	9a03      	ldr	r2, [sp, #12]
 8028c60:	1a9b      	subs	r3, r3, r2
 8028c62:	42ab      	cmp	r3, r5
 8028c64:	dcf2      	bgt.n	8028c4c <_printf_i+0x1e8>
 8028c66:	e7eb      	b.n	8028c40 <_printf_i+0x1dc>
 8028c68:	2500      	movs	r5, #0
 8028c6a:	f104 0919 	add.w	r9, r4, #25
 8028c6e:	e7f5      	b.n	8028c5c <_printf_i+0x1f8>
 8028c70:	2b00      	cmp	r3, #0
 8028c72:	d1ac      	bne.n	8028bce <_printf_i+0x16a>
 8028c74:	7803      	ldrb	r3, [r0, #0]
 8028c76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8028c7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028c7e:	e76c      	b.n	8028b5a <_printf_i+0xf6>
 8028c80:	0802e5d9 	.word	0x0802e5d9
 8028c84:	0802e5ea 	.word	0x0802e5ea

08028c88 <_sbrk_r>:
 8028c88:	b538      	push	{r3, r4, r5, lr}
 8028c8a:	4c06      	ldr	r4, [pc, #24]	; (8028ca4 <_sbrk_r+0x1c>)
 8028c8c:	2300      	movs	r3, #0
 8028c8e:	4605      	mov	r5, r0
 8028c90:	4608      	mov	r0, r1
 8028c92:	6023      	str	r3, [r4, #0]
 8028c94:	f7da f96c 	bl	8002f70 <_sbrk>
 8028c98:	1c43      	adds	r3, r0, #1
 8028c9a:	d102      	bne.n	8028ca2 <_sbrk_r+0x1a>
 8028c9c:	6823      	ldr	r3, [r4, #0]
 8028c9e:	b103      	cbz	r3, 8028ca2 <_sbrk_r+0x1a>
 8028ca0:	602b      	str	r3, [r5, #0]
 8028ca2:	bd38      	pop	{r3, r4, r5, pc}
 8028ca4:	2000c264 	.word	0x2000c264

08028ca8 <_raise_r>:
 8028ca8:	291f      	cmp	r1, #31
 8028caa:	b538      	push	{r3, r4, r5, lr}
 8028cac:	4604      	mov	r4, r0
 8028cae:	460d      	mov	r5, r1
 8028cb0:	d904      	bls.n	8028cbc <_raise_r+0x14>
 8028cb2:	2316      	movs	r3, #22
 8028cb4:	6003      	str	r3, [r0, #0]
 8028cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8028cba:	bd38      	pop	{r3, r4, r5, pc}
 8028cbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8028cbe:	b112      	cbz	r2, 8028cc6 <_raise_r+0x1e>
 8028cc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028cc4:	b94b      	cbnz	r3, 8028cda <_raise_r+0x32>
 8028cc6:	4620      	mov	r0, r4
 8028cc8:	f000 f830 	bl	8028d2c <_getpid_r>
 8028ccc:	462a      	mov	r2, r5
 8028cce:	4601      	mov	r1, r0
 8028cd0:	4620      	mov	r0, r4
 8028cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028cd6:	f000 b817 	b.w	8028d08 <_kill_r>
 8028cda:	2b01      	cmp	r3, #1
 8028cdc:	d00a      	beq.n	8028cf4 <_raise_r+0x4c>
 8028cde:	1c59      	adds	r1, r3, #1
 8028ce0:	d103      	bne.n	8028cea <_raise_r+0x42>
 8028ce2:	2316      	movs	r3, #22
 8028ce4:	6003      	str	r3, [r0, #0]
 8028ce6:	2001      	movs	r0, #1
 8028ce8:	e7e7      	b.n	8028cba <_raise_r+0x12>
 8028cea:	2400      	movs	r4, #0
 8028cec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028cf0:	4628      	mov	r0, r5
 8028cf2:	4798      	blx	r3
 8028cf4:	2000      	movs	r0, #0
 8028cf6:	e7e0      	b.n	8028cba <_raise_r+0x12>

08028cf8 <raise>:
 8028cf8:	4b02      	ldr	r3, [pc, #8]	; (8028d04 <raise+0xc>)
 8028cfa:	4601      	mov	r1, r0
 8028cfc:	6818      	ldr	r0, [r3, #0]
 8028cfe:	f7ff bfd3 	b.w	8028ca8 <_raise_r>
 8028d02:	bf00      	nop
 8028d04:	20000098 	.word	0x20000098

08028d08 <_kill_r>:
 8028d08:	b538      	push	{r3, r4, r5, lr}
 8028d0a:	4c07      	ldr	r4, [pc, #28]	; (8028d28 <_kill_r+0x20>)
 8028d0c:	2300      	movs	r3, #0
 8028d0e:	4605      	mov	r5, r0
 8028d10:	4608      	mov	r0, r1
 8028d12:	4611      	mov	r1, r2
 8028d14:	6023      	str	r3, [r4, #0]
 8028d16:	f7da f8a3 	bl	8002e60 <_kill>
 8028d1a:	1c43      	adds	r3, r0, #1
 8028d1c:	d102      	bne.n	8028d24 <_kill_r+0x1c>
 8028d1e:	6823      	ldr	r3, [r4, #0]
 8028d20:	b103      	cbz	r3, 8028d24 <_kill_r+0x1c>
 8028d22:	602b      	str	r3, [r5, #0]
 8028d24:	bd38      	pop	{r3, r4, r5, pc}
 8028d26:	bf00      	nop
 8028d28:	2000c264 	.word	0x2000c264

08028d2c <_getpid_r>:
 8028d2c:	f7da b890 	b.w	8002e50 <_getpid>

08028d30 <__swbuf_r>:
 8028d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028d32:	460e      	mov	r6, r1
 8028d34:	4614      	mov	r4, r2
 8028d36:	4605      	mov	r5, r0
 8028d38:	b118      	cbz	r0, 8028d42 <__swbuf_r+0x12>
 8028d3a:	6983      	ldr	r3, [r0, #24]
 8028d3c:	b90b      	cbnz	r3, 8028d42 <__swbuf_r+0x12>
 8028d3e:	f000 fa0b 	bl	8029158 <__sinit>
 8028d42:	4b21      	ldr	r3, [pc, #132]	; (8028dc8 <__swbuf_r+0x98>)
 8028d44:	429c      	cmp	r4, r3
 8028d46:	d12a      	bne.n	8028d9e <__swbuf_r+0x6e>
 8028d48:	686c      	ldr	r4, [r5, #4]
 8028d4a:	69a3      	ldr	r3, [r4, #24]
 8028d4c:	60a3      	str	r3, [r4, #8]
 8028d4e:	89a3      	ldrh	r3, [r4, #12]
 8028d50:	071a      	lsls	r2, r3, #28
 8028d52:	d52e      	bpl.n	8028db2 <__swbuf_r+0x82>
 8028d54:	6923      	ldr	r3, [r4, #16]
 8028d56:	b363      	cbz	r3, 8028db2 <__swbuf_r+0x82>
 8028d58:	6923      	ldr	r3, [r4, #16]
 8028d5a:	6820      	ldr	r0, [r4, #0]
 8028d5c:	1ac0      	subs	r0, r0, r3
 8028d5e:	6963      	ldr	r3, [r4, #20]
 8028d60:	b2f6      	uxtb	r6, r6
 8028d62:	4283      	cmp	r3, r0
 8028d64:	4637      	mov	r7, r6
 8028d66:	dc04      	bgt.n	8028d72 <__swbuf_r+0x42>
 8028d68:	4621      	mov	r1, r4
 8028d6a:	4628      	mov	r0, r5
 8028d6c:	f000 f98a 	bl	8029084 <_fflush_r>
 8028d70:	bb28      	cbnz	r0, 8028dbe <__swbuf_r+0x8e>
 8028d72:	68a3      	ldr	r3, [r4, #8]
 8028d74:	3b01      	subs	r3, #1
 8028d76:	60a3      	str	r3, [r4, #8]
 8028d78:	6823      	ldr	r3, [r4, #0]
 8028d7a:	1c5a      	adds	r2, r3, #1
 8028d7c:	6022      	str	r2, [r4, #0]
 8028d7e:	701e      	strb	r6, [r3, #0]
 8028d80:	6963      	ldr	r3, [r4, #20]
 8028d82:	3001      	adds	r0, #1
 8028d84:	4283      	cmp	r3, r0
 8028d86:	d004      	beq.n	8028d92 <__swbuf_r+0x62>
 8028d88:	89a3      	ldrh	r3, [r4, #12]
 8028d8a:	07db      	lsls	r3, r3, #31
 8028d8c:	d519      	bpl.n	8028dc2 <__swbuf_r+0x92>
 8028d8e:	2e0a      	cmp	r6, #10
 8028d90:	d117      	bne.n	8028dc2 <__swbuf_r+0x92>
 8028d92:	4621      	mov	r1, r4
 8028d94:	4628      	mov	r0, r5
 8028d96:	f000 f975 	bl	8029084 <_fflush_r>
 8028d9a:	b190      	cbz	r0, 8028dc2 <__swbuf_r+0x92>
 8028d9c:	e00f      	b.n	8028dbe <__swbuf_r+0x8e>
 8028d9e:	4b0b      	ldr	r3, [pc, #44]	; (8028dcc <__swbuf_r+0x9c>)
 8028da0:	429c      	cmp	r4, r3
 8028da2:	d101      	bne.n	8028da8 <__swbuf_r+0x78>
 8028da4:	68ac      	ldr	r4, [r5, #8]
 8028da6:	e7d0      	b.n	8028d4a <__swbuf_r+0x1a>
 8028da8:	4b09      	ldr	r3, [pc, #36]	; (8028dd0 <__swbuf_r+0xa0>)
 8028daa:	429c      	cmp	r4, r3
 8028dac:	bf08      	it	eq
 8028dae:	68ec      	ldreq	r4, [r5, #12]
 8028db0:	e7cb      	b.n	8028d4a <__swbuf_r+0x1a>
 8028db2:	4621      	mov	r1, r4
 8028db4:	4628      	mov	r0, r5
 8028db6:	f000 f80d 	bl	8028dd4 <__swsetup_r>
 8028dba:	2800      	cmp	r0, #0
 8028dbc:	d0cc      	beq.n	8028d58 <__swbuf_r+0x28>
 8028dbe:	f04f 37ff 	mov.w	r7, #4294967295
 8028dc2:	4638      	mov	r0, r7
 8028dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028dc6:	bf00      	nop
 8028dc8:	0802e620 	.word	0x0802e620
 8028dcc:	0802e640 	.word	0x0802e640
 8028dd0:	0802e600 	.word	0x0802e600

08028dd4 <__swsetup_r>:
 8028dd4:	4b32      	ldr	r3, [pc, #200]	; (8028ea0 <__swsetup_r+0xcc>)
 8028dd6:	b570      	push	{r4, r5, r6, lr}
 8028dd8:	681d      	ldr	r5, [r3, #0]
 8028dda:	4606      	mov	r6, r0
 8028ddc:	460c      	mov	r4, r1
 8028dde:	b125      	cbz	r5, 8028dea <__swsetup_r+0x16>
 8028de0:	69ab      	ldr	r3, [r5, #24]
 8028de2:	b913      	cbnz	r3, 8028dea <__swsetup_r+0x16>
 8028de4:	4628      	mov	r0, r5
 8028de6:	f000 f9b7 	bl	8029158 <__sinit>
 8028dea:	4b2e      	ldr	r3, [pc, #184]	; (8028ea4 <__swsetup_r+0xd0>)
 8028dec:	429c      	cmp	r4, r3
 8028dee:	d10f      	bne.n	8028e10 <__swsetup_r+0x3c>
 8028df0:	686c      	ldr	r4, [r5, #4]
 8028df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028df6:	b29a      	uxth	r2, r3
 8028df8:	0715      	lsls	r5, r2, #28
 8028dfa:	d42c      	bmi.n	8028e56 <__swsetup_r+0x82>
 8028dfc:	06d0      	lsls	r0, r2, #27
 8028dfe:	d411      	bmi.n	8028e24 <__swsetup_r+0x50>
 8028e00:	2209      	movs	r2, #9
 8028e02:	6032      	str	r2, [r6, #0]
 8028e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028e08:	81a3      	strh	r3, [r4, #12]
 8028e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8028e0e:	e03e      	b.n	8028e8e <__swsetup_r+0xba>
 8028e10:	4b25      	ldr	r3, [pc, #148]	; (8028ea8 <__swsetup_r+0xd4>)
 8028e12:	429c      	cmp	r4, r3
 8028e14:	d101      	bne.n	8028e1a <__swsetup_r+0x46>
 8028e16:	68ac      	ldr	r4, [r5, #8]
 8028e18:	e7eb      	b.n	8028df2 <__swsetup_r+0x1e>
 8028e1a:	4b24      	ldr	r3, [pc, #144]	; (8028eac <__swsetup_r+0xd8>)
 8028e1c:	429c      	cmp	r4, r3
 8028e1e:	bf08      	it	eq
 8028e20:	68ec      	ldreq	r4, [r5, #12]
 8028e22:	e7e6      	b.n	8028df2 <__swsetup_r+0x1e>
 8028e24:	0751      	lsls	r1, r2, #29
 8028e26:	d512      	bpl.n	8028e4e <__swsetup_r+0x7a>
 8028e28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028e2a:	b141      	cbz	r1, 8028e3e <__swsetup_r+0x6a>
 8028e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028e30:	4299      	cmp	r1, r3
 8028e32:	d002      	beq.n	8028e3a <__swsetup_r+0x66>
 8028e34:	4630      	mov	r0, r6
 8028e36:	f7ff fbb7 	bl	80285a8 <_free_r>
 8028e3a:	2300      	movs	r3, #0
 8028e3c:	6363      	str	r3, [r4, #52]	; 0x34
 8028e3e:	89a3      	ldrh	r3, [r4, #12]
 8028e40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028e44:	81a3      	strh	r3, [r4, #12]
 8028e46:	2300      	movs	r3, #0
 8028e48:	6063      	str	r3, [r4, #4]
 8028e4a:	6923      	ldr	r3, [r4, #16]
 8028e4c:	6023      	str	r3, [r4, #0]
 8028e4e:	89a3      	ldrh	r3, [r4, #12]
 8028e50:	f043 0308 	orr.w	r3, r3, #8
 8028e54:	81a3      	strh	r3, [r4, #12]
 8028e56:	6923      	ldr	r3, [r4, #16]
 8028e58:	b94b      	cbnz	r3, 8028e6e <__swsetup_r+0x9a>
 8028e5a:	89a3      	ldrh	r3, [r4, #12]
 8028e5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8028e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028e64:	d003      	beq.n	8028e6e <__swsetup_r+0x9a>
 8028e66:	4621      	mov	r1, r4
 8028e68:	4630      	mov	r0, r6
 8028e6a:	f000 fa23 	bl	80292b4 <__smakebuf_r>
 8028e6e:	89a2      	ldrh	r2, [r4, #12]
 8028e70:	f012 0301 	ands.w	r3, r2, #1
 8028e74:	d00c      	beq.n	8028e90 <__swsetup_r+0xbc>
 8028e76:	2300      	movs	r3, #0
 8028e78:	60a3      	str	r3, [r4, #8]
 8028e7a:	6963      	ldr	r3, [r4, #20]
 8028e7c:	425b      	negs	r3, r3
 8028e7e:	61a3      	str	r3, [r4, #24]
 8028e80:	6923      	ldr	r3, [r4, #16]
 8028e82:	b953      	cbnz	r3, 8028e9a <__swsetup_r+0xc6>
 8028e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028e88:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8028e8c:	d1ba      	bne.n	8028e04 <__swsetup_r+0x30>
 8028e8e:	bd70      	pop	{r4, r5, r6, pc}
 8028e90:	0792      	lsls	r2, r2, #30
 8028e92:	bf58      	it	pl
 8028e94:	6963      	ldrpl	r3, [r4, #20]
 8028e96:	60a3      	str	r3, [r4, #8]
 8028e98:	e7f2      	b.n	8028e80 <__swsetup_r+0xac>
 8028e9a:	2000      	movs	r0, #0
 8028e9c:	e7f7      	b.n	8028e8e <__swsetup_r+0xba>
 8028e9e:	bf00      	nop
 8028ea0:	20000098 	.word	0x20000098
 8028ea4:	0802e620 	.word	0x0802e620
 8028ea8:	0802e640 	.word	0x0802e640
 8028eac:	0802e600 	.word	0x0802e600

08028eb0 <__register_exitproc>:
 8028eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028eb4:	4d2c      	ldr	r5, [pc, #176]	; (8028f68 <__register_exitproc+0xb8>)
 8028eb6:	682c      	ldr	r4, [r5, #0]
 8028eb8:	4607      	mov	r7, r0
 8028eba:	460e      	mov	r6, r1
 8028ebc:	4691      	mov	r9, r2
 8028ebe:	4698      	mov	r8, r3
 8028ec0:	b934      	cbnz	r4, 8028ed0 <__register_exitproc+0x20>
 8028ec2:	4b2a      	ldr	r3, [pc, #168]	; (8028f6c <__register_exitproc+0xbc>)
 8028ec4:	4c2a      	ldr	r4, [pc, #168]	; (8028f70 <__register_exitproc+0xc0>)
 8028ec6:	602c      	str	r4, [r5, #0]
 8028ec8:	b113      	cbz	r3, 8028ed0 <__register_exitproc+0x20>
 8028eca:	681b      	ldr	r3, [r3, #0]
 8028ecc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8028ed0:	6863      	ldr	r3, [r4, #4]
 8028ed2:	2b1f      	cmp	r3, #31
 8028ed4:	dd3d      	ble.n	8028f52 <__register_exitproc+0xa2>
 8028ed6:	4b27      	ldr	r3, [pc, #156]	; (8028f74 <__register_exitproc+0xc4>)
 8028ed8:	b91b      	cbnz	r3, 8028ee2 <__register_exitproc+0x32>
 8028eda:	f04f 30ff 	mov.w	r0, #4294967295
 8028ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028ee2:	208c      	movs	r0, #140	; 0x8c
 8028ee4:	f7ff fb3c 	bl	8028560 <malloc>
 8028ee8:	4604      	mov	r4, r0
 8028eea:	2800      	cmp	r0, #0
 8028eec:	d0f5      	beq.n	8028eda <__register_exitproc+0x2a>
 8028eee:	2300      	movs	r3, #0
 8028ef0:	682a      	ldr	r2, [r5, #0]
 8028ef2:	6002      	str	r2, [r0, #0]
 8028ef4:	6043      	str	r3, [r0, #4]
 8028ef6:	6028      	str	r0, [r5, #0]
 8028ef8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8028efc:	b30f      	cbz	r7, 8028f42 <__register_exitproc+0x92>
 8028efe:	f44f 7084 	mov.w	r0, #264	; 0x108
 8028f02:	f7ff fb2d 	bl	8028560 <malloc>
 8028f06:	2800      	cmp	r0, #0
 8028f08:	d0e7      	beq.n	8028eda <__register_exitproc+0x2a>
 8028f0a:	2300      	movs	r3, #0
 8028f0c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8028f10:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8028f14:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8028f18:	6862      	ldr	r2, [r4, #4]
 8028f1a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8028f1e:	2301      	movs	r3, #1
 8028f20:	4093      	lsls	r3, r2
 8028f22:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8028f26:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8028f2a:	431a      	orrs	r2, r3
 8028f2c:	2f02      	cmp	r7, #2
 8028f2e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8028f32:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8028f36:	bf02      	ittt	eq
 8028f38:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8028f3c:	4313      	orreq	r3, r2
 8028f3e:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8028f42:	6863      	ldr	r3, [r4, #4]
 8028f44:	1c5a      	adds	r2, r3, #1
 8028f46:	3302      	adds	r3, #2
 8028f48:	6062      	str	r2, [r4, #4]
 8028f4a:	2000      	movs	r0, #0
 8028f4c:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8028f50:	e7c5      	b.n	8028ede <__register_exitproc+0x2e>
 8028f52:	2f00      	cmp	r7, #0
 8028f54:	d0f5      	beq.n	8028f42 <__register_exitproc+0x92>
 8028f56:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8028f5a:	2800      	cmp	r0, #0
 8028f5c:	d1dc      	bne.n	8028f18 <__register_exitproc+0x68>
 8028f5e:	4b05      	ldr	r3, [pc, #20]	; (8028f74 <__register_exitproc+0xc4>)
 8028f60:	2b00      	cmp	r3, #0
 8028f62:	d0ba      	beq.n	8028eda <__register_exitproc+0x2a>
 8028f64:	e7cb      	b.n	8028efe <__register_exitproc+0x4e>
 8028f66:	bf00      	nop
 8028f68:	2000b6d4 	.word	0x2000b6d4
 8028f6c:	0802e5fc 	.word	0x0802e5fc
 8028f70:	2000b648 	.word	0x2000b648
 8028f74:	08028561 	.word	0x08028561

08028f78 <__sflush_r>:
 8028f78:	898a      	ldrh	r2, [r1, #12]
 8028f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028f7e:	4605      	mov	r5, r0
 8028f80:	0710      	lsls	r0, r2, #28
 8028f82:	460c      	mov	r4, r1
 8028f84:	d458      	bmi.n	8029038 <__sflush_r+0xc0>
 8028f86:	684b      	ldr	r3, [r1, #4]
 8028f88:	2b00      	cmp	r3, #0
 8028f8a:	dc05      	bgt.n	8028f98 <__sflush_r+0x20>
 8028f8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028f8e:	2b00      	cmp	r3, #0
 8028f90:	dc02      	bgt.n	8028f98 <__sflush_r+0x20>
 8028f92:	2000      	movs	r0, #0
 8028f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028f98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028f9a:	2e00      	cmp	r6, #0
 8028f9c:	d0f9      	beq.n	8028f92 <__sflush_r+0x1a>
 8028f9e:	2300      	movs	r3, #0
 8028fa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028fa4:	682f      	ldr	r7, [r5, #0]
 8028fa6:	6a21      	ldr	r1, [r4, #32]
 8028fa8:	602b      	str	r3, [r5, #0]
 8028faa:	d032      	beq.n	8029012 <__sflush_r+0x9a>
 8028fac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028fae:	89a3      	ldrh	r3, [r4, #12]
 8028fb0:	075a      	lsls	r2, r3, #29
 8028fb2:	d505      	bpl.n	8028fc0 <__sflush_r+0x48>
 8028fb4:	6863      	ldr	r3, [r4, #4]
 8028fb6:	1ac0      	subs	r0, r0, r3
 8028fb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028fba:	b10b      	cbz	r3, 8028fc0 <__sflush_r+0x48>
 8028fbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028fbe:	1ac0      	subs	r0, r0, r3
 8028fc0:	2300      	movs	r3, #0
 8028fc2:	4602      	mov	r2, r0
 8028fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028fc6:	6a21      	ldr	r1, [r4, #32]
 8028fc8:	4628      	mov	r0, r5
 8028fca:	47b0      	blx	r6
 8028fcc:	1c43      	adds	r3, r0, #1
 8028fce:	89a3      	ldrh	r3, [r4, #12]
 8028fd0:	d106      	bne.n	8028fe0 <__sflush_r+0x68>
 8028fd2:	6829      	ldr	r1, [r5, #0]
 8028fd4:	291d      	cmp	r1, #29
 8028fd6:	d848      	bhi.n	802906a <__sflush_r+0xf2>
 8028fd8:	4a29      	ldr	r2, [pc, #164]	; (8029080 <__sflush_r+0x108>)
 8028fda:	40ca      	lsrs	r2, r1
 8028fdc:	07d6      	lsls	r6, r2, #31
 8028fde:	d544      	bpl.n	802906a <__sflush_r+0xf2>
 8028fe0:	2200      	movs	r2, #0
 8028fe2:	6062      	str	r2, [r4, #4]
 8028fe4:	04d9      	lsls	r1, r3, #19
 8028fe6:	6922      	ldr	r2, [r4, #16]
 8028fe8:	6022      	str	r2, [r4, #0]
 8028fea:	d504      	bpl.n	8028ff6 <__sflush_r+0x7e>
 8028fec:	1c42      	adds	r2, r0, #1
 8028fee:	d101      	bne.n	8028ff4 <__sflush_r+0x7c>
 8028ff0:	682b      	ldr	r3, [r5, #0]
 8028ff2:	b903      	cbnz	r3, 8028ff6 <__sflush_r+0x7e>
 8028ff4:	6560      	str	r0, [r4, #84]	; 0x54
 8028ff6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028ff8:	602f      	str	r7, [r5, #0]
 8028ffa:	2900      	cmp	r1, #0
 8028ffc:	d0c9      	beq.n	8028f92 <__sflush_r+0x1a>
 8028ffe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029002:	4299      	cmp	r1, r3
 8029004:	d002      	beq.n	802900c <__sflush_r+0x94>
 8029006:	4628      	mov	r0, r5
 8029008:	f7ff face 	bl	80285a8 <_free_r>
 802900c:	2000      	movs	r0, #0
 802900e:	6360      	str	r0, [r4, #52]	; 0x34
 8029010:	e7c0      	b.n	8028f94 <__sflush_r+0x1c>
 8029012:	2301      	movs	r3, #1
 8029014:	4628      	mov	r0, r5
 8029016:	47b0      	blx	r6
 8029018:	1c41      	adds	r1, r0, #1
 802901a:	d1c8      	bne.n	8028fae <__sflush_r+0x36>
 802901c:	682b      	ldr	r3, [r5, #0]
 802901e:	2b00      	cmp	r3, #0
 8029020:	d0c5      	beq.n	8028fae <__sflush_r+0x36>
 8029022:	2b1d      	cmp	r3, #29
 8029024:	d001      	beq.n	802902a <__sflush_r+0xb2>
 8029026:	2b16      	cmp	r3, #22
 8029028:	d101      	bne.n	802902e <__sflush_r+0xb6>
 802902a:	602f      	str	r7, [r5, #0]
 802902c:	e7b1      	b.n	8028f92 <__sflush_r+0x1a>
 802902e:	89a3      	ldrh	r3, [r4, #12]
 8029030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029034:	81a3      	strh	r3, [r4, #12]
 8029036:	e7ad      	b.n	8028f94 <__sflush_r+0x1c>
 8029038:	690f      	ldr	r7, [r1, #16]
 802903a:	2f00      	cmp	r7, #0
 802903c:	d0a9      	beq.n	8028f92 <__sflush_r+0x1a>
 802903e:	0793      	lsls	r3, r2, #30
 8029040:	680e      	ldr	r6, [r1, #0]
 8029042:	bf08      	it	eq
 8029044:	694b      	ldreq	r3, [r1, #20]
 8029046:	600f      	str	r7, [r1, #0]
 8029048:	bf18      	it	ne
 802904a:	2300      	movne	r3, #0
 802904c:	eba6 0807 	sub.w	r8, r6, r7
 8029050:	608b      	str	r3, [r1, #8]
 8029052:	f1b8 0f00 	cmp.w	r8, #0
 8029056:	dd9c      	ble.n	8028f92 <__sflush_r+0x1a>
 8029058:	4643      	mov	r3, r8
 802905a:	463a      	mov	r2, r7
 802905c:	6a21      	ldr	r1, [r4, #32]
 802905e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8029060:	4628      	mov	r0, r5
 8029062:	47b0      	blx	r6
 8029064:	2800      	cmp	r0, #0
 8029066:	dc06      	bgt.n	8029076 <__sflush_r+0xfe>
 8029068:	89a3      	ldrh	r3, [r4, #12]
 802906a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802906e:	81a3      	strh	r3, [r4, #12]
 8029070:	f04f 30ff 	mov.w	r0, #4294967295
 8029074:	e78e      	b.n	8028f94 <__sflush_r+0x1c>
 8029076:	4407      	add	r7, r0
 8029078:	eba8 0800 	sub.w	r8, r8, r0
 802907c:	e7e9      	b.n	8029052 <__sflush_r+0xda>
 802907e:	bf00      	nop
 8029080:	20400001 	.word	0x20400001

08029084 <_fflush_r>:
 8029084:	b538      	push	{r3, r4, r5, lr}
 8029086:	690b      	ldr	r3, [r1, #16]
 8029088:	4605      	mov	r5, r0
 802908a:	460c      	mov	r4, r1
 802908c:	b1db      	cbz	r3, 80290c6 <_fflush_r+0x42>
 802908e:	b118      	cbz	r0, 8029098 <_fflush_r+0x14>
 8029090:	6983      	ldr	r3, [r0, #24]
 8029092:	b90b      	cbnz	r3, 8029098 <_fflush_r+0x14>
 8029094:	f000 f860 	bl	8029158 <__sinit>
 8029098:	4b0c      	ldr	r3, [pc, #48]	; (80290cc <_fflush_r+0x48>)
 802909a:	429c      	cmp	r4, r3
 802909c:	d109      	bne.n	80290b2 <_fflush_r+0x2e>
 802909e:	686c      	ldr	r4, [r5, #4]
 80290a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80290a4:	b17b      	cbz	r3, 80290c6 <_fflush_r+0x42>
 80290a6:	4621      	mov	r1, r4
 80290a8:	4628      	mov	r0, r5
 80290aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80290ae:	f7ff bf63 	b.w	8028f78 <__sflush_r>
 80290b2:	4b07      	ldr	r3, [pc, #28]	; (80290d0 <_fflush_r+0x4c>)
 80290b4:	429c      	cmp	r4, r3
 80290b6:	d101      	bne.n	80290bc <_fflush_r+0x38>
 80290b8:	68ac      	ldr	r4, [r5, #8]
 80290ba:	e7f1      	b.n	80290a0 <_fflush_r+0x1c>
 80290bc:	4b05      	ldr	r3, [pc, #20]	; (80290d4 <_fflush_r+0x50>)
 80290be:	429c      	cmp	r4, r3
 80290c0:	bf08      	it	eq
 80290c2:	68ec      	ldreq	r4, [r5, #12]
 80290c4:	e7ec      	b.n	80290a0 <_fflush_r+0x1c>
 80290c6:	2000      	movs	r0, #0
 80290c8:	bd38      	pop	{r3, r4, r5, pc}
 80290ca:	bf00      	nop
 80290cc:	0802e620 	.word	0x0802e620
 80290d0:	0802e640 	.word	0x0802e640
 80290d4:	0802e600 	.word	0x0802e600

080290d8 <std>:
 80290d8:	2300      	movs	r3, #0
 80290da:	b510      	push	{r4, lr}
 80290dc:	4604      	mov	r4, r0
 80290de:	e9c0 3300 	strd	r3, r3, [r0]
 80290e2:	6083      	str	r3, [r0, #8]
 80290e4:	8181      	strh	r1, [r0, #12]
 80290e6:	6643      	str	r3, [r0, #100]	; 0x64
 80290e8:	81c2      	strh	r2, [r0, #14]
 80290ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80290ee:	6183      	str	r3, [r0, #24]
 80290f0:	4619      	mov	r1, r3
 80290f2:	2208      	movs	r2, #8
 80290f4:	305c      	adds	r0, #92	; 0x5c
 80290f6:	f7ff fa4e 	bl	8028596 <memset>
 80290fa:	4b05      	ldr	r3, [pc, #20]	; (8029110 <std+0x38>)
 80290fc:	6263      	str	r3, [r4, #36]	; 0x24
 80290fe:	4b05      	ldr	r3, [pc, #20]	; (8029114 <std+0x3c>)
 8029100:	62a3      	str	r3, [r4, #40]	; 0x28
 8029102:	4b05      	ldr	r3, [pc, #20]	; (8029118 <std+0x40>)
 8029104:	62e3      	str	r3, [r4, #44]	; 0x2c
 8029106:	4b05      	ldr	r3, [pc, #20]	; (802911c <std+0x44>)
 8029108:	6224      	str	r4, [r4, #32]
 802910a:	6323      	str	r3, [r4, #48]	; 0x30
 802910c:	bd10      	pop	{r4, pc}
 802910e:	bf00      	nop
 8029110:	08029339 	.word	0x08029339
 8029114:	0802935b 	.word	0x0802935b
 8029118:	08029393 	.word	0x08029393
 802911c:	080293b7 	.word	0x080293b7

08029120 <_cleanup_r>:
 8029120:	4901      	ldr	r1, [pc, #4]	; (8029128 <_cleanup_r+0x8>)
 8029122:	f000 b885 	b.w	8029230 <_fwalk_reent>
 8029126:	bf00      	nop
 8029128:	08029085 	.word	0x08029085

0802912c <__sfmoreglue>:
 802912c:	b570      	push	{r4, r5, r6, lr}
 802912e:	1e4a      	subs	r2, r1, #1
 8029130:	2568      	movs	r5, #104	; 0x68
 8029132:	4355      	muls	r5, r2
 8029134:	460e      	mov	r6, r1
 8029136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802913a:	f7ff fa83 	bl	8028644 <_malloc_r>
 802913e:	4604      	mov	r4, r0
 8029140:	b140      	cbz	r0, 8029154 <__sfmoreglue+0x28>
 8029142:	2100      	movs	r1, #0
 8029144:	e9c0 1600 	strd	r1, r6, [r0]
 8029148:	300c      	adds	r0, #12
 802914a:	60a0      	str	r0, [r4, #8]
 802914c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8029150:	f7ff fa21 	bl	8028596 <memset>
 8029154:	4620      	mov	r0, r4
 8029156:	bd70      	pop	{r4, r5, r6, pc}

08029158 <__sinit>:
 8029158:	6983      	ldr	r3, [r0, #24]
 802915a:	b510      	push	{r4, lr}
 802915c:	4604      	mov	r4, r0
 802915e:	bb33      	cbnz	r3, 80291ae <__sinit+0x56>
 8029160:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8029164:	6503      	str	r3, [r0, #80]	; 0x50
 8029166:	4b12      	ldr	r3, [pc, #72]	; (80291b0 <__sinit+0x58>)
 8029168:	4a12      	ldr	r2, [pc, #72]	; (80291b4 <__sinit+0x5c>)
 802916a:	681b      	ldr	r3, [r3, #0]
 802916c:	6282      	str	r2, [r0, #40]	; 0x28
 802916e:	4298      	cmp	r0, r3
 8029170:	bf04      	itt	eq
 8029172:	2301      	moveq	r3, #1
 8029174:	6183      	streq	r3, [r0, #24]
 8029176:	f000 f81f 	bl	80291b8 <__sfp>
 802917a:	6060      	str	r0, [r4, #4]
 802917c:	4620      	mov	r0, r4
 802917e:	f000 f81b 	bl	80291b8 <__sfp>
 8029182:	60a0      	str	r0, [r4, #8]
 8029184:	4620      	mov	r0, r4
 8029186:	f000 f817 	bl	80291b8 <__sfp>
 802918a:	2200      	movs	r2, #0
 802918c:	60e0      	str	r0, [r4, #12]
 802918e:	2104      	movs	r1, #4
 8029190:	6860      	ldr	r0, [r4, #4]
 8029192:	f7ff ffa1 	bl	80290d8 <std>
 8029196:	2201      	movs	r2, #1
 8029198:	2109      	movs	r1, #9
 802919a:	68a0      	ldr	r0, [r4, #8]
 802919c:	f7ff ff9c 	bl	80290d8 <std>
 80291a0:	2202      	movs	r2, #2
 80291a2:	2112      	movs	r1, #18
 80291a4:	68e0      	ldr	r0, [r4, #12]
 80291a6:	f7ff ff97 	bl	80290d8 <std>
 80291aa:	2301      	movs	r3, #1
 80291ac:	61a3      	str	r3, [r4, #24]
 80291ae:	bd10      	pop	{r4, pc}
 80291b0:	0802e5c4 	.word	0x0802e5c4
 80291b4:	08029121 	.word	0x08029121

080291b8 <__sfp>:
 80291b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80291ba:	4b1b      	ldr	r3, [pc, #108]	; (8029228 <__sfp+0x70>)
 80291bc:	681e      	ldr	r6, [r3, #0]
 80291be:	69b3      	ldr	r3, [r6, #24]
 80291c0:	4607      	mov	r7, r0
 80291c2:	b913      	cbnz	r3, 80291ca <__sfp+0x12>
 80291c4:	4630      	mov	r0, r6
 80291c6:	f7ff ffc7 	bl	8029158 <__sinit>
 80291ca:	3648      	adds	r6, #72	; 0x48
 80291cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80291d0:	3b01      	subs	r3, #1
 80291d2:	d503      	bpl.n	80291dc <__sfp+0x24>
 80291d4:	6833      	ldr	r3, [r6, #0]
 80291d6:	b133      	cbz	r3, 80291e6 <__sfp+0x2e>
 80291d8:	6836      	ldr	r6, [r6, #0]
 80291da:	e7f7      	b.n	80291cc <__sfp+0x14>
 80291dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80291e0:	b16d      	cbz	r5, 80291fe <__sfp+0x46>
 80291e2:	3468      	adds	r4, #104	; 0x68
 80291e4:	e7f4      	b.n	80291d0 <__sfp+0x18>
 80291e6:	2104      	movs	r1, #4
 80291e8:	4638      	mov	r0, r7
 80291ea:	f7ff ff9f 	bl	802912c <__sfmoreglue>
 80291ee:	6030      	str	r0, [r6, #0]
 80291f0:	2800      	cmp	r0, #0
 80291f2:	d1f1      	bne.n	80291d8 <__sfp+0x20>
 80291f4:	230c      	movs	r3, #12
 80291f6:	603b      	str	r3, [r7, #0]
 80291f8:	4604      	mov	r4, r0
 80291fa:	4620      	mov	r0, r4
 80291fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80291fe:	4b0b      	ldr	r3, [pc, #44]	; (802922c <__sfp+0x74>)
 8029200:	6665      	str	r5, [r4, #100]	; 0x64
 8029202:	e9c4 5500 	strd	r5, r5, [r4]
 8029206:	60a5      	str	r5, [r4, #8]
 8029208:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802920c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8029210:	2208      	movs	r2, #8
 8029212:	4629      	mov	r1, r5
 8029214:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8029218:	f7ff f9bd 	bl	8028596 <memset>
 802921c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8029220:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8029224:	e7e9      	b.n	80291fa <__sfp+0x42>
 8029226:	bf00      	nop
 8029228:	0802e5c4 	.word	0x0802e5c4
 802922c:	ffff0001 	.word	0xffff0001

08029230 <_fwalk_reent>:
 8029230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029234:	4680      	mov	r8, r0
 8029236:	4689      	mov	r9, r1
 8029238:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802923c:	2600      	movs	r6, #0
 802923e:	b914      	cbnz	r4, 8029246 <_fwalk_reent+0x16>
 8029240:	4630      	mov	r0, r6
 8029242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029246:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802924a:	3f01      	subs	r7, #1
 802924c:	d501      	bpl.n	8029252 <_fwalk_reent+0x22>
 802924e:	6824      	ldr	r4, [r4, #0]
 8029250:	e7f5      	b.n	802923e <_fwalk_reent+0xe>
 8029252:	89ab      	ldrh	r3, [r5, #12]
 8029254:	2b01      	cmp	r3, #1
 8029256:	d907      	bls.n	8029268 <_fwalk_reent+0x38>
 8029258:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802925c:	3301      	adds	r3, #1
 802925e:	d003      	beq.n	8029268 <_fwalk_reent+0x38>
 8029260:	4629      	mov	r1, r5
 8029262:	4640      	mov	r0, r8
 8029264:	47c8      	blx	r9
 8029266:	4306      	orrs	r6, r0
 8029268:	3568      	adds	r5, #104	; 0x68
 802926a:	e7ee      	b.n	802924a <_fwalk_reent+0x1a>

0802926c <__swhatbuf_r>:
 802926c:	b570      	push	{r4, r5, r6, lr}
 802926e:	460e      	mov	r6, r1
 8029270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029274:	2900      	cmp	r1, #0
 8029276:	b096      	sub	sp, #88	; 0x58
 8029278:	4614      	mov	r4, r2
 802927a:	461d      	mov	r5, r3
 802927c:	da07      	bge.n	802928e <__swhatbuf_r+0x22>
 802927e:	2300      	movs	r3, #0
 8029280:	602b      	str	r3, [r5, #0]
 8029282:	89b3      	ldrh	r3, [r6, #12]
 8029284:	061a      	lsls	r2, r3, #24
 8029286:	d410      	bmi.n	80292aa <__swhatbuf_r+0x3e>
 8029288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802928c:	e00e      	b.n	80292ac <__swhatbuf_r+0x40>
 802928e:	466a      	mov	r2, sp
 8029290:	f000 f8b8 	bl	8029404 <_fstat_r>
 8029294:	2800      	cmp	r0, #0
 8029296:	dbf2      	blt.n	802927e <__swhatbuf_r+0x12>
 8029298:	9a01      	ldr	r2, [sp, #4]
 802929a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802929e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80292a2:	425a      	negs	r2, r3
 80292a4:	415a      	adcs	r2, r3
 80292a6:	602a      	str	r2, [r5, #0]
 80292a8:	e7ee      	b.n	8029288 <__swhatbuf_r+0x1c>
 80292aa:	2340      	movs	r3, #64	; 0x40
 80292ac:	2000      	movs	r0, #0
 80292ae:	6023      	str	r3, [r4, #0]
 80292b0:	b016      	add	sp, #88	; 0x58
 80292b2:	bd70      	pop	{r4, r5, r6, pc}

080292b4 <__smakebuf_r>:
 80292b4:	898b      	ldrh	r3, [r1, #12]
 80292b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80292b8:	079d      	lsls	r5, r3, #30
 80292ba:	4606      	mov	r6, r0
 80292bc:	460c      	mov	r4, r1
 80292be:	d507      	bpl.n	80292d0 <__smakebuf_r+0x1c>
 80292c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80292c4:	6023      	str	r3, [r4, #0]
 80292c6:	6123      	str	r3, [r4, #16]
 80292c8:	2301      	movs	r3, #1
 80292ca:	6163      	str	r3, [r4, #20]
 80292cc:	b002      	add	sp, #8
 80292ce:	bd70      	pop	{r4, r5, r6, pc}
 80292d0:	ab01      	add	r3, sp, #4
 80292d2:	466a      	mov	r2, sp
 80292d4:	f7ff ffca 	bl	802926c <__swhatbuf_r>
 80292d8:	9900      	ldr	r1, [sp, #0]
 80292da:	4605      	mov	r5, r0
 80292dc:	4630      	mov	r0, r6
 80292de:	f7ff f9b1 	bl	8028644 <_malloc_r>
 80292e2:	b948      	cbnz	r0, 80292f8 <__smakebuf_r+0x44>
 80292e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80292e8:	059a      	lsls	r2, r3, #22
 80292ea:	d4ef      	bmi.n	80292cc <__smakebuf_r+0x18>
 80292ec:	f023 0303 	bic.w	r3, r3, #3
 80292f0:	f043 0302 	orr.w	r3, r3, #2
 80292f4:	81a3      	strh	r3, [r4, #12]
 80292f6:	e7e3      	b.n	80292c0 <__smakebuf_r+0xc>
 80292f8:	4b0d      	ldr	r3, [pc, #52]	; (8029330 <__smakebuf_r+0x7c>)
 80292fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80292fc:	89a3      	ldrh	r3, [r4, #12]
 80292fe:	6020      	str	r0, [r4, #0]
 8029300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029304:	81a3      	strh	r3, [r4, #12]
 8029306:	9b00      	ldr	r3, [sp, #0]
 8029308:	6163      	str	r3, [r4, #20]
 802930a:	9b01      	ldr	r3, [sp, #4]
 802930c:	6120      	str	r0, [r4, #16]
 802930e:	b15b      	cbz	r3, 8029328 <__smakebuf_r+0x74>
 8029310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029314:	4630      	mov	r0, r6
 8029316:	f000 f887 	bl	8029428 <_isatty_r>
 802931a:	b128      	cbz	r0, 8029328 <__smakebuf_r+0x74>
 802931c:	89a3      	ldrh	r3, [r4, #12]
 802931e:	f023 0303 	bic.w	r3, r3, #3
 8029322:	f043 0301 	orr.w	r3, r3, #1
 8029326:	81a3      	strh	r3, [r4, #12]
 8029328:	89a3      	ldrh	r3, [r4, #12]
 802932a:	431d      	orrs	r5, r3
 802932c:	81a5      	strh	r5, [r4, #12]
 802932e:	e7cd      	b.n	80292cc <__smakebuf_r+0x18>
 8029330:	08029121 	.word	0x08029121

08029334 <__malloc_lock>:
 8029334:	4770      	bx	lr

08029336 <__malloc_unlock>:
 8029336:	4770      	bx	lr

08029338 <__sread>:
 8029338:	b510      	push	{r4, lr}
 802933a:	460c      	mov	r4, r1
 802933c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029340:	f000 f894 	bl	802946c <_read_r>
 8029344:	2800      	cmp	r0, #0
 8029346:	bfab      	itete	ge
 8029348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802934a:	89a3      	ldrhlt	r3, [r4, #12]
 802934c:	181b      	addge	r3, r3, r0
 802934e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8029352:	bfac      	ite	ge
 8029354:	6563      	strge	r3, [r4, #84]	; 0x54
 8029356:	81a3      	strhlt	r3, [r4, #12]
 8029358:	bd10      	pop	{r4, pc}

0802935a <__swrite>:
 802935a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802935e:	461f      	mov	r7, r3
 8029360:	898b      	ldrh	r3, [r1, #12]
 8029362:	05db      	lsls	r3, r3, #23
 8029364:	4605      	mov	r5, r0
 8029366:	460c      	mov	r4, r1
 8029368:	4616      	mov	r6, r2
 802936a:	d505      	bpl.n	8029378 <__swrite+0x1e>
 802936c:	2302      	movs	r3, #2
 802936e:	2200      	movs	r2, #0
 8029370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029374:	f000 f868 	bl	8029448 <_lseek_r>
 8029378:	89a3      	ldrh	r3, [r4, #12]
 802937a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802937e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8029382:	81a3      	strh	r3, [r4, #12]
 8029384:	4632      	mov	r2, r6
 8029386:	463b      	mov	r3, r7
 8029388:	4628      	mov	r0, r5
 802938a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802938e:	f000 b817 	b.w	80293c0 <_write_r>

08029392 <__sseek>:
 8029392:	b510      	push	{r4, lr}
 8029394:	460c      	mov	r4, r1
 8029396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802939a:	f000 f855 	bl	8029448 <_lseek_r>
 802939e:	1c43      	adds	r3, r0, #1
 80293a0:	89a3      	ldrh	r3, [r4, #12]
 80293a2:	bf15      	itete	ne
 80293a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80293a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80293aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80293ae:	81a3      	strheq	r3, [r4, #12]
 80293b0:	bf18      	it	ne
 80293b2:	81a3      	strhne	r3, [r4, #12]
 80293b4:	bd10      	pop	{r4, pc}

080293b6 <__sclose>:
 80293b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80293ba:	f000 b813 	b.w	80293e4 <_close_r>
	...

080293c0 <_write_r>:
 80293c0:	b538      	push	{r3, r4, r5, lr}
 80293c2:	4c07      	ldr	r4, [pc, #28]	; (80293e0 <_write_r+0x20>)
 80293c4:	4605      	mov	r5, r0
 80293c6:	4608      	mov	r0, r1
 80293c8:	4611      	mov	r1, r2
 80293ca:	2200      	movs	r2, #0
 80293cc:	6022      	str	r2, [r4, #0]
 80293ce:	461a      	mov	r2, r3
 80293d0:	f7d9 fd7d 	bl	8002ece <_write>
 80293d4:	1c43      	adds	r3, r0, #1
 80293d6:	d102      	bne.n	80293de <_write_r+0x1e>
 80293d8:	6823      	ldr	r3, [r4, #0]
 80293da:	b103      	cbz	r3, 80293de <_write_r+0x1e>
 80293dc:	602b      	str	r3, [r5, #0]
 80293de:	bd38      	pop	{r3, r4, r5, pc}
 80293e0:	2000c264 	.word	0x2000c264

080293e4 <_close_r>:
 80293e4:	b538      	push	{r3, r4, r5, lr}
 80293e6:	4c06      	ldr	r4, [pc, #24]	; (8029400 <_close_r+0x1c>)
 80293e8:	2300      	movs	r3, #0
 80293ea:	4605      	mov	r5, r0
 80293ec:	4608      	mov	r0, r1
 80293ee:	6023      	str	r3, [r4, #0]
 80293f0:	f7d9 fd89 	bl	8002f06 <_close>
 80293f4:	1c43      	adds	r3, r0, #1
 80293f6:	d102      	bne.n	80293fe <_close_r+0x1a>
 80293f8:	6823      	ldr	r3, [r4, #0]
 80293fa:	b103      	cbz	r3, 80293fe <_close_r+0x1a>
 80293fc:	602b      	str	r3, [r5, #0]
 80293fe:	bd38      	pop	{r3, r4, r5, pc}
 8029400:	2000c264 	.word	0x2000c264

08029404 <_fstat_r>:
 8029404:	b538      	push	{r3, r4, r5, lr}
 8029406:	4c07      	ldr	r4, [pc, #28]	; (8029424 <_fstat_r+0x20>)
 8029408:	2300      	movs	r3, #0
 802940a:	4605      	mov	r5, r0
 802940c:	4608      	mov	r0, r1
 802940e:	4611      	mov	r1, r2
 8029410:	6023      	str	r3, [r4, #0]
 8029412:	f7d9 fd84 	bl	8002f1e <_fstat>
 8029416:	1c43      	adds	r3, r0, #1
 8029418:	d102      	bne.n	8029420 <_fstat_r+0x1c>
 802941a:	6823      	ldr	r3, [r4, #0]
 802941c:	b103      	cbz	r3, 8029420 <_fstat_r+0x1c>
 802941e:	602b      	str	r3, [r5, #0]
 8029420:	bd38      	pop	{r3, r4, r5, pc}
 8029422:	bf00      	nop
 8029424:	2000c264 	.word	0x2000c264

08029428 <_isatty_r>:
 8029428:	b538      	push	{r3, r4, r5, lr}
 802942a:	4c06      	ldr	r4, [pc, #24]	; (8029444 <_isatty_r+0x1c>)
 802942c:	2300      	movs	r3, #0
 802942e:	4605      	mov	r5, r0
 8029430:	4608      	mov	r0, r1
 8029432:	6023      	str	r3, [r4, #0]
 8029434:	f7d9 fd83 	bl	8002f3e <_isatty>
 8029438:	1c43      	adds	r3, r0, #1
 802943a:	d102      	bne.n	8029442 <_isatty_r+0x1a>
 802943c:	6823      	ldr	r3, [r4, #0]
 802943e:	b103      	cbz	r3, 8029442 <_isatty_r+0x1a>
 8029440:	602b      	str	r3, [r5, #0]
 8029442:	bd38      	pop	{r3, r4, r5, pc}
 8029444:	2000c264 	.word	0x2000c264

08029448 <_lseek_r>:
 8029448:	b538      	push	{r3, r4, r5, lr}
 802944a:	4c07      	ldr	r4, [pc, #28]	; (8029468 <_lseek_r+0x20>)
 802944c:	4605      	mov	r5, r0
 802944e:	4608      	mov	r0, r1
 8029450:	4611      	mov	r1, r2
 8029452:	2200      	movs	r2, #0
 8029454:	6022      	str	r2, [r4, #0]
 8029456:	461a      	mov	r2, r3
 8029458:	f7d9 fd7c 	bl	8002f54 <_lseek>
 802945c:	1c43      	adds	r3, r0, #1
 802945e:	d102      	bne.n	8029466 <_lseek_r+0x1e>
 8029460:	6823      	ldr	r3, [r4, #0]
 8029462:	b103      	cbz	r3, 8029466 <_lseek_r+0x1e>
 8029464:	602b      	str	r3, [r5, #0]
 8029466:	bd38      	pop	{r3, r4, r5, pc}
 8029468:	2000c264 	.word	0x2000c264

0802946c <_read_r>:
 802946c:	b538      	push	{r3, r4, r5, lr}
 802946e:	4c07      	ldr	r4, [pc, #28]	; (802948c <_read_r+0x20>)
 8029470:	4605      	mov	r5, r0
 8029472:	4608      	mov	r0, r1
 8029474:	4611      	mov	r1, r2
 8029476:	2200      	movs	r2, #0
 8029478:	6022      	str	r2, [r4, #0]
 802947a:	461a      	mov	r2, r3
 802947c:	f7d9 fd0a 	bl	8002e94 <_read>
 8029480:	1c43      	adds	r3, r0, #1
 8029482:	d102      	bne.n	802948a <_read_r+0x1e>
 8029484:	6823      	ldr	r3, [r4, #0]
 8029486:	b103      	cbz	r3, 802948a <_read_r+0x1e>
 8029488:	602b      	str	r3, [r5, #0]
 802948a:	bd38      	pop	{r3, r4, r5, pc}
 802948c:	2000c264 	.word	0x2000c264

08029490 <_init>:
 8029490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029492:	bf00      	nop
 8029494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029496:	bc08      	pop	{r3}
 8029498:	469e      	mov	lr, r3
 802949a:	4770      	bx	lr

0802949c <_fini>:
 802949c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802949e:	bf00      	nop
 80294a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80294a2:	bc08      	pop	{r3}
 80294a4:	469e      	mov	lr, r3
 80294a6:	4770      	bx	lr
