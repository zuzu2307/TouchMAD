
Test_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027ca0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004cfc  08027e70  08027e70  00037e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000019ac  0802cb6c  0802cb6c  0003cb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000920d8  0802e518  0802e518  0003e518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000ac  080c05f0  080c05f0  000d05f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080c069c  080c069c  000e00fc  2**0
                  CONTENTS
  7 .ARM          00000008  080c069c  080c069c  000d069c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080c06a4  080c06a4  000e00fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  080c06a4  080c06a4  000d06a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080c06b8  080c06b8  000d06b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000fc  20000000  080c06c0  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000c1e4  200000fc  080c07bc  000e00fc  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000c2e0  080c07bc  000ec2e0  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000e00fc  2**0
                  CONTENTS, READONLY
 15 .debug_info   000d551e  00000000  00000000  000e012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 000165c0  00000000  00000000  001b564a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00005408  00000000  00000000  001cbc10  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00004dc8  00000000  00000000  001d1018  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003d726  00000000  00000000  001d5de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0004d8be  00000000  00000000  00213506  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0013c09f  00000000  00000000  00260dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  0039ce63  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00016d2c  00000000  00000000  0039cf60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08027e58 	.word	0x08027e58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	08027e58 	.word	0x08027e58

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f00e fd02 	bl	800efc4 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c0:	f000 f9b4 	bl	800092c <ft5336_I2C_InitializeIfRequired>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4603      	mov	r3, r0
 80005ea:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 f998 	bl	800092c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e010      	b.n	8000624 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	21a8      	movs	r1, #168	; 0xa8
 8000608:	4618      	mov	r0, r3
 800060a:	f00e fcbd 	bl	800ef88 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b51      	cmp	r3, #81	; 0x51
 8000618:	d101      	bne.n	800061e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d802      	bhi.n	8000630 <ft5336_ReadID+0x4e>
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e8      	beq.n	8000602 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f97e 	bl	800094c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f932 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f00e fc87 	bl	800ef88 <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000118 	.word	0x20000118

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f00e fbd4 	bl	800ef88 <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f00e fbc6 	bl	800ef88 <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f00e fbab 	bl	800ef88 <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f00e fb9d 	bl	800ef88 <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000118 	.word	0x20000118
 8000890:	2000011c 	.word	0x2000011c

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f00e fb50 	bl	800ef54 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f00e fb3c 	bl	800ef54 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800091a:	781b      	ldrb	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000118 	.word	0x20000118

0800092c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000930:	f7ff fff0 	bl	8000914 <ft5336_Get_I2C_InitializedStatus>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d104      	bne.n	8000944 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800093a:	f00e fb01 	bl	800ef40 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800093e:	4b02      	ldr	r3, [pc, #8]	; (8000948 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
  }
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000118 	.word	0x20000118

0800094c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80009ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4a06      	ldr	r2, [pc, #24]	; (80009cc <vApplicationGetIdleTaskMemory+0x30>)
 80009b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000120 	.word	0x20000120
 80009cc:	20000178 	.word	0x20000178

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f002 fc5e 	bl	8003296 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f84b 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009de:	f001 f8d9 	bl	8001b94 <MX_GPIO_Init>
  MX_ADC3_Init();
 80009e2:	f000 f907 	bl	8000bf4 <MX_ADC3_Init>
  MX_CRC_Init();
 80009e6:	f000 f957 	bl	8000c98 <MX_CRC_Init>
  MX_DCMI_Init();
 80009ea:	f000 f977 	bl	8000cdc <MX_DCMI_Init>
  MX_DMA2D_Init();
 80009ee:	f000 f9a9 	bl	8000d44 <MX_DMA2D_Init>
  MX_FMC_Init();
 80009f2:	f001 f823 	bl	8001a3c <MX_FMC_Init>
  MX_I2C1_Init();
 80009f6:	f000 f9d7 	bl	8000da8 <MX_I2C1_Init>
  MX_I2C3_Init();
 80009fa:	f000 fa15 	bl	8000e28 <MX_I2C3_Init>
  MX_LTDC_Init();
 80009fe:	f000 fa53 	bl	8000ea8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000a02:	f000 fb07 	bl	8001014 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000a06:	f000 fb31 	bl	800106c <MX_RTC_Init>
  MX_SAI2_Init();
 8000a0a:	f000 fbd5 	bl	80011b8 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000a0e:	f000 fc7b 	bl	8001308 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000a12:	f000 fc99 	bl	8001348 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000a16:	f000 fcc7 	bl	80013a8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000a1a:	f000 fd03 	bl	8001424 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a1e:	f000 fdad 	bl	800157c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a22:	f000 fe21 	bl	8001668 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000a26:	f000 fe97 	bl	8001758 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a2a:	f000 ff0d 	bl	8001848 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000a2e:	f000 ff5f 	bl	80018f0 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000a32:	f000 ffa3 	bl	800197c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000a36:	f000 ffd1 	bl	80019dc <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000a3a:	f00a ff85 	bl	800b948 <MX_FATFS_Init>
  MX_TouchGFX_Init();
 8000a3e:	f00e facc 	bl	800efda <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <main+0x9c>)
 8000a44:	1d3c      	adds	r4, r7, #4
 8000a46:	461d      	mov	r5, r3
 8000a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f00b fa6d 	bl	800bf38 <osThreadCreate>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <main+0xa0>)
 8000a62:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a64:	f00b fa45 	bl	800bef2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <main+0x98>
 8000a6a:	bf00      	nop
 8000a6c:	08027e7c 	.word	0x08027e7c
 8000a70:	2000b714 	.word	0x2000b714

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b0b4      	sub	sp, #208	; 0xd0
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a7e:	2230      	movs	r2, #48	; 0x30
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f026 fa6b 	bl	8026f5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	2284      	movs	r2, #132	; 0x84
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f026 fa5c 	bl	8026f5e <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000aa6:	f005 fa03 	bl	8005eb0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	4b4f      	ldr	r3, [pc, #316]	; (8000be8 <SystemClock_Config+0x174>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a4e      	ldr	r2, [pc, #312]	; (8000be8 <SystemClock_Config+0x174>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b4c      	ldr	r3, [pc, #304]	; (8000be8 <SystemClock_Config+0x174>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac2:	4b4a      	ldr	r3, [pc, #296]	; (8000bec <SystemClock_Config+0x178>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a49      	ldr	r2, [pc, #292]	; (8000bec <SystemClock_Config+0x178>)
 8000ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	4b47      	ldr	r3, [pc, #284]	; (8000bec <SystemClock_Config+0x178>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ada:	2309      	movs	r3, #9
 8000adc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aee:	2302      	movs	r3, #2
 8000af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000af8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000afc:	2319      	movs	r3, #25
 8000afe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000b02:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b10:	2309      	movs	r3, #9
 8000b12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f005 faea 	bl	80060f4 <HAL_RCC_OscConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b26:	f001 fa59 	bl	8001fdc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b2a:	f005 f9d1 	bl	8005ed0 <HAL_PWREx_EnableOverDrive>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b34:	f001 fa52 	bl	8001fdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b38:	230f      	movs	r3, #15
 8000b3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b5a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b5e:	2106      	movs	r1, #6
 8000b60:	4618      	mov	r0, r3
 8000b62:	f005 fd6b 	bl	800663c <HAL_RCC_ClockConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000b6c:	f001 fa36 	bl	8001fdc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <SystemClock_Config+0x17c>)
 8000b72:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000b74:	2364      	movs	r3, #100	; 0x64
 8000b76:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000b84:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b88:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000b8a:	2305      	movs	r3, #5
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000b92:	2303      	movs	r3, #3
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000baa:	2300      	movs	r3, #0
 8000bac:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000bbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f005 ff37 	bl	8006a44 <HAL_RCCEx_PeriphCLKConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000bdc:	f001 f9fe 	bl	8001fdc <Error_Handler>
  }
}
 8000be0:	bf00      	nop
 8000be2:	37d0      	adds	r7, #208	; 0xd0
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40007000 	.word	0x40007000
 8000bf0:	01b14868 	.word	0x01b14868

08000bf4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c08:	4a21      	ldr	r2, [pc, #132]	; (8000c90 <MX_ADC3_Init+0x9c>)
 8000c0a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c12:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c36:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <MX_ADC3_Init+0xa0>)
 8000c38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c56:	f002 fb6d 	bl	8003334 <HAL_ADC_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000c60:	f001 f9bc 	bl	8001fdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c64:	2304      	movs	r3, #4
 8000c66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c76:	f002 fba1 	bl	80033bc <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c80:	f001 f9ac 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	2000baf4 	.word	0x2000baf4
 8000c90:	40012200 	.word	0x40012200
 8000c94:	0f000001 	.word	0x0f000001

08000c98 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <MX_CRC_Init+0x40>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000cc2:	f002 fed1 	bl	8003a68 <HAL_CRC_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000ccc:	f001 f986 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	2000b924 	.word	0x2000b924
 8000cd8:	40023000 	.word	0x40023000

08000cdc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <MX_DCMI_Init+0x64>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d2a:	f002 ff87 	bl	8003c3c <HAL_DCMI_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000d34:	f001 f952 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000bb3c 	.word	0x2000bb3c
 8000d40:	50050000 	.word	0x50050000

08000d44 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d4a:	4a16      	ldr	r2, [pc, #88]	; (8000da4 <MX_DMA2D_Init+0x60>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d78:	4809      	ldr	r0, [pc, #36]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d7a:	f003 f873 	bl	8003e64 <HAL_DMA2D_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000d84:	f001 f92a 	bl	8001fdc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d8c:	f003 fb34 	bl	80043f8 <HAL_DMA2D_ConfigLayer>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000d96:	f001 f921 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000bcec 	.word	0x2000bcec
 8000da4:	4002b000 	.word	0x4002b000

08000da8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dae:	4a1c      	ldr	r2, [pc, #112]	; (8000e20 <MX_I2C1_Init+0x78>)
 8000db0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <MX_I2C1_Init+0x7c>)
 8000db6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000de2:	480e      	ldr	r0, [pc, #56]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000de4:	f003 ff1c 	bl	8004c20 <HAL_I2C_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dee:	f001 f8f5 	bl	8001fdc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000df2:	2100      	movs	r1, #0
 8000df4:	4809      	ldr	r0, [pc, #36]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000df6:	f004 fc2b 	bl	8005650 <HAL_I2CEx_ConfigAnalogFilter>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e00:	f001 f8ec 	bl	8001fdc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e04:	2100      	movs	r1, #0
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000e08:	f004 fc6d 	bl	80056e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e12:	f001 f8e3 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000b8d8 	.word	0x2000b8d8
 8000e20:	40005400 	.word	0x40005400
 8000e24:	00c0eaff 	.word	0x00c0eaff

08000e28 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ea0 <MX_I2C3_Init+0x78>)
 8000e30:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e34:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <MX_I2C3_Init+0x7c>)
 8000e36:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e62:	480e      	ldr	r0, [pc, #56]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e64:	f003 fedc 	bl	8004c20 <HAL_I2C_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e6e:	f001 f8b5 	bl	8001fdc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e72:	2100      	movs	r1, #0
 8000e74:	4809      	ldr	r0, [pc, #36]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e76:	f004 fbeb 	bl	8005650 <HAL_I2CEx_ConfigAnalogFilter>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e80:	f001 f8ac 	bl	8001fdc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e84:	2100      	movs	r1, #0
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e88:	f004 fc2d 	bl	80056e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e92:	f001 f8a3 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000b718 	.word	0x2000b718
 8000ea0:	40005c00 	.word	0x40005c00
 8000ea4:	00c0eaff 	.word	0x00c0eaff

08000ea8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b09a      	sub	sp, #104	; 0x68
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000eae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eb2:	2234      	movs	r2, #52	; 0x34
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f026 f851 	bl	8026f5e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2234      	movs	r2, #52	; 0x34
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f026 f84b 	bl	8026f5e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ec8:	4b50      	ldr	r3, [pc, #320]	; (800100c <MX_LTDC_Init+0x164>)
 8000eca:	4a51      	ldr	r2, [pc, #324]	; (8001010 <MX_LTDC_Init+0x168>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ece:	4b4f      	ldr	r3, [pc, #316]	; (800100c <MX_LTDC_Init+0x164>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ed4:	4b4d      	ldr	r3, [pc, #308]	; (800100c <MX_LTDC_Init+0x164>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000eda:	4b4c      	ldr	r3, [pc, #304]	; (800100c <MX_LTDC_Init+0x164>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ee0:	4b4a      	ldr	r3, [pc, #296]	; (800100c <MX_LTDC_Init+0x164>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000ee6:	4b49      	ldr	r3, [pc, #292]	; (800100c <MX_LTDC_Init+0x164>)
 8000ee8:	2228      	movs	r2, #40	; 0x28
 8000eea:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000eec:	4b47      	ldr	r3, [pc, #284]	; (800100c <MX_LTDC_Init+0x164>)
 8000eee:	2209      	movs	r2, #9
 8000ef0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000ef2:	4b46      	ldr	r3, [pc, #280]	; (800100c <MX_LTDC_Init+0x164>)
 8000ef4:	2235      	movs	r2, #53	; 0x35
 8000ef6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000ef8:	4b44      	ldr	r3, [pc, #272]	; (800100c <MX_LTDC_Init+0x164>)
 8000efa:	220b      	movs	r2, #11
 8000efc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000efe:	4b43      	ldr	r3, [pc, #268]	; (800100c <MX_LTDC_Init+0x164>)
 8000f00:	f240 2215 	movw	r2, #533	; 0x215
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000f06:	4b41      	ldr	r3, [pc, #260]	; (800100c <MX_LTDC_Init+0x164>)
 8000f08:	f240 121b 	movw	r2, #283	; 0x11b
 8000f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000f0e:	4b3f      	ldr	r3, [pc, #252]	; (800100c <MX_LTDC_Init+0x164>)
 8000f10:	f240 2235 	movw	r2, #565	; 0x235
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000f16:	4b3d      	ldr	r3, [pc, #244]	; (800100c <MX_LTDC_Init+0x164>)
 8000f18:	f240 121d 	movw	r2, #285	; 0x11d
 8000f1c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f1e:	4b3b      	ldr	r3, [pc, #236]	; (800100c <MX_LTDC_Init+0x164>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f26:	4b39      	ldr	r3, [pc, #228]	; (800100c <MX_LTDC_Init+0x164>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f2e:	4b37      	ldr	r3, [pc, #220]	; (800100c <MX_LTDC_Init+0x164>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f36:	4835      	ldr	r0, [pc, #212]	; (800100c <MX_LTDC_Init+0x164>)
 8000f38:	f004 fc22 	bl	8005780 <HAL_LTDC_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000f42:	f001 f84b 	bl	8001fdc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000f4a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000f54:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f58:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000f5e:	23ff      	movs	r3, #255	; 0xff
 8000f60:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f6a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000f6c:	2305      	movs	r3, #5
 8000f6e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000f70:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000f74:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000f76:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000f7c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f80:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f98:	2200      	movs	r2, #0
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	481b      	ldr	r0, [pc, #108]	; (800100c <MX_LTDC_Init+0x164>)
 8000f9e:	f004 fd77 	bl	8005a90 <HAL_LTDC_ConfigLayer>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000fa8:	f001 f818 	bl	8001fdc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc8:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fca:	2305      	movs	r3, #5
 8000fcc:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4806      	ldr	r0, [pc, #24]	; (800100c <MX_LTDC_Init+0x164>)
 8000ff4:	f004 fd4c 	bl	8005a90 <HAL_LTDC_ConfigLayer>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8000ffe:	f000 ffed 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	3768      	adds	r7, #104	; 0x68
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000ba4c 	.word	0x2000ba4c
 8001010:	40016800 	.word	0x40016800

08001014 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_QUADSPI_Init+0x50>)
 800101a:	4a13      	ldr	r2, [pc, #76]	; (8001068 <MX_QUADSPI_Init+0x54>)
 800101c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_QUADSPI_Init+0x50>)
 8001020:	22ff      	movs	r2, #255	; 0xff
 8001022:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_QUADSPI_Init+0x50>)
 8001026:	2201      	movs	r2, #1
 8001028:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_QUADSPI_Init+0x50>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_QUADSPI_Init+0x50>)
 8001032:	2201      	movs	r2, #1
 8001034:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_QUADSPI_Init+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_QUADSPI_Init+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <MX_QUADSPI_Init+0x50>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_QUADSPI_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_QUADSPI_Init+0x50>)
 8001050:	f004 ff8e 	bl	8005f70 <HAL_QSPI_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800105a:	f000 ffbf 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000bde0 	.word	0x2000bde0
 8001068:	a0001000 	.word	0xa0001000

0800106c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b092      	sub	sp, #72	; 0x48
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001072:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]
 8001082:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001088:	463b      	mov	r3, r7
 800108a:	222c      	movs	r2, #44	; 0x2c
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f025 ff65 	bl	8026f5e <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001094:	4b46      	ldr	r3, [pc, #280]	; (80011b0 <MX_RTC_Init+0x144>)
 8001096:	4a47      	ldr	r2, [pc, #284]	; (80011b4 <MX_RTC_Init+0x148>)
 8001098:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800109a:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <MX_RTC_Init+0x144>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010a0:	4b43      	ldr	r3, [pc, #268]	; (80011b0 <MX_RTC_Init+0x144>)
 80010a2:	227f      	movs	r2, #127	; 0x7f
 80010a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010a6:	4b42      	ldr	r3, [pc, #264]	; (80011b0 <MX_RTC_Init+0x144>)
 80010a8:	22ff      	movs	r2, #255	; 0xff
 80010aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010ac:	4b40      	ldr	r3, [pc, #256]	; (80011b0 <MX_RTC_Init+0x144>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010b2:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <MX_RTC_Init+0x144>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010b8:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <MX_RTC_Init+0x144>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010be:	483c      	ldr	r0, [pc, #240]	; (80011b0 <MX_RTC_Init+0x144>)
 80010c0:	f006 f9e2 	bl	8007488 <HAL_RTC_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80010ca:	f000 ff87 	bl	8001fdc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80010da:	2300      	movs	r3, #0
 80010dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ec:	2201      	movs	r2, #1
 80010ee:	4619      	mov	r1, r3
 80010f0:	482f      	ldr	r0, [pc, #188]	; (80011b0 <MX_RTC_Init+0x144>)
 80010f2:	f006 fa45 	bl	8007580 <HAL_RTC_SetTime>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80010fc:	f000 ff6e 	bl	8001fdc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001100:	2301      	movs	r3, #1
 8001102:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001106:	2301      	movs	r3, #1
 8001108:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 800110c:	2301      	movs	r3, #1
 800110e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001112:	2300      	movs	r3, #0
 8001114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001118:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111c:	2201      	movs	r2, #1
 800111e:	4619      	mov	r1, r3
 8001120:	4823      	ldr	r0, [pc, #140]	; (80011b0 <MX_RTC_Init+0x144>)
 8001122:	f006 faeb 	bl	80076fc <HAL_RTC_SetDate>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800112c:	f000 ff56 	bl	8001fdc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001130:	2300      	movs	r3, #0
 8001132:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001134:	2300      	movs	r3, #0
 8001136:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001138:	2300      	movs	r3, #0
 800113a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001154:	2301      	movs	r3, #1
 8001156:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800115a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001160:	463b      	mov	r3, r7
 8001162:	2201      	movs	r2, #1
 8001164:	4619      	mov	r1, r3
 8001166:	4812      	ldr	r0, [pc, #72]	; (80011b0 <MX_RTC_Init+0x144>)
 8001168:	f006 fb70 	bl	800784c <HAL_RTC_SetAlarm>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001172:	f000 ff33 	bl	8001fdc <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	2201      	movs	r2, #1
 8001180:	4619      	mov	r1, r3
 8001182:	480b      	ldr	r0, [pc, #44]	; (80011b0 <MX_RTC_Init+0x144>)
 8001184:	f006 fb62 	bl	800784c <HAL_RTC_SetAlarm>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800118e:	f000 ff25 	bl	8001fdc <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001192:	2202      	movs	r2, #2
 8001194:	2100      	movs	r1, #0
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <MX_RTC_Init+0x144>)
 8001198:	f006 fce2 	bl	8007b60 <HAL_RTCEx_SetTimeStamp>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 80011a2:	f000 ff1b 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3748      	adds	r7, #72	; 0x48
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000bc0c 	.word	0x2000bc0c
 80011b4:	40002800 	.word	0x40002800

080011b8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80011bc:	4b4d      	ldr	r3, [pc, #308]	; (80012f4 <MX_SAI2_Init+0x13c>)
 80011be:	4a4e      	ldr	r2, [pc, #312]	; (80012f8 <MX_SAI2_Init+0x140>)
 80011c0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80011c2:	4b4c      	ldr	r3, [pc, #304]	; (80012f4 <MX_SAI2_Init+0x13c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80011c8:	4b4a      	ldr	r3, [pc, #296]	; (80012f4 <MX_SAI2_Init+0x13c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80011ce:	4b49      	ldr	r3, [pc, #292]	; (80012f4 <MX_SAI2_Init+0x13c>)
 80011d0:	2240      	movs	r2, #64	; 0x40
 80011d2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80011d4:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <MX_SAI2_Init+0x13c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80011da:	4b46      	ldr	r3, [pc, #280]	; (80012f4 <MX_SAI2_Init+0x13c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80011e0:	4b44      	ldr	r3, [pc, #272]	; (80012f4 <MX_SAI2_Init+0x13c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011e6:	4b43      	ldr	r3, [pc, #268]	; (80012f4 <MX_SAI2_Init+0x13c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80011ec:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <MX_SAI2_Init+0x13c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011f2:	4b40      	ldr	r3, [pc, #256]	; (80012f4 <MX_SAI2_Init+0x13c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80011f8:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <MX_SAI2_Init+0x13c>)
 80011fa:	4a40      	ldr	r2, [pc, #256]	; (80012fc <MX_SAI2_Init+0x144>)
 80011fc:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80011fe:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <MX_SAI2_Init+0x13c>)
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001204:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <MX_SAI2_Init+0x13c>)
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800120a:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <MX_SAI2_Init+0x13c>)
 800120c:	2200      	movs	r2, #0
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001210:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <MX_SAI2_Init+0x13c>)
 8001212:	2200      	movs	r2, #0
 8001214:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <MX_SAI2_Init+0x13c>)
 8001218:	2208      	movs	r2, #8
 800121a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800121c:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <MX_SAI2_Init+0x13c>)
 800121e:	2201      	movs	r2, #1
 8001220:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001222:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <MX_SAI2_Init+0x13c>)
 8001224:	2200      	movs	r2, #0
 8001226:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001228:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <MX_SAI2_Init+0x13c>)
 800122a:	2200      	movs	r2, #0
 800122c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800122e:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <MX_SAI2_Init+0x13c>)
 8001230:	2200      	movs	r2, #0
 8001232:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001234:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <MX_SAI2_Init+0x13c>)
 8001236:	2200      	movs	r2, #0
 8001238:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800123a:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <MX_SAI2_Init+0x13c>)
 800123c:	2200      	movs	r2, #0
 800123e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001240:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <MX_SAI2_Init+0x13c>)
 8001242:	2201      	movs	r2, #1
 8001244:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <MX_SAI2_Init+0x13c>)
 8001248:	2200      	movs	r2, #0
 800124a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800124c:	4829      	ldr	r0, [pc, #164]	; (80012f4 <MX_SAI2_Init+0x13c>)
 800124e:	f006 fcdd 	bl	8007c0c <HAL_SAI_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001258:	f000 fec0 	bl	8001fdc <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800125c:	4b28      	ldr	r3, [pc, #160]	; (8001300 <MX_SAI2_Init+0x148>)
 800125e:	4a29      	ldr	r2, [pc, #164]	; (8001304 <MX_SAI2_Init+0x14c>)
 8001260:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001262:	4b27      	ldr	r3, [pc, #156]	; (8001300 <MX_SAI2_Init+0x148>)
 8001264:	2200      	movs	r2, #0
 8001266:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001268:	4b25      	ldr	r3, [pc, #148]	; (8001300 <MX_SAI2_Init+0x148>)
 800126a:	2203      	movs	r2, #3
 800126c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800126e:	4b24      	ldr	r3, [pc, #144]	; (8001300 <MX_SAI2_Init+0x148>)
 8001270:	2240      	movs	r2, #64	; 0x40
 8001272:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001274:	4b22      	ldr	r3, [pc, #136]	; (8001300 <MX_SAI2_Init+0x148>)
 8001276:	2200      	movs	r2, #0
 8001278:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <MX_SAI2_Init+0x148>)
 800127c:	2200      	movs	r2, #0
 800127e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_SAI2_Init+0x148>)
 8001282:	2201      	movs	r2, #1
 8001284:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <MX_SAI2_Init+0x148>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_SAI2_Init+0x148>)
 800128e:	2200      	movs	r2, #0
 8001290:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_SAI2_Init+0x148>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_SAI2_Init+0x148>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_SAI2_Init+0x148>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_SAI2_Init+0x148>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_SAI2_Init+0x148>)
 80012ac:	2208      	movs	r2, #8
 80012ae:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <MX_SAI2_Init+0x148>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_SAI2_Init+0x148>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80012bc:	4b10      	ldr	r3, [pc, #64]	; (8001300 <MX_SAI2_Init+0x148>)
 80012be:	2200      	movs	r2, #0
 80012c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_SAI2_Init+0x148>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <MX_SAI2_Init+0x148>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_SAI2_Init+0x148>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <MX_SAI2_Init+0x148>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_SAI2_Init+0x148>)
 80012dc:	2200      	movs	r2, #0
 80012de:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <MX_SAI2_Init+0x148>)
 80012e2:	f006 fc93 	bl	8007c0c <HAL_SAI_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80012ec:	f000 fe76 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000b854 	.word	0x2000b854
 80012f8:	40015c04 	.word	0x40015c04
 80012fc:	0002ee00 	.word	0x0002ee00
 8001300:	2000b690 	.word	0x2000b690
 8001304:	40015c24 	.word	0x40015c24

08001308 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_SDMMC1_SD_Init+0x38>)
 800130e:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <MX_SDMMC1_SD_Init+0x3c>)
 8001310:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <MX_SDMMC1_SD_Init+0x38>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_SDMMC1_SD_Init+0x38>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <MX_SDMMC1_SD_Init+0x38>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_SDMMC1_SD_Init+0x38>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800132a:	4b05      	ldr	r3, [pc, #20]	; (8001340 <MX_SDMMC1_SD_Init+0x38>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <MX_SDMMC1_SD_Init+0x38>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	2000b948 	.word	0x2000b948
 8001344:	40012c00 	.word	0x40012c00

08001348 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_SPDIFRX_Init+0x5c>)
 800134e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001352:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <MX_SPDIFRX_Init+0x5c>)
 8001356:	2200      	movs	r2, #0
 8001358:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <MX_SPDIFRX_Init+0x5c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <MX_SPDIFRX_Init+0x5c>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_SPDIFRX_Init+0x5c>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <MX_SPDIFRX_Init+0x5c>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_SPDIFRX_Init+0x5c>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <MX_SPDIFRX_Init+0x5c>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_SPDIFRX_Init+0x5c>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <MX_SPDIFRX_Init+0x5c>)
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_SPDIFRX_Init+0x5c>)
 800138c:	2200      	movs	r2, #0
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <MX_SPDIFRX_Init+0x5c>)
 8001392:	f007 fecf 	bl	8009134 <HAL_SPDIFRX_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 800139c:	f000 fe1e 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	2000b808 	.word	0x2000b808

080013a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_SPI2_Init+0x74>)
 80013ae:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <MX_SPI2_Init+0x78>)
 80013b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <MX_SPI2_Init+0x74>)
 80013b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_SPI2_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80013c0:	4b16      	ldr	r3, [pc, #88]	; (800141c <MX_SPI2_Init+0x74>)
 80013c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <MX_SPI2_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <MX_SPI2_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_SPI2_Init+0x74>)
 80013d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_SPI2_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_SPI2_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_SPI2_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <MX_SPI2_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_SPI2_Init+0x74>)
 80013f6:	2207      	movs	r2, #7
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <MX_SPI2_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_SPI2_Init+0x74>)
 8001402:	2208      	movs	r2, #8
 8001404:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_SPI2_Init+0x74>)
 8001408:	f007 fef0 	bl	80091ec <HAL_SPI_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001412:	f000 fde3 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000b764 	.word	0x2000b764
 8001420:	40003800 	.word	0x40003800

08001424 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b09a      	sub	sp, #104	; 0x68
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001444:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	222c      	movs	r2, #44	; 0x2c
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f025 fd7d 	bl	8026f5e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001464:	4b43      	ldr	r3, [pc, #268]	; (8001574 <MX_TIM1_Init+0x150>)
 8001466:	4a44      	ldr	r2, [pc, #272]	; (8001578 <MX_TIM1_Init+0x154>)
 8001468:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800146a:	4b42      	ldr	r3, [pc, #264]	; (8001574 <MX_TIM1_Init+0x150>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b40      	ldr	r3, [pc, #256]	; (8001574 <MX_TIM1_Init+0x150>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001476:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <MX_TIM1_Init+0x150>)
 8001478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <MX_TIM1_Init+0x150>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001484:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <MX_TIM1_Init+0x150>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <MX_TIM1_Init+0x150>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001490:	4838      	ldr	r0, [pc, #224]	; (8001574 <MX_TIM1_Init+0x150>)
 8001492:	f007 ff3d 	bl	8009310 <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800149c:	f000 fd9e 	bl	8001fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014aa:	4619      	mov	r1, r3
 80014ac:	4831      	ldr	r0, [pc, #196]	; (8001574 <MX_TIM1_Init+0x150>)
 80014ae:	f008 f9e7 	bl	8009880 <HAL_TIM_ConfigClockSource>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014b8:	f000 fd90 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014bc:	482d      	ldr	r0, [pc, #180]	; (8001574 <MX_TIM1_Init+0x150>)
 80014be:	f007 ff7d 	bl	80093bc <HAL_TIM_PWM_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80014c8:	f000 fd88 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014dc:	4619      	mov	r1, r3
 80014de:	4825      	ldr	r0, [pc, #148]	; (8001574 <MX_TIM1_Init+0x150>)
 80014e0:	f008 fe48 	bl	800a174 <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80014ea:	f000 fd77 	bl	8001fdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ee:	2360      	movs	r3, #96	; 0x60
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f6:	2300      	movs	r3, #0
 80014f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014fa:	2300      	movs	r3, #0
 80014fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800150a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800150e:	2200      	movs	r2, #0
 8001510:	4619      	mov	r1, r3
 8001512:	4818      	ldr	r0, [pc, #96]	; (8001574 <MX_TIM1_Init+0x150>)
 8001514:	f008 f89c 	bl	8009650 <HAL_TIM_PWM_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800151e:	f000 fd5d 	bl	8001fdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001544:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	4619      	mov	r1, r3
 8001556:	4807      	ldr	r0, [pc, #28]	; (8001574 <MX_TIM1_Init+0x150>)
 8001558:	f008 fe9a 	bl	800a290 <HAL_TIMEx_ConfigBreakDeadTime>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001562:	f000 fd3b 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001566:	4803      	ldr	r0, [pc, #12]	; (8001574 <MX_TIM1_Init+0x150>)
 8001568:	f001 fa9a 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 800156c:	bf00      	nop
 800156e:	3768      	adds	r7, #104	; 0x68
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	2000bc2c 	.word	0x2000bc2c
 8001578:	40010000 	.word	0x40010000

0800157c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08e      	sub	sp, #56	; 0x38
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800159c:	463b      	mov	r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]
 80015aa:	615a      	str	r2, [r3, #20]
 80015ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015ae:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <MX_TIM2_Init+0xe8>)
 80015b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015b6:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <MX_TIM2_Init+0xe8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015bc:	4b29      	ldr	r3, [pc, #164]	; (8001664 <MX_TIM2_Init+0xe8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015c2:	4b28      	ldr	r3, [pc, #160]	; (8001664 <MX_TIM2_Init+0xe8>)
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <MX_TIM2_Init+0xe8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <MX_TIM2_Init+0xe8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015d6:	4823      	ldr	r0, [pc, #140]	; (8001664 <MX_TIM2_Init+0xe8>)
 80015d8:	f007 fe9a 	bl	8009310 <HAL_TIM_Base_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80015e2:	f000 fcfb 	bl	8001fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f0:	4619      	mov	r1, r3
 80015f2:	481c      	ldr	r0, [pc, #112]	; (8001664 <MX_TIM2_Init+0xe8>)
 80015f4:	f008 f944 	bl	8009880 <HAL_TIM_ConfigClockSource>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80015fe:	f000 fced 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001602:	4818      	ldr	r0, [pc, #96]	; (8001664 <MX_TIM2_Init+0xe8>)
 8001604:	f007 feda 	bl	80093bc <HAL_TIM_PWM_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800160e:	f000 fce5 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4619      	mov	r1, r3
 8001620:	4810      	ldr	r0, [pc, #64]	; (8001664 <MX_TIM2_Init+0xe8>)
 8001622:	f008 fda7 	bl	800a174 <HAL_TIMEx_MasterConfigSynchronization>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800162c:	f000 fcd6 	bl	8001fdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001630:	2360      	movs	r3, #96	; 0x60
 8001632:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001640:	463b      	mov	r3, r7
 8001642:	2200      	movs	r2, #0
 8001644:	4619      	mov	r1, r3
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <MX_TIM2_Init+0xe8>)
 8001648:	f008 f802 	bl	8009650 <HAL_TIM_PWM_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001652:	f000 fcc3 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001656:	4803      	ldr	r0, [pc, #12]	; (8001664 <MX_TIM2_Init+0xe8>)
 8001658:	f001 fa22 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 800165c:	bf00      	nop
 800165e:	3738      	adds	r7, #56	; 0x38
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2000bd2c 	.word	0x2000bd2c

08001668 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08e      	sub	sp, #56	; 0x38
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001688:	463b      	mov	r3, r7
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]
 8001696:	615a      	str	r2, [r3, #20]
 8001698:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800169a:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <MX_TIM3_Init+0xe8>)
 800169c:	4a2d      	ldr	r2, [pc, #180]	; (8001754 <MX_TIM3_Init+0xec>)
 800169e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <MX_TIM3_Init+0xe8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a6:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <MX_TIM3_Init+0xe8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016ac:	4b28      	ldr	r3, [pc, #160]	; (8001750 <MX_TIM3_Init+0xe8>)
 80016ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b4:	4b26      	ldr	r3, [pc, #152]	; (8001750 <MX_TIM3_Init+0xe8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <MX_TIM3_Init+0xe8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016c0:	4823      	ldr	r0, [pc, #140]	; (8001750 <MX_TIM3_Init+0xe8>)
 80016c2:	f007 fe25 	bl	8009310 <HAL_TIM_Base_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80016cc:	f000 fc86 	bl	8001fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016da:	4619      	mov	r1, r3
 80016dc:	481c      	ldr	r0, [pc, #112]	; (8001750 <MX_TIM3_Init+0xe8>)
 80016de:	f008 f8cf 	bl	8009880 <HAL_TIM_ConfigClockSource>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80016e8:	f000 fc78 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016ec:	4818      	ldr	r0, [pc, #96]	; (8001750 <MX_TIM3_Init+0xe8>)
 80016ee:	f007 fe65 	bl	80093bc <HAL_TIM_PWM_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80016f8:	f000 fc70 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	4619      	mov	r1, r3
 800170a:	4811      	ldr	r0, [pc, #68]	; (8001750 <MX_TIM3_Init+0xe8>)
 800170c:	f008 fd32 	bl	800a174 <HAL_TIMEx_MasterConfigSynchronization>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001716:	f000 fc61 	bl	8001fdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800171a:	2360      	movs	r3, #96	; 0x60
 800171c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800172a:	463b      	mov	r3, r7
 800172c:	2200      	movs	r2, #0
 800172e:	4619      	mov	r1, r3
 8001730:	4807      	ldr	r0, [pc, #28]	; (8001750 <MX_TIM3_Init+0xe8>)
 8001732:	f007 ff8d 	bl	8009650 <HAL_TIM_PWM_ConfigChannel>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800173c:	f000 fc4e 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001740:	4803      	ldr	r0, [pc, #12]	; (8001750 <MX_TIM3_Init+0xe8>)
 8001742:	f001 f9ad 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 8001746:	bf00      	nop
 8001748:	3738      	adds	r7, #56	; 0x38
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000ba0c 	.word	0x2000ba0c
 8001754:	40000400 	.word	0x40000400

08001758 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08e      	sub	sp, #56	; 0x38
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001778:	463b      	mov	r3, r7
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
 8001786:	615a      	str	r2, [r3, #20]
 8001788:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800178a:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <MX_TIM5_Init+0xe8>)
 800178c:	4a2d      	ldr	r2, [pc, #180]	; (8001844 <MX_TIM5_Init+0xec>)
 800178e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001790:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <MX_TIM5_Init+0xe8>)
 8001792:	2200      	movs	r2, #0
 8001794:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001796:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <MX_TIM5_Init+0xe8>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800179c:	4b28      	ldr	r3, [pc, #160]	; (8001840 <MX_TIM5_Init+0xe8>)
 800179e:	f04f 32ff 	mov.w	r2, #4294967295
 80017a2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a4:	4b26      	ldr	r3, [pc, #152]	; (8001840 <MX_TIM5_Init+0xe8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <MX_TIM5_Init+0xe8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017b0:	4823      	ldr	r0, [pc, #140]	; (8001840 <MX_TIM5_Init+0xe8>)
 80017b2:	f007 fdad 	bl	8009310 <HAL_TIM_Base_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80017bc:	f000 fc0e 	bl	8001fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ca:	4619      	mov	r1, r3
 80017cc:	481c      	ldr	r0, [pc, #112]	; (8001840 <MX_TIM5_Init+0xe8>)
 80017ce:	f008 f857 	bl	8009880 <HAL_TIM_ConfigClockSource>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80017d8:	f000 fc00 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80017dc:	4818      	ldr	r0, [pc, #96]	; (8001840 <MX_TIM5_Init+0xe8>)
 80017de:	f007 fded 	bl	80093bc <HAL_TIM_PWM_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80017e8:	f000 fbf8 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4619      	mov	r1, r3
 80017fa:	4811      	ldr	r0, [pc, #68]	; (8001840 <MX_TIM5_Init+0xe8>)
 80017fc:	f008 fcba 	bl	800a174 <HAL_TIMEx_MasterConfigSynchronization>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001806:	f000 fbe9 	bl	8001fdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800180a:	2360      	movs	r3, #96	; 0x60
 800180c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800181a:	463b      	mov	r3, r7
 800181c:	220c      	movs	r2, #12
 800181e:	4619      	mov	r1, r3
 8001820:	4807      	ldr	r0, [pc, #28]	; (8001840 <MX_TIM5_Init+0xe8>)
 8001822:	f007 ff15 	bl	8009650 <HAL_TIM_PWM_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800182c:	f000 fbd6 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <MX_TIM5_Init+0xe8>)
 8001832:	f001 f935 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 8001836:	bf00      	nop
 8001838:	3738      	adds	r7, #56	; 0x38
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000b9cc 	.word	0x2000b9cc
 8001844:	40000c00 	.word	0x40000c00

08001848 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184e:	f107 0310 	add.w	r3, r7, #16
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001866:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <MX_TIM8_Init+0xa0>)
 8001868:	4a20      	ldr	r2, [pc, #128]	; (80018ec <MX_TIM8_Init+0xa4>)
 800186a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <MX_TIM8_Init+0xa0>)
 800186e:	2200      	movs	r2, #0
 8001870:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <MX_TIM8_Init+0xa0>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_TIM8_Init+0xa0>)
 800187a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800187e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <MX_TIM8_Init+0xa0>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_TIM8_Init+0xa0>)
 8001888:	2200      	movs	r2, #0
 800188a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <MX_TIM8_Init+0xa0>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001892:	4815      	ldr	r0, [pc, #84]	; (80018e8 <MX_TIM8_Init+0xa0>)
 8001894:	f007 fd3c 	bl	8009310 <HAL_TIM_Base_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800189e:	f000 fb9d 	bl	8001fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	4619      	mov	r1, r3
 80018ae:	480e      	ldr	r0, [pc, #56]	; (80018e8 <MX_TIM8_Init+0xa0>)
 80018b0:	f007 ffe6 	bl	8009880 <HAL_TIM_ConfigClockSource>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80018ba:	f000 fb8f 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	4806      	ldr	r0, [pc, #24]	; (80018e8 <MX_TIM8_Init+0xa0>)
 80018d0:	f008 fc50 	bl	800a174 <HAL_TIMEx_MasterConfigSynchronization>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80018da:	f000 fb7f 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000b7c8 	.word	0x2000b7c8
 80018ec:	40010400 	.word	0x40010400

080018f0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	615a      	str	r2, [r3, #20]
 8001906:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <MX_TIM12_Init+0x84>)
 800190a:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <MX_TIM12_Init+0x88>)
 800190c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <MX_TIM12_Init+0x84>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <MX_TIM12_Init+0x84>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <MX_TIM12_Init+0x84>)
 800191c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001920:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001922:	4b14      	ldr	r3, [pc, #80]	; (8001974 <MX_TIM12_Init+0x84>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <MX_TIM12_Init+0x84>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800192e:	4811      	ldr	r0, [pc, #68]	; (8001974 <MX_TIM12_Init+0x84>)
 8001930:	f007 fd44 	bl	80093bc <HAL_TIM_PWM_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800193a:	f000 fb4f 	bl	8001fdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800193e:	2360      	movs	r3, #96	; 0x60
 8001940:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2200      	movs	r2, #0
 8001952:	4619      	mov	r1, r3
 8001954:	4807      	ldr	r0, [pc, #28]	; (8001974 <MX_TIM12_Init+0x84>)
 8001956:	f007 fe7b 	bl	8009650 <HAL_TIM_PWM_ConfigChannel>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001960:	f000 fb3c 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001964:	4803      	ldr	r0, [pc, #12]	; (8001974 <MX_TIM12_Init+0x84>)
 8001966:	f001 f89b 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 800196a:	bf00      	nop
 800196c:	3720      	adds	r7, #32
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000bd6c 	.word	0x2000bd6c
 8001978:	40001800 	.word	0x40001800

0800197c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <MX_USART1_UART_Init+0x58>)
 8001982:	4a15      	ldr	r2, [pc, #84]	; (80019d8 <MX_USART1_UART_Init+0x5c>)
 8001984:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <MX_USART1_UART_Init+0x58>)
 8001988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800198c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <MX_USART1_UART_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <MX_USART1_UART_Init+0x58>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <MX_USART1_UART_Init+0x58>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <MX_USART1_UART_Init+0x58>)
 80019a2:	220c      	movs	r2, #12
 80019a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <MX_USART1_UART_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_USART1_UART_Init+0x58>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <MX_USART1_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_USART1_UART_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_USART1_UART_Init+0x58>)
 80019c0:	f008 fd02 	bl	800a3c8 <HAL_UART_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80019ca:	f000 fb07 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2000bb8c 	.word	0x2000bb8c
 80019d8:	40011000 	.word	0x40011000

080019dc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <MX_USART6_UART_Init+0x58>)
 80019e2:	4a15      	ldr	r2, [pc, #84]	; (8001a38 <MX_USART6_UART_Init+0x5c>)
 80019e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <MX_USART6_UART_Init+0x58>)
 80019e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_USART6_UART_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_USART6_UART_Init+0x58>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_USART6_UART_Init+0x58>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <MX_USART6_UART_Init+0x58>)
 8001a02:	220c      	movs	r2, #12
 8001a04:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <MX_USART6_UART_Init+0x58>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <MX_USART6_UART_Init+0x58>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <MX_USART6_UART_Init+0x58>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <MX_USART6_UART_Init+0x58>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a1e:	4805      	ldr	r0, [pc, #20]	; (8001a34 <MX_USART6_UART_Init+0x58>)
 8001a20:	f008 fcd2 	bl	800a3c8 <HAL_UART_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001a2a:	f000 fad7 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000bc6c 	.word	0x2000bc6c
 8001a38:	40011400 	.word	0x40011400

08001a3c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
 8001a50:	615a      	str	r2, [r3, #20]
 8001a52:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001a54:	4b4c      	ldr	r3, [pc, #304]	; (8001b88 <MX_FMC_Init+0x14c>)
 8001a56:	4a4d      	ldr	r2, [pc, #308]	; (8001b8c <MX_FMC_Init+0x150>)
 8001a58:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001a5a:	4b4b      	ldr	r3, [pc, #300]	; (8001b88 <MX_FMC_Init+0x14c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a60:	4b49      	ldr	r3, [pc, #292]	; (8001b88 <MX_FMC_Init+0x14c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001a66:	4b48      	ldr	r3, [pc, #288]	; (8001b88 <MX_FMC_Init+0x14c>)
 8001a68:	2204      	movs	r2, #4
 8001a6a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001a6c:	4b46      	ldr	r3, [pc, #280]	; (8001b88 <MX_FMC_Init+0x14c>)
 8001a6e:	2210      	movs	r2, #16
 8001a70:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a72:	4b45      	ldr	r3, [pc, #276]	; (8001b88 <MX_FMC_Init+0x14c>)
 8001a74:	2240      	movs	r2, #64	; 0x40
 8001a76:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001a78:	4b43      	ldr	r3, [pc, #268]	; (8001b88 <MX_FMC_Init+0x14c>)
 8001a7a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001a7e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a80:	4b41      	ldr	r3, [pc, #260]	; (8001b88 <MX_FMC_Init+0x14c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001a86:	4b40      	ldr	r3, [pc, #256]	; (8001b88 <MX_FMC_Init+0x14c>)
 8001a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a8c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001a8e:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <MX_FMC_Init+0x14c>)
 8001a90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001a96:	4b3c      	ldr	r3, [pc, #240]	; (8001b88 <MX_FMC_Init+0x14c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001aa8:	2307      	movs	r3, #7
 8001aaa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001aac:	2303      	movs	r3, #3
 8001aae:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	4619      	mov	r1, r3
 8001abc:	4832      	ldr	r0, [pc, #200]	; (8001b88 <MX_FMC_Init+0x14c>)
 8001abe:	f007 fab9 	bl	8009034 <HAL_SDRAM_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001ac8:	f000 fa88 	bl	8001fdc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  __IO uint32_t tmpmrd = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	603b      	str	r3, [r7, #0]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <MX_FMC_Init+0x154>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <MX_FMC_Init+0x154>)
 8001ad8:	2210      	movs	r2, #16
 8001ada:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001adc:	4b2c      	ldr	r3, [pc, #176]	; (8001b90 <MX_FMC_Init+0x154>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <MX_FMC_Init+0x154>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aec:	4928      	ldr	r1, [pc, #160]	; (8001b90 <MX_FMC_Init+0x154>)
 8001aee:	4826      	ldr	r0, [pc, #152]	; (8001b88 <MX_FMC_Init+0x14c>)
 8001af0:	f007 fad4 	bl	800909c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001af4:	2001      	movs	r0, #1
 8001af6:	f001 fbfb 	bl	80032f0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001afa:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <MX_FMC_Init+0x154>)
 8001afc:	2202      	movs	r2, #2
 8001afe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b00:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <MX_FMC_Init+0x154>)
 8001b02:	2210      	movs	r2, #16
 8001b04:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001b06:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <MX_FMC_Init+0x154>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001b0c:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <MX_FMC_Init+0x154>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b16:	491e      	ldr	r1, [pc, #120]	; (8001b90 <MX_FMC_Init+0x154>)
 8001b18:	481b      	ldr	r0, [pc, #108]	; (8001b88 <MX_FMC_Init+0x14c>)
 8001b1a:	f007 fabf 	bl	800909c <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <MX_FMC_Init+0x154>)
 8001b20:	2203      	movs	r2, #3
 8001b22:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <MX_FMC_Init+0x154>)
 8001b26:	2210      	movs	r2, #16
 8001b28:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <MX_FMC_Init+0x154>)
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <MX_FMC_Init+0x154>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b3a:	4915      	ldr	r1, [pc, #84]	; (8001b90 <MX_FMC_Init+0x154>)
 8001b3c:	4812      	ldr	r0, [pc, #72]	; (8001b88 <MX_FMC_Init+0x14c>)
 8001b3e:	f007 faad 	bl	800909c <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001b42:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001b46:	603b      	str	r3, [r7, #0]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
           SDRAM_MODEREG_CAS_LATENCY_3            | \
           SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_FMC_Init+0x154>)
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <MX_FMC_Init+0x154>)
 8001b50:	2210      	movs	r2, #16
 8001b52:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_FMC_Init+0x154>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <MX_FMC_Init+0x154>)
 8001b5e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b64:	490a      	ldr	r1, [pc, #40]	; (8001b90 <MX_FMC_Init+0x154>)
 8001b66:	4808      	ldr	r0, [pc, #32]	; (8001b88 <MX_FMC_Init+0x14c>)
 8001b68:	f007 fa98 	bl	800909c <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8001b6c:	f240 712b 	movw	r1, #1835	; 0x72b
 8001b70:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_FMC_Init+0x14c>)
 8001b72:	f007 fabe 	bl	80090f2 <HAL_SDRAM_ProgramRefreshRate>

  //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8001b76:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001b7a:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b7e:	601a      	str	r2, [r3, #0]

  /* USER CODE END FMC_Init 2 */
}
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	2000bdac 	.word	0x2000bdac
 8001b8c:	a0000140 	.word	0xa0000140
 8001b90:	20000378 	.word	0x20000378

08001b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b090      	sub	sp, #64	; 0x40
 8001b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
 8001ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001baa:	4baf      	ldr	r3, [pc, #700]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4aae      	ldr	r2, [pc, #696]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001bb0:	f043 0310 	orr.w	r3, r3, #16
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4bac      	ldr	r3, [pc, #688]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bc2:	4ba9      	ldr	r3, [pc, #676]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4aa8      	ldr	r2, [pc, #672]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4ba6      	ldr	r3, [pc, #664]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	4ba3      	ldr	r3, [pc, #652]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4aa2      	ldr	r2, [pc, #648]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4ba0      	ldr	r3, [pc, #640]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	623b      	str	r3, [r7, #32]
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf2:	4b9d      	ldr	r3, [pc, #628]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a9c      	ldr	r2, [pc, #624]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b9a      	ldr	r3, [pc, #616]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	61fb      	str	r3, [r7, #28]
 8001c08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0a:	4b97      	ldr	r3, [pc, #604]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a96      	ldr	r2, [pc, #600]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b94      	ldr	r3, [pc, #592]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	4b91      	ldr	r3, [pc, #580]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a90      	ldr	r2, [pc, #576]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b8e      	ldr	r3, [pc, #568]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c3a:	4b8b      	ldr	r3, [pc, #556]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a8a      	ldr	r2, [pc, #552]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b88      	ldr	r3, [pc, #544]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c52:	4b85      	ldr	r3, [pc, #532]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a84      	ldr	r2, [pc, #528]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b82      	ldr	r3, [pc, #520]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001c6a:	4b7f      	ldr	r3, [pc, #508]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a7e      	ldr	r2, [pc, #504]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b7c      	ldr	r3, [pc, #496]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c82:	4b79      	ldr	r3, [pc, #484]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a78      	ldr	r2, [pc, #480]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c88:	f043 0320 	orr.w	r3, r3, #32
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b76      	ldr	r3, [pc, #472]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c9a:	4b73      	ldr	r3, [pc, #460]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a72      	ldr	r2, [pc, #456]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b70      	ldr	r3, [pc, #448]	; (8001e68 <MX_GPIO_Init+0x2d4>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	2120      	movs	r1, #32
 8001cb6:	486d      	ldr	r0, [pc, #436]	; (8001e6c <MX_GPIO_Init+0x2d8>)
 8001cb8:	f002 ff98 	bl	8004bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	210c      	movs	r1, #12
 8001cc0:	486b      	ldr	r0, [pc, #428]	; (8001e70 <MX_GPIO_Init+0x2dc>)
 8001cc2:	f002 ff93 	bl	8004bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	2108      	movs	r1, #8
 8001cca:	486a      	ldr	r0, [pc, #424]	; (8001e74 <MX_GPIO_Init+0x2e0>)
 8001ccc:	f002 ff8e 	bl	8004bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cd6:	4866      	ldr	r0, [pc, #408]	; (8001e70 <MX_GPIO_Init+0x2dc>)
 8001cd8:	f002 ff88 	bl	8004bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ce2:	4865      	ldr	r0, [pc, #404]	; (8001e78 <MX_GPIO_Init+0x2e4>)
 8001ce4:	f002 ff82 	bl	8004bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	21c8      	movs	r1, #200	; 0xc8
 8001cec:	4863      	ldr	r0, [pc, #396]	; (8001e7c <MX_GPIO_Init+0x2e8>)
 8001cee:	f002 ff7d 	bl	8004bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001cf2:	2308      	movs	r3, #8
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d02:	4619      	mov	r1, r3
 8001d04:	485e      	ldr	r0, [pc, #376]	; (8001e80 <MX_GPIO_Init+0x2ec>)
 8001d06:	f002 fca5 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001d0a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d1c:	230b      	movs	r3, #11
 8001d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d24:	4619      	mov	r1, r3
 8001d26:	4855      	ldr	r0, [pc, #340]	; (8001e7c <MX_GPIO_Init+0x2e8>)
 8001d28:	f002 fc94 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001d2c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d3e:	230a      	movs	r3, #10
 8001d40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d46:	4619      	mov	r1, r3
 8001d48:	484e      	ldr	r0, [pc, #312]	; (8001e84 <MX_GPIO_Init+0x2f0>)
 8001d4a:	f002 fc83 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d54:	2300      	movs	r3, #0
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d60:	4619      	mov	r1, r3
 8001d62:	4849      	ldr	r0, [pc, #292]	; (8001e88 <MX_GPIO_Init+0x2f4>)
 8001d64:	f002 fc76 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001d68:	2340      	movs	r3, #64	; 0x40
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d6c:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <MX_GPIO_Init+0x2f8>)
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d78:	4619      	mov	r1, r3
 8001d7a:	483c      	ldr	r0, [pc, #240]	; (8001e6c <MX_GPIO_Init+0x2d8>)
 8001d7c:	f002 fc6a 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001d80:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d92:	230a      	movs	r3, #10
 8001d94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	483c      	ldr	r0, [pc, #240]	; (8001e90 <MX_GPIO_Init+0x2fc>)
 8001d9e:	f002 fc59 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001da2:	2320      	movs	r3, #32
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da6:	2301      	movs	r3, #1
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001db2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db6:	4619      	mov	r1, r3
 8001db8:	482c      	ldr	r0, [pc, #176]	; (8001e6c <MX_GPIO_Init+0x2d8>)
 8001dba:	f002 fc4b 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001dbe:	f241 030c 	movw	r3, #4108	; 0x100c
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4826      	ldr	r0, [pc, #152]	; (8001e70 <MX_GPIO_Init+0x2dc>)
 8001dd8:	f002 fc3c 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de2:	2300      	movs	r3, #0
 8001de4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dee:	4619      	mov	r1, r3
 8001df0:	4828      	ldr	r0, [pc, #160]	; (8001e94 <MX_GPIO_Init+0x300>)
 8001df2:	f002 fc2f 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001df6:	2308      	movs	r3, #8
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4819      	ldr	r0, [pc, #100]	; (8001e74 <MX_GPIO_Init+0x2e0>)
 8001e0e:	f002 fc21 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e12:	2310      	movs	r3, #16
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e16:	2300      	movs	r3, #0
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e22:	4619      	mov	r1, r3
 8001e24:	4811      	ldr	r0, [pc, #68]	; (8001e6c <MX_GPIO_Init+0x2d8>)
 8001e26:	f002 fc15 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001e2a:	f248 0304 	movw	r3, #32772	; 0x8004
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e30:	2300      	movs	r3, #0
 8001e32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480e      	ldr	r0, [pc, #56]	; (8001e78 <MX_GPIO_Init+0x2e4>)
 8001e40:	f002 fc08 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001e44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4806      	ldr	r0, [pc, #24]	; (8001e78 <MX_GPIO_Init+0x2e4>)
 8001e5e:	f002 fbf9 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e66:	e017      	b.n	8001e98 <MX_GPIO_Init+0x304>
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020c00 	.word	0x40020c00
 8001e70:	40022000 	.word	0x40022000
 8001e74:	40022800 	.word	0x40022800
 8001e78:	40021c00 	.word	0x40021c00
 8001e7c:	40021800 	.word	0x40021800
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40020400 	.word	0x40020400
 8001e88:	40022400 	.word	0x40022400
 8001e8c:	10120000 	.word	0x10120000
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40020800 	.word	0x40020800
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e9a:	4b3c      	ldr	r3, [pc, #240]	; (8001f8c <MX_GPIO_Init+0x3f8>)
 8001e9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4839      	ldr	r0, [pc, #228]	; (8001f90 <MX_GPIO_Init+0x3fc>)
 8001eaa:	f002 fbd3 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001eae:	2310      	movs	r3, #16
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ebe:	230a      	movs	r3, #10
 8001ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4832      	ldr	r0, [pc, #200]	; (8001f94 <MX_GPIO_Init+0x400>)
 8001eca:	f002 fbc3 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001ece:	23c8      	movs	r3, #200	; 0xc8
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	482c      	ldr	r0, [pc, #176]	; (8001f98 <MX_GPIO_Init+0x404>)
 8001ee6:	f002 fbb5 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001eea:	2305      	movs	r3, #5
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001efa:	230a      	movs	r3, #10
 8001efc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f02:	4619      	mov	r1, r3
 8001f04:	4825      	ldr	r0, [pc, #148]	; (8001f9c <MX_GPIO_Init+0x408>)
 8001f06:	f002 fba5 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f0a:	2332      	movs	r3, #50	; 0x32
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f1a:	230b      	movs	r3, #11
 8001f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f22:	4619      	mov	r1, r3
 8001f24:	481d      	ldr	r0, [pc, #116]	; (8001f9c <MX_GPIO_Init+0x408>)
 8001f26:	f002 fb95 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4816      	ldr	r0, [pc, #88]	; (8001f98 <MX_GPIO_Init+0x404>)
 8001f3e:	f002 fb89 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001f42:	2386      	movs	r3, #134	; 0x86
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f52:	230b      	movs	r3, #11
 8001f54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4810      	ldr	r0, [pc, #64]	; (8001fa0 <MX_GPIO_Init+0x40c>)
 8001f5e:	f002 fb79 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001f62:	2328      	movs	r3, #40	; 0x28
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f72:	230a      	movs	r3, #10
 8001f74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4808      	ldr	r0, [pc, #32]	; (8001fa0 <MX_GPIO_Init+0x40c>)
 8001f7e:	f002 fb69 	bl	8004654 <HAL_GPIO_Init>

}
 8001f82:	bf00      	nop
 8001f84:	3740      	adds	r7, #64	; 0x40
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	10120000 	.word	0x10120000
 8001f90:	40022000 	.word	0x40022000
 8001f94:	40021c00 	.word	0x40021c00
 8001f98:	40021800 	.word	0x40021800
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001fac:	f00d f81b 	bl	800efe6 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f00a f80d 	bl	800bfd0 <osDelay>
 8001fb6:	e7fb      	b.n	8001fb0 <StartDefaultTask+0xc>

08001fb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d101      	bne.n	8001fce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fca:	f001 f971 	bl	80032b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40001000 	.word	0x40001000

08001fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_MspInit+0x4c>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	4a10      	ldr	r2, [pc, #64]	; (8002038 <HAL_MspInit+0x4c>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_MspInit+0x4c>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_MspInit+0x4c>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <HAL_MspInit+0x4c>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002014:	6453      	str	r3, [r2, #68]	; 0x44
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_MspInit+0x4c>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	210f      	movs	r1, #15
 8002026:	f06f 0001 	mvn.w	r0, #1
 800202a:	f001 fce5 	bl	80039f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800

0800203c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a21      	ldr	r2, [pc, #132]	; (80020e0 <HAL_ADC_MspInit+0xa4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d13c      	bne.n	80020d8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800205e:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_ADC_MspInit+0xa8>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a20      	ldr	r2, [pc, #128]	; (80020e4 <HAL_ADC_MspInit+0xa8>)
 8002064:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <HAL_ADC_MspInit+0xa8>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_ADC_MspInit+0xa8>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a1a      	ldr	r2, [pc, #104]	; (80020e4 <HAL_ADC_MspInit+0xa8>)
 800207c:	f043 0320 	orr.w	r3, r3, #32
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <HAL_ADC_MspInit+0xa8>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_ADC_MspInit+0xa8>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <HAL_ADC_MspInit+0xa8>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_ADC_MspInit+0xa8>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80020a6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80020aa:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ac:	2303      	movs	r3, #3
 80020ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4619      	mov	r1, r3
 80020ba:	480b      	ldr	r0, [pc, #44]	; (80020e8 <HAL_ADC_MspInit+0xac>)
 80020bc:	f002 faca 	bl	8004654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80020c0:	2301      	movs	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c4:	2303      	movs	r3, #3
 80020c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4619      	mov	r1, r3
 80020d2:	4806      	ldr	r0, [pc, #24]	; (80020ec <HAL_ADC_MspInit+0xb0>)
 80020d4:	f002 fabe 	bl	8004654 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020d8:	bf00      	nop
 80020da:	3728      	adds	r7, #40	; 0x28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40012200 	.word	0x40012200
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40021400 	.word	0x40021400
 80020ec:	40020000 	.word	0x40020000

080020f0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <HAL_CRC_MspInit+0x38>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d10b      	bne.n	800211a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_CRC_MspInit+0x3c>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a09      	ldr	r2, [pc, #36]	; (800212c <HAL_CRC_MspInit+0x3c>)
 8002108:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <HAL_CRC_MspInit+0x3c>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40023000 	.word	0x40023000
 800212c:	40023800 	.word	0x40023800

08002130 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08e      	sub	sp, #56	; 0x38
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a50      	ldr	r2, [pc, #320]	; (8002290 <HAL_DCMI_MspInit+0x160>)
 800214e:	4293      	cmp	r3, r2
 8002150:	f040 809a 	bne.w	8002288 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002154:	4b4f      	ldr	r3, [pc, #316]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 8002156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002158:	4a4e      	ldr	r2, [pc, #312]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6353      	str	r3, [r2, #52]	; 0x34
 8002160:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 8002162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	623b      	str	r3, [r7, #32]
 800216a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800216c:	4b49      	ldr	r3, [pc, #292]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	4a48      	ldr	r2, [pc, #288]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 8002172:	f043 0310 	orr.w	r3, r3, #16
 8002176:	6313      	str	r3, [r2, #48]	; 0x30
 8002178:	4b46      	ldr	r3, [pc, #280]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002184:	4b43      	ldr	r3, [pc, #268]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	4a42      	ldr	r2, [pc, #264]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 800218a:	f043 0308 	orr.w	r3, r3, #8
 800218e:	6313      	str	r3, [r2, #48]	; 0x30
 8002190:	4b40      	ldr	r3, [pc, #256]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	61bb      	str	r3, [r7, #24]
 800219a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800219c:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	4a3c      	ldr	r2, [pc, #240]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 80021a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021a6:	6313      	str	r3, [r2, #48]	; 0x30
 80021a8:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80021b4:	4b37      	ldr	r3, [pc, #220]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	4a36      	ldr	r2, [pc, #216]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 80021ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021be:	6313      	str	r3, [r2, #48]	; 0x30
 80021c0:	4b34      	ldr	r3, [pc, #208]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021cc:	4b31      	ldr	r3, [pc, #196]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	4a30      	ldr	r2, [pc, #192]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6313      	str	r3, [r2, #48]	; 0x30
 80021d8:	4b2e      	ldr	r3, [pc, #184]	; (8002294 <HAL_DCMI_MspInit+0x164>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80021e4:	2360      	movs	r3, #96	; 0x60
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021f4:	230d      	movs	r3, #13
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fc:	4619      	mov	r1, r3
 80021fe:	4826      	ldr	r0, [pc, #152]	; (8002298 <HAL_DCMI_MspInit+0x168>)
 8002200:	f002 fa28 	bl	8004654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002204:	2308      	movs	r3, #8
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2300      	movs	r3, #0
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002214:	230d      	movs	r3, #13
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221c:	4619      	mov	r1, r3
 800221e:	481f      	ldr	r0, [pc, #124]	; (800229c <HAL_DCMI_MspInit+0x16c>)
 8002220:	f002 fa18 	bl	8004654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002232:	2300      	movs	r3, #0
 8002234:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002236:	230d      	movs	r3, #13
 8002238:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800223a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223e:	4619      	mov	r1, r3
 8002240:	4817      	ldr	r0, [pc, #92]	; (80022a0 <HAL_DCMI_MspInit+0x170>)
 8002242:	f002 fa07 	bl	8004654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002246:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002258:	230d      	movs	r3, #13
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800225c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002260:	4619      	mov	r1, r3
 8002262:	4810      	ldr	r0, [pc, #64]	; (80022a4 <HAL_DCMI_MspInit+0x174>)
 8002264:	f002 f9f6 	bl	8004654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002268:	2350      	movs	r3, #80	; 0x50
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002278:	230d      	movs	r3, #13
 800227a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002280:	4619      	mov	r1, r3
 8002282:	4809      	ldr	r0, [pc, #36]	; (80022a8 <HAL_DCMI_MspInit+0x178>)
 8002284:	f002 f9e6 	bl	8004654 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002288:	bf00      	nop
 800228a:	3738      	adds	r7, #56	; 0x38
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	50050000 	.word	0x50050000
 8002294:	40023800 	.word	0x40023800
 8002298:	40021000 	.word	0x40021000
 800229c:	40020c00 	.word	0x40020c00
 80022a0:	40021800 	.word	0x40021800
 80022a4:	40021c00 	.word	0x40021c00
 80022a8:	40020000 	.word	0x40020000

080022ac <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <HAL_DMA2D_MspInit+0x44>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d113      	bne.n	80022e6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <HAL_DMA2D_MspInit+0x48>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a0c      	ldr	r2, [pc, #48]	; (80022f4 <HAL_DMA2D_MspInit+0x48>)
 80022c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_DMA2D_MspInit+0x48>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	205a      	movs	r0, #90	; 0x5a
 80022dc:	f001 fb8c 	bl	80039f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80022e0:	205a      	movs	r0, #90	; 0x5a
 80022e2:	f001 fba5 	bl	8003a30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	4002b000 	.word	0x4002b000
 80022f4:	40023800 	.word	0x40023800

080022f8 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a07      	ldr	r2, [pc, #28]	; (8002324 <HAL_DMA2D_MspDeInit+0x2c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d108      	bne.n	800231c <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <HAL_DMA2D_MspDeInit+0x30>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a06      	ldr	r2, [pc, #24]	; (8002328 <HAL_DMA2D_MspDeInit+0x30>)
 8002310:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002314:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8002316:	205a      	movs	r0, #90	; 0x5a
 8002318:	f001 fb98 	bl	8003a4c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	4002b000 	.word	0x4002b000
 8002328:	40023800 	.word	0x40023800

0800232c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08c      	sub	sp, #48	; 0x30
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a2f      	ldr	r2, [pc, #188]	; (8002408 <HAL_I2C_MspInit+0xdc>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d129      	bne.n	80023a2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234e:	4b2f      	ldr	r3, [pc, #188]	; (800240c <HAL_I2C_MspInit+0xe0>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	4a2e      	ldr	r2, [pc, #184]	; (800240c <HAL_I2C_MspInit+0xe0>)
 8002354:	f043 0302 	orr.w	r3, r3, #2
 8002358:	6313      	str	r3, [r2, #48]	; 0x30
 800235a:	4b2c      	ldr	r3, [pc, #176]	; (800240c <HAL_I2C_MspInit+0xe0>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	61bb      	str	r3, [r7, #24]
 8002364:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002366:	f44f 7340 	mov.w	r3, #768	; 0x300
 800236a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800236c:	2312      	movs	r3, #18
 800236e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002370:	2301      	movs	r3, #1
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002374:	2300      	movs	r3, #0
 8002376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002378:	2304      	movs	r3, #4
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237c:	f107 031c 	add.w	r3, r7, #28
 8002380:	4619      	mov	r1, r3
 8002382:	4823      	ldr	r0, [pc, #140]	; (8002410 <HAL_I2C_MspInit+0xe4>)
 8002384:	f002 f966 	bl	8004654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002388:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_I2C_MspInit+0xe0>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	4a1f      	ldr	r2, [pc, #124]	; (800240c <HAL_I2C_MspInit+0xe0>)
 800238e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002392:	6413      	str	r3, [r2, #64]	; 0x40
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_I2C_MspInit+0xe0>)
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80023a0:	e02d      	b.n	80023fe <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a1b      	ldr	r2, [pc, #108]	; (8002414 <HAL_I2C_MspInit+0xe8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d128      	bne.n	80023fe <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <HAL_I2C_MspInit+0xe0>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	4a16      	ldr	r2, [pc, #88]	; (800240c <HAL_I2C_MspInit+0xe0>)
 80023b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b6:	6313      	str	r3, [r2, #48]	; 0x30
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <HAL_I2C_MspInit+0xe0>)
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80023c4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80023c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ca:	2312      	movs	r3, #18
 80023cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ce:	2301      	movs	r3, #1
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d2:	2303      	movs	r3, #3
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023d6:	2304      	movs	r3, #4
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023da:	f107 031c 	add.w	r3, r7, #28
 80023de:	4619      	mov	r1, r3
 80023e0:	480d      	ldr	r0, [pc, #52]	; (8002418 <HAL_I2C_MspInit+0xec>)
 80023e2:	f002 f937 	bl	8004654 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_I2C_MspInit+0xe0>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a08      	ldr	r2, [pc, #32]	; (800240c <HAL_I2C_MspInit+0xe0>)
 80023ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_I2C_MspInit+0xe0>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
}
 80023fe:	bf00      	nop
 8002400:	3730      	adds	r7, #48	; 0x30
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40005400 	.word	0x40005400
 800240c:	40023800 	.word	0x40023800
 8002410:	40020400 	.word	0x40020400
 8002414:	40005c00 	.word	0x40005c00
 8002418:	40021c00 	.word	0x40021c00

0800241c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a15      	ldr	r2, [pc, #84]	; (8002480 <HAL_I2C_MspDeInit+0x64>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d110      	bne.n	8002450 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_I2C_MspDeInit+0x68>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	4a14      	ldr	r2, [pc, #80]	; (8002484 <HAL_I2C_MspDeInit+0x68>)
 8002434:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002438:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 800243a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800243e:	4812      	ldr	r0, [pc, #72]	; (8002488 <HAL_I2C_MspDeInit+0x6c>)
 8002440:	f002 fab2 	bl	80049a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002448:	480f      	ldr	r0, [pc, #60]	; (8002488 <HAL_I2C_MspDeInit+0x6c>)
 800244a:	f002 faad 	bl	80049a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800244e:	e013      	b.n	8002478 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <HAL_I2C_MspDeInit+0x70>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d10e      	bne.n	8002478 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_I2C_MspDeInit+0x68>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4a09      	ldr	r2, [pc, #36]	; (8002484 <HAL_I2C_MspDeInit+0x68>)
 8002460:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002464:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002466:	2180      	movs	r1, #128	; 0x80
 8002468:	4809      	ldr	r0, [pc, #36]	; (8002490 <HAL_I2C_MspDeInit+0x74>)
 800246a:	f002 fa9d 	bl	80049a8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800246e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002472:	4807      	ldr	r0, [pc, #28]	; (8002490 <HAL_I2C_MspDeInit+0x74>)
 8002474:	f002 fa98 	bl	80049a8 <HAL_GPIO_DeInit>
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40005400 	.word	0x40005400
 8002484:	40023800 	.word	0x40023800
 8002488:	40020400 	.word	0x40020400
 800248c:	40005c00 	.word	0x40005c00
 8002490:	40021c00 	.word	0x40021c00

08002494 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08e      	sub	sp, #56	; 0x38
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a55      	ldr	r2, [pc, #340]	; (8002608 <HAL_LTDC_MspInit+0x174>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	f040 80a3 	bne.w	80025fe <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80024b8:	4b54      	ldr	r3, [pc, #336]	; (800260c <HAL_LTDC_MspInit+0x178>)
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	4a53      	ldr	r2, [pc, #332]	; (800260c <HAL_LTDC_MspInit+0x178>)
 80024be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024c2:	6453      	str	r3, [r2, #68]	; 0x44
 80024c4:	4b51      	ldr	r3, [pc, #324]	; (800260c <HAL_LTDC_MspInit+0x178>)
 80024c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024cc:	623b      	str	r3, [r7, #32]
 80024ce:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024d0:	4b4e      	ldr	r3, [pc, #312]	; (800260c <HAL_LTDC_MspInit+0x178>)
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	4a4d      	ldr	r2, [pc, #308]	; (800260c <HAL_LTDC_MspInit+0x178>)
 80024d6:	f043 0310 	orr.w	r3, r3, #16
 80024da:	6313      	str	r3, [r2, #48]	; 0x30
 80024dc:	4b4b      	ldr	r3, [pc, #300]	; (800260c <HAL_LTDC_MspInit+0x178>)
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80024e8:	4b48      	ldr	r3, [pc, #288]	; (800260c <HAL_LTDC_MspInit+0x178>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	4a47      	ldr	r2, [pc, #284]	; (800260c <HAL_LTDC_MspInit+0x178>)
 80024ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024f2:	6313      	str	r3, [r2, #48]	; 0x30
 80024f4:	4b45      	ldr	r3, [pc, #276]	; (800260c <HAL_LTDC_MspInit+0x178>)
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002500:	4b42      	ldr	r3, [pc, #264]	; (800260c <HAL_LTDC_MspInit+0x178>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	4a41      	ldr	r2, [pc, #260]	; (800260c <HAL_LTDC_MspInit+0x178>)
 8002506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800250a:	6313      	str	r3, [r2, #48]	; 0x30
 800250c:	4b3f      	ldr	r3, [pc, #252]	; (800260c <HAL_LTDC_MspInit+0x178>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002518:	4b3c      	ldr	r3, [pc, #240]	; (800260c <HAL_LTDC_MspInit+0x178>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	4a3b      	ldr	r2, [pc, #236]	; (800260c <HAL_LTDC_MspInit+0x178>)
 800251e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002522:	6313      	str	r3, [r2, #48]	; 0x30
 8002524:	4b39      	ldr	r3, [pc, #228]	; (800260c <HAL_LTDC_MspInit+0x178>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002530:	4b36      	ldr	r3, [pc, #216]	; (800260c <HAL_LTDC_MspInit+0x178>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	4a35      	ldr	r2, [pc, #212]	; (800260c <HAL_LTDC_MspInit+0x178>)
 8002536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253a:	6313      	str	r3, [r2, #48]	; 0x30
 800253c:	4b33      	ldr	r3, [pc, #204]	; (800260c <HAL_LTDC_MspInit+0x178>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002548:	2310      	movs	r3, #16
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254c:	2302      	movs	r3, #2
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002554:	2300      	movs	r3, #0
 8002556:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002558:	230e      	movs	r3, #14
 800255a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800255c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002560:	4619      	mov	r1, r3
 8002562:	482b      	ldr	r0, [pc, #172]	; (8002610 <HAL_LTDC_MspInit+0x17c>)
 8002564:	f002 f876 	bl	8004654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002568:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002576:	2300      	movs	r3, #0
 8002578:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800257a:	230e      	movs	r3, #14
 800257c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800257e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002582:	4619      	mov	r1, r3
 8002584:	4823      	ldr	r0, [pc, #140]	; (8002614 <HAL_LTDC_MspInit+0x180>)
 8002586:	f002 f865 	bl	8004654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800258a:	23f7      	movs	r3, #247	; 0xf7
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002596:	2300      	movs	r3, #0
 8002598:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800259a:	230e      	movs	r3, #14
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800259e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a2:	4619      	mov	r1, r3
 80025a4:	481c      	ldr	r0, [pc, #112]	; (8002618 <HAL_LTDC_MspInit+0x184>)
 80025a6:	f002 f855 	bl	8004654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80025aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b8:	2300      	movs	r3, #0
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80025bc:	2309      	movs	r3, #9
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80025c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c4:	4619      	mov	r1, r3
 80025c6:	4815      	ldr	r0, [pc, #84]	; (800261c <HAL_LTDC_MspInit+0x188>)
 80025c8:	f002 f844 	bl	8004654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80025cc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025de:	230e      	movs	r3, #14
 80025e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80025e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e6:	4619      	mov	r1, r3
 80025e8:	480d      	ldr	r0, [pc, #52]	; (8002620 <HAL_LTDC_MspInit+0x18c>)
 80025ea:	f002 f833 	bl	8004654 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80025ee:	2200      	movs	r2, #0
 80025f0:	2100      	movs	r1, #0
 80025f2:	2058      	movs	r0, #88	; 0x58
 80025f4:	f001 fa00 	bl	80039f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80025f8:	2058      	movs	r0, #88	; 0x58
 80025fa:	f001 fa19 	bl	8003a30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80025fe:	bf00      	nop
 8002600:	3738      	adds	r7, #56	; 0x38
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40016800 	.word	0x40016800
 800260c:	40023800 	.word	0x40023800
 8002610:	40021000 	.word	0x40021000
 8002614:	40022400 	.word	0x40022400
 8002618:	40022800 	.word	0x40022800
 800261c:	40021800 	.word	0x40021800
 8002620:	40022000 	.word	0x40022000

08002624 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08c      	sub	sp, #48	; 0x30
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a3b      	ldr	r2, [pc, #236]	; (8002730 <HAL_QSPI_MspInit+0x10c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d170      	bne.n	8002728 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002646:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <HAL_QSPI_MspInit+0x110>)
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	4a3a      	ldr	r2, [pc, #232]	; (8002734 <HAL_QSPI_MspInit+0x110>)
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	6393      	str	r3, [r2, #56]	; 0x38
 8002652:	4b38      	ldr	r3, [pc, #224]	; (8002734 <HAL_QSPI_MspInit+0x110>)
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	61bb      	str	r3, [r7, #24]
 800265c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800265e:	4b35      	ldr	r3, [pc, #212]	; (8002734 <HAL_QSPI_MspInit+0x110>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a34      	ldr	r2, [pc, #208]	; (8002734 <HAL_QSPI_MspInit+0x110>)
 8002664:	f043 0310 	orr.w	r3, r3, #16
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	4b32      	ldr	r3, [pc, #200]	; (8002734 <HAL_QSPI_MspInit+0x110>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002676:	4b2f      	ldr	r3, [pc, #188]	; (8002734 <HAL_QSPI_MspInit+0x110>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a2e      	ldr	r2, [pc, #184]	; (8002734 <HAL_QSPI_MspInit+0x110>)
 800267c:	f043 0302 	orr.w	r3, r3, #2
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b2c      	ldr	r3, [pc, #176]	; (8002734 <HAL_QSPI_MspInit+0x110>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800268e:	4b29      	ldr	r3, [pc, #164]	; (8002734 <HAL_QSPI_MspInit+0x110>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a28      	ldr	r2, [pc, #160]	; (8002734 <HAL_QSPI_MspInit+0x110>)
 8002694:	f043 0308 	orr.w	r3, r3, #8
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b26      	ldr	r3, [pc, #152]	; (8002734 <HAL_QSPI_MspInit+0x110>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80026a6:	2304      	movs	r3, #4
 80026a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b2:	2303      	movs	r3, #3
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80026b6:	2309      	movs	r3, #9
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80026ba:	f107 031c 	add.w	r3, r7, #28
 80026be:	4619      	mov	r1, r3
 80026c0:	481d      	ldr	r0, [pc, #116]	; (8002738 <HAL_QSPI_MspInit+0x114>)
 80026c2:	f001 ffc7 	bl	8004654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80026c6:	2340      	movs	r3, #64	; 0x40
 80026c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d2:	2303      	movs	r3, #3
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80026d6:	230a      	movs	r3, #10
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80026da:	f107 031c 	add.w	r3, r7, #28
 80026de:	4619      	mov	r1, r3
 80026e0:	4816      	ldr	r0, [pc, #88]	; (800273c <HAL_QSPI_MspInit+0x118>)
 80026e2:	f001 ffb7 	bl	8004654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026e6:	2304      	movs	r3, #4
 80026e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f2:	2303      	movs	r3, #3
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80026f6:	2309      	movs	r3, #9
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fa:	f107 031c 	add.w	r3, r7, #28
 80026fe:	4619      	mov	r1, r3
 8002700:	480e      	ldr	r0, [pc, #56]	; (800273c <HAL_QSPI_MspInit+0x118>)
 8002702:	f001 ffa7 	bl	8004654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002706:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800270a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002714:	2303      	movs	r3, #3
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002718:	2309      	movs	r3, #9
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800271c:	f107 031c 	add.w	r3, r7, #28
 8002720:	4619      	mov	r1, r3
 8002722:	4807      	ldr	r0, [pc, #28]	; (8002740 <HAL_QSPI_MspInit+0x11c>)
 8002724:	f001 ff96 	bl	8004654 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002728:	bf00      	nop
 800272a:	3730      	adds	r7, #48	; 0x30
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	a0001000 	.word	0xa0001000
 8002734:	40023800 	.word	0x40023800
 8002738:	40021000 	.word	0x40021000
 800273c:	40020400 	.word	0x40020400
 8002740:	40020c00 	.word	0x40020c00

08002744 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a07      	ldr	r2, [pc, #28]	; (8002770 <HAL_RTC_MspInit+0x2c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d105      	bne.n	8002762 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002756:	4b07      	ldr	r3, [pc, #28]	; (8002774 <HAL_RTC_MspInit+0x30>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	4a06      	ldr	r2, [pc, #24]	; (8002774 <HAL_RTC_MspInit+0x30>)
 800275c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002760:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40002800 	.word	0x40002800
 8002774:	40023800 	.word	0x40023800

08002778 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a25      	ldr	r2, [pc, #148]	; (800282c <HAL_SD_MspInit+0xb4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d144      	bne.n	8002824 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800279a:	4b25      	ldr	r3, [pc, #148]	; (8002830 <HAL_SD_MspInit+0xb8>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4a24      	ldr	r2, [pc, #144]	; (8002830 <HAL_SD_MspInit+0xb8>)
 80027a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027a4:	6453      	str	r3, [r2, #68]	; 0x44
 80027a6:	4b22      	ldr	r3, [pc, #136]	; (8002830 <HAL_SD_MspInit+0xb8>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b2:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <HAL_SD_MspInit+0xb8>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <HAL_SD_MspInit+0xb8>)
 80027b8:	f043 0304 	orr.w	r3, r3, #4
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <HAL_SD_MspInit+0xb8>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_SD_MspInit+0xb8>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a18      	ldr	r2, [pc, #96]	; (8002830 <HAL_SD_MspInit+0xb8>)
 80027d0:	f043 0308 	orr.w	r3, r3, #8
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4b16      	ldr	r3, [pc, #88]	; (8002830 <HAL_SD_MspInit+0xb8>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80027e2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80027e6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e8:	2302      	movs	r3, #2
 80027ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f0:	2303      	movs	r3, #3
 80027f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80027f4:	230c      	movs	r3, #12
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	4619      	mov	r1, r3
 80027fe:	480d      	ldr	r0, [pc, #52]	; (8002834 <HAL_SD_MspInit+0xbc>)
 8002800:	f001 ff28 	bl	8004654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002804:	2304      	movs	r3, #4
 8002806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002814:	230c      	movs	r3, #12
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4619      	mov	r1, r3
 800281e:	4806      	ldr	r0, [pc, #24]	; (8002838 <HAL_SD_MspInit+0xc0>)
 8002820:	f001 ff18 	bl	8004654 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002824:	bf00      	nop
 8002826:	3728      	adds	r7, #40	; 0x28
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40012c00 	.word	0x40012c00
 8002830:	40023800 	.word	0x40023800
 8002834:	40020800 	.word	0x40020800
 8002838:	40020c00 	.word	0x40020c00

0800283c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	; 0x28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800285c:	d127      	bne.n	80028ae <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800285e:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	4a15      	ldr	r2, [pc, #84]	; (80028b8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	6413      	str	r3, [r2, #64]	; 0x40
 800286a:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <HAL_SPDIFRX_MspInit+0x7c>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a0f      	ldr	r2, [pc, #60]	; (80028b8 <HAL_SPDIFRX_MspInit+0x7c>)
 800287c:	f043 0308 	orr.w	r3, r3, #8
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800289e:	2308      	movs	r3, #8
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4619      	mov	r1, r3
 80028a8:	4804      	ldr	r0, [pc, #16]	; (80028bc <HAL_SPDIFRX_MspInit+0x80>)
 80028aa:	f001 fed3 	bl	8004654 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80028ae:	bf00      	nop
 80028b0:	3728      	adds	r7, #40	; 0x28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020c00 	.word	0x40020c00

080028c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a25      	ldr	r2, [pc, #148]	; (8002974 <HAL_SPI_MspInit+0xb4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d144      	bne.n	800296c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028e2:	4b25      	ldr	r3, [pc, #148]	; (8002978 <HAL_SPI_MspInit+0xb8>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	4a24      	ldr	r2, [pc, #144]	; (8002978 <HAL_SPI_MspInit+0xb8>)
 80028e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ec:	6413      	str	r3, [r2, #64]	; 0x40
 80028ee:	4b22      	ldr	r3, [pc, #136]	; (8002978 <HAL_SPI_MspInit+0xb8>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80028fa:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <HAL_SPI_MspInit+0xb8>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a1e      	ldr	r2, [pc, #120]	; (8002978 <HAL_SPI_MspInit+0xb8>)
 8002900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <HAL_SPI_MspInit+0xb8>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002912:	4b19      	ldr	r3, [pc, #100]	; (8002978 <HAL_SPI_MspInit+0xb8>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a18      	ldr	r2, [pc, #96]	; (8002978 <HAL_SPI_MspInit+0xb8>)
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b16      	ldr	r3, [pc, #88]	; (8002978 <HAL_SPI_MspInit+0xb8>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800292a:	2302      	movs	r3, #2
 800292c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002936:	2300      	movs	r3, #0
 8002938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800293a:	2305      	movs	r3, #5
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	4619      	mov	r1, r3
 8002944:	480d      	ldr	r0, [pc, #52]	; (800297c <HAL_SPI_MspInit+0xbc>)
 8002946:	f001 fe85 	bl	8004654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800294a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800294e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	2300      	movs	r3, #0
 800295a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800295c:	2305      	movs	r3, #5
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	4619      	mov	r1, r3
 8002966:	4806      	ldr	r0, [pc, #24]	; (8002980 <HAL_SPI_MspInit+0xc0>)
 8002968:	f001 fe74 	bl	8004654 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800296c:	bf00      	nop
 800296e:	3728      	adds	r7, #40	; 0x28
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40003800 	.word	0x40003800
 8002978:	40023800 	.word	0x40023800
 800297c:	40022000 	.word	0x40022000
 8002980:	40020400 	.word	0x40020400

08002984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	; 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a2e      	ldr	r2, [pc, #184]	; (8002a4c <HAL_TIM_Base_MspInit+0xc8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d10c      	bne.n	80029b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002996:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <HAL_TIM_Base_MspInit+0xcc>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	4a2d      	ldr	r2, [pc, #180]	; (8002a50 <HAL_TIM_Base_MspInit+0xcc>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6453      	str	r3, [r2, #68]	; 0x44
 80029a2:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <HAL_TIM_Base_MspInit+0xcc>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	61fb      	str	r3, [r7, #28]
 80029ac:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80029ae:	e046      	b.n	8002a3e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b8:	d10c      	bne.n	80029d4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029ba:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <HAL_TIM_Base_MspInit+0xcc>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <HAL_TIM_Base_MspInit+0xcc>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6413      	str	r3, [r2, #64]	; 0x40
 80029c6:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <HAL_TIM_Base_MspInit+0xcc>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	69bb      	ldr	r3, [r7, #24]
}
 80029d2:	e034      	b.n	8002a3e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <HAL_TIM_Base_MspInit+0xd0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d10c      	bne.n	80029f8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029de:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <HAL_TIM_Base_MspInit+0xcc>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a1b      	ldr	r2, [pc, #108]	; (8002a50 <HAL_TIM_Base_MspInit+0xcc>)
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ea:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_TIM_Base_MspInit+0xcc>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697b      	ldr	r3, [r7, #20]
}
 80029f6:	e022      	b.n	8002a3e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <HAL_TIM_Base_MspInit+0xd4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10c      	bne.n	8002a1c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a02:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <HAL_TIM_Base_MspInit+0xcc>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <HAL_TIM_Base_MspInit+0xcc>)
 8002a08:	f043 0308 	orr.w	r3, r3, #8
 8002a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <HAL_TIM_Base_MspInit+0xcc>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]
}
 8002a1a:	e010      	b.n	8002a3e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <HAL_TIM_Base_MspInit+0xd8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d10b      	bne.n	8002a3e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a26:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <HAL_TIM_Base_MspInit+0xcc>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	4a09      	ldr	r2, [pc, #36]	; (8002a50 <HAL_TIM_Base_MspInit+0xcc>)
 8002a2c:	f043 0302 	orr.w	r3, r3, #2
 8002a30:	6453      	str	r3, [r2, #68]	; 0x44
 8002a32:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <HAL_TIM_Base_MspInit+0xcc>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
}
 8002a3e:	bf00      	nop
 8002a40:	3724      	adds	r7, #36	; 0x24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40000400 	.word	0x40000400
 8002a58:	40000c00 	.word	0x40000c00
 8002a5c:	40010400 	.word	0x40010400

08002a60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <HAL_TIM_PWM_MspInit+0x38>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10b      	bne.n	8002a8a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_TIM_PWM_MspInit+0x3c>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <HAL_TIM_PWM_MspInit+0x3c>)
 8002a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <HAL_TIM_PWM_MspInit+0x3c>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40001800 	.word	0x40001800
 8002a9c:	40023800 	.word	0x40023800

08002aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08c      	sub	sp, #48	; 0x30
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a56      	ldr	r2, [pc, #344]	; (8002c18 <HAL_TIM_MspPostInit+0x178>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d11d      	bne.n	8002afe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac2:	4b56      	ldr	r3, [pc, #344]	; (8002c1c <HAL_TIM_MspPostInit+0x17c>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a55      	ldr	r2, [pc, #340]	; (8002c1c <HAL_TIM_MspPostInit+0x17c>)
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_TIM_MspPostInit+0x17c>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002aec:	2301      	movs	r3, #1
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002af0:	f107 031c 	add.w	r3, r7, #28
 8002af4:	4619      	mov	r1, r3
 8002af6:	484a      	ldr	r0, [pc, #296]	; (8002c20 <HAL_TIM_MspPostInit+0x180>)
 8002af8:	f001 fdac 	bl	8004654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002afc:	e087      	b.n	8002c0e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b06:	d11d      	bne.n	8002b44 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b08:	4b44      	ldr	r3, [pc, #272]	; (8002c1c <HAL_TIM_MspPostInit+0x17c>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	4a43      	ldr	r2, [pc, #268]	; (8002c1c <HAL_TIM_MspPostInit+0x17c>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6313      	str	r3, [r2, #48]	; 0x30
 8002b14:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <HAL_TIM_MspPostInit+0x17c>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002b20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b26:	2302      	movs	r3, #2
 8002b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b32:	2301      	movs	r3, #1
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002b36:	f107 031c 	add.w	r3, r7, #28
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4838      	ldr	r0, [pc, #224]	; (8002c20 <HAL_TIM_MspPostInit+0x180>)
 8002b3e:	f001 fd89 	bl	8004654 <HAL_GPIO_Init>
}
 8002b42:	e064      	b.n	8002c0e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a36      	ldr	r2, [pc, #216]	; (8002c24 <HAL_TIM_MspPostInit+0x184>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d11c      	bne.n	8002b88 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4e:	4b33      	ldr	r3, [pc, #204]	; (8002c1c <HAL_TIM_MspPostInit+0x17c>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	4a32      	ldr	r2, [pc, #200]	; (8002c1c <HAL_TIM_MspPostInit+0x17c>)
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5a:	4b30      	ldr	r3, [pc, #192]	; (8002c1c <HAL_TIM_MspPostInit+0x17c>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002b66:	2310      	movs	r3, #16
 8002b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b72:	2300      	movs	r3, #0
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b76:	2302      	movs	r3, #2
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002b7a:	f107 031c 	add.w	r3, r7, #28
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4829      	ldr	r0, [pc, #164]	; (8002c28 <HAL_TIM_MspPostInit+0x188>)
 8002b82:	f001 fd67 	bl	8004654 <HAL_GPIO_Init>
}
 8002b86:	e042      	b.n	8002c0e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a27      	ldr	r2, [pc, #156]	; (8002c2c <HAL_TIM_MspPostInit+0x18c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d11c      	bne.n	8002bcc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b92:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <HAL_TIM_MspPostInit+0x17c>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a21      	ldr	r2, [pc, #132]	; (8002c1c <HAL_TIM_MspPostInit+0x17c>)
 8002b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b1f      	ldr	r3, [pc, #124]	; (8002c1c <HAL_TIM_MspPostInit+0x17c>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002baa:	2301      	movs	r3, #1
 8002bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002bbe:	f107 031c 	add.w	r3, r7, #28
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	481a      	ldr	r0, [pc, #104]	; (8002c30 <HAL_TIM_MspPostInit+0x190>)
 8002bc6:	f001 fd45 	bl	8004654 <HAL_GPIO_Init>
}
 8002bca:	e020      	b.n	8002c0e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a18      	ldr	r2, [pc, #96]	; (8002c34 <HAL_TIM_MspPostInit+0x194>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d11b      	bne.n	8002c0e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bd6:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <HAL_TIM_MspPostInit+0x17c>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a10      	ldr	r2, [pc, #64]	; (8002c1c <HAL_TIM_MspPostInit+0x17c>)
 8002bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <HAL_TIM_MspPostInit+0x17c>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002bee:	2340      	movs	r3, #64	; 0x40
 8002bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002bfe:	2309      	movs	r3, #9
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002c02:	f107 031c 	add.w	r3, r7, #28
 8002c06:	4619      	mov	r1, r3
 8002c08:	480b      	ldr	r0, [pc, #44]	; (8002c38 <HAL_TIM_MspPostInit+0x198>)
 8002c0a:	f001 fd23 	bl	8004654 <HAL_GPIO_Init>
}
 8002c0e:	bf00      	nop
 8002c10:	3730      	adds	r7, #48	; 0x30
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40020000 	.word	0x40020000
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40020400 	.word	0x40020400
 8002c2c:	40000c00 	.word	0x40000c00
 8002c30:	40022000 	.word	0x40022000
 8002c34:	40001800 	.word	0x40001800
 8002c38:	40021c00 	.word	0x40021c00

08002c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08c      	sub	sp, #48	; 0x30
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 031c 	add.w	r3, r7, #28
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a3c      	ldr	r2, [pc, #240]	; (8002d4c <HAL_UART_MspInit+0x110>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d145      	bne.n	8002cea <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c5e:	4b3c      	ldr	r3, [pc, #240]	; (8002d50 <HAL_UART_MspInit+0x114>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	4a3b      	ldr	r2, [pc, #236]	; (8002d50 <HAL_UART_MspInit+0x114>)
 8002c64:	f043 0310 	orr.w	r3, r3, #16
 8002c68:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6a:	4b39      	ldr	r3, [pc, #228]	; (8002d50 <HAL_UART_MspInit+0x114>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c76:	4b36      	ldr	r3, [pc, #216]	; (8002d50 <HAL_UART_MspInit+0x114>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a35      	ldr	r2, [pc, #212]	; (8002d50 <HAL_UART_MspInit+0x114>)
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b33      	ldr	r3, [pc, #204]	; (8002d50 <HAL_UART_MspInit+0x114>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8e:	4b30      	ldr	r3, [pc, #192]	; (8002d50 <HAL_UART_MspInit+0x114>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	4a2f      	ldr	r2, [pc, #188]	; (8002d50 <HAL_UART_MspInit+0x114>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9a:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <HAL_UART_MspInit+0x114>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	2302      	movs	r3, #2
 8002cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cb6:	2307      	movs	r3, #7
 8002cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002cba:	f107 031c 	add.w	r3, r7, #28
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4824      	ldr	r0, [pc, #144]	; (8002d54 <HAL_UART_MspInit+0x118>)
 8002cc2:	f001 fcc7 	bl	8004654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cd8:	2307      	movs	r3, #7
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002cdc:	f107 031c 	add.w	r3, r7, #28
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	481d      	ldr	r0, [pc, #116]	; (8002d58 <HAL_UART_MspInit+0x11c>)
 8002ce4:	f001 fcb6 	bl	8004654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002ce8:	e02c      	b.n	8002d44 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <HAL_UART_MspInit+0x120>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d127      	bne.n	8002d44 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002cf4:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <HAL_UART_MspInit+0x114>)
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf8:	4a15      	ldr	r2, [pc, #84]	; (8002d50 <HAL_UART_MspInit+0x114>)
 8002cfa:	f043 0320 	orr.w	r3, r3, #32
 8002cfe:	6453      	str	r3, [r2, #68]	; 0x44
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <HAL_UART_MspInit+0x114>)
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d0c:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <HAL_UART_MspInit+0x114>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	4a0f      	ldr	r2, [pc, #60]	; (8002d50 <HAL_UART_MspInit+0x114>)
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	6313      	str	r3, [r2, #48]	; 0x30
 8002d18:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <HAL_UART_MspInit+0x114>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002d24:	23c0      	movs	r3, #192	; 0xc0
 8002d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d30:	2303      	movs	r3, #3
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d34:	2308      	movs	r3, #8
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d38:	f107 031c 	add.w	r3, r7, #28
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4808      	ldr	r0, [pc, #32]	; (8002d60 <HAL_UART_MspInit+0x124>)
 8002d40:	f001 fc88 	bl	8004654 <HAL_GPIO_Init>
}
 8002d44:	bf00      	nop
 8002d46:	3730      	adds	r7, #48	; 0x30
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40011000 	.word	0x40011000
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40020400 	.word	0x40020400
 8002d58:	40020000 	.word	0x40020000
 8002d5c:	40011400 	.word	0x40011400
 8002d60:	40020800 	.word	0x40020800

08002d64 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002d6a:	1d3b      	adds	r3, r7, #4
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002d78:	4b3a      	ldr	r3, [pc, #232]	; (8002e64 <HAL_FMC_MspInit+0x100>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d16d      	bne.n	8002e5c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002d80:	4b38      	ldr	r3, [pc, #224]	; (8002e64 <HAL_FMC_MspInit+0x100>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002d86:	4b38      	ldr	r3, [pc, #224]	; (8002e68 <HAL_FMC_MspInit+0x104>)
 8002d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8a:	4a37      	ldr	r2, [pc, #220]	; (8002e68 <HAL_FMC_MspInit+0x104>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6393      	str	r3, [r2, #56]	; 0x38
 8002d92:	4b35      	ldr	r3, [pc, #212]	; (8002e68 <HAL_FMC_MspInit+0x104>)
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002d9e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002da2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dac:	2303      	movs	r3, #3
 8002dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002db0:	230c      	movs	r3, #12
 8002db2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	4619      	mov	r1, r3
 8002db8:	482c      	ldr	r0, [pc, #176]	; (8002e6c <HAL_FMC_MspInit+0x108>)
 8002dba:	f001 fc4b 	bl	8004654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002dbe:	f248 1333 	movw	r3, #33075	; 0x8133
 8002dc2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dd0:	230c      	movs	r3, #12
 8002dd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4825      	ldr	r0, [pc, #148]	; (8002e70 <HAL_FMC_MspInit+0x10c>)
 8002dda:	f001 fc3b 	bl	8004654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002dde:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002de2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	2302      	movs	r3, #2
 8002de6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dec:	2303      	movs	r3, #3
 8002dee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002df0:	230c      	movs	r3, #12
 8002df2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002df4:	1d3b      	adds	r3, r7, #4
 8002df6:	4619      	mov	r1, r3
 8002df8:	481e      	ldr	r0, [pc, #120]	; (8002e74 <HAL_FMC_MspInit+0x110>)
 8002dfa:	f001 fc2b 	bl	8004654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002dfe:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002e02:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e04:	2302      	movs	r3, #2
 8002e06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e10:	230c      	movs	r3, #12
 8002e12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	4619      	mov	r1, r3
 8002e18:	4817      	ldr	r0, [pc, #92]	; (8002e78 <HAL_FMC_MspInit+0x114>)
 8002e1a:	f001 fc1b 	bl	8004654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002e1e:	2328      	movs	r3, #40	; 0x28
 8002e20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e22:	2302      	movs	r3, #2
 8002e24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e2e:	230c      	movs	r3, #12
 8002e30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	4619      	mov	r1, r3
 8002e36:	4811      	ldr	r0, [pc, #68]	; (8002e7c <HAL_FMC_MspInit+0x118>)
 8002e38:	f001 fc0c 	bl	8004654 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002e3c:	2308      	movs	r3, #8
 8002e3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e4c:	230c      	movs	r3, #12
 8002e4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002e50:	1d3b      	adds	r3, r7, #4
 8002e52:	4619      	mov	r1, r3
 8002e54:	480a      	ldr	r0, [pc, #40]	; (8002e80 <HAL_FMC_MspInit+0x11c>)
 8002e56:	f001 fbfd 	bl	8004654 <HAL_GPIO_Init>
 8002e5a:	e000      	b.n	8002e5e <HAL_FMC_MspInit+0xfa>
    return;
 8002e5c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000388 	.word	0x20000388
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40021800 	.word	0x40021800
 8002e74:	40020c00 	.word	0x40020c00
 8002e78:	40021400 	.word	0x40021400
 8002e7c:	40021c00 	.word	0x40021c00
 8002e80:	40020800 	.word	0x40020800

08002e84 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002e8c:	f7ff ff6a 	bl	8002d64 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a2b      	ldr	r2, [pc, #172]	; (8002f54 <HAL_SAI_MspInit+0xbc>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d124      	bne.n	8002ef4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002eaa:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <HAL_SAI_MspInit+0xc0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10b      	bne.n	8002eca <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002eb2:	4b2a      	ldr	r3, [pc, #168]	; (8002f5c <HAL_SAI_MspInit+0xc4>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	4a29      	ldr	r2, [pc, #164]	; (8002f5c <HAL_SAI_MspInit+0xc4>)
 8002eb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ebe:	4b27      	ldr	r3, [pc, #156]	; (8002f5c <HAL_SAI_MspInit+0xc4>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002eca:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <HAL_SAI_MspInit+0xc0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	4a21      	ldr	r2, [pc, #132]	; (8002f58 <HAL_SAI_MspInit+0xc0>)
 8002ed2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002ed4:	23f0      	movs	r3, #240	; 0xf0
 8002ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002ee4:	230a      	movs	r3, #10
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	4619      	mov	r1, r3
 8002eee:	481c      	ldr	r0, [pc, #112]	; (8002f60 <HAL_SAI_MspInit+0xc8>)
 8002ef0:	f001 fbb0 	bl	8004654 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1a      	ldr	r2, [pc, #104]	; (8002f64 <HAL_SAI_MspInit+0xcc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d125      	bne.n	8002f4a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002efe:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <HAL_SAI_MspInit+0xc0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10b      	bne.n	8002f1e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002f06:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <HAL_SAI_MspInit+0xc4>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	4a14      	ldr	r2, [pc, #80]	; (8002f5c <HAL_SAI_MspInit+0xc4>)
 8002f0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f10:	6453      	str	r3, [r2, #68]	; 0x44
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_SAI_MspInit+0xc4>)
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <HAL_SAI_MspInit+0xc0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <HAL_SAI_MspInit+0xc0>)
 8002f26:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f36:	2300      	movs	r3, #0
 8002f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002f3a:	230a      	movs	r3, #10
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002f3e:	f107 0314 	add.w	r3, r7, #20
 8002f42:	4619      	mov	r1, r3
 8002f44:	4808      	ldr	r0, [pc, #32]	; (8002f68 <HAL_SAI_MspInit+0xd0>)
 8002f46:	f001 fb85 	bl	8004654 <HAL_GPIO_Init>

    }
}
 8002f4a:	bf00      	nop
 8002f4c:	3728      	adds	r7, #40	; 0x28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40015c04 	.word	0x40015c04
 8002f58:	2000038c 	.word	0x2000038c
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40022000 	.word	0x40022000
 8002f64:	40015c24 	.word	0x40015c24
 8002f68:	40021800 	.word	0x40021800

08002f6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08c      	sub	sp, #48	; 0x30
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	2036      	movs	r0, #54	; 0x36
 8002f82:	f000 fd39 	bl	80039f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f86:	2036      	movs	r0, #54	; 0x36
 8002f88:	f000 fd52 	bl	8003a30 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f8c:	4b1f      	ldr	r3, [pc, #124]	; (800300c <HAL_InitTick+0xa0>)
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	4a1e      	ldr	r2, [pc, #120]	; (800300c <HAL_InitTick+0xa0>)
 8002f92:	f043 0310 	orr.w	r3, r3, #16
 8002f96:	6413      	str	r3, [r2, #64]	; 0x40
 8002f98:	4b1c      	ldr	r3, [pc, #112]	; (800300c <HAL_InitTick+0xa0>)
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fa4:	f107 0210 	add.w	r2, r7, #16
 8002fa8:	f107 0314 	add.w	r3, r7, #20
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f003 fd16 	bl	80069e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002fb4:	f003 fcec 	bl	8006990 <HAL_RCC_GetPCLK1Freq>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	4a13      	ldr	r2, [pc, #76]	; (8003010 <HAL_InitTick+0xa4>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	0c9b      	lsrs	r3, r3, #18
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <HAL_InitTick+0xa8>)
 8002fce:	4a12      	ldr	r2, [pc, #72]	; (8003018 <HAL_InitTick+0xac>)
 8002fd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <HAL_InitTick+0xa8>)
 8002fd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fd8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002fda:	4a0e      	ldr	r2, [pc, #56]	; (8003014 <HAL_InitTick+0xa8>)
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <HAL_InitTick+0xa8>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_InitTick+0xa8>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002fec:	4809      	ldr	r0, [pc, #36]	; (8003014 <HAL_InitTick+0xa8>)
 8002fee:	f006 f98f 	bl	8009310 <HAL_TIM_Base_Init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d104      	bne.n	8003002 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002ff8:	4806      	ldr	r0, [pc, #24]	; (8003014 <HAL_InitTick+0xa8>)
 8002ffa:	f006 f9b5 	bl	8009368 <HAL_TIM_Base_Start_IT>
 8002ffe:	4603      	mov	r3, r0
 8003000:	e000      	b.n	8003004 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
}
 8003004:	4618      	mov	r0, r3
 8003006:	3730      	adds	r7, #48	; 0x30
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40023800 	.word	0x40023800
 8003010:	431bde83 	.word	0x431bde83
 8003014:	2000be2c 	.word	0x2000be2c
 8003018:	40001000 	.word	0x40001000

0800301c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800302e:	e7fe      	b.n	800302e <HardFault_Handler+0x4>

08003030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003034:	e7fe      	b.n	8003034 <MemManage_Handler+0x4>

08003036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800303a:	e7fe      	b.n	800303a <BusFault_Handler+0x4>

0800303c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003040:	e7fe      	b.n	8003040 <UsageFault_Handler+0x4>

08003042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003042:	b480      	push	{r7}
 8003044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003054:	4802      	ldr	r0, [pc, #8]	; (8003060 <TIM6_DAC_IRQHandler+0x10>)
 8003056:	f006 f9dc 	bl	8009412 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	2000be2c 	.word	0x2000be2c

08003064 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003068:	4802      	ldr	r0, [pc, #8]	; (8003074 <LTDC_IRQHandler+0x10>)
 800306a:	f002 fc59 	bl	8005920 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	2000ba4c 	.word	0x2000ba4c

08003078 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800307c:	4802      	ldr	r0, [pc, #8]	; (8003088 <DMA2D_IRQHandler+0x10>)
 800307e:	f001 f8aa 	bl	80041d6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	2000bcec 	.word	0x2000bcec

0800308c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
	return 1;
 8003090:	2301      	movs	r3, #1
}
 8003092:	4618      	mov	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <_kill>:

int _kill(int pid, int sig)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030a6:	f023 ff03 	bl	8026eb0 <__errno>
 80030aa:	4602      	mov	r2, r0
 80030ac:	2316      	movs	r3, #22
 80030ae:	6013      	str	r3, [r2, #0]
	return -1;
 80030b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <_exit>:

void _exit (int status)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030c4:	f04f 31ff 	mov.w	r1, #4294967295
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff ffe7 	bl	800309c <_kill>
	while (1) {}		/* Make sure we hang here */
 80030ce:	e7fe      	b.n	80030ce <_exit+0x12>

080030d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	e00a      	b.n	80030f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030e2:	f3af 8000 	nop.w
 80030e6:	4601      	mov	r1, r0
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	60ba      	str	r2, [r7, #8]
 80030ee:	b2ca      	uxtb	r2, r1
 80030f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	3301      	adds	r3, #1
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	dbf0      	blt.n	80030e2 <_read+0x12>
	}

return len;
 8003100:	687b      	ldr	r3, [r7, #4]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e009      	b.n	8003130 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	60ba      	str	r2, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	3301      	adds	r3, #1
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	429a      	cmp	r2, r3
 8003136:	dbf1      	blt.n	800311c <_write+0x12>
	}
	return len;
 8003138:	687b      	ldr	r3, [r7, #4]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_close>:

int _close(int file)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
	return -1;
 800314a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800316a:	605a      	str	r2, [r3, #4]
	return 0;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <_isatty>:

int _isatty(int file)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
	return 1;
 8003182:	2301      	movs	r3, #1
}
 8003184:	4618      	mov	r0, r3
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
	return 0;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031b4:	4a14      	ldr	r2, [pc, #80]	; (8003208 <_sbrk+0x5c>)
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <_sbrk+0x60>)
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031c0:	4b13      	ldr	r3, [pc, #76]	; (8003210 <_sbrk+0x64>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d102      	bne.n	80031ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <_sbrk+0x64>)
 80031ca:	4a12      	ldr	r2, [pc, #72]	; (8003214 <_sbrk+0x68>)
 80031cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <_sbrk+0x64>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d207      	bcs.n	80031ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031dc:	f023 fe68 	bl	8026eb0 <__errno>
 80031e0:	4602      	mov	r2, r0
 80031e2:	230c      	movs	r3, #12
 80031e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80031e6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ea:	e009      	b.n	8003200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031ec:	4b08      	ldr	r3, [pc, #32]	; (8003210 <_sbrk+0x64>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031f2:	4b07      	ldr	r3, [pc, #28]	; (8003210 <_sbrk+0x64>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	4a05      	ldr	r2, [pc, #20]	; (8003210 <_sbrk+0x64>)
 80031fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031fe:	68fb      	ldr	r3, [r7, #12]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20050000 	.word	0x20050000
 800320c:	00000400 	.word	0x00000400
 8003210:	20000390 	.word	0x20000390
 8003214:	2000c2e0 	.word	0x2000c2e0

08003218 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <SystemInit+0x28>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	4a07      	ldr	r2, [pc, #28]	; (8003240 <SystemInit+0x28>)
 8003224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <SystemInit+0x28>)
 800322e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003232:	609a      	str	r2, [r3, #8]
#endif
}
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800327c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003248:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800324a:	e003      	b.n	8003254 <LoopCopyDataInit>

0800324c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800324c:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800324e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003250:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003252:	3104      	adds	r1, #4

08003254 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003254:	480b      	ldr	r0, [pc, #44]	; (8003284 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003256:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003258:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800325a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800325c:	d3f6      	bcc.n	800324c <CopyDataInit>
  ldr  r2, =_sbss
 800325e:	4a0b      	ldr	r2, [pc, #44]	; (800328c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003260:	e002      	b.n	8003268 <LoopFillZerobss>

08003262 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003262:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003264:	f842 3b04 	str.w	r3, [r2], #4

08003268 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003268:	4b09      	ldr	r3, [pc, #36]	; (8003290 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800326a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800326c:	d3f9      	bcc.n	8003262 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800326e:	f7ff ffd3 	bl	8003218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003272:	f023 fe35 	bl	8026ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003276:	f7fd fbab 	bl	80009d0 <main>
  bx  lr    
 800327a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800327c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003280:	080c06c0 	.word	0x080c06c0
  ldr  r0, =_sdata
 8003284:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003288:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 800328c:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 8003290:	2000c2e0 	.word	0x2000c2e0

08003294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003294:	e7fe      	b.n	8003294 <ADC_IRQHandler>

08003296 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800329a:	2003      	movs	r0, #3
 800329c:	f000 fba1 	bl	80039e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032a0:	2000      	movs	r0, #0
 80032a2:	f7ff fe63 	bl	8002f6c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80032a6:	f7fe fea1 	bl	8001fec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_IncTick+0x20>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_IncTick+0x24>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4413      	add	r3, r2
 80032c0:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <HAL_IncTick+0x24>)
 80032c2:	6013      	str	r3, [r2, #0]
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000034 	.word	0x20000034
 80032d4:	2000be6c 	.word	0x2000be6c

080032d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return uwTick;
 80032dc:	4b03      	ldr	r3, [pc, #12]	; (80032ec <HAL_GetTick+0x14>)
 80032de:	681b      	ldr	r3, [r3, #0]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	2000be6c 	.word	0x2000be6c

080032f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032f8:	f7ff ffee 	bl	80032d8 <HAL_GetTick>
 80032fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d005      	beq.n	8003316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_Delay+0x40>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003316:	bf00      	nop
 8003318:	f7ff ffde 	bl	80032d8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	429a      	cmp	r2, r3
 8003326:	d8f7      	bhi.n	8003318 <HAL_Delay+0x28>
  {
  }
}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000034 	.word	0x20000034

08003334 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e031      	b.n	80033ae <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fe fe72 	bl	800203c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 0310 	and.w	r3, r3, #16
 800336e:	2b00      	cmp	r3, #0
 8003370:	d116      	bne.n	80033a0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <HAL_ADC_Init+0x84>)
 8003378:	4013      	ands	r3, r2
 800337a:	f043 0202 	orr.w	r2, r3, #2
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f964 	bl	8003650 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f023 0303 	bic.w	r3, r3, #3
 8003396:	f043 0201 	orr.w	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
 800339e:	e001      	b.n	80033a4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	ffffeefd 	.word	0xffffeefd

080033bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x1c>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e12a      	b.n	800362e <HAL_ADC_ConfigChannel+0x272>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b09      	cmp	r3, #9
 80033e6:	d93a      	bls.n	800345e <HAL_ADC_ConfigChannel+0xa2>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033f0:	d035      	beq.n	800345e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68d9      	ldr	r1, [r3, #12]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	4613      	mov	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4413      	add	r3, r2
 8003406:	3b1e      	subs	r3, #30
 8003408:	2207      	movs	r2, #7
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43da      	mvns	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	400a      	ands	r2, r1
 8003416:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a87      	ldr	r2, [pc, #540]	; (800363c <HAL_ADC_ConfigChannel+0x280>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d10a      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68d9      	ldr	r1, [r3, #12]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	061a      	lsls	r2, r3, #24
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003436:	e035      	b.n	80034a4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68d9      	ldr	r1, [r3, #12]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	b29b      	uxth	r3, r3
 8003448:	4618      	mov	r0, r3
 800344a:	4603      	mov	r3, r0
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	4403      	add	r3, r0
 8003450:	3b1e      	subs	r3, #30
 8003452:	409a      	lsls	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800345c:	e022      	b.n	80034a4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6919      	ldr	r1, [r3, #16]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	b29b      	uxth	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	4613      	mov	r3, r2
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4413      	add	r3, r2
 8003472:	2207      	movs	r2, #7
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43da      	mvns	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	400a      	ands	r2, r1
 8003480:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6919      	ldr	r1, [r3, #16]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	b29b      	uxth	r3, r3
 8003492:	4618      	mov	r0, r3
 8003494:	4603      	mov	r3, r0
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4403      	add	r3, r0
 800349a:	409a      	lsls	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b06      	cmp	r3, #6
 80034aa:	d824      	bhi.n	80034f6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	3b05      	subs	r3, #5
 80034be:	221f      	movs	r2, #31
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43da      	mvns	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	400a      	ands	r2, r1
 80034cc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	4618      	mov	r0, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	3b05      	subs	r3, #5
 80034e8:	fa00 f203 	lsl.w	r2, r0, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	635a      	str	r2, [r3, #52]	; 0x34
 80034f4:	e04c      	b.n	8003590 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d824      	bhi.n	8003548 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	3b23      	subs	r3, #35	; 0x23
 8003510:	221f      	movs	r2, #31
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43da      	mvns	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	400a      	ands	r2, r1
 800351e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	b29b      	uxth	r3, r3
 800352c:	4618      	mov	r0, r3
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	3b23      	subs	r3, #35	; 0x23
 800353a:	fa00 f203 	lsl.w	r2, r0, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	631a      	str	r2, [r3, #48]	; 0x30
 8003546:	e023      	b.n	8003590 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	3b41      	subs	r3, #65	; 0x41
 800355a:	221f      	movs	r2, #31
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43da      	mvns	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	400a      	ands	r2, r1
 8003568:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	b29b      	uxth	r3, r3
 8003576:	4618      	mov	r0, r3
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	3b41      	subs	r3, #65	; 0x41
 8003584:	fa00 f203 	lsl.w	r2, r0, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a2a      	ldr	r2, [pc, #168]	; (8003640 <HAL_ADC_ConfigChannel+0x284>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d10a      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x1f4>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035a2:	d105      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80035a4:	4b27      	ldr	r3, [pc, #156]	; (8003644 <HAL_ADC_ConfigChannel+0x288>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4a26      	ldr	r2, [pc, #152]	; (8003644 <HAL_ADC_ConfigChannel+0x288>)
 80035aa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80035ae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a22      	ldr	r2, [pc, #136]	; (8003640 <HAL_ADC_ConfigChannel+0x284>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d109      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x212>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b12      	cmp	r3, #18
 80035c0:	d105      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80035c2:	4b20      	ldr	r3, [pc, #128]	; (8003644 <HAL_ADC_ConfigChannel+0x288>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4a1f      	ldr	r2, [pc, #124]	; (8003644 <HAL_ADC_ConfigChannel+0x288>)
 80035c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035cc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1b      	ldr	r2, [pc, #108]	; (8003640 <HAL_ADC_ConfigChannel+0x284>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d125      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x268>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a17      	ldr	r2, [pc, #92]	; (800363c <HAL_ADC_ConfigChannel+0x280>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d003      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x22e>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b11      	cmp	r3, #17
 80035e8:	d11c      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80035ea:	4b16      	ldr	r3, [pc, #88]	; (8003644 <HAL_ADC_ConfigChannel+0x288>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4a15      	ldr	r2, [pc, #84]	; (8003644 <HAL_ADC_ConfigChannel+0x288>)
 80035f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035f4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a10      	ldr	r2, [pc, #64]	; (800363c <HAL_ADC_ConfigChannel+0x280>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d111      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_ADC_ConfigChannel+0x28c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a11      	ldr	r2, [pc, #68]	; (800364c <HAL_ADC_ConfigChannel+0x290>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	0c9a      	lsrs	r2, r3, #18
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003616:	e002      	b.n	800361e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3b01      	subs	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f9      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	10000012 	.word	0x10000012
 8003640:	40012000 	.word	0x40012000
 8003644:	40012300 	.word	0x40012300
 8003648:	2000002c 	.word	0x2000002c
 800364c:	431bde83 	.word	0x431bde83

08003650 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003658:	4b78      	ldr	r3, [pc, #480]	; (800383c <ADC_Init+0x1ec>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4a77      	ldr	r2, [pc, #476]	; (800383c <ADC_Init+0x1ec>)
 800365e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003662:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003664:	4b75      	ldr	r3, [pc, #468]	; (800383c <ADC_Init+0x1ec>)
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	4973      	ldr	r1, [pc, #460]	; (800383c <ADC_Init+0x1ec>)
 800366e:	4313      	orrs	r3, r2
 8003670:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003680:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	021a      	lsls	r2, r3, #8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80036a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6899      	ldr	r1, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	4a58      	ldr	r2, [pc, #352]	; (8003840 <ADC_Init+0x1f0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d022      	beq.n	800372a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6899      	ldr	r1, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003714:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6899      	ldr	r1, [r3, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	e00f      	b.n	800374a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003738:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003748:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0202 	bic.w	r2, r2, #2
 8003758:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6899      	ldr	r1, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	005a      	lsls	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01b      	beq.n	80037b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003786:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003796:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6859      	ldr	r1, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	3b01      	subs	r3, #1
 80037a4:	035a      	lsls	r2, r3, #13
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	e007      	b.n	80037c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	3b01      	subs	r3, #1
 80037dc:	051a      	lsls	r2, r3, #20
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6899      	ldr	r1, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003802:	025a      	lsls	r2, r3, #9
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800381a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6899      	ldr	r1, [r3, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	029a      	lsls	r2, r3, #10
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	609a      	str	r2, [r3, #8]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40012300 	.word	0x40012300
 8003840:	0f000001 	.word	0x0f000001

08003844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <__NVIC_SetPriorityGrouping+0x40>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003860:	4013      	ands	r3, r2
 8003862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <__NVIC_SetPriorityGrouping+0x44>)
 800386e:	4313      	orrs	r3, r2
 8003870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003872:	4a04      	ldr	r2, [pc, #16]	; (8003884 <__NVIC_SetPriorityGrouping+0x40>)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	60d3      	str	r3, [r2, #12]
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000ed00 	.word	0xe000ed00
 8003888:	05fa0000 	.word	0x05fa0000

0800388c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	0a1b      	lsrs	r3, r3, #8
 8003896:	f003 0307 	and.w	r3, r3, #7
}
 800389a:	4618      	mov	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	db0b      	blt.n	80038d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	f003 021f 	and.w	r2, r3, #31
 80038c0:	4907      	ldr	r1, [pc, #28]	; (80038e0 <__NVIC_EnableIRQ+0x38>)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2001      	movs	r0, #1
 80038ca:	fa00 f202 	lsl.w	r2, r0, r2
 80038ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	e000e100 	.word	0xe000e100

080038e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	db10      	blt.n	8003918 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	f003 021f 	and.w	r2, r3, #31
 80038fc:	4909      	ldr	r1, [pc, #36]	; (8003924 <__NVIC_DisableIRQ+0x40>)
 80038fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	2001      	movs	r0, #1
 8003906:	fa00 f202 	lsl.w	r2, r0, r2
 800390a:	3320      	adds	r3, #32
 800390c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003910:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003914:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	e000e100 	.word	0xe000e100

08003928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	6039      	str	r1, [r7, #0]
 8003932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003938:	2b00      	cmp	r3, #0
 800393a:	db0a      	blt.n	8003952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	b2da      	uxtb	r2, r3
 8003940:	490c      	ldr	r1, [pc, #48]	; (8003974 <__NVIC_SetPriority+0x4c>)
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	0112      	lsls	r2, r2, #4
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	440b      	add	r3, r1
 800394c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003950:	e00a      	b.n	8003968 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	4908      	ldr	r1, [pc, #32]	; (8003978 <__NVIC_SetPriority+0x50>)
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	3b04      	subs	r3, #4
 8003960:	0112      	lsls	r2, r2, #4
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	440b      	add	r3, r1
 8003966:	761a      	strb	r2, [r3, #24]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	e000e100 	.word	0xe000e100
 8003978:	e000ed00 	.word	0xe000ed00

0800397c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	; 0x24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f1c3 0307 	rsb	r3, r3, #7
 8003996:	2b04      	cmp	r3, #4
 8003998:	bf28      	it	cs
 800399a:	2304      	movcs	r3, #4
 800399c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	3304      	adds	r3, #4
 80039a2:	2b06      	cmp	r3, #6
 80039a4:	d902      	bls.n	80039ac <NVIC_EncodePriority+0x30>
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	3b03      	subs	r3, #3
 80039aa:	e000      	b.n	80039ae <NVIC_EncodePriority+0x32>
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b0:	f04f 32ff 	mov.w	r2, #4294967295
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43da      	mvns	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	401a      	ands	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c4:	f04f 31ff 	mov.w	r1, #4294967295
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	fa01 f303 	lsl.w	r3, r1, r3
 80039ce:	43d9      	mvns	r1, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d4:	4313      	orrs	r3, r2
         );
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3724      	adds	r7, #36	; 0x24
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff ff2a 	bl	8003844 <__NVIC_SetPriorityGrouping>
}
 80039f0:	bf00      	nop
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a0a:	f7ff ff3f 	bl	800388c <__NVIC_GetPriorityGrouping>
 8003a0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	6978      	ldr	r0, [r7, #20]
 8003a16:	f7ff ffb1 	bl	800397c <NVIC_EncodePriority>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a20:	4611      	mov	r1, r2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff ff80 	bl	8003928 <__NVIC_SetPriority>
}
 8003a28:	bf00      	nop
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff ff32 	bl	80038a8 <__NVIC_EnableIRQ>
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff ff42 	bl	80038e4 <__NVIC_DisableIRQ>
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e054      	b.n	8003b24 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	7f5b      	ldrb	r3, [r3, #29]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d105      	bne.n	8003a90 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fe fb30 	bl	80020f0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	791b      	ldrb	r3, [r3, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a22      	ldr	r2, [pc, #136]	; (8003b2c <HAL_CRC_Init+0xc4>)
 8003aa4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0218 	bic.w	r2, r2, #24
 8003ab4:	609a      	str	r2, [r3, #8]
 8003ab6:	e00c      	b.n	8003ad2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6899      	ldr	r1, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f834 	bl	8003b30 <HAL_CRCEx_Polynomial_Set>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e028      	b.n	8003b24 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	795b      	ldrb	r3, [r3, #5]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d105      	bne.n	8003ae6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae2:	611a      	str	r2, [r3, #16]
 8003ae4:	e004      	b.n	8003af0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6912      	ldr	r2, [r2, #16]
 8003aee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	04c11db7 	.word	0x04c11db7

08003b30 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003b40:	231f      	movs	r3, #31
 8003b42:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003b44:	bf00      	nop
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1e5a      	subs	r2, r3, #1
 8003b4a:	613a      	str	r2, [r7, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d009      	beq.n	8003b64 <HAL_CRCEx_Polynomial_Set+0x34>
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b18      	cmp	r3, #24
 8003b68:	d846      	bhi.n	8003bf8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003b6a:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b70:	08003bff 	.word	0x08003bff
 8003b74:	08003bf9 	.word	0x08003bf9
 8003b78:	08003bf9 	.word	0x08003bf9
 8003b7c:	08003bf9 	.word	0x08003bf9
 8003b80:	08003bf9 	.word	0x08003bf9
 8003b84:	08003bf9 	.word	0x08003bf9
 8003b88:	08003bf9 	.word	0x08003bf9
 8003b8c:	08003bf9 	.word	0x08003bf9
 8003b90:	08003bed 	.word	0x08003bed
 8003b94:	08003bf9 	.word	0x08003bf9
 8003b98:	08003bf9 	.word	0x08003bf9
 8003b9c:	08003bf9 	.word	0x08003bf9
 8003ba0:	08003bf9 	.word	0x08003bf9
 8003ba4:	08003bf9 	.word	0x08003bf9
 8003ba8:	08003bf9 	.word	0x08003bf9
 8003bac:	08003bf9 	.word	0x08003bf9
 8003bb0:	08003be1 	.word	0x08003be1
 8003bb4:	08003bf9 	.word	0x08003bf9
 8003bb8:	08003bf9 	.word	0x08003bf9
 8003bbc:	08003bf9 	.word	0x08003bf9
 8003bc0:	08003bf9 	.word	0x08003bf9
 8003bc4:	08003bf9 	.word	0x08003bf9
 8003bc8:	08003bf9 	.word	0x08003bf9
 8003bcc:	08003bf9 	.word	0x08003bf9
 8003bd0:	08003bd5 	.word	0x08003bd5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	2b06      	cmp	r3, #6
 8003bd8:	d913      	bls.n	8003c02 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003bde:	e010      	b.n	8003c02 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b07      	cmp	r3, #7
 8003be4:	d90f      	bls.n	8003c06 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003bea:	e00c      	b.n	8003c06 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	2b0f      	cmp	r3, #15
 8003bf0:	d90b      	bls.n	8003c0a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003bf6:	e008      	b.n	8003c0a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003bfc:	e006      	b.n	8003c0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003bfe:	bf00      	nop
 8003c00:	e004      	b.n	8003c0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003c02:	bf00      	nop
 8003c04:	e002      	b.n	8003c0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003c0a:	bf00      	nop
  }
  if (status == HAL_OK)
 8003c0c:	7dfb      	ldrb	r3, [r7, #23]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10d      	bne.n	8003c2e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f023 0118 	bic.w	r1, r3, #24
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e069      	b.n	8003d22 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fe fa68 	bl	8002130 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6819      	ldr	r1, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <HAL_DCMI_Init+0xf0>)
 8003c82:	400b      	ands	r3, r1
 8003c84:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6819      	ldr	r1, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003c9a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003ca6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003cb2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003cbe:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003cca:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d112      	bne.n	8003d02 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	7f1b      	ldrb	r3, [r3, #28]
 8003ce0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	7f5b      	ldrb	r3, [r3, #29]
 8003ce6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003ce8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	7f9b      	ldrb	r3, [r3, #30]
 8003cee:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003cf0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	7fdb      	ldrb	r3, [r3, #31]
 8003cf8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003cfe:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003d00:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 021e 	orr.w	r2, r2, #30
 8003d10:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	ffe0f007 	.word	0xffe0f007

08003d30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_DMA_Start_IT+0x26>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e048      	b.n	8003de8 <HAL_DMA_Start_IT+0xb8>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d137      	bne.n	8003dda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f842 	bl	8003e08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d88:	223f      	movs	r2, #63	; 0x3f
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0216 	orr.w	r2, r2, #22
 8003d9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695a      	ldr	r2, [r3, #20]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0208 	orr.w	r2, r2, #8
 8003dc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	e005      	b.n	8003de6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003de2:	2302      	movs	r3, #2
 8003de4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d108      	bne.n	8003e48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e46:	e007      	b.n	8003e58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	60da      	str	r2, [r3, #12]
}
 8003e58:	bf00      	nop
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e039      	b.n	8003eea <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fe fa0e 	bl	80022ac <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb4:	f023 0107 	bic.w	r1, r3, #7
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <HAL_DMA2D_Init+0x90>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68d1      	ldr	r1, [r2, #12]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	ffffc000 	.word	0xffffc000

08003ef8 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e05f      	b.n	8003fca <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8003f0a:	4b32      	ldr	r3, [pc, #200]	; (8003fd4 <HAL_DMA2D_DeInit+0xdc>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d02e      	beq.n	8003f74 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d107      	bne.n	8003f34 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f8c1 	bl	80040ac <HAL_DMA2D_Abort>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d021      	beq.n	8003f74 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e04a      	b.n	8003fca <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	d108      	bne.n	8003f54 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8003f42:	2100      	movs	r1, #0
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f8f7 	bl	8004138 <HAL_DMA2D_CLUTLoading_Abort>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d011      	beq.n	8003f74 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e03a      	b.n	8003fca <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d108      	bne.n	8003f74 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8003f62:	2101      	movs	r1, #1
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f8e7 	bl	8004138 <HAL_DMA2D_CLUTLoading_Abort>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e02a      	b.n	8003fca <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	223f      	movs	r2, #63	; 0x3f
 8003f82:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2200      	movs	r2, #0
 8003f92:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7fe f9a3 	bl	80022f8 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023800 	.word	0x40023800

08003fd8 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_DMA2D_Start_IT+0x1c>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e020      	b.n	8004036 <HAL_DMA2D_Start_IT+0x5e>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 fa84 	bl	800451c <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8004022:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b086      	sub	sp, #24
 8004042:	af02      	add	r7, sp, #8
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_DMA2D_BlendingStart_IT+0x1c>
 8004056:	2302      	movs	r3, #2
 8004058:	e024      	b.n	80040a4 <HAL_DMA2D_BlendingStart_IT+0x66>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2202      	movs	r2, #2
 8004066:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 fa4d 	bl	800451c <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8004090:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 0205 	bic.w	r2, r3, #5
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0204 	orr.w	r2, r2, #4
 80040c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040c8:	f7ff f906 	bl	80032d8 <HAL_GetTick>
 80040cc:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80040ce:	e017      	b.n	8004100 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80040d0:	f7ff f902 	bl	80032d8 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040de:	d90f      	bls.n	8004100 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e4:	f043 0220 	orr.w	r2, r3, #32
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2203      	movs	r2, #3
 80040f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e017      	b.n	8004130 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e0      	bne.n	80040d0 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 800411c:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3324      	adds	r3, #36	; 0x24
 8004148:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0204 	orr.w	r2, r2, #4
 8004158:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d103      	bne.n	8004168 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	331c      	adds	r3, #28
 8004166:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8004168:	f7ff f8b6 	bl	80032d8 <HAL_GetTick>
 800416c:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800416e:	e017      	b.n	80041a0 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8004170:	f7ff f8b2 	bl	80032d8 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800417e:	d90f      	bls.n	80041a0 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2203      	movs	r2, #3
 8004190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e016      	b.n	80041ce <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e1      	bne.n	8004170 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 80041ba:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d026      	beq.n	8004246 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d021      	beq.n	8004246 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004210:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004216:	f043 0201 	orr.w	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2201      	movs	r2, #1
 8004224:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2204      	movs	r2, #4
 800422a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d026      	beq.n	800429e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d021      	beq.n	800429e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004268:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2220      	movs	r2, #32
 8004270:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004276:	f043 0202 	orr.w	r2, r3, #2
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2204      	movs	r2, #4
 8004282:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d026      	beq.n	80042f6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d021      	beq.n	80042f6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2208      	movs	r2, #8
 80042c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ce:	f043 0204 	orr.w	r2, r3, #4
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2204      	movs	r2, #4
 80042da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d013      	beq.n	8004328 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00e      	beq.n	8004328 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004318:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2204      	movs	r2, #4
 8004320:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f853 	bl	80043ce <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d024      	beq.n	800437c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01f      	beq.n	800437c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800434a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2202      	movs	r2, #2
 8004352:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01f      	beq.n	80043c6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01a      	beq.n	80043c6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800439e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2210      	movs	r2, #16
 80043a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f80e 	bl	80043e2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80043c6:	bf00      	nop
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
	...

080043f8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_DMA2D_ConfigLayer+0x20>
 8004414:	2302      	movs	r3, #2
 8004416:	e079      	b.n	800450c <HAL_DMA2D_ConfigLayer+0x114>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	3318      	adds	r3, #24
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	4413      	add	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	041b      	lsls	r3, r3, #16
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004442:	4b35      	ldr	r3, [pc, #212]	; (8004518 <HAL_DMA2D_ConfigLayer+0x120>)
 8004444:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b0a      	cmp	r3, #10
 800444c:	d003      	beq.n	8004456 <HAL_DMA2D_ConfigLayer+0x5e>
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b09      	cmp	r3, #9
 8004454:	d107      	bne.n	8004466 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	e005      	b.n	8004472 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	061b      	lsls	r3, r3, #24
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d120      	bne.n	80044ba <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	43db      	mvns	r3, r3
 8004482:	ea02 0103 	and.w	r1, r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	430a      	orrs	r2, r1
 800448e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b0a      	cmp	r3, #10
 80044a0:	d003      	beq.n	80044aa <HAL_DMA2D_ConfigLayer+0xb2>
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b09      	cmp	r3, #9
 80044a8:	d127      	bne.n	80044fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044b6:	629a      	str	r2, [r3, #40]	; 0x28
 80044b8:	e01f      	b.n	80044fa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	43db      	mvns	r3, r3
 80044c4:	ea02 0103 	and.w	r1, r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	6812      	ldr	r2, [r2, #0]
 80044da:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b0a      	cmp	r3, #10
 80044e2:	d003      	beq.n	80044ec <HAL_DMA2D_ConfigLayer+0xf4>
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b09      	cmp	r3, #9
 80044ea:	d106      	bne.n	80044fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044f8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	ff03000f 	.word	0xff03000f

0800451c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800451c:	b480      	push	{r7}
 800451e:	b08b      	sub	sp, #44	; 0x2c
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004530:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	041a      	lsls	r2, r3, #16
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	431a      	orrs	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004554:	d174      	bne.n	8004640 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800455c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004564:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800456c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d108      	bne.n	800458e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	431a      	orrs	r2, r3
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	4313      	orrs	r3, r2
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
 800458c:	e053      	b.n	8004636 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d106      	bne.n	80045a4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	4313      	orrs	r3, r2
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
 80045a2:	e048      	b.n	8004636 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d111      	bne.n	80045d0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	0cdb      	lsrs	r3, r3, #19
 80045b0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	0a9b      	lsrs	r3, r3, #10
 80045b6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	08db      	lsrs	r3, r3, #3
 80045bc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	02db      	lsls	r3, r3, #11
 80045c6:	4313      	orrs	r3, r2
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
 80045ce:	e032      	b.n	8004636 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d117      	bne.n	8004608 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	0fdb      	lsrs	r3, r3, #31
 80045dc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	0cdb      	lsrs	r3, r3, #19
 80045e2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	0adb      	lsrs	r3, r3, #11
 80045e8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	08db      	lsrs	r3, r3, #3
 80045ee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	029b      	lsls	r3, r3, #10
 80045f8:	431a      	orrs	r2, r3
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	03db      	lsls	r3, r3, #15
 80045fe:	4313      	orrs	r3, r2
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
 8004606:	e016      	b.n	8004636 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	0f1b      	lsrs	r3, r3, #28
 800460c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	0d1b      	lsrs	r3, r3, #20
 8004612:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	0b1b      	lsrs	r3, r3, #12
 8004618:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	091b      	lsrs	r3, r3, #4
 800461e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	011a      	lsls	r2, r3, #4
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	431a      	orrs	r2, r3
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	031b      	lsls	r3, r3, #12
 800462e:	4313      	orrs	r3, r2
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800463e:	e003      	b.n	8004648 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	60da      	str	r2, [r3, #12]
}
 8004648:	bf00      	nop
 800464a:	372c      	adds	r7, #44	; 0x2c
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004654:	b480      	push	{r7}
 8004656:	b089      	sub	sp, #36	; 0x24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800465e:	2300      	movs	r3, #0
 8004660:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004666:	2300      	movs	r3, #0
 8004668:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800466e:	2300      	movs	r3, #0
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	e175      	b.n	8004960 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004674:	2201      	movs	r2, #1
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4013      	ands	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	429a      	cmp	r2, r3
 800468e:	f040 8164 	bne.w	800495a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d00b      	beq.n	80046b2 <HAL_GPIO_Init+0x5e>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d007      	beq.n	80046b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046a6:	2b11      	cmp	r3, #17
 80046a8:	d003      	beq.n	80046b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b12      	cmp	r3, #18
 80046b0:	d130      	bne.n	8004714 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	2203      	movs	r2, #3
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4013      	ands	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4313      	orrs	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046e8:	2201      	movs	r2, #1
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	43db      	mvns	r3, r3
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4013      	ands	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 0201 	and.w	r2, r3, #1
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4313      	orrs	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	2203      	movs	r2, #3
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4013      	ands	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4313      	orrs	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b02      	cmp	r3, #2
 800474a:	d003      	beq.n	8004754 <HAL_GPIO_Init+0x100>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b12      	cmp	r3, #18
 8004752:	d123      	bne.n	800479c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	08da      	lsrs	r2, r3, #3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3208      	adds	r2, #8
 800475c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	220f      	movs	r2, #15
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	43db      	mvns	r3, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4013      	ands	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	4313      	orrs	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	08da      	lsrs	r2, r3, #3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3208      	adds	r2, #8
 8004796:	69b9      	ldr	r1, [r7, #24]
 8004798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	2203      	movs	r2, #3
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	43db      	mvns	r3, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4013      	ands	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f003 0203 	and.w	r2, r3, #3
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 80be 	beq.w	800495a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047de:	4b65      	ldr	r3, [pc, #404]	; (8004974 <HAL_GPIO_Init+0x320>)
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	4a64      	ldr	r2, [pc, #400]	; (8004974 <HAL_GPIO_Init+0x320>)
 80047e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047e8:	6453      	str	r3, [r2, #68]	; 0x44
 80047ea:	4b62      	ldr	r3, [pc, #392]	; (8004974 <HAL_GPIO_Init+0x320>)
 80047ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80047f6:	4a60      	ldr	r2, [pc, #384]	; (8004978 <HAL_GPIO_Init+0x324>)
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	089b      	lsrs	r3, r3, #2
 80047fc:	3302      	adds	r3, #2
 80047fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004802:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	220f      	movs	r2, #15
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	43db      	mvns	r3, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4013      	ands	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a57      	ldr	r2, [pc, #348]	; (800497c <HAL_GPIO_Init+0x328>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d037      	beq.n	8004892 <HAL_GPIO_Init+0x23e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a56      	ldr	r2, [pc, #344]	; (8004980 <HAL_GPIO_Init+0x32c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d031      	beq.n	800488e <HAL_GPIO_Init+0x23a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a55      	ldr	r2, [pc, #340]	; (8004984 <HAL_GPIO_Init+0x330>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d02b      	beq.n	800488a <HAL_GPIO_Init+0x236>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a54      	ldr	r2, [pc, #336]	; (8004988 <HAL_GPIO_Init+0x334>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d025      	beq.n	8004886 <HAL_GPIO_Init+0x232>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a53      	ldr	r2, [pc, #332]	; (800498c <HAL_GPIO_Init+0x338>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d01f      	beq.n	8004882 <HAL_GPIO_Init+0x22e>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a52      	ldr	r2, [pc, #328]	; (8004990 <HAL_GPIO_Init+0x33c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d019      	beq.n	800487e <HAL_GPIO_Init+0x22a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a51      	ldr	r2, [pc, #324]	; (8004994 <HAL_GPIO_Init+0x340>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d013      	beq.n	800487a <HAL_GPIO_Init+0x226>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a50      	ldr	r2, [pc, #320]	; (8004998 <HAL_GPIO_Init+0x344>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00d      	beq.n	8004876 <HAL_GPIO_Init+0x222>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a4f      	ldr	r2, [pc, #316]	; (800499c <HAL_GPIO_Init+0x348>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d007      	beq.n	8004872 <HAL_GPIO_Init+0x21e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a4e      	ldr	r2, [pc, #312]	; (80049a0 <HAL_GPIO_Init+0x34c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d101      	bne.n	800486e <HAL_GPIO_Init+0x21a>
 800486a:	2309      	movs	r3, #9
 800486c:	e012      	b.n	8004894 <HAL_GPIO_Init+0x240>
 800486e:	230a      	movs	r3, #10
 8004870:	e010      	b.n	8004894 <HAL_GPIO_Init+0x240>
 8004872:	2308      	movs	r3, #8
 8004874:	e00e      	b.n	8004894 <HAL_GPIO_Init+0x240>
 8004876:	2307      	movs	r3, #7
 8004878:	e00c      	b.n	8004894 <HAL_GPIO_Init+0x240>
 800487a:	2306      	movs	r3, #6
 800487c:	e00a      	b.n	8004894 <HAL_GPIO_Init+0x240>
 800487e:	2305      	movs	r3, #5
 8004880:	e008      	b.n	8004894 <HAL_GPIO_Init+0x240>
 8004882:	2304      	movs	r3, #4
 8004884:	e006      	b.n	8004894 <HAL_GPIO_Init+0x240>
 8004886:	2303      	movs	r3, #3
 8004888:	e004      	b.n	8004894 <HAL_GPIO_Init+0x240>
 800488a:	2302      	movs	r3, #2
 800488c:	e002      	b.n	8004894 <HAL_GPIO_Init+0x240>
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <HAL_GPIO_Init+0x240>
 8004892:	2300      	movs	r3, #0
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	f002 0203 	and.w	r2, r2, #3
 800489a:	0092      	lsls	r2, r2, #2
 800489c:	4093      	lsls	r3, r2
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80048a4:	4934      	ldr	r1, [pc, #208]	; (8004978 <HAL_GPIO_Init+0x324>)
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	089b      	lsrs	r3, r3, #2
 80048aa:	3302      	adds	r3, #2
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048b2:	4b3c      	ldr	r3, [pc, #240]	; (80049a4 <HAL_GPIO_Init+0x350>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	43db      	mvns	r3, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4013      	ands	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048d6:	4a33      	ldr	r2, [pc, #204]	; (80049a4 <HAL_GPIO_Init+0x350>)
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048dc:	4b31      	ldr	r3, [pc, #196]	; (80049a4 <HAL_GPIO_Init+0x350>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4013      	ands	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004900:	4a28      	ldr	r2, [pc, #160]	; (80049a4 <HAL_GPIO_Init+0x350>)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004906:	4b27      	ldr	r3, [pc, #156]	; (80049a4 <HAL_GPIO_Init+0x350>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	43db      	mvns	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800492a:	4a1e      	ldr	r2, [pc, #120]	; (80049a4 <HAL_GPIO_Init+0x350>)
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004930:	4b1c      	ldr	r3, [pc, #112]	; (80049a4 <HAL_GPIO_Init+0x350>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	43db      	mvns	r3, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4013      	ands	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004954:	4a13      	ldr	r2, [pc, #76]	; (80049a4 <HAL_GPIO_Init+0x350>)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	3301      	adds	r3, #1
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	2b0f      	cmp	r3, #15
 8004964:	f67f ae86 	bls.w	8004674 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004968:	bf00      	nop
 800496a:	3724      	adds	r7, #36	; 0x24
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	40023800 	.word	0x40023800
 8004978:	40013800 	.word	0x40013800
 800497c:	40020000 	.word	0x40020000
 8004980:	40020400 	.word	0x40020400
 8004984:	40020800 	.word	0x40020800
 8004988:	40020c00 	.word	0x40020c00
 800498c:	40021000 	.word	0x40021000
 8004990:	40021400 	.word	0x40021400
 8004994:	40021800 	.word	0x40021800
 8004998:	40021c00 	.word	0x40021c00
 800499c:	40022000 	.word	0x40022000
 80049a0:	40022400 	.word	0x40022400
 80049a4:	40013c00 	.word	0x40013c00

080049a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80049b2:	2300      	movs	r3, #0
 80049b4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	e0d9      	b.n	8004b78 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80049c4:	2201      	movs	r2, #1
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4013      	ands	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	429a      	cmp	r2, r3
 80049dc:	f040 80c9 	bne.w	8004b72 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80049e0:	4a6a      	ldr	r2, [pc, #424]	; (8004b8c <HAL_GPIO_DeInit+0x1e4>)
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	089b      	lsrs	r3, r3, #2
 80049e6:	3302      	adds	r3, #2
 80049e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ec:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	220f      	movs	r2, #15
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	4013      	ands	r3, r2
 8004a00:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a62      	ldr	r2, [pc, #392]	; (8004b90 <HAL_GPIO_DeInit+0x1e8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d037      	beq.n	8004a7a <HAL_GPIO_DeInit+0xd2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a61      	ldr	r2, [pc, #388]	; (8004b94 <HAL_GPIO_DeInit+0x1ec>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d031      	beq.n	8004a76 <HAL_GPIO_DeInit+0xce>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a60      	ldr	r2, [pc, #384]	; (8004b98 <HAL_GPIO_DeInit+0x1f0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d02b      	beq.n	8004a72 <HAL_GPIO_DeInit+0xca>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a5f      	ldr	r2, [pc, #380]	; (8004b9c <HAL_GPIO_DeInit+0x1f4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d025      	beq.n	8004a6e <HAL_GPIO_DeInit+0xc6>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a5e      	ldr	r2, [pc, #376]	; (8004ba0 <HAL_GPIO_DeInit+0x1f8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d01f      	beq.n	8004a6a <HAL_GPIO_DeInit+0xc2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a5d      	ldr	r2, [pc, #372]	; (8004ba4 <HAL_GPIO_DeInit+0x1fc>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d019      	beq.n	8004a66 <HAL_GPIO_DeInit+0xbe>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a5c      	ldr	r2, [pc, #368]	; (8004ba8 <HAL_GPIO_DeInit+0x200>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <HAL_GPIO_DeInit+0xba>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a5b      	ldr	r2, [pc, #364]	; (8004bac <HAL_GPIO_DeInit+0x204>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00d      	beq.n	8004a5e <HAL_GPIO_DeInit+0xb6>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a5a      	ldr	r2, [pc, #360]	; (8004bb0 <HAL_GPIO_DeInit+0x208>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d007      	beq.n	8004a5a <HAL_GPIO_DeInit+0xb2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a59      	ldr	r2, [pc, #356]	; (8004bb4 <HAL_GPIO_DeInit+0x20c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d101      	bne.n	8004a56 <HAL_GPIO_DeInit+0xae>
 8004a52:	2309      	movs	r3, #9
 8004a54:	e012      	b.n	8004a7c <HAL_GPIO_DeInit+0xd4>
 8004a56:	230a      	movs	r3, #10
 8004a58:	e010      	b.n	8004a7c <HAL_GPIO_DeInit+0xd4>
 8004a5a:	2308      	movs	r3, #8
 8004a5c:	e00e      	b.n	8004a7c <HAL_GPIO_DeInit+0xd4>
 8004a5e:	2307      	movs	r3, #7
 8004a60:	e00c      	b.n	8004a7c <HAL_GPIO_DeInit+0xd4>
 8004a62:	2306      	movs	r3, #6
 8004a64:	e00a      	b.n	8004a7c <HAL_GPIO_DeInit+0xd4>
 8004a66:	2305      	movs	r3, #5
 8004a68:	e008      	b.n	8004a7c <HAL_GPIO_DeInit+0xd4>
 8004a6a:	2304      	movs	r3, #4
 8004a6c:	e006      	b.n	8004a7c <HAL_GPIO_DeInit+0xd4>
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e004      	b.n	8004a7c <HAL_GPIO_DeInit+0xd4>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e002      	b.n	8004a7c <HAL_GPIO_DeInit+0xd4>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <HAL_GPIO_DeInit+0xd4>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	f002 0203 	and.w	r2, r2, #3
 8004a82:	0092      	lsls	r2, r2, #2
 8004a84:	4093      	lsls	r3, r2
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d132      	bne.n	8004af2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004a8c:	4b4a      	ldr	r3, [pc, #296]	; (8004bb8 <HAL_GPIO_DeInit+0x210>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	43db      	mvns	r3, r3
 8004a94:	4948      	ldr	r1, [pc, #288]	; (8004bb8 <HAL_GPIO_DeInit+0x210>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004a9a:	4b47      	ldr	r3, [pc, #284]	; (8004bb8 <HAL_GPIO_DeInit+0x210>)
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	4945      	ldr	r1, [pc, #276]	; (8004bb8 <HAL_GPIO_DeInit+0x210>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004aa8:	4b43      	ldr	r3, [pc, #268]	; (8004bb8 <HAL_GPIO_DeInit+0x210>)
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	4941      	ldr	r1, [pc, #260]	; (8004bb8 <HAL_GPIO_DeInit+0x210>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004ab6:	4b40      	ldr	r3, [pc, #256]	; (8004bb8 <HAL_GPIO_DeInit+0x210>)
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	43db      	mvns	r3, r3
 8004abe:	493e      	ldr	r1, [pc, #248]	; (8004bb8 <HAL_GPIO_DeInit+0x210>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	220f      	movs	r2, #15
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004ad4:	4a2d      	ldr	r2, [pc, #180]	; (8004b8c <HAL_GPIO_DeInit+0x1e4>)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	089b      	lsrs	r3, r3, #2
 8004ada:	3302      	adds	r3, #2
 8004adc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	43da      	mvns	r2, r3
 8004ae4:	4829      	ldr	r0, [pc, #164]	; (8004b8c <HAL_GPIO_DeInit+0x1e4>)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	089b      	lsrs	r3, r3, #2
 8004aea:	400a      	ands	r2, r1
 8004aec:	3302      	adds	r3, #2
 8004aee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	2103      	movs	r1, #3
 8004afc:	fa01 f303 	lsl.w	r3, r1, r3
 8004b00:	43db      	mvns	r3, r3
 8004b02:	401a      	ands	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	08da      	lsrs	r2, r3, #3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3208      	adds	r2, #8
 8004b10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	220f      	movs	r2, #15
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43db      	mvns	r3, r3
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	08d2      	lsrs	r2, r2, #3
 8004b28:	4019      	ands	r1, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3208      	adds	r2, #8
 8004b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	2103      	movs	r1, #3
 8004b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	401a      	ands	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	fa01 f303 	lsl.w	r3, r1, r3
 8004b54:	43db      	mvns	r3, r3
 8004b56:	401a      	ands	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	2103      	movs	r1, #3
 8004b66:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	401a      	ands	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	3301      	adds	r3, #1
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2b0f      	cmp	r3, #15
 8004b7c:	f67f af22 	bls.w	80049c4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004b80:	bf00      	nop
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	40013800 	.word	0x40013800
 8004b90:	40020000 	.word	0x40020000
 8004b94:	40020400 	.word	0x40020400
 8004b98:	40020800 	.word	0x40020800
 8004b9c:	40020c00 	.word	0x40020c00
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	40021400 	.word	0x40021400
 8004ba8:	40021800 	.word	0x40021800
 8004bac:	40021c00 	.word	0x40021c00
 8004bb0:	40022000 	.word	0x40022000
 8004bb4:	40022400 	.word	0x40022400
 8004bb8:	40013c00 	.word	0x40013c00

08004bbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	887b      	ldrh	r3, [r7, #2]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	73fb      	strb	r3, [r7, #15]
 8004bd8:	e001      	b.n	8004bde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	807b      	strh	r3, [r7, #2]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bfc:	787b      	ldrb	r3, [r7, #1]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c02:	887a      	ldrh	r2, [r7, #2]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004c08:	e003      	b.n	8004c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004c0a:	887b      	ldrh	r3, [r7, #2]
 8004c0c:	041a      	lsls	r2, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	619a      	str	r2, [r3, #24]
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
	...

08004c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e07f      	b.n	8004d32 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fd fb70 	bl	800232c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2224      	movs	r2, #36	; 0x24
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d107      	bne.n	8004c9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c96:	609a      	str	r2, [r3, #8]
 8004c98:	e006      	b.n	8004ca8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ca6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d104      	bne.n	8004cba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6859      	ldr	r1, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b1d      	ldr	r3, [pc, #116]	; (8004d3c <HAL_I2C_Init+0x11c>)
 8004cc6:	430b      	orrs	r3, r1
 8004cc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	ea42 0103 	orr.w	r1, r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	021a      	lsls	r2, r3, #8
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69d9      	ldr	r1, [r3, #28]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1a      	ldr	r2, [r3, #32]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	02008000 	.word	0x02008000

08004d40 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e021      	b.n	8004d96 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2224      	movs	r2, #36	; 0x24
 8004d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7fd fb56 	bl	800241c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
	...

08004da0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	4608      	mov	r0, r1
 8004daa:	4611      	mov	r1, r2
 8004dac:	461a      	mov	r2, r3
 8004dae:	4603      	mov	r3, r0
 8004db0:	817b      	strh	r3, [r7, #10]
 8004db2:	460b      	mov	r3, r1
 8004db4:	813b      	strh	r3, [r7, #8]
 8004db6:	4613      	mov	r3, r2
 8004db8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	f040 80f9 	bne.w	8004fba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_I2C_Mem_Write+0x34>
 8004dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d105      	bne.n	8004de0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dda:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0ed      	b.n	8004fbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_I2C_Mem_Write+0x4e>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e0e6      	b.n	8004fbc <HAL_I2C_Mem_Write+0x21c>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004df6:	f7fe fa6f 	bl	80032d8 <HAL_GetTick>
 8004dfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	2319      	movs	r3, #25
 8004e02:	2201      	movs	r2, #1
 8004e04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fad1 	bl	80053b0 <I2C_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0d1      	b.n	8004fbc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2221      	movs	r2, #33	; 0x21
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2240      	movs	r2, #64	; 0x40
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a3a      	ldr	r2, [r7, #32]
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e40:	88f8      	ldrh	r0, [r7, #6]
 8004e42:	893a      	ldrh	r2, [r7, #8]
 8004e44:	8979      	ldrh	r1, [r7, #10]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	9301      	str	r3, [sp, #4]
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	4603      	mov	r3, r0
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f9e1 	bl	8005218 <I2C_RequestMemoryWrite>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0a9      	b.n	8004fbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2bff      	cmp	r3, #255	; 0xff
 8004e70:	d90e      	bls.n	8004e90 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	22ff      	movs	r2, #255	; 0xff
 8004e76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	8979      	ldrh	r1, [r7, #10]
 8004e80:	2300      	movs	r3, #0
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 fbb3 	bl	80055f4 <I2C_TransferConfig>
 8004e8e:	e00f      	b.n	8004eb0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	8979      	ldrh	r1, [r7, #10]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 fba2 	bl	80055f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 fabb 	bl	8005430 <I2C_WaitOnTXISFlagUntilTimeout>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e07b      	b.n	8004fbc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	781a      	ldrb	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d034      	beq.n	8004f68 <HAL_I2C_Mem_Write+0x1c8>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d130      	bne.n	8004f68 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2180      	movs	r1, #128	; 0x80
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 fa4d 	bl	80053b0 <I2C_WaitOnFlagUntilTimeout>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e04d      	b.n	8004fbc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2bff      	cmp	r3, #255	; 0xff
 8004f28:	d90e      	bls.n	8004f48 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	22ff      	movs	r2, #255	; 0xff
 8004f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	8979      	ldrh	r1, [r7, #10]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 fb57 	bl	80055f4 <I2C_TransferConfig>
 8004f46:	e00f      	b.n	8004f68 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	8979      	ldrh	r1, [r7, #10]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 fb46 	bl	80055f4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d19e      	bne.n	8004eb0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 fa9a 	bl	80054b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e01a      	b.n	8004fbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6859      	ldr	r1, [r3, #4]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <HAL_I2C_Mem_Write+0x224>)
 8004f9a:	400b      	ands	r3, r1
 8004f9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e000      	b.n	8004fbc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004fba:	2302      	movs	r3, #2
  }
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	fe00e800 	.word	0xfe00e800

08004fc8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	4608      	mov	r0, r1
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	817b      	strh	r3, [r7, #10]
 8004fda:	460b      	mov	r3, r1
 8004fdc:	813b      	strh	r3, [r7, #8]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	f040 80fd 	bne.w	80051ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <HAL_I2C_Mem_Read+0x34>
 8004ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d105      	bne.n	8005008 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005002:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0f1      	b.n	80051ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_I2C_Mem_Read+0x4e>
 8005012:	2302      	movs	r3, #2
 8005014:	e0ea      	b.n	80051ec <HAL_I2C_Mem_Read+0x224>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800501e:	f7fe f95b 	bl	80032d8 <HAL_GetTick>
 8005022:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	2319      	movs	r3, #25
 800502a:	2201      	movs	r2, #1
 800502c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f9bd 	bl	80053b0 <I2C_WaitOnFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0d5      	b.n	80051ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2222      	movs	r2, #34	; 0x22
 8005044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2240      	movs	r2, #64	; 0x40
 800504c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a3a      	ldr	r2, [r7, #32]
 800505a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005060:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005068:	88f8      	ldrh	r0, [r7, #6]
 800506a:	893a      	ldrh	r2, [r7, #8]
 800506c:	8979      	ldrh	r1, [r7, #10]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	4603      	mov	r3, r0
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f921 	bl	80052c0 <I2C_RequestMemoryRead>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0ad      	b.n	80051ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005094:	b29b      	uxth	r3, r3
 8005096:	2bff      	cmp	r3, #255	; 0xff
 8005098:	d90e      	bls.n	80050b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	22ff      	movs	r2, #255	; 0xff
 800509e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	8979      	ldrh	r1, [r7, #10]
 80050a8:	4b52      	ldr	r3, [pc, #328]	; (80051f4 <HAL_I2C_Mem_Read+0x22c>)
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 fa9f 	bl	80055f4 <I2C_TransferConfig>
 80050b6:	e00f      	b.n	80050d8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	8979      	ldrh	r1, [r7, #10]
 80050ca:	4b4a      	ldr	r3, [pc, #296]	; (80051f4 <HAL_I2C_Mem_Read+0x22c>)
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 fa8e 	bl	80055f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050de:	2200      	movs	r2, #0
 80050e0:	2104      	movs	r1, #4
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f964 	bl	80053b0 <I2C_WaitOnFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e07c      	b.n	80051ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d034      	beq.n	8005198 <HAL_I2C_Mem_Read+0x1d0>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005132:	2b00      	cmp	r3, #0
 8005134:	d130      	bne.n	8005198 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	2200      	movs	r2, #0
 800513e:	2180      	movs	r1, #128	; 0x80
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f935 	bl	80053b0 <I2C_WaitOnFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e04d      	b.n	80051ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005154:	b29b      	uxth	r3, r3
 8005156:	2bff      	cmp	r3, #255	; 0xff
 8005158:	d90e      	bls.n	8005178 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	22ff      	movs	r2, #255	; 0xff
 800515e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005164:	b2da      	uxtb	r2, r3
 8005166:	8979      	ldrh	r1, [r7, #10]
 8005168:	2300      	movs	r3, #0
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 fa3f 	bl	80055f4 <I2C_TransferConfig>
 8005176:	e00f      	b.n	8005198 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005186:	b2da      	uxtb	r2, r3
 8005188:	8979      	ldrh	r1, [r7, #10]
 800518a:	2300      	movs	r3, #0
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 fa2e 	bl	80055f4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d19a      	bne.n	80050d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 f982 	bl	80054b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e01a      	b.n	80051ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2220      	movs	r2, #32
 80051bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6859      	ldr	r1, [r3, #4]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <HAL_I2C_Mem_Read+0x230>)
 80051ca:	400b      	ands	r3, r1
 80051cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	e000      	b.n	80051ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80051ea:	2302      	movs	r3, #2
  }
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	80002400 	.word	0x80002400
 80051f8:	fe00e800 	.word	0xfe00e800

080051fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800520a:	b2db      	uxtb	r3, r3
}
 800520c:	4618      	mov	r0, r3
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	4608      	mov	r0, r1
 8005222:	4611      	mov	r1, r2
 8005224:	461a      	mov	r2, r3
 8005226:	4603      	mov	r3, r0
 8005228:	817b      	strh	r3, [r7, #10]
 800522a:	460b      	mov	r3, r1
 800522c:	813b      	strh	r3, [r7, #8]
 800522e:	4613      	mov	r3, r2
 8005230:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	b2da      	uxtb	r2, r3
 8005236:	8979      	ldrh	r1, [r7, #10]
 8005238:	4b20      	ldr	r3, [pc, #128]	; (80052bc <I2C_RequestMemoryWrite+0xa4>)
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 f9d7 	bl	80055f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	69b9      	ldr	r1, [r7, #24]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f8f0 	bl	8005430 <I2C_WaitOnTXISFlagUntilTimeout>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e02c      	b.n	80052b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d105      	bne.n	800526c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005260:	893b      	ldrh	r3, [r7, #8]
 8005262:	b2da      	uxtb	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	629a      	str	r2, [r3, #40]	; 0x28
 800526a:	e015      	b.n	8005298 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800526c:	893b      	ldrh	r3, [r7, #8]
 800526e:	0a1b      	lsrs	r3, r3, #8
 8005270:	b29b      	uxth	r3, r3
 8005272:	b2da      	uxtb	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	69b9      	ldr	r1, [r7, #24]
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 f8d6 	bl	8005430 <I2C_WaitOnTXISFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e012      	b.n	80052b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800528e:	893b      	ldrh	r3, [r7, #8]
 8005290:	b2da      	uxtb	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	2200      	movs	r2, #0
 80052a0:	2180      	movs	r1, #128	; 0x80
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f884 	bl	80053b0 <I2C_WaitOnFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	80002000 	.word	0x80002000

080052c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	4608      	mov	r0, r1
 80052ca:	4611      	mov	r1, r2
 80052cc:	461a      	mov	r2, r3
 80052ce:	4603      	mov	r3, r0
 80052d0:	817b      	strh	r3, [r7, #10]
 80052d2:	460b      	mov	r3, r1
 80052d4:	813b      	strh	r3, [r7, #8]
 80052d6:	4613      	mov	r3, r2
 80052d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	8979      	ldrh	r1, [r7, #10]
 80052e0:	4b20      	ldr	r3, [pc, #128]	; (8005364 <I2C_RequestMemoryRead+0xa4>)
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	2300      	movs	r3, #0
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f984 	bl	80055f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	69b9      	ldr	r1, [r7, #24]
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 f89d 	bl	8005430 <I2C_WaitOnTXISFlagUntilTimeout>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e02c      	b.n	800535a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005300:	88fb      	ldrh	r3, [r7, #6]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d105      	bne.n	8005312 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005306:	893b      	ldrh	r3, [r7, #8]
 8005308:	b2da      	uxtb	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	629a      	str	r2, [r3, #40]	; 0x28
 8005310:	e015      	b.n	800533e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005312:	893b      	ldrh	r3, [r7, #8]
 8005314:	0a1b      	lsrs	r3, r3, #8
 8005316:	b29b      	uxth	r3, r3
 8005318:	b2da      	uxtb	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	69b9      	ldr	r1, [r7, #24]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f883 	bl	8005430 <I2C_WaitOnTXISFlagUntilTimeout>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e012      	b.n	800535a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005334:	893b      	ldrh	r3, [r7, #8]
 8005336:	b2da      	uxtb	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2200      	movs	r2, #0
 8005346:	2140      	movs	r1, #64	; 0x40
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f831 	bl	80053b0 <I2C_WaitOnFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	80002000 	.word	0x80002000

08005368 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b02      	cmp	r3, #2
 800537c:	d103      	bne.n	8005386 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2200      	movs	r2, #0
 8005384:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b01      	cmp	r3, #1
 8005392:	d007      	beq.n	80053a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0201 	orr.w	r2, r2, #1
 80053a2:	619a      	str	r2, [r3, #24]
  }
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	4613      	mov	r3, r2
 80053be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053c0:	e022      	b.n	8005408 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c8:	d01e      	beq.n	8005408 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ca:	f7fd ff85 	bl	80032d8 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d302      	bcc.n	80053e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d113      	bne.n	8005408 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e4:	f043 0220 	orr.w	r2, r3, #32
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e00f      	b.n	8005428 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4013      	ands	r3, r2
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	429a      	cmp	r2, r3
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	461a      	mov	r2, r3
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	429a      	cmp	r2, r3
 8005424:	d0cd      	beq.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800543c:	e02c      	b.n	8005498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f870 	bl	8005528 <I2C_IsAcknowledgeFailed>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e02a      	b.n	80054a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005458:	d01e      	beq.n	8005498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545a:	f7fd ff3d 	bl	80032d8 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	429a      	cmp	r2, r3
 8005468:	d302      	bcc.n	8005470 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d113      	bne.n	8005498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005474:	f043 0220 	orr.w	r2, r3, #32
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2220      	movs	r2, #32
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e007      	b.n	80054a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d1cb      	bne.n	800543e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054bc:	e028      	b.n	8005510 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f830 	bl	8005528 <I2C_IsAcknowledgeFailed>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e026      	b.n	8005520 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d2:	f7fd ff01 	bl	80032d8 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d302      	bcc.n	80054e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d113      	bne.n	8005510 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ec:	f043 0220 	orr.w	r2, r3, #32
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e007      	b.n	8005520 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b20      	cmp	r3, #32
 800551c:	d1cf      	bne.n	80054be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	2b10      	cmp	r3, #16
 8005540:	d151      	bne.n	80055e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005542:	e022      	b.n	800558a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554a:	d01e      	beq.n	800558a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800554c:	f7fd fec4 	bl	80032d8 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	429a      	cmp	r2, r3
 800555a:	d302      	bcc.n	8005562 <I2C_IsAcknowledgeFailed+0x3a>
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d113      	bne.n	800558a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005566:	f043 0220 	orr.w	r2, r3, #32
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e02e      	b.n	80055e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f003 0320 	and.w	r3, r3, #32
 8005594:	2b20      	cmp	r3, #32
 8005596:	d1d5      	bne.n	8005544 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2210      	movs	r2, #16
 800559e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2220      	movs	r2, #32
 80055a6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f7ff fedd 	bl	8005368 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6859      	ldr	r1, [r3, #4]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <I2C_IsAcknowledgeFailed+0xc8>)
 80055ba:	400b      	ands	r3, r1
 80055bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c2:	f043 0204 	orr.w	r2, r3, #4
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	fe00e800 	.word	0xfe00e800

080055f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	607b      	str	r3, [r7, #4]
 80055fe:	460b      	mov	r3, r1
 8005600:	817b      	strh	r3, [r7, #10]
 8005602:	4613      	mov	r3, r2
 8005604:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	0d5b      	lsrs	r3, r3, #21
 8005610:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005614:	4b0d      	ldr	r3, [pc, #52]	; (800564c <I2C_TransferConfig+0x58>)
 8005616:	430b      	orrs	r3, r1
 8005618:	43db      	mvns	r3, r3
 800561a:	ea02 0103 	and.w	r1, r2, r3
 800561e:	897b      	ldrh	r3, [r7, #10]
 8005620:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005624:	7a7b      	ldrb	r3, [r7, #9]
 8005626:	041b      	lsls	r3, r3, #16
 8005628:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	431a      	orrs	r2, r3
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	431a      	orrs	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800563e:	bf00      	nop
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	03ff63ff 	.word	0x03ff63ff

08005650 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b20      	cmp	r3, #32
 8005664:	d138      	bne.n	80056d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005670:	2302      	movs	r3, #2
 8005672:	e032      	b.n	80056da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2224      	movs	r2, #36	; 0x24
 8005680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0201 	bic.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6819      	ldr	r1, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e000      	b.n	80056da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056d8:	2302      	movs	r3, #2
  }
}
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b085      	sub	sp, #20
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b20      	cmp	r3, #32
 80056fa:	d139      	bne.n	8005770 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005702:	2b01      	cmp	r3, #1
 8005704:	d101      	bne.n	800570a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005706:	2302      	movs	r3, #2
 8005708:	e033      	b.n	8005772 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2224      	movs	r2, #36	; 0x24
 8005716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0201 	bic.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005738:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	021b      	lsls	r3, r3, #8
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	e000      	b.n	8005772 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005770:	2302      	movs	r3, #2
  }
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
	...

08005780 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e0bf      	b.n	8005912 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fc fe74 	bl	8002494 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80057c2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6999      	ldr	r1, [r3, #24]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057d8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6899      	ldr	r1, [r3, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b4a      	ldr	r3, [pc, #296]	; (800591c <HAL_LTDC_Init+0x19c>)
 80057f4:	400b      	ands	r3, r1
 80057f6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	041b      	lsls	r3, r3, #16
 80057fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6899      	ldr	r1, [r3, #8]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	431a      	orrs	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68d9      	ldr	r1, [r3, #12]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	4b3e      	ldr	r3, [pc, #248]	; (800591c <HAL_LTDC_Init+0x19c>)
 8005822:	400b      	ands	r3, r1
 8005824:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	041b      	lsls	r3, r3, #16
 800582c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68d9      	ldr	r1, [r3, #12]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1a      	ldr	r2, [r3, #32]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	431a      	orrs	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6919      	ldr	r1, [r3, #16]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	4b33      	ldr	r3, [pc, #204]	; (800591c <HAL_LTDC_Init+0x19c>)
 8005850:	400b      	ands	r3, r1
 8005852:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	041b      	lsls	r3, r3, #16
 800585a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6919      	ldr	r1, [r3, #16]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6959      	ldr	r1, [r3, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	4b27      	ldr	r3, [pc, #156]	; (800591c <HAL_LTDC_Init+0x19c>)
 800587e:	400b      	ands	r3, r1
 8005880:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	041b      	lsls	r3, r3, #16
 8005888:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6959      	ldr	r1, [r3, #20]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80058b0:	041b      	lsls	r3, r3, #16
 80058b2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80058c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0206 	orr.w	r2, r2, #6
 80058ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	f000f800 	.word	0xf000f800

08005920 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005936:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b00      	cmp	r3, #0
 8005940:	d023      	beq.n	800598a <HAL_LTDC_IRQHandler+0x6a>
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01e      	beq.n	800598a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0204 	bic.w	r2, r2, #4
 800595a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2204      	movs	r2, #4
 8005962:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800596a:	f043 0201 	orr.w	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2204      	movs	r2, #4
 8005978:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f86f 	bl	8005a68 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d023      	beq.n	80059dc <HAL_LTDC_IRQHandler+0xbc>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d01e      	beq.n	80059dc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0202 	bic.w	r2, r2, #2
 80059ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2202      	movs	r2, #2
 80059b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059bc:	f043 0202 	orr.w	r2, r3, #2
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2204      	movs	r2, #4
 80059ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f846 	bl	8005a68 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d01b      	beq.n	8005a1e <HAL_LTDC_IRQHandler+0xfe>
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d016      	beq.n	8005a1e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0201 	bic.w	r2, r2, #1
 80059fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2201      	movs	r2, #1
 8005a06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f010 f991 	bl	8015d40 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01b      	beq.n	8005a60 <HAL_LTDC_IRQHandler+0x140>
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d016      	beq.n	8005a60 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0208 	bic.w	r2, r2, #8
 8005a40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2208      	movs	r2, #8
 8005a48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f80e 	bl	8005a7c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005a60:	bf00      	nop
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005a90:	b5b0      	push	{r4, r5, r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_LTDC_ConfigLayer+0x1a>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e02c      	b.n	8005b04 <HAL_LTDC_ConfigLayer+0x74>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2134      	movs	r1, #52	; 0x34
 8005ac0:	fb01 f303 	mul.w	r3, r1, r3
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	4614      	mov	r4, r2
 8005ace:	461d      	mov	r5, r3
 8005ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	68b9      	ldr	r1, [r7, #8]
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 f849 	bl	8005b7c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2201      	movs	r2, #1
 8005af0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bdb0      	pop	{r4, r5, r7, pc}

08005b0c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_LTDC_ProgramLineEvent+0x18>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e023      	b.n	8005b6c <HAL_LTDC_ProgramLineEvent+0x60>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0201 	bic.w	r2, r2, #1
 8005b42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005b44:	4a0c      	ldr	r2, [pc, #48]	; (8005b78 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0201 	orr.w	r2, r2, #1
 8005b58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	40016800 	.word	0x40016800

08005b7c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b089      	sub	sp, #36	; 0x24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	0c1b      	lsrs	r3, r3, #16
 8005b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b98:	4413      	add	r3, r2
 8005b9a:	041b      	lsls	r3, r3, #16
 8005b9c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	01db      	lsls	r3, r3, #7
 8005ba8:	4413      	add	r3, r2
 8005baa:	3384      	adds	r3, #132	; 0x84
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	6812      	ldr	r2, [r2, #0]
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	01d2      	lsls	r2, r2, #7
 8005bb8:	440a      	add	r2, r1
 8005bba:	3284      	adds	r2, #132	; 0x84
 8005bbc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005bc0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	0c1b      	lsrs	r3, r3, #16
 8005bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd2:	4413      	add	r3, r2
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	01db      	lsls	r3, r3, #7
 8005be0:	440b      	add	r3, r1
 8005be2:	3384      	adds	r3, #132	; 0x84
 8005be4:	4619      	mov	r1, r3
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bfa:	4413      	add	r3, r2
 8005bfc:	041b      	lsls	r3, r3, #16
 8005bfe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	461a      	mov	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	01db      	lsls	r3, r3, #7
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3384      	adds	r3, #132	; 0x84
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	6812      	ldr	r2, [r2, #0]
 8005c14:	4611      	mov	r1, r2
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	01d2      	lsls	r2, r2, #7
 8005c1a:	440a      	add	r2, r1
 8005c1c:	3284      	adds	r2, #132	; 0x84
 8005c1e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005c22:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c32:	4413      	add	r3, r2
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	01db      	lsls	r3, r3, #7
 8005c40:	440b      	add	r3, r1
 8005c42:	3384      	adds	r3, #132	; 0x84
 8005c44:	4619      	mov	r1, r3
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	01db      	lsls	r3, r3, #7
 8005c56:	4413      	add	r3, r2
 8005c58:	3384      	adds	r3, #132	; 0x84
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	6812      	ldr	r2, [r2, #0]
 8005c60:	4611      	mov	r1, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	01d2      	lsls	r2, r2, #7
 8005c66:	440a      	add	r2, r1
 8005c68:	3284      	adds	r2, #132	; 0x84
 8005c6a:	f023 0307 	bic.w	r3, r3, #7
 8005c6e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	01db      	lsls	r3, r3, #7
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3384      	adds	r3, #132	; 0x84
 8005c7e:	461a      	mov	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005c96:	041b      	lsls	r3, r3, #16
 8005c98:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	061b      	lsls	r3, r3, #24
 8005ca0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	01db      	lsls	r3, r3, #7
 8005cac:	4413      	add	r3, r2
 8005cae:	3384      	adds	r3, #132	; 0x84
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	01db      	lsls	r3, r3, #7
 8005cbc:	4413      	add	r3, r2
 8005cbe:	3384      	adds	r3, #132	; 0x84
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ccc:	461a      	mov	r2, r3
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	01db      	lsls	r3, r3, #7
 8005ce0:	440b      	add	r3, r1
 8005ce2:	3384      	adds	r3, #132	; 0x84
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	01db      	lsls	r3, r3, #7
 8005cf6:	4413      	add	r3, r2
 8005cf8:	3384      	adds	r3, #132	; 0x84
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	4611      	mov	r1, r2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	01d2      	lsls	r2, r2, #7
 8005d06:	440a      	add	r2, r1
 8005d08:	3284      	adds	r2, #132	; 0x84
 8005d0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d0e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	01db      	lsls	r3, r3, #7
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3384      	adds	r3, #132	; 0x84
 8005d1e:	461a      	mov	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	01db      	lsls	r3, r3, #7
 8005d30:	4413      	add	r3, r2
 8005d32:	3384      	adds	r3, #132	; 0x84
 8005d34:	69da      	ldr	r2, [r3, #28]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	01db      	lsls	r3, r3, #7
 8005d40:	440b      	add	r3, r1
 8005d42:	3384      	adds	r3, #132	; 0x84
 8005d44:	4619      	mov	r1, r3
 8005d46:	4b58      	ldr	r3, [pc, #352]	; (8005ea8 <LTDC_SetConfig+0x32c>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	68f9      	ldr	r1, [r7, #12]
 8005d56:	6809      	ldr	r1, [r1, #0]
 8005d58:	4608      	mov	r0, r1
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	01c9      	lsls	r1, r1, #7
 8005d5e:	4401      	add	r1, r0
 8005d60:	3184      	adds	r1, #132	; 0x84
 8005d62:	4313      	orrs	r3, r2
 8005d64:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	01db      	lsls	r3, r3, #7
 8005d70:	4413      	add	r3, r2
 8005d72:	3384      	adds	r3, #132	; 0x84
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	01db      	lsls	r3, r3, #7
 8005d80:	4413      	add	r3, r2
 8005d82:	3384      	adds	r3, #132	; 0x84
 8005d84:	461a      	mov	r2, r3
 8005d86:	2300      	movs	r3, #0
 8005d88:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	01db      	lsls	r3, r3, #7
 8005d94:	4413      	add	r3, r2
 8005d96:	3384      	adds	r3, #132	; 0x84
 8005d98:	461a      	mov	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d102      	bne.n	8005dae <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005da8:	2304      	movs	r3, #4
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	e01b      	b.n	8005de6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d102      	bne.n	8005dbc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005db6:	2303      	movs	r3, #3
 8005db8:	61fb      	str	r3, [r7, #28]
 8005dba:	e014      	b.n	8005de6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d00b      	beq.n	8005ddc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d007      	beq.n	8005ddc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d003      	beq.n	8005ddc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005dd8:	2b07      	cmp	r3, #7
 8005dda:	d102      	bne.n	8005de2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005ddc:	2302      	movs	r3, #2
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	e001      	b.n	8005de6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005de2:	2301      	movs	r3, #1
 8005de4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	01db      	lsls	r3, r3, #7
 8005df0:	4413      	add	r3, r2
 8005df2:	3384      	adds	r3, #132	; 0x84
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	6812      	ldr	r2, [r2, #0]
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	01d2      	lsls	r2, r2, #7
 8005e00:	440a      	add	r2, r1
 8005e02:	3284      	adds	r2, #132	; 0x84
 8005e04:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005e08:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	fb02 f303 	mul.w	r3, r2, r3
 8005e14:	041a      	lsls	r2, r3, #16
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	6859      	ldr	r1, [r3, #4]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	1acb      	subs	r3, r1, r3
 8005e20:	69f9      	ldr	r1, [r7, #28]
 8005e22:	fb01 f303 	mul.w	r3, r1, r3
 8005e26:	3303      	adds	r3, #3
 8005e28:	68f9      	ldr	r1, [r7, #12]
 8005e2a:	6809      	ldr	r1, [r1, #0]
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	01c9      	lsls	r1, r1, #7
 8005e32:	4401      	add	r1, r0
 8005e34:	3184      	adds	r1, #132	; 0x84
 8005e36:	4313      	orrs	r3, r2
 8005e38:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	01db      	lsls	r3, r3, #7
 8005e44:	4413      	add	r3, r2
 8005e46:	3384      	adds	r3, #132	; 0x84
 8005e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	01db      	lsls	r3, r3, #7
 8005e54:	440b      	add	r3, r1
 8005e56:	3384      	adds	r3, #132	; 0x84
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4b14      	ldr	r3, [pc, #80]	; (8005eac <LTDC_SetConfig+0x330>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	461a      	mov	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	01db      	lsls	r3, r3, #7
 8005e6a:	4413      	add	r3, r2
 8005e6c:	3384      	adds	r3, #132	; 0x84
 8005e6e:	461a      	mov	r2, r3
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	01db      	lsls	r3, r3, #7
 8005e80:	4413      	add	r3, r2
 8005e82:	3384      	adds	r3, #132	; 0x84
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	01d2      	lsls	r2, r2, #7
 8005e90:	440a      	add	r2, r1
 8005e92:	3284      	adds	r2, #132	; 0x84
 8005e94:	f043 0301 	orr.w	r3, r3, #1
 8005e98:	6013      	str	r3, [r2, #0]
}
 8005e9a:	bf00      	nop
 8005e9c:	3724      	adds	r7, #36	; 0x24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	fffff8f8 	.word	0xfffff8f8
 8005eac:	fffff800 	.word	0xfffff800

08005eb0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005eb4:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a04      	ldr	r2, [pc, #16]	; (8005ecc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ebe:	6013      	str	r3, [r2, #0]
}
 8005ec0:	bf00      	nop
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40007000 	.word	0x40007000

08005ed0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005eda:	4b23      	ldr	r3, [pc, #140]	; (8005f68 <HAL_PWREx_EnableOverDrive+0x98>)
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	4a22      	ldr	r2, [pc, #136]	; (8005f68 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ee6:	4b20      	ldr	r3, [pc, #128]	; (8005f68 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005ef2:	4b1e      	ldr	r3, [pc, #120]	; (8005f6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a1d      	ldr	r2, [pc, #116]	; (8005f6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005efc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005efe:	f7fd f9eb 	bl	80032d8 <HAL_GetTick>
 8005f02:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f04:	e009      	b.n	8005f1a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f06:	f7fd f9e7 	bl	80032d8 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f14:	d901      	bls.n	8005f1a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e022      	b.n	8005f60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f1a:	4b14      	ldr	r3, [pc, #80]	; (8005f6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f26:	d1ee      	bne.n	8005f06 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005f28:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a0f      	ldr	r2, [pc, #60]	; (8005f6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f34:	f7fd f9d0 	bl	80032d8 <HAL_GetTick>
 8005f38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f3a:	e009      	b.n	8005f50 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f3c:	f7fd f9cc 	bl	80032d8 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f4a:	d901      	bls.n	8005f50 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e007      	b.n	8005f60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f50:	4b06      	ldr	r3, [pc, #24]	; (8005f6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f5c:	d1ee      	bne.n	8005f3c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	40007000 	.word	0x40007000

08005f70 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005f78:	f7fd f9ae 	bl	80032d8 <HAL_GetTick>
 8005f7c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e067      	b.n	8006058 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10b      	bne.n	8005fac <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7fc fb41 	bl	8002624 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005fa2:	f241 3188 	movw	r1, #5000	; 0x1388
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f85e 	bl	8006068 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	021a      	lsls	r2, r3, #8
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	2120      	movs	r1, #32
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f856 	bl	8006084 <QSPI_WaitFlagStateUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005fdc:	7afb      	ldrb	r3, [r7, #11]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d135      	bne.n	800604e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	4b1d      	ldr	r3, [pc, #116]	; (8006060 <HAL_QSPI_Init+0xf0>)
 8005fea:	4013      	ands	r3, r2
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6852      	ldr	r2, [r2, #4]
 8005ff0:	0611      	lsls	r1, r2, #24
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	68d2      	ldr	r2, [r2, #12]
 8005ff6:	4311      	orrs	r1, r2
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	69d2      	ldr	r2, [r2, #28]
 8005ffc:	4311      	orrs	r1, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6a12      	ldr	r2, [r2, #32]
 8006002:	4311      	orrs	r1, r2
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6812      	ldr	r2, [r2, #0]
 8006008:	430b      	orrs	r3, r1
 800600a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	4b14      	ldr	r3, [pc, #80]	; (8006064 <HAL_QSPI_Init+0xf4>)
 8006014:	4013      	ands	r3, r2
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6912      	ldr	r2, [r2, #16]
 800601a:	0411      	lsls	r1, r2, #16
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6952      	ldr	r2, [r2, #20]
 8006020:	4311      	orrs	r1, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6992      	ldr	r2, [r2, #24]
 8006026:	4311      	orrs	r1, r2
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6812      	ldr	r2, [r2, #0]
 800602c:	430b      	orrs	r3, r1
 800602e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0201 	orr.w	r2, r2, #1
 800603e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006056:	7afb      	ldrb	r3, [r7, #11]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	00ffff2f 	.word	0x00ffff2f
 8006064:	ffe0f8fe 	.word	0xffe0f8fe

08006068 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	4613      	mov	r3, r2
 8006092:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006094:	e01a      	b.n	80060cc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609c:	d016      	beq.n	80060cc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609e:	f7fd f91b 	bl	80032d8 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d302      	bcc.n	80060b4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10b      	bne.n	80060cc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2204      	movs	r2, #4
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c0:	f043 0201 	orr.w	r2, r3, #1
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e00e      	b.n	80060ea <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	4013      	ands	r3, r2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	bf14      	ite	ne
 80060da:	2301      	movne	r3, #1
 80060dc:	2300      	moveq	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d1d6      	bne.n	8006096 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80060fc:	2300      	movs	r3, #0
 80060fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e291      	b.n	800662e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 8087 	beq.w	8006226 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006118:	4b96      	ldr	r3, [pc, #600]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 030c 	and.w	r3, r3, #12
 8006120:	2b04      	cmp	r3, #4
 8006122:	d00c      	beq.n	800613e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006124:	4b93      	ldr	r3, [pc, #588]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f003 030c 	and.w	r3, r3, #12
 800612c:	2b08      	cmp	r3, #8
 800612e:	d112      	bne.n	8006156 <HAL_RCC_OscConfig+0x62>
 8006130:	4b90      	ldr	r3, [pc, #576]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006138:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800613c:	d10b      	bne.n	8006156 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800613e:	4b8d      	ldr	r3, [pc, #564]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d06c      	beq.n	8006224 <HAL_RCC_OscConfig+0x130>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d168      	bne.n	8006224 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e26b      	b.n	800662e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800615e:	d106      	bne.n	800616e <HAL_RCC_OscConfig+0x7a>
 8006160:	4b84      	ldr	r3, [pc, #528]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a83      	ldr	r2, [pc, #524]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	e02e      	b.n	80061cc <HAL_RCC_OscConfig+0xd8>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10c      	bne.n	8006190 <HAL_RCC_OscConfig+0x9c>
 8006176:	4b7f      	ldr	r3, [pc, #508]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a7e      	ldr	r2, [pc, #504]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 800617c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006180:	6013      	str	r3, [r2, #0]
 8006182:	4b7c      	ldr	r3, [pc, #496]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a7b      	ldr	r2, [pc, #492]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	e01d      	b.n	80061cc <HAL_RCC_OscConfig+0xd8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006198:	d10c      	bne.n	80061b4 <HAL_RCC_OscConfig+0xc0>
 800619a:	4b76      	ldr	r3, [pc, #472]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a75      	ldr	r2, [pc, #468]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 80061a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	4b73      	ldr	r3, [pc, #460]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a72      	ldr	r2, [pc, #456]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 80061ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	e00b      	b.n	80061cc <HAL_RCC_OscConfig+0xd8>
 80061b4:	4b6f      	ldr	r3, [pc, #444]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a6e      	ldr	r2, [pc, #440]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 80061ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	4b6c      	ldr	r3, [pc, #432]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a6b      	ldr	r2, [pc, #428]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 80061c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d013      	beq.n	80061fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d4:	f7fd f880 	bl	80032d8 <HAL_GetTick>
 80061d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061dc:	f7fd f87c 	bl	80032d8 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b64      	cmp	r3, #100	; 0x64
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e21f      	b.n	800662e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ee:	4b61      	ldr	r3, [pc, #388]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0f0      	beq.n	80061dc <HAL_RCC_OscConfig+0xe8>
 80061fa:	e014      	b.n	8006226 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fc:	f7fd f86c 	bl	80032d8 <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006204:	f7fd f868 	bl	80032d8 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b64      	cmp	r3, #100	; 0x64
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e20b      	b.n	800662e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006216:	4b57      	ldr	r3, [pc, #348]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1f0      	bne.n	8006204 <HAL_RCC_OscConfig+0x110>
 8006222:	e000      	b.n	8006226 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d069      	beq.n	8006306 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006232:	4b50      	ldr	r3, [pc, #320]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 030c 	and.w	r3, r3, #12
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00b      	beq.n	8006256 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800623e:	4b4d      	ldr	r3, [pc, #308]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 030c 	and.w	r3, r3, #12
 8006246:	2b08      	cmp	r3, #8
 8006248:	d11c      	bne.n	8006284 <HAL_RCC_OscConfig+0x190>
 800624a:	4b4a      	ldr	r3, [pc, #296]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d116      	bne.n	8006284 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006256:	4b47      	ldr	r3, [pc, #284]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d005      	beq.n	800626e <HAL_RCC_OscConfig+0x17a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d001      	beq.n	800626e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e1df      	b.n	800662e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800626e:	4b41      	ldr	r3, [pc, #260]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	493d      	ldr	r1, [pc, #244]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 800627e:	4313      	orrs	r3, r2
 8006280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006282:	e040      	b.n	8006306 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d023      	beq.n	80062d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800628c:	4b39      	ldr	r3, [pc, #228]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a38      	ldr	r2, [pc, #224]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006292:	f043 0301 	orr.w	r3, r3, #1
 8006296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006298:	f7fd f81e 	bl	80032d8 <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800629e:	e008      	b.n	80062b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062a0:	f7fd f81a 	bl	80032d8 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e1bd      	b.n	800662e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062b2:	4b30      	ldr	r3, [pc, #192]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d0f0      	beq.n	80062a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062be:	4b2d      	ldr	r3, [pc, #180]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	4929      	ldr	r1, [pc, #164]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	600b      	str	r3, [r1, #0]
 80062d2:	e018      	b.n	8006306 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062d4:	4b27      	ldr	r3, [pc, #156]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a26      	ldr	r2, [pc, #152]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 80062da:	f023 0301 	bic.w	r3, r3, #1
 80062de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e0:	f7fc fffa 	bl	80032d8 <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062e8:	f7fc fff6 	bl	80032d8 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e199      	b.n	800662e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062fa:	4b1e      	ldr	r3, [pc, #120]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f0      	bne.n	80062e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	2b00      	cmp	r3, #0
 8006310:	d038      	beq.n	8006384 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d019      	beq.n	800634e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800631a:	4b16      	ldr	r3, [pc, #88]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 800631c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800631e:	4a15      	ldr	r2, [pc, #84]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006320:	f043 0301 	orr.w	r3, r3, #1
 8006324:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006326:	f7fc ffd7 	bl	80032d8 <HAL_GetTick>
 800632a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800632c:	e008      	b.n	8006340 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800632e:	f7fc ffd3 	bl	80032d8 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e176      	b.n	800662e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006340:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0f0      	beq.n	800632e <HAL_RCC_OscConfig+0x23a>
 800634c:	e01a      	b.n	8006384 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800634e:	4b09      	ldr	r3, [pc, #36]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006352:	4a08      	ldr	r2, [pc, #32]	; (8006374 <HAL_RCC_OscConfig+0x280>)
 8006354:	f023 0301 	bic.w	r3, r3, #1
 8006358:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800635a:	f7fc ffbd 	bl	80032d8 <HAL_GetTick>
 800635e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006360:	e00a      	b.n	8006378 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006362:	f7fc ffb9 	bl	80032d8 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d903      	bls.n	8006378 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e15c      	b.n	800662e <HAL_RCC_OscConfig+0x53a>
 8006374:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006378:	4b91      	ldr	r3, [pc, #580]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 800637a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1ee      	bne.n	8006362 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 80a4 	beq.w	80064da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006392:	4b8b      	ldr	r3, [pc, #556]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10d      	bne.n	80063ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800639e:	4b88      	ldr	r3, [pc, #544]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	4a87      	ldr	r2, [pc, #540]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 80063a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a8:	6413      	str	r3, [r2, #64]	; 0x40
 80063aa:	4b85      	ldr	r3, [pc, #532]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b2:	60bb      	str	r3, [r7, #8]
 80063b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063b6:	2301      	movs	r3, #1
 80063b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063ba:	4b82      	ldr	r3, [pc, #520]	; (80065c4 <HAL_RCC_OscConfig+0x4d0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d118      	bne.n	80063f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80063c6:	4b7f      	ldr	r3, [pc, #508]	; (80065c4 <HAL_RCC_OscConfig+0x4d0>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a7e      	ldr	r2, [pc, #504]	; (80065c4 <HAL_RCC_OscConfig+0x4d0>)
 80063cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063d2:	f7fc ff81 	bl	80032d8 <HAL_GetTick>
 80063d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063d8:	e008      	b.n	80063ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063da:	f7fc ff7d 	bl	80032d8 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b64      	cmp	r3, #100	; 0x64
 80063e6:	d901      	bls.n	80063ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e120      	b.n	800662e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063ec:	4b75      	ldr	r3, [pc, #468]	; (80065c4 <HAL_RCC_OscConfig+0x4d0>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0f0      	beq.n	80063da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d106      	bne.n	800640e <HAL_RCC_OscConfig+0x31a>
 8006400:	4b6f      	ldr	r3, [pc, #444]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 8006402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006404:	4a6e      	ldr	r2, [pc, #440]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	6713      	str	r3, [r2, #112]	; 0x70
 800640c:	e02d      	b.n	800646a <HAL_RCC_OscConfig+0x376>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10c      	bne.n	8006430 <HAL_RCC_OscConfig+0x33c>
 8006416:	4b6a      	ldr	r3, [pc, #424]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 8006418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641a:	4a69      	ldr	r2, [pc, #420]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 800641c:	f023 0301 	bic.w	r3, r3, #1
 8006420:	6713      	str	r3, [r2, #112]	; 0x70
 8006422:	4b67      	ldr	r3, [pc, #412]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 8006424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006426:	4a66      	ldr	r2, [pc, #408]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 8006428:	f023 0304 	bic.w	r3, r3, #4
 800642c:	6713      	str	r3, [r2, #112]	; 0x70
 800642e:	e01c      	b.n	800646a <HAL_RCC_OscConfig+0x376>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	2b05      	cmp	r3, #5
 8006436:	d10c      	bne.n	8006452 <HAL_RCC_OscConfig+0x35e>
 8006438:	4b61      	ldr	r3, [pc, #388]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 800643a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643c:	4a60      	ldr	r2, [pc, #384]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 800643e:	f043 0304 	orr.w	r3, r3, #4
 8006442:	6713      	str	r3, [r2, #112]	; 0x70
 8006444:	4b5e      	ldr	r3, [pc, #376]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 8006446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006448:	4a5d      	ldr	r2, [pc, #372]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 800644a:	f043 0301 	orr.w	r3, r3, #1
 800644e:	6713      	str	r3, [r2, #112]	; 0x70
 8006450:	e00b      	b.n	800646a <HAL_RCC_OscConfig+0x376>
 8006452:	4b5b      	ldr	r3, [pc, #364]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 8006454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006456:	4a5a      	ldr	r2, [pc, #360]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 8006458:	f023 0301 	bic.w	r3, r3, #1
 800645c:	6713      	str	r3, [r2, #112]	; 0x70
 800645e:	4b58      	ldr	r3, [pc, #352]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 8006460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006462:	4a57      	ldr	r2, [pc, #348]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 8006464:	f023 0304 	bic.w	r3, r3, #4
 8006468:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d015      	beq.n	800649e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006472:	f7fc ff31 	bl	80032d8 <HAL_GetTick>
 8006476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006478:	e00a      	b.n	8006490 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800647a:	f7fc ff2d 	bl	80032d8 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	f241 3288 	movw	r2, #5000	; 0x1388
 8006488:	4293      	cmp	r3, r2
 800648a:	d901      	bls.n	8006490 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e0ce      	b.n	800662e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006490:	4b4b      	ldr	r3, [pc, #300]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 8006492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b00      	cmp	r3, #0
 800649a:	d0ee      	beq.n	800647a <HAL_RCC_OscConfig+0x386>
 800649c:	e014      	b.n	80064c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800649e:	f7fc ff1b 	bl	80032d8 <HAL_GetTick>
 80064a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064a4:	e00a      	b.n	80064bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064a6:	f7fc ff17 	bl	80032d8 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d901      	bls.n	80064bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e0b8      	b.n	800662e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064bc:	4b40      	ldr	r3, [pc, #256]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 80064be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1ee      	bne.n	80064a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d105      	bne.n	80064da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ce:	4b3c      	ldr	r3, [pc, #240]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	4a3b      	ldr	r2, [pc, #236]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 80064d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 80a4 	beq.w	800662c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064e4:	4b36      	ldr	r3, [pc, #216]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f003 030c 	and.w	r3, r3, #12
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d06b      	beq.n	80065c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d149      	bne.n	800658c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064f8:	4b31      	ldr	r3, [pc, #196]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a30      	ldr	r2, [pc, #192]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 80064fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006504:	f7fc fee8 	bl	80032d8 <HAL_GetTick>
 8006508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800650a:	e008      	b.n	800651e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800650c:	f7fc fee4 	bl	80032d8 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e087      	b.n	800662e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800651e:	4b28      	ldr	r3, [pc, #160]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1f0      	bne.n	800650c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69da      	ldr	r2, [r3, #28]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006538:	019b      	lsls	r3, r3, #6
 800653a:	431a      	orrs	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	085b      	lsrs	r3, r3, #1
 8006542:	3b01      	subs	r3, #1
 8006544:	041b      	lsls	r3, r3, #16
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	061b      	lsls	r3, r3, #24
 800654e:	4313      	orrs	r3, r2
 8006550:	4a1b      	ldr	r2, [pc, #108]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 8006552:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006556:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006558:	4b19      	ldr	r3, [pc, #100]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a18      	ldr	r2, [pc, #96]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 800655e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006564:	f7fc feb8 	bl	80032d8 <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800656c:	f7fc feb4 	bl	80032d8 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e057      	b.n	800662e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800657e:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d0f0      	beq.n	800656c <HAL_RCC_OscConfig+0x478>
 800658a:	e04f      	b.n	800662c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800658c:	4b0c      	ldr	r3, [pc, #48]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a0b      	ldr	r2, [pc, #44]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 8006592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006598:	f7fc fe9e 	bl	80032d8 <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a0:	f7fc fe9a 	bl	80032d8 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e03d      	b.n	800662e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065b2:	4b03      	ldr	r3, [pc, #12]	; (80065c0 <HAL_RCC_OscConfig+0x4cc>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1f0      	bne.n	80065a0 <HAL_RCC_OscConfig+0x4ac>
 80065be:	e035      	b.n	800662c <HAL_RCC_OscConfig+0x538>
 80065c0:	40023800 	.word	0x40023800
 80065c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80065c8:	4b1b      	ldr	r3, [pc, #108]	; (8006638 <HAL_RCC_OscConfig+0x544>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d028      	beq.n	8006628 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d121      	bne.n	8006628 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d11a      	bne.n	8006628 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065f8:	4013      	ands	r3, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80065fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006600:	4293      	cmp	r3, r2
 8006602:	d111      	bne.n	8006628 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660e:	085b      	lsrs	r3, r3, #1
 8006610:	3b01      	subs	r3, #1
 8006612:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006614:	429a      	cmp	r2, r3
 8006616:	d107      	bne.n	8006628 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006622:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006624:	429a      	cmp	r2, r3
 8006626:	d001      	beq.n	800662c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e000      	b.n	800662e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	40023800 	.word	0x40023800

0800663c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e0d0      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006654:	4b6a      	ldr	r3, [pc, #424]	; (8006800 <HAL_RCC_ClockConfig+0x1c4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 030f 	and.w	r3, r3, #15
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	429a      	cmp	r2, r3
 8006660:	d910      	bls.n	8006684 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006662:	4b67      	ldr	r3, [pc, #412]	; (8006800 <HAL_RCC_ClockConfig+0x1c4>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f023 020f 	bic.w	r2, r3, #15
 800666a:	4965      	ldr	r1, [pc, #404]	; (8006800 <HAL_RCC_ClockConfig+0x1c4>)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	4313      	orrs	r3, r2
 8006670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006672:	4b63      	ldr	r3, [pc, #396]	; (8006800 <HAL_RCC_ClockConfig+0x1c4>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d001      	beq.n	8006684 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e0b8      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d020      	beq.n	80066d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800669c:	4b59      	ldr	r3, [pc, #356]	; (8006804 <HAL_RCC_ClockConfig+0x1c8>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	4a58      	ldr	r2, [pc, #352]	; (8006804 <HAL_RCC_ClockConfig+0x1c8>)
 80066a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0308 	and.w	r3, r3, #8
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066b4:	4b53      	ldr	r3, [pc, #332]	; (8006804 <HAL_RCC_ClockConfig+0x1c8>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4a52      	ldr	r2, [pc, #328]	; (8006804 <HAL_RCC_ClockConfig+0x1c8>)
 80066ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066c0:	4b50      	ldr	r3, [pc, #320]	; (8006804 <HAL_RCC_ClockConfig+0x1c8>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	494d      	ldr	r1, [pc, #308]	; (8006804 <HAL_RCC_ClockConfig+0x1c8>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d040      	beq.n	8006760 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d107      	bne.n	80066f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066e6:	4b47      	ldr	r3, [pc, #284]	; (8006804 <HAL_RCC_ClockConfig+0x1c8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d115      	bne.n	800671e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e07f      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d107      	bne.n	800670e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066fe:	4b41      	ldr	r3, [pc, #260]	; (8006804 <HAL_RCC_ClockConfig+0x1c8>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e073      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800670e:	4b3d      	ldr	r3, [pc, #244]	; (8006804 <HAL_RCC_ClockConfig+0x1c8>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e06b      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800671e:	4b39      	ldr	r3, [pc, #228]	; (8006804 <HAL_RCC_ClockConfig+0x1c8>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f023 0203 	bic.w	r2, r3, #3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	4936      	ldr	r1, [pc, #216]	; (8006804 <HAL_RCC_ClockConfig+0x1c8>)
 800672c:	4313      	orrs	r3, r2
 800672e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006730:	f7fc fdd2 	bl	80032d8 <HAL_GetTick>
 8006734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006736:	e00a      	b.n	800674e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006738:	f7fc fdce 	bl	80032d8 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	f241 3288 	movw	r2, #5000	; 0x1388
 8006746:	4293      	cmp	r3, r2
 8006748:	d901      	bls.n	800674e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e053      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800674e:	4b2d      	ldr	r3, [pc, #180]	; (8006804 <HAL_RCC_ClockConfig+0x1c8>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f003 020c 	and.w	r2, r3, #12
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	429a      	cmp	r2, r3
 800675e:	d1eb      	bne.n	8006738 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006760:	4b27      	ldr	r3, [pc, #156]	; (8006800 <HAL_RCC_ClockConfig+0x1c4>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 030f 	and.w	r3, r3, #15
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d210      	bcs.n	8006790 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800676e:	4b24      	ldr	r3, [pc, #144]	; (8006800 <HAL_RCC_ClockConfig+0x1c4>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f023 020f 	bic.w	r2, r3, #15
 8006776:	4922      	ldr	r1, [pc, #136]	; (8006800 <HAL_RCC_ClockConfig+0x1c4>)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	4313      	orrs	r3, r2
 800677c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800677e:	4b20      	ldr	r3, [pc, #128]	; (8006800 <HAL_RCC_ClockConfig+0x1c4>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 030f 	and.w	r3, r3, #15
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	429a      	cmp	r2, r3
 800678a:	d001      	beq.n	8006790 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e032      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b00      	cmp	r3, #0
 800679a:	d008      	beq.n	80067ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800679c:	4b19      	ldr	r3, [pc, #100]	; (8006804 <HAL_RCC_ClockConfig+0x1c8>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	4916      	ldr	r1, [pc, #88]	; (8006804 <HAL_RCC_ClockConfig+0x1c8>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0308 	and.w	r3, r3, #8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d009      	beq.n	80067ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80067ba:	4b12      	ldr	r3, [pc, #72]	; (8006804 <HAL_RCC_ClockConfig+0x1c8>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	490e      	ldr	r1, [pc, #56]	; (8006804 <HAL_RCC_ClockConfig+0x1c8>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067ce:	f000 f821 	bl	8006814 <HAL_RCC_GetSysClockFreq>
 80067d2:	4601      	mov	r1, r0
 80067d4:	4b0b      	ldr	r3, [pc, #44]	; (8006804 <HAL_RCC_ClockConfig+0x1c8>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	091b      	lsrs	r3, r3, #4
 80067da:	f003 030f 	and.w	r3, r3, #15
 80067de:	4a0a      	ldr	r2, [pc, #40]	; (8006808 <HAL_RCC_ClockConfig+0x1cc>)
 80067e0:	5cd3      	ldrb	r3, [r2, r3]
 80067e2:	fa21 f303 	lsr.w	r3, r1, r3
 80067e6:	4a09      	ldr	r2, [pc, #36]	; (800680c <HAL_RCC_ClockConfig+0x1d0>)
 80067e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80067ea:	4b09      	ldr	r3, [pc, #36]	; (8006810 <HAL_RCC_ClockConfig+0x1d4>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fc fbbc 	bl	8002f6c <HAL_InitTick>

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	40023c00 	.word	0x40023c00
 8006804:	40023800 	.word	0x40023800
 8006808:	0802869c 	.word	0x0802869c
 800680c:	2000002c 	.word	0x2000002c
 8006810:	20000030 	.word	0x20000030

08006814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	607b      	str	r3, [r7, #4]
 800681e:	2300      	movs	r3, #0
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	2300      	movs	r3, #0
 8006824:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006826:	2300      	movs	r3, #0
 8006828:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800682a:	4b50      	ldr	r3, [pc, #320]	; (800696c <HAL_RCC_GetSysClockFreq+0x158>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 030c 	and.w	r3, r3, #12
 8006832:	2b04      	cmp	r3, #4
 8006834:	d007      	beq.n	8006846 <HAL_RCC_GetSysClockFreq+0x32>
 8006836:	2b08      	cmp	r3, #8
 8006838:	d008      	beq.n	800684c <HAL_RCC_GetSysClockFreq+0x38>
 800683a:	2b00      	cmp	r3, #0
 800683c:	f040 808d 	bne.w	800695a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006840:	4b4b      	ldr	r3, [pc, #300]	; (8006970 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006842:	60bb      	str	r3, [r7, #8]
      break;
 8006844:	e08c      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006846:	4b4b      	ldr	r3, [pc, #300]	; (8006974 <HAL_RCC_GetSysClockFreq+0x160>)
 8006848:	60bb      	str	r3, [r7, #8]
      break;
 800684a:	e089      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800684c:	4b47      	ldr	r3, [pc, #284]	; (800696c <HAL_RCC_GetSysClockFreq+0x158>)
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006854:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006856:	4b45      	ldr	r3, [pc, #276]	; (800696c <HAL_RCC_GetSysClockFreq+0x158>)
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d023      	beq.n	80068aa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006862:	4b42      	ldr	r3, [pc, #264]	; (800696c <HAL_RCC_GetSysClockFreq+0x158>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	099b      	lsrs	r3, r3, #6
 8006868:	f04f 0400 	mov.w	r4, #0
 800686c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006870:	f04f 0200 	mov.w	r2, #0
 8006874:	ea03 0501 	and.w	r5, r3, r1
 8006878:	ea04 0602 	and.w	r6, r4, r2
 800687c:	4a3d      	ldr	r2, [pc, #244]	; (8006974 <HAL_RCC_GetSysClockFreq+0x160>)
 800687e:	fb02 f106 	mul.w	r1, r2, r6
 8006882:	2200      	movs	r2, #0
 8006884:	fb02 f205 	mul.w	r2, r2, r5
 8006888:	440a      	add	r2, r1
 800688a:	493a      	ldr	r1, [pc, #232]	; (8006974 <HAL_RCC_GetSysClockFreq+0x160>)
 800688c:	fba5 0101 	umull	r0, r1, r5, r1
 8006890:	1853      	adds	r3, r2, r1
 8006892:	4619      	mov	r1, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f04f 0400 	mov.w	r4, #0
 800689a:	461a      	mov	r2, r3
 800689c:	4623      	mov	r3, r4
 800689e:	f7f9 fd07 	bl	80002b0 <__aeabi_uldivmod>
 80068a2:	4603      	mov	r3, r0
 80068a4:	460c      	mov	r4, r1
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	e049      	b.n	800693e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068aa:	4b30      	ldr	r3, [pc, #192]	; (800696c <HAL_RCC_GetSysClockFreq+0x158>)
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	099b      	lsrs	r3, r3, #6
 80068b0:	f04f 0400 	mov.w	r4, #0
 80068b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	ea03 0501 	and.w	r5, r3, r1
 80068c0:	ea04 0602 	and.w	r6, r4, r2
 80068c4:	4629      	mov	r1, r5
 80068c6:	4632      	mov	r2, r6
 80068c8:	f04f 0300 	mov.w	r3, #0
 80068cc:	f04f 0400 	mov.w	r4, #0
 80068d0:	0154      	lsls	r4, r2, #5
 80068d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80068d6:	014b      	lsls	r3, r1, #5
 80068d8:	4619      	mov	r1, r3
 80068da:	4622      	mov	r2, r4
 80068dc:	1b49      	subs	r1, r1, r5
 80068de:	eb62 0206 	sbc.w	r2, r2, r6
 80068e2:	f04f 0300 	mov.w	r3, #0
 80068e6:	f04f 0400 	mov.w	r4, #0
 80068ea:	0194      	lsls	r4, r2, #6
 80068ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80068f0:	018b      	lsls	r3, r1, #6
 80068f2:	1a5b      	subs	r3, r3, r1
 80068f4:	eb64 0402 	sbc.w	r4, r4, r2
 80068f8:	f04f 0100 	mov.w	r1, #0
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	00e2      	lsls	r2, r4, #3
 8006902:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006906:	00d9      	lsls	r1, r3, #3
 8006908:	460b      	mov	r3, r1
 800690a:	4614      	mov	r4, r2
 800690c:	195b      	adds	r3, r3, r5
 800690e:	eb44 0406 	adc.w	r4, r4, r6
 8006912:	f04f 0100 	mov.w	r1, #0
 8006916:	f04f 0200 	mov.w	r2, #0
 800691a:	02a2      	lsls	r2, r4, #10
 800691c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006920:	0299      	lsls	r1, r3, #10
 8006922:	460b      	mov	r3, r1
 8006924:	4614      	mov	r4, r2
 8006926:	4618      	mov	r0, r3
 8006928:	4621      	mov	r1, r4
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f04f 0400 	mov.w	r4, #0
 8006930:	461a      	mov	r2, r3
 8006932:	4623      	mov	r3, r4
 8006934:	f7f9 fcbc 	bl	80002b0 <__aeabi_uldivmod>
 8006938:	4603      	mov	r3, r0
 800693a:	460c      	mov	r4, r1
 800693c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800693e:	4b0b      	ldr	r3, [pc, #44]	; (800696c <HAL_RCC_GetSysClockFreq+0x158>)
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	0c1b      	lsrs	r3, r3, #16
 8006944:	f003 0303 	and.w	r3, r3, #3
 8006948:	3301      	adds	r3, #1
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	fbb2 f3f3 	udiv	r3, r2, r3
 8006956:	60bb      	str	r3, [r7, #8]
      break;
 8006958:	e002      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800695a:	4b05      	ldr	r3, [pc, #20]	; (8006970 <HAL_RCC_GetSysClockFreq+0x15c>)
 800695c:	60bb      	str	r3, [r7, #8]
      break;
 800695e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006960:	68bb      	ldr	r3, [r7, #8]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800696a:	bf00      	nop
 800696c:	40023800 	.word	0x40023800
 8006970:	00f42400 	.word	0x00f42400
 8006974:	017d7840 	.word	0x017d7840

08006978 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800697c:	4b03      	ldr	r3, [pc, #12]	; (800698c <HAL_RCC_GetHCLKFreq+0x14>)
 800697e:	681b      	ldr	r3, [r3, #0]
}
 8006980:	4618      	mov	r0, r3
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	2000002c 	.word	0x2000002c

08006990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006994:	f7ff fff0 	bl	8006978 <HAL_RCC_GetHCLKFreq>
 8006998:	4601      	mov	r1, r0
 800699a:	4b05      	ldr	r3, [pc, #20]	; (80069b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	0a9b      	lsrs	r3, r3, #10
 80069a0:	f003 0307 	and.w	r3, r3, #7
 80069a4:	4a03      	ldr	r2, [pc, #12]	; (80069b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069a6:	5cd3      	ldrb	r3, [r2, r3]
 80069a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	40023800 	.word	0x40023800
 80069b4:	080286ac 	.word	0x080286ac

080069b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069bc:	f7ff ffdc 	bl	8006978 <HAL_RCC_GetHCLKFreq>
 80069c0:	4601      	mov	r1, r0
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	0b5b      	lsrs	r3, r3, #13
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	4a03      	ldr	r2, [pc, #12]	; (80069dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80069ce:	5cd3      	ldrb	r3, [r2, r3]
 80069d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40023800 	.word	0x40023800
 80069dc:	080286ac 	.word	0x080286ac

080069e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	220f      	movs	r2, #15
 80069ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80069f0:	4b12      	ldr	r3, [pc, #72]	; (8006a3c <HAL_RCC_GetClockConfig+0x5c>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f003 0203 	and.w	r2, r3, #3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80069fc:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <HAL_RCC_GetClockConfig+0x5c>)
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a08:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <HAL_RCC_GetClockConfig+0x5c>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006a14:	4b09      	ldr	r3, [pc, #36]	; (8006a3c <HAL_RCC_GetClockConfig+0x5c>)
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	08db      	lsrs	r3, r3, #3
 8006a1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a22:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <HAL_RCC_GetClockConfig+0x60>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 020f 	and.w	r2, r3, #15
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	601a      	str	r2, [r3, #0]
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	40023c00 	.word	0x40023c00

08006a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006a54:	2300      	movs	r3, #0
 8006a56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d012      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a6c:	4b69      	ldr	r3, [pc, #420]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	4a68      	ldr	r2, [pc, #416]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006a76:	6093      	str	r3, [r2, #8]
 8006a78:	4b66      	ldr	r3, [pc, #408]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a80:	4964      	ldr	r1, [pc, #400]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d017      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a9e:	4b5d      	ldr	r3, [pc, #372]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aac:	4959      	ldr	r1, [pc, #356]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006abc:	d101      	bne.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006aca:	2301      	movs	r3, #1
 8006acc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d017      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006ada:	4b4e      	ldr	r3, [pc, #312]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ae0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae8:	494a      	ldr	r1, [pc, #296]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006af8:	d101      	bne.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006afa:	2301      	movs	r3, #1
 8006afc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006b06:	2301      	movs	r3, #1
 8006b08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006b16:	2301      	movs	r3, #1
 8006b18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 808b 	beq.w	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b28:	4b3a      	ldr	r3, [pc, #232]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	4a39      	ldr	r2, [pc, #228]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b32:	6413      	str	r3, [r2, #64]	; 0x40
 8006b34:	4b37      	ldr	r3, [pc, #220]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b3c:	60bb      	str	r3, [r7, #8]
 8006b3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006b40:	4b35      	ldr	r3, [pc, #212]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a34      	ldr	r2, [pc, #208]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b4c:	f7fc fbc4 	bl	80032d8 <HAL_GetTick>
 8006b50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006b52:	e008      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b54:	f7fc fbc0 	bl	80032d8 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b64      	cmp	r3, #100	; 0x64
 8006b60:	d901      	bls.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e355      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006b66:	4b2c      	ldr	r3, [pc, #176]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0f0      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b72:	4b28      	ldr	r3, [pc, #160]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d035      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d02e      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b90:	4b20      	ldr	r3, [pc, #128]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b9a:	4b1e      	ldr	r3, [pc, #120]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9e:	4a1d      	ldr	r2, [pc, #116]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ba4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ba6:	4b1b      	ldr	r3, [pc, #108]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006baa:	4a1a      	ldr	r2, [pc, #104]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006bb2:	4a18      	ldr	r2, [pc, #96]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006bb8:	4b16      	ldr	r3, [pc, #88]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d114      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc4:	f7fc fb88 	bl	80032d8 <HAL_GetTick>
 8006bc8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bca:	e00a      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bcc:	f7fc fb84 	bl	80032d8 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e317      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be2:	4b0c      	ldr	r3, [pc, #48]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d0ee      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bfa:	d111      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006bfc:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c08:	4b04      	ldr	r3, [pc, #16]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006c0a:	400b      	ands	r3, r1
 8006c0c:	4901      	ldr	r1, [pc, #4]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	608b      	str	r3, [r1, #8]
 8006c12:	e00b      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006c14:	40023800 	.word	0x40023800
 8006c18:	40007000 	.word	0x40007000
 8006c1c:	0ffffcff 	.word	0x0ffffcff
 8006c20:	4bb0      	ldr	r3, [pc, #704]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	4aaf      	ldr	r2, [pc, #700]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c2a:	6093      	str	r3, [r2, #8]
 8006c2c:	4bad      	ldr	r3, [pc, #692]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c38:	49aa      	ldr	r1, [pc, #680]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0310 	and.w	r3, r3, #16
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d010      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c4a:	4ba6      	ldr	r3, [pc, #664]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c50:	4aa4      	ldr	r2, [pc, #656]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006c5a:	4ba2      	ldr	r3, [pc, #648]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	499f      	ldr	r1, [pc, #636]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00a      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c78:	4b9a      	ldr	r3, [pc, #616]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c86:	4997      	ldr	r1, [pc, #604]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c9a:	4b92      	ldr	r3, [pc, #584]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ca8:	498e      	ldr	r1, [pc, #568]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00a      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006cbc:	4b89      	ldr	r3, [pc, #548]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cca:	4986      	ldr	r1, [pc, #536]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00a      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006cde:	4b81      	ldr	r3, [pc, #516]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cec:	497d      	ldr	r1, [pc, #500]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00a      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d00:	4b78      	ldr	r3, [pc, #480]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d06:	f023 0203 	bic.w	r2, r3, #3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0e:	4975      	ldr	r1, [pc, #468]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d22:	4b70      	ldr	r3, [pc, #448]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d28:	f023 020c 	bic.w	r2, r3, #12
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d30:	496c      	ldr	r1, [pc, #432]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d44:	4b67      	ldr	r3, [pc, #412]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d52:	4964      	ldr	r1, [pc, #400]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d66:	4b5f      	ldr	r3, [pc, #380]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d74:	495b      	ldr	r1, [pc, #364]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00a      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006d88:	4b56      	ldr	r3, [pc, #344]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d96:	4953      	ldr	r1, [pc, #332]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006daa:	4b4e      	ldr	r3, [pc, #312]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db8:	494a      	ldr	r1, [pc, #296]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00a      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006dcc:	4b45      	ldr	r3, [pc, #276]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dda:	4942      	ldr	r1, [pc, #264]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006dee:	4b3d      	ldr	r3, [pc, #244]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dfc:	4939      	ldr	r1, [pc, #228]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00a      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e10:	4b34      	ldr	r3, [pc, #208]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e1e:	4931      	ldr	r1, [pc, #196]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d011      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006e32:	4b2c      	ldr	r3, [pc, #176]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e38:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e40:	4928      	ldr	r1, [pc, #160]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e50:	d101      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006e52:	2301      	movs	r3, #1
 8006e54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0308 	and.w	r3, r3, #8
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006e62:	2301      	movs	r3, #1
 8006e64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e72:	4b1c      	ldr	r3, [pc, #112]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e78:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e80:	4918      	ldr	r1, [pc, #96]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00b      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006e94:	4b13      	ldr	r3, [pc, #76]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ea4:	490f      	ldr	r1, [pc, #60]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d005      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006eba:	f040 80d8 	bne.w	800706e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ebe:	4b09      	ldr	r3, [pc, #36]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a08      	ldr	r2, [pc, #32]	; (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ec4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eca:	f7fc fa05 	bl	80032d8 <HAL_GetTick>
 8006ece:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ed0:	e00a      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ed2:	f7fc fa01 	bl	80032d8 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	2b64      	cmp	r3, #100	; 0x64
 8006ede:	d903      	bls.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e196      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006ee4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ee8:	4b6c      	ldr	r3, [pc, #432]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1ee      	bne.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d021      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d11d      	bne.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006f08:	4b64      	ldr	r3, [pc, #400]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f0e:	0c1b      	lsrs	r3, r3, #16
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f16:	4b61      	ldr	r3, [pc, #388]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f1c:	0e1b      	lsrs	r3, r3, #24
 8006f1e:	f003 030f 	and.w	r3, r3, #15
 8006f22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	019a      	lsls	r2, r3, #6
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	041b      	lsls	r3, r3, #16
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	061b      	lsls	r3, r3, #24
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	071b      	lsls	r3, r3, #28
 8006f3c:	4957      	ldr	r1, [pc, #348]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d004      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f58:	d00a      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d02e      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f6e:	d129      	bne.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006f70:	4b4a      	ldr	r3, [pc, #296]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f76:	0c1b      	lsrs	r3, r3, #16
 8006f78:	f003 0303 	and.w	r3, r3, #3
 8006f7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f7e:	4b47      	ldr	r3, [pc, #284]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f84:	0f1b      	lsrs	r3, r3, #28
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	019a      	lsls	r2, r3, #6
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	041b      	lsls	r3, r3, #16
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	061b      	lsls	r3, r3, #24
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	071b      	lsls	r3, r3, #28
 8006fa4:	493d      	ldr	r1, [pc, #244]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006fac:	4b3b      	ldr	r3, [pc, #236]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fb2:	f023 021f 	bic.w	r2, r3, #31
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	4937      	ldr	r1, [pc, #220]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d01d      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006fd0:	4b32      	ldr	r3, [pc, #200]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fd6:	0e1b      	lsrs	r3, r3, #24
 8006fd8:	f003 030f 	and.w	r3, r3, #15
 8006fdc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006fde:	4b2f      	ldr	r3, [pc, #188]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fe4:	0f1b      	lsrs	r3, r3, #28
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	019a      	lsls	r2, r3, #6
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	041b      	lsls	r3, r3, #16
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	061b      	lsls	r3, r3, #24
 8006ffe:	431a      	orrs	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	071b      	lsls	r3, r3, #28
 8007004:	4925      	ldr	r1, [pc, #148]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d011      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	019a      	lsls	r2, r3, #6
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	041b      	lsls	r3, r3, #16
 8007024:	431a      	orrs	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	061b      	lsls	r3, r3, #24
 800702c:	431a      	orrs	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	071b      	lsls	r3, r3, #28
 8007034:	4919      	ldr	r1, [pc, #100]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007036:	4313      	orrs	r3, r2
 8007038:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800703c:	4b17      	ldr	r3, [pc, #92]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a16      	ldr	r2, [pc, #88]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007042:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007046:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007048:	f7fc f946 	bl	80032d8 <HAL_GetTick>
 800704c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800704e:	e008      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007050:	f7fc f942 	bl	80032d8 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b64      	cmp	r3, #100	; 0x64
 800705c:	d901      	bls.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e0d7      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007062:	4b0e      	ldr	r3, [pc, #56]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0f0      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	2b01      	cmp	r3, #1
 8007072:	f040 80cd 	bne.w	8007210 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007076:	4b09      	ldr	r3, [pc, #36]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a08      	ldr	r2, [pc, #32]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800707c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007082:	f7fc f929 	bl	80032d8 <HAL_GetTick>
 8007086:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007088:	e00a      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800708a:	f7fc f925 	bl	80032d8 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b64      	cmp	r3, #100	; 0x64
 8007096:	d903      	bls.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e0ba      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800709c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070a0:	4b5e      	ldr	r3, [pc, #376]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ac:	d0ed      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d009      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d02e      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d12a      	bne.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80070d6:	4b51      	ldr	r3, [pc, #324]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80070d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070dc:	0c1b      	lsrs	r3, r3, #16
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070e4:	4b4d      	ldr	r3, [pc, #308]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80070e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ea:	0f1b      	lsrs	r3, r3, #28
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	019a      	lsls	r2, r3, #6
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	041b      	lsls	r3, r3, #16
 80070fc:	431a      	orrs	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	061b      	lsls	r3, r3, #24
 8007104:	431a      	orrs	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	071b      	lsls	r3, r3, #28
 800710a:	4944      	ldr	r1, [pc, #272]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800710c:	4313      	orrs	r3, r2
 800710e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007112:	4b42      	ldr	r3, [pc, #264]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007118:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007120:	3b01      	subs	r3, #1
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	493d      	ldr	r1, [pc, #244]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007126:	4313      	orrs	r3, r2
 8007128:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d022      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800713c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007140:	d11d      	bne.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007142:	4b36      	ldr	r3, [pc, #216]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007148:	0e1b      	lsrs	r3, r3, #24
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007150:	4b32      	ldr	r3, [pc, #200]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007156:	0f1b      	lsrs	r3, r3, #28
 8007158:	f003 0307 	and.w	r3, r3, #7
 800715c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	019a      	lsls	r2, r3, #6
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	041b      	lsls	r3, r3, #16
 800716a:	431a      	orrs	r2, r3
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	061b      	lsls	r3, r3, #24
 8007170:	431a      	orrs	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	071b      	lsls	r3, r3, #28
 8007176:	4929      	ldr	r1, [pc, #164]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007178:	4313      	orrs	r3, r2
 800717a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0308 	and.w	r3, r3, #8
 8007186:	2b00      	cmp	r3, #0
 8007188:	d028      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800718a:	4b24      	ldr	r3, [pc, #144]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800718c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007190:	0e1b      	lsrs	r3, r3, #24
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007198:	4b20      	ldr	r3, [pc, #128]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800719a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800719e:	0c1b      	lsrs	r3, r3, #16
 80071a0:	f003 0303 	and.w	r3, r3, #3
 80071a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	019a      	lsls	r2, r3, #6
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	041b      	lsls	r3, r3, #16
 80071b0:	431a      	orrs	r2, r3
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	061b      	lsls	r3, r3, #24
 80071b6:	431a      	orrs	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	071b      	lsls	r3, r3, #28
 80071be:	4917      	ldr	r1, [pc, #92]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80071c6:	4b15      	ldr	r3, [pc, #84]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80071c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	4911      	ldr	r1, [pc, #68]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80071dc:	4b0f      	ldr	r3, [pc, #60]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a0e      	ldr	r2, [pc, #56]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80071e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071e8:	f7fc f876 	bl	80032d8 <HAL_GetTick>
 80071ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071ee:	e008      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80071f0:	f7fc f872 	bl	80032d8 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b64      	cmp	r3, #100	; 0x64
 80071fc:	d901      	bls.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e007      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007202:	4b06      	ldr	r3, [pc, #24]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800720a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800720e:	d1ef      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3720      	adds	r7, #32
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	40023800 	.word	0x40023800

08007220 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007228:	2300      	movs	r3, #0
 800722a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007230:	2300      	movs	r3, #0
 8007232:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007234:	2300      	movs	r3, #0
 8007236:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800723e:	f040 8086 	bne.w	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007242:	4b8d      	ldr	r3, [pc, #564]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007248:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007250:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007258:	d03e      	beq.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800725a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800725e:	d073      	beq.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8007260:	2b00      	cmp	r3, #0
 8007262:	d000      	beq.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007264:	e074      	b.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007266:	4b84      	ldr	r3, [pc, #528]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d108      	bne.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007272:	4b81      	ldr	r3, [pc, #516]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800727a:	4a80      	ldr	r2, [pc, #512]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800727c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007280:	613b      	str	r3, [r7, #16]
 8007282:	e007      	b.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007284:	4b7c      	ldr	r3, [pc, #496]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800728c:	4a7c      	ldr	r2, [pc, #496]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800728e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007292:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007294:	4b78      	ldr	r3, [pc, #480]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800729a:	0e1b      	lsrs	r3, r3, #24
 800729c:	f003 030f 	and.w	r3, r3, #15
 80072a0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80072a2:	4b75      	ldr	r3, [pc, #468]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80072a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a8:	099b      	lsrs	r3, r3, #6
 80072aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	fb02 f203 	mul.w	r2, r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ba:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80072bc:	4b6e      	ldr	r3, [pc, #440]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80072be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072c2:	0a1b      	lsrs	r3, r3, #8
 80072c4:	f003 031f 	and.w	r3, r3, #31
 80072c8:	3301      	adds	r3, #1
 80072ca:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d4:	617b      	str	r3, [r7, #20]
        break;
 80072d6:	e03b      	b.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80072d8:	4b67      	ldr	r3, [pc, #412]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d108      	bne.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80072e4:	4b64      	ldr	r3, [pc, #400]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072ec:	4a63      	ldr	r2, [pc, #396]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80072ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f2:	613b      	str	r3, [r7, #16]
 80072f4:	e007      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80072f6:	4b60      	ldr	r3, [pc, #384]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072fe:	4a60      	ldr	r2, [pc, #384]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007300:	fbb2 f3f3 	udiv	r3, r2, r3
 8007304:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007306:	4b5c      	ldr	r3, [pc, #368]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800730c:	0e1b      	lsrs	r3, r3, #24
 800730e:	f003 030f 	and.w	r3, r3, #15
 8007312:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007314:	4b58      	ldr	r3, [pc, #352]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800731a:	099b      	lsrs	r3, r3, #6
 800731c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	fb02 f203 	mul.w	r2, r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	fbb2 f3f3 	udiv	r3, r2, r3
 800732c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800732e:	4b52      	ldr	r3, [pc, #328]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007334:	f003 031f 	and.w	r3, r3, #31
 8007338:	3301      	adds	r3, #1
 800733a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	fbb2 f3f3 	udiv	r3, r2, r3
 8007344:	617b      	str	r3, [r7, #20]
        break;
 8007346:	e003      	b.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007348:	4b4e      	ldr	r3, [pc, #312]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800734a:	617b      	str	r3, [r7, #20]
        break;
 800734c:	e000      	b.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 800734e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007356:	f040 8086 	bne.w	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800735a:	4b47      	ldr	r3, [pc, #284]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800735c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007360:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007368:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007370:	d03e      	beq.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007372:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007376:	d073      	beq.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d000      	beq.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800737c:	e074      	b.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800737e:	4b3e      	ldr	r3, [pc, #248]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d108      	bne.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800738a:	4b3b      	ldr	r3, [pc, #236]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007392:	4a3a      	ldr	r2, [pc, #232]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007394:	fbb2 f3f3 	udiv	r3, r2, r3
 8007398:	613b      	str	r3, [r7, #16]
 800739a:	e007      	b.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800739c:	4b36      	ldr	r3, [pc, #216]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073a4:	4a36      	ldr	r2, [pc, #216]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80073a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073aa:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80073ac:	4b32      	ldr	r3, [pc, #200]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80073ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b2:	0e1b      	lsrs	r3, r3, #24
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80073ba:	4b2f      	ldr	r3, [pc, #188]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80073bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c0:	099b      	lsrs	r3, r3, #6
 80073c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	fb02 f203 	mul.w	r2, r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80073d4:	4b28      	ldr	r3, [pc, #160]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80073d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073da:	0a1b      	lsrs	r3, r3, #8
 80073dc:	f003 031f 	and.w	r3, r3, #31
 80073e0:	3301      	adds	r3, #1
 80073e2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ec:	617b      	str	r3, [r7, #20]
        break;
 80073ee:	e03b      	b.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80073f0:	4b21      	ldr	r3, [pc, #132]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d108      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80073fc:	4b1e      	ldr	r3, [pc, #120]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007404:	4a1d      	ldr	r2, [pc, #116]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007406:	fbb2 f3f3 	udiv	r3, r2, r3
 800740a:	613b      	str	r3, [r7, #16]
 800740c:	e007      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800740e:	4b1a      	ldr	r3, [pc, #104]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007416:	4a1a      	ldr	r2, [pc, #104]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007418:	fbb2 f3f3 	udiv	r3, r2, r3
 800741c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800741e:	4b16      	ldr	r3, [pc, #88]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007424:	0e1b      	lsrs	r3, r3, #24
 8007426:	f003 030f 	and.w	r3, r3, #15
 800742a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800742c:	4b12      	ldr	r3, [pc, #72]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800742e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007432:	099b      	lsrs	r3, r3, #6
 8007434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	fb02 f203 	mul.w	r2, r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	fbb2 f3f3 	udiv	r3, r2, r3
 8007444:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007446:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800744c:	f003 031f 	and.w	r3, r3, #31
 8007450:	3301      	adds	r3, #1
 8007452:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	fbb2 f3f3 	udiv	r3, r2, r3
 800745c:	617b      	str	r3, [r7, #20]
        break;
 800745e:	e003      	b.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007460:	4b08      	ldr	r3, [pc, #32]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007462:	617b      	str	r3, [r7, #20]
        break;
 8007464:	e000      	b.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8007466:	bf00      	nop

  return frequency;
 8007468:	697b      	ldr	r3, [r7, #20]
}
 800746a:	4618      	mov	r0, r3
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	40023800 	.word	0x40023800
 800747c:	00f42400 	.word	0x00f42400
 8007480:	017d7840 	.word	0x017d7840
 8007484:	00bb8000 	.word	0x00bb8000

08007488 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e06b      	b.n	8007572 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	7f5b      	ldrb	r3, [r3, #29]
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d105      	bne.n	80074b0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fb f94a 	bl	8002744 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	22ca      	movs	r2, #202	; 0xca
 80074bc:	625a      	str	r2, [r3, #36]	; 0x24
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2253      	movs	r2, #83	; 0x53
 80074c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fb00 	bl	8007acc <RTC_EnterInitMode>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d008      	beq.n	80074e4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	22ff      	movs	r2, #255	; 0xff
 80074d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2204      	movs	r2, #4
 80074de:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e046      	b.n	8007572 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6899      	ldr	r1, [r3, #8]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	4b23      	ldr	r3, [pc, #140]	; (800757c <HAL_RTC_Init+0xf4>)
 80074f0:	400b      	ands	r3, r1
 80074f2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6899      	ldr	r1, [r3, #8]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	431a      	orrs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	431a      	orrs	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	68d2      	ldr	r2, [r2, #12]
 800751a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6919      	ldr	r1, [r3, #16]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	041a      	lsls	r2, r3, #16
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	430a      	orrs	r2, r1
 800752e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68da      	ldr	r2, [r3, #12]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800753e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f022 0208 	bic.w	r2, r2, #8
 800754e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	699a      	ldr	r2, [r3, #24]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	22ff      	movs	r2, #255	; 0xff
 8007568:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007570:	2300      	movs	r3, #0
  }
}
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	ff8fffbf 	.word	0xff8fffbf

08007580 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007580:	b590      	push	{r4, r7, lr}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800758c:	2300      	movs	r3, #0
 800758e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	7f1b      	ldrb	r3, [r3, #28]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d101      	bne.n	800759c <HAL_RTC_SetTime+0x1c>
 8007598:	2302      	movs	r3, #2
 800759a:	e0a8      	b.n	80076ee <HAL_RTC_SetTime+0x16e>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2201      	movs	r2, #1
 80075a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2202      	movs	r2, #2
 80075a6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d126      	bne.n	80075fc <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2200      	movs	r2, #0
 80075c0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 faac 	bl	8007b24 <RTC_ByteToBcd2>
 80075cc:	4603      	mov	r3, r0
 80075ce:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	785b      	ldrb	r3, [r3, #1]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 faa5 	bl	8007b24 <RTC_ByteToBcd2>
 80075da:	4603      	mov	r3, r0
 80075dc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80075de:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	789b      	ldrb	r3, [r3, #2]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 fa9d 	bl	8007b24 <RTC_ByteToBcd2>
 80075ea:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80075ec:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	7b1b      	ldrb	r3, [r3, #12]
 80075f4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80075f6:	4313      	orrs	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]
 80075fa:	e018      	b.n	800762e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007606:	2b00      	cmp	r3, #0
 8007608:	d102      	bne.n	8007610 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2200      	movs	r2, #0
 800760e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	785b      	ldrb	r3, [r3, #1]
 800761a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800761c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007622:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	7b1b      	ldrb	r3, [r3, #12]
 8007628:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800762a:	4313      	orrs	r3, r2
 800762c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	22ca      	movs	r2, #202	; 0xca
 8007634:	625a      	str	r2, [r3, #36]	; 0x24
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2253      	movs	r2, #83	; 0x53
 800763c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f000 fa44 	bl	8007acc <RTC_EnterInitMode>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00b      	beq.n	8007662 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	22ff      	movs	r2, #255	; 0xff
 8007650:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2204      	movs	r2, #4
 8007656:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e045      	b.n	80076ee <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	6979      	ldr	r1, [r7, #20]
 8007668:	4b23      	ldr	r3, [pc, #140]	; (80076f8 <HAL_RTC_SetTime+0x178>)
 800766a:	400b      	ands	r3, r1
 800766c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689a      	ldr	r2, [r3, #8]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800767c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6899      	ldr	r1, [r3, #8]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	691a      	ldr	r2, [r3, #16]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	431a      	orrs	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68da      	ldr	r2, [r3, #12]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076a4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f003 0320 	and.w	r3, r3, #32
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d111      	bne.n	80076d8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 f9e1 	bl	8007a7c <HAL_RTC_WaitForSynchro>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00b      	beq.n	80076d8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	22ff      	movs	r2, #255	; 0xff
 80076c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2204      	movs	r2, #4
 80076cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e00a      	b.n	80076ee <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	22ff      	movs	r2, #255	; 0xff
 80076de:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2201      	movs	r2, #1
 80076e4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80076ec:	2300      	movs	r3, #0
  }
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	371c      	adds	r7, #28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd90      	pop	{r4, r7, pc}
 80076f6:	bf00      	nop
 80076f8:	007f7f7f 	.word	0x007f7f7f

080076fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80076fc:	b590      	push	{r4, r7, lr}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	7f1b      	ldrb	r3, [r3, #28]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <HAL_RTC_SetDate+0x1c>
 8007714:	2302      	movs	r3, #2
 8007716:	e092      	b.n	800783e <HAL_RTC_SetDate+0x142>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2201      	movs	r2, #1
 800771c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2202      	movs	r2, #2
 8007722:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10e      	bne.n	8007748 <HAL_RTC_SetDate+0x4c>
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	785b      	ldrb	r3, [r3, #1]
 800772e:	f003 0310 	and.w	r3, r3, #16
 8007732:	2b00      	cmp	r3, #0
 8007734:	d008      	beq.n	8007748 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	785b      	ldrb	r3, [r3, #1]
 800773a:	f023 0310 	bic.w	r3, r3, #16
 800773e:	b2db      	uxtb	r3, r3
 8007740:	330a      	adds	r3, #10
 8007742:	b2da      	uxtb	r2, r3
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d11c      	bne.n	8007788 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	78db      	ldrb	r3, [r3, #3]
 8007752:	4618      	mov	r0, r3
 8007754:	f000 f9e6 	bl	8007b24 <RTC_ByteToBcd2>
 8007758:	4603      	mov	r3, r0
 800775a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	785b      	ldrb	r3, [r3, #1]
 8007760:	4618      	mov	r0, r3
 8007762:	f000 f9df 	bl	8007b24 <RTC_ByteToBcd2>
 8007766:	4603      	mov	r3, r0
 8007768:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800776a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	789b      	ldrb	r3, [r3, #2]
 8007770:	4618      	mov	r0, r3
 8007772:	f000 f9d7 	bl	8007b24 <RTC_ByteToBcd2>
 8007776:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007778:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007782:	4313      	orrs	r3, r2
 8007784:	617b      	str	r3, [r7, #20]
 8007786:	e00e      	b.n	80077a6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	78db      	ldrb	r3, [r3, #3]
 800778c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	785b      	ldrb	r3, [r3, #1]
 8007792:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007794:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800779a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80077a2:	4313      	orrs	r3, r2
 80077a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	22ca      	movs	r2, #202	; 0xca
 80077ac:	625a      	str	r2, [r3, #36]	; 0x24
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2253      	movs	r2, #83	; 0x53
 80077b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 f988 	bl	8007acc <RTC_EnterInitMode>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00b      	beq.n	80077da <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	22ff      	movs	r2, #255	; 0xff
 80077c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2204      	movs	r2, #4
 80077ce:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e031      	b.n	800783e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	6979      	ldr	r1, [r7, #20]
 80077e0:	4b19      	ldr	r3, [pc, #100]	; (8007848 <HAL_RTC_SetDate+0x14c>)
 80077e2:	400b      	ands	r3, r1
 80077e4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68da      	ldr	r2, [r3, #12]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077f4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f003 0320 	and.w	r3, r3, #32
 8007800:	2b00      	cmp	r3, #0
 8007802:	d111      	bne.n	8007828 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 f939 	bl	8007a7c <HAL_RTC_WaitForSynchro>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00b      	beq.n	8007828 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	22ff      	movs	r2, #255	; 0xff
 8007816:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2204      	movs	r2, #4
 800781c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e00a      	b.n	800783e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	22ff      	movs	r2, #255	; 0xff
 800782e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2201      	movs	r2, #1
 8007834:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800783c:	2300      	movs	r3, #0
  }
}
 800783e:	4618      	mov	r0, r3
 8007840:	371c      	adds	r7, #28
 8007842:	46bd      	mov	sp, r7
 8007844:	bd90      	pop	{r4, r7, pc}
 8007846:	bf00      	nop
 8007848:	00ffff3f 	.word	0x00ffff3f

0800784c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800784c:	b590      	push	{r4, r7, lr}
 800784e:	b089      	sub	sp, #36	; 0x24
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	61fb      	str	r3, [r7, #28]
 8007860:	2300      	movs	r3, #0
 8007862:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	7f1b      	ldrb	r3, [r3, #28]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d101      	bne.n	8007870 <HAL_RTC_SetAlarm+0x24>
 800786c:	2302      	movs	r3, #2
 800786e:	e101      	b.n	8007a74 <HAL_RTC_SetAlarm+0x228>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2201      	movs	r2, #1
 8007874:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2202      	movs	r2, #2
 800787a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d137      	bne.n	80078f2 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788c:	2b00      	cmp	r3, #0
 800788e:	d102      	bne.n	8007896 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	2200      	movs	r2, #0
 8007894:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	4618      	mov	r0, r3
 800789c:	f000 f942 	bl	8007b24 <RTC_ByteToBcd2>
 80078a0:	4603      	mov	r3, r0
 80078a2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	785b      	ldrb	r3, [r3, #1]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 f93b 	bl	8007b24 <RTC_ByteToBcd2>
 80078ae:	4603      	mov	r3, r0
 80078b0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80078b2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	789b      	ldrb	r3, [r3, #2]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 f933 	bl	8007b24 <RTC_ByteToBcd2>
 80078be:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80078c0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	7b1b      	ldrb	r3, [r3, #12]
 80078c8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80078ca:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 f925 	bl	8007b24 <RTC_ByteToBcd2>
 80078da:	4603      	mov	r3, r0
 80078dc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80078de:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80078e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80078ec:	4313      	orrs	r3, r2
 80078ee:	61fb      	str	r3, [r7, #28]
 80078f0:	e023      	b.n	800793a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d102      	bne.n	8007906 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2200      	movs	r2, #0
 8007904:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	785b      	ldrb	r3, [r3, #1]
 8007910:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007912:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007918:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	7b1b      	ldrb	r3, [r3, #12]
 800791e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007920:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007928:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800792a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007930:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007936:	4313      	orrs	r3, r2
 8007938:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	4313      	orrs	r3, r2
 8007944:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	22ca      	movs	r2, #202	; 0xca
 800794c:	625a      	str	r2, [r3, #36]	; 0x24
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2253      	movs	r2, #83	; 0x53
 8007954:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800795e:	d13f      	bne.n	80079e0 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689a      	ldr	r2, [r3, #8]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800796e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689a      	ldr	r2, [r3, #8]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800797e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007980:	f7fb fcaa 	bl	80032d8 <HAL_GetTick>
 8007984:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007986:	e013      	b.n	80079b0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007988:	f7fb fca6 	bl	80032d8 <HAL_GetTick>
 800798c:	4602      	mov	r2, r0
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007996:	d90b      	bls.n	80079b0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	22ff      	movs	r2, #255	; 0xff
 800799e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2203      	movs	r2, #3
 80079a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e061      	b.n	8007a74 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d0e4      	beq.n	8007988 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69fa      	ldr	r2, [r7, #28]
 80079c4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079dc:	609a      	str	r2, [r3, #8]
 80079de:	e03e      	b.n	8007a5e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689a      	ldr	r2, [r3, #8]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80079ee:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689a      	ldr	r2, [r3, #8]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079fe:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a00:	f7fb fc6a 	bl	80032d8 <HAL_GetTick>
 8007a04:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007a06:	e013      	b.n	8007a30 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007a08:	f7fb fc66 	bl	80032d8 <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a16:	d90b      	bls.n	8007a30 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	22ff      	movs	r2, #255	; 0xff
 8007a1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2203      	movs	r2, #3
 8007a24:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e021      	b.n	8007a74 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0e4      	beq.n	8007a08 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	697a      	ldr	r2, [r7, #20]
 8007a4c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a5c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	22ff      	movs	r2, #255	; 0xff
 8007a64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3724      	adds	r7, #36	; 0x24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd90      	pop	{r4, r7, pc}

08007a7c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007a84:	2300      	movs	r3, #0
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68da      	ldr	r2, [r3, #12]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a96:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a98:	f7fb fc1e 	bl	80032d8 <HAL_GetTick>
 8007a9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007a9e:	e009      	b.n	8007ab4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007aa0:	f7fb fc1a 	bl	80032d8 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007aae:	d901      	bls.n	8007ab4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e007      	b.n	8007ac4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0ee      	beq.n	8007aa0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d119      	bne.n	8007b1a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f04f 32ff 	mov.w	r2, #4294967295
 8007aee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007af0:	f7fb fbf2 	bl	80032d8 <HAL_GetTick>
 8007af4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007af6:	e009      	b.n	8007b0c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007af8:	f7fb fbee 	bl	80032d8 <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b06:	d901      	bls.n	8007b0c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e007      	b.n	8007b1c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d0ee      	beq.n	8007af8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007b32:	e005      	b.n	8007b40 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3301      	adds	r3, #1
 8007b38:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	3b0a      	subs	r3, #10
 8007b3e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007b40:	79fb      	ldrb	r3, [r7, #7]
 8007b42:	2b09      	cmp	r3, #9
 8007b44:	d8f6      	bhi.n	8007b34 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	011b      	lsls	r3, r3, #4
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	b2db      	uxtb	r3, r3
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b087      	sub	sp, #28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	7f1b      	ldrb	r3, [r3, #28]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d101      	bne.n	8007b7c <HAL_RTCEx_SetTimeStamp+0x1c>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e03e      	b.n	8007bfa <HAL_RTCEx_SetTimeStamp+0x9a>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2202      	movs	r2, #2
 8007b86:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	4b1e      	ldr	r3, [pc, #120]	; (8007c08 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007b90:	4013      	ands	r3, r2
 8007b92:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	22ca      	movs	r2, #202	; 0xca
 8007ba2:	625a      	str	r2, [r3, #36]	; 0x24
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2253      	movs	r2, #83	; 0x53
 8007baa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f022 0206 	bic.w	r2, r2, #6
 8007bba:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689a      	ldr	r2, [r3, #8]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007be2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	22ff      	movs	r2, #255	; 0xff
 8007bea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	371c      	adds	r7, #28
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	fffff7f7 	.word	0xfffff7f7

08007c0c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007c14:	2300      	movs	r3, #0
 8007c16:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e149      	b.n	8007ebe <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d106      	bne.n	8007c44 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7fb f92a 	bl	8002e98 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2202      	movs	r2, #2
 8007c48:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f94f 	bl	8007ef0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d007      	beq.n	8007c6a <HAL_SAI_Init+0x5e>
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d302      	bcc.n	8007c64 <HAL_SAI_Init+0x58>
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d006      	beq.n	8007c70 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8007c62:	e008      	b.n	8007c76 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8007c64:	2300      	movs	r3, #0
 8007c66:	61fb      	str	r3, [r7, #28]
      break;
 8007c68:	e005      	b.n	8007c76 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007c6a:	2310      	movs	r3, #16
 8007c6c:	61fb      	str	r3, [r7, #28]
      break;
 8007c6e:	e002      	b.n	8007c76 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007c70:	2320      	movs	r3, #32
 8007c72:	61fb      	str	r3, [r7, #28]
      break;
 8007c74:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d81d      	bhi.n	8007cba <HAL_SAI_Init+0xae>
 8007c7e:	a201      	add	r2, pc, #4	; (adr r2, 8007c84 <HAL_SAI_Init+0x78>)
 8007c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c84:	08007c95 	.word	0x08007c95
 8007c88:	08007c9b 	.word	0x08007c9b
 8007c8c:	08007ca3 	.word	0x08007ca3
 8007c90:	08007cab 	.word	0x08007cab
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	617b      	str	r3, [r7, #20]
      }
      break;
 8007c98:	e010      	b.n	8007cbc <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c9e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007ca0:	e00c      	b.n	8007cbc <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007ca2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ca6:	617b      	str	r3, [r7, #20]
      }
      break;
 8007ca8:	e008      	b.n	8007cbc <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007caa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007cae:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	f043 0301 	orr.w	r3, r3, #1
 8007cb6:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007cb8:	e000      	b.n	8007cbc <HAL_SAI_Init+0xb0>
  default:
    break;
 8007cba:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a81      	ldr	r2, [pc, #516]	; (8007ec8 <HAL_SAI_Init+0x2bc>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d004      	beq.n	8007cd0 <HAL_SAI_Init+0xc4>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a80      	ldr	r2, [pc, #512]	; (8007ecc <HAL_SAI_Init+0x2c0>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d103      	bne.n	8007cd8 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007cd0:	4a7f      	ldr	r2, [pc, #508]	; (8007ed0 <HAL_SAI_Init+0x2c4>)
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	6013      	str	r3, [r2, #0]
 8007cd6:	e002      	b.n	8007cde <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007cd8:	4a7e      	ldr	r2, [pc, #504]	; (8007ed4 <HAL_SAI_Init+0x2c8>)
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d043      	beq.n	8007d6e <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a76      	ldr	r2, [pc, #472]	; (8007ec8 <HAL_SAI_Init+0x2bc>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d004      	beq.n	8007cfe <HAL_SAI_Init+0xf2>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a74      	ldr	r2, [pc, #464]	; (8007ecc <HAL_SAI_Init+0x2c0>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d104      	bne.n	8007d08 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007cfe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007d02:	f7ff fa8d 	bl	8007220 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d06:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a72      	ldr	r2, [pc, #456]	; (8007ed8 <HAL_SAI_Init+0x2cc>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d004      	beq.n	8007d1c <HAL_SAI_Init+0x110>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a71      	ldr	r2, [pc, #452]	; (8007edc <HAL_SAI_Init+0x2d0>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d104      	bne.n	8007d26 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007d1c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007d20:	f7ff fa7e 	bl	8007220 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d24:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4413      	add	r3, r2
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	461a      	mov	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	025b      	lsls	r3, r3, #9
 8007d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	4a67      	ldr	r2, [pc, #412]	; (8007ee0 <HAL_SAI_Init+0x2d4>)
 8007d42:	fba2 2303 	umull	r2, r3, r2, r3
 8007d46:	08da      	lsrs	r2, r3, #3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8007d4c:	68f9      	ldr	r1, [r7, #12]
 8007d4e:	4b64      	ldr	r3, [pc, #400]	; (8007ee0 <HAL_SAI_Init+0x2d4>)
 8007d50:	fba3 2301 	umull	r2, r3, r3, r1
 8007d54:	08da      	lsrs	r2, r3, #3
 8007d56:	4613      	mov	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	005b      	lsls	r3, r3, #1
 8007d5e:	1aca      	subs	r2, r1, r3
 8007d60:	2a08      	cmp	r2, #8
 8007d62:	d904      	bls.n	8007d6e <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	1c5a      	adds	r2, r3, #1
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HAL_SAI_Init+0x172>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d109      	bne.n	8007d92 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d101      	bne.n	8007d8a <HAL_SAI_Init+0x17e>
 8007d86:	2300      	movs	r3, #0
 8007d88:	e001      	b.n	8007d8e <HAL_SAI_Init+0x182>
 8007d8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d8e:	61bb      	str	r3, [r7, #24]
 8007d90:	e008      	b.n	8007da4 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d102      	bne.n	8007da0 <HAL_SAI_Init+0x194>
 8007d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d9e:	e000      	b.n	8007da2 <HAL_SAI_Init+0x196>
 8007da0:	2300      	movs	r3, #0
 8007da2:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6819      	ldr	r1, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	4b4d      	ldr	r3, [pc, #308]	; (8007ee4 <HAL_SAI_Init+0x2d8>)
 8007db0:	400b      	ands	r3, r1
 8007db2:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6819      	ldr	r1, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc2:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007dc8:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dce:	431a      	orrs	r2, r3
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8007ddc:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007de8:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	051b      	lsls	r3, r3, #20
 8007df0:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6859      	ldr	r1, [r3, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	4b38      	ldr	r3, [pc, #224]	; (8007ee8 <HAL_SAI_Init+0x2dc>)
 8007e06:	400b      	ands	r3, r1
 8007e08:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6859      	ldr	r1, [r3, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	699a      	ldr	r2, [r3, #24]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6899      	ldr	r1, [r3, #8]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	4b2e      	ldr	r3, [pc, #184]	; (8007eec <HAL_SAI_Init+0x2e0>)
 8007e34:	400b      	ands	r3, r1
 8007e36:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	6899      	ldr	r1, [r3, #8]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007e48:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8007e4e:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8007e54:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8007e5e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68d9      	ldr	r1, [r3, #12]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007e76:	400b      	ands	r3, r1
 8007e78:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68d9      	ldr	r1, [r3, #12]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e88:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e8e:	041b      	lsls	r3, r3, #16
 8007e90:	431a      	orrs	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e96:	3b01      	subs	r3, #1
 8007e98:	021b      	lsls	r3, r3, #8
 8007e9a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3720      	adds	r7, #32
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	40015804 	.word	0x40015804
 8007ecc:	40015824 	.word	0x40015824
 8007ed0:	40015800 	.word	0x40015800
 8007ed4:	40015c00 	.word	0x40015c00
 8007ed8:	40015c04 	.word	0x40015c04
 8007edc:	40015c24 	.word	0x40015c24
 8007ee0:	cccccccd 	.word	0xcccccccd
 8007ee4:	ff05c010 	.word	0xff05c010
 8007ee8:	ffff1ff0 	.word	0xffff1ff0
 8007eec:	fff88000 	.word	0xfff88000

08007ef0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007ef0:	b490      	push	{r4, r7}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8007ef8:	4b16      	ldr	r3, [pc, #88]	; (8007f54 <SAI_Disable+0x64>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a16      	ldr	r2, [pc, #88]	; (8007f58 <SAI_Disable+0x68>)
 8007efe:	fba2 2303 	umull	r2, r3, r2, r3
 8007f02:	0b1b      	lsrs	r3, r3, #12
 8007f04:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007f18:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007f1a:	4623      	mov	r3, r4
 8007f1c:	1e5c      	subs	r4, r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10a      	bne.n	8007f38 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	73fb      	strb	r3, [r7, #15]
      break;
 8007f36:	e006      	b.n	8007f46 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1e9      	bne.n	8007f1a <SAI_Disable+0x2a>

  return status;
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bc90      	pop	{r4, r7}
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	2000002c 	.word	0x2000002c
 8007f58:	95cbec1b 	.word	0x95cbec1b

08007f5c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e022      	b.n	8007fb4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d105      	bne.n	8007f86 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7fa fbf9 	bl	8002778 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2203      	movs	r2, #3
 8007f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f814 	bl	8007fbc <HAL_SD_InitCard>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e00a      	b.n	8007fb4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007fbc:	b5b0      	push	{r4, r5, r7, lr}
 8007fbe:	b08e      	sub	sp, #56	; 0x38
 8007fc0:	af04      	add	r7, sp, #16
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007fd8:	2376      	movs	r3, #118	; 0x76
 8007fda:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681d      	ldr	r5, [r3, #0]
 8007fe0:	466c      	mov	r4, sp
 8007fe2:	f107 0314 	add.w	r3, r7, #20
 8007fe6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007fea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007fee:	f107 0308 	add.w	r3, r7, #8
 8007ff2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	f002 ff51 	bl	800ae9c <SDMMC_Init>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e03b      	b.n	8008084 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	685a      	ldr	r2, [r3, #4]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800801a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4618      	mov	r0, r3
 8008022:	f002 ff74 	bl	800af0e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008034:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fde6 	bl	8008c08 <SD_PowerON>
 800803c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800803e:	6a3b      	ldr	r3, [r7, #32]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00b      	beq.n	800805c <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	431a      	orrs	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e013      	b.n	8008084 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fd05 	bl	8008a6c <SD_InitCard>
 8008062:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00b      	beq.n	8008082 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	431a      	orrs	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e000      	b.n	8008084 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3728      	adds	r7, #40	; 0x28
 8008088:	46bd      	mov	sp, r7
 800808a:	bdb0      	pop	{r4, r5, r7, pc}

0800808c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08c      	sub	sp, #48	; 0x30
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d107      	bne.n	80080b4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e0cc      	b.n	800824e <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b01      	cmp	r3, #1
 80080be:	f040 80c5 	bne.w	800824c <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80080c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	441a      	add	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d907      	bls.n	80080e6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e0b3      	b.n	800824e <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2203      	movs	r2, #3
 80080ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2200      	movs	r2, #0
 80080f4:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008104:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810a:	4a53      	ldr	r2, [pc, #332]	; (8008258 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800810c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	4a52      	ldr	r2, [pc, #328]	; (800825c <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008114:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811a:	2200      	movs	r2, #0
 800811c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3380      	adds	r3, #128	; 0x80
 8008128:	4619      	mov	r1, r3
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	025b      	lsls	r3, r3, #9
 8008130:	089b      	lsrs	r3, r3, #2
 8008132:	f7fb fdfd 	bl	8003d30 <HAL_DMA_Start_IT>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d017      	beq.n	800816c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800814a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a43      	ldr	r2, [pc, #268]	; (8008260 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008152:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008158:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e070      	b.n	800824e <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f042 0208 	orr.w	r2, r2, #8
 800817a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008180:	2b01      	cmp	r3, #1
 8008182:	d002      	beq.n	800818a <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008186:	025b      	lsls	r3, r3, #9
 8008188:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008192:	4618      	mov	r0, r3
 8008194:	f002 ff4e 	bl	800b034 <SDMMC_CmdBlockLength>
 8008198:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800819a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00f      	beq.n	80081c0 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a2e      	ldr	r2, [pc, #184]	; (8008260 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80081a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ae:	431a      	orrs	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e046      	b.n	800824e <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081c0:	f04f 33ff 	mov.w	r3, #4294967295
 80081c4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	025b      	lsls	r3, r3, #9
 80081ca:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80081cc:	2390      	movs	r3, #144	; 0x90
 80081ce:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80081d0:	2302      	movs	r3, #2
 80081d2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80081d8:	2301      	movs	r3, #1
 80081da:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f107 0210 	add.w	r2, r7, #16
 80081e4:	4611      	mov	r1, r2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f002 fef8 	bl	800afdc <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d90a      	bls.n	8008208 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2282      	movs	r2, #130	; 0x82
 80081f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081fe:	4618      	mov	r0, r3
 8008200:	f002 ff5c 	bl	800b0bc <SDMMC_CmdReadMultiBlock>
 8008204:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008206:	e009      	b.n	800821c <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2281      	movs	r2, #129	; 0x81
 800820c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008214:	4618      	mov	r0, r3
 8008216:	f002 ff2f 	bl	800b078 <SDMMC_CmdReadSingleBlock>
 800821a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800821c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821e:	2b00      	cmp	r3, #0
 8008220:	d012      	beq.n	8008248 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a0e      	ldr	r2, [pc, #56]	; (8008260 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008228:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800822e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008230:	431a      	orrs	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e002      	b.n	800824e <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	e000      	b.n	800824e <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 800824c:	2302      	movs	r3, #2
  }
}
 800824e:	4618      	mov	r0, r3
 8008250:	3730      	adds	r7, #48	; 0x30
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	08008957 	.word	0x08008957
 800825c:	080089c9 	.word	0x080089c9
 8008260:	004005ff 	.word	0x004005ff

08008264 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08c      	sub	sp, #48	; 0x30
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
 8008270:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d107      	bne.n	800828c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008280:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e0cf      	b.n	800842c <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b01      	cmp	r3, #1
 8008296:	f040 80c8 	bne.w	800842a <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80082a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	441a      	add	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d907      	bls.n	80082be <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e0b6      	b.n	800842c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2203      	movs	r2, #3
 80082c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2200      	movs	r2, #0
 80082cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f042 021a 	orr.w	r2, r2, #26
 80082dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e2:	4a54      	ldr	r2, [pc, #336]	; (8008434 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80082e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ea:	4a53      	ldr	r2, [pc, #332]	; (8008438 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80082ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f2:	2200      	movs	r2, #0
 80082f4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d002      	beq.n	8008304 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	025b      	lsls	r3, r3, #9
 8008302:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800830c:	4618      	mov	r0, r3
 800830e:	f002 fe91 	bl	800b034 <SDMMC_CmdBlockLength>
 8008312:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00f      	beq.n	800833a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a47      	ldr	r2, [pc, #284]	; (800843c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008320:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008328:	431a      	orrs	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e078      	b.n	800842c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d90a      	bls.n	8008356 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	22a0      	movs	r2, #160	; 0xa0
 8008344:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800834c:	4618      	mov	r0, r3
 800834e:	f002 fef9 	bl	800b144 <SDMMC_CmdWriteMultiBlock>
 8008352:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008354:	e009      	b.n	800836a <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2290      	movs	r2, #144	; 0x90
 800835a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008362:	4618      	mov	r0, r3
 8008364:	f002 fecc 	bl	800b100 <SDMMC_CmdWriteSingleBlock>
 8008368:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836c:	2b00      	cmp	r3, #0
 800836e:	d012      	beq.n	8008396 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a31      	ldr	r2, [pc, #196]	; (800843c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008376:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	431a      	orrs	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e04a      	b.n	800842c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f042 0208 	orr.w	r2, r2, #8
 80083a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80083aa:	68b9      	ldr	r1, [r7, #8]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3380      	adds	r3, #128	; 0x80
 80083b2:	461a      	mov	r2, r3
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	025b      	lsls	r3, r3, #9
 80083b8:	089b      	lsrs	r3, r3, #2
 80083ba:	f7fb fcb9 	bl	8003d30 <HAL_DMA_Start_IT>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d01a      	beq.n	80083fa <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f022 021a 	bic.w	r2, r2, #26
 80083d2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a18      	ldr	r2, [pc, #96]	; (800843c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80083da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e018      	b.n	800842c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80083fa:	f04f 33ff 	mov.w	r3, #4294967295
 80083fe:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	025b      	lsls	r3, r3, #9
 8008404:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008406:	2390      	movs	r3, #144	; 0x90
 8008408:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800840a:	2300      	movs	r3, #0
 800840c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800840e:	2300      	movs	r3, #0
 8008410:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008412:	2301      	movs	r3, #1
 8008414:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f107 0210 	add.w	r2, r7, #16
 800841e:	4611      	mov	r1, r2
 8008420:	4618      	mov	r0, r3
 8008422:	f002 fddb 	bl	800afdc <SDMMC_ConfigData>

      return HAL_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	e000      	b.n	800842c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 800842a:	2302      	movs	r3, #2
  }
}
 800842c:	4618      	mov	r0, r3
 800842e:	3730      	adds	r7, #48	; 0x30
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	0800892d 	.word	0x0800892d
 8008438:	080089c9 	.word	0x080089c9
 800843c:	004005ff 	.word	0x004005ff

08008440 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008462:	0f9b      	lsrs	r3, r3, #30
 8008464:	b2da      	uxtb	r2, r3
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800846e:	0e9b      	lsrs	r3, r3, #26
 8008470:	b2db      	uxtb	r3, r3
 8008472:	f003 030f 	and.w	r3, r3, #15
 8008476:	b2da      	uxtb	r2, r3
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008480:	0e1b      	lsrs	r3, r3, #24
 8008482:	b2db      	uxtb	r3, r3
 8008484:	f003 0303 	and.w	r3, r3, #3
 8008488:	b2da      	uxtb	r2, r3
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008492:	0c1b      	lsrs	r3, r3, #16
 8008494:	b2da      	uxtb	r2, r3
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800849e:	0a1b      	lsrs	r3, r3, #8
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084b4:	0d1b      	lsrs	r3, r3, #20
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084c0:	0c1b      	lsrs	r3, r3, #16
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	f003 030f 	and.w	r3, r3, #15
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084d2:	0bdb      	lsrs	r3, r3, #15
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084e4:	0b9b      	lsrs	r3, r3, #14
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	f003 0301 	and.w	r3, r3, #1
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084f6:	0b5b      	lsrs	r3, r3, #13
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008508:	0b1b      	lsrs	r3, r3, #12
 800850a:	b2db      	uxtb	r3, r3
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	b2da      	uxtb	r2, r3
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2200      	movs	r2, #0
 800851a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008520:	2b00      	cmp	r3, #0
 8008522:	d163      	bne.n	80085ec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008528:	009a      	lsls	r2, r3, #2
 800852a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800852e:	4013      	ands	r3, r2
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008534:	0f92      	lsrs	r2, r2, #30
 8008536:	431a      	orrs	r2, r3
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008540:	0edb      	lsrs	r3, r3, #27
 8008542:	b2db      	uxtb	r3, r3
 8008544:	f003 0307 	and.w	r3, r3, #7
 8008548:	b2da      	uxtb	r2, r3
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008552:	0e1b      	lsrs	r3, r3, #24
 8008554:	b2db      	uxtb	r3, r3
 8008556:	f003 0307 	and.w	r3, r3, #7
 800855a:	b2da      	uxtb	r2, r3
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008564:	0d5b      	lsrs	r3, r3, #21
 8008566:	b2db      	uxtb	r3, r3
 8008568:	f003 0307 	and.w	r3, r3, #7
 800856c:	b2da      	uxtb	r2, r3
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008576:	0c9b      	lsrs	r3, r3, #18
 8008578:	b2db      	uxtb	r3, r3
 800857a:	f003 0307 	and.w	r3, r3, #7
 800857e:	b2da      	uxtb	r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008588:	0bdb      	lsrs	r3, r3, #15
 800858a:	b2db      	uxtb	r3, r3
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	b2da      	uxtb	r2, r3
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	7e1b      	ldrb	r3, [r3, #24]
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	3302      	adds	r3, #2
 80085ac:	2201      	movs	r2, #1
 80085ae:	fa02 f303 	lsl.w	r3, r2, r3
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80085b6:	fb02 f203 	mul.w	r2, r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	7a1b      	ldrb	r3, [r3, #8]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	f003 030f 	and.w	r3, r3, #15
 80085c8:	2201      	movs	r2, #1
 80085ca:	409a      	lsls	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80085d8:	0a52      	lsrs	r2, r2, #9
 80085da:	fb02 f203 	mul.w	r2, r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085e8:	661a      	str	r2, [r3, #96]	; 0x60
 80085ea:	e031      	b.n	8008650 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d11d      	bne.n	8008630 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085f8:	041b      	lsls	r3, r3, #16
 80085fa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008602:	0c1b      	lsrs	r3, r3, #16
 8008604:	431a      	orrs	r2, r3
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	3301      	adds	r3, #1
 8008610:	029a      	lsls	r2, r3, #10
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008624:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	661a      	str	r2, [r3, #96]	; 0x60
 800862e:	e00f      	b.n	8008650 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a58      	ldr	r2, [pc, #352]	; (8008798 <HAL_SD_GetCardCSD+0x344>)
 8008636:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e09d      	b.n	800878c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008654:	0b9b      	lsrs	r3, r3, #14
 8008656:	b2db      	uxtb	r3, r3
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	b2da      	uxtb	r2, r3
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008666:	09db      	lsrs	r3, r3, #7
 8008668:	b2db      	uxtb	r3, r3
 800866a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800866e:	b2da      	uxtb	r2, r3
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008678:	b2db      	uxtb	r3, r3
 800867a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800867e:	b2da      	uxtb	r2, r3
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008688:	0fdb      	lsrs	r3, r3, #31
 800868a:	b2da      	uxtb	r2, r3
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008694:	0f5b      	lsrs	r3, r3, #29
 8008696:	b2db      	uxtb	r3, r3
 8008698:	f003 0303 	and.w	r3, r3, #3
 800869c:	b2da      	uxtb	r2, r3
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a6:	0e9b      	lsrs	r3, r3, #26
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	f003 0307 	and.w	r3, r3, #7
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b8:	0d9b      	lsrs	r3, r3, #22
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	f003 030f 	and.w	r3, r3, #15
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ca:	0d5b      	lsrs	r3, r3, #21
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e6:	0c1b      	lsrs	r3, r3, #16
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086fa:	0bdb      	lsrs	r3, r3, #15
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	b2da      	uxtb	r2, r3
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800870e:	0b9b      	lsrs	r3, r3, #14
 8008710:	b2db      	uxtb	r3, r3
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	b2da      	uxtb	r2, r3
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008722:	0b5b      	lsrs	r3, r3, #13
 8008724:	b2db      	uxtb	r3, r3
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	b2da      	uxtb	r2, r3
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008736:	0b1b      	lsrs	r3, r3, #12
 8008738:	b2db      	uxtb	r3, r3
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	b2da      	uxtb	r2, r3
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800874a:	0a9b      	lsrs	r3, r3, #10
 800874c:	b2db      	uxtb	r3, r3
 800874e:	f003 0303 	and.w	r3, r3, #3
 8008752:	b2da      	uxtb	r2, r3
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800875e:	0a1b      	lsrs	r3, r3, #8
 8008760:	b2db      	uxtb	r3, r3
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	b2da      	uxtb	r2, r3
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008772:	085b      	lsrs	r3, r3, #1
 8008774:	b2db      	uxtb	r3, r3
 8008776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800877a:	b2da      	uxtb	r2, r3
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	004005ff 	.word	0x004005ff

0800879c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80087f4:	b5b0      	push	{r4, r5, r7, lr}
 80087f6:	b08e      	sub	sp, #56	; 0x38
 80087f8:	af04      	add	r7, sp, #16
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2203      	movs	r2, #3
 8008802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800880a:	2b03      	cmp	r3, #3
 800880c:	d02e      	beq.n	800886c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008814:	d106      	bne.n	8008824 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	639a      	str	r2, [r3, #56]	; 0x38
 8008822:	e029      	b.n	8008878 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800882a:	d10a      	bne.n	8008842 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 faa1 	bl	8008d74 <SD_WideBus_Enable>
 8008832:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	431a      	orrs	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	639a      	str	r2, [r3, #56]	; 0x38
 8008840:	e01a      	b.n	8008878 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10a      	bne.n	800885e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fade 	bl	8008e0a <SD_WideBus_Disable>
 800884e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	639a      	str	r2, [r3, #56]	; 0x38
 800885c:	e00c      	b.n	8008878 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008862:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	639a      	str	r2, [r3, #56]	; 0x38
 800886a:	e005      	b.n	8008878 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008870:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887c:	2b00      	cmp	r3, #0
 800887e:	d009      	beq.n	8008894 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a18      	ldr	r2, [pc, #96]	; (80088e8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008886:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e024      	b.n	80088de <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681d      	ldr	r5, [r3, #0]
 80088ba:	466c      	mov	r4, sp
 80088bc:	f107 0318 	add.w	r3, r7, #24
 80088c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80088c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80088c8:	f107 030c 	add.w	r3, r7, #12
 80088cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088ce:	4628      	mov	r0, r5
 80088d0:	f002 fae4 	bl	800ae9c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3728      	adds	r7, #40	; 0x28
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bdb0      	pop	{r4, r5, r7, pc}
 80088e6:	bf00      	nop
 80088e8:	004005ff 	.word	0x004005ff

080088ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80088f8:	f107 030c 	add.w	r3, r7, #12
 80088fc:	4619      	mov	r1, r3
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fa10 	bl	8008d24 <SD_SendStatus>
 8008904:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d005      	beq.n	8008918 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	431a      	orrs	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	0a5b      	lsrs	r3, r3, #9
 800891c:	f003 030f 	and.w	r3, r3, #15
 8008920:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008922:	693b      	ldr	r3, [r7, #16]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008938:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008948:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800894a:	bf00      	nop
 800894c:	3714      	adds	r7, #20
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008962:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008968:	2b82      	cmp	r3, #130	; 0x82
 800896a:	d111      	bne.n	8008990 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4618      	mov	r0, r3
 8008972:	f002 fc09 	bl	800b188 <SDMMC_CmdStopTransfer>
 8008976:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d008      	beq.n	8008990 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	431a      	orrs	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f7ff fd58 	bl	8008440 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f022 0208 	bic.w	r2, r2, #8
 800899e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f240 523a 	movw	r2, #1338	; 0x53a
 80089a8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f003 f84f 	bl	800ba5c <HAL_SD_RxCpltCallback>
#endif
}
 80089be:	bf00      	nop
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
	...

080089c8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f7fb fa0a 	bl	8003df0 <HAL_DMA_GetError>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d03e      	beq.n	8008a60 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d002      	beq.n	80089fe <SD_DMAError+0x36>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d12d      	bne.n	8008a5a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a19      	ldr	r2, [pc, #100]	; (8008a68 <SD_DMAError+0xa0>)
 8008a04:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008a14:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008a22:	6978      	ldr	r0, [r7, #20]
 8008a24:	f7ff ff62 	bl	80088ec <HAL_SD_GetCardState>
 8008a28:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	2b06      	cmp	r3, #6
 8008a2e:	d002      	beq.n	8008a36 <SD_DMAError+0x6e>
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2b05      	cmp	r3, #5
 8008a34:	d10a      	bne.n	8008a4c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f002 fba4 	bl	800b188 <SDMMC_CmdStopTransfer>
 8008a40:	4602      	mov	r2, r0
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a46:	431a      	orrs	r2, r3
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	2200      	movs	r2, #0
 8008a58:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008a5a:	6978      	ldr	r0, [r7, #20]
 8008a5c:	f7ff fcf0 	bl	8008440 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008a60:	bf00      	nop
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	004005ff 	.word	0x004005ff

08008a6c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008a6c:	b5b0      	push	{r4, r5, r7, lr}
 8008a6e:	b094      	sub	sp, #80	; 0x50
 8008a70:	af04      	add	r7, sp, #16
 8008a72:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008a74:	2301      	movs	r3, #1
 8008a76:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f002 fa55 	bl	800af2c <SDMMC_GetPowerState>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d102      	bne.n	8008a8e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008a88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008a8c:	e0b7      	b.n	8008bfe <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d02f      	beq.n	8008af6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f002 fc7f 	bl	800b39e <SDMMC_CmdSendCID>
 8008aa0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <SD_InitCard+0x40>
    {
      return errorstate;
 8008aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aaa:	e0a8      	b.n	8008bfe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f002 fa7f 	bl	800afb6 <SDMMC_GetResponse>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2104      	movs	r1, #4
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f002 fa76 	bl	800afb6 <SDMMC_GetResponse>
 8008aca:	4602      	mov	r2, r0
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2108      	movs	r1, #8
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f002 fa6d 	bl	800afb6 <SDMMC_GetResponse>
 8008adc:	4602      	mov	r2, r0
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	210c      	movs	r1, #12
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f002 fa64 	bl	800afb6 <SDMMC_GetResponse>
 8008aee:	4602      	mov	r2, r0
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	d00d      	beq.n	8008b1a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f107 020e 	add.w	r2, r7, #14
 8008b06:	4611      	mov	r1, r2
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f002 fc85 	bl	800b418 <SDMMC_CmdSetRelAdd>
 8008b0e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <SD_InitCard+0xae>
    {
      return errorstate;
 8008b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b18:	e071      	b.n	8008bfe <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d036      	beq.n	8008b90 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008b22:	89fb      	ldrh	r3, [r7, #14]
 8008b24:	461a      	mov	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b32:	041b      	lsls	r3, r3, #16
 8008b34:	4619      	mov	r1, r3
 8008b36:	4610      	mov	r0, r2
 8008b38:	f002 fc4f 	bl	800b3da <SDMMC_CmdSendCSD>
 8008b3c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d001      	beq.n	8008b48 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b46:	e05a      	b.n	8008bfe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f002 fa31 	bl	800afb6 <SDMMC_GetResponse>
 8008b54:	4602      	mov	r2, r0
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2104      	movs	r1, #4
 8008b60:	4618      	mov	r0, r3
 8008b62:	f002 fa28 	bl	800afb6 <SDMMC_GetResponse>
 8008b66:	4602      	mov	r2, r0
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2108      	movs	r1, #8
 8008b72:	4618      	mov	r0, r3
 8008b74:	f002 fa1f 	bl	800afb6 <SDMMC_GetResponse>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	210c      	movs	r1, #12
 8008b84:	4618      	mov	r0, r3
 8008b86:	f002 fa16 	bl	800afb6 <SDMMC_GetResponse>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2104      	movs	r1, #4
 8008b96:	4618      	mov	r0, r3
 8008b98:	f002 fa0d 	bl	800afb6 <SDMMC_GetResponse>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	0d1a      	lsrs	r2, r3, #20
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008ba4:	f107 0310 	add.w	r3, r7, #16
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7ff fc52 	bl	8008454 <HAL_SD_GetCardCSD>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d002      	beq.n	8008bbc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008bba:	e020      	b.n	8008bfe <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6819      	ldr	r1, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bc4:	041b      	lsls	r3, r3, #16
 8008bc6:	f04f 0400 	mov.w	r4, #0
 8008bca:	461a      	mov	r2, r3
 8008bcc:	4623      	mov	r3, r4
 8008bce:	4608      	mov	r0, r1
 8008bd0:	f002 fafc 	bl	800b1cc <SDMMC_CmdSelDesel>
 8008bd4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <SD_InitCard+0x174>
  {
    return errorstate;
 8008bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bde:	e00e      	b.n	8008bfe <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681d      	ldr	r5, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	466c      	mov	r4, sp
 8008be8:	f103 0210 	add.w	r2, r3, #16
 8008bec:	ca07      	ldmia	r2, {r0, r1, r2}
 8008bee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	f002 f950 	bl	800ae9c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3740      	adds	r7, #64	; 0x40
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008c08 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	617b      	str	r3, [r7, #20]
 8008c18:	2300      	movs	r3, #0
 8008c1a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f002 faf6 	bl	800b212 <SDMMC_CmdGoIdleState>
 8008c26:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	e072      	b.n	8008d18 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f002 fb09 	bl	800b24e <SDMMC_CmdOperCond>
 8008c3c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00d      	beq.n	8008c60 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f002 fadf 	bl	800b212 <SDMMC_CmdGoIdleState>
 8008c54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d004      	beq.n	8008c66 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	e05b      	b.n	8008d18 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d137      	bne.n	8008cde <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2100      	movs	r1, #0
 8008c74:	4618      	mov	r0, r3
 8008c76:	f002 fb09 	bl	800b28c <SDMMC_CmdAppCommand>
 8008c7a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d02d      	beq.n	8008cde <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c86:	e047      	b.n	8008d18 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f002 fafc 	bl	800b28c <SDMMC_CmdAppCommand>
 8008c94:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <SD_PowerON+0x98>
    {
      return errorstate;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	e03b      	b.n	8008d18 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	491e      	ldr	r1, [pc, #120]	; (8008d20 <SD_PowerON+0x118>)
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f002 fb12 	bl	800b2d0 <SDMMC_CmdAppOperCommand>
 8008cac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008cb8:	e02e      	b.n	8008d18 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f002 f978 	bl	800afb6 <SDMMC_GetResponse>
 8008cc6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	0fdb      	lsrs	r3, r3, #31
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d101      	bne.n	8008cd4 <SD_PowerON+0xcc>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e000      	b.n	8008cd6 <SD_PowerON+0xce>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	613b      	str	r3, [r7, #16]

    count++;
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d802      	bhi.n	8008cee <SD_PowerON+0xe6>
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0cc      	beq.n	8008c88 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d902      	bls.n	8008cfe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cfc:	e00c      	b.n	8008d18 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d003      	beq.n	8008d10 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	645a      	str	r2, [r3, #68]	; 0x44
 8008d0e:	e002      	b.n	8008d16 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3718      	adds	r7, #24
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	c1100000 	.word	0xc1100000

08008d24 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d102      	bne.n	8008d3a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008d34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d38:	e018      	b.n	8008d6c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d42:	041b      	lsls	r3, r3, #16
 8008d44:	4619      	mov	r1, r3
 8008d46:	4610      	mov	r0, r2
 8008d48:	f002 fb87 	bl	800b45a <SDMMC_CmdSendStatus>
 8008d4c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	e009      	b.n	8008d6c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f002 f929 	bl	800afb6 <SDMMC_GetResponse>
 8008d64:	4602      	mov	r2, r0
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	2300      	movs	r3, #0
 8008d82:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2100      	movs	r1, #0
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f002 f913 	bl	800afb6 <SDMMC_GetResponse>
 8008d90:	4603      	mov	r3, r0
 8008d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d9a:	d102      	bne.n	8008da2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008d9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008da0:	e02f      	b.n	8008e02 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008da2:	f107 030c 	add.w	r3, r7, #12
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f879 	bl	8008ea0 <SD_FindSCR>
 8008dae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	e023      	b.n	8008e02 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d01c      	beq.n	8008dfe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dcc:	041b      	lsls	r3, r3, #16
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	f002 fa5b 	bl	800b28c <SDMMC_CmdAppCommand>
 8008dd6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	e00f      	b.n	8008e02 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2102      	movs	r1, #2
 8008de8:	4618      	mov	r0, r3
 8008dea:	f002 fa95 	bl	800b318 <SDMMC_CmdBusWidth>
 8008dee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	e003      	b.n	8008e02 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e001      	b.n	8008e02 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008dfe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b086      	sub	sp, #24
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008e12:	2300      	movs	r3, #0
 8008e14:	60fb      	str	r3, [r7, #12]
 8008e16:	2300      	movs	r3, #0
 8008e18:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2100      	movs	r1, #0
 8008e20:	4618      	mov	r0, r3
 8008e22:	f002 f8c8 	bl	800afb6 <SDMMC_GetResponse>
 8008e26:	4603      	mov	r3, r0
 8008e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e30:	d102      	bne.n	8008e38 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008e32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e36:	e02f      	b.n	8008e98 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008e38:	f107 030c 	add.w	r3, r7, #12
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f82e 	bl	8008ea0 <SD_FindSCR>
 8008e44:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	e023      	b.n	8008e98 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d01c      	beq.n	8008e94 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e62:	041b      	lsls	r3, r3, #16
 8008e64:	4619      	mov	r1, r3
 8008e66:	4610      	mov	r0, r2
 8008e68:	f002 fa10 	bl	800b28c <SDMMC_CmdAppCommand>
 8008e6c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d001      	beq.n	8008e78 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	e00f      	b.n	8008e98 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f002 fa4a 	bl	800b318 <SDMMC_CmdBusWidth>
 8008e84:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d001      	beq.n	8008e90 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	e003      	b.n	8008e98 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008e90:	2300      	movs	r3, #0
 8008e92:	e001      	b.n	8008e98 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3718      	adds	r7, #24
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008ea0:	b590      	push	{r4, r7, lr}
 8008ea2:	b08f      	sub	sp, #60	; 0x3c
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008eaa:	f7fa fa15 	bl	80032d8 <HAL_GetTick>
 8008eae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	60bb      	str	r3, [r7, #8]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2108      	movs	r1, #8
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f002 f8b4 	bl	800b034 <SDMMC_CmdBlockLength>
 8008ecc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed6:	e0a9      	b.n	800902c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee0:	041b      	lsls	r3, r3, #16
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	f002 f9d1 	bl	800b28c <SDMMC_CmdAppCommand>
 8008eea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef4:	e09a      	b.n	800902c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8008efa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008efc:	2308      	movs	r3, #8
 8008efe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008f00:	2330      	movs	r3, #48	; 0x30
 8008f02:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f04:	2302      	movs	r3, #2
 8008f06:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f107 0210 	add.w	r2, r7, #16
 8008f18:	4611      	mov	r1, r2
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f002 f85e 	bl	800afdc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f002 fa19 	bl	800b35c <SDMMC_CmdSendSCR>
 8008f2a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d022      	beq.n	8008f78 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f34:	e07a      	b.n	800902c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00e      	beq.n	8008f62 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6819      	ldr	r1, [r3, #0]
 8008f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	f107 0208 	add.w	r2, r7, #8
 8008f50:	18d4      	adds	r4, r2, r3
 8008f52:	4608      	mov	r0, r1
 8008f54:	f001 ffce 	bl	800aef4 <SDMMC_ReadFIFO>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	6023      	str	r3, [r4, #0]
      index++;
 8008f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5e:	3301      	adds	r3, #1
 8008f60:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f62:	f7fa f9b9 	bl	80032d8 <HAL_GetTick>
 8008f66:	4602      	mov	r2, r0
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f70:	d102      	bne.n	8008f78 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008f72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f76:	e059      	b.n	800902c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f7e:	f240 432a 	movw	r3, #1066	; 0x42a
 8008f82:	4013      	ands	r3, r2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0d6      	beq.n	8008f36 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f8e:	f003 0308 	and.w	r3, r3, #8
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d005      	beq.n	8008fa2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2208      	movs	r2, #8
 8008f9c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008f9e:	2308      	movs	r3, #8
 8008fa0:	e044      	b.n	800902c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa8:	f003 0302 	and.w	r3, r3, #2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d005      	beq.n	8008fbc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008fb8:	2302      	movs	r3, #2
 8008fba:	e037      	b.n	800902c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc2:	f003 0320 	and.w	r3, r3, #32
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d005      	beq.n	8008fd6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2220      	movs	r2, #32
 8008fd0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008fd2:	2320      	movs	r3, #32
 8008fd4:	e02a      	b.n	800902c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f240 523a 	movw	r2, #1338	; 0x53a
 8008fde:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	061a      	lsls	r2, r3, #24
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	021b      	lsls	r3, r3, #8
 8008fe8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008fec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	0a1b      	lsrs	r3, r3, #8
 8008ff2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008ff6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	0e1b      	lsrs	r3, r3, #24
 8008ffc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009000:	601a      	str	r2, [r3, #0]
    scr++;
 8009002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009004:	3304      	adds	r3, #4
 8009006:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	061a      	lsls	r2, r3, #24
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	021b      	lsls	r3, r3, #8
 8009010:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009014:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	0a1b      	lsrs	r3, r3, #8
 800901a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800901e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	0e1b      	lsrs	r3, r3, #24
 8009024:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009028:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	373c      	adds	r7, #60	; 0x3c
 8009030:	46bd      	mov	sp, r7
 8009032:	bd90      	pop	{r4, r7, pc}

08009034 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e025      	b.n	8009094 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b00      	cmp	r3, #0
 8009052:	d106      	bne.n	8009062 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7f9 ff11 	bl	8002e84 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2202      	movs	r2, #2
 8009066:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3304      	adds	r3, #4
 8009072:	4619      	mov	r1, r3
 8009074:	4610      	mov	r0, r2
 8009076:	f001 fdeb 	bl	800ac50 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6818      	ldr	r0, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	461a      	mov	r2, r3
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	f001 fe55 	bl	800ad34 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d101      	bne.n	80090b8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80090b4:	2302      	movs	r3, #2
 80090b6:	e018      	b.n	80090ea <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	68b9      	ldr	r1, [r7, #8]
 80090c8:	4618      	mov	r0, r3
 80090ca:	f001 feb3 	bl	800ae34 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d104      	bne.n	80090e0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2205      	movs	r2, #5
 80090da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80090de:	e003      	b.n	80090e8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b082      	sub	sp, #8
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b02      	cmp	r3, #2
 8009106:	d101      	bne.n	800910c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009108:	2302      	movs	r3, #2
 800910a:	e00e      	b.n	800912a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2202      	movs	r2, #2
 8009110:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	4618      	mov	r0, r3
 800911c:	f001 feab 	bl	800ae76 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
	...

08009134 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d101      	bne.n	8009146 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e04c      	b.n	80091e0 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d106      	bne.n	8009160 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7f9 fb6e 	bl	800283c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2202      	movs	r2, #2
 8009164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f022 0203 	bic.w	r2, r2, #3
 8009176:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	4b19      	ldr	r3, [pc, #100]	; (80091e8 <HAL_SPDIFRX_Init+0xb4>)
 8009184:	4013      	ands	r3, r2
 8009186:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009190:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009196:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800919c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80091a2:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80091a8:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80091ae:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80091b4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80091ba:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80091c0:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	fff88407 	.word	0xfff88407

080091ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e084      	b.n	8009308 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b00      	cmp	r3, #0
 800920e:	d106      	bne.n	800921e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7f9 fb51 	bl	80028c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2202      	movs	r2, #2
 8009222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009234:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800923e:	d902      	bls.n	8009246 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009240:	2300      	movs	r3, #0
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	e002      	b.n	800924c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800924a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009254:	d007      	beq.n	8009266 <HAL_SPI_Init+0x7a>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800925e:	d002      	beq.n	8009266 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10b      	bne.n	8009286 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009276:	d903      	bls.n	8009280 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2202      	movs	r2, #2
 800927c:	631a      	str	r2, [r3, #48]	; 0x30
 800927e:	e002      	b.n	8009286 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	431a      	orrs	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	691b      	ldr	r3, [r3, #16]
 8009294:	431a      	orrs	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	431a      	orrs	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092a4:	431a      	orrs	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	431a      	orrs	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a1b      	ldr	r3, [r3, #32]
 80092b0:	ea42 0103 	orr.w	r1, r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	430a      	orrs	r2, r1
 80092be:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	0c1b      	lsrs	r3, r3, #16
 80092c6:	f003 0204 	and.w	r2, r3, #4
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ce:	431a      	orrs	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d4:	431a      	orrs	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	ea42 0103 	orr.w	r1, r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	69da      	ldr	r2, [r3, #28]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2201      	movs	r2, #1
 8009302:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e01d      	b.n	800935e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d106      	bne.n	800933c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7f9 fb24 	bl	8002984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	3304      	adds	r3, #4
 800934c:	4619      	mov	r1, r3
 800934e:	4610      	mov	r0, r2
 8009350:	f000 fb78 	bl	8009a44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
	...

08009368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f042 0201 	orr.w	r2, r2, #1
 800937e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689a      	ldr	r2, [r3, #8]
 8009386:	4b0c      	ldr	r3, [pc, #48]	; (80093b8 <HAL_TIM_Base_Start_IT+0x50>)
 8009388:	4013      	ands	r3, r2
 800938a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2b06      	cmp	r3, #6
 8009390:	d00b      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x42>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009398:	d007      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f042 0201 	orr.w	r2, r2, #1
 80093a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	00010007 	.word	0x00010007

080093bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e01d      	b.n	800940a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d106      	bne.n	80093e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7f9 fb3c 	bl	8002a60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2202      	movs	r2, #2
 80093ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	3304      	adds	r3, #4
 80093f8:	4619      	mov	r1, r3
 80093fa:	4610      	mov	r0, r2
 80093fc:	f000 fb22 	bl	8009a44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b082      	sub	sp, #8
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	f003 0302 	and.w	r3, r3, #2
 8009424:	2b02      	cmp	r3, #2
 8009426:	d122      	bne.n	800946e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	2b02      	cmp	r3, #2
 8009434:	d11b      	bne.n	800946e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f06f 0202 	mvn.w	r2, #2
 800943e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	f003 0303 	and.w	r3, r3, #3
 8009450:	2b00      	cmp	r3, #0
 8009452:	d003      	beq.n	800945c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fad7 	bl	8009a08 <HAL_TIM_IC_CaptureCallback>
 800945a:	e005      	b.n	8009468 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fac9 	bl	80099f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 fada 	bl	8009a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	f003 0304 	and.w	r3, r3, #4
 8009478:	2b04      	cmp	r3, #4
 800947a:	d122      	bne.n	80094c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	f003 0304 	and.w	r3, r3, #4
 8009486:	2b04      	cmp	r3, #4
 8009488:	d11b      	bne.n	80094c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f06f 0204 	mvn.w	r2, #4
 8009492:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2202      	movs	r2, #2
 8009498:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d003      	beq.n	80094b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 faad 	bl	8009a08 <HAL_TIM_IC_CaptureCallback>
 80094ae:	e005      	b.n	80094bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 fa9f 	bl	80099f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fab0 	bl	8009a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	f003 0308 	and.w	r3, r3, #8
 80094cc:	2b08      	cmp	r3, #8
 80094ce:	d122      	bne.n	8009516 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	f003 0308 	and.w	r3, r3, #8
 80094da:	2b08      	cmp	r3, #8
 80094dc:	d11b      	bne.n	8009516 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f06f 0208 	mvn.w	r2, #8
 80094e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2204      	movs	r2, #4
 80094ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	69db      	ldr	r3, [r3, #28]
 80094f4:	f003 0303 	and.w	r3, r3, #3
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d003      	beq.n	8009504 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fa83 	bl	8009a08 <HAL_TIM_IC_CaptureCallback>
 8009502:	e005      	b.n	8009510 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fa75 	bl	80099f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fa86 	bl	8009a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	f003 0310 	and.w	r3, r3, #16
 8009520:	2b10      	cmp	r3, #16
 8009522:	d122      	bne.n	800956a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	f003 0310 	and.w	r3, r3, #16
 800952e:	2b10      	cmp	r3, #16
 8009530:	d11b      	bne.n	800956a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f06f 0210 	mvn.w	r2, #16
 800953a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2208      	movs	r2, #8
 8009540:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69db      	ldr	r3, [r3, #28]
 8009548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800954c:	2b00      	cmp	r3, #0
 800954e:	d003      	beq.n	8009558 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fa59 	bl	8009a08 <HAL_TIM_IC_CaptureCallback>
 8009556:	e005      	b.n	8009564 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fa4b 	bl	80099f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fa5c 	bl	8009a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	f003 0301 	and.w	r3, r3, #1
 8009574:	2b01      	cmp	r3, #1
 8009576:	d10e      	bne.n	8009596 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b01      	cmp	r3, #1
 8009584:	d107      	bne.n	8009596 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f06f 0201 	mvn.w	r2, #1
 800958e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7f8 fd11 	bl	8001fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095a0:	2b80      	cmp	r3, #128	; 0x80
 80095a2:	d10e      	bne.n	80095c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ae:	2b80      	cmp	r3, #128	; 0x80
 80095b0:	d107      	bne.n	80095c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 feef 	bl	800a3a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095d0:	d10e      	bne.n	80095f0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095dc:	2b80      	cmp	r3, #128	; 0x80
 80095de:	d107      	bne.n	80095f0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80095e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fee2 	bl	800a3b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095fa:	2b40      	cmp	r3, #64	; 0x40
 80095fc:	d10e      	bne.n	800961c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009608:	2b40      	cmp	r3, #64	; 0x40
 800960a:	d107      	bne.n	800961c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fa0a 	bl	8009a30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	f003 0320 	and.w	r3, r3, #32
 8009626:	2b20      	cmp	r3, #32
 8009628:	d10e      	bne.n	8009648 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f003 0320 	and.w	r3, r3, #32
 8009634:	2b20      	cmp	r3, #32
 8009636:	d107      	bne.n	8009648 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f06f 0220 	mvn.w	r2, #32
 8009640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fea2 	bl	800a38c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009648:	bf00      	nop
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009662:	2b01      	cmp	r3, #1
 8009664:	d101      	bne.n	800966a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009666:	2302      	movs	r3, #2
 8009668:	e105      	b.n	8009876 <HAL_TIM_PWM_ConfigChannel+0x226>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2201      	movs	r2, #1
 800966e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2202      	movs	r2, #2
 8009676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2b14      	cmp	r3, #20
 800967e:	f200 80f0 	bhi.w	8009862 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009682:	a201      	add	r2, pc, #4	; (adr r2, 8009688 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009688:	080096dd 	.word	0x080096dd
 800968c:	08009863 	.word	0x08009863
 8009690:	08009863 	.word	0x08009863
 8009694:	08009863 	.word	0x08009863
 8009698:	0800971d 	.word	0x0800971d
 800969c:	08009863 	.word	0x08009863
 80096a0:	08009863 	.word	0x08009863
 80096a4:	08009863 	.word	0x08009863
 80096a8:	0800975f 	.word	0x0800975f
 80096ac:	08009863 	.word	0x08009863
 80096b0:	08009863 	.word	0x08009863
 80096b4:	08009863 	.word	0x08009863
 80096b8:	0800979f 	.word	0x0800979f
 80096bc:	08009863 	.word	0x08009863
 80096c0:	08009863 	.word	0x08009863
 80096c4:	08009863 	.word	0x08009863
 80096c8:	080097e1 	.word	0x080097e1
 80096cc:	08009863 	.word	0x08009863
 80096d0:	08009863 	.word	0x08009863
 80096d4:	08009863 	.word	0x08009863
 80096d8:	08009821 	.word	0x08009821
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68b9      	ldr	r1, [r7, #8]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 fa4e 	bl	8009b84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	699a      	ldr	r2, [r3, #24]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f042 0208 	orr.w	r2, r2, #8
 80096f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	699a      	ldr	r2, [r3, #24]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f022 0204 	bic.w	r2, r2, #4
 8009706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	6999      	ldr	r1, [r3, #24]
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	691a      	ldr	r2, [r3, #16]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	430a      	orrs	r2, r1
 8009718:	619a      	str	r2, [r3, #24]
      break;
 800971a:	e0a3      	b.n	8009864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68b9      	ldr	r1, [r7, #8]
 8009722:	4618      	mov	r0, r3
 8009724:	f000 faa0 	bl	8009c68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	699a      	ldr	r2, [r3, #24]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	699a      	ldr	r2, [r3, #24]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6999      	ldr	r1, [r3, #24]
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	021a      	lsls	r2, r3, #8
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	430a      	orrs	r2, r1
 800975a:	619a      	str	r2, [r3, #24]
      break;
 800975c:	e082      	b.n	8009864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68b9      	ldr	r1, [r7, #8]
 8009764:	4618      	mov	r0, r3
 8009766:	f000 faf7 	bl	8009d58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	69da      	ldr	r2, [r3, #28]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f042 0208 	orr.w	r2, r2, #8
 8009778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	69da      	ldr	r2, [r3, #28]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f022 0204 	bic.w	r2, r2, #4
 8009788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	69d9      	ldr	r1, [r3, #28]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	691a      	ldr	r2, [r3, #16]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	430a      	orrs	r2, r1
 800979a:	61da      	str	r2, [r3, #28]
      break;
 800979c:	e062      	b.n	8009864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68b9      	ldr	r1, [r7, #8]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 fb4d 	bl	8009e44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	69da      	ldr	r2, [r3, #28]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	69da      	ldr	r2, [r3, #28]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	69d9      	ldr	r1, [r3, #28]
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	021a      	lsls	r2, r3, #8
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	430a      	orrs	r2, r1
 80097dc:	61da      	str	r2, [r3, #28]
      break;
 80097de:	e041      	b.n	8009864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68b9      	ldr	r1, [r7, #8]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 fb84 	bl	8009ef4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f042 0208 	orr.w	r2, r2, #8
 80097fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f022 0204 	bic.w	r2, r2, #4
 800980a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	691a      	ldr	r2, [r3, #16]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	430a      	orrs	r2, r1
 800981c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800981e:	e021      	b.n	8009864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68b9      	ldr	r1, [r7, #8]
 8009826:	4618      	mov	r0, r3
 8009828:	f000 fbb6 	bl	8009f98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800983a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800984a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	021a      	lsls	r2, r3, #8
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	430a      	orrs	r2, r1
 800985e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009860:	e000      	b.n	8009864 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009862:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop

08009880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009890:	2b01      	cmp	r3, #1
 8009892:	d101      	bne.n	8009898 <HAL_TIM_ConfigClockSource+0x18>
 8009894:	2302      	movs	r3, #2
 8009896:	e0a6      	b.n	80099e6 <HAL_TIM_ConfigClockSource+0x166>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2202      	movs	r2, #2
 80098a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	4b4f      	ldr	r3, [pc, #316]	; (80099f0 <HAL_TIM_ConfigClockSource+0x170>)
 80098b4:	4013      	ands	r3, r2
 80098b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b40      	cmp	r3, #64	; 0x40
 80098ce:	d067      	beq.n	80099a0 <HAL_TIM_ConfigClockSource+0x120>
 80098d0:	2b40      	cmp	r3, #64	; 0x40
 80098d2:	d80b      	bhi.n	80098ec <HAL_TIM_ConfigClockSource+0x6c>
 80098d4:	2b10      	cmp	r3, #16
 80098d6:	d073      	beq.n	80099c0 <HAL_TIM_ConfigClockSource+0x140>
 80098d8:	2b10      	cmp	r3, #16
 80098da:	d802      	bhi.n	80098e2 <HAL_TIM_ConfigClockSource+0x62>
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d06f      	beq.n	80099c0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80098e0:	e078      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80098e2:	2b20      	cmp	r3, #32
 80098e4:	d06c      	beq.n	80099c0 <HAL_TIM_ConfigClockSource+0x140>
 80098e6:	2b30      	cmp	r3, #48	; 0x30
 80098e8:	d06a      	beq.n	80099c0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80098ea:	e073      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80098ec:	2b70      	cmp	r3, #112	; 0x70
 80098ee:	d00d      	beq.n	800990c <HAL_TIM_ConfigClockSource+0x8c>
 80098f0:	2b70      	cmp	r3, #112	; 0x70
 80098f2:	d804      	bhi.n	80098fe <HAL_TIM_ConfigClockSource+0x7e>
 80098f4:	2b50      	cmp	r3, #80	; 0x50
 80098f6:	d033      	beq.n	8009960 <HAL_TIM_ConfigClockSource+0xe0>
 80098f8:	2b60      	cmp	r3, #96	; 0x60
 80098fa:	d041      	beq.n	8009980 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80098fc:	e06a      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80098fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009902:	d066      	beq.n	80099d2 <HAL_TIM_ConfigClockSource+0x152>
 8009904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009908:	d017      	beq.n	800993a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800990a:	e063      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6818      	ldr	r0, [r3, #0]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	6899      	ldr	r1, [r3, #8]
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	685a      	ldr	r2, [r3, #4]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	f000 fc0a 	bl	800a134 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800992e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	609a      	str	r2, [r3, #8]
      break;
 8009938:	e04c      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6818      	ldr	r0, [r3, #0]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	6899      	ldr	r1, [r3, #8]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	685a      	ldr	r2, [r3, #4]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	f000 fbf3 	bl	800a134 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	689a      	ldr	r2, [r3, #8]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800995c:	609a      	str	r2, [r3, #8]
      break;
 800995e:	e039      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6818      	ldr	r0, [r3, #0]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	6859      	ldr	r1, [r3, #4]
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	461a      	mov	r2, r3
 800996e:	f000 fb67 	bl	800a040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2150      	movs	r1, #80	; 0x50
 8009978:	4618      	mov	r0, r3
 800997a:	f000 fbc0 	bl	800a0fe <TIM_ITRx_SetConfig>
      break;
 800997e:	e029      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6818      	ldr	r0, [r3, #0]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	6859      	ldr	r1, [r3, #4]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	461a      	mov	r2, r3
 800998e:	f000 fb86 	bl	800a09e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2160      	movs	r1, #96	; 0x60
 8009998:	4618      	mov	r0, r3
 800999a:	f000 fbb0 	bl	800a0fe <TIM_ITRx_SetConfig>
      break;
 800999e:	e019      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6818      	ldr	r0, [r3, #0]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	6859      	ldr	r1, [r3, #4]
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	461a      	mov	r2, r3
 80099ae:	f000 fb47 	bl	800a040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2140      	movs	r1, #64	; 0x40
 80099b8:	4618      	mov	r0, r3
 80099ba:	f000 fba0 	bl	800a0fe <TIM_ITRx_SetConfig>
      break;
 80099be:	e009      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4619      	mov	r1, r3
 80099ca:	4610      	mov	r0, r2
 80099cc:	f000 fb97 	bl	800a0fe <TIM_ITRx_SetConfig>
      break;
 80099d0:	e000      	b.n	80099d4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80099d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	fffeff88 	.word	0xfffeff88

080099f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a40      	ldr	r2, [pc, #256]	; (8009b58 <TIM_Base_SetConfig+0x114>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d013      	beq.n	8009a84 <TIM_Base_SetConfig+0x40>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a62:	d00f      	beq.n	8009a84 <TIM_Base_SetConfig+0x40>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a3d      	ldr	r2, [pc, #244]	; (8009b5c <TIM_Base_SetConfig+0x118>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d00b      	beq.n	8009a84 <TIM_Base_SetConfig+0x40>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a3c      	ldr	r2, [pc, #240]	; (8009b60 <TIM_Base_SetConfig+0x11c>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d007      	beq.n	8009a84 <TIM_Base_SetConfig+0x40>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a3b      	ldr	r2, [pc, #236]	; (8009b64 <TIM_Base_SetConfig+0x120>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d003      	beq.n	8009a84 <TIM_Base_SetConfig+0x40>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a3a      	ldr	r2, [pc, #232]	; (8009b68 <TIM_Base_SetConfig+0x124>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d108      	bne.n	8009a96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a2f      	ldr	r2, [pc, #188]	; (8009b58 <TIM_Base_SetConfig+0x114>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d02b      	beq.n	8009af6 <TIM_Base_SetConfig+0xb2>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aa4:	d027      	beq.n	8009af6 <TIM_Base_SetConfig+0xb2>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	4a2c      	ldr	r2, [pc, #176]	; (8009b5c <TIM_Base_SetConfig+0x118>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d023      	beq.n	8009af6 <TIM_Base_SetConfig+0xb2>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4a2b      	ldr	r2, [pc, #172]	; (8009b60 <TIM_Base_SetConfig+0x11c>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d01f      	beq.n	8009af6 <TIM_Base_SetConfig+0xb2>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4a2a      	ldr	r2, [pc, #168]	; (8009b64 <TIM_Base_SetConfig+0x120>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d01b      	beq.n	8009af6 <TIM_Base_SetConfig+0xb2>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4a29      	ldr	r2, [pc, #164]	; (8009b68 <TIM_Base_SetConfig+0x124>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d017      	beq.n	8009af6 <TIM_Base_SetConfig+0xb2>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a28      	ldr	r2, [pc, #160]	; (8009b6c <TIM_Base_SetConfig+0x128>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d013      	beq.n	8009af6 <TIM_Base_SetConfig+0xb2>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a27      	ldr	r2, [pc, #156]	; (8009b70 <TIM_Base_SetConfig+0x12c>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d00f      	beq.n	8009af6 <TIM_Base_SetConfig+0xb2>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a26      	ldr	r2, [pc, #152]	; (8009b74 <TIM_Base_SetConfig+0x130>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d00b      	beq.n	8009af6 <TIM_Base_SetConfig+0xb2>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a25      	ldr	r2, [pc, #148]	; (8009b78 <TIM_Base_SetConfig+0x134>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d007      	beq.n	8009af6 <TIM_Base_SetConfig+0xb2>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a24      	ldr	r2, [pc, #144]	; (8009b7c <TIM_Base_SetConfig+0x138>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d003      	beq.n	8009af6 <TIM_Base_SetConfig+0xb2>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a23      	ldr	r2, [pc, #140]	; (8009b80 <TIM_Base_SetConfig+0x13c>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d108      	bne.n	8009b08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	689a      	ldr	r2, [r3, #8]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a0a      	ldr	r2, [pc, #40]	; (8009b58 <TIM_Base_SetConfig+0x114>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d003      	beq.n	8009b3c <TIM_Base_SetConfig+0xf8>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a0c      	ldr	r2, [pc, #48]	; (8009b68 <TIM_Base_SetConfig+0x124>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d103      	bne.n	8009b44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	691a      	ldr	r2, [r3, #16]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	615a      	str	r2, [r3, #20]
}
 8009b4a:	bf00      	nop
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	40010000 	.word	0x40010000
 8009b5c:	40000400 	.word	0x40000400
 8009b60:	40000800 	.word	0x40000800
 8009b64:	40000c00 	.word	0x40000c00
 8009b68:	40010400 	.word	0x40010400
 8009b6c:	40014000 	.word	0x40014000
 8009b70:	40014400 	.word	0x40014400
 8009b74:	40014800 	.word	0x40014800
 8009b78:	40001800 	.word	0x40001800
 8009b7c:	40001c00 	.word	0x40001c00
 8009b80:	40002000 	.word	0x40002000

08009b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b087      	sub	sp, #28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	f023 0201 	bic.w	r2, r3, #1
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a1b      	ldr	r3, [r3, #32]
 8009b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	4b2b      	ldr	r3, [pc, #172]	; (8009c5c <TIM_OC1_SetConfig+0xd8>)
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f023 0303 	bic.w	r3, r3, #3
 8009bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f023 0302 	bic.w	r3, r3, #2
 8009bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4a21      	ldr	r2, [pc, #132]	; (8009c60 <TIM_OC1_SetConfig+0xdc>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d003      	beq.n	8009be8 <TIM_OC1_SetConfig+0x64>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4a20      	ldr	r2, [pc, #128]	; (8009c64 <TIM_OC1_SetConfig+0xe0>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d10c      	bne.n	8009c02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f023 0308 	bic.w	r3, r3, #8
 8009bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	f023 0304 	bic.w	r3, r3, #4
 8009c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a16      	ldr	r2, [pc, #88]	; (8009c60 <TIM_OC1_SetConfig+0xdc>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d003      	beq.n	8009c12 <TIM_OC1_SetConfig+0x8e>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a15      	ldr	r2, [pc, #84]	; (8009c64 <TIM_OC1_SetConfig+0xe0>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d111      	bne.n	8009c36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	693a      	ldr	r2, [r7, #16]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	685a      	ldr	r2, [r3, #4]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	697a      	ldr	r2, [r7, #20]
 8009c4e:	621a      	str	r2, [r3, #32]
}
 8009c50:	bf00      	nop
 8009c52:	371c      	adds	r7, #28
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr
 8009c5c:	fffeff8f 	.word	0xfffeff8f
 8009c60:	40010000 	.word	0x40010000
 8009c64:	40010400 	.word	0x40010400

08009c68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b087      	sub	sp, #28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	f023 0210 	bic.w	r2, r3, #16
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a1b      	ldr	r3, [r3, #32]
 8009c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	699b      	ldr	r3, [r3, #24]
 8009c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	4b2e      	ldr	r3, [pc, #184]	; (8009d4c <TIM_OC2_SetConfig+0xe4>)
 8009c94:	4013      	ands	r3, r2
 8009c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	021b      	lsls	r3, r3, #8
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	f023 0320 	bic.w	r3, r3, #32
 8009cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	011b      	lsls	r3, r3, #4
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a23      	ldr	r2, [pc, #140]	; (8009d50 <TIM_OC2_SetConfig+0xe8>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d003      	beq.n	8009cd0 <TIM_OC2_SetConfig+0x68>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a22      	ldr	r2, [pc, #136]	; (8009d54 <TIM_OC2_SetConfig+0xec>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d10d      	bne.n	8009cec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	011b      	lsls	r3, r3, #4
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a18      	ldr	r2, [pc, #96]	; (8009d50 <TIM_OC2_SetConfig+0xe8>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d003      	beq.n	8009cfc <TIM_OC2_SetConfig+0x94>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a17      	ldr	r2, [pc, #92]	; (8009d54 <TIM_OC2_SetConfig+0xec>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d113      	bne.n	8009d24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	693a      	ldr	r2, [r7, #16]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	621a      	str	r2, [r3, #32]
}
 8009d3e:	bf00      	nop
 8009d40:	371c      	adds	r7, #28
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	feff8fff 	.word	0xfeff8fff
 8009d50:	40010000 	.word	0x40010000
 8009d54:	40010400 	.word	0x40010400

08009d58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	69db      	ldr	r3, [r3, #28]
 8009d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	4b2d      	ldr	r3, [pc, #180]	; (8009e38 <TIM_OC3_SetConfig+0xe0>)
 8009d84:	4013      	ands	r3, r2
 8009d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f023 0303 	bic.w	r3, r3, #3
 8009d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	021b      	lsls	r3, r3, #8
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a22      	ldr	r2, [pc, #136]	; (8009e3c <TIM_OC3_SetConfig+0xe4>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d003      	beq.n	8009dbe <TIM_OC3_SetConfig+0x66>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a21      	ldr	r2, [pc, #132]	; (8009e40 <TIM_OC3_SetConfig+0xe8>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d10d      	bne.n	8009dda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	021b      	lsls	r3, r3, #8
 8009dcc:	697a      	ldr	r2, [r7, #20]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a17      	ldr	r2, [pc, #92]	; (8009e3c <TIM_OC3_SetConfig+0xe4>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d003      	beq.n	8009dea <TIM_OC3_SetConfig+0x92>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a16      	ldr	r2, [pc, #88]	; (8009e40 <TIM_OC3_SetConfig+0xe8>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d113      	bne.n	8009e12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	011b      	lsls	r3, r3, #4
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	011b      	lsls	r3, r3, #4
 8009e0c:	693a      	ldr	r2, [r7, #16]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	685a      	ldr	r2, [r3, #4]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	621a      	str	r2, [r3, #32]
}
 8009e2c:	bf00      	nop
 8009e2e:	371c      	adds	r7, #28
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr
 8009e38:	fffeff8f 	.word	0xfffeff8f
 8009e3c:	40010000 	.word	0x40010000
 8009e40:	40010400 	.word	0x40010400

08009e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b087      	sub	sp, #28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	69db      	ldr	r3, [r3, #28]
 8009e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	4b1e      	ldr	r3, [pc, #120]	; (8009ee8 <TIM_OC4_SetConfig+0xa4>)
 8009e70:	4013      	ands	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	021b      	lsls	r3, r3, #8
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	031b      	lsls	r3, r3, #12
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a13      	ldr	r2, [pc, #76]	; (8009eec <TIM_OC4_SetConfig+0xa8>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d003      	beq.n	8009eac <TIM_OC4_SetConfig+0x68>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a12      	ldr	r2, [pc, #72]	; (8009ef0 <TIM_OC4_SetConfig+0xac>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d109      	bne.n	8009ec0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009eb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	695b      	ldr	r3, [r3, #20]
 8009eb8:	019b      	lsls	r3, r3, #6
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	685a      	ldr	r2, [r3, #4]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	621a      	str	r2, [r3, #32]
}
 8009eda:	bf00      	nop
 8009edc:	371c      	adds	r7, #28
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	feff8fff 	.word	0xfeff8fff
 8009eec:	40010000 	.word	0x40010000
 8009ef0:	40010400 	.word	0x40010400

08009ef4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b087      	sub	sp, #28
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	4b1b      	ldr	r3, [pc, #108]	; (8009f8c <TIM_OC5_SetConfig+0x98>)
 8009f20:	4013      	ands	r3, r2
 8009f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009f34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	041b      	lsls	r3, r3, #16
 8009f3c:	693a      	ldr	r2, [r7, #16]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a12      	ldr	r2, [pc, #72]	; (8009f90 <TIM_OC5_SetConfig+0x9c>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d003      	beq.n	8009f52 <TIM_OC5_SetConfig+0x5e>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a11      	ldr	r2, [pc, #68]	; (8009f94 <TIM_OC5_SetConfig+0xa0>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d109      	bne.n	8009f66 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	695b      	ldr	r3, [r3, #20]
 8009f5e:	021b      	lsls	r3, r3, #8
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	697a      	ldr	r2, [r7, #20]
 8009f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	685a      	ldr	r2, [r3, #4]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	621a      	str	r2, [r3, #32]
}
 8009f80:	bf00      	nop
 8009f82:	371c      	adds	r7, #28
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	fffeff8f 	.word	0xfffeff8f
 8009f90:	40010000 	.word	0x40010000
 8009f94:	40010400 	.word	0x40010400

08009f98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b087      	sub	sp, #28
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	4b1c      	ldr	r3, [pc, #112]	; (800a034 <TIM_OC6_SetConfig+0x9c>)
 8009fc4:	4013      	ands	r3, r2
 8009fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	021b      	lsls	r3, r3, #8
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	051b      	lsls	r3, r3, #20
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a13      	ldr	r2, [pc, #76]	; (800a038 <TIM_OC6_SetConfig+0xa0>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d003      	beq.n	8009ff8 <TIM_OC6_SetConfig+0x60>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a12      	ldr	r2, [pc, #72]	; (800a03c <TIM_OC6_SetConfig+0xa4>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d109      	bne.n	800a00c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	695b      	ldr	r3, [r3, #20]
 800a004:	029b      	lsls	r3, r3, #10
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	4313      	orrs	r3, r2
 800a00a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	697a      	ldr	r2, [r7, #20]
 800a010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	693a      	ldr	r2, [r7, #16]
 800a024:	621a      	str	r2, [r3, #32]
}
 800a026:	bf00      	nop
 800a028:	371c      	adds	r7, #28
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	feff8fff 	.word	0xfeff8fff
 800a038:	40010000 	.word	0x40010000
 800a03c:	40010400 	.word	0x40010400

0800a040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a040:	b480      	push	{r7}
 800a042:	b087      	sub	sp, #28
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6a1b      	ldr	r3, [r3, #32]
 800a050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	f023 0201 	bic.w	r2, r3, #1
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a06a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	011b      	lsls	r3, r3, #4
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	4313      	orrs	r3, r2
 800a074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f023 030a 	bic.w	r3, r3, #10
 800a07c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	4313      	orrs	r3, r2
 800a084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	697a      	ldr	r2, [r7, #20]
 800a090:	621a      	str	r2, [r3, #32]
}
 800a092:	bf00      	nop
 800a094:	371c      	adds	r7, #28
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b087      	sub	sp, #28
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	60f8      	str	r0, [r7, #12]
 800a0a6:	60b9      	str	r1, [r7, #8]
 800a0a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	f023 0210 	bic.w	r2, r3, #16
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6a1b      	ldr	r3, [r3, #32]
 800a0c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	031b      	lsls	r3, r3, #12
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a0da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	011b      	lsls	r3, r3, #4
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	697a      	ldr	r2, [r7, #20]
 800a0ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	621a      	str	r2, [r3, #32]
}
 800a0f2:	bf00      	nop
 800a0f4:	371c      	adds	r7, #28
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b085      	sub	sp, #20
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	f043 0307 	orr.w	r3, r3, #7
 800a120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	609a      	str	r2, [r3, #8]
}
 800a128:	bf00      	nop
 800a12a:	3714      	adds	r7, #20
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a134:	b480      	push	{r7}
 800a136:	b087      	sub	sp, #28
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a14e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	021a      	lsls	r2, r3, #8
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	431a      	orrs	r2, r3
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	697a      	ldr	r2, [r7, #20]
 800a15e:	4313      	orrs	r3, r2
 800a160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	697a      	ldr	r2, [r7, #20]
 800a166:	609a      	str	r2, [r3, #8]
}
 800a168:	bf00      	nop
 800a16a:	371c      	adds	r7, #28
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a184:	2b01      	cmp	r3, #1
 800a186:	d101      	bne.n	800a18c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a188:	2302      	movs	r3, #2
 800a18a:	e06d      	b.n	800a268 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2202      	movs	r2, #2
 800a198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a30      	ldr	r2, [pc, #192]	; (800a274 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d004      	beq.n	800a1c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a2f      	ldr	r2, [pc, #188]	; (800a278 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d108      	bne.n	800a1d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a1c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a20      	ldr	r2, [pc, #128]	; (800a274 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d022      	beq.n	800a23c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1fe:	d01d      	beq.n	800a23c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a1d      	ldr	r2, [pc, #116]	; (800a27c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d018      	beq.n	800a23c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a1c      	ldr	r2, [pc, #112]	; (800a280 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d013      	beq.n	800a23c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a1a      	ldr	r2, [pc, #104]	; (800a284 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d00e      	beq.n	800a23c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a15      	ldr	r2, [pc, #84]	; (800a278 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d009      	beq.n	800a23c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a16      	ldr	r2, [pc, #88]	; (800a288 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d004      	beq.n	800a23c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a15      	ldr	r2, [pc, #84]	; (800a28c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d10c      	bne.n	800a256 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a242:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3714      	adds	r7, #20
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr
 800a274:	40010000 	.word	0x40010000
 800a278:	40010400 	.word	0x40010400
 800a27c:	40000400 	.word	0x40000400
 800a280:	40000800 	.word	0x40000800
 800a284:	40000c00 	.word	0x40000c00
 800a288:	40014000 	.word	0x40014000
 800a28c:	40001800 	.word	0x40001800

0800a290 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a29a:	2300      	movs	r3, #0
 800a29c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d101      	bne.n	800a2ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	e065      	b.n	800a378 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	695b      	ldr	r3, [r3, #20]
 800a304:	4313      	orrs	r3, r2
 800a306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a312:	4313      	orrs	r3, r2
 800a314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	041b      	lsls	r3, r3, #16
 800a322:	4313      	orrs	r3, r2
 800a324:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a16      	ldr	r2, [pc, #88]	; (800a384 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d004      	beq.n	800a33a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a14      	ldr	r2, [pc, #80]	; (800a388 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d115      	bne.n	800a366 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a344:	051b      	lsls	r3, r3, #20
 800a346:	4313      	orrs	r3, r2
 800a348:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	69db      	ldr	r3, [r3, #28]
 800a354:	4313      	orrs	r3, r2
 800a356:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	6a1b      	ldr	r3, [r3, #32]
 800a362:	4313      	orrs	r3, r2
 800a364:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3714      	adds	r7, #20
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr
 800a384:	40010000 	.word	0x40010000
 800a388:	40010400 	.word	0x40010400

0800a38c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d101      	bne.n	800a3da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e040      	b.n	800a45c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d106      	bne.n	800a3f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f7f8 fc26 	bl	8002c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2224      	movs	r2, #36	; 0x24
 800a3f4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f022 0201 	bic.w	r2, r2, #1
 800a404:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f82c 	bl	800a464 <UART_SetConfig>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d101      	bne.n	800a416 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	e022      	b.n	800a45c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d002      	beq.n	800a424 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 faca 	bl	800a9b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	685a      	ldr	r2, [r3, #4]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a432:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	689a      	ldr	r2, [r3, #8]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a442:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f042 0201 	orr.w	r2, r2, #1
 800a452:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 fb51 	bl	800aafc <UART_CheckIdleState>
 800a45a:	4603      	mov	r3, r0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b088      	sub	sp, #32
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a470:	2300      	movs	r3, #0
 800a472:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	689a      	ldr	r2, [r3, #8]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	431a      	orrs	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	431a      	orrs	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	69db      	ldr	r3, [r3, #28]
 800a488:	4313      	orrs	r3, r2
 800a48a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	4bb1      	ldr	r3, [pc, #708]	; (800a758 <UART_SetConfig+0x2f4>)
 800a494:	4013      	ands	r3, r2
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	6812      	ldr	r2, [r2, #0]
 800a49a:	6939      	ldr	r1, [r7, #16]
 800a49c:	430b      	orrs	r3, r1
 800a49e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68da      	ldr	r2, [r3, #12]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	430a      	orrs	r2, r1
 800a4b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	699b      	ldr	r3, [r3, #24]
 800a4ba:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a1b      	ldr	r3, [r3, #32]
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	430a      	orrs	r2, r1
 800a4d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a9f      	ldr	r2, [pc, #636]	; (800a75c <UART_SetConfig+0x2f8>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d121      	bne.n	800a528 <UART_SetConfig+0xc4>
 800a4e4:	4b9e      	ldr	r3, [pc, #632]	; (800a760 <UART_SetConfig+0x2fc>)
 800a4e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ea:	f003 0303 	and.w	r3, r3, #3
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	d816      	bhi.n	800a520 <UART_SetConfig+0xbc>
 800a4f2:	a201      	add	r2, pc, #4	; (adr r2, 800a4f8 <UART_SetConfig+0x94>)
 800a4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f8:	0800a509 	.word	0x0800a509
 800a4fc:	0800a515 	.word	0x0800a515
 800a500:	0800a50f 	.word	0x0800a50f
 800a504:	0800a51b 	.word	0x0800a51b
 800a508:	2301      	movs	r3, #1
 800a50a:	77fb      	strb	r3, [r7, #31]
 800a50c:	e151      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a50e:	2302      	movs	r3, #2
 800a510:	77fb      	strb	r3, [r7, #31]
 800a512:	e14e      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a514:	2304      	movs	r3, #4
 800a516:	77fb      	strb	r3, [r7, #31]
 800a518:	e14b      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a51a:	2308      	movs	r3, #8
 800a51c:	77fb      	strb	r3, [r7, #31]
 800a51e:	e148      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a520:	2310      	movs	r3, #16
 800a522:	77fb      	strb	r3, [r7, #31]
 800a524:	bf00      	nop
 800a526:	e144      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a8d      	ldr	r2, [pc, #564]	; (800a764 <UART_SetConfig+0x300>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d134      	bne.n	800a59c <UART_SetConfig+0x138>
 800a532:	4b8b      	ldr	r3, [pc, #556]	; (800a760 <UART_SetConfig+0x2fc>)
 800a534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a538:	f003 030c 	and.w	r3, r3, #12
 800a53c:	2b0c      	cmp	r3, #12
 800a53e:	d829      	bhi.n	800a594 <UART_SetConfig+0x130>
 800a540:	a201      	add	r2, pc, #4	; (adr r2, 800a548 <UART_SetConfig+0xe4>)
 800a542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a546:	bf00      	nop
 800a548:	0800a57d 	.word	0x0800a57d
 800a54c:	0800a595 	.word	0x0800a595
 800a550:	0800a595 	.word	0x0800a595
 800a554:	0800a595 	.word	0x0800a595
 800a558:	0800a589 	.word	0x0800a589
 800a55c:	0800a595 	.word	0x0800a595
 800a560:	0800a595 	.word	0x0800a595
 800a564:	0800a595 	.word	0x0800a595
 800a568:	0800a583 	.word	0x0800a583
 800a56c:	0800a595 	.word	0x0800a595
 800a570:	0800a595 	.word	0x0800a595
 800a574:	0800a595 	.word	0x0800a595
 800a578:	0800a58f 	.word	0x0800a58f
 800a57c:	2300      	movs	r3, #0
 800a57e:	77fb      	strb	r3, [r7, #31]
 800a580:	e117      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a582:	2302      	movs	r3, #2
 800a584:	77fb      	strb	r3, [r7, #31]
 800a586:	e114      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a588:	2304      	movs	r3, #4
 800a58a:	77fb      	strb	r3, [r7, #31]
 800a58c:	e111      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a58e:	2308      	movs	r3, #8
 800a590:	77fb      	strb	r3, [r7, #31]
 800a592:	e10e      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a594:	2310      	movs	r3, #16
 800a596:	77fb      	strb	r3, [r7, #31]
 800a598:	bf00      	nop
 800a59a:	e10a      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a71      	ldr	r2, [pc, #452]	; (800a768 <UART_SetConfig+0x304>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d120      	bne.n	800a5e8 <UART_SetConfig+0x184>
 800a5a6:	4b6e      	ldr	r3, [pc, #440]	; (800a760 <UART_SetConfig+0x2fc>)
 800a5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a5b0:	2b10      	cmp	r3, #16
 800a5b2:	d00f      	beq.n	800a5d4 <UART_SetConfig+0x170>
 800a5b4:	2b10      	cmp	r3, #16
 800a5b6:	d802      	bhi.n	800a5be <UART_SetConfig+0x15a>
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d005      	beq.n	800a5c8 <UART_SetConfig+0x164>
 800a5bc:	e010      	b.n	800a5e0 <UART_SetConfig+0x17c>
 800a5be:	2b20      	cmp	r3, #32
 800a5c0:	d005      	beq.n	800a5ce <UART_SetConfig+0x16a>
 800a5c2:	2b30      	cmp	r3, #48	; 0x30
 800a5c4:	d009      	beq.n	800a5da <UART_SetConfig+0x176>
 800a5c6:	e00b      	b.n	800a5e0 <UART_SetConfig+0x17c>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	77fb      	strb	r3, [r7, #31]
 800a5cc:	e0f1      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a5ce:	2302      	movs	r3, #2
 800a5d0:	77fb      	strb	r3, [r7, #31]
 800a5d2:	e0ee      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a5d4:	2304      	movs	r3, #4
 800a5d6:	77fb      	strb	r3, [r7, #31]
 800a5d8:	e0eb      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a5da:	2308      	movs	r3, #8
 800a5dc:	77fb      	strb	r3, [r7, #31]
 800a5de:	e0e8      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a5e0:	2310      	movs	r3, #16
 800a5e2:	77fb      	strb	r3, [r7, #31]
 800a5e4:	bf00      	nop
 800a5e6:	e0e4      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a5f      	ldr	r2, [pc, #380]	; (800a76c <UART_SetConfig+0x308>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d120      	bne.n	800a634 <UART_SetConfig+0x1d0>
 800a5f2:	4b5b      	ldr	r3, [pc, #364]	; (800a760 <UART_SetConfig+0x2fc>)
 800a5f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a5fc:	2b40      	cmp	r3, #64	; 0x40
 800a5fe:	d00f      	beq.n	800a620 <UART_SetConfig+0x1bc>
 800a600:	2b40      	cmp	r3, #64	; 0x40
 800a602:	d802      	bhi.n	800a60a <UART_SetConfig+0x1a6>
 800a604:	2b00      	cmp	r3, #0
 800a606:	d005      	beq.n	800a614 <UART_SetConfig+0x1b0>
 800a608:	e010      	b.n	800a62c <UART_SetConfig+0x1c8>
 800a60a:	2b80      	cmp	r3, #128	; 0x80
 800a60c:	d005      	beq.n	800a61a <UART_SetConfig+0x1b6>
 800a60e:	2bc0      	cmp	r3, #192	; 0xc0
 800a610:	d009      	beq.n	800a626 <UART_SetConfig+0x1c2>
 800a612:	e00b      	b.n	800a62c <UART_SetConfig+0x1c8>
 800a614:	2300      	movs	r3, #0
 800a616:	77fb      	strb	r3, [r7, #31]
 800a618:	e0cb      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a61a:	2302      	movs	r3, #2
 800a61c:	77fb      	strb	r3, [r7, #31]
 800a61e:	e0c8      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a620:	2304      	movs	r3, #4
 800a622:	77fb      	strb	r3, [r7, #31]
 800a624:	e0c5      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a626:	2308      	movs	r3, #8
 800a628:	77fb      	strb	r3, [r7, #31]
 800a62a:	e0c2      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a62c:	2310      	movs	r3, #16
 800a62e:	77fb      	strb	r3, [r7, #31]
 800a630:	bf00      	nop
 800a632:	e0be      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a4d      	ldr	r2, [pc, #308]	; (800a770 <UART_SetConfig+0x30c>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d124      	bne.n	800a688 <UART_SetConfig+0x224>
 800a63e:	4b48      	ldr	r3, [pc, #288]	; (800a760 <UART_SetConfig+0x2fc>)
 800a640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a64c:	d012      	beq.n	800a674 <UART_SetConfig+0x210>
 800a64e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a652:	d802      	bhi.n	800a65a <UART_SetConfig+0x1f6>
 800a654:	2b00      	cmp	r3, #0
 800a656:	d007      	beq.n	800a668 <UART_SetConfig+0x204>
 800a658:	e012      	b.n	800a680 <UART_SetConfig+0x21c>
 800a65a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a65e:	d006      	beq.n	800a66e <UART_SetConfig+0x20a>
 800a660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a664:	d009      	beq.n	800a67a <UART_SetConfig+0x216>
 800a666:	e00b      	b.n	800a680 <UART_SetConfig+0x21c>
 800a668:	2300      	movs	r3, #0
 800a66a:	77fb      	strb	r3, [r7, #31]
 800a66c:	e0a1      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a66e:	2302      	movs	r3, #2
 800a670:	77fb      	strb	r3, [r7, #31]
 800a672:	e09e      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a674:	2304      	movs	r3, #4
 800a676:	77fb      	strb	r3, [r7, #31]
 800a678:	e09b      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a67a:	2308      	movs	r3, #8
 800a67c:	77fb      	strb	r3, [r7, #31]
 800a67e:	e098      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a680:	2310      	movs	r3, #16
 800a682:	77fb      	strb	r3, [r7, #31]
 800a684:	bf00      	nop
 800a686:	e094      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a39      	ldr	r2, [pc, #228]	; (800a774 <UART_SetConfig+0x310>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d124      	bne.n	800a6dc <UART_SetConfig+0x278>
 800a692:	4b33      	ldr	r3, [pc, #204]	; (800a760 <UART_SetConfig+0x2fc>)
 800a694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a69c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6a0:	d012      	beq.n	800a6c8 <UART_SetConfig+0x264>
 800a6a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6a6:	d802      	bhi.n	800a6ae <UART_SetConfig+0x24a>
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d007      	beq.n	800a6bc <UART_SetConfig+0x258>
 800a6ac:	e012      	b.n	800a6d4 <UART_SetConfig+0x270>
 800a6ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6b2:	d006      	beq.n	800a6c2 <UART_SetConfig+0x25e>
 800a6b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a6b8:	d009      	beq.n	800a6ce <UART_SetConfig+0x26a>
 800a6ba:	e00b      	b.n	800a6d4 <UART_SetConfig+0x270>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	77fb      	strb	r3, [r7, #31]
 800a6c0:	e077      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	77fb      	strb	r3, [r7, #31]
 800a6c6:	e074      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a6c8:	2304      	movs	r3, #4
 800a6ca:	77fb      	strb	r3, [r7, #31]
 800a6cc:	e071      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a6ce:	2308      	movs	r3, #8
 800a6d0:	77fb      	strb	r3, [r7, #31]
 800a6d2:	e06e      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a6d4:	2310      	movs	r3, #16
 800a6d6:	77fb      	strb	r3, [r7, #31]
 800a6d8:	bf00      	nop
 800a6da:	e06a      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a25      	ldr	r2, [pc, #148]	; (800a778 <UART_SetConfig+0x314>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d124      	bne.n	800a730 <UART_SetConfig+0x2cc>
 800a6e6:	4b1e      	ldr	r3, [pc, #120]	; (800a760 <UART_SetConfig+0x2fc>)
 800a6e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6ec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a6f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6f4:	d012      	beq.n	800a71c <UART_SetConfig+0x2b8>
 800a6f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6fa:	d802      	bhi.n	800a702 <UART_SetConfig+0x29e>
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d007      	beq.n	800a710 <UART_SetConfig+0x2ac>
 800a700:	e012      	b.n	800a728 <UART_SetConfig+0x2c4>
 800a702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a706:	d006      	beq.n	800a716 <UART_SetConfig+0x2b2>
 800a708:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a70c:	d009      	beq.n	800a722 <UART_SetConfig+0x2be>
 800a70e:	e00b      	b.n	800a728 <UART_SetConfig+0x2c4>
 800a710:	2300      	movs	r3, #0
 800a712:	77fb      	strb	r3, [r7, #31]
 800a714:	e04d      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a716:	2302      	movs	r3, #2
 800a718:	77fb      	strb	r3, [r7, #31]
 800a71a:	e04a      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a71c:	2304      	movs	r3, #4
 800a71e:	77fb      	strb	r3, [r7, #31]
 800a720:	e047      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a722:	2308      	movs	r3, #8
 800a724:	77fb      	strb	r3, [r7, #31]
 800a726:	e044      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a728:	2310      	movs	r3, #16
 800a72a:	77fb      	strb	r3, [r7, #31]
 800a72c:	bf00      	nop
 800a72e:	e040      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a11      	ldr	r2, [pc, #68]	; (800a77c <UART_SetConfig+0x318>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d139      	bne.n	800a7ae <UART_SetConfig+0x34a>
 800a73a:	4b09      	ldr	r3, [pc, #36]	; (800a760 <UART_SetConfig+0x2fc>)
 800a73c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a748:	d027      	beq.n	800a79a <UART_SetConfig+0x336>
 800a74a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a74e:	d817      	bhi.n	800a780 <UART_SetConfig+0x31c>
 800a750:	2b00      	cmp	r3, #0
 800a752:	d01c      	beq.n	800a78e <UART_SetConfig+0x32a>
 800a754:	e027      	b.n	800a7a6 <UART_SetConfig+0x342>
 800a756:	bf00      	nop
 800a758:	efff69f3 	.word	0xefff69f3
 800a75c:	40011000 	.word	0x40011000
 800a760:	40023800 	.word	0x40023800
 800a764:	40004400 	.word	0x40004400
 800a768:	40004800 	.word	0x40004800
 800a76c:	40004c00 	.word	0x40004c00
 800a770:	40005000 	.word	0x40005000
 800a774:	40011400 	.word	0x40011400
 800a778:	40007800 	.word	0x40007800
 800a77c:	40007c00 	.word	0x40007c00
 800a780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a784:	d006      	beq.n	800a794 <UART_SetConfig+0x330>
 800a786:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a78a:	d009      	beq.n	800a7a0 <UART_SetConfig+0x33c>
 800a78c:	e00b      	b.n	800a7a6 <UART_SetConfig+0x342>
 800a78e:	2300      	movs	r3, #0
 800a790:	77fb      	strb	r3, [r7, #31]
 800a792:	e00e      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a794:	2302      	movs	r3, #2
 800a796:	77fb      	strb	r3, [r7, #31]
 800a798:	e00b      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a79a:	2304      	movs	r3, #4
 800a79c:	77fb      	strb	r3, [r7, #31]
 800a79e:	e008      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a7a0:	2308      	movs	r3, #8
 800a7a2:	77fb      	strb	r3, [r7, #31]
 800a7a4:	e005      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a7a6:	2310      	movs	r3, #16
 800a7a8:	77fb      	strb	r3, [r7, #31]
 800a7aa:	bf00      	nop
 800a7ac:	e001      	b.n	800a7b2 <UART_SetConfig+0x34e>
 800a7ae:	2310      	movs	r3, #16
 800a7b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	69db      	ldr	r3, [r3, #28]
 800a7b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7ba:	d17f      	bne.n	800a8bc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a7bc:	7ffb      	ldrb	r3, [r7, #31]
 800a7be:	2b08      	cmp	r3, #8
 800a7c0:	d85c      	bhi.n	800a87c <UART_SetConfig+0x418>
 800a7c2:	a201      	add	r2, pc, #4	; (adr r2, 800a7c8 <UART_SetConfig+0x364>)
 800a7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c8:	0800a7ed 	.word	0x0800a7ed
 800a7cc:	0800a80d 	.word	0x0800a80d
 800a7d0:	0800a82d 	.word	0x0800a82d
 800a7d4:	0800a87d 	.word	0x0800a87d
 800a7d8:	0800a845 	.word	0x0800a845
 800a7dc:	0800a87d 	.word	0x0800a87d
 800a7e0:	0800a87d 	.word	0x0800a87d
 800a7e4:	0800a87d 	.word	0x0800a87d
 800a7e8:	0800a865 	.word	0x0800a865
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7ec:	f7fc f8d0 	bl	8006990 <HAL_RCC_GetPCLK1Freq>
 800a7f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	005a      	lsls	r2, r3, #1
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	085b      	lsrs	r3, r3, #1
 800a7fc:	441a      	add	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	fbb2 f3f3 	udiv	r3, r2, r3
 800a806:	b29b      	uxth	r3, r3
 800a808:	61bb      	str	r3, [r7, #24]
        break;
 800a80a:	e03a      	b.n	800a882 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a80c:	f7fc f8d4 	bl	80069b8 <HAL_RCC_GetPCLK2Freq>
 800a810:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	005a      	lsls	r2, r3, #1
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	085b      	lsrs	r3, r3, #1
 800a81c:	441a      	add	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	fbb2 f3f3 	udiv	r3, r2, r3
 800a826:	b29b      	uxth	r3, r3
 800a828:	61bb      	str	r3, [r7, #24]
        break;
 800a82a:	e02a      	b.n	800a882 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	085a      	lsrs	r2, r3, #1
 800a832:	4b5f      	ldr	r3, [pc, #380]	; (800a9b0 <UART_SetConfig+0x54c>)
 800a834:	4413      	add	r3, r2
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	6852      	ldr	r2, [r2, #4]
 800a83a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a83e:	b29b      	uxth	r3, r3
 800a840:	61bb      	str	r3, [r7, #24]
        break;
 800a842:	e01e      	b.n	800a882 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a844:	f7fb ffe6 	bl	8006814 <HAL_RCC_GetSysClockFreq>
 800a848:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	005a      	lsls	r2, r3, #1
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	085b      	lsrs	r3, r3, #1
 800a854:	441a      	add	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a85e:	b29b      	uxth	r3, r3
 800a860:	61bb      	str	r3, [r7, #24]
        break;
 800a862:	e00e      	b.n	800a882 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	085b      	lsrs	r3, r3, #1
 800a86a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	fbb2 f3f3 	udiv	r3, r2, r3
 800a876:	b29b      	uxth	r3, r3
 800a878:	61bb      	str	r3, [r7, #24]
        break;
 800a87a:	e002      	b.n	800a882 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	75fb      	strb	r3, [r7, #23]
        break;
 800a880:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	2b0f      	cmp	r3, #15
 800a886:	d916      	bls.n	800a8b6 <UART_SetConfig+0x452>
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a88e:	d212      	bcs.n	800a8b6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	b29b      	uxth	r3, r3
 800a894:	f023 030f 	bic.w	r3, r3, #15
 800a898:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	085b      	lsrs	r3, r3, #1
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	f003 0307 	and.w	r3, r3, #7
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	897b      	ldrh	r3, [r7, #10]
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	897a      	ldrh	r2, [r7, #10]
 800a8b2:	60da      	str	r2, [r3, #12]
 800a8b4:	e070      	b.n	800a998 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	75fb      	strb	r3, [r7, #23]
 800a8ba:	e06d      	b.n	800a998 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a8bc:	7ffb      	ldrb	r3, [r7, #31]
 800a8be:	2b08      	cmp	r3, #8
 800a8c0:	d859      	bhi.n	800a976 <UART_SetConfig+0x512>
 800a8c2:	a201      	add	r2, pc, #4	; (adr r2, 800a8c8 <UART_SetConfig+0x464>)
 800a8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c8:	0800a8ed 	.word	0x0800a8ed
 800a8cc:	0800a90b 	.word	0x0800a90b
 800a8d0:	0800a929 	.word	0x0800a929
 800a8d4:	0800a977 	.word	0x0800a977
 800a8d8:	0800a941 	.word	0x0800a941
 800a8dc:	0800a977 	.word	0x0800a977
 800a8e0:	0800a977 	.word	0x0800a977
 800a8e4:	0800a977 	.word	0x0800a977
 800a8e8:	0800a95f 	.word	0x0800a95f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8ec:	f7fc f850 	bl	8006990 <HAL_RCC_GetPCLK1Freq>
 800a8f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	085a      	lsrs	r2, r3, #1
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	441a      	add	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	fbb2 f3f3 	udiv	r3, r2, r3
 800a904:	b29b      	uxth	r3, r3
 800a906:	61bb      	str	r3, [r7, #24]
        break;
 800a908:	e038      	b.n	800a97c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a90a:	f7fc f855 	bl	80069b8 <HAL_RCC_GetPCLK2Freq>
 800a90e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	085a      	lsrs	r2, r3, #1
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	441a      	add	r2, r3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a922:	b29b      	uxth	r3, r3
 800a924:	61bb      	str	r3, [r7, #24]
        break;
 800a926:	e029      	b.n	800a97c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	085a      	lsrs	r2, r3, #1
 800a92e:	4b21      	ldr	r3, [pc, #132]	; (800a9b4 <UART_SetConfig+0x550>)
 800a930:	4413      	add	r3, r2
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	6852      	ldr	r2, [r2, #4]
 800a936:	fbb3 f3f2 	udiv	r3, r3, r2
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	61bb      	str	r3, [r7, #24]
        break;
 800a93e:	e01d      	b.n	800a97c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a940:	f7fb ff68 	bl	8006814 <HAL_RCC_GetSysClockFreq>
 800a944:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	085a      	lsrs	r2, r3, #1
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	441a      	add	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	fbb2 f3f3 	udiv	r3, r2, r3
 800a958:	b29b      	uxth	r3, r3
 800a95a:	61bb      	str	r3, [r7, #24]
        break;
 800a95c:	e00e      	b.n	800a97c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	085b      	lsrs	r3, r3, #1
 800a964:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a970:	b29b      	uxth	r3, r3
 800a972:	61bb      	str	r3, [r7, #24]
        break;
 800a974:	e002      	b.n	800a97c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	75fb      	strb	r3, [r7, #23]
        break;
 800a97a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	2b0f      	cmp	r3, #15
 800a980:	d908      	bls.n	800a994 <UART_SetConfig+0x530>
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a988:	d204      	bcs.n	800a994 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	69ba      	ldr	r2, [r7, #24]
 800a990:	60da      	str	r2, [r3, #12]
 800a992:	e001      	b.n	800a998 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a9a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3720      	adds	r7, #32
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	01e84800 	.word	0x01e84800
 800a9b4:	00f42400 	.word	0x00f42400

0800a9b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c4:	f003 0301 	and.w	r3, r3, #1
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00a      	beq.n	800a9e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	430a      	orrs	r2, r1
 800a9e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e6:	f003 0302 	and.w	r3, r3, #2
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00a      	beq.n	800aa04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	430a      	orrs	r2, r1
 800aa02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa08:	f003 0304 	and.w	r3, r3, #4
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00a      	beq.n	800aa26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	430a      	orrs	r2, r1
 800aa24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2a:	f003 0308 	and.w	r3, r3, #8
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00a      	beq.n	800aa48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	430a      	orrs	r2, r1
 800aa46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4c:	f003 0310 	and.w	r3, r3, #16
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00a      	beq.n	800aa6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	430a      	orrs	r2, r1
 800aa68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6e:	f003 0320 	and.w	r3, r3, #32
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00a      	beq.n	800aa8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	430a      	orrs	r2, r1
 800aa8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d01a      	beq.n	800aace <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	430a      	orrs	r2, r1
 800aaac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aab6:	d10a      	bne.n	800aace <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	430a      	orrs	r2, r1
 800aacc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00a      	beq.n	800aaf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	430a      	orrs	r2, r1
 800aaee:	605a      	str	r2, [r3, #4]
  }
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af02      	add	r7, sp, #8
 800ab02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ab0a:	f7f8 fbe5 	bl	80032d8 <HAL_GetTick>
 800ab0e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 0308 	and.w	r3, r3, #8
 800ab1a:	2b08      	cmp	r3, #8
 800ab1c:	d10e      	bne.n	800ab3c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 f814 	bl	800ab5a <UART_WaitOnFlagUntilTimeout>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d001      	beq.n	800ab3c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab38:	2303      	movs	r3, #3
 800ab3a:	e00a      	b.n	800ab52 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2220      	movs	r2, #32
 800ab40:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2220      	movs	r2, #32
 800ab46:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b084      	sub	sp, #16
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	60f8      	str	r0, [r7, #12]
 800ab62:	60b9      	str	r1, [r7, #8]
 800ab64:	603b      	str	r3, [r7, #0]
 800ab66:	4613      	mov	r3, r2
 800ab68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab6a:	e05d      	b.n	800ac28 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab72:	d059      	beq.n	800ac28 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab74:	f7f8 fbb0 	bl	80032d8 <HAL_GetTick>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	1ad3      	subs	r3, r2, r3
 800ab7e:	69ba      	ldr	r2, [r7, #24]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d302      	bcc.n	800ab8a <UART_WaitOnFlagUntilTimeout+0x30>
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d11b      	bne.n	800abc2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	689a      	ldr	r2, [r3, #8]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f022 0201 	bic.w	r2, r2, #1
 800aba8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2220      	movs	r2, #32
 800abae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2220      	movs	r2, #32
 800abb4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e042      	b.n	800ac48 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f003 0304 	and.w	r3, r3, #4
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d02b      	beq.n	800ac28 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800abde:	d123      	bne.n	800ac28 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800abe8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800abf8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	689a      	ldr	r2, [r3, #8]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f022 0201 	bic.w	r2, r2, #1
 800ac08:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2220      	movs	r2, #32
 800ac0e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2220      	movs	r2, #32
 800ac14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2220      	movs	r2, #32
 800ac1a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800ac24:	2303      	movs	r3, #3
 800ac26:	e00f      	b.n	800ac48 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	69da      	ldr	r2, [r3, #28]
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	4013      	ands	r3, r2
 800ac32:	68ba      	ldr	r2, [r7, #8]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	bf0c      	ite	eq
 800ac38:	2301      	moveq	r3, #1
 800ac3a:	2300      	movne	r3, #0
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	461a      	mov	r2, r3
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d092      	beq.n	800ab6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d027      	beq.n	800acba <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	4b2f      	ldr	r3, [pc, #188]	; (800ad30 <FMC_SDRAM_Init+0xe0>)
 800ac74:	4013      	ands	r3, r2
 800ac76:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ac80:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800ac86:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800ac8c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800ac92:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800ac98:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800ac9e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800aca4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800acaa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	4313      	orrs	r3, r2
 800acb0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	601a      	str	r2, [r3, #0]
 800acb8:	e032      	b.n	800ad20 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800acc6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800acd0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800acd6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	4313      	orrs	r3, r2
 800acdc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ace4:	68ba      	ldr	r2, [r7, #8]
 800ace6:	4b12      	ldr	r3, [pc, #72]	; (800ad30 <FMC_SDRAM_Init+0xe0>)
 800ace8:	4013      	ands	r3, r2
 800acea:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800acf4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800acfa:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800ad00:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800ad06:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800ad0c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	4313      	orrs	r3, r2
 800ad12:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	ffff8000 	.word	0xffff8000

0800ad34 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b087      	sub	sp, #28
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800ad44:	2300      	movs	r3, #0
 800ad46:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d02e      	beq.n	800adac <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ad5a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	3b01      	subs	r3, #1
 800ad68:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ad6a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	3b01      	subs	r3, #1
 800ad72:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800ad74:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ad7e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	691b      	ldr	r3, [r3, #16]
 800ad84:	3b01      	subs	r3, #1
 800ad86:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ad88:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ad92:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	609a      	str	r2, [r3, #8]
 800adaa:	e039      	b.n	800ae20 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	4b1e      	ldr	r3, [pc, #120]	; (800ae30 <FMC_SDRAM_Timing_Init+0xfc>)
 800adb6:	4013      	ands	r3, r2
 800adb8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	3b01      	subs	r3, #1
 800adc0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	3b01      	subs	r3, #1
 800adc8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800adca:	4313      	orrs	r3, r2
 800adcc:	697a      	ldr	r2, [r7, #20]
 800adce:	4313      	orrs	r3, r2
 800add0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800adde:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	3b01      	subs	r3, #1
 800adec:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800adee:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	3b01      	subs	r3, #1
 800adf6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800adf8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	3b01      	subs	r3, #1
 800ae00:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ae02:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	699b      	ldr	r3, [r3, #24]
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	4313      	orrs	r3, r2
 800ae12:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	697a      	ldr	r2, [r7, #20]
 800ae18:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	371c      	adds	r7, #28
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	ff0f0fff 	.word	0xff0f0fff

0800ae34 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b087      	sub	sp, #28
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800ae40:	2300      	movs	r3, #0
 800ae42:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ae4c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	3b01      	subs	r3, #1
 800ae54:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800ae56:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800ae68:	2300      	movs	r3, #0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	371c      	adds	r7, #28
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr

0800ae76 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ae76:	b480      	push	{r7}
 800ae78:	b083      	sub	sp, #12
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
 800ae7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	695a      	ldr	r2, [r3, #20]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	005b      	lsls	r3, r3, #1
 800ae88:	431a      	orrs	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ae9c:	b084      	sub	sp, #16
 800ae9e:	b480      	push	{r7}
 800aea0:	b085      	sub	sp, #20
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
 800aea6:	f107 001c 	add.w	r0, r7, #28
 800aeaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aeb2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aeb6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800aeb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800aeba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800aebe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800aec2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800aec6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	685a      	ldr	r2, [r3, #4]
 800aed2:	4b07      	ldr	r3, [pc, #28]	; (800aef0 <SDMMC_Init+0x54>)
 800aed4:	4013      	ands	r3, r2
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	431a      	orrs	r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3714      	adds	r7, #20
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	b004      	add	sp, #16
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	ffff8100 	.word	0xffff8100

0800aef4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800af02:	4618      	mov	r0, r3
 800af04:	370c      	adds	r7, #12
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr

0800af0e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800af0e:	b580      	push	{r7, lr}
 800af10:	b082      	sub	sp, #8
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2203      	movs	r2, #3
 800af1a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800af1c:	2002      	movs	r0, #2
 800af1e:	f7f8 f9e7 	bl	80032f0 <HAL_Delay>
  
  return HAL_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3708      	adds	r7, #8
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f003 0303 	and.w	r3, r3, #3
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800af52:	2300      	movs	r3, #0
 800af54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800af66:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800af6c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800af72:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	4313      	orrs	r3, r2
 800af78:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	68da      	ldr	r2, [r3, #12]
 800af7e:	4b06      	ldr	r3, [pc, #24]	; (800af98 <SDMMC_SendCommand+0x50>)
 800af80:	4013      	ands	r3, r2
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	431a      	orrs	r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3714      	adds	r7, #20
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr
 800af98:	fffff000 	.word	0xfffff000

0800af9c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	691b      	ldr	r3, [r3, #16]
 800afa8:	b2db      	uxtb	r3, r3
}
 800afaa:	4618      	mov	r0, r3
 800afac:	370c      	adds	r7, #12
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr

0800afb6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800afb6:	b480      	push	{r7}
 800afb8:	b085      	sub	sp, #20
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	3314      	adds	r3, #20
 800afc4:	461a      	mov	r2, r3
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	4413      	add	r3, r2
 800afca:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
}  
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800afe6:	2300      	movs	r3, #0
 800afe8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	685a      	ldr	r2, [r3, #4]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b002:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b008:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b00e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	4313      	orrs	r3, r2
 800b014:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b01a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	431a      	orrs	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b026:	2300      	movs	r3, #0

}
 800b028:	4618      	mov	r0, r3
 800b02a:	3714      	adds	r7, #20
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b088      	sub	sp, #32
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b042:	2310      	movs	r3, #16
 800b044:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b046:	2340      	movs	r3, #64	; 0x40
 800b048:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b04a:	2300      	movs	r3, #0
 800b04c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b04e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b052:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b054:	f107 0308 	add.w	r3, r7, #8
 800b058:	4619      	mov	r1, r3
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f7ff ff74 	bl	800af48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b060:	f241 3288 	movw	r2, #5000	; 0x1388
 800b064:	2110      	movs	r1, #16
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 fa42 	bl	800b4f0 <SDMMC_GetCmdResp1>
 800b06c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b06e:	69fb      	ldr	r3, [r7, #28]
}
 800b070:	4618      	mov	r0, r3
 800b072:	3720      	adds	r7, #32
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b088      	sub	sp, #32
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b086:	2311      	movs	r3, #17
 800b088:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b08a:	2340      	movs	r3, #64	; 0x40
 800b08c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b08e:	2300      	movs	r3, #0
 800b090:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b096:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b098:	f107 0308 	add.w	r3, r7, #8
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7ff ff52 	bl	800af48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b0a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0a8:	2111      	movs	r1, #17
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 fa20 	bl	800b4f0 <SDMMC_GetCmdResp1>
 800b0b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0b2:	69fb      	ldr	r3, [r7, #28]
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3720      	adds	r7, #32
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b088      	sub	sp, #32
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b0ca:	2312      	movs	r3, #18
 800b0cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0ce:	2340      	movs	r3, #64	; 0x40
 800b0d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0dc:	f107 0308 	add.w	r3, r7, #8
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f7ff ff30 	bl	800af48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b0e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0ec:	2112      	movs	r1, #18
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 f9fe 	bl	800b4f0 <SDMMC_GetCmdResp1>
 800b0f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0f6:	69fb      	ldr	r3, [r7, #28]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3720      	adds	r7, #32
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b088      	sub	sp, #32
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b10e:	2318      	movs	r3, #24
 800b110:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b112:	2340      	movs	r3, #64	; 0x40
 800b114:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b116:	2300      	movs	r3, #0
 800b118:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b11a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b11e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b120:	f107 0308 	add.w	r3, r7, #8
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7ff ff0e 	bl	800af48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b12c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b130:	2118      	movs	r1, #24
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 f9dc 	bl	800b4f0 <SDMMC_GetCmdResp1>
 800b138:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b13a:	69fb      	ldr	r3, [r7, #28]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3720      	adds	r7, #32
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b088      	sub	sp, #32
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b152:	2319      	movs	r3, #25
 800b154:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b156:	2340      	movs	r3, #64	; 0x40
 800b158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b15a:	2300      	movs	r3, #0
 800b15c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b15e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b162:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b164:	f107 0308 	add.w	r3, r7, #8
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f7ff feec 	bl	800af48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b170:	f241 3288 	movw	r2, #5000	; 0x1388
 800b174:	2119      	movs	r1, #25
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 f9ba 	bl	800b4f0 <SDMMC_GetCmdResp1>
 800b17c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b17e:	69fb      	ldr	r3, [r7, #28]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3720      	adds	r7, #32
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b088      	sub	sp, #32
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b190:	2300      	movs	r3, #0
 800b192:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b194:	230c      	movs	r3, #12
 800b196:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b198:	2340      	movs	r3, #64	; 0x40
 800b19a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b19c:	2300      	movs	r3, #0
 800b19e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1a6:	f107 0308 	add.w	r3, r7, #8
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7ff fecb 	bl	800af48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b1b2:	4a05      	ldr	r2, [pc, #20]	; (800b1c8 <SDMMC_CmdStopTransfer+0x40>)
 800b1b4:	210c      	movs	r1, #12
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f99a 	bl	800b4f0 <SDMMC_GetCmdResp1>
 800b1bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1be:	69fb      	ldr	r3, [r7, #28]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3720      	adds	r7, #32
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	05f5e100 	.word	0x05f5e100

0800b1cc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b08a      	sub	sp, #40	; 0x28
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b1dc:	2307      	movs	r3, #7
 800b1de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1e0:	2340      	movs	r3, #64	; 0x40
 800b1e2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1ec:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1ee:	f107 0310 	add.w	r3, r7, #16
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f7ff fea7 	bl	800af48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b1fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1fe:	2107      	movs	r1, #7
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f000 f975 	bl	800b4f0 <SDMMC_GetCmdResp1>
 800b206:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3728      	adds	r7, #40	; 0x28
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b088      	sub	sp, #32
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b21a:	2300      	movs	r3, #0
 800b21c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b21e:	2300      	movs	r3, #0
 800b220:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b222:	2300      	movs	r3, #0
 800b224:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b226:	2300      	movs	r3, #0
 800b228:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b22a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b22e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b230:	f107 0308 	add.w	r3, r7, #8
 800b234:	4619      	mov	r1, r3
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f7ff fe86 	bl	800af48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f92f 	bl	800b4a0 <SDMMC_GetCmdError>
 800b242:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b244:	69fb      	ldr	r3, [r7, #28]
}
 800b246:	4618      	mov	r0, r3
 800b248:	3720      	adds	r7, #32
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b088      	sub	sp, #32
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b256:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b25a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b25c:	2308      	movs	r3, #8
 800b25e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b260:	2340      	movs	r3, #64	; 0x40
 800b262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b264:	2300      	movs	r3, #0
 800b266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b26c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b26e:	f107 0308 	add.w	r3, r7, #8
 800b272:	4619      	mov	r1, r3
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f7ff fe67 	bl	800af48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fb18 	bl	800b8b0 <SDMMC_GetCmdResp7>
 800b280:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b282:	69fb      	ldr	r3, [r7, #28]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3720      	adds	r7, #32
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b088      	sub	sp, #32
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b29a:	2337      	movs	r3, #55	; 0x37
 800b29c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b29e:	2340      	movs	r3, #64	; 0x40
 800b2a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2ac:	f107 0308 	add.w	r3, r7, #8
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f7ff fe48 	bl	800af48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b2b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2bc:	2137      	movs	r1, #55	; 0x37
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 f916 	bl	800b4f0 <SDMMC_GetCmdResp1>
 800b2c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2c6:	69fb      	ldr	r3, [r7, #28]
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3720      	adds	r7, #32
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b088      	sub	sp, #32
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b2da:	683a      	ldr	r2, [r7, #0]
 800b2dc:	4b0d      	ldr	r3, [pc, #52]	; (800b314 <SDMMC_CmdAppOperCommand+0x44>)
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b2e2:	2329      	movs	r3, #41	; 0x29
 800b2e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2e6:	2340      	movs	r3, #64	; 0x40
 800b2e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2f4:	f107 0308 	add.w	r3, r7, #8
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7ff fe24 	bl	800af48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fa27 	bl	800b754 <SDMMC_GetCmdResp3>
 800b306:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b308:	69fb      	ldr	r3, [r7, #28]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3720      	adds	r7, #32
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	80100000 	.word	0x80100000

0800b318 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b088      	sub	sp, #32
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b326:	2306      	movs	r3, #6
 800b328:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b32a:	2340      	movs	r3, #64	; 0x40
 800b32c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b32e:	2300      	movs	r3, #0
 800b330:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b336:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b338:	f107 0308 	add.w	r3, r7, #8
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f7ff fe02 	bl	800af48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b344:	f241 3288 	movw	r2, #5000	; 0x1388
 800b348:	2106      	movs	r1, #6
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f8d0 	bl	800b4f0 <SDMMC_GetCmdResp1>
 800b350:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b352:	69fb      	ldr	r3, [r7, #28]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3720      	adds	r7, #32
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b088      	sub	sp, #32
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b364:	2300      	movs	r3, #0
 800b366:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b368:	2333      	movs	r3, #51	; 0x33
 800b36a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b36c:	2340      	movs	r3, #64	; 0x40
 800b36e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b370:	2300      	movs	r3, #0
 800b372:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b378:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b37a:	f107 0308 	add.w	r3, r7, #8
 800b37e:	4619      	mov	r1, r3
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f7ff fde1 	bl	800af48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b386:	f241 3288 	movw	r2, #5000	; 0x1388
 800b38a:	2133      	movs	r1, #51	; 0x33
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 f8af 	bl	800b4f0 <SDMMC_GetCmdResp1>
 800b392:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b394:	69fb      	ldr	r3, [r7, #28]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3720      	adds	r7, #32
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b088      	sub	sp, #32
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b3aa:	2302      	movs	r3, #2
 800b3ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b3ae:	23c0      	movs	r3, #192	; 0xc0
 800b3b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3bc:	f107 0308 	add.w	r3, r7, #8
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f7ff fdc0 	bl	800af48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 f97d 	bl	800b6c8 <SDMMC_GetCmdResp2>
 800b3ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3d0:	69fb      	ldr	r3, [r7, #28]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3720      	adds	r7, #32
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b088      	sub	sp, #32
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b3e8:	2309      	movs	r3, #9
 800b3ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b3ec:	23c0      	movs	r3, #192	; 0xc0
 800b3ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3fa:	f107 0308 	add.w	r3, r7, #8
 800b3fe:	4619      	mov	r1, r3
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f7ff fda1 	bl	800af48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 f95e 	bl	800b6c8 <SDMMC_GetCmdResp2>
 800b40c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b40e:	69fb      	ldr	r3, [r7, #28]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3720      	adds	r7, #32
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b088      	sub	sp, #32
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b422:	2300      	movs	r3, #0
 800b424:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b426:	2303      	movs	r3, #3
 800b428:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b42a:	2340      	movs	r3, #64	; 0x40
 800b42c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b42e:	2300      	movs	r3, #0
 800b430:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b436:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b438:	f107 0308 	add.w	r3, r7, #8
 800b43c:	4619      	mov	r1, r3
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7ff fd82 	bl	800af48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b444:	683a      	ldr	r2, [r7, #0]
 800b446:	2103      	movs	r1, #3
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 f9bd 	bl	800b7c8 <SDMMC_GetCmdResp6>
 800b44e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b450:	69fb      	ldr	r3, [r7, #28]
}
 800b452:	4618      	mov	r0, r3
 800b454:	3720      	adds	r7, #32
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b088      	sub	sp, #32
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b468:	230d      	movs	r3, #13
 800b46a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b46c:	2340      	movs	r3, #64	; 0x40
 800b46e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b470:	2300      	movs	r3, #0
 800b472:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b478:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b47a:	f107 0308 	add.w	r3, r7, #8
 800b47e:	4619      	mov	r1, r3
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f7ff fd61 	bl	800af48 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b486:	f241 3288 	movw	r2, #5000	; 0x1388
 800b48a:	210d      	movs	r1, #13
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 f82f 	bl	800b4f0 <SDMMC_GetCmdResp1>
 800b492:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b494:	69fb      	ldr	r3, [r7, #28]
}
 800b496:	4618      	mov	r0, r3
 800b498:	3720      	adds	r7, #32
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
	...

0800b4a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b4a0:	b490      	push	{r4, r7}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4a8:	4b0f      	ldr	r3, [pc, #60]	; (800b4e8 <SDMMC_GetCmdError+0x48>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a0f      	ldr	r2, [pc, #60]	; (800b4ec <SDMMC_GetCmdError+0x4c>)
 800b4ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b4b2:	0a5b      	lsrs	r3, r3, #9
 800b4b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4b8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b4bc:	4623      	mov	r3, r4
 800b4be:	1e5c      	subs	r4, r3, #1
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d102      	bne.n	800b4ca <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4c8:	e009      	b.n	800b4de <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d0f2      	beq.n	800b4bc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	22c5      	movs	r2, #197	; 0xc5
 800b4da:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3708      	adds	r7, #8
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bc90      	pop	{r4, r7}
 800b4e6:	4770      	bx	lr
 800b4e8:	2000002c 	.word	0x2000002c
 800b4ec:	10624dd3 	.word	0x10624dd3

0800b4f0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b4f0:	b590      	push	{r4, r7, lr}
 800b4f2:	b087      	sub	sp, #28
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	607a      	str	r2, [r7, #4]
 800b4fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b4fe:	4b6f      	ldr	r3, [pc, #444]	; (800b6bc <SDMMC_GetCmdResp1+0x1cc>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a6f      	ldr	r2, [pc, #444]	; (800b6c0 <SDMMC_GetCmdResp1+0x1d0>)
 800b504:	fba2 2303 	umull	r2, r3, r2, r3
 800b508:	0a5b      	lsrs	r3, r3, #9
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b510:	4623      	mov	r3, r4
 800b512:	1e5c      	subs	r4, r3, #1
 800b514:	2b00      	cmp	r3, #0
 800b516:	d102      	bne.n	800b51e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b518:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b51c:	e0c9      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b522:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d0f0      	beq.n	800b510 <SDMMC_GetCmdResp1+0x20>
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b534:	2b00      	cmp	r3, #0
 800b536:	d1eb      	bne.n	800b510 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b53c:	f003 0304 	and.w	r3, r3, #4
 800b540:	2b00      	cmp	r3, #0
 800b542:	d004      	beq.n	800b54e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2204      	movs	r2, #4
 800b548:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b54a:	2304      	movs	r3, #4
 800b54c:	e0b1      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b552:	f003 0301 	and.w	r3, r3, #1
 800b556:	2b00      	cmp	r3, #0
 800b558:	d004      	beq.n	800b564 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2201      	movs	r2, #1
 800b55e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b560:	2301      	movs	r3, #1
 800b562:	e0a6      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	22c5      	movs	r2, #197	; 0xc5
 800b568:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f7ff fd16 	bl	800af9c <SDMMC_GetCommandResponse>
 800b570:	4603      	mov	r3, r0
 800b572:	461a      	mov	r2, r3
 800b574:	7afb      	ldrb	r3, [r7, #11]
 800b576:	4293      	cmp	r3, r2
 800b578:	d001      	beq.n	800b57e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b57a:	2301      	movs	r3, #1
 800b57c:	e099      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b57e:	2100      	movs	r1, #0
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f7ff fd18 	bl	800afb6 <SDMMC_GetResponse>
 800b586:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b588:	693a      	ldr	r2, [r7, #16]
 800b58a:	4b4e      	ldr	r3, [pc, #312]	; (800b6c4 <SDMMC_GetCmdResp1+0x1d4>)
 800b58c:	4013      	ands	r3, r2
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d101      	bne.n	800b596 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b592:	2300      	movs	r3, #0
 800b594:	e08d      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	da02      	bge.n	800b5a2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b59c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b5a0:	e087      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d001      	beq.n	800b5b0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b5ac:	2340      	movs	r3, #64	; 0x40
 800b5ae:	e080      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d001      	beq.n	800b5be <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b5ba:	2380      	movs	r3, #128	; 0x80
 800b5bc:	e079      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b5c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5cc:	e071      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b5d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5dc:	e069      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d002      	beq.n	800b5ee <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b5e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5ec:	e061      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b5f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b5fc:	e059      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b604:	2b00      	cmp	r3, #0
 800b606:	d002      	beq.n	800b60e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b60c:	e051      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b61c:	e049      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b624:	2b00      	cmp	r3, #0
 800b626:	d002      	beq.n	800b62e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b628:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b62c:	e041      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b634:	2b00      	cmp	r3, #0
 800b636:	d002      	beq.n	800b63e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b63c:	e039      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d002      	beq.n	800b64e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b648:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b64c:	e031      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b654:	2b00      	cmp	r3, #0
 800b656:	d002      	beq.n	800b65e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b658:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b65c:	e029      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b664:	2b00      	cmp	r3, #0
 800b666:	d002      	beq.n	800b66e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b668:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b66c:	e021      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b674:	2b00      	cmp	r3, #0
 800b676:	d002      	beq.n	800b67e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b678:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b67c:	e019      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b684:	2b00      	cmp	r3, #0
 800b686:	d002      	beq.n	800b68e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b688:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b68c:	e011      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b698:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b69c:	e009      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	f003 0308 	and.w	r3, r3, #8
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d002      	beq.n	800b6ae <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b6a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b6ac:	e001      	b.n	800b6b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b6ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	371c      	adds	r7, #28
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd90      	pop	{r4, r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	2000002c 	.word	0x2000002c
 800b6c0:	10624dd3 	.word	0x10624dd3
 800b6c4:	fdffe008 	.word	0xfdffe008

0800b6c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b6c8:	b490      	push	{r4, r7}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b6d0:	4b1e      	ldr	r3, [pc, #120]	; (800b74c <SDMMC_GetCmdResp2+0x84>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a1e      	ldr	r2, [pc, #120]	; (800b750 <SDMMC_GetCmdResp2+0x88>)
 800b6d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6da:	0a5b      	lsrs	r3, r3, #9
 800b6dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b6e4:	4623      	mov	r3, r4
 800b6e6:	1e5c      	subs	r4, r3, #1
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d102      	bne.n	800b6f2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b6ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6f0:	e026      	b.n	800b740 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d0f0      	beq.n	800b6e4 <SDMMC_GetCmdResp2+0x1c>
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1eb      	bne.n	800b6e4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b710:	f003 0304 	and.w	r3, r3, #4
 800b714:	2b00      	cmp	r3, #0
 800b716:	d004      	beq.n	800b722 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2204      	movs	r2, #4
 800b71c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b71e:	2304      	movs	r3, #4
 800b720:	e00e      	b.n	800b740 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b726:	f003 0301 	and.w	r3, r3, #1
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d004      	beq.n	800b738 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2201      	movs	r2, #1
 800b732:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b734:	2301      	movs	r3, #1
 800b736:	e003      	b.n	800b740 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	22c5      	movs	r2, #197	; 0xc5
 800b73c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bc90      	pop	{r4, r7}
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	2000002c 	.word	0x2000002c
 800b750:	10624dd3 	.word	0x10624dd3

0800b754 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b754:	b490      	push	{r4, r7}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b75c:	4b18      	ldr	r3, [pc, #96]	; (800b7c0 <SDMMC_GetCmdResp3+0x6c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a18      	ldr	r2, [pc, #96]	; (800b7c4 <SDMMC_GetCmdResp3+0x70>)
 800b762:	fba2 2303 	umull	r2, r3, r2, r3
 800b766:	0a5b      	lsrs	r3, r3, #9
 800b768:	f241 3288 	movw	r2, #5000	; 0x1388
 800b76c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b770:	4623      	mov	r3, r4
 800b772:	1e5c      	subs	r4, r3, #1
 800b774:	2b00      	cmp	r3, #0
 800b776:	d102      	bne.n	800b77e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b778:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b77c:	e01b      	b.n	800b7b6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b782:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d0f0      	beq.n	800b770 <SDMMC_GetCmdResp3+0x1c>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1eb      	bne.n	800b770 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b79c:	f003 0304 	and.w	r3, r3, #4
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d004      	beq.n	800b7ae <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2204      	movs	r2, #4
 800b7a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7aa:	2304      	movs	r3, #4
 800b7ac:	e003      	b.n	800b7b6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	22c5      	movs	r2, #197	; 0xc5
 800b7b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b7b4:	2300      	movs	r3, #0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bc90      	pop	{r4, r7}
 800b7be:	4770      	bx	lr
 800b7c0:	2000002c 	.word	0x2000002c
 800b7c4:	10624dd3 	.word	0x10624dd3

0800b7c8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b7c8:	b590      	push	{r4, r7, lr}
 800b7ca:	b087      	sub	sp, #28
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	607a      	str	r2, [r7, #4]
 800b7d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7d6:	4b34      	ldr	r3, [pc, #208]	; (800b8a8 <SDMMC_GetCmdResp6+0xe0>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a34      	ldr	r2, [pc, #208]	; (800b8ac <SDMMC_GetCmdResp6+0xe4>)
 800b7dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b7e0:	0a5b      	lsrs	r3, r3, #9
 800b7e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7e6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b7ea:	4623      	mov	r3, r4
 800b7ec:	1e5c      	subs	r4, r3, #1
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d102      	bne.n	800b7f8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7f6:	e052      	b.n	800b89e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7fc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b804:	2b00      	cmp	r3, #0
 800b806:	d0f0      	beq.n	800b7ea <SDMMC_GetCmdResp6+0x22>
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1eb      	bne.n	800b7ea <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b816:	f003 0304 	and.w	r3, r3, #4
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d004      	beq.n	800b828 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2204      	movs	r2, #4
 800b822:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b824:	2304      	movs	r3, #4
 800b826:	e03a      	b.n	800b89e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b82c:	f003 0301 	and.w	r3, r3, #1
 800b830:	2b00      	cmp	r3, #0
 800b832:	d004      	beq.n	800b83e <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2201      	movs	r2, #1
 800b838:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b83a:	2301      	movs	r3, #1
 800b83c:	e02f      	b.n	800b89e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f7ff fbac 	bl	800af9c <SDMMC_GetCommandResponse>
 800b844:	4603      	mov	r3, r0
 800b846:	461a      	mov	r2, r3
 800b848:	7afb      	ldrb	r3, [r7, #11]
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d001      	beq.n	800b852 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b84e:	2301      	movs	r3, #1
 800b850:	e025      	b.n	800b89e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	22c5      	movs	r2, #197	; 0xc5
 800b856:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b858:	2100      	movs	r1, #0
 800b85a:	68f8      	ldr	r0, [r7, #12]
 800b85c:	f7ff fbab 	bl	800afb6 <SDMMC_GetResponse>
 800b860:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d106      	bne.n	800b87a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	0c1b      	lsrs	r3, r3, #16
 800b870:	b29a      	uxth	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b876:	2300      	movs	r3, #0
 800b878:	e011      	b.n	800b89e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b880:	2b00      	cmp	r3, #0
 800b882:	d002      	beq.n	800b88a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b888:	e009      	b.n	800b89e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b890:	2b00      	cmp	r3, #0
 800b892:	d002      	beq.n	800b89a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b898:	e001      	b.n	800b89e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b89a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	371c      	adds	r7, #28
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd90      	pop	{r4, r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	2000002c 	.word	0x2000002c
 800b8ac:	10624dd3 	.word	0x10624dd3

0800b8b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b8b0:	b490      	push	{r4, r7}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b8b8:	4b21      	ldr	r3, [pc, #132]	; (800b940 <SDMMC_GetCmdResp7+0x90>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a21      	ldr	r2, [pc, #132]	; (800b944 <SDMMC_GetCmdResp7+0x94>)
 800b8be:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c2:	0a5b      	lsrs	r3, r3, #9
 800b8c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b8cc:	4623      	mov	r3, r4
 800b8ce:	1e5c      	subs	r4, r3, #1
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d102      	bne.n	800b8da <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8d8:	e02c      	b.n	800b934 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d0f0      	beq.n	800b8cc <SDMMC_GetCmdResp7+0x1c>
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d1eb      	bne.n	800b8cc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f8:	f003 0304 	and.w	r3, r3, #4
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d004      	beq.n	800b90a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2204      	movs	r2, #4
 800b904:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b906:	2304      	movs	r3, #4
 800b908:	e014      	b.n	800b934 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b90e:	f003 0301 	and.w	r3, r3, #1
 800b912:	2b00      	cmp	r3, #0
 800b914:	d004      	beq.n	800b920 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e009      	b.n	800b934 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d002      	beq.n	800b932 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2240      	movs	r2, #64	; 0x40
 800b930:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b932:	2300      	movs	r3, #0
  
}
 800b934:	4618      	mov	r0, r3
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bc90      	pop	{r4, r7}
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	2000002c 	.word	0x2000002c
 800b944:	10624dd3 	.word	0x10624dd3

0800b948 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b94c:	4904      	ldr	r1, [pc, #16]	; (800b960 <MX_FATFS_Init+0x18>)
 800b94e:	4805      	ldr	r0, [pc, #20]	; (800b964 <MX_FATFS_Init+0x1c>)
 800b950:	f000 fa96 	bl	800be80 <FATFS_LinkDriver>
 800b954:	4603      	mov	r3, r0
 800b956:	461a      	mov	r2, r3
 800b958:	4b03      	ldr	r3, [pc, #12]	; (800b968 <MX_FATFS_Init+0x20>)
 800b95a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b95c:	bf00      	nop
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	2000be74 	.word	0x2000be74
 800b964:	080286b4 	.word	0x080286b4
 800b968:	2000be70 	.word	0x2000be70

0800b96c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b972:	2300      	movs	r3, #0
 800b974:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b976:	f000 f87b 	bl	800ba70 <BSP_SD_IsDetected>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d001      	beq.n	800b984 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b980:	2302      	movs	r3, #2
 800b982:	e012      	b.n	800b9aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b984:	480b      	ldr	r0, [pc, #44]	; (800b9b4 <BSP_SD_Init+0x48>)
 800b986:	f7fc fae9 	bl	8007f5c <HAL_SD_Init>
 800b98a:	4603      	mov	r3, r0
 800b98c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b98e:	79fb      	ldrb	r3, [r7, #7]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d109      	bne.n	800b9a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b994:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b998:	4806      	ldr	r0, [pc, #24]	; (800b9b4 <BSP_SD_Init+0x48>)
 800b99a:	f7fc ff2b 	bl	80087f4 <HAL_SD_ConfigWideBusOperation>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b9a8:	79fb      	ldrb	r3, [r7, #7]
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	2000b948 	.word	0x2000b948

0800b9b8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b086      	sub	sp, #24
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	68ba      	ldr	r2, [r7, #8]
 800b9cc:	68f9      	ldr	r1, [r7, #12]
 800b9ce:	4806      	ldr	r0, [pc, #24]	; (800b9e8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b9d0:	f7fc fb5c 	bl	800808c <HAL_SD_ReadBlocks_DMA>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b9de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3718      	adds	r7, #24
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	2000b948 	.word	0x2000b948

0800b9ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b086      	sub	sp, #24
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	68f9      	ldr	r1, [r7, #12]
 800ba02:	4806      	ldr	r0, [pc, #24]	; (800ba1c <BSP_SD_WriteBlocks_DMA+0x30>)
 800ba04:	f7fc fc2e 	bl	8008264 <HAL_SD_WriteBlocks_DMA>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d001      	beq.n	800ba12 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ba12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3718      	adds	r7, #24
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	2000b948 	.word	0x2000b948

0800ba20 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ba24:	4805      	ldr	r0, [pc, #20]	; (800ba3c <BSP_SD_GetCardState+0x1c>)
 800ba26:	f7fc ff61 	bl	80088ec <HAL_SD_GetCardState>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b04      	cmp	r3, #4
 800ba2e:	bf14      	ite	ne
 800ba30:	2301      	movne	r3, #1
 800ba32:	2300      	moveq	r3, #0
 800ba34:	b2db      	uxtb	r3, r3
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	2000b948 	.word	0x2000b948

0800ba40 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ba48:	6879      	ldr	r1, [r7, #4]
 800ba4a:	4803      	ldr	r0, [pc, #12]	; (800ba58 <BSP_SD_GetCardInfo+0x18>)
 800ba4c:	f7fc fea6 	bl	800879c <HAL_SD_GetCardInfo>
}
 800ba50:	bf00      	nop
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	2000b948 	.word	0x2000b948

0800ba5c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ba64:	f000 f9b2 	bl	800bdcc <BSP_SD_ReadCpltCallback>
}
 800ba68:	bf00      	nop
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ba76:	2301      	movs	r3, #1
 800ba78:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ba7a:	f000 f80b 	bl	800ba94 <BSP_PlatformIsDetected>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d101      	bne.n	800ba88 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ba84:	2300      	movs	r3, #0
 800ba86:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ba88:	79fb      	ldrb	r3, [r7, #7]
 800ba8a:	b2db      	uxtb	r3, r3
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ba9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800baa2:	4806      	ldr	r0, [pc, #24]	; (800babc <BSP_PlatformIsDetected+0x28>)
 800baa4:	f7f9 f88a 	bl	8004bbc <HAL_GPIO_ReadPin>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d001      	beq.n	800bab2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800baae:	2300      	movs	r3, #0
 800bab0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bab2:	79fb      	ldrb	r3, [r7, #7]
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3708      	adds	r7, #8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	40020800 	.word	0x40020800

0800bac0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800bac8:	f000 fa26 	bl	800bf18 <osKernelSysTick>
 800bacc:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800bace:	e006      	b.n	800bade <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bad0:	f7ff ffa6 	bl	800ba20 <BSP_SD_GetCardState>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d101      	bne.n	800bade <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bada:	2300      	movs	r3, #0
 800badc:	e009      	b.n	800baf2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800bade:	f000 fa1b 	bl	800bf18 <osKernelSysTick>
 800bae2:	4602      	mov	r2, r0
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	1ad3      	subs	r3, r2, r3
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	429a      	cmp	r2, r3
 800baec:	d8f0      	bhi.n	800bad0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800baee:	f04f 33ff 	mov.w	r3, #4294967295
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
	...

0800bafc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	4603      	mov	r3, r0
 800bb04:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bb06:	4b0b      	ldr	r3, [pc, #44]	; (800bb34 <SD_CheckStatus+0x38>)
 800bb08:	2201      	movs	r2, #1
 800bb0a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bb0c:	f7ff ff88 	bl	800ba20 <BSP_SD_GetCardState>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d107      	bne.n	800bb26 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bb16:	4b07      	ldr	r3, [pc, #28]	; (800bb34 <SD_CheckStatus+0x38>)
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	f023 0301 	bic.w	r3, r3, #1
 800bb20:	b2da      	uxtb	r2, r3
 800bb22:	4b04      	ldr	r3, [pc, #16]	; (800bb34 <SD_CheckStatus+0x38>)
 800bb24:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bb26:	4b03      	ldr	r3, [pc, #12]	; (800bb34 <SD_CheckStatus+0x38>)
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	b2db      	uxtb	r3, r3
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	20000035 	.word	0x20000035

0800bb38 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bb38:	b590      	push	{r4, r7, lr}
 800bb3a:	b087      	sub	sp, #28
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	4603      	mov	r3, r0
 800bb40:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bb42:	4b20      	ldr	r3, [pc, #128]	; (800bbc4 <SD_initialize+0x8c>)
 800bb44:	2201      	movs	r2, #1
 800bb46:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800bb48:	f000 f9da 	bl	800bf00 <osKernelRunning>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d030      	beq.n	800bbb4 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800bb52:	f7ff ff0b 	bl	800b96c <BSP_SD_Init>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d107      	bne.n	800bb6c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800bb5c:	79fb      	ldrb	r3, [r7, #7]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7ff ffcc 	bl	800bafc <SD_CheckStatus>
 800bb64:	4603      	mov	r3, r0
 800bb66:	461a      	mov	r2, r3
 800bb68:	4b16      	ldr	r3, [pc, #88]	; (800bbc4 <SD_initialize+0x8c>)
 800bb6a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800bb6c:	4b15      	ldr	r3, [pc, #84]	; (800bbc4 <SD_initialize+0x8c>)
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d01e      	beq.n	800bbb4 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800bb76:	4b14      	ldr	r3, [pc, #80]	; (800bbc8 <SD_initialize+0x90>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d10e      	bne.n	800bb9c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800bb7e:	4b13      	ldr	r3, [pc, #76]	; (800bbcc <SD_initialize+0x94>)
 800bb80:	f107 0408 	add.w	r4, r7, #8
 800bb84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bb86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800bb8a:	f107 0308 	add.w	r3, r7, #8
 800bb8e:	2100      	movs	r1, #0
 800bb90:	4618      	mov	r0, r3
 800bb92:	f000 faf5 	bl	800c180 <osMessageCreate>
 800bb96:	4602      	mov	r2, r0
 800bb98:	4b0b      	ldr	r3, [pc, #44]	; (800bbc8 <SD_initialize+0x90>)
 800bb9a:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800bb9c:	4b0a      	ldr	r3, [pc, #40]	; (800bbc8 <SD_initialize+0x90>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d107      	bne.n	800bbb4 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800bba4:	4b07      	ldr	r3, [pc, #28]	; (800bbc4 <SD_initialize+0x8c>)
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	f043 0301 	orr.w	r3, r3, #1
 800bbae:	b2da      	uxtb	r2, r3
 800bbb0:	4b04      	ldr	r3, [pc, #16]	; (800bbc4 <SD_initialize+0x8c>)
 800bbb2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800bbb4:	4b03      	ldr	r3, [pc, #12]	; (800bbc4 <SD_initialize+0x8c>)
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	b2db      	uxtb	r3, r3
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	371c      	adds	r7, #28
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd90      	pop	{r4, r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	20000035 	.word	0x20000035
 800bbc8:	20000394 	.word	0x20000394
 800bbcc:	08027e98 	.word	0x08027e98

0800bbd0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bbda:	79fb      	ldrb	r3, [r7, #7]
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7ff ff8d 	bl	800bafc <SD_CheckStatus>
 800bbe2:	4603      	mov	r3, r0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b08a      	sub	sp, #40	; 0x28
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60b9      	str	r1, [r7, #8]
 800bbf4:	607a      	str	r2, [r7, #4]
 800bbf6:	603b      	str	r3, [r7, #0]
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bc02:	f247 5030 	movw	r0, #30000	; 0x7530
 800bc06:	f7ff ff5b 	bl	800bac0 <SD_CheckStatusWithTimeout>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	da02      	bge.n	800bc16 <SD_read+0x2a>
  {
    return res;
 800bc10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc14:	e032      	b.n	800bc7c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bc16:	683a      	ldr	r2, [r7, #0]
 800bc18:	6879      	ldr	r1, [r7, #4]
 800bc1a:	68b8      	ldr	r0, [r7, #8]
 800bc1c:	f7ff fecc 	bl	800b9b8 <BSP_SD_ReadBlocks_DMA>
 800bc20:	4603      	mov	r3, r0
 800bc22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800bc26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d124      	bne.n	800bc78 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bc2e:	4b15      	ldr	r3, [pc, #84]	; (800bc84 <SD_read+0x98>)
 800bc30:	6819      	ldr	r1, [r3, #0]
 800bc32:	f107 0314 	add.w	r3, r7, #20
 800bc36:	f247 5230 	movw	r2, #30000	; 0x7530
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f000 fb0a 	bl	800c254 <osMessageGet>

    if (event.status == osEventMessage)
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	2b10      	cmp	r3, #16
 800bc44:	d118      	bne.n	800bc78 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d115      	bne.n	800bc78 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800bc4c:	f000 f964 	bl	800bf18 <osKernelSysTick>
 800bc50:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bc52:	e008      	b.n	800bc66 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bc54:	f7ff fee4 	bl	800ba20 <BSP_SD_GetCardState>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d103      	bne.n	800bc66 <SD_read+0x7a>
              {
                res = RES_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bc64:	e008      	b.n	800bc78 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bc66:	f000 f957 	bl	800bf18 <osKernelSysTick>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	6a3b      	ldr	r3, [r7, #32]
 800bc6e:	1ad3      	subs	r3, r2, r3
 800bc70:	f247 522f 	movw	r2, #29999	; 0x752f
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d9ed      	bls.n	800bc54 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bc78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3728      	adds	r7, #40	; 0x28
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	20000394 	.word	0x20000394

0800bc88 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b08a      	sub	sp, #40	; 0x28
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60b9      	str	r1, [r7, #8]
 800bc90:	607a      	str	r2, [r7, #4]
 800bc92:	603b      	str	r3, [r7, #0]
 800bc94:	4603      	mov	r3, r0
 800bc96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bc9e:	f247 5030 	movw	r0, #30000	; 0x7530
 800bca2:	f7ff ff0d 	bl	800bac0 <SD_CheckStatusWithTimeout>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	da02      	bge.n	800bcb2 <SD_write+0x2a>
  {
    return res;
 800bcac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcb0:	e02e      	b.n	800bd10 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bcb2:	683a      	ldr	r2, [r7, #0]
 800bcb4:	6879      	ldr	r1, [r7, #4]
 800bcb6:	68b8      	ldr	r0, [r7, #8]
 800bcb8:	f7ff fe98 	bl	800b9ec <BSP_SD_WriteBlocks_DMA>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d124      	bne.n	800bd0c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bcc2:	4b15      	ldr	r3, [pc, #84]	; (800bd18 <SD_write+0x90>)
 800bcc4:	6819      	ldr	r1, [r3, #0]
 800bcc6:	f107 0314 	add.w	r3, r7, #20
 800bcca:	f247 5230 	movw	r2, #30000	; 0x7530
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f000 fac0 	bl	800c254 <osMessageGet>

    if (event.status == osEventMessage)
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	2b10      	cmp	r3, #16
 800bcd8:	d118      	bne.n	800bd0c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	d115      	bne.n	800bd0c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800bce0:	f000 f91a 	bl	800bf18 <osKernelSysTick>
 800bce4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800bce6:	e008      	b.n	800bcfa <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bce8:	f7ff fe9a 	bl	800ba20 <BSP_SD_GetCardState>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d103      	bne.n	800bcfa <SD_write+0x72>
          {
            res = RES_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800bcf8:	e008      	b.n	800bd0c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800bcfa:	f000 f90d 	bl	800bf18 <osKernelSysTick>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	6a3b      	ldr	r3, [r7, #32]
 800bd02:	1ad3      	subs	r3, r2, r3
 800bd04:	f247 522f 	movw	r2, #29999	; 0x752f
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d9ed      	bls.n	800bce8 <SD_write+0x60>
    }

  }
#endif

  return res;
 800bd0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3728      	adds	r7, #40	; 0x28
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	20000394 	.word	0x20000394

0800bd1c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b08c      	sub	sp, #48	; 0x30
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	4603      	mov	r3, r0
 800bd24:	603a      	str	r2, [r7, #0]
 800bd26:	71fb      	strb	r3, [r7, #7]
 800bd28:	460b      	mov	r3, r1
 800bd2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bd32:	4b25      	ldr	r3, [pc, #148]	; (800bdc8 <SD_ioctl+0xac>)
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	f003 0301 	and.w	r3, r3, #1
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d001      	beq.n	800bd44 <SD_ioctl+0x28>
 800bd40:	2303      	movs	r3, #3
 800bd42:	e03c      	b.n	800bdbe <SD_ioctl+0xa2>

  switch (cmd)
 800bd44:	79bb      	ldrb	r3, [r7, #6]
 800bd46:	2b03      	cmp	r3, #3
 800bd48:	d834      	bhi.n	800bdb4 <SD_ioctl+0x98>
 800bd4a:	a201      	add	r2, pc, #4	; (adr r2, 800bd50 <SD_ioctl+0x34>)
 800bd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd50:	0800bd61 	.word	0x0800bd61
 800bd54:	0800bd69 	.word	0x0800bd69
 800bd58:	0800bd81 	.word	0x0800bd81
 800bd5c:	0800bd9b 	.word	0x0800bd9b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bd60:	2300      	movs	r3, #0
 800bd62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bd66:	e028      	b.n	800bdba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bd68:	f107 030c 	add.w	r3, r7, #12
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7ff fe67 	bl	800ba40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bd72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bd7e:	e01c      	b.n	800bdba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bd80:	f107 030c 	add.w	r3, r7, #12
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7ff fe5b 	bl	800ba40 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bd92:	2300      	movs	r3, #0
 800bd94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bd98:	e00f      	b.n	800bdba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bd9a:	f107 030c 	add.w	r3, r7, #12
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7ff fe4e 	bl	800ba40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda6:	0a5a      	lsrs	r2, r3, #9
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bdac:	2300      	movs	r3, #0
 800bdae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bdb2:	e002      	b.n	800bdba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bdb4:	2304      	movs	r3, #4
 800bdb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bdba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3730      	adds	r7, #48	; 0x30
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	20000035 	.word	0x20000035

0800bdcc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800bdd0:	4b04      	ldr	r3, [pc, #16]	; (800bde4 <BSP_SD_ReadCpltCallback+0x18>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	2101      	movs	r1, #1
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f000 f9fb 	bl	800c1d4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800bdde:	bf00      	nop
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	20000394 	.word	0x20000394

0800bde8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b087      	sub	sp, #28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bdfe:	4b1f      	ldr	r3, [pc, #124]	; (800be7c <FATFS_LinkDriverEx+0x94>)
 800be00:	7a5b      	ldrb	r3, [r3, #9]
 800be02:	b2db      	uxtb	r3, r3
 800be04:	2b00      	cmp	r3, #0
 800be06:	d131      	bne.n	800be6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800be08:	4b1c      	ldr	r3, [pc, #112]	; (800be7c <FATFS_LinkDriverEx+0x94>)
 800be0a:	7a5b      	ldrb	r3, [r3, #9]
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	461a      	mov	r2, r3
 800be10:	4b1a      	ldr	r3, [pc, #104]	; (800be7c <FATFS_LinkDriverEx+0x94>)
 800be12:	2100      	movs	r1, #0
 800be14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800be16:	4b19      	ldr	r3, [pc, #100]	; (800be7c <FATFS_LinkDriverEx+0x94>)
 800be18:	7a5b      	ldrb	r3, [r3, #9]
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	4a17      	ldr	r2, [pc, #92]	; (800be7c <FATFS_LinkDriverEx+0x94>)
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	4413      	add	r3, r2
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800be26:	4b15      	ldr	r3, [pc, #84]	; (800be7c <FATFS_LinkDriverEx+0x94>)
 800be28:	7a5b      	ldrb	r3, [r3, #9]
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	461a      	mov	r2, r3
 800be2e:	4b13      	ldr	r3, [pc, #76]	; (800be7c <FATFS_LinkDriverEx+0x94>)
 800be30:	4413      	add	r3, r2
 800be32:	79fa      	ldrb	r2, [r7, #7]
 800be34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800be36:	4b11      	ldr	r3, [pc, #68]	; (800be7c <FATFS_LinkDriverEx+0x94>)
 800be38:	7a5b      	ldrb	r3, [r3, #9]
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	1c5a      	adds	r2, r3, #1
 800be3e:	b2d1      	uxtb	r1, r2
 800be40:	4a0e      	ldr	r2, [pc, #56]	; (800be7c <FATFS_LinkDriverEx+0x94>)
 800be42:	7251      	strb	r1, [r2, #9]
 800be44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800be46:	7dbb      	ldrb	r3, [r7, #22]
 800be48:	3330      	adds	r3, #48	; 0x30
 800be4a:	b2da      	uxtb	r2, r3
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	3301      	adds	r3, #1
 800be54:	223a      	movs	r2, #58	; 0x3a
 800be56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	3302      	adds	r3, #2
 800be5c:	222f      	movs	r2, #47	; 0x2f
 800be5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	3303      	adds	r3, #3
 800be64:	2200      	movs	r2, #0
 800be66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800be68:	2300      	movs	r3, #0
 800be6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800be6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	371c      	adds	r7, #28
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr
 800be7a:	bf00      	nop
 800be7c:	20000398 	.word	0x20000398

0800be80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800be8a:	2200      	movs	r2, #0
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f7ff ffaa 	bl	800bde8 <FATFS_LinkDriverEx>
 800be94:	4603      	mov	r3, r0
}
 800be96:	4618      	mov	r0, r3
 800be98:	3708      	adds	r7, #8
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800be9e:	b480      	push	{r7}
 800bea0:	b085      	sub	sp, #20
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	4603      	mov	r3, r0
 800bea6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bea8:	2300      	movs	r3, #0
 800beaa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800beac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800beb0:	2b84      	cmp	r3, #132	; 0x84
 800beb2:	d005      	beq.n	800bec0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800beb4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	4413      	add	r3, r2
 800bebc:	3303      	adds	r3, #3
 800bebe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bec0:	68fb      	ldr	r3, [r7, #12]
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3714      	adds	r7, #20
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bece:	b480      	push	{r7}
 800bed0:	b083      	sub	sp, #12
 800bed2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bed4:	f3ef 8305 	mrs	r3, IPSR
 800bed8:	607b      	str	r3, [r7, #4]
  return(result);
 800beda:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bedc:	2b00      	cmp	r3, #0
 800bede:	bf14      	ite	ne
 800bee0:	2301      	movne	r3, #1
 800bee2:	2300      	moveq	r3, #0
 800bee4:	b2db      	uxtb	r3, r3
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	370c      	adds	r7, #12
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr

0800bef2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bef6:	f001 fc31 	bl	800d75c <vTaskStartScheduler>
  
  return osOK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800bf04:	f002 f87c 	bl	800e000 <xTaskGetSchedulerState>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d101      	bne.n	800bf12 <osKernelRunning+0x12>
    return 0;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	e000      	b.n	800bf14 <osKernelRunning+0x14>
  else
    return 1;
 800bf12:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bf1c:	f7ff ffd7 	bl	800bece <inHandlerMode>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d003      	beq.n	800bf2e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bf26:	f001 fd37 	bl	800d998 <xTaskGetTickCountFromISR>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	e002      	b.n	800bf34 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bf2e:	f001 fd23 	bl	800d978 <xTaskGetTickCount>
 800bf32:	4603      	mov	r3, r0
  }
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bf38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf3a:	b089      	sub	sp, #36	; 0x24
 800bf3c:	af04      	add	r7, sp, #16
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	695b      	ldr	r3, [r3, #20]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d020      	beq.n	800bf8c <osThreadCreate+0x54>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	699b      	ldr	r3, [r3, #24]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d01c      	beq.n	800bf8c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	685c      	ldr	r4, [r3, #4]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681d      	ldr	r5, [r3, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	691e      	ldr	r6, [r3, #16]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7ff ff9a 	bl	800be9e <makeFreeRtosPriority>
 800bf6a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	695b      	ldr	r3, [r3, #20]
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf74:	9202      	str	r2, [sp, #8]
 800bf76:	9301      	str	r3, [sp, #4]
 800bf78:	9100      	str	r1, [sp, #0]
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	4632      	mov	r2, r6
 800bf7e:	4629      	mov	r1, r5
 800bf80:	4620      	mov	r0, r4
 800bf82:	f001 fa12 	bl	800d3aa <xTaskCreateStatic>
 800bf86:	4603      	mov	r3, r0
 800bf88:	60fb      	str	r3, [r7, #12]
 800bf8a:	e01c      	b.n	800bfc6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	685c      	ldr	r4, [r3, #4]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf98:	b29e      	uxth	r6, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7ff ff7c 	bl	800be9e <makeFreeRtosPriority>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	f107 030c 	add.w	r3, r7, #12
 800bfac:	9301      	str	r3, [sp, #4]
 800bfae:	9200      	str	r2, [sp, #0]
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	4632      	mov	r2, r6
 800bfb4:	4629      	mov	r1, r5
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f001 fa57 	bl	800d46a <xTaskCreate>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d001      	beq.n	800bfc6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	e000      	b.n	800bfc8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3714      	adds	r7, #20
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bfd0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b084      	sub	sp, #16
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d001      	beq.n	800bfe6 <osDelay+0x16>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	e000      	b.n	800bfe8 <osDelay+0x18>
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f001 fb81 	bl	800d6f0 <vTaskDelay>
  
  return osOK;
 800bfee:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3710      	adds	r7, #16
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af02      	add	r7, sp, #8
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d017      	beq.n	800c03a <osSemaphoreCreate+0x42>
    if (count == 1) {
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d10b      	bne.n	800c028 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	685a      	ldr	r2, [r3, #4]
 800c014:	2303      	movs	r3, #3
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	4613      	mov	r3, r2
 800c01a:	2200      	movs	r2, #0
 800c01c:	2100      	movs	r1, #0
 800c01e:	2001      	movs	r0, #1
 800c020:	f000 faaa 	bl	800c578 <xQueueGenericCreateStatic>
 800c024:	4603      	mov	r3, r0
 800c026:	e023      	b.n	800c070 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800c028:	6838      	ldr	r0, [r7, #0]
 800c02a:	6839      	ldr	r1, [r7, #0]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	461a      	mov	r2, r3
 800c032:	f000 fb7e 	bl	800c732 <xQueueCreateCountingSemaphoreStatic>
 800c036:	4603      	mov	r3, r0
 800c038:	e01a      	b.n	800c070 <osSemaphoreCreate+0x78>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d110      	bne.n	800c062 <osSemaphoreCreate+0x6a>
      vSemaphoreCreateBinary(sema);
 800c040:	2203      	movs	r2, #3
 800c042:	2100      	movs	r1, #0
 800c044:	2001      	movs	r0, #1
 800c046:	f000 fb14 	bl	800c672 <xQueueGenericCreate>
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d005      	beq.n	800c05e <osSemaphoreCreate+0x66>
 800c052:	2300      	movs	r3, #0
 800c054:	2200      	movs	r2, #0
 800c056:	2100      	movs	r1, #0
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f000 fbd9 	bl	800c810 <xQueueGenericSend>
      return sema;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	e006      	b.n	800c070 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	683a      	ldr	r2, [r7, #0]
 800c066:	4611      	mov	r1, r2
 800c068:	4618      	mov	r0, r3
 800c06a:	f000 fb9b 	bl	800c7a4 <xQueueCreateCountingSemaphore>
 800c06e:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800c070:	4618      	mov	r0, r3
 800c072:	3710      	adds	r7, #16
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c082:	2300      	movs	r3, #0
 800c084:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d101      	bne.n	800c090 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c08c:	2380      	movs	r3, #128	; 0x80
 800c08e:	e03a      	b.n	800c106 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c090:	2300      	movs	r3, #0
 800c092:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c09a:	d103      	bne.n	800c0a4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c09c:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a0:	60fb      	str	r3, [r7, #12]
 800c0a2:	e009      	b.n	800c0b8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d006      	beq.n	800c0b8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d101      	bne.n	800c0b8 <osSemaphoreWait+0x40>
      ticks = 1;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c0b8:	f7ff ff09 	bl	800bece <inHandlerMode>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d017      	beq.n	800c0f2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c0c2:	f107 0308 	add.w	r3, r7, #8
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	2100      	movs	r1, #0
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 ffc2 	bl	800d054 <xQueueReceiveFromISR>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d001      	beq.n	800c0da <osSemaphoreWait+0x62>
      return osErrorOS;
 800c0d6:	23ff      	movs	r3, #255	; 0xff
 800c0d8:	e015      	b.n	800c106 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d011      	beq.n	800c104 <osSemaphoreWait+0x8c>
 800c0e0:	4b0b      	ldr	r3, [pc, #44]	; (800c110 <osSemaphoreWait+0x98>)
 800c0e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0e6:	601a      	str	r2, [r3, #0]
 800c0e8:	f3bf 8f4f 	dsb	sy
 800c0ec:	f3bf 8f6f 	isb	sy
 800c0f0:	e008      	b.n	800c104 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c0f2:	68f9      	ldr	r1, [r7, #12]
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 fe9d 	bl	800ce34 <xQueueSemaphoreTake>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d001      	beq.n	800c104 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c100:	23ff      	movs	r3, #255	; 0xff
 800c102:	e000      	b.n	800c106 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	e000ed04 	.word	0xe000ed04

0800c114 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c11c:	2300      	movs	r3, #0
 800c11e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c120:	2300      	movs	r3, #0
 800c122:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c124:	f7ff fed3 	bl	800bece <inHandlerMode>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d016      	beq.n	800c15c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c12e:	f107 0308 	add.w	r3, r7, #8
 800c132:	4619      	mov	r1, r3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 fd09 	bl	800cb4c <xQueueGiveFromISR>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d001      	beq.n	800c144 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c140:	23ff      	movs	r3, #255	; 0xff
 800c142:	e017      	b.n	800c174 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d013      	beq.n	800c172 <osSemaphoreRelease+0x5e>
 800c14a:	4b0c      	ldr	r3, [pc, #48]	; (800c17c <osSemaphoreRelease+0x68>)
 800c14c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c150:	601a      	str	r2, [r3, #0]
 800c152:	f3bf 8f4f 	dsb	sy
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	e00a      	b.n	800c172 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c15c:	2300      	movs	r3, #0
 800c15e:	2200      	movs	r2, #0
 800c160:	2100      	movs	r1, #0
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 fb54 	bl	800c810 <xQueueGenericSend>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d001      	beq.n	800c172 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c16e:	23ff      	movs	r3, #255	; 0xff
 800c170:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c172:	68fb      	ldr	r3, [r7, #12]
}
 800c174:	4618      	mov	r0, r3
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	e000ed04 	.word	0xe000ed04

0800c180 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c180:	b590      	push	{r4, r7, lr}
 800c182:	b085      	sub	sp, #20
 800c184:	af02      	add	r7, sp, #8
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d012      	beq.n	800c1b8 <osMessageCreate+0x38>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d00e      	beq.n	800c1b8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6818      	ldr	r0, [r3, #0]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6859      	ldr	r1, [r3, #4]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	689a      	ldr	r2, [r3, #8]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68dc      	ldr	r4, [r3, #12]
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	4623      	mov	r3, r4
 800c1b0:	f000 f9e2 	bl	800c578 <xQueueGenericCreateStatic>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	e008      	b.n	800c1ca <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6818      	ldr	r0, [r3, #0]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	f000 fa55 	bl	800c672 <xQueueGenericCreate>
 800c1c8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	370c      	adds	r7, #12
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd90      	pop	{r4, r7, pc}
	...

0800c1d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b086      	sub	sp, #24
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d101      	bne.n	800c1f2 <osMessagePut+0x1e>
    ticks = 1;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c1f2:	f7ff fe6c 	bl	800bece <inHandlerMode>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d018      	beq.n	800c22e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c1fc:	f107 0210 	add.w	r2, r7, #16
 800c200:	f107 0108 	add.w	r1, r7, #8
 800c204:	2300      	movs	r3, #0
 800c206:	68f8      	ldr	r0, [r7, #12]
 800c208:	f000 fc04 	bl	800ca14 <xQueueGenericSendFromISR>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d001      	beq.n	800c216 <osMessagePut+0x42>
      return osErrorOS;
 800c212:	23ff      	movs	r3, #255	; 0xff
 800c214:	e018      	b.n	800c248 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d014      	beq.n	800c246 <osMessagePut+0x72>
 800c21c:	4b0c      	ldr	r3, [pc, #48]	; (800c250 <osMessagePut+0x7c>)
 800c21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	f3bf 8f4f 	dsb	sy
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	e00b      	b.n	800c246 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c22e:	f107 0108 	add.w	r1, r7, #8
 800c232:	2300      	movs	r3, #0
 800c234:	697a      	ldr	r2, [r7, #20]
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f000 faea 	bl	800c810 <xQueueGenericSend>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d001      	beq.n	800c246 <osMessagePut+0x72>
      return osErrorOS;
 800c242:	23ff      	movs	r3, #255	; 0xff
 800c244:	e000      	b.n	800c248 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3718      	adds	r7, #24
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	e000ed04 	.word	0xe000ed04

0800c254 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c254:	b590      	push	{r4, r7, lr}
 800c256:	b08b      	sub	sp, #44	; 0x2c
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c264:	2300      	movs	r3, #0
 800c266:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d10a      	bne.n	800c284 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c26e:	2380      	movs	r3, #128	; 0x80
 800c270:	617b      	str	r3, [r7, #20]
    return event;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	461c      	mov	r4, r3
 800c276:	f107 0314 	add.w	r3, r7, #20
 800c27a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c27e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c282:	e054      	b.n	800c32e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c284:	2300      	movs	r3, #0
 800c286:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c288:	2300      	movs	r3, #0
 800c28a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c292:	d103      	bne.n	800c29c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c294:	f04f 33ff 	mov.w	r3, #4294967295
 800c298:	627b      	str	r3, [r7, #36]	; 0x24
 800c29a:	e009      	b.n	800c2b0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d006      	beq.n	800c2b0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d101      	bne.n	800c2b0 <osMessageGet+0x5c>
      ticks = 1;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c2b0:	f7ff fe0d 	bl	800bece <inHandlerMode>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d01c      	beq.n	800c2f4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c2ba:	f107 0220 	add.w	r2, r7, #32
 800c2be:	f107 0314 	add.w	r3, r7, #20
 800c2c2:	3304      	adds	r3, #4
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	68b8      	ldr	r0, [r7, #8]
 800c2c8:	f000 fec4 	bl	800d054 <xQueueReceiveFromISR>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d102      	bne.n	800c2d8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c2d2:	2310      	movs	r3, #16
 800c2d4:	617b      	str	r3, [r7, #20]
 800c2d6:	e001      	b.n	800c2dc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c2dc:	6a3b      	ldr	r3, [r7, #32]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d01d      	beq.n	800c31e <osMessageGet+0xca>
 800c2e2:	4b15      	ldr	r3, [pc, #84]	; (800c338 <osMessageGet+0xe4>)
 800c2e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2e8:	601a      	str	r2, [r3, #0]
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	e014      	b.n	800c31e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c2f4:	f107 0314 	add.w	r3, r7, #20
 800c2f8:	3304      	adds	r3, #4
 800c2fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	68b8      	ldr	r0, [r7, #8]
 800c300:	f000 fcb6 	bl	800cc70 <xQueueReceive>
 800c304:	4603      	mov	r3, r0
 800c306:	2b01      	cmp	r3, #1
 800c308:	d102      	bne.n	800c310 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c30a:	2310      	movs	r3, #16
 800c30c:	617b      	str	r3, [r7, #20]
 800c30e:	e006      	b.n	800c31e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	2b00      	cmp	r3, #0
 800c314:	d101      	bne.n	800c31a <osMessageGet+0xc6>
 800c316:	2300      	movs	r3, #0
 800c318:	e000      	b.n	800c31c <osMessageGet+0xc8>
 800c31a:	2340      	movs	r3, #64	; 0x40
 800c31c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	461c      	mov	r4, r3
 800c322:	f107 0314 	add.w	r3, r7, #20
 800c326:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c32a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c32e:	68f8      	ldr	r0, [r7, #12]
 800c330:	372c      	adds	r7, #44	; 0x2c
 800c332:	46bd      	mov	sp, r7
 800c334:	bd90      	pop	{r4, r7, pc}
 800c336:	bf00      	nop
 800c338:	e000ed04 	.word	0xe000ed04

0800c33c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f103 0208 	add.w	r2, r3, #8
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f04f 32ff 	mov.w	r2, #4294967295
 800c354:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f103 0208 	add.w	r2, r3, #8
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f103 0208 	add.w	r2, r3, #8
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c370:	bf00      	nop
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c38a:	bf00      	nop
 800c38c:	370c      	adds	r7, #12
 800c38e:	46bd      	mov	sp, r7
 800c390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c394:	4770      	bx	lr

0800c396 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c396:	b480      	push	{r7}
 800c398:	b085      	sub	sp, #20
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
 800c39e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	689a      	ldr	r2, [r3, #8]
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	683a      	ldr	r2, [r7, #0]
 800c3ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	683a      	ldr	r2, [r7, #0]
 800c3c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	1c5a      	adds	r2, r3, #1
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	601a      	str	r2, [r3, #0]
}
 800c3d2:	bf00      	nop
 800c3d4:	3714      	adds	r7, #20
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c3de:	b480      	push	{r7}
 800c3e0:	b085      	sub	sp, #20
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
 800c3e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3f4:	d103      	bne.n	800c3fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	691b      	ldr	r3, [r3, #16]
 800c3fa:	60fb      	str	r3, [r7, #12]
 800c3fc:	e00c      	b.n	800c418 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	3308      	adds	r3, #8
 800c402:	60fb      	str	r3, [r7, #12]
 800c404:	e002      	b.n	800c40c <vListInsert+0x2e>
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	60fb      	str	r3, [r7, #12]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	68ba      	ldr	r2, [r7, #8]
 800c414:	429a      	cmp	r2, r3
 800c416:	d2f6      	bcs.n	800c406 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	685a      	ldr	r2, [r3, #4]
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	683a      	ldr	r2, [r7, #0]
 800c426:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	68fa      	ldr	r2, [r7, #12]
 800c42c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	683a      	ldr	r2, [r7, #0]
 800c432:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	1c5a      	adds	r2, r3, #1
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	601a      	str	r2, [r3, #0]
}
 800c444:	bf00      	nop
 800c446:	3714      	adds	r7, #20
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	6892      	ldr	r2, [r2, #8]
 800c466:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	6852      	ldr	r2, [r2, #4]
 800c470:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d103      	bne.n	800c484 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	689a      	ldr	r2, [r3, #8]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	1e5a      	subs	r2, r3, #1
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3714      	adds	r7, #20
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d10b      	bne.n	800c4d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4bc:	b672      	cpsid	i
 800c4be:	f383 8811 	msr	BASEPRI, r3
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	f3bf 8f4f 	dsb	sy
 800c4ca:	b662      	cpsie	i
 800c4cc:	60bb      	str	r3, [r7, #8]
 800c4ce:	e7fe      	b.n	800c4ce <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800c4d0:	f002 f8da 	bl	800e688 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4dc:	68f9      	ldr	r1, [r7, #12]
 800c4de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c4e0:	fb01 f303 	mul.w	r3, r1, r3
 800c4e4:	441a      	add	r2, r3
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c500:	3b01      	subs	r3, #1
 800c502:	68f9      	ldr	r1, [r7, #12]
 800c504:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c506:	fb01 f303 	mul.w	r3, r1, r3
 800c50a:	441a      	add	r2, r3
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	22ff      	movs	r2, #255	; 0xff
 800c514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	22ff      	movs	r2, #255	; 0xff
 800c51c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d114      	bne.n	800c550 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d01a      	beq.n	800c564 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	3310      	adds	r3, #16
 800c532:	4618      	mov	r0, r3
 800c534:	f001 fba4 	bl	800dc80 <xTaskRemoveFromEventList>
 800c538:	4603      	mov	r3, r0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d012      	beq.n	800c564 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c53e:	4b0d      	ldr	r3, [pc, #52]	; (800c574 <xQueueGenericReset+0xd0>)
 800c540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c544:	601a      	str	r2, [r3, #0]
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	e009      	b.n	800c564 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	3310      	adds	r3, #16
 800c554:	4618      	mov	r0, r3
 800c556:	f7ff fef1 	bl	800c33c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	3324      	adds	r3, #36	; 0x24
 800c55e:	4618      	mov	r0, r3
 800c560:	f7ff feec 	bl	800c33c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c564:	f002 f8c2 	bl	800e6ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c568:	2301      	movs	r3, #1
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	e000ed04 	.word	0xe000ed04

0800c578 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b08e      	sub	sp, #56	; 0x38
 800c57c:	af02      	add	r7, sp, #8
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
 800c584:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10b      	bne.n	800c5a4 <xQueueGenericCreateStatic+0x2c>
 800c58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c590:	b672      	cpsid	i
 800c592:	f383 8811 	msr	BASEPRI, r3
 800c596:	f3bf 8f6f 	isb	sy
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	b662      	cpsie	i
 800c5a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5a2:	e7fe      	b.n	800c5a2 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d10b      	bne.n	800c5c2 <xQueueGenericCreateStatic+0x4a>
 800c5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ae:	b672      	cpsid	i
 800c5b0:	f383 8811 	msr	BASEPRI, r3
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	b662      	cpsie	i
 800c5be:	627b      	str	r3, [r7, #36]	; 0x24
 800c5c0:	e7fe      	b.n	800c5c0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d002      	beq.n	800c5ce <xQueueGenericCreateStatic+0x56>
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d001      	beq.n	800c5d2 <xQueueGenericCreateStatic+0x5a>
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e000      	b.n	800c5d4 <xQueueGenericCreateStatic+0x5c>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d10b      	bne.n	800c5f0 <xQueueGenericCreateStatic+0x78>
 800c5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5dc:	b672      	cpsid	i
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	b662      	cpsie	i
 800c5ec:	623b      	str	r3, [r7, #32]
 800c5ee:	e7fe      	b.n	800c5ee <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d102      	bne.n	800c5fc <xQueueGenericCreateStatic+0x84>
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d101      	bne.n	800c600 <xQueueGenericCreateStatic+0x88>
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	e000      	b.n	800c602 <xQueueGenericCreateStatic+0x8a>
 800c600:	2300      	movs	r3, #0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d10b      	bne.n	800c61e <xQueueGenericCreateStatic+0xa6>
 800c606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60a:	b672      	cpsid	i
 800c60c:	f383 8811 	msr	BASEPRI, r3
 800c610:	f3bf 8f6f 	isb	sy
 800c614:	f3bf 8f4f 	dsb	sy
 800c618:	b662      	cpsie	i
 800c61a:	61fb      	str	r3, [r7, #28]
 800c61c:	e7fe      	b.n	800c61c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c61e:	2348      	movs	r3, #72	; 0x48
 800c620:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	2b48      	cmp	r3, #72	; 0x48
 800c626:	d00b      	beq.n	800c640 <xQueueGenericCreateStatic+0xc8>
 800c628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62c:	b672      	cpsid	i
 800c62e:	f383 8811 	msr	BASEPRI, r3
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	f3bf 8f4f 	dsb	sy
 800c63a:	b662      	cpsie	i
 800c63c:	61bb      	str	r3, [r7, #24]
 800c63e:	e7fe      	b.n	800c63e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c640:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00d      	beq.n	800c668 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64e:	2201      	movs	r2, #1
 800c650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c654:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65a:	9300      	str	r3, [sp, #0]
 800c65c:	4613      	mov	r3, r2
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	68b9      	ldr	r1, [r7, #8]
 800c662:	68f8      	ldr	r0, [r7, #12]
 800c664:	f000 f846 	bl	800c6f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3730      	adds	r7, #48	; 0x30
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c672:	b580      	push	{r7, lr}
 800c674:	b08a      	sub	sp, #40	; 0x28
 800c676:	af02      	add	r7, sp, #8
 800c678:	60f8      	str	r0, [r7, #12]
 800c67a:	60b9      	str	r1, [r7, #8]
 800c67c:	4613      	mov	r3, r2
 800c67e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d10b      	bne.n	800c69e <xQueueGenericCreate+0x2c>
 800c686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68a:	b672      	cpsid	i
 800c68c:	f383 8811 	msr	BASEPRI, r3
 800c690:	f3bf 8f6f 	isb	sy
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	b662      	cpsie	i
 800c69a:	613b      	str	r3, [r7, #16]
 800c69c:	e7fe      	b.n	800c69c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d102      	bne.n	800c6aa <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	61fb      	str	r3, [r7, #28]
 800c6a8:	e004      	b.n	800c6b4 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	68ba      	ldr	r2, [r7, #8]
 800c6ae:	fb02 f303 	mul.w	r3, r2, r3
 800c6b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	3348      	adds	r3, #72	; 0x48
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f002 f907 	bl	800e8cc <pvPortMalloc>
 800c6be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d011      	beq.n	800c6ea <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	3348      	adds	r3, #72	; 0x48
 800c6ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c6d8:	79fa      	ldrb	r2, [r7, #7]
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	697a      	ldr	r2, [r7, #20]
 800c6e2:	68b9      	ldr	r1, [r7, #8]
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f000 f805 	bl	800c6f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c6ea:	69bb      	ldr	r3, [r7, #24]
	}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3720      	adds	r7, #32
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	607a      	str	r2, [r7, #4]
 800c700:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d103      	bne.n	800c710 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	69ba      	ldr	r2, [r7, #24]
 800c70c:	601a      	str	r2, [r3, #0]
 800c70e:	e002      	b.n	800c716 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c710:	69bb      	ldr	r3, [r7, #24]
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	68fa      	ldr	r2, [r7, #12]
 800c71a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	68ba      	ldr	r2, [r7, #8]
 800c720:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c722:	2101      	movs	r1, #1
 800c724:	69b8      	ldr	r0, [r7, #24]
 800c726:	f7ff febd 	bl	800c4a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c72a:	bf00      	nop
 800c72c:	3710      	adds	r7, #16
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}

0800c732 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c732:	b580      	push	{r7, lr}
 800c734:	b08a      	sub	sp, #40	; 0x28
 800c736:	af02      	add	r7, sp, #8
 800c738:	60f8      	str	r0, [r7, #12]
 800c73a:	60b9      	str	r1, [r7, #8]
 800c73c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d10b      	bne.n	800c75c <xQueueCreateCountingSemaphoreStatic+0x2a>
 800c744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c748:	b672      	cpsid	i
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	b662      	cpsie	i
 800c758:	61bb      	str	r3, [r7, #24]
 800c75a:	e7fe      	b.n	800c75a <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c75c:	68ba      	ldr	r2, [r7, #8]
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	429a      	cmp	r2, r3
 800c762:	d90b      	bls.n	800c77c <xQueueCreateCountingSemaphoreStatic+0x4a>
 800c764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c768:	b672      	cpsid	i
 800c76a:	f383 8811 	msr	BASEPRI, r3
 800c76e:	f3bf 8f6f 	isb	sy
 800c772:	f3bf 8f4f 	dsb	sy
 800c776:	b662      	cpsie	i
 800c778:	617b      	str	r3, [r7, #20]
 800c77a:	e7fe      	b.n	800c77a <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c77c:	2302      	movs	r3, #2
 800c77e:	9300      	str	r3, [sp, #0]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	2100      	movs	r1, #0
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f7ff fef6 	bl	800c578 <xQueueGenericCreateStatic>
 800c78c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d002      	beq.n	800c79a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	68ba      	ldr	r2, [r7, #8]
 800c798:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c79a:	69fb      	ldr	r3, [r7, #28]
	}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3720      	adds	r7, #32
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b086      	sub	sp, #24
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d10b      	bne.n	800c7cc <xQueueCreateCountingSemaphore+0x28>
 800c7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b8:	b672      	cpsid	i
 800c7ba:	f383 8811 	msr	BASEPRI, r3
 800c7be:	f3bf 8f6f 	isb	sy
 800c7c2:	f3bf 8f4f 	dsb	sy
 800c7c6:	b662      	cpsie	i
 800c7c8:	613b      	str	r3, [r7, #16]
 800c7ca:	e7fe      	b.n	800c7ca <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c7cc:	683a      	ldr	r2, [r7, #0]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d90b      	bls.n	800c7ec <xQueueCreateCountingSemaphore+0x48>
 800c7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d8:	b672      	cpsid	i
 800c7da:	f383 8811 	msr	BASEPRI, r3
 800c7de:	f3bf 8f6f 	isb	sy
 800c7e2:	f3bf 8f4f 	dsb	sy
 800c7e6:	b662      	cpsie	i
 800c7e8:	60fb      	str	r3, [r7, #12]
 800c7ea:	e7fe      	b.n	800c7ea <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c7ec:	2202      	movs	r2, #2
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f7ff ff3e 	bl	800c672 <xQueueGenericCreate>
 800c7f6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d002      	beq.n	800c804 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	683a      	ldr	r2, [r7, #0]
 800c802:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c804:	697b      	ldr	r3, [r7, #20]
	}
 800c806:	4618      	mov	r0, r3
 800c808:	3718      	adds	r7, #24
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
	...

0800c810 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b08e      	sub	sp, #56	; 0x38
 800c814:	af00      	add	r7, sp, #0
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	607a      	str	r2, [r7, #4]
 800c81c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c81e:	2300      	movs	r3, #0
 800c820:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d10b      	bne.n	800c844 <xQueueGenericSend+0x34>
 800c82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c830:	b672      	cpsid	i
 800c832:	f383 8811 	msr	BASEPRI, r3
 800c836:	f3bf 8f6f 	isb	sy
 800c83a:	f3bf 8f4f 	dsb	sy
 800c83e:	b662      	cpsie	i
 800c840:	62bb      	str	r3, [r7, #40]	; 0x28
 800c842:	e7fe      	b.n	800c842 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d103      	bne.n	800c852 <xQueueGenericSend+0x42>
 800c84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d101      	bne.n	800c856 <xQueueGenericSend+0x46>
 800c852:	2301      	movs	r3, #1
 800c854:	e000      	b.n	800c858 <xQueueGenericSend+0x48>
 800c856:	2300      	movs	r3, #0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d10b      	bne.n	800c874 <xQueueGenericSend+0x64>
 800c85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c860:	b672      	cpsid	i
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	b662      	cpsie	i
 800c870:	627b      	str	r3, [r7, #36]	; 0x24
 800c872:	e7fe      	b.n	800c872 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	2b02      	cmp	r3, #2
 800c878:	d103      	bne.n	800c882 <xQueueGenericSend+0x72>
 800c87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d101      	bne.n	800c886 <xQueueGenericSend+0x76>
 800c882:	2301      	movs	r3, #1
 800c884:	e000      	b.n	800c888 <xQueueGenericSend+0x78>
 800c886:	2300      	movs	r3, #0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d10b      	bne.n	800c8a4 <xQueueGenericSend+0x94>
 800c88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c890:	b672      	cpsid	i
 800c892:	f383 8811 	msr	BASEPRI, r3
 800c896:	f3bf 8f6f 	isb	sy
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	b662      	cpsie	i
 800c8a0:	623b      	str	r3, [r7, #32]
 800c8a2:	e7fe      	b.n	800c8a2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8a4:	f001 fbac 	bl	800e000 <xTaskGetSchedulerState>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d102      	bne.n	800c8b4 <xQueueGenericSend+0xa4>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d101      	bne.n	800c8b8 <xQueueGenericSend+0xa8>
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e000      	b.n	800c8ba <xQueueGenericSend+0xaa>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d10b      	bne.n	800c8d6 <xQueueGenericSend+0xc6>
 800c8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c2:	b672      	cpsid	i
 800c8c4:	f383 8811 	msr	BASEPRI, r3
 800c8c8:	f3bf 8f6f 	isb	sy
 800c8cc:	f3bf 8f4f 	dsb	sy
 800c8d0:	b662      	cpsie	i
 800c8d2:	61fb      	str	r3, [r7, #28]
 800c8d4:	e7fe      	b.n	800c8d4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c8d6:	f001 fed7 	bl	800e688 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d302      	bcc.n	800c8ec <xQueueGenericSend+0xdc>
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	2b02      	cmp	r3, #2
 800c8ea:	d129      	bne.n	800c940 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c8ec:	683a      	ldr	r2, [r7, #0]
 800c8ee:	68b9      	ldr	r1, [r7, #8]
 800c8f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8f2:	f000 fc4a 	bl	800d18a <prvCopyDataToQueue>
 800c8f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d010      	beq.n	800c922 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c902:	3324      	adds	r3, #36	; 0x24
 800c904:	4618      	mov	r0, r3
 800c906:	f001 f9bb 	bl	800dc80 <xTaskRemoveFromEventList>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d013      	beq.n	800c938 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c910:	4b3f      	ldr	r3, [pc, #252]	; (800ca10 <xQueueGenericSend+0x200>)
 800c912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c916:	601a      	str	r2, [r3, #0]
 800c918:	f3bf 8f4f 	dsb	sy
 800c91c:	f3bf 8f6f 	isb	sy
 800c920:	e00a      	b.n	800c938 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c924:	2b00      	cmp	r3, #0
 800c926:	d007      	beq.n	800c938 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c928:	4b39      	ldr	r3, [pc, #228]	; (800ca10 <xQueueGenericSend+0x200>)
 800c92a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c92e:	601a      	str	r2, [r3, #0]
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c938:	f001 fed8 	bl	800e6ec <vPortExitCritical>
				return pdPASS;
 800c93c:	2301      	movs	r3, #1
 800c93e:	e063      	b.n	800ca08 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d103      	bne.n	800c94e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c946:	f001 fed1 	bl	800e6ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c94a:	2300      	movs	r3, #0
 800c94c:	e05c      	b.n	800ca08 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c94e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c950:	2b00      	cmp	r3, #0
 800c952:	d106      	bne.n	800c962 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c954:	f107 0314 	add.w	r3, r7, #20
 800c958:	4618      	mov	r0, r3
 800c95a:	f001 f9f5 	bl	800dd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c95e:	2301      	movs	r3, #1
 800c960:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c962:	f001 fec3 	bl	800e6ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c966:	f000 ff5b 	bl	800d820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c96a:	f001 fe8d 	bl	800e688 <vPortEnterCritical>
 800c96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c974:	b25b      	sxtb	r3, r3
 800c976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c97a:	d103      	bne.n	800c984 <xQueueGenericSend+0x174>
 800c97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97e:	2200      	movs	r2, #0
 800c980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c98a:	b25b      	sxtb	r3, r3
 800c98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c990:	d103      	bne.n	800c99a <xQueueGenericSend+0x18a>
 800c992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c994:	2200      	movs	r2, #0
 800c996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c99a:	f001 fea7 	bl	800e6ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c99e:	1d3a      	adds	r2, r7, #4
 800c9a0:	f107 0314 	add.w	r3, r7, #20
 800c9a4:	4611      	mov	r1, r2
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f001 f9e4 	bl	800dd74 <xTaskCheckForTimeOut>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d124      	bne.n	800c9fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c9b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9b4:	f000 fce1 	bl	800d37a <prvIsQueueFull>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d018      	beq.n	800c9f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c0:	3310      	adds	r3, #16
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	4611      	mov	r1, r2
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f001 f934 	bl	800dc34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c9cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9ce:	f000 fc6c 	bl	800d2aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c9d2:	f000 ff33 	bl	800d83c <xTaskResumeAll>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	f47f af7c 	bne.w	800c8d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c9de:	4b0c      	ldr	r3, [pc, #48]	; (800ca10 <xQueueGenericSend+0x200>)
 800c9e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9e4:	601a      	str	r2, [r3, #0]
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	f3bf 8f6f 	isb	sy
 800c9ee:	e772      	b.n	800c8d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c9f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9f2:	f000 fc5a 	bl	800d2aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c9f6:	f000 ff21 	bl	800d83c <xTaskResumeAll>
 800c9fa:	e76c      	b.n	800c8d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c9fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9fe:	f000 fc54 	bl	800d2aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca02:	f000 ff1b 	bl	800d83c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ca06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3738      	adds	r7, #56	; 0x38
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	e000ed04 	.word	0xe000ed04

0800ca14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b08e      	sub	sp, #56	; 0x38
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	60b9      	str	r1, [r7, #8]
 800ca1e:	607a      	str	r2, [r7, #4]
 800ca20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ca26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d10b      	bne.n	800ca44 <xQueueGenericSendFromISR+0x30>
 800ca2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca30:	b672      	cpsid	i
 800ca32:	f383 8811 	msr	BASEPRI, r3
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	b662      	cpsie	i
 800ca40:	627b      	str	r3, [r7, #36]	; 0x24
 800ca42:	e7fe      	b.n	800ca42 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d103      	bne.n	800ca52 <xQueueGenericSendFromISR+0x3e>
 800ca4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d101      	bne.n	800ca56 <xQueueGenericSendFromISR+0x42>
 800ca52:	2301      	movs	r3, #1
 800ca54:	e000      	b.n	800ca58 <xQueueGenericSendFromISR+0x44>
 800ca56:	2300      	movs	r3, #0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d10b      	bne.n	800ca74 <xQueueGenericSendFromISR+0x60>
 800ca5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca60:	b672      	cpsid	i
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	b662      	cpsie	i
 800ca70:	623b      	str	r3, [r7, #32]
 800ca72:	e7fe      	b.n	800ca72 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	d103      	bne.n	800ca82 <xQueueGenericSendFromISR+0x6e>
 800ca7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d101      	bne.n	800ca86 <xQueueGenericSendFromISR+0x72>
 800ca82:	2301      	movs	r3, #1
 800ca84:	e000      	b.n	800ca88 <xQueueGenericSendFromISR+0x74>
 800ca86:	2300      	movs	r3, #0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d10b      	bne.n	800caa4 <xQueueGenericSendFromISR+0x90>
 800ca8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca90:	b672      	cpsid	i
 800ca92:	f383 8811 	msr	BASEPRI, r3
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	f3bf 8f4f 	dsb	sy
 800ca9e:	b662      	cpsie	i
 800caa0:	61fb      	str	r3, [r7, #28]
 800caa2:	e7fe      	b.n	800caa2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800caa4:	f001 fed0 	bl	800e848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800caa8:	f3ef 8211 	mrs	r2, BASEPRI
 800caac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab0:	b672      	cpsid	i
 800cab2:	f383 8811 	msr	BASEPRI, r3
 800cab6:	f3bf 8f6f 	isb	sy
 800caba:	f3bf 8f4f 	dsb	sy
 800cabe:	b662      	cpsie	i
 800cac0:	61ba      	str	r2, [r7, #24]
 800cac2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cac4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cac6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d302      	bcc.n	800cada <xQueueGenericSendFromISR+0xc6>
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	2b02      	cmp	r3, #2
 800cad8:	d12c      	bne.n	800cb34 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cadc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cae4:	683a      	ldr	r2, [r7, #0]
 800cae6:	68b9      	ldr	r1, [r7, #8]
 800cae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800caea:	f000 fb4e 	bl	800d18a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800caee:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800caf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caf6:	d112      	bne.n	800cb1e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800caf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d016      	beq.n	800cb2e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb02:	3324      	adds	r3, #36	; 0x24
 800cb04:	4618      	mov	r0, r3
 800cb06:	f001 f8bb 	bl	800dc80 <xTaskRemoveFromEventList>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d00e      	beq.n	800cb2e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00b      	beq.n	800cb2e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	601a      	str	r2, [r3, #0]
 800cb1c:	e007      	b.n	800cb2e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cb1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cb22:	3301      	adds	r3, #1
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	b25a      	sxtb	r2, r3
 800cb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800cb32:	e001      	b.n	800cb38 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cb34:	2300      	movs	r3, #0
 800cb36:	637b      	str	r3, [r7, #52]	; 0x34
 800cb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3738      	adds	r7, #56	; 0x38
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08e      	sub	sp, #56	; 0x38
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10b      	bne.n	800cb78 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb64:	b672      	cpsid	i
 800cb66:	f383 8811 	msr	BASEPRI, r3
 800cb6a:	f3bf 8f6f 	isb	sy
 800cb6e:	f3bf 8f4f 	dsb	sy
 800cb72:	b662      	cpsie	i
 800cb74:	623b      	str	r3, [r7, #32]
 800cb76:	e7fe      	b.n	800cb76 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d00b      	beq.n	800cb98 <xQueueGiveFromISR+0x4c>
 800cb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb84:	b672      	cpsid	i
 800cb86:	f383 8811 	msr	BASEPRI, r3
 800cb8a:	f3bf 8f6f 	isb	sy
 800cb8e:	f3bf 8f4f 	dsb	sy
 800cb92:	b662      	cpsie	i
 800cb94:	61fb      	str	r3, [r7, #28]
 800cb96:	e7fe      	b.n	800cb96 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d103      	bne.n	800cba8 <xQueueGiveFromISR+0x5c>
 800cba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d101      	bne.n	800cbac <xQueueGiveFromISR+0x60>
 800cba8:	2301      	movs	r3, #1
 800cbaa:	e000      	b.n	800cbae <xQueueGiveFromISR+0x62>
 800cbac:	2300      	movs	r3, #0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d10b      	bne.n	800cbca <xQueueGiveFromISR+0x7e>
 800cbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb6:	b672      	cpsid	i
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	b662      	cpsie	i
 800cbc6:	61bb      	str	r3, [r7, #24]
 800cbc8:	e7fe      	b.n	800cbc8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cbca:	f001 fe3d 	bl	800e848 <vPortValidateInterruptPriority>
	__asm volatile
 800cbce:	f3ef 8211 	mrs	r2, BASEPRI
 800cbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd6:	b672      	cpsid	i
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	b662      	cpsie	i
 800cbe6:	617a      	str	r2, [r7, #20]
 800cbe8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cbea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cbec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbf2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d22b      	bcs.n	800cc56 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0a:	1c5a      	adds	r2, r3, #1
 800cc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc18:	d112      	bne.n	800cc40 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d016      	beq.n	800cc50 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc24:	3324      	adds	r3, #36	; 0x24
 800cc26:	4618      	mov	r0, r3
 800cc28:	f001 f82a 	bl	800dc80 <xTaskRemoveFromEventList>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00e      	beq.n	800cc50 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00b      	beq.n	800cc50 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	601a      	str	r2, [r3, #0]
 800cc3e:	e007      	b.n	800cc50 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc44:	3301      	adds	r3, #1
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	b25a      	sxtb	r2, r3
 800cc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cc50:	2301      	movs	r3, #1
 800cc52:	637b      	str	r3, [r7, #52]	; 0x34
 800cc54:	e001      	b.n	800cc5a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cc56:	2300      	movs	r3, #0
 800cc58:	637b      	str	r3, [r7, #52]	; 0x34
 800cc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3738      	adds	r7, #56	; 0x38
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b08c      	sub	sp, #48	; 0x30
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	60b9      	str	r1, [r7, #8]
 800cc7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d10b      	bne.n	800cca2 <xQueueReceive+0x32>
	__asm volatile
 800cc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8e:	b672      	cpsid	i
 800cc90:	f383 8811 	msr	BASEPRI, r3
 800cc94:	f3bf 8f6f 	isb	sy
 800cc98:	f3bf 8f4f 	dsb	sy
 800cc9c:	b662      	cpsie	i
 800cc9e:	623b      	str	r3, [r7, #32]
 800cca0:	e7fe      	b.n	800cca0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d103      	bne.n	800ccb0 <xQueueReceive+0x40>
 800cca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d101      	bne.n	800ccb4 <xQueueReceive+0x44>
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	e000      	b.n	800ccb6 <xQueueReceive+0x46>
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d10b      	bne.n	800ccd2 <xQueueReceive+0x62>
 800ccba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbe:	b672      	cpsid	i
 800ccc0:	f383 8811 	msr	BASEPRI, r3
 800ccc4:	f3bf 8f6f 	isb	sy
 800ccc8:	f3bf 8f4f 	dsb	sy
 800cccc:	b662      	cpsie	i
 800ccce:	61fb      	str	r3, [r7, #28]
 800ccd0:	e7fe      	b.n	800ccd0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ccd2:	f001 f995 	bl	800e000 <xTaskGetSchedulerState>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d102      	bne.n	800cce2 <xQueueReceive+0x72>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d101      	bne.n	800cce6 <xQueueReceive+0x76>
 800cce2:	2301      	movs	r3, #1
 800cce4:	e000      	b.n	800cce8 <xQueueReceive+0x78>
 800cce6:	2300      	movs	r3, #0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d10b      	bne.n	800cd04 <xQueueReceive+0x94>
 800ccec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf0:	b672      	cpsid	i
 800ccf2:	f383 8811 	msr	BASEPRI, r3
 800ccf6:	f3bf 8f6f 	isb	sy
 800ccfa:	f3bf 8f4f 	dsb	sy
 800ccfe:	b662      	cpsie	i
 800cd00:	61bb      	str	r3, [r7, #24]
 800cd02:	e7fe      	b.n	800cd02 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd04:	f001 fcc0 	bl	800e688 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd0c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d01f      	beq.n	800cd54 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd14:	68b9      	ldr	r1, [r7, #8]
 800cd16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd18:	f000 faa1 	bl	800d25e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1e:	1e5a      	subs	r2, r3, #1
 800cd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd22:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd26:	691b      	ldr	r3, [r3, #16]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d00f      	beq.n	800cd4c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2e:	3310      	adds	r3, #16
 800cd30:	4618      	mov	r0, r3
 800cd32:	f000 ffa5 	bl	800dc80 <xTaskRemoveFromEventList>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d007      	beq.n	800cd4c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cd3c:	4b3c      	ldr	r3, [pc, #240]	; (800ce30 <xQueueReceive+0x1c0>)
 800cd3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd42:	601a      	str	r2, [r3, #0]
 800cd44:	f3bf 8f4f 	dsb	sy
 800cd48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cd4c:	f001 fcce 	bl	800e6ec <vPortExitCritical>
				return pdPASS;
 800cd50:	2301      	movs	r3, #1
 800cd52:	e069      	b.n	800ce28 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d103      	bne.n	800cd62 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd5a:	f001 fcc7 	bl	800e6ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	e062      	b.n	800ce28 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d106      	bne.n	800cd76 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd68:	f107 0310 	add.w	r3, r7, #16
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f000 ffeb 	bl	800dd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd72:	2301      	movs	r3, #1
 800cd74:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd76:	f001 fcb9 	bl	800e6ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd7a:	f000 fd51 	bl	800d820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd7e:	f001 fc83 	bl	800e688 <vPortEnterCritical>
 800cd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd88:	b25b      	sxtb	r3, r3
 800cd8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd8e:	d103      	bne.n	800cd98 <xQueueReceive+0x128>
 800cd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd92:	2200      	movs	r2, #0
 800cd94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd9e:	b25b      	sxtb	r3, r3
 800cda0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda4:	d103      	bne.n	800cdae <xQueueReceive+0x13e>
 800cda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda8:	2200      	movs	r2, #0
 800cdaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdae:	f001 fc9d 	bl	800e6ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdb2:	1d3a      	adds	r2, r7, #4
 800cdb4:	f107 0310 	add.w	r3, r7, #16
 800cdb8:	4611      	mov	r1, r2
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f000 ffda 	bl	800dd74 <xTaskCheckForTimeOut>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d123      	bne.n	800ce0e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cdc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdc8:	f000 fac1 	bl	800d34e <prvIsQueueEmpty>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d017      	beq.n	800ce02 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd4:	3324      	adds	r3, #36	; 0x24
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	4611      	mov	r1, r2
 800cdda:	4618      	mov	r0, r3
 800cddc:	f000 ff2a 	bl	800dc34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cde0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cde2:	f000 fa62 	bl	800d2aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cde6:	f000 fd29 	bl	800d83c <xTaskResumeAll>
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d189      	bne.n	800cd04 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cdf0:	4b0f      	ldr	r3, [pc, #60]	; (800ce30 <xQueueReceive+0x1c0>)
 800cdf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdf6:	601a      	str	r2, [r3, #0]
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	f3bf 8f6f 	isb	sy
 800ce00:	e780      	b.n	800cd04 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ce02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce04:	f000 fa51 	bl	800d2aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce08:	f000 fd18 	bl	800d83c <xTaskResumeAll>
 800ce0c:	e77a      	b.n	800cd04 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ce0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce10:	f000 fa4b 	bl	800d2aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce14:	f000 fd12 	bl	800d83c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce1a:	f000 fa98 	bl	800d34e <prvIsQueueEmpty>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f43f af6f 	beq.w	800cd04 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3730      	adds	r7, #48	; 0x30
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	e000ed04 	.word	0xe000ed04

0800ce34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b08e      	sub	sp, #56	; 0x38
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ce46:	2300      	movs	r3, #0
 800ce48:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d10b      	bne.n	800ce68 <xQueueSemaphoreTake+0x34>
 800ce50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce54:	b672      	cpsid	i
 800ce56:	f383 8811 	msr	BASEPRI, r3
 800ce5a:	f3bf 8f6f 	isb	sy
 800ce5e:	f3bf 8f4f 	dsb	sy
 800ce62:	b662      	cpsie	i
 800ce64:	623b      	str	r3, [r7, #32]
 800ce66:	e7fe      	b.n	800ce66 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00b      	beq.n	800ce88 <xQueueSemaphoreTake+0x54>
 800ce70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce74:	b672      	cpsid	i
 800ce76:	f383 8811 	msr	BASEPRI, r3
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	b662      	cpsie	i
 800ce84:	61fb      	str	r3, [r7, #28]
 800ce86:	e7fe      	b.n	800ce86 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce88:	f001 f8ba 	bl	800e000 <xTaskGetSchedulerState>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d102      	bne.n	800ce98 <xQueueSemaphoreTake+0x64>
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d101      	bne.n	800ce9c <xQueueSemaphoreTake+0x68>
 800ce98:	2301      	movs	r3, #1
 800ce9a:	e000      	b.n	800ce9e <xQueueSemaphoreTake+0x6a>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d10b      	bne.n	800ceba <xQueueSemaphoreTake+0x86>
 800cea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea6:	b672      	cpsid	i
 800cea8:	f383 8811 	msr	BASEPRI, r3
 800ceac:	f3bf 8f6f 	isb	sy
 800ceb0:	f3bf 8f4f 	dsb	sy
 800ceb4:	b662      	cpsie	i
 800ceb6:	61bb      	str	r3, [r7, #24]
 800ceb8:	e7fe      	b.n	800ceb8 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ceba:	f001 fbe5 	bl	800e688 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cec2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d024      	beq.n	800cf14 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ceca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cecc:	1e5a      	subs	r2, r3, #1
 800cece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ced2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d104      	bne.n	800cee4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ceda:	f001 fa53 	bl	800e384 <pvTaskIncrementMutexHeldCount>
 800cede:	4602      	mov	r2, r0
 800cee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee6:	691b      	ldr	r3, [r3, #16]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00f      	beq.n	800cf0c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceee:	3310      	adds	r3, #16
 800cef0:	4618      	mov	r0, r3
 800cef2:	f000 fec5 	bl	800dc80 <xTaskRemoveFromEventList>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d007      	beq.n	800cf0c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cefc:	4b54      	ldr	r3, [pc, #336]	; (800d050 <xQueueSemaphoreTake+0x21c>)
 800cefe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf02:	601a      	str	r2, [r3, #0]
 800cf04:	f3bf 8f4f 	dsb	sy
 800cf08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf0c:	f001 fbee 	bl	800e6ec <vPortExitCritical>
				return pdPASS;
 800cf10:	2301      	movs	r3, #1
 800cf12:	e098      	b.n	800d046 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d112      	bne.n	800cf40 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00b      	beq.n	800cf38 <xQueueSemaphoreTake+0x104>
 800cf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf24:	b672      	cpsid	i
 800cf26:	f383 8811 	msr	BASEPRI, r3
 800cf2a:	f3bf 8f6f 	isb	sy
 800cf2e:	f3bf 8f4f 	dsb	sy
 800cf32:	b662      	cpsie	i
 800cf34:	617b      	str	r3, [r7, #20]
 800cf36:	e7fe      	b.n	800cf36 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cf38:	f001 fbd8 	bl	800e6ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	e082      	b.n	800d046 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d106      	bne.n	800cf54 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf46:	f107 030c 	add.w	r3, r7, #12
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f000 fefc 	bl	800dd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf50:	2301      	movs	r3, #1
 800cf52:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf54:	f001 fbca 	bl	800e6ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf58:	f000 fc62 	bl	800d820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf5c:	f001 fb94 	bl	800e688 <vPortEnterCritical>
 800cf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf66:	b25b      	sxtb	r3, r3
 800cf68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf6c:	d103      	bne.n	800cf76 <xQueueSemaphoreTake+0x142>
 800cf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf70:	2200      	movs	r2, #0
 800cf72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf7c:	b25b      	sxtb	r3, r3
 800cf7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf82:	d103      	bne.n	800cf8c <xQueueSemaphoreTake+0x158>
 800cf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf86:	2200      	movs	r2, #0
 800cf88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf8c:	f001 fbae 	bl	800e6ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf90:	463a      	mov	r2, r7
 800cf92:	f107 030c 	add.w	r3, r7, #12
 800cf96:	4611      	mov	r1, r2
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f000 feeb 	bl	800dd74 <xTaskCheckForTimeOut>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d132      	bne.n	800d00a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfa6:	f000 f9d2 	bl	800d34e <prvIsQueueEmpty>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d026      	beq.n	800cffe <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d109      	bne.n	800cfcc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800cfb8:	f001 fb66 	bl	800e688 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cfbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfbe:	689b      	ldr	r3, [r3, #8]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f001 f83b 	bl	800e03c <xTaskPriorityInherit>
 800cfc6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cfc8:	f001 fb90 	bl	800e6ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfce:	3324      	adds	r3, #36	; 0x24
 800cfd0:	683a      	ldr	r2, [r7, #0]
 800cfd2:	4611      	mov	r1, r2
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f000 fe2d 	bl	800dc34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfdc:	f000 f965 	bl	800d2aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cfe0:	f000 fc2c 	bl	800d83c <xTaskResumeAll>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f47f af67 	bne.w	800ceba <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800cfec:	4b18      	ldr	r3, [pc, #96]	; (800d050 <xQueueSemaphoreTake+0x21c>)
 800cfee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cff2:	601a      	str	r2, [r3, #0]
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	f3bf 8f6f 	isb	sy
 800cffc:	e75d      	b.n	800ceba <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cffe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d000:	f000 f953 	bl	800d2aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d004:	f000 fc1a 	bl	800d83c <xTaskResumeAll>
 800d008:	e757      	b.n	800ceba <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d00a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d00c:	f000 f94d 	bl	800d2aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d010:	f000 fc14 	bl	800d83c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d016:	f000 f99a 	bl	800d34e <prvIsQueueEmpty>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f43f af4c 	beq.w	800ceba <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d024:	2b00      	cmp	r3, #0
 800d026:	d00d      	beq.n	800d044 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d028:	f001 fb2e 	bl	800e688 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d02c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d02e:	f000 f894 	bl	800d15a <prvGetDisinheritPriorityAfterTimeout>
 800d032:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d03a:	4618      	mov	r0, r3
 800d03c:	f001 f906 	bl	800e24c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d040:	f001 fb54 	bl	800e6ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d044:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d046:	4618      	mov	r0, r3
 800d048:	3738      	adds	r7, #56	; 0x38
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	e000ed04 	.word	0xe000ed04

0800d054 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b08e      	sub	sp, #56	; 0x38
 800d058:	af00      	add	r7, sp, #0
 800d05a:	60f8      	str	r0, [r7, #12]
 800d05c:	60b9      	str	r1, [r7, #8]
 800d05e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d066:	2b00      	cmp	r3, #0
 800d068:	d10b      	bne.n	800d082 <xQueueReceiveFromISR+0x2e>
 800d06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06e:	b672      	cpsid	i
 800d070:	f383 8811 	msr	BASEPRI, r3
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	b662      	cpsie	i
 800d07e:	623b      	str	r3, [r7, #32]
 800d080:	e7fe      	b.n	800d080 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d103      	bne.n	800d090 <xQueueReceiveFromISR+0x3c>
 800d088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d101      	bne.n	800d094 <xQueueReceiveFromISR+0x40>
 800d090:	2301      	movs	r3, #1
 800d092:	e000      	b.n	800d096 <xQueueReceiveFromISR+0x42>
 800d094:	2300      	movs	r3, #0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d10b      	bne.n	800d0b2 <xQueueReceiveFromISR+0x5e>
 800d09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d09e:	b672      	cpsid	i
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	b662      	cpsie	i
 800d0ae:	61fb      	str	r3, [r7, #28]
 800d0b0:	e7fe      	b.n	800d0b0 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0b2:	f001 fbc9 	bl	800e848 <vPortValidateInterruptPriority>
	__asm volatile
 800d0b6:	f3ef 8211 	mrs	r2, BASEPRI
 800d0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0be:	b672      	cpsid	i
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	b662      	cpsie	i
 800d0ce:	61ba      	str	r2, [r7, #24]
 800d0d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d0d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d02f      	beq.n	800d142 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d0ec:	68b9      	ldr	r1, [r7, #8]
 800d0ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0f0:	f000 f8b5 	bl	800d25e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f6:	1e5a      	subs	r2, r3, #1
 800d0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d0fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d104:	d112      	bne.n	800d12c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d108:	691b      	ldr	r3, [r3, #16]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d016      	beq.n	800d13c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d110:	3310      	adds	r3, #16
 800d112:	4618      	mov	r0, r3
 800d114:	f000 fdb4 	bl	800dc80 <xTaskRemoveFromEventList>
 800d118:	4603      	mov	r3, r0
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d00e      	beq.n	800d13c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00b      	beq.n	800d13c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2201      	movs	r2, #1
 800d128:	601a      	str	r2, [r3, #0]
 800d12a:	e007      	b.n	800d13c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d12c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d130:	3301      	adds	r3, #1
 800d132:	b2db      	uxtb	r3, r3
 800d134:	b25a      	sxtb	r2, r3
 800d136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d13c:	2301      	movs	r3, #1
 800d13e:	637b      	str	r3, [r7, #52]	; 0x34
 800d140:	e001      	b.n	800d146 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d142:	2300      	movs	r3, #0
 800d144:	637b      	str	r3, [r7, #52]	; 0x34
 800d146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d148:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d152:	4618      	mov	r0, r3
 800d154:	3738      	adds	r7, #56	; 0x38
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d15a:	b480      	push	{r7}
 800d15c:	b085      	sub	sp, #20
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d166:	2b00      	cmp	r3, #0
 800d168:	d006      	beq.n	800d178 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f1c3 0307 	rsb	r3, r3, #7
 800d174:	60fb      	str	r3, [r7, #12]
 800d176:	e001      	b.n	800d17c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d178:	2300      	movs	r3, #0
 800d17a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d17c:	68fb      	ldr	r3, [r7, #12]
	}
 800d17e:	4618      	mov	r0, r3
 800d180:	3714      	adds	r7, #20
 800d182:	46bd      	mov	sp, r7
 800d184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d188:	4770      	bx	lr

0800d18a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b086      	sub	sp, #24
 800d18e:	af00      	add	r7, sp, #0
 800d190:	60f8      	str	r0, [r7, #12]
 800d192:	60b9      	str	r1, [r7, #8]
 800d194:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d196:	2300      	movs	r3, #0
 800d198:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10d      	bne.n	800d1c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d14d      	bne.n	800d24c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f000 ffc1 	bl	800e13c <xTaskPriorityDisinherit>
 800d1ba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	609a      	str	r2, [r3, #8]
 800d1c2:	e043      	b.n	800d24c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d119      	bne.n	800d1fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6858      	ldr	r0, [r3, #4]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	68b9      	ldr	r1, [r7, #8]
 800d1d6:	f019 feb7 	bl	8026f48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	685a      	ldr	r2, [r3, #4]
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1e2:	441a      	add	r2, r3
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	685a      	ldr	r2, [r3, #4]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	689b      	ldr	r3, [r3, #8]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d32b      	bcc.n	800d24c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	605a      	str	r2, [r3, #4]
 800d1fc:	e026      	b.n	800d24c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	68d8      	ldr	r0, [r3, #12]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d206:	461a      	mov	r2, r3
 800d208:	68b9      	ldr	r1, [r7, #8]
 800d20a:	f019 fe9d 	bl	8026f48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	68da      	ldr	r2, [r3, #12]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d216:	425b      	negs	r3, r3
 800d218:	441a      	add	r2, r3
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	68da      	ldr	r2, [r3, #12]
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	429a      	cmp	r2, r3
 800d228:	d207      	bcs.n	800d23a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	689a      	ldr	r2, [r3, #8]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d232:	425b      	negs	r3, r3
 800d234:	441a      	add	r2, r3
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b02      	cmp	r3, #2
 800d23e:	d105      	bne.n	800d24c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d002      	beq.n	800d24c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	3b01      	subs	r3, #1
 800d24a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	1c5a      	adds	r2, r3, #1
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d254:	697b      	ldr	r3, [r7, #20]
}
 800d256:	4618      	mov	r0, r3
 800d258:	3718      	adds	r7, #24
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d25e:	b580      	push	{r7, lr}
 800d260:	b082      	sub	sp, #8
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
 800d266:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d018      	beq.n	800d2a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	68da      	ldr	r2, [r3, #12]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d278:	441a      	add	r2, r3
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	68da      	ldr	r2, [r3, #12]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	429a      	cmp	r2, r3
 800d288:	d303      	bcc.n	800d292 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	68d9      	ldr	r1, [r3, #12]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d29a:	461a      	mov	r2, r3
 800d29c:	6838      	ldr	r0, [r7, #0]
 800d29e:	f019 fe53 	bl	8026f48 <memcpy>
	}
}
 800d2a2:	bf00      	nop
 800d2a4:	3708      	adds	r7, #8
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b084      	sub	sp, #16
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d2b2:	f001 f9e9 	bl	800e688 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d2be:	e011      	b.n	800d2e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d012      	beq.n	800d2ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	3324      	adds	r3, #36	; 0x24
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f000 fcd7 	bl	800dc80 <xTaskRemoveFromEventList>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d001      	beq.n	800d2dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d2d8:	f000 fdb0 	bl	800de3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d2dc:	7bfb      	ldrb	r3, [r7, #15]
 800d2de:	3b01      	subs	r3, #1
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d2e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	dce9      	bgt.n	800d2c0 <prvUnlockQueue+0x16>
 800d2ec:	e000      	b.n	800d2f0 <prvUnlockQueue+0x46>
					break;
 800d2ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	22ff      	movs	r2, #255	; 0xff
 800d2f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d2f8:	f001 f9f8 	bl	800e6ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d2fc:	f001 f9c4 	bl	800e688 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d306:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d308:	e011      	b.n	800d32e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	691b      	ldr	r3, [r3, #16]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d012      	beq.n	800d338 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	3310      	adds	r3, #16
 800d316:	4618      	mov	r0, r3
 800d318:	f000 fcb2 	bl	800dc80 <xTaskRemoveFromEventList>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d001      	beq.n	800d326 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d322:	f000 fd8b 	bl	800de3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d326:	7bbb      	ldrb	r3, [r7, #14]
 800d328:	3b01      	subs	r3, #1
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d32e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d332:	2b00      	cmp	r3, #0
 800d334:	dce9      	bgt.n	800d30a <prvUnlockQueue+0x60>
 800d336:	e000      	b.n	800d33a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d338:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	22ff      	movs	r2, #255	; 0xff
 800d33e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d342:	f001 f9d3 	bl	800e6ec <vPortExitCritical>
}
 800d346:	bf00      	nop
 800d348:	3710      	adds	r7, #16
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d34e:	b580      	push	{r7, lr}
 800d350:	b084      	sub	sp, #16
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d356:	f001 f997 	bl	800e688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d102      	bne.n	800d368 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d362:	2301      	movs	r3, #1
 800d364:	60fb      	str	r3, [r7, #12]
 800d366:	e001      	b.n	800d36c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d368:	2300      	movs	r3, #0
 800d36a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d36c:	f001 f9be 	bl	800e6ec <vPortExitCritical>

	return xReturn;
 800d370:	68fb      	ldr	r3, [r7, #12]
}
 800d372:	4618      	mov	r0, r3
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b084      	sub	sp, #16
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d382:	f001 f981 	bl	800e688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d38e:	429a      	cmp	r2, r3
 800d390:	d102      	bne.n	800d398 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d392:	2301      	movs	r3, #1
 800d394:	60fb      	str	r3, [r7, #12]
 800d396:	e001      	b.n	800d39c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d398:	2300      	movs	r3, #0
 800d39a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d39c:	f001 f9a6 	bl	800e6ec <vPortExitCritical>

	return xReturn;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3710      	adds	r7, #16
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}

0800d3aa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d3aa:	b580      	push	{r7, lr}
 800d3ac:	b08e      	sub	sp, #56	; 0x38
 800d3ae:	af04      	add	r7, sp, #16
 800d3b0:	60f8      	str	r0, [r7, #12]
 800d3b2:	60b9      	str	r1, [r7, #8]
 800d3b4:	607a      	str	r2, [r7, #4]
 800d3b6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d10b      	bne.n	800d3d6 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c2:	b672      	cpsid	i
 800d3c4:	f383 8811 	msr	BASEPRI, r3
 800d3c8:	f3bf 8f6f 	isb	sy
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	b662      	cpsie	i
 800d3d2:	623b      	str	r3, [r7, #32]
 800d3d4:	e7fe      	b.n	800d3d4 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800d3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d10b      	bne.n	800d3f4 <xTaskCreateStatic+0x4a>
 800d3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e0:	b672      	cpsid	i
 800d3e2:	f383 8811 	msr	BASEPRI, r3
 800d3e6:	f3bf 8f6f 	isb	sy
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	b662      	cpsie	i
 800d3f0:	61fb      	str	r3, [r7, #28]
 800d3f2:	e7fe      	b.n	800d3f2 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d3f4:	2358      	movs	r3, #88	; 0x58
 800d3f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	2b58      	cmp	r3, #88	; 0x58
 800d3fc:	d00b      	beq.n	800d416 <xTaskCreateStatic+0x6c>
 800d3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d402:	b672      	cpsid	i
 800d404:	f383 8811 	msr	BASEPRI, r3
 800d408:	f3bf 8f6f 	isb	sy
 800d40c:	f3bf 8f4f 	dsb	sy
 800d410:	b662      	cpsie	i
 800d412:	61bb      	str	r3, [r7, #24]
 800d414:	e7fe      	b.n	800d414 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d416:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d01e      	beq.n	800d45c <xTaskCreateStatic+0xb2>
 800d41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d420:	2b00      	cmp	r3, #0
 800d422:	d01b      	beq.n	800d45c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d426:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d42c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d430:	2202      	movs	r2, #2
 800d432:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d436:	2300      	movs	r3, #0
 800d438:	9303      	str	r3, [sp, #12]
 800d43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43c:	9302      	str	r3, [sp, #8]
 800d43e:	f107 0314 	add.w	r3, r7, #20
 800d442:	9301      	str	r3, [sp, #4]
 800d444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	68b9      	ldr	r1, [r7, #8]
 800d44e:	68f8      	ldr	r0, [r7, #12]
 800d450:	f000 f850 	bl	800d4f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d454:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d456:	f000 f8e1 	bl	800d61c <prvAddNewTaskToReadyList>
 800d45a:	e001      	b.n	800d460 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d45c:	2300      	movs	r3, #0
 800d45e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d460:	697b      	ldr	r3, [r7, #20]
	}
 800d462:	4618      	mov	r0, r3
 800d464:	3728      	adds	r7, #40	; 0x28
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}

0800d46a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b08c      	sub	sp, #48	; 0x30
 800d46e:	af04      	add	r7, sp, #16
 800d470:	60f8      	str	r0, [r7, #12]
 800d472:	60b9      	str	r1, [r7, #8]
 800d474:	603b      	str	r3, [r7, #0]
 800d476:	4613      	mov	r3, r2
 800d478:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d47a:	88fb      	ldrh	r3, [r7, #6]
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	4618      	mov	r0, r3
 800d480:	f001 fa24 	bl	800e8cc <pvPortMalloc>
 800d484:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00e      	beq.n	800d4aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d48c:	2058      	movs	r0, #88	; 0x58
 800d48e:	f001 fa1d 	bl	800e8cc <pvPortMalloc>
 800d492:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d003      	beq.n	800d4a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d49a:	69fb      	ldr	r3, [r7, #28]
 800d49c:	697a      	ldr	r2, [r7, #20]
 800d49e:	631a      	str	r2, [r3, #48]	; 0x30
 800d4a0:	e005      	b.n	800d4ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d4a2:	6978      	ldr	r0, [r7, #20]
 800d4a4:	f001 fade 	bl	800ea64 <vPortFree>
 800d4a8:	e001      	b.n	800d4ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d017      	beq.n	800d4e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d4b4:	69fb      	ldr	r3, [r7, #28]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d4bc:	88fa      	ldrh	r2, [r7, #6]
 800d4be:	2300      	movs	r3, #0
 800d4c0:	9303      	str	r3, [sp, #12]
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	9302      	str	r3, [sp, #8]
 800d4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c8:	9301      	str	r3, [sp, #4]
 800d4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4cc:	9300      	str	r3, [sp, #0]
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	68b9      	ldr	r1, [r7, #8]
 800d4d2:	68f8      	ldr	r0, [r7, #12]
 800d4d4:	f000 f80e 	bl	800d4f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d4d8:	69f8      	ldr	r0, [r7, #28]
 800d4da:	f000 f89f 	bl	800d61c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	61bb      	str	r3, [r7, #24]
 800d4e2:	e002      	b.n	800d4ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d4e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d4e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d4ea:	69bb      	ldr	r3, [r7, #24]
	}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3720      	adds	r7, #32
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b088      	sub	sp, #32
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
 800d500:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d504:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	009b      	lsls	r3, r3, #2
 800d50a:	461a      	mov	r2, r3
 800d50c:	21a5      	movs	r1, #165	; 0xa5
 800d50e:	f019 fd26 	bl	8026f5e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d516:	6879      	ldr	r1, [r7, #4]
 800d518:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d51c:	440b      	add	r3, r1
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	4413      	add	r3, r2
 800d522:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	f023 0307 	bic.w	r3, r3, #7
 800d52a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d52c:	69bb      	ldr	r3, [r7, #24]
 800d52e:	f003 0307 	and.w	r3, r3, #7
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00b      	beq.n	800d54e <prvInitialiseNewTask+0x5a>
 800d536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53a:	b672      	cpsid	i
 800d53c:	f383 8811 	msr	BASEPRI, r3
 800d540:	f3bf 8f6f 	isb	sy
 800d544:	f3bf 8f4f 	dsb	sy
 800d548:	b662      	cpsie	i
 800d54a:	617b      	str	r3, [r7, #20]
 800d54c:	e7fe      	b.n	800d54c <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d01f      	beq.n	800d594 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d554:	2300      	movs	r3, #0
 800d556:	61fb      	str	r3, [r7, #28]
 800d558:	e012      	b.n	800d580 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d55a:	68ba      	ldr	r2, [r7, #8]
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	4413      	add	r3, r2
 800d560:	7819      	ldrb	r1, [r3, #0]
 800d562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d564:	69fb      	ldr	r3, [r7, #28]
 800d566:	4413      	add	r3, r2
 800d568:	3334      	adds	r3, #52	; 0x34
 800d56a:	460a      	mov	r2, r1
 800d56c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d56e:	68ba      	ldr	r2, [r7, #8]
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	4413      	add	r3, r2
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d006      	beq.n	800d588 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	3301      	adds	r3, #1
 800d57e:	61fb      	str	r3, [r7, #28]
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	2b0f      	cmp	r3, #15
 800d584:	d9e9      	bls.n	800d55a <prvInitialiseNewTask+0x66>
 800d586:	e000      	b.n	800d58a <prvInitialiseNewTask+0x96>
			{
				break;
 800d588:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58c:	2200      	movs	r2, #0
 800d58e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d592:	e003      	b.n	800d59c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d596:	2200      	movs	r2, #0
 800d598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59e:	2b06      	cmp	r3, #6
 800d5a0:	d901      	bls.n	800d5a6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d5a2:	2306      	movs	r3, #6
 800d5a4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5b0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ba:	3304      	adds	r3, #4
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7fe fedd 	bl	800c37c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c4:	3318      	adds	r3, #24
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fe fed8 	bl	800c37c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d4:	f1c3 0207 	rsb	r2, r3, #7
 800d5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d5f6:	683a      	ldr	r2, [r7, #0]
 800d5f8:	68f9      	ldr	r1, [r7, #12]
 800d5fa:	69b8      	ldr	r0, [r7, #24]
 800d5fc:	f000 ff3c 	bl	800e478 <pxPortInitialiseStack>
 800d600:	4602      	mov	r2, r0
 800d602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d604:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d002      	beq.n	800d612 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d60e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d610:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d612:	bf00      	nop
 800d614:	3720      	adds	r7, #32
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
	...

0800d61c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d624:	f001 f830 	bl	800e688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d628:	4b2a      	ldr	r3, [pc, #168]	; (800d6d4 <prvAddNewTaskToReadyList+0xb8>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	3301      	adds	r3, #1
 800d62e:	4a29      	ldr	r2, [pc, #164]	; (800d6d4 <prvAddNewTaskToReadyList+0xb8>)
 800d630:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d632:	4b29      	ldr	r3, [pc, #164]	; (800d6d8 <prvAddNewTaskToReadyList+0xbc>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d109      	bne.n	800d64e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d63a:	4a27      	ldr	r2, [pc, #156]	; (800d6d8 <prvAddNewTaskToReadyList+0xbc>)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d640:	4b24      	ldr	r3, [pc, #144]	; (800d6d4 <prvAddNewTaskToReadyList+0xb8>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2b01      	cmp	r3, #1
 800d646:	d110      	bne.n	800d66a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d648:	f000 fc1e 	bl	800de88 <prvInitialiseTaskLists>
 800d64c:	e00d      	b.n	800d66a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d64e:	4b23      	ldr	r3, [pc, #140]	; (800d6dc <prvAddNewTaskToReadyList+0xc0>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d109      	bne.n	800d66a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d656:	4b20      	ldr	r3, [pc, #128]	; (800d6d8 <prvAddNewTaskToReadyList+0xbc>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d660:	429a      	cmp	r2, r3
 800d662:	d802      	bhi.n	800d66a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d664:	4a1c      	ldr	r2, [pc, #112]	; (800d6d8 <prvAddNewTaskToReadyList+0xbc>)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d66a:	4b1d      	ldr	r3, [pc, #116]	; (800d6e0 <prvAddNewTaskToReadyList+0xc4>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	3301      	adds	r3, #1
 800d670:	4a1b      	ldr	r2, [pc, #108]	; (800d6e0 <prvAddNewTaskToReadyList+0xc4>)
 800d672:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d678:	2201      	movs	r2, #1
 800d67a:	409a      	lsls	r2, r3
 800d67c:	4b19      	ldr	r3, [pc, #100]	; (800d6e4 <prvAddNewTaskToReadyList+0xc8>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4313      	orrs	r3, r2
 800d682:	4a18      	ldr	r2, [pc, #96]	; (800d6e4 <prvAddNewTaskToReadyList+0xc8>)
 800d684:	6013      	str	r3, [r2, #0]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68a:	4613      	mov	r3, r2
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	4413      	add	r3, r2
 800d690:	009b      	lsls	r3, r3, #2
 800d692:	4a15      	ldr	r2, [pc, #84]	; (800d6e8 <prvAddNewTaskToReadyList+0xcc>)
 800d694:	441a      	add	r2, r3
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	3304      	adds	r3, #4
 800d69a:	4619      	mov	r1, r3
 800d69c:	4610      	mov	r0, r2
 800d69e:	f7fe fe7a 	bl	800c396 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d6a2:	f001 f823 	bl	800e6ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d6a6:	4b0d      	ldr	r3, [pc, #52]	; (800d6dc <prvAddNewTaskToReadyList+0xc0>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00e      	beq.n	800d6cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d6ae:	4b0a      	ldr	r3, [pc, #40]	; (800d6d8 <prvAddNewTaskToReadyList+0xbc>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d207      	bcs.n	800d6cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d6bc:	4b0b      	ldr	r3, [pc, #44]	; (800d6ec <prvAddNewTaskToReadyList+0xd0>)
 800d6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6c2:	601a      	str	r2, [r3, #0]
 800d6c4:	f3bf 8f4f 	dsb	sy
 800d6c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d6cc:	bf00      	nop
 800d6ce:	3708      	adds	r7, #8
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}
 800d6d4:	200004a4 	.word	0x200004a4
 800d6d8:	200003a4 	.word	0x200003a4
 800d6dc:	200004b0 	.word	0x200004b0
 800d6e0:	200004c0 	.word	0x200004c0
 800d6e4:	200004ac 	.word	0x200004ac
 800d6e8:	200003a8 	.word	0x200003a8
 800d6ec:	e000ed04 	.word	0xe000ed04

0800d6f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d018      	beq.n	800d734 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d702:	4b14      	ldr	r3, [pc, #80]	; (800d754 <vTaskDelay+0x64>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00b      	beq.n	800d722 <vTaskDelay+0x32>
 800d70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70e:	b672      	cpsid	i
 800d710:	f383 8811 	msr	BASEPRI, r3
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	b662      	cpsie	i
 800d71e:	60bb      	str	r3, [r7, #8]
 800d720:	e7fe      	b.n	800d720 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800d722:	f000 f87d 	bl	800d820 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d726:	2100      	movs	r1, #0
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f000 fe3f 	bl	800e3ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d72e:	f000 f885 	bl	800d83c <xTaskResumeAll>
 800d732:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d107      	bne.n	800d74a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d73a:	4b07      	ldr	r3, [pc, #28]	; (800d758 <vTaskDelay+0x68>)
 800d73c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d740:	601a      	str	r2, [r3, #0]
 800d742:	f3bf 8f4f 	dsb	sy
 800d746:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d74a:	bf00      	nop
 800d74c:	3710      	adds	r7, #16
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	200004cc 	.word	0x200004cc
 800d758:	e000ed04 	.word	0xe000ed04

0800d75c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b08a      	sub	sp, #40	; 0x28
 800d760:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d762:	2300      	movs	r3, #0
 800d764:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d766:	2300      	movs	r3, #0
 800d768:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d76a:	463a      	mov	r2, r7
 800d76c:	1d39      	adds	r1, r7, #4
 800d76e:	f107 0308 	add.w	r3, r7, #8
 800d772:	4618      	mov	r0, r3
 800d774:	f7f3 f912 	bl	800099c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d778:	6839      	ldr	r1, [r7, #0]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	68ba      	ldr	r2, [r7, #8]
 800d77e:	9202      	str	r2, [sp, #8]
 800d780:	9301      	str	r3, [sp, #4]
 800d782:	2300      	movs	r3, #0
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	2300      	movs	r3, #0
 800d788:	460a      	mov	r2, r1
 800d78a:	491f      	ldr	r1, [pc, #124]	; (800d808 <vTaskStartScheduler+0xac>)
 800d78c:	481f      	ldr	r0, [pc, #124]	; (800d80c <vTaskStartScheduler+0xb0>)
 800d78e:	f7ff fe0c 	bl	800d3aa <xTaskCreateStatic>
 800d792:	4602      	mov	r2, r0
 800d794:	4b1e      	ldr	r3, [pc, #120]	; (800d810 <vTaskStartScheduler+0xb4>)
 800d796:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d798:	4b1d      	ldr	r3, [pc, #116]	; (800d810 <vTaskStartScheduler+0xb4>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d002      	beq.n	800d7a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	617b      	str	r3, [r7, #20]
 800d7a4:	e001      	b.n	800d7aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d117      	bne.n	800d7e0 <vTaskStartScheduler+0x84>
 800d7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b4:	b672      	cpsid	i
 800d7b6:	f383 8811 	msr	BASEPRI, r3
 800d7ba:	f3bf 8f6f 	isb	sy
 800d7be:	f3bf 8f4f 	dsb	sy
 800d7c2:	b662      	cpsie	i
 800d7c4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d7c6:	4b13      	ldr	r3, [pc, #76]	; (800d814 <vTaskStartScheduler+0xb8>)
 800d7c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d7cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d7ce:	4b12      	ldr	r3, [pc, #72]	; (800d818 <vTaskStartScheduler+0xbc>)
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d7d4:	4b11      	ldr	r3, [pc, #68]	; (800d81c <vTaskStartScheduler+0xc0>)
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d7da:	f000 fed9 	bl	800e590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d7de:	e00f      	b.n	800d800 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e6:	d10b      	bne.n	800d800 <vTaskStartScheduler+0xa4>
 800d7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ec:	b672      	cpsid	i
 800d7ee:	f383 8811 	msr	BASEPRI, r3
 800d7f2:	f3bf 8f6f 	isb	sy
 800d7f6:	f3bf 8f4f 	dsb	sy
 800d7fa:	b662      	cpsie	i
 800d7fc:	60fb      	str	r3, [r7, #12]
 800d7fe:	e7fe      	b.n	800d7fe <vTaskStartScheduler+0xa2>
}
 800d800:	bf00      	nop
 800d802:	3718      	adds	r7, #24
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	08027ea8 	.word	0x08027ea8
 800d80c:	0800de55 	.word	0x0800de55
 800d810:	200004c8 	.word	0x200004c8
 800d814:	200004c4 	.word	0x200004c4
 800d818:	200004b0 	.word	0x200004b0
 800d81c:	200004a8 	.word	0x200004a8

0800d820 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d820:	b480      	push	{r7}
 800d822:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d824:	4b04      	ldr	r3, [pc, #16]	; (800d838 <vTaskSuspendAll+0x18>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	3301      	adds	r3, #1
 800d82a:	4a03      	ldr	r2, [pc, #12]	; (800d838 <vTaskSuspendAll+0x18>)
 800d82c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d82e:	bf00      	nop
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr
 800d838:	200004cc 	.word	0x200004cc

0800d83c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d842:	2300      	movs	r3, #0
 800d844:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d846:	2300      	movs	r3, #0
 800d848:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d84a:	4b42      	ldr	r3, [pc, #264]	; (800d954 <xTaskResumeAll+0x118>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d10b      	bne.n	800d86a <xTaskResumeAll+0x2e>
 800d852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d856:	b672      	cpsid	i
 800d858:	f383 8811 	msr	BASEPRI, r3
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	b662      	cpsie	i
 800d866:	603b      	str	r3, [r7, #0]
 800d868:	e7fe      	b.n	800d868 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d86a:	f000 ff0d 	bl	800e688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d86e:	4b39      	ldr	r3, [pc, #228]	; (800d954 <xTaskResumeAll+0x118>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	3b01      	subs	r3, #1
 800d874:	4a37      	ldr	r2, [pc, #220]	; (800d954 <xTaskResumeAll+0x118>)
 800d876:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d878:	4b36      	ldr	r3, [pc, #216]	; (800d954 <xTaskResumeAll+0x118>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d161      	bne.n	800d944 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d880:	4b35      	ldr	r3, [pc, #212]	; (800d958 <xTaskResumeAll+0x11c>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d05d      	beq.n	800d944 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d888:	e02e      	b.n	800d8e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d88a:	4b34      	ldr	r3, [pc, #208]	; (800d95c <xTaskResumeAll+0x120>)
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	68db      	ldr	r3, [r3, #12]
 800d890:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	3318      	adds	r3, #24
 800d896:	4618      	mov	r0, r3
 800d898:	f7fe fdda 	bl	800c450 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	3304      	adds	r3, #4
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7fe fdd5 	bl	800c450 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	409a      	lsls	r2, r3
 800d8ae:	4b2c      	ldr	r3, [pc, #176]	; (800d960 <xTaskResumeAll+0x124>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	4a2a      	ldr	r2, [pc, #168]	; (800d960 <xTaskResumeAll+0x124>)
 800d8b6:	6013      	str	r3, [r2, #0]
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8bc:	4613      	mov	r3, r2
 800d8be:	009b      	lsls	r3, r3, #2
 800d8c0:	4413      	add	r3, r2
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	4a27      	ldr	r2, [pc, #156]	; (800d964 <xTaskResumeAll+0x128>)
 800d8c6:	441a      	add	r2, r3
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	3304      	adds	r3, #4
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	4610      	mov	r0, r2
 800d8d0:	f7fe fd61 	bl	800c396 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8d8:	4b23      	ldr	r3, [pc, #140]	; (800d968 <xTaskResumeAll+0x12c>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d302      	bcc.n	800d8e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d8e2:	4b22      	ldr	r3, [pc, #136]	; (800d96c <xTaskResumeAll+0x130>)
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d8e8:	4b1c      	ldr	r3, [pc, #112]	; (800d95c <xTaskResumeAll+0x120>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d1cc      	bne.n	800d88a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d001      	beq.n	800d8fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d8f6:	f000 fb63 	bl	800dfc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d8fa:	4b1d      	ldr	r3, [pc, #116]	; (800d970 <xTaskResumeAll+0x134>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d010      	beq.n	800d928 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d906:	f000 f859 	bl	800d9bc <xTaskIncrementTick>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d002      	beq.n	800d916 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d910:	4b16      	ldr	r3, [pc, #88]	; (800d96c <xTaskResumeAll+0x130>)
 800d912:	2201      	movs	r2, #1
 800d914:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	3b01      	subs	r3, #1
 800d91a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d1f1      	bne.n	800d906 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800d922:	4b13      	ldr	r3, [pc, #76]	; (800d970 <xTaskResumeAll+0x134>)
 800d924:	2200      	movs	r2, #0
 800d926:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d928:	4b10      	ldr	r3, [pc, #64]	; (800d96c <xTaskResumeAll+0x130>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d009      	beq.n	800d944 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d930:	2301      	movs	r3, #1
 800d932:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d934:	4b0f      	ldr	r3, [pc, #60]	; (800d974 <xTaskResumeAll+0x138>)
 800d936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d93a:	601a      	str	r2, [r3, #0]
 800d93c:	f3bf 8f4f 	dsb	sy
 800d940:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d944:	f000 fed2 	bl	800e6ec <vPortExitCritical>

	return xAlreadyYielded;
 800d948:	68bb      	ldr	r3, [r7, #8]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	200004cc 	.word	0x200004cc
 800d958:	200004a4 	.word	0x200004a4
 800d95c:	20000464 	.word	0x20000464
 800d960:	200004ac 	.word	0x200004ac
 800d964:	200003a8 	.word	0x200003a8
 800d968:	200003a4 	.word	0x200003a4
 800d96c:	200004b8 	.word	0x200004b8
 800d970:	200004b4 	.word	0x200004b4
 800d974:	e000ed04 	.word	0xe000ed04

0800d978 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d978:	b480      	push	{r7}
 800d97a:	b083      	sub	sp, #12
 800d97c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d97e:	4b05      	ldr	r3, [pc, #20]	; (800d994 <xTaskGetTickCount+0x1c>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d984:	687b      	ldr	r3, [r7, #4]
}
 800d986:	4618      	mov	r0, r3
 800d988:	370c      	adds	r7, #12
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr
 800d992:	bf00      	nop
 800d994:	200004a8 	.word	0x200004a8

0800d998 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d99e:	f000 ff53 	bl	800e848 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d9a6:	4b04      	ldr	r3, [pc, #16]	; (800d9b8 <xTaskGetTickCountFromISR+0x20>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d9ac:	683b      	ldr	r3, [r7, #0]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3708      	adds	r7, #8
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	200004a8 	.word	0x200004a8

0800d9bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b086      	sub	sp, #24
 800d9c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9c6:	4b4f      	ldr	r3, [pc, #316]	; (800db04 <xTaskIncrementTick+0x148>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	f040 8089 	bne.w	800dae2 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d9d0:	4b4d      	ldr	r3, [pc, #308]	; (800db08 <xTaskIncrementTick+0x14c>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d9d8:	4a4b      	ldr	r2, [pc, #300]	; (800db08 <xTaskIncrementTick+0x14c>)
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d121      	bne.n	800da28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d9e4:	4b49      	ldr	r3, [pc, #292]	; (800db0c <xTaskIncrementTick+0x150>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d00b      	beq.n	800da06 <xTaskIncrementTick+0x4a>
 800d9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f2:	b672      	cpsid	i
 800d9f4:	f383 8811 	msr	BASEPRI, r3
 800d9f8:	f3bf 8f6f 	isb	sy
 800d9fc:	f3bf 8f4f 	dsb	sy
 800da00:	b662      	cpsie	i
 800da02:	603b      	str	r3, [r7, #0]
 800da04:	e7fe      	b.n	800da04 <xTaskIncrementTick+0x48>
 800da06:	4b41      	ldr	r3, [pc, #260]	; (800db0c <xTaskIncrementTick+0x150>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	60fb      	str	r3, [r7, #12]
 800da0c:	4b40      	ldr	r3, [pc, #256]	; (800db10 <xTaskIncrementTick+0x154>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a3e      	ldr	r2, [pc, #248]	; (800db0c <xTaskIncrementTick+0x150>)
 800da12:	6013      	str	r3, [r2, #0]
 800da14:	4a3e      	ldr	r2, [pc, #248]	; (800db10 <xTaskIncrementTick+0x154>)
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	6013      	str	r3, [r2, #0]
 800da1a:	4b3e      	ldr	r3, [pc, #248]	; (800db14 <xTaskIncrementTick+0x158>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	3301      	adds	r3, #1
 800da20:	4a3c      	ldr	r2, [pc, #240]	; (800db14 <xTaskIncrementTick+0x158>)
 800da22:	6013      	str	r3, [r2, #0]
 800da24:	f000 facc 	bl	800dfc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800da28:	4b3b      	ldr	r3, [pc, #236]	; (800db18 <xTaskIncrementTick+0x15c>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	693a      	ldr	r2, [r7, #16]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d348      	bcc.n	800dac4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da32:	4b36      	ldr	r3, [pc, #216]	; (800db0c <xTaskIncrementTick+0x150>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d104      	bne.n	800da46 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da3c:	4b36      	ldr	r3, [pc, #216]	; (800db18 <xTaskIncrementTick+0x15c>)
 800da3e:	f04f 32ff 	mov.w	r2, #4294967295
 800da42:	601a      	str	r2, [r3, #0]
					break;
 800da44:	e03e      	b.n	800dac4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da46:	4b31      	ldr	r3, [pc, #196]	; (800db0c <xTaskIncrementTick+0x150>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	685b      	ldr	r3, [r3, #4]
 800da54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800da56:	693a      	ldr	r2, [r7, #16]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d203      	bcs.n	800da66 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800da5e:	4a2e      	ldr	r2, [pc, #184]	; (800db18 <xTaskIncrementTick+0x15c>)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800da64:	e02e      	b.n	800dac4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	3304      	adds	r3, #4
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7fe fcf0 	bl	800c450 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da74:	2b00      	cmp	r3, #0
 800da76:	d004      	beq.n	800da82 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	3318      	adds	r3, #24
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7fe fce7 	bl	800c450 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da86:	2201      	movs	r2, #1
 800da88:	409a      	lsls	r2, r3
 800da8a:	4b24      	ldr	r3, [pc, #144]	; (800db1c <xTaskIncrementTick+0x160>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4313      	orrs	r3, r2
 800da90:	4a22      	ldr	r2, [pc, #136]	; (800db1c <xTaskIncrementTick+0x160>)
 800da92:	6013      	str	r3, [r2, #0]
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da98:	4613      	mov	r3, r2
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	4413      	add	r3, r2
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	4a1f      	ldr	r2, [pc, #124]	; (800db20 <xTaskIncrementTick+0x164>)
 800daa2:	441a      	add	r2, r3
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	3304      	adds	r3, #4
 800daa8:	4619      	mov	r1, r3
 800daaa:	4610      	mov	r0, r2
 800daac:	f7fe fc73 	bl	800c396 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dab4:	4b1b      	ldr	r3, [pc, #108]	; (800db24 <xTaskIncrementTick+0x168>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daba:	429a      	cmp	r2, r3
 800dabc:	d3b9      	bcc.n	800da32 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dabe:	2301      	movs	r3, #1
 800dac0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dac2:	e7b6      	b.n	800da32 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dac4:	4b17      	ldr	r3, [pc, #92]	; (800db24 <xTaskIncrementTick+0x168>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daca:	4915      	ldr	r1, [pc, #84]	; (800db20 <xTaskIncrementTick+0x164>)
 800dacc:	4613      	mov	r3, r2
 800dace:	009b      	lsls	r3, r3, #2
 800dad0:	4413      	add	r3, r2
 800dad2:	009b      	lsls	r3, r3, #2
 800dad4:	440b      	add	r3, r1
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d907      	bls.n	800daec <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800dadc:	2301      	movs	r3, #1
 800dade:	617b      	str	r3, [r7, #20]
 800dae0:	e004      	b.n	800daec <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800dae2:	4b11      	ldr	r3, [pc, #68]	; (800db28 <xTaskIncrementTick+0x16c>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	3301      	adds	r3, #1
 800dae8:	4a0f      	ldr	r2, [pc, #60]	; (800db28 <xTaskIncrementTick+0x16c>)
 800daea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800daec:	4b0f      	ldr	r3, [pc, #60]	; (800db2c <xTaskIncrementTick+0x170>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d001      	beq.n	800daf8 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800daf4:	2301      	movs	r3, #1
 800daf6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800daf8:	697b      	ldr	r3, [r7, #20]
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3718      	adds	r7, #24
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	200004cc 	.word	0x200004cc
 800db08:	200004a8 	.word	0x200004a8
 800db0c:	2000045c 	.word	0x2000045c
 800db10:	20000460 	.word	0x20000460
 800db14:	200004bc 	.word	0x200004bc
 800db18:	200004c4 	.word	0x200004c4
 800db1c:	200004ac 	.word	0x200004ac
 800db20:	200003a8 	.word	0x200003a8
 800db24:	200003a4 	.word	0x200003a4
 800db28:	200004b4 	.word	0x200004b4
 800db2c:	200004b8 	.word	0x200004b8

0800db30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b088      	sub	sp, #32
 800db34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800db36:	4b3a      	ldr	r3, [pc, #232]	; (800dc20 <vTaskSwitchContext+0xf0>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d003      	beq.n	800db46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800db3e:	4b39      	ldr	r3, [pc, #228]	; (800dc24 <vTaskSwitchContext+0xf4>)
 800db40:	2201      	movs	r2, #1
 800db42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800db44:	e067      	b.n	800dc16 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800db46:	4b37      	ldr	r3, [pc, #220]	; (800dc24 <vTaskSwitchContext+0xf4>)
 800db48:	2200      	movs	r2, #0
 800db4a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800db4c:	4b36      	ldr	r3, [pc, #216]	; (800dc28 <vTaskSwitchContext+0xf8>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db52:	61fb      	str	r3, [r7, #28]
 800db54:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800db58:	61bb      	str	r3, [r7, #24]
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	69ba      	ldr	r2, [r7, #24]
 800db60:	429a      	cmp	r2, r3
 800db62:	d111      	bne.n	800db88 <vTaskSwitchContext+0x58>
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	3304      	adds	r3, #4
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	69ba      	ldr	r2, [r7, #24]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d10b      	bne.n	800db88 <vTaskSwitchContext+0x58>
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	3308      	adds	r3, #8
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	69ba      	ldr	r2, [r7, #24]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d105      	bne.n	800db88 <vTaskSwitchContext+0x58>
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	330c      	adds	r3, #12
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	69ba      	ldr	r2, [r7, #24]
 800db84:	429a      	cmp	r2, r3
 800db86:	d008      	beq.n	800db9a <vTaskSwitchContext+0x6a>
 800db88:	4b27      	ldr	r3, [pc, #156]	; (800dc28 <vTaskSwitchContext+0xf8>)
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	4b26      	ldr	r3, [pc, #152]	; (800dc28 <vTaskSwitchContext+0xf8>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	3334      	adds	r3, #52	; 0x34
 800db92:	4619      	mov	r1, r3
 800db94:	4610      	mov	r0, r2
 800db96:	f7f2 feee 	bl	8000976 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db9a:	4b24      	ldr	r3, [pc, #144]	; (800dc2c <vTaskSwitchContext+0xfc>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	fab3 f383 	clz	r3, r3
 800dba6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dba8:	7afb      	ldrb	r3, [r7, #11]
 800dbaa:	f1c3 031f 	rsb	r3, r3, #31
 800dbae:	617b      	str	r3, [r7, #20]
 800dbb0:	491f      	ldr	r1, [pc, #124]	; (800dc30 <vTaskSwitchContext+0x100>)
 800dbb2:	697a      	ldr	r2, [r7, #20]
 800dbb4:	4613      	mov	r3, r2
 800dbb6:	009b      	lsls	r3, r3, #2
 800dbb8:	4413      	add	r3, r2
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	440b      	add	r3, r1
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d10b      	bne.n	800dbdc <vTaskSwitchContext+0xac>
	__asm volatile
 800dbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc8:	b672      	cpsid	i
 800dbca:	f383 8811 	msr	BASEPRI, r3
 800dbce:	f3bf 8f6f 	isb	sy
 800dbd2:	f3bf 8f4f 	dsb	sy
 800dbd6:	b662      	cpsie	i
 800dbd8:	607b      	str	r3, [r7, #4]
 800dbda:	e7fe      	b.n	800dbda <vTaskSwitchContext+0xaa>
 800dbdc:	697a      	ldr	r2, [r7, #20]
 800dbde:	4613      	mov	r3, r2
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	4413      	add	r3, r2
 800dbe4:	009b      	lsls	r3, r3, #2
 800dbe6:	4a12      	ldr	r2, [pc, #72]	; (800dc30 <vTaskSwitchContext+0x100>)
 800dbe8:	4413      	add	r3, r2
 800dbea:	613b      	str	r3, [r7, #16]
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	685a      	ldr	r2, [r3, #4]
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	605a      	str	r2, [r3, #4]
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	685a      	ldr	r2, [r3, #4]
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	3308      	adds	r3, #8
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d104      	bne.n	800dc0c <vTaskSwitchContext+0xdc>
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	685a      	ldr	r2, [r3, #4]
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	605a      	str	r2, [r3, #4]
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	4a05      	ldr	r2, [pc, #20]	; (800dc28 <vTaskSwitchContext+0xf8>)
 800dc14:	6013      	str	r3, [r2, #0]
}
 800dc16:	bf00      	nop
 800dc18:	3720      	adds	r7, #32
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	200004cc 	.word	0x200004cc
 800dc24:	200004b8 	.word	0x200004b8
 800dc28:	200003a4 	.word	0x200003a4
 800dc2c:	200004ac 	.word	0x200004ac
 800dc30:	200003a8 	.word	0x200003a8

0800dc34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d10b      	bne.n	800dc5c <vTaskPlaceOnEventList+0x28>
 800dc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc48:	b672      	cpsid	i
 800dc4a:	f383 8811 	msr	BASEPRI, r3
 800dc4e:	f3bf 8f6f 	isb	sy
 800dc52:	f3bf 8f4f 	dsb	sy
 800dc56:	b662      	cpsie	i
 800dc58:	60fb      	str	r3, [r7, #12]
 800dc5a:	e7fe      	b.n	800dc5a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc5c:	4b07      	ldr	r3, [pc, #28]	; (800dc7c <vTaskPlaceOnEventList+0x48>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	3318      	adds	r3, #24
 800dc62:	4619      	mov	r1, r3
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f7fe fbba 	bl	800c3de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dc6a:	2101      	movs	r1, #1
 800dc6c:	6838      	ldr	r0, [r7, #0]
 800dc6e:	f000 fb9d 	bl	800e3ac <prvAddCurrentTaskToDelayedList>
}
 800dc72:	bf00      	nop
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	200003a4 	.word	0x200003a4

0800dc80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b086      	sub	sp, #24
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	68db      	ldr	r3, [r3, #12]
 800dc8c:	68db      	ldr	r3, [r3, #12]
 800dc8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d10b      	bne.n	800dcae <xTaskRemoveFromEventList+0x2e>
 800dc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9a:	b672      	cpsid	i
 800dc9c:	f383 8811 	msr	BASEPRI, r3
 800dca0:	f3bf 8f6f 	isb	sy
 800dca4:	f3bf 8f4f 	dsb	sy
 800dca8:	b662      	cpsie	i
 800dcaa:	60fb      	str	r3, [r7, #12]
 800dcac:	e7fe      	b.n	800dcac <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	3318      	adds	r3, #24
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7fe fbcc 	bl	800c450 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcb8:	4b1d      	ldr	r3, [pc, #116]	; (800dd30 <xTaskRemoveFromEventList+0xb0>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d11c      	bne.n	800dcfa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	3304      	adds	r3, #4
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7fe fbc3 	bl	800c450 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcce:	2201      	movs	r2, #1
 800dcd0:	409a      	lsls	r2, r3
 800dcd2:	4b18      	ldr	r3, [pc, #96]	; (800dd34 <xTaskRemoveFromEventList+0xb4>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	4a16      	ldr	r2, [pc, #88]	; (800dd34 <xTaskRemoveFromEventList+0xb4>)
 800dcda:	6013      	str	r3, [r2, #0]
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dce0:	4613      	mov	r3, r2
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	4413      	add	r3, r2
 800dce6:	009b      	lsls	r3, r3, #2
 800dce8:	4a13      	ldr	r2, [pc, #76]	; (800dd38 <xTaskRemoveFromEventList+0xb8>)
 800dcea:	441a      	add	r2, r3
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	3304      	adds	r3, #4
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	4610      	mov	r0, r2
 800dcf4:	f7fe fb4f 	bl	800c396 <vListInsertEnd>
 800dcf8:	e005      	b.n	800dd06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	3318      	adds	r3, #24
 800dcfe:	4619      	mov	r1, r3
 800dd00:	480e      	ldr	r0, [pc, #56]	; (800dd3c <xTaskRemoveFromEventList+0xbc>)
 800dd02:	f7fe fb48 	bl	800c396 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd0a:	4b0d      	ldr	r3, [pc, #52]	; (800dd40 <xTaskRemoveFromEventList+0xc0>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d905      	bls.n	800dd20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dd14:	2301      	movs	r3, #1
 800dd16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dd18:	4b0a      	ldr	r3, [pc, #40]	; (800dd44 <xTaskRemoveFromEventList+0xc4>)
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	601a      	str	r2, [r3, #0]
 800dd1e:	e001      	b.n	800dd24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dd20:	2300      	movs	r3, #0
 800dd22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dd24:	697b      	ldr	r3, [r7, #20]
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3718      	adds	r7, #24
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	200004cc 	.word	0x200004cc
 800dd34:	200004ac 	.word	0x200004ac
 800dd38:	200003a8 	.word	0x200003a8
 800dd3c:	20000464 	.word	0x20000464
 800dd40:	200003a4 	.word	0x200003a4
 800dd44:	200004b8 	.word	0x200004b8

0800dd48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b083      	sub	sp, #12
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dd50:	4b06      	ldr	r3, [pc, #24]	; (800dd6c <vTaskInternalSetTimeOutState+0x24>)
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd58:	4b05      	ldr	r3, [pc, #20]	; (800dd70 <vTaskInternalSetTimeOutState+0x28>)
 800dd5a:	681a      	ldr	r2, [r3, #0]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	605a      	str	r2, [r3, #4]
}
 800dd60:	bf00      	nop
 800dd62:	370c      	adds	r7, #12
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr
 800dd6c:	200004bc 	.word	0x200004bc
 800dd70:	200004a8 	.word	0x200004a8

0800dd74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b088      	sub	sp, #32
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d10b      	bne.n	800dd9c <xTaskCheckForTimeOut+0x28>
 800dd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd88:	b672      	cpsid	i
 800dd8a:	f383 8811 	msr	BASEPRI, r3
 800dd8e:	f3bf 8f6f 	isb	sy
 800dd92:	f3bf 8f4f 	dsb	sy
 800dd96:	b662      	cpsie	i
 800dd98:	613b      	str	r3, [r7, #16]
 800dd9a:	e7fe      	b.n	800dd9a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d10b      	bne.n	800ddba <xTaskCheckForTimeOut+0x46>
 800dda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda6:	b672      	cpsid	i
 800dda8:	f383 8811 	msr	BASEPRI, r3
 800ddac:	f3bf 8f6f 	isb	sy
 800ddb0:	f3bf 8f4f 	dsb	sy
 800ddb4:	b662      	cpsie	i
 800ddb6:	60fb      	str	r3, [r7, #12]
 800ddb8:	e7fe      	b.n	800ddb8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800ddba:	f000 fc65 	bl	800e688 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ddbe:	4b1d      	ldr	r3, [pc, #116]	; (800de34 <xTaskCheckForTimeOut+0xc0>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	69ba      	ldr	r2, [r7, #24]
 800ddca:	1ad3      	subs	r3, r2, r3
 800ddcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd6:	d102      	bne.n	800ddde <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	61fb      	str	r3, [r7, #28]
 800dddc:	e023      	b.n	800de26 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	4b15      	ldr	r3, [pc, #84]	; (800de38 <xTaskCheckForTimeOut+0xc4>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d007      	beq.n	800ddfa <xTaskCheckForTimeOut+0x86>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	69ba      	ldr	r2, [r7, #24]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d302      	bcc.n	800ddfa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	61fb      	str	r3, [r7, #28]
 800ddf8:	e015      	b.n	800de26 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	697a      	ldr	r2, [r7, #20]
 800de00:	429a      	cmp	r2, r3
 800de02:	d20b      	bcs.n	800de1c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	1ad2      	subs	r2, r2, r3
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7ff ff99 	bl	800dd48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800de16:	2300      	movs	r3, #0
 800de18:	61fb      	str	r3, [r7, #28]
 800de1a:	e004      	b.n	800de26 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	2200      	movs	r2, #0
 800de20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800de22:	2301      	movs	r3, #1
 800de24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800de26:	f000 fc61 	bl	800e6ec <vPortExitCritical>

	return xReturn;
 800de2a:	69fb      	ldr	r3, [r7, #28]
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3720      	adds	r7, #32
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	200004a8 	.word	0x200004a8
 800de38:	200004bc 	.word	0x200004bc

0800de3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800de3c:	b480      	push	{r7}
 800de3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800de40:	4b03      	ldr	r3, [pc, #12]	; (800de50 <vTaskMissedYield+0x14>)
 800de42:	2201      	movs	r2, #1
 800de44:	601a      	str	r2, [r3, #0]
}
 800de46:	bf00      	nop
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	200004b8 	.word	0x200004b8

0800de54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800de5c:	f000 f854 	bl	800df08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de60:	4b07      	ldr	r3, [pc, #28]	; (800de80 <prvIdleTask+0x2c>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	2b01      	cmp	r3, #1
 800de66:	d907      	bls.n	800de78 <prvIdleTask+0x24>
			{
				taskYIELD();
 800de68:	4b06      	ldr	r3, [pc, #24]	; (800de84 <prvIdleTask+0x30>)
 800de6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de6e:	601a      	str	r2, [r3, #0]
 800de70:	f3bf 8f4f 	dsb	sy
 800de74:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800de78:	f7f2 fd76 	bl	8000968 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800de7c:	e7ee      	b.n	800de5c <prvIdleTask+0x8>
 800de7e:	bf00      	nop
 800de80:	200003a8 	.word	0x200003a8
 800de84:	e000ed04 	.word	0xe000ed04

0800de88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de8e:	2300      	movs	r3, #0
 800de90:	607b      	str	r3, [r7, #4]
 800de92:	e00c      	b.n	800deae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de94:	687a      	ldr	r2, [r7, #4]
 800de96:	4613      	mov	r3, r2
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	4413      	add	r3, r2
 800de9c:	009b      	lsls	r3, r3, #2
 800de9e:	4a12      	ldr	r2, [pc, #72]	; (800dee8 <prvInitialiseTaskLists+0x60>)
 800dea0:	4413      	add	r3, r2
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7fe fa4a 	bl	800c33c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	3301      	adds	r3, #1
 800deac:	607b      	str	r3, [r7, #4]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2b06      	cmp	r3, #6
 800deb2:	d9ef      	bls.n	800de94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800deb4:	480d      	ldr	r0, [pc, #52]	; (800deec <prvInitialiseTaskLists+0x64>)
 800deb6:	f7fe fa41 	bl	800c33c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800deba:	480d      	ldr	r0, [pc, #52]	; (800def0 <prvInitialiseTaskLists+0x68>)
 800debc:	f7fe fa3e 	bl	800c33c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dec0:	480c      	ldr	r0, [pc, #48]	; (800def4 <prvInitialiseTaskLists+0x6c>)
 800dec2:	f7fe fa3b 	bl	800c33c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dec6:	480c      	ldr	r0, [pc, #48]	; (800def8 <prvInitialiseTaskLists+0x70>)
 800dec8:	f7fe fa38 	bl	800c33c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800decc:	480b      	ldr	r0, [pc, #44]	; (800defc <prvInitialiseTaskLists+0x74>)
 800dece:	f7fe fa35 	bl	800c33c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ded2:	4b0b      	ldr	r3, [pc, #44]	; (800df00 <prvInitialiseTaskLists+0x78>)
 800ded4:	4a05      	ldr	r2, [pc, #20]	; (800deec <prvInitialiseTaskLists+0x64>)
 800ded6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ded8:	4b0a      	ldr	r3, [pc, #40]	; (800df04 <prvInitialiseTaskLists+0x7c>)
 800deda:	4a05      	ldr	r2, [pc, #20]	; (800def0 <prvInitialiseTaskLists+0x68>)
 800dedc:	601a      	str	r2, [r3, #0]
}
 800dede:	bf00      	nop
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	200003a8 	.word	0x200003a8
 800deec:	20000434 	.word	0x20000434
 800def0:	20000448 	.word	0x20000448
 800def4:	20000464 	.word	0x20000464
 800def8:	20000478 	.word	0x20000478
 800defc:	20000490 	.word	0x20000490
 800df00:	2000045c 	.word	0x2000045c
 800df04:	20000460 	.word	0x20000460

0800df08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df0e:	e019      	b.n	800df44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800df10:	f000 fbba 	bl	800e688 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df14:	4b0f      	ldr	r3, [pc, #60]	; (800df54 <prvCheckTasksWaitingTermination+0x4c>)
 800df16:	68db      	ldr	r3, [r3, #12]
 800df18:	68db      	ldr	r3, [r3, #12]
 800df1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	3304      	adds	r3, #4
 800df20:	4618      	mov	r0, r3
 800df22:	f7fe fa95 	bl	800c450 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800df26:	4b0c      	ldr	r3, [pc, #48]	; (800df58 <prvCheckTasksWaitingTermination+0x50>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	3b01      	subs	r3, #1
 800df2c:	4a0a      	ldr	r2, [pc, #40]	; (800df58 <prvCheckTasksWaitingTermination+0x50>)
 800df2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800df30:	4b0a      	ldr	r3, [pc, #40]	; (800df5c <prvCheckTasksWaitingTermination+0x54>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	3b01      	subs	r3, #1
 800df36:	4a09      	ldr	r2, [pc, #36]	; (800df5c <prvCheckTasksWaitingTermination+0x54>)
 800df38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800df3a:	f000 fbd7 	bl	800e6ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 f80e 	bl	800df60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df44:	4b05      	ldr	r3, [pc, #20]	; (800df5c <prvCheckTasksWaitingTermination+0x54>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d1e1      	bne.n	800df10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800df4c:	bf00      	nop
 800df4e:	3708      	adds	r7, #8
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	20000478 	.word	0x20000478
 800df58:	200004a4 	.word	0x200004a4
 800df5c:	2000048c 	.word	0x2000048c

0800df60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d108      	bne.n	800df84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df76:	4618      	mov	r0, r3
 800df78:	f000 fd74 	bl	800ea64 <vPortFree>
				vPortFree( pxTCB );
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f000 fd71 	bl	800ea64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800df82:	e019      	b.n	800dfb8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d103      	bne.n	800df96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 fd68 	bl	800ea64 <vPortFree>
	}
 800df94:	e010      	b.n	800dfb8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800df9c:	2b02      	cmp	r3, #2
 800df9e:	d00b      	beq.n	800dfb8 <prvDeleteTCB+0x58>
 800dfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa4:	b672      	cpsid	i
 800dfa6:	f383 8811 	msr	BASEPRI, r3
 800dfaa:	f3bf 8f6f 	isb	sy
 800dfae:	f3bf 8f4f 	dsb	sy
 800dfb2:	b662      	cpsie	i
 800dfb4:	60fb      	str	r3, [r7, #12]
 800dfb6:	e7fe      	b.n	800dfb6 <prvDeleteTCB+0x56>
	}
 800dfb8:	bf00      	nop
 800dfba:	3710      	adds	r7, #16
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b083      	sub	sp, #12
 800dfc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfc6:	4b0c      	ldr	r3, [pc, #48]	; (800dff8 <prvResetNextTaskUnblockTime+0x38>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d104      	bne.n	800dfda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dfd0:	4b0a      	ldr	r3, [pc, #40]	; (800dffc <prvResetNextTaskUnblockTime+0x3c>)
 800dfd2:	f04f 32ff 	mov.w	r2, #4294967295
 800dfd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dfd8:	e008      	b.n	800dfec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfda:	4b07      	ldr	r3, [pc, #28]	; (800dff8 <prvResetNextTaskUnblockTime+0x38>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	68db      	ldr	r3, [r3, #12]
 800dfe2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	4a04      	ldr	r2, [pc, #16]	; (800dffc <prvResetNextTaskUnblockTime+0x3c>)
 800dfea:	6013      	str	r3, [r2, #0]
}
 800dfec:	bf00      	nop
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr
 800dff8:	2000045c 	.word	0x2000045c
 800dffc:	200004c4 	.word	0x200004c4

0800e000 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e000:	b480      	push	{r7}
 800e002:	b083      	sub	sp, #12
 800e004:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e006:	4b0b      	ldr	r3, [pc, #44]	; (800e034 <xTaskGetSchedulerState+0x34>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d102      	bne.n	800e014 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e00e:	2301      	movs	r3, #1
 800e010:	607b      	str	r3, [r7, #4]
 800e012:	e008      	b.n	800e026 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e014:	4b08      	ldr	r3, [pc, #32]	; (800e038 <xTaskGetSchedulerState+0x38>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d102      	bne.n	800e022 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e01c:	2302      	movs	r3, #2
 800e01e:	607b      	str	r3, [r7, #4]
 800e020:	e001      	b.n	800e026 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e022:	2300      	movs	r3, #0
 800e024:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e026:	687b      	ldr	r3, [r7, #4]
	}
 800e028:	4618      	mov	r0, r3
 800e02a:	370c      	adds	r7, #12
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr
 800e034:	200004b0 	.word	0x200004b0
 800e038:	200004cc 	.word	0x200004cc

0800e03c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e048:	2300      	movs	r3, #0
 800e04a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d069      	beq.n	800e126 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e056:	4b36      	ldr	r3, [pc, #216]	; (800e130 <xTaskPriorityInherit+0xf4>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d259      	bcs.n	800e114 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	699b      	ldr	r3, [r3, #24]
 800e064:	2b00      	cmp	r3, #0
 800e066:	db06      	blt.n	800e076 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e068:	4b31      	ldr	r3, [pc, #196]	; (800e130 <xTaskPriorityInherit+0xf4>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e06e:	f1c3 0207 	rsb	r2, r3, #7
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	6959      	ldr	r1, [r3, #20]
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e07e:	4613      	mov	r3, r2
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	4413      	add	r3, r2
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	4a2b      	ldr	r2, [pc, #172]	; (800e134 <xTaskPriorityInherit+0xf8>)
 800e088:	4413      	add	r3, r2
 800e08a:	4299      	cmp	r1, r3
 800e08c:	d13a      	bne.n	800e104 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	3304      	adds	r3, #4
 800e092:	4618      	mov	r0, r3
 800e094:	f7fe f9dc 	bl	800c450 <uxListRemove>
 800e098:	4603      	mov	r3, r0
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d115      	bne.n	800e0ca <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a2:	4924      	ldr	r1, [pc, #144]	; (800e134 <xTaskPriorityInherit+0xf8>)
 800e0a4:	4613      	mov	r3, r2
 800e0a6:	009b      	lsls	r3, r3, #2
 800e0a8:	4413      	add	r3, r2
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	440b      	add	r3, r1
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d10a      	bne.n	800e0ca <xTaskPriorityInherit+0x8e>
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800e0be:	43da      	mvns	r2, r3
 800e0c0:	4b1d      	ldr	r3, [pc, #116]	; (800e138 <xTaskPriorityInherit+0xfc>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4013      	ands	r3, r2
 800e0c6:	4a1c      	ldr	r2, [pc, #112]	; (800e138 <xTaskPriorityInherit+0xfc>)
 800e0c8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e0ca:	4b19      	ldr	r3, [pc, #100]	; (800e130 <xTaskPriorityInherit+0xf4>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d8:	2201      	movs	r2, #1
 800e0da:	409a      	lsls	r2, r3
 800e0dc:	4b16      	ldr	r3, [pc, #88]	; (800e138 <xTaskPriorityInherit+0xfc>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4313      	orrs	r3, r2
 800e0e2:	4a15      	ldr	r2, [pc, #84]	; (800e138 <xTaskPriorityInherit+0xfc>)
 800e0e4:	6013      	str	r3, [r2, #0]
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ea:	4613      	mov	r3, r2
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	4413      	add	r3, r2
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	4a10      	ldr	r2, [pc, #64]	; (800e134 <xTaskPriorityInherit+0xf8>)
 800e0f4:	441a      	add	r2, r3
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	3304      	adds	r3, #4
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	f7fe f94a 	bl	800c396 <vListInsertEnd>
 800e102:	e004      	b.n	800e10e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e104:	4b0a      	ldr	r3, [pc, #40]	; (800e130 <xTaskPriorityInherit+0xf4>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e10e:	2301      	movs	r3, #1
 800e110:	60fb      	str	r3, [r7, #12]
 800e112:	e008      	b.n	800e126 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e118:	4b05      	ldr	r3, [pc, #20]	; (800e130 <xTaskPriorityInherit+0xf4>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e11e:	429a      	cmp	r2, r3
 800e120:	d201      	bcs.n	800e126 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e122:	2301      	movs	r3, #1
 800e124:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e126:	68fb      	ldr	r3, [r7, #12]
	}
 800e128:	4618      	mov	r0, r3
 800e12a:	3710      	adds	r7, #16
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	200003a4 	.word	0x200003a4
 800e134:	200003a8 	.word	0x200003a8
 800e138:	200004ac 	.word	0x200004ac

0800e13c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b086      	sub	sp, #24
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e148:	2300      	movs	r3, #0
 800e14a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d070      	beq.n	800e234 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e152:	4b3b      	ldr	r3, [pc, #236]	; (800e240 <xTaskPriorityDisinherit+0x104>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	693a      	ldr	r2, [r7, #16]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d00b      	beq.n	800e174 <xTaskPriorityDisinherit+0x38>
 800e15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e160:	b672      	cpsid	i
 800e162:	f383 8811 	msr	BASEPRI, r3
 800e166:	f3bf 8f6f 	isb	sy
 800e16a:	f3bf 8f4f 	dsb	sy
 800e16e:	b662      	cpsie	i
 800e170:	60fb      	str	r3, [r7, #12]
 800e172:	e7fe      	b.n	800e172 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d10b      	bne.n	800e194 <xTaskPriorityDisinherit+0x58>
 800e17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e180:	b672      	cpsid	i
 800e182:	f383 8811 	msr	BASEPRI, r3
 800e186:	f3bf 8f6f 	isb	sy
 800e18a:	f3bf 8f4f 	dsb	sy
 800e18e:	b662      	cpsie	i
 800e190:	60bb      	str	r3, [r7, #8]
 800e192:	e7fe      	b.n	800e192 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e198:	1e5a      	subs	r2, r3, #1
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d044      	beq.n	800e234 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d140      	bne.n	800e234 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	3304      	adds	r3, #4
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fe f94a 	bl	800c450 <uxListRemove>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d115      	bne.n	800e1ee <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1c6:	491f      	ldr	r1, [pc, #124]	; (800e244 <xTaskPriorityDisinherit+0x108>)
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	4413      	add	r3, r2
 800e1ce:	009b      	lsls	r3, r3, #2
 800e1d0:	440b      	add	r3, r1
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d10a      	bne.n	800e1ee <xTaskPriorityDisinherit+0xb2>
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1dc:	2201      	movs	r2, #1
 800e1de:	fa02 f303 	lsl.w	r3, r2, r3
 800e1e2:	43da      	mvns	r2, r3
 800e1e4:	4b18      	ldr	r3, [pc, #96]	; (800e248 <xTaskPriorityDisinherit+0x10c>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4013      	ands	r3, r2
 800e1ea:	4a17      	ldr	r2, [pc, #92]	; (800e248 <xTaskPriorityDisinherit+0x10c>)
 800e1ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1fa:	f1c3 0207 	rsb	r2, r3, #7
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e206:	2201      	movs	r2, #1
 800e208:	409a      	lsls	r2, r3
 800e20a:	4b0f      	ldr	r3, [pc, #60]	; (800e248 <xTaskPriorityDisinherit+0x10c>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	4313      	orrs	r3, r2
 800e210:	4a0d      	ldr	r2, [pc, #52]	; (800e248 <xTaskPriorityDisinherit+0x10c>)
 800e212:	6013      	str	r3, [r2, #0]
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e218:	4613      	mov	r3, r2
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	4413      	add	r3, r2
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	4a08      	ldr	r2, [pc, #32]	; (800e244 <xTaskPriorityDisinherit+0x108>)
 800e222:	441a      	add	r2, r3
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	3304      	adds	r3, #4
 800e228:	4619      	mov	r1, r3
 800e22a:	4610      	mov	r0, r2
 800e22c:	f7fe f8b3 	bl	800c396 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e230:	2301      	movs	r3, #1
 800e232:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e234:	697b      	ldr	r3, [r7, #20]
	}
 800e236:	4618      	mov	r0, r3
 800e238:	3718      	adds	r7, #24
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop
 800e240:	200003a4 	.word	0x200003a4
 800e244:	200003a8 	.word	0x200003a8
 800e248:	200004ac 	.word	0x200004ac

0800e24c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b088      	sub	sp, #32
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e25a:	2301      	movs	r3, #1
 800e25c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2b00      	cmp	r3, #0
 800e262:	f000 8085 	beq.w	800e370 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d10b      	bne.n	800e286 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800e26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e272:	b672      	cpsid	i
 800e274:	f383 8811 	msr	BASEPRI, r3
 800e278:	f3bf 8f6f 	isb	sy
 800e27c:	f3bf 8f4f 	dsb	sy
 800e280:	b662      	cpsie	i
 800e282:	60fb      	str	r3, [r7, #12]
 800e284:	e7fe      	b.n	800e284 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e28a:	683a      	ldr	r2, [r7, #0]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d902      	bls.n	800e296 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	61fb      	str	r3, [r7, #28]
 800e294:	e002      	b.n	800e29c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e296:	69bb      	ldr	r3, [r7, #24]
 800e298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e29a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e29c:	69bb      	ldr	r3, [r7, #24]
 800e29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2a0:	69fa      	ldr	r2, [r7, #28]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d064      	beq.n	800e370 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e2a6:	69bb      	ldr	r3, [r7, #24]
 800e2a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2aa:	697a      	ldr	r2, [r7, #20]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d15f      	bne.n	800e370 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e2b0:	4b31      	ldr	r3, [pc, #196]	; (800e378 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	69ba      	ldr	r2, [r7, #24]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d10b      	bne.n	800e2d2 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800e2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2be:	b672      	cpsid	i
 800e2c0:	f383 8811 	msr	BASEPRI, r3
 800e2c4:	f3bf 8f6f 	isb	sy
 800e2c8:	f3bf 8f4f 	dsb	sy
 800e2cc:	b662      	cpsie	i
 800e2ce:	60bb      	str	r3, [r7, #8]
 800e2d0:	e7fe      	b.n	800e2d0 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e2d2:	69bb      	ldr	r3, [r7, #24]
 800e2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e2d8:	69bb      	ldr	r3, [r7, #24]
 800e2da:	69fa      	ldr	r2, [r7, #28]
 800e2dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e2de:	69bb      	ldr	r3, [r7, #24]
 800e2e0:	699b      	ldr	r3, [r3, #24]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	db04      	blt.n	800e2f0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	f1c3 0207 	rsb	r2, r3, #7
 800e2ec:	69bb      	ldr	r3, [r7, #24]
 800e2ee:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	6959      	ldr	r1, [r3, #20]
 800e2f4:	693a      	ldr	r2, [r7, #16]
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	4413      	add	r3, r2
 800e2fc:	009b      	lsls	r3, r3, #2
 800e2fe:	4a1f      	ldr	r2, [pc, #124]	; (800e37c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e300:	4413      	add	r3, r2
 800e302:	4299      	cmp	r1, r3
 800e304:	d134      	bne.n	800e370 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e306:	69bb      	ldr	r3, [r7, #24]
 800e308:	3304      	adds	r3, #4
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7fe f8a0 	bl	800c450 <uxListRemove>
 800e310:	4603      	mov	r3, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	d115      	bne.n	800e342 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e316:	69bb      	ldr	r3, [r7, #24]
 800e318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e31a:	4918      	ldr	r1, [pc, #96]	; (800e37c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e31c:	4613      	mov	r3, r2
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	4413      	add	r3, r2
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	440b      	add	r3, r1
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d10a      	bne.n	800e342 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800e32c:	69bb      	ldr	r3, [r7, #24]
 800e32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e330:	2201      	movs	r2, #1
 800e332:	fa02 f303 	lsl.w	r3, r2, r3
 800e336:	43da      	mvns	r2, r3
 800e338:	4b11      	ldr	r3, [pc, #68]	; (800e380 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4013      	ands	r3, r2
 800e33e:	4a10      	ldr	r2, [pc, #64]	; (800e380 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e340:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e342:	69bb      	ldr	r3, [r7, #24]
 800e344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e346:	2201      	movs	r2, #1
 800e348:	409a      	lsls	r2, r3
 800e34a:	4b0d      	ldr	r3, [pc, #52]	; (800e380 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4313      	orrs	r3, r2
 800e350:	4a0b      	ldr	r2, [pc, #44]	; (800e380 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e352:	6013      	str	r3, [r2, #0]
 800e354:	69bb      	ldr	r3, [r7, #24]
 800e356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e358:	4613      	mov	r3, r2
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	4413      	add	r3, r2
 800e35e:	009b      	lsls	r3, r3, #2
 800e360:	4a06      	ldr	r2, [pc, #24]	; (800e37c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e362:	441a      	add	r2, r3
 800e364:	69bb      	ldr	r3, [r7, #24]
 800e366:	3304      	adds	r3, #4
 800e368:	4619      	mov	r1, r3
 800e36a:	4610      	mov	r0, r2
 800e36c:	f7fe f813 	bl	800c396 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e370:	bf00      	nop
 800e372:	3720      	adds	r7, #32
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	200003a4 	.word	0x200003a4
 800e37c:	200003a8 	.word	0x200003a8
 800e380:	200004ac 	.word	0x200004ac

0800e384 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e384:	b480      	push	{r7}
 800e386:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e388:	4b07      	ldr	r3, [pc, #28]	; (800e3a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d004      	beq.n	800e39a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e390:	4b05      	ldr	r3, [pc, #20]	; (800e3a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e396:	3201      	adds	r2, #1
 800e398:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e39a:	4b03      	ldr	r3, [pc, #12]	; (800e3a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e39c:	681b      	ldr	r3, [r3, #0]
	}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr
 800e3a8:	200003a4 	.word	0x200003a4

0800e3ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e3b6:	4b29      	ldr	r3, [pc, #164]	; (800e45c <prvAddCurrentTaskToDelayedList+0xb0>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3bc:	4b28      	ldr	r3, [pc, #160]	; (800e460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	3304      	adds	r3, #4
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fe f844 	bl	800c450 <uxListRemove>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d10b      	bne.n	800e3e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e3ce:	4b24      	ldr	r3, [pc, #144]	; (800e460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800e3da:	43da      	mvns	r2, r3
 800e3dc:	4b21      	ldr	r3, [pc, #132]	; (800e464 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4013      	ands	r3, r2
 800e3e2:	4a20      	ldr	r2, [pc, #128]	; (800e464 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e3e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ec:	d10a      	bne.n	800e404 <prvAddCurrentTaskToDelayedList+0x58>
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d007      	beq.n	800e404 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3f4:	4b1a      	ldr	r3, [pc, #104]	; (800e460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	3304      	adds	r3, #4
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	481a      	ldr	r0, [pc, #104]	; (800e468 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e3fe:	f7fd ffca 	bl	800c396 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e402:	e026      	b.n	800e452 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e404:	68fa      	ldr	r2, [r7, #12]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	4413      	add	r3, r2
 800e40a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e40c:	4b14      	ldr	r3, [pc, #80]	; (800e460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	68ba      	ldr	r2, [r7, #8]
 800e412:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d209      	bcs.n	800e430 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e41c:	4b13      	ldr	r3, [pc, #76]	; (800e46c <prvAddCurrentTaskToDelayedList+0xc0>)
 800e41e:	681a      	ldr	r2, [r3, #0]
 800e420:	4b0f      	ldr	r3, [pc, #60]	; (800e460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	3304      	adds	r3, #4
 800e426:	4619      	mov	r1, r3
 800e428:	4610      	mov	r0, r2
 800e42a:	f7fd ffd8 	bl	800c3de <vListInsert>
}
 800e42e:	e010      	b.n	800e452 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e430:	4b0f      	ldr	r3, [pc, #60]	; (800e470 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e432:	681a      	ldr	r2, [r3, #0]
 800e434:	4b0a      	ldr	r3, [pc, #40]	; (800e460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	3304      	adds	r3, #4
 800e43a:	4619      	mov	r1, r3
 800e43c:	4610      	mov	r0, r2
 800e43e:	f7fd ffce 	bl	800c3de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e442:	4b0c      	ldr	r3, [pc, #48]	; (800e474 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	68ba      	ldr	r2, [r7, #8]
 800e448:	429a      	cmp	r2, r3
 800e44a:	d202      	bcs.n	800e452 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e44c:	4a09      	ldr	r2, [pc, #36]	; (800e474 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	6013      	str	r3, [r2, #0]
}
 800e452:	bf00      	nop
 800e454:	3710      	adds	r7, #16
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
 800e45a:	bf00      	nop
 800e45c:	200004a8 	.word	0x200004a8
 800e460:	200003a4 	.word	0x200003a4
 800e464:	200004ac 	.word	0x200004ac
 800e468:	20000490 	.word	0x20000490
 800e46c:	20000460 	.word	0x20000460
 800e470:	2000045c 	.word	0x2000045c
 800e474:	200004c4 	.word	0x200004c4

0800e478 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e478:	b480      	push	{r7}
 800e47a:	b085      	sub	sp, #20
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	3b04      	subs	r3, #4
 800e488:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	3b04      	subs	r3, #4
 800e496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	f023 0201 	bic.w	r2, r3, #1
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	3b04      	subs	r3, #4
 800e4a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e4a8:	4a0c      	ldr	r2, [pc, #48]	; (800e4dc <pxPortInitialiseStack+0x64>)
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	3b14      	subs	r3, #20
 800e4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e4b4:	687a      	ldr	r2, [r7, #4]
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	3b04      	subs	r3, #4
 800e4be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f06f 0202 	mvn.w	r2, #2
 800e4c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	3b20      	subs	r3, #32
 800e4cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3714      	adds	r7, #20
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr
 800e4dc:	0800e4e1 	.word	0x0800e4e1

0800e4e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b085      	sub	sp, #20
 800e4e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e4ea:	4b13      	ldr	r3, [pc, #76]	; (800e538 <prvTaskExitError+0x58>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4f2:	d00b      	beq.n	800e50c <prvTaskExitError+0x2c>
 800e4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f8:	b672      	cpsid	i
 800e4fa:	f383 8811 	msr	BASEPRI, r3
 800e4fe:	f3bf 8f6f 	isb	sy
 800e502:	f3bf 8f4f 	dsb	sy
 800e506:	b662      	cpsie	i
 800e508:	60fb      	str	r3, [r7, #12]
 800e50a:	e7fe      	b.n	800e50a <prvTaskExitError+0x2a>
 800e50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e510:	b672      	cpsid	i
 800e512:	f383 8811 	msr	BASEPRI, r3
 800e516:	f3bf 8f6f 	isb	sy
 800e51a:	f3bf 8f4f 	dsb	sy
 800e51e:	b662      	cpsie	i
 800e520:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e522:	bf00      	nop
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d0fc      	beq.n	800e524 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e52a:	bf00      	nop
 800e52c:	3714      	adds	r7, #20
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr
 800e536:	bf00      	nop
 800e538:	20000038 	.word	0x20000038
 800e53c:	00000000 	.word	0x00000000

0800e540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e540:	4b07      	ldr	r3, [pc, #28]	; (800e560 <pxCurrentTCBConst2>)
 800e542:	6819      	ldr	r1, [r3, #0]
 800e544:	6808      	ldr	r0, [r1, #0]
 800e546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e54a:	f380 8809 	msr	PSP, r0
 800e54e:	f3bf 8f6f 	isb	sy
 800e552:	f04f 0000 	mov.w	r0, #0
 800e556:	f380 8811 	msr	BASEPRI, r0
 800e55a:	4770      	bx	lr
 800e55c:	f3af 8000 	nop.w

0800e560 <pxCurrentTCBConst2>:
 800e560:	200003a4 	.word	0x200003a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e564:	bf00      	nop
 800e566:	bf00      	nop

0800e568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e568:	4808      	ldr	r0, [pc, #32]	; (800e58c <prvPortStartFirstTask+0x24>)
 800e56a:	6800      	ldr	r0, [r0, #0]
 800e56c:	6800      	ldr	r0, [r0, #0]
 800e56e:	f380 8808 	msr	MSP, r0
 800e572:	f04f 0000 	mov.w	r0, #0
 800e576:	f380 8814 	msr	CONTROL, r0
 800e57a:	b662      	cpsie	i
 800e57c:	b661      	cpsie	f
 800e57e:	f3bf 8f4f 	dsb	sy
 800e582:	f3bf 8f6f 	isb	sy
 800e586:	df00      	svc	0
 800e588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e58a:	bf00      	nop
 800e58c:	e000ed08 	.word	0xe000ed08

0800e590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b084      	sub	sp, #16
 800e594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e596:	4b36      	ldr	r3, [pc, #216]	; (800e670 <xPortStartScheduler+0xe0>)
 800e598:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	22ff      	movs	r2, #255	; 0xff
 800e5a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	b2db      	uxtb	r3, r3
 800e5ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e5b0:	78fb      	ldrb	r3, [r7, #3]
 800e5b2:	b2db      	uxtb	r3, r3
 800e5b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e5b8:	b2da      	uxtb	r2, r3
 800e5ba:	4b2e      	ldr	r3, [pc, #184]	; (800e674 <xPortStartScheduler+0xe4>)
 800e5bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e5be:	4b2e      	ldr	r3, [pc, #184]	; (800e678 <xPortStartScheduler+0xe8>)
 800e5c0:	2207      	movs	r2, #7
 800e5c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e5c4:	e009      	b.n	800e5da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e5c6:	4b2c      	ldr	r3, [pc, #176]	; (800e678 <xPortStartScheduler+0xe8>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	3b01      	subs	r3, #1
 800e5cc:	4a2a      	ldr	r2, [pc, #168]	; (800e678 <xPortStartScheduler+0xe8>)
 800e5ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e5d0:	78fb      	ldrb	r3, [r7, #3]
 800e5d2:	b2db      	uxtb	r3, r3
 800e5d4:	005b      	lsls	r3, r3, #1
 800e5d6:	b2db      	uxtb	r3, r3
 800e5d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e5da:	78fb      	ldrb	r3, [r7, #3]
 800e5dc:	b2db      	uxtb	r3, r3
 800e5de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5e2:	2b80      	cmp	r3, #128	; 0x80
 800e5e4:	d0ef      	beq.n	800e5c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e5e6:	4b24      	ldr	r3, [pc, #144]	; (800e678 <xPortStartScheduler+0xe8>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f1c3 0307 	rsb	r3, r3, #7
 800e5ee:	2b04      	cmp	r3, #4
 800e5f0:	d00b      	beq.n	800e60a <xPortStartScheduler+0x7a>
 800e5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f6:	b672      	cpsid	i
 800e5f8:	f383 8811 	msr	BASEPRI, r3
 800e5fc:	f3bf 8f6f 	isb	sy
 800e600:	f3bf 8f4f 	dsb	sy
 800e604:	b662      	cpsie	i
 800e606:	60bb      	str	r3, [r7, #8]
 800e608:	e7fe      	b.n	800e608 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e60a:	4b1b      	ldr	r3, [pc, #108]	; (800e678 <xPortStartScheduler+0xe8>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	021b      	lsls	r3, r3, #8
 800e610:	4a19      	ldr	r2, [pc, #100]	; (800e678 <xPortStartScheduler+0xe8>)
 800e612:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e614:	4b18      	ldr	r3, [pc, #96]	; (800e678 <xPortStartScheduler+0xe8>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e61c:	4a16      	ldr	r2, [pc, #88]	; (800e678 <xPortStartScheduler+0xe8>)
 800e61e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	b2da      	uxtb	r2, r3
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e628:	4b14      	ldr	r3, [pc, #80]	; (800e67c <xPortStartScheduler+0xec>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4a13      	ldr	r2, [pc, #76]	; (800e67c <xPortStartScheduler+0xec>)
 800e62e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e632:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e634:	4b11      	ldr	r3, [pc, #68]	; (800e67c <xPortStartScheduler+0xec>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	4a10      	ldr	r2, [pc, #64]	; (800e67c <xPortStartScheduler+0xec>)
 800e63a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e63e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e640:	f000 f8d4 	bl	800e7ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e644:	4b0e      	ldr	r3, [pc, #56]	; (800e680 <xPortStartScheduler+0xf0>)
 800e646:	2200      	movs	r2, #0
 800e648:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e64a:	f000 f8f3 	bl	800e834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e64e:	4b0d      	ldr	r3, [pc, #52]	; (800e684 <xPortStartScheduler+0xf4>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	4a0c      	ldr	r2, [pc, #48]	; (800e684 <xPortStartScheduler+0xf4>)
 800e654:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e658:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e65a:	f7ff ff85 	bl	800e568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e65e:	f7ff fa67 	bl	800db30 <vTaskSwitchContext>
	prvTaskExitError();
 800e662:	f7ff ff3d 	bl	800e4e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	e000e400 	.word	0xe000e400
 800e674:	200004d0 	.word	0x200004d0
 800e678:	200004d4 	.word	0x200004d4
 800e67c:	e000ed20 	.word	0xe000ed20
 800e680:	20000038 	.word	0x20000038
 800e684:	e000ef34 	.word	0xe000ef34

0800e688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e688:	b480      	push	{r7}
 800e68a:	b083      	sub	sp, #12
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e692:	b672      	cpsid	i
 800e694:	f383 8811 	msr	BASEPRI, r3
 800e698:	f3bf 8f6f 	isb	sy
 800e69c:	f3bf 8f4f 	dsb	sy
 800e6a0:	b662      	cpsie	i
 800e6a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e6a4:	4b0f      	ldr	r3, [pc, #60]	; (800e6e4 <vPortEnterCritical+0x5c>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	4a0e      	ldr	r2, [pc, #56]	; (800e6e4 <vPortEnterCritical+0x5c>)
 800e6ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e6ae:	4b0d      	ldr	r3, [pc, #52]	; (800e6e4 <vPortEnterCritical+0x5c>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d110      	bne.n	800e6d8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e6b6:	4b0c      	ldr	r3, [pc, #48]	; (800e6e8 <vPortEnterCritical+0x60>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d00b      	beq.n	800e6d8 <vPortEnterCritical+0x50>
 800e6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c4:	b672      	cpsid	i
 800e6c6:	f383 8811 	msr	BASEPRI, r3
 800e6ca:	f3bf 8f6f 	isb	sy
 800e6ce:	f3bf 8f4f 	dsb	sy
 800e6d2:	b662      	cpsie	i
 800e6d4:	603b      	str	r3, [r7, #0]
 800e6d6:	e7fe      	b.n	800e6d6 <vPortEnterCritical+0x4e>
	}
}
 800e6d8:	bf00      	nop
 800e6da:	370c      	adds	r7, #12
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr
 800e6e4:	20000038 	.word	0x20000038
 800e6e8:	e000ed04 	.word	0xe000ed04

0800e6ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e6f2:	4b12      	ldr	r3, [pc, #72]	; (800e73c <vPortExitCritical+0x50>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d10b      	bne.n	800e712 <vPortExitCritical+0x26>
 800e6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fe:	b672      	cpsid	i
 800e700:	f383 8811 	msr	BASEPRI, r3
 800e704:	f3bf 8f6f 	isb	sy
 800e708:	f3bf 8f4f 	dsb	sy
 800e70c:	b662      	cpsie	i
 800e70e:	607b      	str	r3, [r7, #4]
 800e710:	e7fe      	b.n	800e710 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800e712:	4b0a      	ldr	r3, [pc, #40]	; (800e73c <vPortExitCritical+0x50>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	3b01      	subs	r3, #1
 800e718:	4a08      	ldr	r2, [pc, #32]	; (800e73c <vPortExitCritical+0x50>)
 800e71a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e71c:	4b07      	ldr	r3, [pc, #28]	; (800e73c <vPortExitCritical+0x50>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d104      	bne.n	800e72e <vPortExitCritical+0x42>
 800e724:	2300      	movs	r3, #0
 800e726:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e72e:	bf00      	nop
 800e730:	370c      	adds	r7, #12
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop
 800e73c:	20000038 	.word	0x20000038

0800e740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e740:	f3ef 8009 	mrs	r0, PSP
 800e744:	f3bf 8f6f 	isb	sy
 800e748:	4b15      	ldr	r3, [pc, #84]	; (800e7a0 <pxCurrentTCBConst>)
 800e74a:	681a      	ldr	r2, [r3, #0]
 800e74c:	f01e 0f10 	tst.w	lr, #16
 800e750:	bf08      	it	eq
 800e752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e75a:	6010      	str	r0, [r2, #0]
 800e75c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e760:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e764:	b672      	cpsid	i
 800e766:	f380 8811 	msr	BASEPRI, r0
 800e76a:	f3bf 8f4f 	dsb	sy
 800e76e:	f3bf 8f6f 	isb	sy
 800e772:	b662      	cpsie	i
 800e774:	f7ff f9dc 	bl	800db30 <vTaskSwitchContext>
 800e778:	f04f 0000 	mov.w	r0, #0
 800e77c:	f380 8811 	msr	BASEPRI, r0
 800e780:	bc09      	pop	{r0, r3}
 800e782:	6819      	ldr	r1, [r3, #0]
 800e784:	6808      	ldr	r0, [r1, #0]
 800e786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e78a:	f01e 0f10 	tst.w	lr, #16
 800e78e:	bf08      	it	eq
 800e790:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e794:	f380 8809 	msr	PSP, r0
 800e798:	f3bf 8f6f 	isb	sy
 800e79c:	4770      	bx	lr
 800e79e:	bf00      	nop

0800e7a0 <pxCurrentTCBConst>:
 800e7a0:	200003a4 	.word	0x200003a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e7a4:	bf00      	nop
 800e7a6:	bf00      	nop

0800e7a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
	__asm volatile
 800e7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b2:	b672      	cpsid	i
 800e7b4:	f383 8811 	msr	BASEPRI, r3
 800e7b8:	f3bf 8f6f 	isb	sy
 800e7bc:	f3bf 8f4f 	dsb	sy
 800e7c0:	b662      	cpsie	i
 800e7c2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e7c4:	f7ff f8fa 	bl	800d9bc <xTaskIncrementTick>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d003      	beq.n	800e7d6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e7ce:	4b06      	ldr	r3, [pc, #24]	; (800e7e8 <SysTick_Handler+0x40>)
 800e7d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7d4:	601a      	str	r2, [r3, #0]
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e7e0:	bf00      	nop
 800e7e2:	3708      	adds	r7, #8
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}
 800e7e8:	e000ed04 	.word	0xe000ed04

0800e7ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e7f0:	4b0b      	ldr	r3, [pc, #44]	; (800e820 <vPortSetupTimerInterrupt+0x34>)
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e7f6:	4b0b      	ldr	r3, [pc, #44]	; (800e824 <vPortSetupTimerInterrupt+0x38>)
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e7fc:	4b0a      	ldr	r3, [pc, #40]	; (800e828 <vPortSetupTimerInterrupt+0x3c>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	4a0a      	ldr	r2, [pc, #40]	; (800e82c <vPortSetupTimerInterrupt+0x40>)
 800e802:	fba2 2303 	umull	r2, r3, r2, r3
 800e806:	099b      	lsrs	r3, r3, #6
 800e808:	4a09      	ldr	r2, [pc, #36]	; (800e830 <vPortSetupTimerInterrupt+0x44>)
 800e80a:	3b01      	subs	r3, #1
 800e80c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e80e:	4b04      	ldr	r3, [pc, #16]	; (800e820 <vPortSetupTimerInterrupt+0x34>)
 800e810:	2207      	movs	r2, #7
 800e812:	601a      	str	r2, [r3, #0]
}
 800e814:	bf00      	nop
 800e816:	46bd      	mov	sp, r7
 800e818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81c:	4770      	bx	lr
 800e81e:	bf00      	nop
 800e820:	e000e010 	.word	0xe000e010
 800e824:	e000e018 	.word	0xe000e018
 800e828:	2000002c 	.word	0x2000002c
 800e82c:	10624dd3 	.word	0x10624dd3
 800e830:	e000e014 	.word	0xe000e014

0800e834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e834:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e844 <vPortEnableVFP+0x10>
 800e838:	6801      	ldr	r1, [r0, #0]
 800e83a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e83e:	6001      	str	r1, [r0, #0]
 800e840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e842:	bf00      	nop
 800e844:	e000ed88 	.word	0xe000ed88

0800e848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e848:	b480      	push	{r7}
 800e84a:	b085      	sub	sp, #20
 800e84c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e84e:	f3ef 8305 	mrs	r3, IPSR
 800e852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2b0f      	cmp	r3, #15
 800e858:	d915      	bls.n	800e886 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e85a:	4a18      	ldr	r2, [pc, #96]	; (800e8bc <vPortValidateInterruptPriority+0x74>)
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	4413      	add	r3, r2
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e864:	4b16      	ldr	r3, [pc, #88]	; (800e8c0 <vPortValidateInterruptPriority+0x78>)
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	7afa      	ldrb	r2, [r7, #11]
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d20b      	bcs.n	800e886 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e872:	b672      	cpsid	i
 800e874:	f383 8811 	msr	BASEPRI, r3
 800e878:	f3bf 8f6f 	isb	sy
 800e87c:	f3bf 8f4f 	dsb	sy
 800e880:	b662      	cpsie	i
 800e882:	607b      	str	r3, [r7, #4]
 800e884:	e7fe      	b.n	800e884 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e886:	4b0f      	ldr	r3, [pc, #60]	; (800e8c4 <vPortValidateInterruptPriority+0x7c>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e88e:	4b0e      	ldr	r3, [pc, #56]	; (800e8c8 <vPortValidateInterruptPriority+0x80>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	429a      	cmp	r2, r3
 800e894:	d90b      	bls.n	800e8ae <vPortValidateInterruptPriority+0x66>
 800e896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89a:	b672      	cpsid	i
 800e89c:	f383 8811 	msr	BASEPRI, r3
 800e8a0:	f3bf 8f6f 	isb	sy
 800e8a4:	f3bf 8f4f 	dsb	sy
 800e8a8:	b662      	cpsie	i
 800e8aa:	603b      	str	r3, [r7, #0]
 800e8ac:	e7fe      	b.n	800e8ac <vPortValidateInterruptPriority+0x64>
	}
 800e8ae:	bf00      	nop
 800e8b0:	3714      	adds	r7, #20
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr
 800e8ba:	bf00      	nop
 800e8bc:	e000e3f0 	.word	0xe000e3f0
 800e8c0:	200004d0 	.word	0x200004d0
 800e8c4:	e000ed0c 	.word	0xe000ed0c
 800e8c8:	200004d4 	.word	0x200004d4

0800e8cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b08a      	sub	sp, #40	; 0x28
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e8d8:	f7fe ffa2 	bl	800d820 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e8dc:	4b5c      	ldr	r3, [pc, #368]	; (800ea50 <pvPortMalloc+0x184>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d101      	bne.n	800e8e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e8e4:	f000 f91a 	bl	800eb1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e8e8:	4b5a      	ldr	r3, [pc, #360]	; (800ea54 <pvPortMalloc+0x188>)
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	4013      	ands	r3, r2
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	f040 8090 	bne.w	800ea16 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d01e      	beq.n	800e93a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e8fc:	2208      	movs	r2, #8
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	4413      	add	r3, r2
 800e902:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f003 0307 	and.w	r3, r3, #7
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d015      	beq.n	800e93a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f023 0307 	bic.w	r3, r3, #7
 800e914:	3308      	adds	r3, #8
 800e916:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f003 0307 	and.w	r3, r3, #7
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d00b      	beq.n	800e93a <pvPortMalloc+0x6e>
 800e922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e926:	b672      	cpsid	i
 800e928:	f383 8811 	msr	BASEPRI, r3
 800e92c:	f3bf 8f6f 	isb	sy
 800e930:	f3bf 8f4f 	dsb	sy
 800e934:	b662      	cpsie	i
 800e936:	617b      	str	r3, [r7, #20]
 800e938:	e7fe      	b.n	800e938 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d06a      	beq.n	800ea16 <pvPortMalloc+0x14a>
 800e940:	4b45      	ldr	r3, [pc, #276]	; (800ea58 <pvPortMalloc+0x18c>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	687a      	ldr	r2, [r7, #4]
 800e946:	429a      	cmp	r2, r3
 800e948:	d865      	bhi.n	800ea16 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e94a:	4b44      	ldr	r3, [pc, #272]	; (800ea5c <pvPortMalloc+0x190>)
 800e94c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e94e:	4b43      	ldr	r3, [pc, #268]	; (800ea5c <pvPortMalloc+0x190>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e954:	e004      	b.n	800e960 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e962:	685b      	ldr	r3, [r3, #4]
 800e964:	687a      	ldr	r2, [r7, #4]
 800e966:	429a      	cmp	r2, r3
 800e968:	d903      	bls.n	800e972 <pvPortMalloc+0xa6>
 800e96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d1f1      	bne.n	800e956 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e972:	4b37      	ldr	r3, [pc, #220]	; (800ea50 <pvPortMalloc+0x184>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e978:	429a      	cmp	r2, r3
 800e97a:	d04c      	beq.n	800ea16 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e97c:	6a3b      	ldr	r3, [r7, #32]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2208      	movs	r2, #8
 800e982:	4413      	add	r3, r2
 800e984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	6a3b      	ldr	r3, [r7, #32]
 800e98c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e990:	685a      	ldr	r2, [r3, #4]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	1ad2      	subs	r2, r2, r3
 800e996:	2308      	movs	r3, #8
 800e998:	005b      	lsls	r3, r3, #1
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d920      	bls.n	800e9e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e99e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	4413      	add	r3, r2
 800e9a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	f003 0307 	and.w	r3, r3, #7
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d00b      	beq.n	800e9c8 <pvPortMalloc+0xfc>
 800e9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b4:	b672      	cpsid	i
 800e9b6:	f383 8811 	msr	BASEPRI, r3
 800e9ba:	f3bf 8f6f 	isb	sy
 800e9be:	f3bf 8f4f 	dsb	sy
 800e9c2:	b662      	cpsie	i
 800e9c4:	613b      	str	r3, [r7, #16]
 800e9c6:	e7fe      	b.n	800e9c6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ca:	685a      	ldr	r2, [r3, #4]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	1ad2      	subs	r2, r2, r3
 800e9d0:	69bb      	ldr	r3, [r7, #24]
 800e9d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d6:	687a      	ldr	r2, [r7, #4]
 800e9d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e9da:	69b8      	ldr	r0, [r7, #24]
 800e9dc:	f000 f900 	bl	800ebe0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e9e0:	4b1d      	ldr	r3, [pc, #116]	; (800ea58 <pvPortMalloc+0x18c>)
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	1ad3      	subs	r3, r2, r3
 800e9ea:	4a1b      	ldr	r2, [pc, #108]	; (800ea58 <pvPortMalloc+0x18c>)
 800e9ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e9ee:	4b1a      	ldr	r3, [pc, #104]	; (800ea58 <pvPortMalloc+0x18c>)
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	4b1b      	ldr	r3, [pc, #108]	; (800ea60 <pvPortMalloc+0x194>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d203      	bcs.n	800ea02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e9fa:	4b17      	ldr	r3, [pc, #92]	; (800ea58 <pvPortMalloc+0x18c>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4a18      	ldr	r2, [pc, #96]	; (800ea60 <pvPortMalloc+0x194>)
 800ea00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea04:	685a      	ldr	r2, [r3, #4]
 800ea06:	4b13      	ldr	r3, [pc, #76]	; (800ea54 <pvPortMalloc+0x188>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	431a      	orrs	r2, r3
 800ea0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea12:	2200      	movs	r2, #0
 800ea14:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea16:	f7fe ff11 	bl	800d83c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d101      	bne.n	800ea24 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ea20:	f7f1 ffb4 	bl	800098c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	f003 0307 	and.w	r3, r3, #7
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d00b      	beq.n	800ea46 <pvPortMalloc+0x17a>
 800ea2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea32:	b672      	cpsid	i
 800ea34:	f383 8811 	msr	BASEPRI, r3
 800ea38:	f3bf 8f6f 	isb	sy
 800ea3c:	f3bf 8f4f 	dsb	sy
 800ea40:	b662      	cpsie	i
 800ea42:	60fb      	str	r3, [r7, #12]
 800ea44:	e7fe      	b.n	800ea44 <pvPortMalloc+0x178>
	return pvReturn;
 800ea46:	69fb      	ldr	r3, [r7, #28]
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3728      	adds	r7, #40	; 0x28
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	200084e0 	.word	0x200084e0
 800ea54:	200084ec 	.word	0x200084ec
 800ea58:	200084e4 	.word	0x200084e4
 800ea5c:	200084d8 	.word	0x200084d8
 800ea60:	200084e8 	.word	0x200084e8

0800ea64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b086      	sub	sp, #24
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d04a      	beq.n	800eb0c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea76:	2308      	movs	r3, #8
 800ea78:	425b      	negs	r3, r3
 800ea7a:	697a      	ldr	r2, [r7, #20]
 800ea7c:	4413      	add	r3, r2
 800ea7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	685a      	ldr	r2, [r3, #4]
 800ea88:	4b22      	ldr	r3, [pc, #136]	; (800eb14 <vPortFree+0xb0>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	4013      	ands	r3, r2
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d10b      	bne.n	800eaaa <vPortFree+0x46>
 800ea92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea96:	b672      	cpsid	i
 800ea98:	f383 8811 	msr	BASEPRI, r3
 800ea9c:	f3bf 8f6f 	isb	sy
 800eaa0:	f3bf 8f4f 	dsb	sy
 800eaa4:	b662      	cpsie	i
 800eaa6:	60fb      	str	r3, [r7, #12]
 800eaa8:	e7fe      	b.n	800eaa8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d00b      	beq.n	800eaca <vPortFree+0x66>
 800eab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab6:	b672      	cpsid	i
 800eab8:	f383 8811 	msr	BASEPRI, r3
 800eabc:	f3bf 8f6f 	isb	sy
 800eac0:	f3bf 8f4f 	dsb	sy
 800eac4:	b662      	cpsie	i
 800eac6:	60bb      	str	r3, [r7, #8]
 800eac8:	e7fe      	b.n	800eac8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	685a      	ldr	r2, [r3, #4]
 800eace:	4b11      	ldr	r3, [pc, #68]	; (800eb14 <vPortFree+0xb0>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	4013      	ands	r3, r2
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d019      	beq.n	800eb0c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d115      	bne.n	800eb0c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	685a      	ldr	r2, [r3, #4]
 800eae4:	4b0b      	ldr	r3, [pc, #44]	; (800eb14 <vPortFree+0xb0>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	43db      	mvns	r3, r3
 800eaea:	401a      	ands	r2, r3
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eaf0:	f7fe fe96 	bl	800d820 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	685a      	ldr	r2, [r3, #4]
 800eaf8:	4b07      	ldr	r3, [pc, #28]	; (800eb18 <vPortFree+0xb4>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4413      	add	r3, r2
 800eafe:	4a06      	ldr	r2, [pc, #24]	; (800eb18 <vPortFree+0xb4>)
 800eb00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb02:	6938      	ldr	r0, [r7, #16]
 800eb04:	f000 f86c 	bl	800ebe0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eb08:	f7fe fe98 	bl	800d83c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb0c:	bf00      	nop
 800eb0e:	3718      	adds	r7, #24
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	200084ec 	.word	0x200084ec
 800eb18:	200084e4 	.word	0x200084e4

0800eb1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b085      	sub	sp, #20
 800eb20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eb22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eb28:	4b27      	ldr	r3, [pc, #156]	; (800ebc8 <prvHeapInit+0xac>)
 800eb2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	f003 0307 	and.w	r3, r3, #7
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d00c      	beq.n	800eb50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	3307      	adds	r3, #7
 800eb3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f023 0307 	bic.w	r3, r3, #7
 800eb42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eb44:	68ba      	ldr	r2, [r7, #8]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	1ad3      	subs	r3, r2, r3
 800eb4a:	4a1f      	ldr	r2, [pc, #124]	; (800ebc8 <prvHeapInit+0xac>)
 800eb4c:	4413      	add	r3, r2
 800eb4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb54:	4a1d      	ldr	r2, [pc, #116]	; (800ebcc <prvHeapInit+0xb0>)
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb5a:	4b1c      	ldr	r3, [pc, #112]	; (800ebcc <prvHeapInit+0xb0>)
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	68ba      	ldr	r2, [r7, #8]
 800eb64:	4413      	add	r3, r2
 800eb66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb68:	2208      	movs	r2, #8
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	1a9b      	subs	r3, r3, r2
 800eb6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f023 0307 	bic.w	r3, r3, #7
 800eb76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	4a15      	ldr	r2, [pc, #84]	; (800ebd0 <prvHeapInit+0xb4>)
 800eb7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eb7e:	4b14      	ldr	r3, [pc, #80]	; (800ebd0 <prvHeapInit+0xb4>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	2200      	movs	r2, #0
 800eb84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eb86:	4b12      	ldr	r3, [pc, #72]	; (800ebd0 <prvHeapInit+0xb4>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	68fa      	ldr	r2, [r7, #12]
 800eb96:	1ad2      	subs	r2, r2, r3
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb9c:	4b0c      	ldr	r3, [pc, #48]	; (800ebd0 <prvHeapInit+0xb4>)
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	685b      	ldr	r3, [r3, #4]
 800eba8:	4a0a      	ldr	r2, [pc, #40]	; (800ebd4 <prvHeapInit+0xb8>)
 800ebaa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	4a09      	ldr	r2, [pc, #36]	; (800ebd8 <prvHeapInit+0xbc>)
 800ebb2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ebb4:	4b09      	ldr	r3, [pc, #36]	; (800ebdc <prvHeapInit+0xc0>)
 800ebb6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ebba:	601a      	str	r2, [r3, #0]
}
 800ebbc:	bf00      	nop
 800ebbe:	3714      	adds	r7, #20
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr
 800ebc8:	200004d8 	.word	0x200004d8
 800ebcc:	200084d8 	.word	0x200084d8
 800ebd0:	200084e0 	.word	0x200084e0
 800ebd4:	200084e8 	.word	0x200084e8
 800ebd8:	200084e4 	.word	0x200084e4
 800ebdc:	200084ec 	.word	0x200084ec

0800ebe0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b085      	sub	sp, #20
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ebe8:	4b28      	ldr	r3, [pc, #160]	; (800ec8c <prvInsertBlockIntoFreeList+0xac>)
 800ebea:	60fb      	str	r3, [r7, #12]
 800ebec:	e002      	b.n	800ebf4 <prvInsertBlockIntoFreeList+0x14>
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	60fb      	str	r3, [r7, #12]
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d8f7      	bhi.n	800ebee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	68ba      	ldr	r2, [r7, #8]
 800ec08:	4413      	add	r3, r2
 800ec0a:	687a      	ldr	r2, [r7, #4]
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d108      	bne.n	800ec22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	685a      	ldr	r2, [r3, #4]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	441a      	add	r2, r3
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	68ba      	ldr	r2, [r7, #8]
 800ec2c:	441a      	add	r2, r3
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d118      	bne.n	800ec68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	4b15      	ldr	r3, [pc, #84]	; (800ec90 <prvInsertBlockIntoFreeList+0xb0>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d00d      	beq.n	800ec5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	685a      	ldr	r2, [r3, #4]
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	441a      	add	r2, r3
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	601a      	str	r2, [r3, #0]
 800ec5c:	e008      	b.n	800ec70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec5e:	4b0c      	ldr	r3, [pc, #48]	; (800ec90 <prvInsertBlockIntoFreeList+0xb0>)
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	601a      	str	r2, [r3, #0]
 800ec66:	e003      	b.n	800ec70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec70:	68fa      	ldr	r2, [r7, #12]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d002      	beq.n	800ec7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	687a      	ldr	r2, [r7, #4]
 800ec7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec7e:	bf00      	nop
 800ec80:	3714      	adds	r7, #20
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr
 800ec8a:	bf00      	nop
 800ec8c:	200084d8 	.word	0x200084d8
 800ec90:	200084e0 	.word	0x200084e0

0800ec94 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b08c      	sub	sp, #48	; 0x30
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	4a51      	ldr	r2, [pc, #324]	; (800ede4 <I2Cx_MspInit+0x150>)
 800eca0:	4293      	cmp	r3, r2
 800eca2:	d14d      	bne.n	800ed40 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800eca4:	4b50      	ldr	r3, [pc, #320]	; (800ede8 <I2Cx_MspInit+0x154>)
 800eca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eca8:	4a4f      	ldr	r2, [pc, #316]	; (800ede8 <I2Cx_MspInit+0x154>)
 800ecaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecae:	6313      	str	r3, [r2, #48]	; 0x30
 800ecb0:	4b4d      	ldr	r3, [pc, #308]	; (800ede8 <I2Cx_MspInit+0x154>)
 800ecb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecb8:	61bb      	str	r3, [r7, #24]
 800ecba:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800ecbc:	2380      	movs	r3, #128	; 0x80
 800ecbe:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800ecc0:	2312      	movs	r3, #18
 800ecc2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800ecc8:	2302      	movs	r3, #2
 800ecca:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800eccc:	2304      	movs	r3, #4
 800ecce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800ecd0:	f107 031c 	add.w	r3, r7, #28
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	4845      	ldr	r0, [pc, #276]	; (800edec <I2Cx_MspInit+0x158>)
 800ecd8:	f7f5 fcbc 	bl	8004654 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800ecdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ece0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800ece2:	f107 031c 	add.w	r3, r7, #28
 800ece6:	4619      	mov	r1, r3
 800ece8:	4840      	ldr	r0, [pc, #256]	; (800edec <I2Cx_MspInit+0x158>)
 800ecea:	f7f5 fcb3 	bl	8004654 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800ecee:	4b3e      	ldr	r3, [pc, #248]	; (800ede8 <I2Cx_MspInit+0x154>)
 800ecf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecf2:	4a3d      	ldr	r2, [pc, #244]	; (800ede8 <I2Cx_MspInit+0x154>)
 800ecf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ecf8:	6413      	str	r3, [r2, #64]	; 0x40
 800ecfa:	4b3b      	ldr	r3, [pc, #236]	; (800ede8 <I2Cx_MspInit+0x154>)
 800ecfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed02:	617b      	str	r3, [r7, #20]
 800ed04:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800ed06:	4b38      	ldr	r3, [pc, #224]	; (800ede8 <I2Cx_MspInit+0x154>)
 800ed08:	6a1b      	ldr	r3, [r3, #32]
 800ed0a:	4a37      	ldr	r2, [pc, #220]	; (800ede8 <I2Cx_MspInit+0x154>)
 800ed0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ed10:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800ed12:	4b35      	ldr	r3, [pc, #212]	; (800ede8 <I2Cx_MspInit+0x154>)
 800ed14:	6a1b      	ldr	r3, [r3, #32]
 800ed16:	4a34      	ldr	r2, [pc, #208]	; (800ede8 <I2Cx_MspInit+0x154>)
 800ed18:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ed1c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800ed1e:	2200      	movs	r2, #0
 800ed20:	210f      	movs	r1, #15
 800ed22:	2048      	movs	r0, #72	; 0x48
 800ed24:	f7f4 fe68 	bl	80039f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800ed28:	2048      	movs	r0, #72	; 0x48
 800ed2a:	f7f4 fe81 	bl	8003a30 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800ed2e:	2200      	movs	r2, #0
 800ed30:	210f      	movs	r1, #15
 800ed32:	2049      	movs	r0, #73	; 0x49
 800ed34:	f7f4 fe60 	bl	80039f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800ed38:	2049      	movs	r0, #73	; 0x49
 800ed3a:	f7f4 fe79 	bl	8003a30 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800ed3e:	e04d      	b.n	800eddc <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800ed40:	4b29      	ldr	r3, [pc, #164]	; (800ede8 <I2Cx_MspInit+0x154>)
 800ed42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed44:	4a28      	ldr	r2, [pc, #160]	; (800ede8 <I2Cx_MspInit+0x154>)
 800ed46:	f043 0302 	orr.w	r3, r3, #2
 800ed4a:	6313      	str	r3, [r2, #48]	; 0x30
 800ed4c:	4b26      	ldr	r3, [pc, #152]	; (800ede8 <I2Cx_MspInit+0x154>)
 800ed4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed50:	f003 0302 	and.w	r3, r3, #2
 800ed54:	613b      	str	r3, [r7, #16]
 800ed56:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800ed58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed5c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800ed5e:	2312      	movs	r3, #18
 800ed60:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800ed62:	2300      	movs	r3, #0
 800ed64:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800ed66:	2302      	movs	r3, #2
 800ed68:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800ed6a:	2304      	movs	r3, #4
 800ed6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800ed6e:	f107 031c 	add.w	r3, r7, #28
 800ed72:	4619      	mov	r1, r3
 800ed74:	481e      	ldr	r0, [pc, #120]	; (800edf0 <I2Cx_MspInit+0x15c>)
 800ed76:	f7f5 fc6d 	bl	8004654 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800ed7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ed7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800ed80:	f107 031c 	add.w	r3, r7, #28
 800ed84:	4619      	mov	r1, r3
 800ed86:	481a      	ldr	r0, [pc, #104]	; (800edf0 <I2Cx_MspInit+0x15c>)
 800ed88:	f7f5 fc64 	bl	8004654 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800ed8c:	4b16      	ldr	r3, [pc, #88]	; (800ede8 <I2Cx_MspInit+0x154>)
 800ed8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed90:	4a15      	ldr	r2, [pc, #84]	; (800ede8 <I2Cx_MspInit+0x154>)
 800ed92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ed96:	6413      	str	r3, [r2, #64]	; 0x40
 800ed98:	4b13      	ldr	r3, [pc, #76]	; (800ede8 <I2Cx_MspInit+0x154>)
 800ed9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eda0:	60fb      	str	r3, [r7, #12]
 800eda2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800eda4:	4b10      	ldr	r3, [pc, #64]	; (800ede8 <I2Cx_MspInit+0x154>)
 800eda6:	6a1b      	ldr	r3, [r3, #32]
 800eda8:	4a0f      	ldr	r2, [pc, #60]	; (800ede8 <I2Cx_MspInit+0x154>)
 800edaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800edae:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800edb0:	4b0d      	ldr	r3, [pc, #52]	; (800ede8 <I2Cx_MspInit+0x154>)
 800edb2:	6a1b      	ldr	r3, [r3, #32]
 800edb4:	4a0c      	ldr	r2, [pc, #48]	; (800ede8 <I2Cx_MspInit+0x154>)
 800edb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800edba:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800edbc:	2200      	movs	r2, #0
 800edbe:	210f      	movs	r1, #15
 800edc0:	201f      	movs	r0, #31
 800edc2:	f7f4 fe19 	bl	80039f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800edc6:	201f      	movs	r0, #31
 800edc8:	f7f4 fe32 	bl	8003a30 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800edcc:	2200      	movs	r2, #0
 800edce:	210f      	movs	r1, #15
 800edd0:	2020      	movs	r0, #32
 800edd2:	f7f4 fe11 	bl	80039f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800edd6:	2020      	movs	r0, #32
 800edd8:	f7f4 fe2a 	bl	8003a30 <HAL_NVIC_EnableIRQ>
}
 800eddc:	bf00      	nop
 800edde:	3730      	adds	r7, #48	; 0x30
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	200084f0 	.word	0x200084f0
 800ede8:	40023800 	.word	0x40023800
 800edec:	40021c00 	.word	0x40021c00
 800edf0:	40020400 	.word	0x40020400

0800edf4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b082      	sub	sp, #8
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f7f6 f9fd 	bl	80051fc <HAL_I2C_GetState>
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d125      	bne.n	800ee54 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	4a14      	ldr	r2, [pc, #80]	; (800ee5c <I2Cx_Init+0x68>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d103      	bne.n	800ee18 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	4a13      	ldr	r2, [pc, #76]	; (800ee60 <I2Cx_Init+0x6c>)
 800ee14:	601a      	str	r2, [r3, #0]
 800ee16:	e002      	b.n	800ee1e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	4a12      	ldr	r2, [pc, #72]	; (800ee64 <I2Cx_Init+0x70>)
 800ee1c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	4a11      	ldr	r2, [pc, #68]	; (800ee68 <I2Cx_Init+0x74>)
 800ee22:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2201      	movs	r2, #1
 800ee2e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2200      	movs	r2, #0
 800ee34:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2200      	movs	r2, #0
 800ee3a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2200      	movs	r2, #0
 800ee46:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f7ff ff23 	bl	800ec94 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f7f5 fee6 	bl	8004c20 <HAL_I2C_Init>
  }
}
 800ee54:	bf00      	nop
 800ee56:	3708      	adds	r7, #8
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	200084f0 	.word	0x200084f0
 800ee60:	40005c00 	.word	0x40005c00
 800ee64:	40005400 	.word	0x40005400
 800ee68:	40912732 	.word	0x40912732

0800ee6c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b08a      	sub	sp, #40	; 0x28
 800ee70:	af04      	add	r7, sp, #16
 800ee72:	60f8      	str	r0, [r7, #12]
 800ee74:	4608      	mov	r0, r1
 800ee76:	4611      	mov	r1, r2
 800ee78:	461a      	mov	r2, r3
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	72fb      	strb	r3, [r7, #11]
 800ee7e:	460b      	mov	r3, r1
 800ee80:	813b      	strh	r3, [r7, #8]
 800ee82:	4613      	mov	r3, r2
 800ee84:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800ee86:	2300      	movs	r3, #0
 800ee88:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800ee8a:	7afb      	ldrb	r3, [r7, #11]
 800ee8c:	b299      	uxth	r1, r3
 800ee8e:	88f8      	ldrh	r0, [r7, #6]
 800ee90:	893a      	ldrh	r2, [r7, #8]
 800ee92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ee96:	9302      	str	r3, [sp, #8]
 800ee98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee9a:	9301      	str	r3, [sp, #4]
 800ee9c:	6a3b      	ldr	r3, [r7, #32]
 800ee9e:	9300      	str	r3, [sp, #0]
 800eea0:	4603      	mov	r3, r0
 800eea2:	68f8      	ldr	r0, [r7, #12]
 800eea4:	f7f6 f890 	bl	8004fc8 <HAL_I2C_Mem_Read>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800eeac:	7dfb      	ldrb	r3, [r7, #23]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d004      	beq.n	800eebc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800eeb2:	7afb      	ldrb	r3, [r7, #11]
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	68f8      	ldr	r0, [r7, #12]
 800eeb8:	f000 f832 	bl	800ef20 <I2Cx_Error>
  }
  return status;    
 800eebc:	7dfb      	ldrb	r3, [r7, #23]
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3718      	adds	r7, #24
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800eec6:	b580      	push	{r7, lr}
 800eec8:	b08a      	sub	sp, #40	; 0x28
 800eeca:	af04      	add	r7, sp, #16
 800eecc:	60f8      	str	r0, [r7, #12]
 800eece:	4608      	mov	r0, r1
 800eed0:	4611      	mov	r1, r2
 800eed2:	461a      	mov	r2, r3
 800eed4:	4603      	mov	r3, r0
 800eed6:	72fb      	strb	r3, [r7, #11]
 800eed8:	460b      	mov	r3, r1
 800eeda:	813b      	strh	r3, [r7, #8]
 800eedc:	4613      	mov	r3, r2
 800eede:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800eee0:	2300      	movs	r3, #0
 800eee2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800eee4:	7afb      	ldrb	r3, [r7, #11]
 800eee6:	b299      	uxth	r1, r3
 800eee8:	88f8      	ldrh	r0, [r7, #6]
 800eeea:	893a      	ldrh	r2, [r7, #8]
 800eeec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eef0:	9302      	str	r3, [sp, #8]
 800eef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eef4:	9301      	str	r3, [sp, #4]
 800eef6:	6a3b      	ldr	r3, [r7, #32]
 800eef8:	9300      	str	r3, [sp, #0]
 800eefa:	4603      	mov	r3, r0
 800eefc:	68f8      	ldr	r0, [r7, #12]
 800eefe:	f7f5 ff4f 	bl	8004da0 <HAL_I2C_Mem_Write>
 800ef02:	4603      	mov	r3, r0
 800ef04:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800ef06:	7dfb      	ldrb	r3, [r7, #23]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d004      	beq.n	800ef16 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800ef0c:	7afb      	ldrb	r3, [r7, #11]
 800ef0e:	4619      	mov	r1, r3
 800ef10:	68f8      	ldr	r0, [r7, #12]
 800ef12:	f000 f805 	bl	800ef20 <I2Cx_Error>
  }
  return status;
 800ef16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3718      	adds	r7, #24
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	460b      	mov	r3, r1
 800ef2a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f7f5 ff07 	bl	8004d40 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f7ff ff5e 	bl	800edf4 <I2Cx_Init>
}
 800ef38:	bf00      	nop
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800ef44:	4802      	ldr	r0, [pc, #8]	; (800ef50 <TS_IO_Init+0x10>)
 800ef46:	f7ff ff55 	bl	800edf4 <I2Cx_Init>
}
 800ef4a:	bf00      	nop
 800ef4c:	bd80      	pop	{r7, pc}
 800ef4e:	bf00      	nop
 800ef50:	200084f0 	.word	0x200084f0

0800ef54 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af02      	add	r7, sp, #8
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	71fb      	strb	r3, [r7, #7]
 800ef5e:	460b      	mov	r3, r1
 800ef60:	71bb      	strb	r3, [r7, #6]
 800ef62:	4613      	mov	r3, r2
 800ef64:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800ef66:	79bb      	ldrb	r3, [r7, #6]
 800ef68:	b29a      	uxth	r2, r3
 800ef6a:	79f9      	ldrb	r1, [r7, #7]
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	9301      	str	r3, [sp, #4]
 800ef70:	1d7b      	adds	r3, r7, #5
 800ef72:	9300      	str	r3, [sp, #0]
 800ef74:	2301      	movs	r3, #1
 800ef76:	4803      	ldr	r0, [pc, #12]	; (800ef84 <TS_IO_Write+0x30>)
 800ef78:	f7ff ffa5 	bl	800eec6 <I2Cx_WriteMultiple>
}
 800ef7c:	bf00      	nop
 800ef7e:	3708      	adds	r7, #8
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	200084f0 	.word	0x200084f0

0800ef88 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b086      	sub	sp, #24
 800ef8c:	af02      	add	r7, sp, #8
 800ef8e:	4603      	mov	r3, r0
 800ef90:	460a      	mov	r2, r1
 800ef92:	71fb      	strb	r3, [r7, #7]
 800ef94:	4613      	mov	r3, r2
 800ef96:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800ef9c:	79bb      	ldrb	r3, [r7, #6]
 800ef9e:	b29a      	uxth	r2, r3
 800efa0:	79f9      	ldrb	r1, [r7, #7]
 800efa2:	2301      	movs	r3, #1
 800efa4:	9301      	str	r3, [sp, #4]
 800efa6:	f107 030f 	add.w	r3, r7, #15
 800efaa:	9300      	str	r3, [sp, #0]
 800efac:	2301      	movs	r3, #1
 800efae:	4804      	ldr	r0, [pc, #16]	; (800efc0 <TS_IO_Read+0x38>)
 800efb0:	f7ff ff5c 	bl	800ee6c <I2Cx_ReadMultiple>

  return read_value;
 800efb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3710      	adds	r7, #16
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	200084f0 	.word	0x200084f0

0800efc4 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f7f4 f98f 	bl	80032f0 <HAL_Delay>
}
 800efd2:	bf00      	nop
 800efd4:	3708      	adds	r7, #8
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}

0800efda <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800efda:	b580      	push	{r7, lr}
 800efdc:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800efde:	f006 fad7 	bl	8015590 <touchgfx_init>
}
 800efe2:	bf00      	nop
 800efe4:	bd80      	pop	{r7, pc}

0800efe6 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800efe6:	b580      	push	{r7, lr}
 800efe8:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800efea:	f006 fafb 	bl	80155e4 <touchgfx_taskEntry>
}
 800efee:	bf00      	nop
 800eff0:	bd80      	pop	{r7, pc}
	...

0800eff4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800eff4:	b480      	push	{r7}
 800eff6:	b083      	sub	sp, #12
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
    {
 800effc:	4a04      	ldr	r2, [pc, #16]	; (800f010 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	601a      	str	r2, [r3, #0]
    }
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	4618      	mov	r0, r3
 800f006:	370c      	adds	r7, #12
 800f008:	46bd      	mov	sp, r7
 800f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00e:	4770      	bx	lr
 800f010:	080286e4 	.word	0x080286e4

0800f014 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f014:	b580      	push	{r7, lr}
 800f016:	b082      	sub	sp, #8
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
    }
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f7ff ffe9 	bl	800eff4 <_ZN8touchgfx12FontProviderD1Ev>
 800f022:	2104      	movs	r1, #4
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f017 fee5 	bl	8026df4 <_ZdlPvj>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	4618      	mov	r0, r3
 800f02e:	3708      	adds	r7, #8
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	460b      	mov	r3, r1
 800f03e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f040:	887b      	ldrh	r3, [r7, #2]
 800f042:	2b01      	cmp	r3, #1
 800f044:	d008      	beq.n	800f058 <_ZN23ApplicationFontProvider7getFontEt+0x24>
 800f046:	2b02      	cmp	r3, #2
 800f048:	d00b      	beq.n	800f062 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d10e      	bne.n	800f06c <_ZN23ApplicationFontProvider7getFontEt+0x38>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f04e:	f004 fc2b 	bl	80138a8 <_ZN17TypedTextDatabase8getFontsEv>
 800f052:	4603      	mov	r3, r0
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	e00a      	b.n	800f06e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f058:	f004 fc26 	bl	80138a8 <_ZN17TypedTextDatabase8getFontsEv>
 800f05c:	4603      	mov	r3, r0
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	e005      	b.n	800f06e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f062:	f004 fc21 	bl	80138a8 <_ZN17TypedTextDatabase8getFontsEv>
 800f066:	4603      	mov	r3, r0
 800f068:	689b      	ldr	r3, [r3, #8]
 800f06a:	e000      	b.n	800f06e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    default:
        return 0;
 800f06c:	2300      	movs	r3, #0
    }
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3708      	adds	r7, #8
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
	...

0800f078 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f078:	b580      	push	{r7, lr}
 800f07a:	b082      	sub	sp, #8
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	4a05      	ldr	r2, [pc, #20]	; (800f098 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	601a      	str	r2, [r3, #0]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4618      	mov	r0, r3
 800f08a:	f7ff ffb3 	bl	800eff4 <_ZN8touchgfx12FontProviderD1Ev>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4618      	mov	r0, r3
 800f092:	3708      	adds	r7, #8
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}
 800f098:	080286d0 	.word	0x080286d0

0800f09c <_ZN23ApplicationFontProviderD0Ev>:
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f7ff ffe7 	bl	800f078 <_ZN23ApplicationFontProviderD1Ev>
 800f0aa:	2104      	movs	r1, #4
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f017 fea1 	bl	8026df4 <_ZdlPvj>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3708      	adds	r7, #8
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800f0bc:	b480      	push	{r7}
 800f0be:	b083      	sub	sp, #12
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
    {
 800f0c4:	4a04      	ldr	r2, [pc, #16]	; (800f0d8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	601a      	str	r2, [r3, #0]
    }
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	370c      	adds	r7, #12
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr
 800f0d8:	08029124 	.word	0x08029124

0800f0dc <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
    }
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7ff ffe9 	bl	800f0bc <_ZN8touchgfx4FontD1Ev>
 800f0ea:	2110      	movs	r1, #16
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f017 fe81 	bl	8026df4 <_ZdlPvj>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3708      	adds	r7, #8
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f0fc:	b590      	push	{r4, r7, lr}
 800f0fe:	b087      	sub	sp, #28
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	460b      	mov	r3, r1
 800f106:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800f108:	887b      	ldrh	r3, [r7, #2]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d101      	bne.n	800f112 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800f10e:	2300      	movs	r3, #0
 800f110:	e010      	b.n	800f134 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800f112:	2300      	movs	r3, #0
 800f114:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f116:	2300      	movs	r3, #0
 800f118:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	3308      	adds	r3, #8
 800f120:	681c      	ldr	r4, [r3, #0]
 800f122:	f107 030f 	add.w	r3, r7, #15
 800f126:	f107 0210 	add.w	r2, r7, #16
 800f12a:	8879      	ldrh	r1, [r7, #2]
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	47a0      	blx	r4
 800f130:	6178      	str	r0, [r7, #20]
        return glyph;
 800f132:	697b      	ldr	r3, [r7, #20]
    }
 800f134:	4618      	mov	r0, r3
 800f136:	371c      	adds	r7, #28
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd90      	pop	{r4, r7, pc}

0800f13c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f13c:	b480      	push	{r7}
 800f13e:	b083      	sub	sp, #12
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	895b      	ldrh	r3, [r3, #10]
    }
 800f148:	4618      	mov	r0, r3
 800f14a:	370c      	adds	r7, #12
 800f14c:	46bd      	mov	sp, r7
 800f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f152:	4770      	bx	lr

0800f154 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f154:	b480      	push	{r7}
 800f156:	b083      	sub	sp, #12
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	899b      	ldrh	r3, [r3, #12]
    }
 800f160:	4618      	mov	r0, r3
 800f162:	370c      	adds	r7, #12
 800f164:	46bd      	mov	sp, r7
 800f166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16a:	4770      	bx	lr

0800f16c <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800f16c:	b480      	push	{r7}
 800f16e:	b083      	sub	sp, #12
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	889b      	ldrh	r3, [r3, #4]
    }
 800f178:	4618      	mov	r0, r3
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr

0800f184 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	889a      	ldrh	r2, [r3, #4]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	799b      	ldrb	r3, [r3, #6]
 800f194:	b29b      	uxth	r3, r3
 800f196:	4413      	add	r3, r2
 800f198:	b29b      	uxth	r3, r3
    }
 800f19a:	4618      	mov	r0, r3
 800f19c:	370c      	adds	r7, #12
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a4:	4770      	bx	lr

0800f1a6 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800f1a6:	b480      	push	{r7}
 800f1a8:	b083      	sub	sp, #12
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	79db      	ldrb	r3, [r3, #7]
 800f1b2:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f1b6:	b2db      	uxtb	r3, r3
    }
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	370c      	adds	r7, #12
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr

0800f1c4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800f1c4:	b480      	push	{r7}
 800f1c6:	b083      	sub	sp, #12
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	79db      	ldrb	r3, [r3, #7]
 800f1d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f1d4:	b2db      	uxtb	r3, r3
    }
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	370c      	adds	r7, #12
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e0:	4770      	bx	lr
	...

0800f1e4 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b082      	sub	sp, #8
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	4a05      	ldr	r2, [pc, #20]	; (800f204 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	601a      	str	r2, [r3, #0]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7ff ff61 	bl	800f0bc <_ZN8touchgfx4FontD1Ev>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3708      	adds	r7, #8
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}
 800f204:	0802b564 	.word	0x0802b564

0800f208 <_ZN8touchgfx9ConstFontD0Ev>:
 800f208:	b580      	push	{r7, lr}
 800f20a:	b082      	sub	sp, #8
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f7ff ffe7 	bl	800f1e4 <_ZN8touchgfx9ConstFontD1Ev>
 800f216:	2118      	movs	r1, #24
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f017 fdeb 	bl	8026df4 <_ZdlPvj>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	4618      	mov	r0, r3
 800f222:	3708      	adds	r7, #8
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	4a05      	ldr	r2, [pc, #20]	; (800f248 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	601a      	str	r2, [r3, #0]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4618      	mov	r0, r3
 800f23a:	f7ff ffd3 	bl	800f1e4 <_ZN8touchgfx9ConstFontD1Ev>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4618      	mov	r0, r3
 800f242:	3708      	adds	r7, #8
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	08028708 	.word	0x08028708

0800f24c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f7ff ffe7 	bl	800f228 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f25a:	2124      	movs	r1, #36	; 0x24
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f017 fdc9 	bl	8026df4 <_ZdlPvj>
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	4618      	mov	r0, r3
 800f266:	3708      	adds	r7, #8
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800f26c:	b480      	push	{r7}
 800f26e:	b083      	sub	sp, #12
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
    {
 800f274:	4a04      	ldr	r2, [pc, #16]	; (800f288 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	601a      	str	r2, [r3, #0]
    }
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	4618      	mov	r0, r3
 800f27e:	370c      	adds	r7, #12
 800f280:	46bd      	mov	sp, r7
 800f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f286:	4770      	bx	lr
 800f288:	080286f8 	.word	0x080286f8

0800f28c <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
    }
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7ff ffe9 	bl	800f26c <_ZN8touchgfx9TypedTextD1Ev>
 800f29a:	2108      	movs	r1, #8
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f017 fda9 	bl	8026df4 <_ZdlPvj>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3708      	adds	r7, #8
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800f2ac:	b480      	push	{r7}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6a1b      	ldr	r3, [r3, #32]
    }
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	370c      	adds	r7, #12
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr

0800f2c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b08c      	sub	sp, #48	; 0x30
 800f2c8:	af08      	add	r7, sp, #32
 800f2ca:	60f8      	str	r0, [r7, #12]
 800f2cc:	60b9      	str	r1, [r7, #8]
 800f2ce:	4611      	mov	r1, r2
 800f2d0:	461a      	mov	r2, r3
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	80fb      	strh	r3, [r7, #6]
 800f2d6:	4613      	mov	r3, r2
 800f2d8:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800f2da:	68f8      	ldr	r0, [r7, #12]
 800f2dc:	88b9      	ldrh	r1, [r7, #4]
 800f2de:	88fa      	ldrh	r2, [r7, #6]
 800f2e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f2e2:	9306      	str	r3, [sp, #24]
 800f2e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f2e6:	9305      	str	r3, [sp, #20]
 800f2e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f2ec:	9304      	str	r3, [sp, #16]
 800f2ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f2f2:	9303      	str	r3, [sp, #12]
 800f2f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f2f8:	9302      	str	r3, [sp, #8]
 800f2fa:	7f3b      	ldrb	r3, [r7, #28]
 800f2fc:	9301      	str	r3, [sp, #4]
 800f2fe:	7e3b      	ldrb	r3, [r7, #24]
 800f300:	9300      	str	r3, [sp, #0]
 800f302:	460b      	mov	r3, r1
 800f304:	68b9      	ldr	r1, [r7, #8]
 800f306:	f00c fa3f 	bl	801b788 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800f30a:	4a08      	ldr	r2, [pc, #32]	; (800f32c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	601a      	str	r2, [r3, #0]
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f314:	619a      	str	r2, [r3, #24]
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f31a:	61da      	str	r2, [r3, #28]
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f320:	621a      	str	r2, [r3, #32]
{
}
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	4618      	mov	r0, r3
 800f326:	3710      	adds	r7, #16
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}
 800f32c:	08028708 	.word	0x08028708

0800f330 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f330:	b480      	push	{r7}
 800f332:	b085      	sub	sp, #20
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	699b      	ldr	r3, [r3, #24]
 800f33e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	889b      	ldrh	r3, [r3, #4]
 800f344:	0adb      	lsrs	r3, r3, #11
 800f346:	b29b      	uxth	r3, r3
 800f348:	009b      	lsls	r3, r3, #2
 800f34a:	68fa      	ldr	r2, [r7, #12]
 800f34c:	4413      	add	r3, r2
 800f34e:	681a      	ldr	r2, [r3, #0]
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4413      	add	r3, r2
}
 800f356:	4618      	mov	r0, r3
 800f358:	3714      	adds	r7, #20
 800f35a:	46bd      	mov	sp, r7
 800f35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f360:	4770      	bx	lr

0800f362 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f362:	b480      	push	{r7}
 800f364:	b089      	sub	sp, #36	; 0x24
 800f366:	af00      	add	r7, sp, #0
 800f368:	60f8      	str	r0, [r7, #12]
 800f36a:	460b      	mov	r3, r1
 800f36c:	607a      	str	r2, [r7, #4]
 800f36e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d003      	beq.n	800f37e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	7b1b      	ldrb	r3, [r3, #12]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d101      	bne.n	800f382 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f37e:	2300      	movs	r3, #0
 800f380:	e030      	b.n	800f3e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	69da      	ldr	r2, [r3, #28]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	7b5b      	ldrb	r3, [r3, #13]
 800f38e:	021b      	lsls	r3, r3, #8
 800f390:	b21b      	sxth	r3, r3
 800f392:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f396:	b219      	sxth	r1, r3
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	7adb      	ldrb	r3, [r3, #11]
 800f39c:	b21b      	sxth	r3, r3
 800f39e:	430b      	orrs	r3, r1
 800f3a0:	b21b      	sxth	r3, r3
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	009b      	lsls	r3, r3, #2
 800f3a6:	4413      	add	r3, r2
 800f3a8:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	7b1b      	ldrb	r3, [r3, #12]
 800f3ae:	837b      	strh	r3, [r7, #26]
 800f3b0:	8b7b      	ldrh	r3, [r7, #26]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d015      	beq.n	800f3e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	881b      	ldrh	r3, [r3, #0]
 800f3ba:	897a      	ldrh	r2, [r7, #10]
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d103      	bne.n	800f3c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f3c6:	e00d      	b.n	800f3e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	881b      	ldrh	r3, [r3, #0]
 800f3cc:	897a      	ldrh	r2, [r7, #10]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d306      	bcc.n	800f3e0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f3d2:	8b7b      	ldrh	r3, [r7, #26]
 800f3d4:	3b01      	subs	r3, #1
 800f3d6:	837b      	strh	r3, [r7, #26]
 800f3d8:	69fb      	ldr	r3, [r7, #28]
 800f3da:	3304      	adds	r3, #4
 800f3dc:	61fb      	str	r3, [r7, #28]
 800f3de:	e7e7      	b.n	800f3b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800f3e0:	bf00      	nop
        }
    }
    return 0;
 800f3e2:	2300      	movs	r3, #0
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3724      	adds	r7, #36	; 0x24
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ee:	4770      	bx	lr

0800f3f0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	4801      	ldr	r0, [pc, #4]	; (800f3fc <__tcf_0+0xc>)
 800f3f6:	f7ff ff17 	bl	800f228 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	2000853c 	.word	0x2000853c

0800f400 <_Z23getFont_verdana_10_4bppv>:
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b08a      	sub	sp, #40	; 0x28
 800f404:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800f406:	4b15      	ldr	r3, [pc, #84]	; (800f45c <_Z23getFont_verdana_10_4bppv+0x5c>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f003 0301 	and.w	r3, r3, #1
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d11f      	bne.n	800f452 <_Z23getFont_verdana_10_4bppv+0x52>
 800f412:	2300      	movs	r3, #0
 800f414:	9309      	str	r3, [sp, #36]	; 0x24
 800f416:	2300      	movs	r3, #0
 800f418:	9308      	str	r3, [sp, #32]
 800f41a:	233f      	movs	r3, #63	; 0x3f
 800f41c:	9307      	str	r3, [sp, #28]
 800f41e:	4b10      	ldr	r3, [pc, #64]	; (800f460 <_Z23getFont_verdana_10_4bppv+0x60>)
 800f420:	9306      	str	r3, [sp, #24]
 800f422:	4b10      	ldr	r3, [pc, #64]	; (800f464 <_Z23getFont_verdana_10_4bppv+0x64>)
 800f424:	9305      	str	r3, [sp, #20]
 800f426:	2300      	movs	r3, #0
 800f428:	9304      	str	r3, [sp, #16]
 800f42a:	2300      	movs	r3, #0
 800f42c:	9303      	str	r3, [sp, #12]
 800f42e:	2301      	movs	r3, #1
 800f430:	9302      	str	r3, [sp, #8]
 800f432:	2304      	movs	r3, #4
 800f434:	9301      	str	r3, [sp, #4]
 800f436:	2300      	movs	r3, #0
 800f438:	9300      	str	r3, [sp, #0]
 800f43a:	230a      	movs	r3, #10
 800f43c:	2201      	movs	r2, #1
 800f43e:	490a      	ldr	r1, [pc, #40]	; (800f468 <_Z23getFont_verdana_10_4bppv+0x68>)
 800f440:	480a      	ldr	r0, [pc, #40]	; (800f46c <_Z23getFont_verdana_10_4bppv+0x6c>)
 800f442:	f7ff ff3f 	bl	800f2c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f446:	4b05      	ldr	r3, [pc, #20]	; (800f45c <_Z23getFont_verdana_10_4bppv+0x5c>)
 800f448:	2201      	movs	r2, #1
 800f44a:	601a      	str	r2, [r3, #0]
 800f44c:	4808      	ldr	r0, [pc, #32]	; (800f470 <_Z23getFont_verdana_10_4bppv+0x70>)
 800f44e:	f017 fd1b 	bl	8026e88 <atexit>
    return verdana_10_4bpp;
 800f452:	4b06      	ldr	r3, [pc, #24]	; (800f46c <_Z23getFont_verdana_10_4bppv+0x6c>)
}
 800f454:	4618      	mov	r0, r3
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	20008560 	.word	0x20008560
 800f460:	0802e278 	.word	0x0802e278
 800f464:	08028754 	.word	0x08028754
 800f468:	0802e2e4 	.word	0x0802e2e4
 800f46c:	2000853c 	.word	0x2000853c
 800f470:	0800f3f1 	.word	0x0800f3f1

0800f474 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 21, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800f474:	b580      	push	{r7, lr}
 800f476:	af00      	add	r7, sp, #0
 800f478:	4801      	ldr	r0, [pc, #4]	; (800f480 <__tcf_0+0xc>)
 800f47a:	f7ff fed5 	bl	800f228 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f47e:	bd80      	pop	{r7, pc}
 800f480:	20008564 	.word	0x20008564

0800f484 <_Z23getFont_verdana_20_4bppv>:
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b08a      	sub	sp, #40	; 0x28
 800f488:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 21, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800f48a:	4b15      	ldr	r3, [pc, #84]	; (800f4e0 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	f003 0301 	and.w	r3, r3, #1
 800f492:	2b00      	cmp	r3, #0
 800f494:	d11f      	bne.n	800f4d6 <_Z23getFont_verdana_20_4bppv+0x52>
 800f496:	2300      	movs	r3, #0
 800f498:	9309      	str	r3, [sp, #36]	; 0x24
 800f49a:	2300      	movs	r3, #0
 800f49c:	9308      	str	r3, [sp, #32]
 800f49e:	233f      	movs	r3, #63	; 0x3f
 800f4a0:	9307      	str	r3, [sp, #28]
 800f4a2:	4b10      	ldr	r3, [pc, #64]	; (800f4e4 <_Z23getFont_verdana_20_4bppv+0x60>)
 800f4a4:	9306      	str	r3, [sp, #24]
 800f4a6:	4b10      	ldr	r3, [pc, #64]	; (800f4e8 <_Z23getFont_verdana_20_4bppv+0x64>)
 800f4a8:	9305      	str	r3, [sp, #20]
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	9304      	str	r3, [sp, #16]
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	9303      	str	r3, [sp, #12]
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	9302      	str	r3, [sp, #8]
 800f4b6:	2304      	movs	r3, #4
 800f4b8:	9301      	str	r3, [sp, #4]
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	9300      	str	r3, [sp, #0]
 800f4be:	2314      	movs	r3, #20
 800f4c0:	2215      	movs	r2, #21
 800f4c2:	490a      	ldr	r1, [pc, #40]	; (800f4ec <_Z23getFont_verdana_20_4bppv+0x68>)
 800f4c4:	480a      	ldr	r0, [pc, #40]	; (800f4f0 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800f4c6:	f7ff fefd 	bl	800f2c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f4ca:	4b05      	ldr	r3, [pc, #20]	; (800f4e0 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	601a      	str	r2, [r3, #0]
 800f4d0:	4808      	ldr	r0, [pc, #32]	; (800f4f4 <_Z23getFont_verdana_20_4bppv+0x70>)
 800f4d2:	f017 fcd9 	bl	8026e88 <atexit>
    return verdana_20_4bpp;
 800f4d6:	4b06      	ldr	r3, [pc, #24]	; (800f4f0 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	20008588 	.word	0x20008588
 800f4e4:	0802e27c 	.word	0x0802e27c
 800f4e8:	08028758 	.word	0x08028758
 800f4ec:	0802e2f4 	.word	0x0802e2f4
 800f4f0:	20008564 	.word	0x20008564
 800f4f4:	0800f475 	.word	0x0800f475

0800f4f8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 18, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	4801      	ldr	r0, [pc, #4]	; (800f504 <__tcf_0+0xc>)
 800f4fe:	f7ff fe93 	bl	800f228 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f502:	bd80      	pop	{r7, pc}
 800f504:	2000858c 	.word	0x2000858c

0800f508 <_Z23getFont_verdana_40_4bppv>:
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b08a      	sub	sp, #40	; 0x28
 800f50c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 18, 40, 8, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800f50e:	4b15      	ldr	r3, [pc, #84]	; (800f564 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f003 0301 	and.w	r3, r3, #1
 800f516:	2b00      	cmp	r3, #0
 800f518:	d11f      	bne.n	800f55a <_Z23getFont_verdana_40_4bppv+0x52>
 800f51a:	2300      	movs	r3, #0
 800f51c:	9309      	str	r3, [sp, #36]	; 0x24
 800f51e:	2300      	movs	r3, #0
 800f520:	9308      	str	r3, [sp, #32]
 800f522:	233f      	movs	r3, #63	; 0x3f
 800f524:	9307      	str	r3, [sp, #28]
 800f526:	4b10      	ldr	r3, [pc, #64]	; (800f568 <_Z23getFont_verdana_40_4bppv+0x60>)
 800f528:	9306      	str	r3, [sp, #24]
 800f52a:	4b10      	ldr	r3, [pc, #64]	; (800f56c <_Z23getFont_verdana_40_4bppv+0x64>)
 800f52c:	9305      	str	r3, [sp, #20]
 800f52e:	2301      	movs	r3, #1
 800f530:	9304      	str	r3, [sp, #16]
 800f532:	2300      	movs	r3, #0
 800f534:	9303      	str	r3, [sp, #12]
 800f536:	2301      	movs	r3, #1
 800f538:	9302      	str	r3, [sp, #8]
 800f53a:	2304      	movs	r3, #4
 800f53c:	9301      	str	r3, [sp, #4]
 800f53e:	2308      	movs	r3, #8
 800f540:	9300      	str	r3, [sp, #0]
 800f542:	2328      	movs	r3, #40	; 0x28
 800f544:	2212      	movs	r2, #18
 800f546:	490a      	ldr	r1, [pc, #40]	; (800f570 <_Z23getFont_verdana_40_4bppv+0x68>)
 800f548:	480a      	ldr	r0, [pc, #40]	; (800f574 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800f54a:	f7ff febb 	bl	800f2c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800f54e:	4b05      	ldr	r3, [pc, #20]	; (800f564 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800f550:	2201      	movs	r2, #1
 800f552:	601a      	str	r2, [r3, #0]
 800f554:	4808      	ldr	r0, [pc, #32]	; (800f578 <_Z23getFont_verdana_40_4bppv+0x70>)
 800f556:	f017 fc97 	bl	8026e88 <atexit>
    return verdana_40_4bpp;
 800f55a:	4b06      	ldr	r3, [pc, #24]	; (800f574 <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}
 800f562:	bf00      	nop
 800f564:	200085b0 	.word	0x200085b0
 800f568:	0802e2a4 	.word	0x0802e2a4
 800f56c:	0802875c 	.word	0x0802875c
 800f570:	0802e41c 	.word	0x0802e41c
 800f574:	2000858c 	.word	0x2000858c
 800f578:	0800f4f9 	.word	0x0800f4f9

0800f57c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f57c:	b480      	push	{r7}
 800f57e:	b083      	sub	sp, #12
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	6039      	str	r1, [r7, #0]
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	4618      	mov	r0, r3
 800f58a:	370c      	adds	r7, #12
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr

0800f594 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f594:	b480      	push	{r7}
 800f596:	b083      	sub	sp, #12
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
    {
    }
 800f59e:	bf00      	nop
 800f5a0:	370c      	adds	r7, #12
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr

0800f5aa <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f5aa:	b480      	push	{r7}
 800f5ac:	b083      	sub	sp, #12
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
 800f5b2:	6039      	str	r1, [r7, #0]
    {
    }
 800f5b4:	bf00      	nop
 800f5b6:	370c      	adds	r7, #12
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr

0800f5c0 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f5c0:	b480      	push	{r7}
 800f5c2:	b083      	sub	sp, #12
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
    {
    }
 800f5ca:	bf00      	nop
 800f5cc:	370c      	adds	r7, #12
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr

0800f5d6 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f5d6:	b480      	push	{r7}
 800f5d8:	b083      	sub	sp, #12
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
 800f5de:	460b      	mov	r3, r1
 800f5e0:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f5e2:	bf00      	nop
 800f5e4:	370c      	adds	r7, #12
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ec:	4770      	bx	lr

0800f5ee <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f5ee:	b480      	push	{r7}
 800f5f0:	b083      	sub	sp, #12
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	6078      	str	r0, [r7, #4]
    {
    }
 800f5f6:	bf00      	nop
 800f5f8:	370c      	adds	r7, #12
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr

0800f602 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800f602:	b480      	push	{r7}
 800f604:	b083      	sub	sp, #12
 800f606:	af00      	add	r7, sp, #0
 800f608:	6078      	str	r0, [r7, #4]
    {
    }
 800f60a:	bf00      	nop
 800f60c:	370c      	adds	r7, #12
 800f60e:	46bd      	mov	sp, r7
 800f610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f614:	4770      	bx	lr
	...

0800f618 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800f618:	b480      	push	{r7}
 800f61a:	b083      	sub	sp, #12
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
    {
 800f620:	4a04      	ldr	r2, [pc, #16]	; (800f634 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	601a      	str	r2, [r3, #0]
    }
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	4618      	mov	r0, r3
 800f62a:	370c      	adds	r7, #12
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr
 800f634:	08028860 	.word	0x08028860

0800f638 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
    }
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f7ff ffe9 	bl	800f618 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f646:	2104      	movs	r1, #4
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f017 fbd3 	bl	8026df4 <_ZdlPvj>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	4618      	mov	r0, r3
 800f652:	3708      	adds	r7, #8
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}

0800f658 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800f658:	b480      	push	{r7}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800f660:	4a07      	ldr	r2, [pc, #28]	; (800f680 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	601a      	str	r2, [r3, #0]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2200      	movs	r2, #0
 800f66a:	605a      	str	r2, [r3, #4]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2200      	movs	r2, #0
 800f670:	721a      	strb	r2, [r3, #8]
    {
    }
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	4618      	mov	r0, r3
 800f676:	370c      	adds	r7, #12
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr
 800f680:	08028840 	.word	0x08028840

0800f684 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800f684:	b480      	push	{r7}
 800f686:	b083      	sub	sp, #12
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
    {
 800f68c:	4a04      	ldr	r2, [pc, #16]	; (800f6a0 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	601a      	str	r2, [r3, #0]
    }
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	4618      	mov	r0, r3
 800f696:	370c      	adds	r7, #12
 800f698:	46bd      	mov	sp, r7
 800f69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69e:	4770      	bx	lr
 800f6a0:	08028840 	.word	0x08028840

0800f6a4 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
    }
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f7ff ffe9 	bl	800f684 <_ZN8touchgfx10TransitionD1Ev>
 800f6b2:	210c      	movs	r1, #12
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f017 fb9d 	bl	8026df4 <_ZdlPvj>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3708      	adds	r7, #8
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
    {
    }
 800f6cc:	bf00      	nop
 800f6ce:	370c      	adds	r7, #12
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr

0800f6d8 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
    {
    }
 800f6e0:	bf00      	nop
 800f6e2:	370c      	adds	r7, #12
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr

0800f6ec <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
    {
    }
 800f6f4:	bf00      	nop
 800f6f6:	370c      	adds	r7, #12
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr

0800f700 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800f700:	b480      	push	{r7}
 800f702:	b083      	sub	sp, #12
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	683a      	ldr	r2, [r7, #0]
 800f70e:	605a      	str	r2, [r3, #4]
    }
 800f710:	bf00      	nop
 800f712:	370c      	adds	r7, #12
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f71c:	b480      	push	{r7}
 800f71e:	b083      	sub	sp, #12
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	460b      	mov	r3, r1
 800f726:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f728:	bf00      	nop
 800f72a:	370c      	adds	r7, #12
 800f72c:	46bd      	mov	sp, r7
 800f72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f732:	4770      	bx	lr

0800f734 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800f734:	b480      	push	{r7}
 800f736:	b083      	sub	sp, #12
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	683a      	ldr	r2, [r7, #0]
 800f742:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800f746:	6810      	ldr	r0, [r2, #0]
 800f748:	6851      	ldr	r1, [r2, #4]
 800f74a:	c303      	stmia	r3!, {r0, r1}
    };
 800f74c:	bf00      	nop
 800f74e:	370c      	adds	r7, #12
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr

0800f758 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800f758:	b480      	push	{r7}
 800f75a:	b083      	sub	sp, #12
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
    {
 800f760:	4a04      	ldr	r2, [pc, #16]	; (800f774 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	601a      	str	r2, [r3, #0]
    }
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	4618      	mov	r0, r3
 800f76a:	370c      	adds	r7, #12
 800f76c:	46bd      	mov	sp, r7
 800f76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f772:	4770      	bx	lr
 800f774:	08028828 	.word	0x08028828

0800f778 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800f778:	b580      	push	{r7, lr}
 800f77a:	b082      	sub	sp, #8
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
    }
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f7ff ffe9 	bl	800f758 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f786:	2104      	movs	r1, #4
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f017 fb33 	bl	8026df4 <_ZdlPvj>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	4618      	mov	r0, r3
 800f792:	3708      	adds	r7, #8
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}

0800f798 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f798:	b480      	push	{r7}
 800f79a:	af00      	add	r7, sp, #0
    {
        return instance;
 800f79c:	4b03      	ldr	r3, [pc, #12]	; (800f7ac <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f79e:	681b      	ldr	r3, [r3, #0]
    }
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr
 800f7aa:	bf00      	nop
 800f7ac:	2000b3d4 	.word	0x2000b3d4

0800f7b0 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800f7b0:	b480      	push	{r7}
 800f7b2:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800f7b4:	4b0b      	ldr	r3, [pc, #44]	; (800f7e4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d008      	beq.n	800f7d2 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800f7c0:	4b08      	ldr	r3, [pc, #32]	; (800f7e4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d003      	beq.n	800f7d2 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800f7ca:	4b06      	ldr	r3, [pc, #24]	; (800f7e4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7d0:	e002      	b.n	800f7d8 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800f7d2:	4b04      	ldr	r3, [pc, #16]	; (800f7e4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	689b      	ldr	r3, [r3, #8]
        }
    }
 800f7d8:	4618      	mov	r0, r3
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr
 800f7e2:	bf00      	nop
 800f7e4:	2000b3d4 	.word	0x2000b3d4

0800f7e8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	4a05      	ldr	r2, [pc, #20]	; (800f808 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	601a      	str	r2, [r3, #0]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f7ff ff0d 	bl	800f618 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4618      	mov	r0, r3
 800f802:	3708      	adds	r7, #8
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}
 800f808:	0802b40c 	.word	0x0802b40c

0800f80c <_ZN8touchgfx11ApplicationD0Ev>:
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f7ff ffe7 	bl	800f7e8 <_ZN8touchgfx11ApplicationD1Ev>
 800f81a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f017 fae8 	bl	8026df4 <_ZdlPvj>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	4618      	mov	r0, r3
 800f828:	3708      	adds	r7, #8
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
	...

0800f830 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	4618      	mov	r0, r3
 800f83c:	f00b fafe 	bl	801ae3c <_ZN8touchgfx11ApplicationC1Ev>
 800f840:	4a09      	ldr	r2, [pc, #36]	; (800f868 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	601a      	str	r2, [r3, #0]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2200      	movs	r2, #0
 800f84a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2200      	movs	r2, #0
 800f852:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	4a04      	ldr	r2, [pc, #16]	; (800f86c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800f85a:	6013      	str	r3, [r2, #0]
    }
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	4618      	mov	r0, r3
 800f860:	3708      	adds	r7, #8
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop
 800f868:	080287e4 	.word	0x080287e4
 800f86c:	2000b460 	.word	0x2000b460

0800f870 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 f804 	bl	800f886 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800f87e:	bf00      	nop
 800f880:	3708      	adds	r7, #8
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}

0800f886 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800f886:	b580      	push	{r7, lr}
 800f888:	b082      	sub	sp, #8
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800f894:	2b00      	cmp	r3, #0
 800f896:	d00f      	beq.n	800f8b8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	330c      	adds	r3, #12
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	4610      	mov	r0, r2
 800f8ac:	4798      	blx	r3
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d001      	beq.n	800f8b8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	e000      	b.n	800f8ba <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d00e      	beq.n	800f8dc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	3308      	adds	r3, #8
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	4610      	mov	r0, r2
 800f8d2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800f8dc:	bf00      	nop
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800f8e4:	b480      	push	{r7}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	683a      	ldr	r2, [r7, #0]
 800f8f2:	601a      	str	r2, [r3, #0]
    }
 800f8f4:	bf00      	nop
 800f8f6:	370c      	adds	r7, #12
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fe:	4770      	bx	lr

0800f900 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	4a05      	ldr	r2, [pc, #20]	; (800f920 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	601a      	str	r2, [r3, #0]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4618      	mov	r0, r3
 800f912:	f7ff ff69 	bl	800f7e8 <_ZN8touchgfx11ApplicationD1Ev>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4618      	mov	r0, r3
 800f91a:	3708      	adds	r7, #8
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}
 800f920:	080287e4 	.word	0x080287e4

0800f924 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f7ff ffe7 	bl	800f900 <_ZN8touchgfx14MVPApplicationD1Ev>
 800f932:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f017 fa5c 	bl	8026df4 <_ZdlPvj>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	4618      	mov	r0, r3
 800f940:	3708      	adds	r7, #8
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
	...

0800f948 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	4a08      	ldr	r2, [pc, #32]	; (800f974 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	601a      	str	r2, [r3, #0]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800f95c:	4618      	mov	r0, r3
 800f95e:	f000 ffbd 	bl	80108dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	4618      	mov	r0, r3
 800f966:	f7ff ffcb 	bl	800f900 <_ZN8touchgfx14MVPApplicationD1Ev>
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	4618      	mov	r0, r3
 800f96e:	3708      	adds	r7, #8
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}
 800f974:	08028788 	.word	0x08028788

0800f978 <_ZN23FrontendApplicationBaseD0Ev>:
 800f978:	b580      	push	{r7, lr}
 800f97a:	b082      	sub	sp, #8
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f7ff ffe1 	bl	800f948 <_ZN23FrontendApplicationBaseD1Ev>
 800f986:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f017 fa32 	bl	8026df4 <_ZdlPvj>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	4618      	mov	r0, r3
 800f994:	3708      	adds	r7, #8
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}

0800f99a <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800f99a:	b480      	push	{r7}
 800f99c:	b083      	sub	sp, #12
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	721a      	strb	r2, [r3, #8]
    }
 800f9a8:	bf00      	nop
 800f9aa:	370c      	adds	r7, #12
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr

0800f9b4 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800f9b4:	b480      	push	{r7}
 800f9b6:	b083      	sub	sp, #12
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	683a      	ldr	r2, [r7, #0]
 800f9c2:	605a      	str	r2, [r3, #4]
    }
 800f9c4:	bf00      	nop
 800f9c6:	370c      	adds	r7, #12
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ce:	4770      	bx	lr

0800f9d0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen3_screen/Screen3View.hpp>
#include <gui/screen3_screen/Screen3Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b084      	sub	sp, #16
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	60f8      	str	r0, [r7, #12]
 800f9d8:	60b9      	str	r1, [r7, #8]
 800f9da:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7ff ff26 	bl	800f830 <_ZN8touchgfx14MVPApplicationC1Ev>
 800f9e4:	4a13      	ldr	r2, [pc, #76]	; (800fa34 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	601a      	str	r2, [r3, #0]
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f000 f971 	bl	800fcd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	687a      	ldr	r2, [r7, #4]
 800f9fa:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	68ba      	ldr	r2, [r7, #8]
 800fa02:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800fa06:	f7ff fec7 	bl	800f798 <_ZN8touchgfx3HAL11getInstanceEv>
 800fa0a:	4602      	mov	r2, r0
 800fa0c:	6813      	ldr	r3, [r2, #0]
 800fa0e:	3308      	adds	r3, #8
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	2100      	movs	r1, #0
 800fa14:	4610      	mov	r0, r2
 800fa16:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800fa18:	2000      	movs	r0, #0
 800fa1a:	f003 fecd 	bl	80137b8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800fa1e:	f7ff fec7 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 800fa22:	4603      	mov	r3, r0
 800fa24:	4618      	mov	r0, r3
 800fa26:	f010 feea 	bl	80207fe <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3710      	adds	r7, #16
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}
 800fa34:	08028788 	.word	0x08028788

0800fa38 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800fa38:	b480      	push	{r7}
 800fa3a:	b083      	sub	sp, #12
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6039      	str	r1, [r7, #0]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	4618      	mov	r0, r3
 800fa46:	370c      	adds	r7, #12
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr

0800fa50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	6039      	str	r1, [r7, #0]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	683a      	ldr	r2, [r7, #0]
 800fa5e:	4611      	mov	r1, r2
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7ff ffe9 	bl	800fa38 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	685a      	ldr	r2, [r3, #4]
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	605a      	str	r2, [r3, #4]
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	683a      	ldr	r2, [r7, #0]
 800fa72:	3308      	adds	r3, #8
 800fa74:	3208      	adds	r2, #8
 800fa76:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa7a:	e883 0003 	stmia.w	r3, {r0, r1}
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4618      	mov	r0, r3
 800fa82:	3708      	adds	r7, #8
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}

0800fa88 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800fa88:	b590      	push	{r4, r7, lr}
 800fa8a:	b089      	sub	sp, #36	; 0x24
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800fa96:	4b10      	ldr	r3, [pc, #64]	; (800fad8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800fa98:	61bb      	str	r3, [r7, #24]
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	61fb      	str	r3, [r7, #28]
 800fa9e:	f107 0008 	add.w	r0, r7, #8
 800faa2:	f107 0318 	add.w	r3, r7, #24
 800faa6:	cb0c      	ldmia	r3, {r2, r3}
 800faa8:	6879      	ldr	r1, [r7, #4]
 800faaa:	f000 f931 	bl	800fd10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800faae:	f107 0308 	add.w	r3, r7, #8
 800fab2:	4619      	mov	r1, r3
 800fab4:	4620      	mov	r0, r4
 800fab6:	f7ff ffcb 	bl	800fa50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800faba:	f107 0308 	add.w	r3, r7, #8
 800fabe:	4618      	mov	r0, r3
 800fac0:	f000 ff0c 	bl	80108dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800fad0:	bf00      	nop
 800fad2:	3724      	adds	r7, #36	; 0x24
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd90      	pop	{r4, r7, pc}
 800fad8:	0800fadd 	.word	0x0800fadd

0800fadc <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b084      	sub	sp, #16
 800fae0:	af02      	add	r7, sp, #8
 800fae2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800faf0:	461a      	mov	r2, r3
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800faf8:	9300      	str	r3, [sp, #0]
 800fafa:	4b04      	ldr	r3, [pc, #16]	; (800fb0c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800fafc:	4804      	ldr	r0, [pc, #16]	; (800fb10 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800fafe:	f000 f939 	bl	800fd74 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fb02:	bf00      	nop
 800fb04:	3708      	adds	r7, #8
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	bf00      	nop
 800fb0c:	2000b454 	.word	0x2000b454
 800fb10:	2000b450 	.word	0x2000b450

0800fb14 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800fb14:	b590      	push	{r4, r7, lr}
 800fb16:	b089      	sub	sp, #36	; 0x24
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800fb22:	4b10      	ldr	r3, [pc, #64]	; (800fb64 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800fb24:	61bb      	str	r3, [r7, #24]
 800fb26:	2300      	movs	r3, #0
 800fb28:	61fb      	str	r3, [r7, #28]
 800fb2a:	f107 0008 	add.w	r0, r7, #8
 800fb2e:	f107 0318 	add.w	r3, r7, #24
 800fb32:	cb0c      	ldmia	r3, {r2, r3}
 800fb34:	6879      	ldr	r1, [r7, #4]
 800fb36:	f000 f8eb 	bl	800fd10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fb3a:	f107 0308 	add.w	r3, r7, #8
 800fb3e:	4619      	mov	r1, r3
 800fb40:	4620      	mov	r0, r4
 800fb42:	f7ff ff85 	bl	800fa50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fb46:	f107 0308 	add.w	r3, r7, #8
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f000 fec6 	bl	80108dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800fb5c:	bf00      	nop
 800fb5e:	3724      	adds	r7, #36	; 0x24
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd90      	pop	{r4, r7, pc}
 800fb64:	0800fb69 	.word	0x0800fb69

0800fb68 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af02      	add	r7, sp, #8
 800fb6e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fb84:	9300      	str	r3, [sp, #0]
 800fb86:	4b04      	ldr	r3, [pc, #16]	; (800fb98 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800fb88:	4804      	ldr	r0, [pc, #16]	; (800fb9c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800fb8a:	f000 fa1f 	bl	800ffcc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fb8e:	bf00      	nop
 800fb90:	3708      	adds	r7, #8
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}
 800fb96:	bf00      	nop
 800fb98:	2000b454 	.word	0x2000b454
 800fb9c:	2000b450 	.word	0x2000b450

0800fba0 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
 800fba0:	b590      	push	{r4, r7, lr}
 800fba2:	b089      	sub	sp, #36	; 0x24
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800fbae:	4b10      	ldr	r3, [pc, #64]	; (800fbf0 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x50>)
 800fbb0:	61bb      	str	r3, [r7, #24]
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	61fb      	str	r3, [r7, #28]
 800fbb6:	f107 0008 	add.w	r0, r7, #8
 800fbba:	f107 0318 	add.w	r3, r7, #24
 800fbbe:	cb0c      	ldmia	r3, {r2, r3}
 800fbc0:	6879      	ldr	r1, [r7, #4]
 800fbc2:	f000 f8a5 	bl	800fd10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fbc6:	f107 0308 	add.w	r3, r7, #8
 800fbca:	4619      	mov	r1, r3
 800fbcc:	4620      	mov	r0, r4
 800fbce:	f7ff ff3f 	bl	800fa50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fbd2:	f107 0308 	add.w	r3, r7, #8
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f000 fe80 	bl	80108dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800fbe8:	bf00      	nop
 800fbea:	3724      	adds	r7, #36	; 0x24
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd90      	pop	{r4, r7, pc}
 800fbf0:	0800fbf5 	.word	0x0800fbf5

0800fbf4 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b084      	sub	sp, #16
 800fbf8:	af02      	add	r7, sp, #8
 800fbfa:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800fc08:	461a      	mov	r2, r3
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fc10:	9300      	str	r3, [sp, #0]
 800fc12:	4b04      	ldr	r3, [pc, #16]	; (800fc24 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x30>)
 800fc14:	4804      	ldr	r0, [pc, #16]	; (800fc28 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x34>)
 800fc16:	f000 fb03 	bl	8010220 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fc1a:	bf00      	nop
 800fc1c:	3708      	adds	r7, #8
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	2000b454 	.word	0x2000b454
 800fc28:	2000b450 	.word	0x2000b450

0800fc2c <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>:

// Screen3

void FrontendApplicationBase::gotoScreen3ScreenNoTransition()
{
 800fc2c:	b590      	push	{r4, r7, lr}
 800fc2e:	b089      	sub	sp, #36	; 0x24
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen3ScreenNoTransitionImpl);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800fc3a:	4b10      	ldr	r3, [pc, #64]	; (800fc7c <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv+0x50>)
 800fc3c:	61bb      	str	r3, [r7, #24]
 800fc3e:	2300      	movs	r3, #0
 800fc40:	61fb      	str	r3, [r7, #28]
 800fc42:	f107 0008 	add.w	r0, r7, #8
 800fc46:	f107 0318 	add.w	r3, r7, #24
 800fc4a:	cb0c      	ldmia	r3, {r2, r3}
 800fc4c:	6879      	ldr	r1, [r7, #4]
 800fc4e:	f000 f85f 	bl	800fd10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fc52:	f107 0308 	add.w	r3, r7, #8
 800fc56:	4619      	mov	r1, r3
 800fc58:	4620      	mov	r0, r4
 800fc5a:	f7ff fef9 	bl	800fa50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fc5e:	f107 0308 	add.w	r3, r7, #8
 800fc62:	4618      	mov	r0, r3
 800fc64:	f000 fe3a 	bl	80108dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800fc74:	bf00      	nop
 800fc76:	3724      	adds	r7, #36	; 0x24
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd90      	pop	{r4, r7, pc}
 800fc7c:	0800fc81 	.word	0x0800fc81

0800fc80 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen3ScreenNoTransitionImpl()
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b084      	sub	sp, #16
 800fc84:	af02      	add	r7, sp, #8
 800fc86:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen3View, Screen3Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800fc94:	461a      	mov	r2, r3
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fc9c:	9300      	str	r3, [sp, #0]
 800fc9e:	4b04      	ldr	r3, [pc, #16]	; (800fcb0 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x30>)
 800fca0:	4804      	ldr	r0, [pc, #16]	; (800fcb4 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x34>)
 800fca2:	f000 fbe9 	bl	8010478 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fca6:	bf00      	nop
 800fca8:	3708      	adds	r7, #8
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	2000b454 	.word	0x2000b454
 800fcb4:	2000b450 	.word	0x2000b450

0800fcb8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800fcb8:	b480      	push	{r7}
 800fcba:	b083      	sub	sp, #12
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	4a04      	ldr	r2, [pc, #16]	; (800fcd4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	601a      	str	r2, [r3, #0]
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	4618      	mov	r0, r3
 800fcca:	370c      	adds	r7, #12
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr
 800fcd4:	08028828 	.word	0x08028828

0800fcd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7ff ffe8 	bl	800fcb8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fce8:	4a08      	ldr	r2, [pc, #32]	; (800fd0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	601a      	str	r2, [r3, #0]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	605a      	str	r2, [r3, #4]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	609a      	str	r2, [r3, #8]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	60da      	str	r2, [r3, #12]
    {
    }
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	4618      	mov	r0, r3
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}
 800fd0a:	bf00      	nop
 800fd0c:	080287cc 	.word	0x080287cc

0800fd10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	60f8      	str	r0, [r7, #12]
 800fd18:	60b9      	str	r1, [r7, #8]
 800fd1a:	4639      	mov	r1, r7
 800fd1c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7ff ffc8 	bl	800fcb8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fd28:	4a08      	ldr	r2, [pc, #32]	; (800fd4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	68ba      	ldr	r2, [r7, #8]
 800fd32:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	3308      	adds	r3, #8
 800fd38:	463a      	mov	r2, r7
 800fd3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd3e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	4618      	mov	r0, r3
 800fd46:	3710      	adds	r7, #16
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}
 800fd4c:	080287cc 	.word	0x080287cc

0800fd50 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7ff fc7c 	bl	800f658 <_ZN8touchgfx10TransitionC1Ev>
 800fd60:	4a03      	ldr	r2, [pc, #12]	; (800fd70 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	601a      	str	r2, [r3, #0]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	08028768 	.word	0x08028768

0800fd74 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800fd74:	b590      	push	{r4, r7, lr}
 800fd76:	b08f      	sub	sp, #60	; 0x3c
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	60f8      	str	r0, [r7, #12]
 800fd7c:	60b9      	str	r1, [r7, #8]
 800fd7e:	607a      	str	r2, [r7, #4]
 800fd80:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	689a      	ldr	r2, [r3, #8]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	689b      	ldr	r3, [r3, #8]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	3320      	adds	r3, #32
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	4610      	mov	r0, r2
 800fd92:	4798      	blx	r3
 800fd94:	4603      	mov	r3, r0
 800fd96:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 800fd9a:	d205      	bcs.n	800fda8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800fd9c:	4b86      	ldr	r3, [pc, #536]	; (800ffb8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800fd9e:	4a87      	ldr	r2, [pc, #540]	; (800ffbc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800fda0:	21a7      	movs	r1, #167	; 0xa7
 800fda2:	4887      	ldr	r0, [pc, #540]	; (800ffc0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800fda4:	f017 f852 	bl	8026e4c <__assert_func>
 800fda8:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	685a      	ldr	r2, [r3, #4]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	3320      	adds	r3, #32
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	4610      	mov	r0, r2
 800fdba:	4798      	blx	r3
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	2b0f      	cmp	r3, #15
 800fdc0:	d805      	bhi.n	800fdce <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800fdc2:	4b80      	ldr	r3, [pc, #512]	; (800ffc4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 800fdc4:	4a7d      	ldr	r2, [pc, #500]	; (800ffbc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800fdc6:	21a8      	movs	r1, #168	; 0xa8
 800fdc8:	487d      	ldr	r0, [pc, #500]	; (800ffc0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800fdca:	f017 f83f 	bl	8026e4c <__assert_func>
 800fdce:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	68da      	ldr	r2, [r3, #12]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	68db      	ldr	r3, [r3, #12]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	3320      	adds	r3, #32
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	4610      	mov	r0, r2
 800fde0:	4798      	blx	r3
 800fde2:	4603      	mov	r3, r0
 800fde4:	2b0b      	cmp	r3, #11
 800fde6:	d805      	bhi.n	800fdf4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800fde8:	4b77      	ldr	r3, [pc, #476]	; (800ffc8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 800fdea:	4a74      	ldr	r2, [pc, #464]	; (800ffbc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800fdec:	21a9      	movs	r1, #169	; 0xa9
 800fdee:	4874      	ldr	r0, [pc, #464]	; (800ffc0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 800fdf0:	f017 f82c 	bl	8026e4c <__assert_func>
 800fdf4:	bf00      	nop
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	62bb      	str	r3, [r7, #40]	; 0x28
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	627b      	str	r3, [r7, #36]	; 0x24
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800fe02:	f00a fff9 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 800fe06:	4603      	mov	r3, r0
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f00a fffb 	bl	801ae04 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800fe0e:	6a3b      	ldr	r3, [r7, #32]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d008      	beq.n	800fe28 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800fe16:	6a3b      	ldr	r3, [r7, #32]
 800fe18:	681a      	ldr	r2, [r3, #0]
 800fe1a:	6a3b      	ldr	r3, [r7, #32]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	330c      	adds	r3, #12
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	4610      	mov	r0, r2
 800fe26:	4798      	blx	r3
    if (*currentTrans)
 800fe28:	6a3b      	ldr	r3, [r7, #32]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d007      	beq.n	800fe40 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800fe30:	6a3b      	ldr	r3, [r7, #32]
 800fe32:	681a      	ldr	r2, [r3, #0]
 800fe34:	6a3b      	ldr	r3, [r7, #32]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4610      	mov	r0, r2
 800fe3e:	4798      	blx	r3
    if (*currentScreen)
 800fe40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d008      	beq.n	800fe5a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800fe48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe4a:	681a      	ldr	r2, [r3, #0]
 800fe4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	3314      	adds	r3, #20
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	4610      	mov	r0, r2
 800fe58:	4798      	blx	r3
    if (*currentPresenter)
 800fe5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d008      	beq.n	800fe74 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800fe62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe64:	681a      	ldr	r2, [r3, #0]
 800fe66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	3304      	adds	r3, #4
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	4610      	mov	r0, r2
 800fe72:	4798      	blx	r3
    if (*currentScreen)
 800fe74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d007      	beq.n	800fe8c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800fe7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7e:	681a      	ldr	r2, [r3, #0]
 800fe80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	4610      	mov	r0, r2
 800fe8a:	4798      	blx	r3
    if (*currentPresenter)
 800fe8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d008      	beq.n	800fea6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800fe94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	3308      	adds	r3, #8
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	4610      	mov	r0, r2
 800fea4:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	68db      	ldr	r3, [r3, #12]
 800feaa:	2100      	movs	r1, #0
 800feac:	4618      	mov	r0, r3
 800feae:	f000 fc0f 	bl	80106d0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800feb2:	4603      	mov	r3, r0
 800feb4:	4619      	mov	r1, r3
 800feb6:	200c      	movs	r0, #12
 800feb8:	f7ff fb60 	bl	800f57c <_ZnwjPv>
 800febc:	4604      	mov	r4, r0
 800febe:	2c00      	cmp	r4, #0
 800fec0:	d004      	beq.n	800fecc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 800fec2:	4620      	mov	r0, r4
 800fec4:	f7ff ff44 	bl	800fd50 <_ZN8touchgfx12NoTransitionC1Ev>
 800fec8:	4623      	mov	r3, r4
 800feca:	e000      	b.n	800fece <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 800fecc:	4623      	mov	r3, r4
 800fece:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	689b      	ldr	r3, [r3, #8]
 800fed4:	2100      	movs	r1, #0
 800fed6:	4618      	mov	r0, r3
 800fed8:	f000 fc0d 	bl	80106f6 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800fedc:	4603      	mov	r3, r0
 800fede:	4619      	mov	r1, r3
 800fee0:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800fee4:	f7ff fb4a 	bl	800f57c <_ZnwjPv>
 800fee8:	4604      	mov	r4, r0
 800feea:	2c00      	cmp	r4, #0
 800feec:	d004      	beq.n	800fef8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 800feee:	4620      	mov	r0, r4
 800fef0:	f004 f896 	bl	8014020 <_ZN10screenViewC1Ev>
 800fef4:	4623      	mov	r3, r4
 800fef6:	e000      	b.n	800fefa <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 800fef8:	4623      	mov	r3, r4
 800fefa:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	2100      	movs	r1, #0
 800ff02:	4618      	mov	r0, r3
 800ff04:	f000 fc0a 	bl	801071c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	2010      	movs	r0, #16
 800ff0e:	f7ff fb35 	bl	800f57c <_ZnwjPv>
 800ff12:	4604      	mov	r4, r0
 800ff14:	2c00      	cmp	r4, #0
 800ff16:	d005      	beq.n	800ff24 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800ff18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	f004 f828 	bl	8013f70 <_ZN15screenPresenterC1ER10screenView>
 800ff20:	4623      	mov	r3, r4
 800ff22:	e000      	b.n	800ff26 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800ff24:	4623      	mov	r3, r4
 800ff26:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff2c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff32:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff38:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800ff3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d002      	beq.n	800ff46 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 800ff40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff42:	3304      	adds	r3, #4
 800ff44:	e000      	b.n	800ff48 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 800ff46:	2300      	movs	r3, #0
 800ff48:	4619      	mov	r1, r3
 800ff4a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ff4c:	f7ff fcca 	bl	800f8e4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800ff50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff52:	3304      	adds	r3, #4
 800ff54:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7ff fd2c 	bl	800f9b4 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800ff5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff60:	4618      	mov	r0, r3
 800ff62:	f000 fbee 	bl	8010742 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800ff66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff68:	61fb      	str	r3, [r7, #28]
 800ff6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff6c:	61bb      	str	r3, [r7, #24]
 800ff6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff70:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800ff72:	69fb      	ldr	r3, [r7, #28]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	330c      	adds	r3, #12
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	69f8      	ldr	r0, [r7, #28]
 800ff7c:	4798      	blx	r3
    newPresenter->activate();
 800ff7e:	69bb      	ldr	r3, [r7, #24]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	69b8      	ldr	r0, [r7, #24]
 800ff86:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800ff88:	6979      	ldr	r1, [r7, #20]
 800ff8a:	69f8      	ldr	r0, [r7, #28]
 800ff8c:	f00c f872 	bl	801c074 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800ff90:	697b      	ldr	r3, [r7, #20]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	3310      	adds	r3, #16
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	6978      	ldr	r0, [r7, #20]
 800ff9a:	4798      	blx	r3
    Application::getInstance()->draw();
 800ff9c:	f00a ff2c 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 800ffa0:	4602      	mov	r2, r0
 800ffa2:	6813      	ldr	r3, [r2, #0]
 800ffa4:	3330      	adds	r3, #48	; 0x30
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	4610      	mov	r0, r2
 800ffaa:	4798      	blx	r3

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800ffac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	373c      	adds	r7, #60	; 0x3c
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd90      	pop	{r4, r7, pc}
 800ffb6:	bf00      	nop
 800ffb8:	08027eb0 	.word	0x08027eb0
 800ffbc:	08028880 	.word	0x08028880
 800ffc0:	08027f40 	.word	0x08027f40
 800ffc4:	08027f84 	.word	0x08027f84
 800ffc8:	08028028 	.word	0x08028028

0800ffcc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ffcc:	b590      	push	{r4, r7, lr}
 800ffce:	b08f      	sub	sp, #60	; 0x3c
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	60f8      	str	r0, [r7, #12]
 800ffd4:	60b9      	str	r1, [r7, #8]
 800ffd6:	607a      	str	r2, [r7, #4]
 800ffd8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	689a      	ldr	r2, [r3, #8]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	689b      	ldr	r3, [r3, #8]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	3320      	adds	r3, #32
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	4610      	mov	r0, r2
 800ffea:	4798      	blx	r3
 800ffec:	4603      	mov	r3, r0
 800ffee:	2bc3      	cmp	r3, #195	; 0xc3
 800fff0:	d805      	bhi.n	800fffe <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800fff2:	4b86      	ldr	r3, [pc, #536]	; (801020c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x240>)
 800fff4:	4a86      	ldr	r2, [pc, #536]	; (8010210 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 800fff6:	21a7      	movs	r1, #167	; 0xa7
 800fff8:	4886      	ldr	r0, [pc, #536]	; (8010214 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 800fffa:	f016 ff27 	bl	8026e4c <__assert_func>
 800fffe:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	685a      	ldr	r2, [r3, #4]
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	3320      	adds	r3, #32
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	4610      	mov	r0, r2
 8010010:	4798      	blx	r3
 8010012:	4603      	mov	r3, r0
 8010014:	2b0f      	cmp	r3, #15
 8010016:	d805      	bhi.n	8010024 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8010018:	4b7f      	ldr	r3, [pc, #508]	; (8010218 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 801001a:	4a7d      	ldr	r2, [pc, #500]	; (8010210 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 801001c:	21a8      	movs	r1, #168	; 0xa8
 801001e:	487d      	ldr	r0, [pc, #500]	; (8010214 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010020:	f016 ff14 	bl	8026e4c <__assert_func>
 8010024:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	68da      	ldr	r2, [r3, #12]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	68db      	ldr	r3, [r3, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	3320      	adds	r3, #32
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	4610      	mov	r0, r2
 8010036:	4798      	blx	r3
 8010038:	4603      	mov	r3, r0
 801003a:	2b0b      	cmp	r3, #11
 801003c:	d805      	bhi.n	801004a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 801003e:	4b77      	ldr	r3, [pc, #476]	; (801021c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8010040:	4a73      	ldr	r2, [pc, #460]	; (8010210 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 8010042:	21a9      	movs	r1, #169	; 0xa9
 8010044:	4873      	ldr	r0, [pc, #460]	; (8010214 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010046:	f016 ff01 	bl	8026e4c <__assert_func>
 801004a:	bf00      	nop
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	627b      	str	r3, [r7, #36]	; 0x24
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8010058:	f00a fece 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 801005c:	4603      	mov	r3, r0
 801005e:	4618      	mov	r0, r3
 8010060:	f00a fed0 	bl	801ae04 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8010064:	6a3b      	ldr	r3, [r7, #32]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d008      	beq.n	801007e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 801006c:	6a3b      	ldr	r3, [r7, #32]
 801006e:	681a      	ldr	r2, [r3, #0]
 8010070:	6a3b      	ldr	r3, [r7, #32]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	330c      	adds	r3, #12
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	4610      	mov	r0, r2
 801007c:	4798      	blx	r3
    if (*currentTrans)
 801007e:	6a3b      	ldr	r3, [r7, #32]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d007      	beq.n	8010096 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 8010086:	6a3b      	ldr	r3, [r7, #32]
 8010088:	681a      	ldr	r2, [r3, #0]
 801008a:	6a3b      	ldr	r3, [r7, #32]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	4610      	mov	r0, r2
 8010094:	4798      	blx	r3
    if (*currentScreen)
 8010096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d008      	beq.n	80100b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 801009e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a0:	681a      	ldr	r2, [r3, #0]
 80100a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	3314      	adds	r3, #20
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	4610      	mov	r0, r2
 80100ae:	4798      	blx	r3
    if (*currentPresenter)
 80100b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d008      	beq.n	80100ca <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 80100b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	3304      	adds	r3, #4
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	4610      	mov	r0, r2
 80100c8:	4798      	blx	r3
    if (*currentScreen)
 80100ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d007      	beq.n	80100e2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 80100d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100d4:	681a      	ldr	r2, [r3, #0]
 80100d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	4610      	mov	r0, r2
 80100e0:	4798      	blx	r3
    if (*currentPresenter)
 80100e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d008      	beq.n	80100fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 80100ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ec:	681a      	ldr	r2, [r3, #0]
 80100ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	3308      	adds	r3, #8
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	4610      	mov	r0, r2
 80100fa:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	68db      	ldr	r3, [r3, #12]
 8010100:	2100      	movs	r1, #0
 8010102:	4618      	mov	r0, r3
 8010104:	f000 fae4 	bl	80106d0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8010108:	4603      	mov	r3, r0
 801010a:	4619      	mov	r1, r3
 801010c:	200c      	movs	r0, #12
 801010e:	f7ff fa35 	bl	800f57c <_ZnwjPv>
 8010112:	4604      	mov	r4, r0
 8010114:	2c00      	cmp	r4, #0
 8010116:	d004      	beq.n	8010122 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x156>
 8010118:	4620      	mov	r0, r4
 801011a:	f7ff fe19 	bl	800fd50 <_ZN8touchgfx12NoTransitionC1Ev>
 801011e:	4623      	mov	r3, r4
 8010120:	e000      	b.n	8010124 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 8010122:	4623      	mov	r3, r4
 8010124:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	689b      	ldr	r3, [r3, #8]
 801012a:	2100      	movs	r1, #0
 801012c:	4618      	mov	r0, r3
 801012e:	f000 fb16 	bl	801075e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8010132:	4603      	mov	r3, r0
 8010134:	4619      	mov	r1, r3
 8010136:	20c4      	movs	r0, #196	; 0xc4
 8010138:	f7ff fa20 	bl	800f57c <_ZnwjPv>
 801013c:	4604      	mov	r4, r0
 801013e:	2c00      	cmp	r4, #0
 8010140:	d004      	beq.n	801014c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x180>
 8010142:	4620      	mov	r0, r4
 8010144:	f003 fd4a 	bl	8013bdc <_ZN11Screen1ViewC1Ev>
 8010148:	4623      	mov	r3, r4
 801014a:	e000      	b.n	801014e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x182>
 801014c:	4623      	mov	r3, r4
 801014e:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	2100      	movs	r1, #0
 8010156:	4618      	mov	r0, r3
 8010158:	f000 fb14 	bl	8010784 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 801015c:	4603      	mov	r3, r0
 801015e:	4619      	mov	r1, r3
 8010160:	2010      	movs	r0, #16
 8010162:	f7ff fa0b 	bl	800f57c <_ZnwjPv>
 8010166:	4604      	mov	r4, r0
 8010168:	2c00      	cmp	r4, #0
 801016a:	d005      	beq.n	8010178 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ac>
 801016c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801016e:	4620      	mov	r0, r4
 8010170:	f003 fcde 	bl	8013b30 <_ZN16Screen1PresenterC1ER11Screen1View>
 8010174:	4623      	mov	r3, r4
 8010176:	e000      	b.n	801017a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ae>
 8010178:	4623      	mov	r3, r4
 801017a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010180:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010186:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801018c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801018e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010190:	2b00      	cmp	r3, #0
 8010192:	d002      	beq.n	801019a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ce>
 8010194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010196:	3304      	adds	r3, #4
 8010198:	e000      	b.n	801019c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d0>
 801019a:	2300      	movs	r3, #0
 801019c:	4619      	mov	r1, r3
 801019e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80101a0:	f7ff fba0 	bl	800f8e4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80101a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101a6:	3304      	adds	r3, #4
 80101a8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7ff fc02 	bl	800f9b4 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80101b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80101b4:	4618      	mov	r0, r3
 80101b6:	f000 faf8 	bl	80107aa <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 80101ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101bc:	61fb      	str	r3, [r7, #28]
 80101be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101c0:	61bb      	str	r3, [r7, #24]
 80101c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101c4:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80101c6:	69fb      	ldr	r3, [r7, #28]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	330c      	adds	r3, #12
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	69f8      	ldr	r0, [r7, #28]
 80101d0:	4798      	blx	r3
    newPresenter->activate();
 80101d2:	69bb      	ldr	r3, [r7, #24]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	69b8      	ldr	r0, [r7, #24]
 80101da:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80101dc:	6979      	ldr	r1, [r7, #20]
 80101de:	69f8      	ldr	r0, [r7, #28]
 80101e0:	f00b ff48 	bl	801c074 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	3310      	adds	r3, #16
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	6978      	ldr	r0, [r7, #20]
 80101ee:	4798      	blx	r3
    Application::getInstance()->draw();
 80101f0:	f00a fe02 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 80101f4:	4602      	mov	r2, r0
 80101f6:	6813      	ldr	r3, [r2, #0]
 80101f8:	3330      	adds	r3, #48	; 0x30
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	4610      	mov	r0, r2
 80101fe:	4798      	blx	r3
    return newPresenter;
 8010200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010202:	4618      	mov	r0, r3
 8010204:	373c      	adds	r7, #60	; 0x3c
 8010206:	46bd      	mov	sp, r7
 8010208:	bd90      	pop	{r4, r7, pc}
 801020a:	bf00      	nop
 801020c:	08027eb0 	.word	0x08027eb0
 8010210:	08028984 	.word	0x08028984
 8010214:	08027f40 	.word	0x08027f40
 8010218:	08027f84 	.word	0x08027f84
 801021c:	08028028 	.word	0x08028028

08010220 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010220:	b590      	push	{r4, r7, lr}
 8010222:	b08f      	sub	sp, #60	; 0x3c
 8010224:	af00      	add	r7, sp, #0
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	607a      	str	r2, [r7, #4]
 801022c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	689a      	ldr	r2, [r3, #8]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	689b      	ldr	r3, [r3, #8]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	3320      	adds	r3, #32
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	4610      	mov	r0, r2
 801023e:	4798      	blx	r3
 8010240:	4602      	mov	r2, r0
 8010242:	f641 7347 	movw	r3, #8007	; 0x1f47
 8010246:	429a      	cmp	r2, r3
 8010248:	d805      	bhi.n	8010256 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 801024a:	4b86      	ldr	r3, [pc, #536]	; (8010464 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 801024c:	4a86      	ldr	r2, [pc, #536]	; (8010468 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 801024e:	21a7      	movs	r1, #167	; 0xa7
 8010250:	4886      	ldr	r0, [pc, #536]	; (801046c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010252:	f016 fdfb 	bl	8026e4c <__assert_func>
 8010256:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	685a      	ldr	r2, [r3, #4]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	685b      	ldr	r3, [r3, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	3320      	adds	r3, #32
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	4610      	mov	r0, r2
 8010268:	4798      	blx	r3
 801026a:	4603      	mov	r3, r0
 801026c:	2b0f      	cmp	r3, #15
 801026e:	d805      	bhi.n	801027c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8010270:	4b7f      	ldr	r3, [pc, #508]	; (8010470 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 8010272:	4a7d      	ldr	r2, [pc, #500]	; (8010468 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 8010274:	21a8      	movs	r1, #168	; 0xa8
 8010276:	487d      	ldr	r0, [pc, #500]	; (801046c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 8010278:	f016 fde8 	bl	8026e4c <__assert_func>
 801027c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	68da      	ldr	r2, [r3, #12]
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	68db      	ldr	r3, [r3, #12]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	3320      	adds	r3, #32
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	4610      	mov	r0, r2
 801028e:	4798      	blx	r3
 8010290:	4603      	mov	r3, r0
 8010292:	2b0b      	cmp	r3, #11
 8010294:	d805      	bhi.n	80102a2 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8010296:	4b77      	ldr	r3, [pc, #476]	; (8010474 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 8010298:	4a73      	ldr	r2, [pc, #460]	; (8010468 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 801029a:	21a9      	movs	r1, #169	; 0xa9
 801029c:	4873      	ldr	r0, [pc, #460]	; (801046c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 801029e:	f016 fdd5 	bl	8026e4c <__assert_func>
 80102a2:	bf00      	nop
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	627b      	str	r3, [r7, #36]	; 0x24
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80102b0:	f00a fda2 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 80102b4:	4603      	mov	r3, r0
 80102b6:	4618      	mov	r0, r3
 80102b8:	f00a fda4 	bl	801ae04 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80102bc:	6a3b      	ldr	r3, [r7, #32]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d008      	beq.n	80102d6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 80102c4:	6a3b      	ldr	r3, [r7, #32]
 80102c6:	681a      	ldr	r2, [r3, #0]
 80102c8:	6a3b      	ldr	r3, [r7, #32]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	330c      	adds	r3, #12
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	4610      	mov	r0, r2
 80102d4:	4798      	blx	r3
    if (*currentTrans)
 80102d6:	6a3b      	ldr	r3, [r7, #32]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d007      	beq.n	80102ee <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 80102de:	6a3b      	ldr	r3, [r7, #32]
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	6a3b      	ldr	r3, [r7, #32]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	4610      	mov	r0, r2
 80102ec:	4798      	blx	r3
    if (*currentScreen)
 80102ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d008      	beq.n	8010308 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 80102f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f8:	681a      	ldr	r2, [r3, #0]
 80102fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	3314      	adds	r3, #20
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	4610      	mov	r0, r2
 8010306:	4798      	blx	r3
    if (*currentPresenter)
 8010308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d008      	beq.n	8010322 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 8010310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	3304      	adds	r3, #4
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	4610      	mov	r0, r2
 8010320:	4798      	blx	r3
    if (*currentScreen)
 8010322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d007      	beq.n	801033a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 801032a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	4610      	mov	r0, r2
 8010338:	4798      	blx	r3
    if (*currentPresenter)
 801033a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d008      	beq.n	8010354 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 8010342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010344:	681a      	ldr	r2, [r3, #0]
 8010346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	3308      	adds	r3, #8
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	4610      	mov	r0, r2
 8010352:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	68db      	ldr	r3, [r3, #12]
 8010358:	2100      	movs	r1, #0
 801035a:	4618      	mov	r0, r3
 801035c:	f000 f9b8 	bl	80106d0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8010360:	4603      	mov	r3, r0
 8010362:	4619      	mov	r1, r3
 8010364:	200c      	movs	r0, #12
 8010366:	f7ff f909 	bl	800f57c <_ZnwjPv>
 801036a:	4604      	mov	r4, r0
 801036c:	2c00      	cmp	r4, #0
 801036e:	d004      	beq.n	801037a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 8010370:	4620      	mov	r0, r4
 8010372:	f7ff fced 	bl	800fd50 <_ZN8touchgfx12NoTransitionC1Ev>
 8010376:	4623      	mov	r3, r4
 8010378:	e000      	b.n	801037c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>
 801037a:	4623      	mov	r3, r4
 801037c:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	689b      	ldr	r3, [r3, #8]
 8010382:	2100      	movs	r1, #0
 8010384:	4618      	mov	r0, r3
 8010386:	f000 fa1e 	bl	80107c6 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 801038a:	4603      	mov	r3, r0
 801038c:	4619      	mov	r1, r3
 801038e:	f641 7048 	movw	r0, #8008	; 0x1f48
 8010392:	f7ff f8f3 	bl	800f57c <_ZnwjPv>
 8010396:	4604      	mov	r4, r0
 8010398:	2c00      	cmp	r4, #0
 801039a:	d004      	beq.n	80103a6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 801039c:	4620      	mov	r0, r4
 801039e:	f003 fcd3 	bl	8013d48 <_ZN11Screen2ViewC1Ev>
 80103a2:	4623      	mov	r3, r4
 80103a4:	e000      	b.n	80103a8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x188>
 80103a6:	4623      	mov	r3, r4
 80103a8:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	685b      	ldr	r3, [r3, #4]
 80103ae:	2100      	movs	r1, #0
 80103b0:	4618      	mov	r0, r3
 80103b2:	f000 fa1b 	bl	80107ec <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 80103b6:	4603      	mov	r3, r0
 80103b8:	4619      	mov	r1, r3
 80103ba:	2010      	movs	r0, #16
 80103bc:	f7ff f8de 	bl	800f57c <_ZnwjPv>
 80103c0:	4604      	mov	r4, r0
 80103c2:	2c00      	cmp	r4, #0
 80103c4:	d005      	beq.n	80103d2 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 80103c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80103c8:	4620      	mov	r0, r4
 80103ca:	f003 fc65 	bl	8013c98 <_ZN16Screen2PresenterC1ER11Screen2View>
 80103ce:	4623      	mov	r3, r4
 80103d0:	e000      	b.n	80103d4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 80103d2:	4623      	mov	r3, r4
 80103d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103da:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103e0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103e6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80103e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d002      	beq.n	80103f4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 80103ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f0:	3304      	adds	r3, #4
 80103f2:	e000      	b.n	80103f6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d6>
 80103f4:	2300      	movs	r3, #0
 80103f6:	4619      	mov	r1, r3
 80103f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80103fa:	f7ff fa73 	bl	800f8e4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80103fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010400:	3304      	adds	r3, #4
 8010402:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010404:	4618      	mov	r0, r3
 8010406:	f7ff fad5 	bl	800f9b4 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801040a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801040c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801040e:	4618      	mov	r0, r3
 8010410:	f000 f9ff 	bl	8010812 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 8010414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010416:	61fb      	str	r3, [r7, #28]
 8010418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041a:	61bb      	str	r3, [r7, #24]
 801041c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801041e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010420:	69fb      	ldr	r3, [r7, #28]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	330c      	adds	r3, #12
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	69f8      	ldr	r0, [r7, #28]
 801042a:	4798      	blx	r3
    newPresenter->activate();
 801042c:	69bb      	ldr	r3, [r7, #24]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	69b8      	ldr	r0, [r7, #24]
 8010434:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010436:	6979      	ldr	r1, [r7, #20]
 8010438:	69f8      	ldr	r0, [r7, #28]
 801043a:	f00b fe1b 	bl	801c074 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801043e:	697b      	ldr	r3, [r7, #20]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	3310      	adds	r3, #16
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	6978      	ldr	r0, [r7, #20]
 8010448:	4798      	blx	r3
    Application::getInstance()->draw();
 801044a:	f00a fcd5 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 801044e:	4602      	mov	r2, r0
 8010450:	6813      	ldr	r3, [r2, #0]
 8010452:	3330      	adds	r3, #48	; 0x30
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4610      	mov	r0, r2
 8010458:	4798      	blx	r3
    return newPresenter;
 801045a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801045c:	4618      	mov	r0, r3
 801045e:	373c      	adds	r7, #60	; 0x3c
 8010460:	46bd      	mov	sp, r7
 8010462:	bd90      	pop	{r4, r7, pc}
 8010464:	08027eb0 	.word	0x08027eb0
 8010468:	08028a88 	.word	0x08028a88
 801046c:	08027f40 	.word	0x08027f40
 8010470:	08027f84 	.word	0x08027f84
 8010474:	08028028 	.word	0x08028028

08010478 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010478:	b590      	push	{r4, r7, lr}
 801047a:	b08f      	sub	sp, #60	; 0x3c
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	60b9      	str	r1, [r7, #8]
 8010482:	607a      	str	r2, [r7, #4]
 8010484:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	689a      	ldr	r2, [r3, #8]
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	689b      	ldr	r3, [r3, #8]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	3320      	adds	r3, #32
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	4610      	mov	r0, r2
 8010496:	4798      	blx	r3
 8010498:	4603      	mov	r3, r0
 801049a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801049e:	d205      	bcs.n	80104ac <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80104a0:	4b86      	ldr	r3, [pc, #536]	; (80106bc <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x244>)
 80104a2:	4a87      	ldr	r2, [pc, #540]	; (80106c0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 80104a4:	21a7      	movs	r1, #167	; 0xa7
 80104a6:	4887      	ldr	r0, [pc, #540]	; (80106c4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80104a8:	f016 fcd0 	bl	8026e4c <__assert_func>
 80104ac:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	685a      	ldr	r2, [r3, #4]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	685b      	ldr	r3, [r3, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	3320      	adds	r3, #32
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4610      	mov	r0, r2
 80104be:	4798      	blx	r3
 80104c0:	4603      	mov	r3, r0
 80104c2:	2b0f      	cmp	r3, #15
 80104c4:	d805      	bhi.n	80104d2 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80104c6:	4b80      	ldr	r3, [pc, #512]	; (80106c8 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x250>)
 80104c8:	4a7d      	ldr	r2, [pc, #500]	; (80106c0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 80104ca:	21a8      	movs	r1, #168	; 0xa8
 80104cc:	487d      	ldr	r0, [pc, #500]	; (80106c4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80104ce:	f016 fcbd 	bl	8026e4c <__assert_func>
 80104d2:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	68da      	ldr	r2, [r3, #12]
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	68db      	ldr	r3, [r3, #12]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	3320      	adds	r3, #32
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	4610      	mov	r0, r2
 80104e4:	4798      	blx	r3
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b0b      	cmp	r3, #11
 80104ea:	d805      	bhi.n	80104f8 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80104ec:	4b77      	ldr	r3, [pc, #476]	; (80106cc <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x254>)
 80104ee:	4a74      	ldr	r2, [pc, #464]	; (80106c0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x248>)
 80104f0:	21a9      	movs	r1, #169	; 0xa9
 80104f2:	4874      	ldr	r0, [pc, #464]	; (80106c4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24c>)
 80104f4:	f016 fcaa 	bl	8026e4c <__assert_func>
 80104f8:	bf00      	nop
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	627b      	str	r3, [r7, #36]	; 0x24
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8010506:	f00a fc77 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 801050a:	4603      	mov	r3, r0
 801050c:	4618      	mov	r0, r3
 801050e:	f00a fc79 	bl	801ae04 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8010512:	6a3b      	ldr	r3, [r7, #32]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d008      	beq.n	801052c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 801051a:	6a3b      	ldr	r3, [r7, #32]
 801051c:	681a      	ldr	r2, [r3, #0]
 801051e:	6a3b      	ldr	r3, [r7, #32]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	330c      	adds	r3, #12
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	4610      	mov	r0, r2
 801052a:	4798      	blx	r3
    if (*currentTrans)
 801052c:	6a3b      	ldr	r3, [r7, #32]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d007      	beq.n	8010544 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8010534:	6a3b      	ldr	r3, [r7, #32]
 8010536:	681a      	ldr	r2, [r3, #0]
 8010538:	6a3b      	ldr	r3, [r7, #32]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	4610      	mov	r0, r2
 8010542:	4798      	blx	r3
    if (*currentScreen)
 8010544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d008      	beq.n	801055e <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 801054c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054e:	681a      	ldr	r2, [r3, #0]
 8010550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	3314      	adds	r3, #20
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	4610      	mov	r0, r2
 801055c:	4798      	blx	r3
    if (*currentPresenter)
 801055e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d008      	beq.n	8010578 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8010566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010568:	681a      	ldr	r2, [r3, #0]
 801056a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	3304      	adds	r3, #4
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	4610      	mov	r0, r2
 8010576:	4798      	blx	r3
    if (*currentScreen)
 8010578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d007      	beq.n	8010590 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8010580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	4610      	mov	r0, r2
 801058e:	4798      	blx	r3
    if (*currentPresenter)
 8010590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d008      	beq.n	80105aa <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8010598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801059a:	681a      	ldr	r2, [r3, #0]
 801059c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	3308      	adds	r3, #8
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	4610      	mov	r0, r2
 80105a8:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	2100      	movs	r1, #0
 80105b0:	4618      	mov	r0, r3
 80105b2:	f000 f88d 	bl	80106d0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80105b6:	4603      	mov	r3, r0
 80105b8:	4619      	mov	r1, r3
 80105ba:	200c      	movs	r0, #12
 80105bc:	f7fe ffde 	bl	800f57c <_ZnwjPv>
 80105c0:	4604      	mov	r4, r0
 80105c2:	2c00      	cmp	r4, #0
 80105c4:	d004      	beq.n	80105d0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x158>
 80105c6:	4620      	mov	r0, r4
 80105c8:	f7ff fbc2 	bl	800fd50 <_ZN8touchgfx12NoTransitionC1Ev>
 80105cc:	4623      	mov	r3, r4
 80105ce:	e000      	b.n	80105d2 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15a>
 80105d0:	4623      	mov	r3, r4
 80105d2:	637b      	str	r3, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	689b      	ldr	r3, [r3, #8]
 80105d8:	2100      	movs	r1, #0
 80105da:	4618      	mov	r0, r3
 80105dc:	f000 f927 	bl	801082e <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>
 80105e0:	4603      	mov	r3, r0
 80105e2:	4619      	mov	r1, r3
 80105e4:	f44f 7006 	mov.w	r0, #536	; 0x218
 80105e8:	f7fe ffc8 	bl	800f57c <_ZnwjPv>
 80105ec:	4604      	mov	r4, r0
 80105ee:	2c00      	cmp	r4, #0
 80105f0:	d004      	beq.n	80105fc <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x184>
 80105f2:	4620      	mov	r0, r4
 80105f4:	f003 fc5e 	bl	8013eb4 <_ZN11Screen3ViewC1Ev>
 80105f8:	4623      	mov	r3, r4
 80105fa:	e000      	b.n	80105fe <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x186>
 80105fc:	4623      	mov	r3, r4
 80105fe:	633b      	str	r3, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	2100      	movs	r1, #0
 8010606:	4618      	mov	r0, r3
 8010608:	f000 f924 	bl	8010854 <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>
 801060c:	4603      	mov	r3, r0
 801060e:	4619      	mov	r1, r3
 8010610:	2010      	movs	r0, #16
 8010612:	f7fe ffb3 	bl	800f57c <_ZnwjPv>
 8010616:	4604      	mov	r4, r0
 8010618:	2c00      	cmp	r4, #0
 801061a:	d005      	beq.n	8010628 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 801061c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801061e:	4620      	mov	r0, r4
 8010620:	f003 fbf0 	bl	8013e04 <_ZN16Screen3PresenterC1ER11Screen3View>
 8010624:	4623      	mov	r3, r4
 8010626:	e000      	b.n	801062a <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8010628:	4623      	mov	r3, r4
 801062a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010630:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010632:	68bb      	ldr	r3, [r7, #8]
 8010634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010636:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801063c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801063e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010640:	2b00      	cmp	r3, #0
 8010642:	d002      	beq.n	801064a <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d2>
 8010644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010646:	3304      	adds	r3, #4
 8010648:	e000      	b.n	801064c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1d4>
 801064a:	2300      	movs	r3, #0
 801064c:	4619      	mov	r1, r3
 801064e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010650:	f7ff f948 	bl	800f8e4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010656:	3304      	adds	r3, #4
 8010658:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801065a:	4618      	mov	r0, r3
 801065c:	f7ff f9aa 	bl	800f9b4 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010664:	4618      	mov	r0, r3
 8010666:	f000 f908 	bl	801087a <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>
 801066a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801066c:	61fb      	str	r3, [r7, #28]
 801066e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010670:	61bb      	str	r3, [r7, #24]
 8010672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010674:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010676:	69fb      	ldr	r3, [r7, #28]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	330c      	adds	r3, #12
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	69f8      	ldr	r0, [r7, #28]
 8010680:	4798      	blx	r3
    newPresenter->activate();
 8010682:	69bb      	ldr	r3, [r7, #24]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	69b8      	ldr	r0, [r7, #24]
 801068a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 801068c:	6979      	ldr	r1, [r7, #20]
 801068e:	69f8      	ldr	r0, [r7, #28]
 8010690:	f00b fcf0 	bl	801c074 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	3310      	adds	r3, #16
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	6978      	ldr	r0, [r7, #20]
 801069e:	4798      	blx	r3
    Application::getInstance()->draw();
 80106a0:	f00a fbaa 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 80106a4:	4602      	mov	r2, r0
 80106a6:	6813      	ldr	r3, [r2, #0]
 80106a8:	3330      	adds	r3, #48	; 0x30
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	4610      	mov	r0, r2
 80106ae:	4798      	blx	r3
    return newPresenter;
 80106b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	373c      	adds	r7, #60	; 0x3c
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd90      	pop	{r4, r7, pc}
 80106ba:	bf00      	nop
 80106bc:	08027eb0 	.word	0x08027eb0
 80106c0:	08028b8c 	.word	0x08028b8c
 80106c4:	08027f40 	.word	0x08027f40
 80106c8:	08027f84 	.word	0x08027f84
 80106cc:	08028028 	.word	0x08028028

080106d0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b082      	sub	sp, #8
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	460b      	mov	r3, r1
 80106da:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	3324      	adds	r3, #36	; 0x24
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	887a      	ldrh	r2, [r7, #2]
 80106e6:	4611      	mov	r1, r2
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	4798      	blx	r3
 80106ec:	4603      	mov	r3, r0
    }
 80106ee:	4618      	mov	r0, r3
 80106f0:	3708      	adds	r7, #8
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}

080106f6 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b082      	sub	sp, #8
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
 80106fe:	460b      	mov	r3, r1
 8010700:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	3324      	adds	r3, #36	; 0x24
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	887a      	ldrh	r2, [r7, #2]
 801070c:	4611      	mov	r1, r2
 801070e:	6878      	ldr	r0, [r7, #4]
 8010710:	4798      	blx	r3
 8010712:	4603      	mov	r3, r0
    }
 8010714:	4618      	mov	r0, r3
 8010716:	3708      	adds	r7, #8
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	460b      	mov	r3, r1
 8010726:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	3324      	adds	r3, #36	; 0x24
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	887a      	ldrh	r2, [r7, #2]
 8010732:	4611      	mov	r1, r2
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	4798      	blx	r3
 8010738:	4603      	mov	r3, r0
    }
 801073a:	4618      	mov	r0, r3
 801073c:	3708      	adds	r7, #8
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}

08010742 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8010742:	b480      	push	{r7}
 8010744:	b083      	sub	sp, #12
 8010746:	af00      	add	r7, sp, #0
 8010748:	6078      	str	r0, [r7, #4]
 801074a:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	683a      	ldr	r2, [r7, #0]
 8010750:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010752:	bf00      	nop
 8010754:	370c      	adds	r7, #12
 8010756:	46bd      	mov	sp, r7
 8010758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075c:	4770      	bx	lr

0801075e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 801075e:	b580      	push	{r7, lr}
 8010760:	b082      	sub	sp, #8
 8010762:	af00      	add	r7, sp, #0
 8010764:	6078      	str	r0, [r7, #4]
 8010766:	460b      	mov	r3, r1
 8010768:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	3324      	adds	r3, #36	; 0x24
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	887a      	ldrh	r2, [r7, #2]
 8010774:	4611      	mov	r1, r2
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	4798      	blx	r3
 801077a:	4603      	mov	r3, r0
    }
 801077c:	4618      	mov	r0, r3
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	460b      	mov	r3, r1
 801078e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	3324      	adds	r3, #36	; 0x24
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	887a      	ldrh	r2, [r7, #2]
 801079a:	4611      	mov	r1, r2
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	4798      	blx	r3
 80107a0:	4603      	mov	r3, r0
    }
 80107a2:	4618      	mov	r0, r3
 80107a4:	3708      	adds	r7, #8
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}

080107aa <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
    void bind(T& presenter)
 80107aa:	b480      	push	{r7}
 80107ac:	b083      	sub	sp, #12
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	6078      	str	r0, [r7, #4]
 80107b2:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	683a      	ldr	r2, [r7, #0]
 80107b8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80107ba:	bf00      	nop
 80107bc:	370c      	adds	r7, #12
 80107be:	46bd      	mov	sp, r7
 80107c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c4:	4770      	bx	lr

080107c6 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 80107c6:	b580      	push	{r7, lr}
 80107c8:	b082      	sub	sp, #8
 80107ca:	af00      	add	r7, sp, #0
 80107cc:	6078      	str	r0, [r7, #4]
 80107ce:	460b      	mov	r3, r1
 80107d0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	3324      	adds	r3, #36	; 0x24
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	887a      	ldrh	r2, [r7, #2]
 80107dc:	4611      	mov	r1, r2
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	4798      	blx	r3
 80107e2:	4603      	mov	r3, r0
    }
 80107e4:	4618      	mov	r0, r3
 80107e6:	3708      	adds	r7, #8
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}

080107ec <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
 80107f4:	460b      	mov	r3, r1
 80107f6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	3324      	adds	r3, #36	; 0x24
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	887a      	ldrh	r2, [r7, #2]
 8010802:	4611      	mov	r1, r2
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	4798      	blx	r3
 8010808:	4603      	mov	r3, r0
    }
 801080a:	4618      	mov	r0, r3
 801080c:	3708      	adds	r7, #8
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}

08010812 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& presenter)
 8010812:	b480      	push	{r7}
 8010814:	b083      	sub	sp, #12
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
 801081a:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	683a      	ldr	r2, [r7, #0]
 8010820:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010822:	bf00      	nop
 8010824:	370c      	adds	r7, #12
 8010826:	46bd      	mov	sp, r7
 8010828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082c:	4770      	bx	lr

0801082e <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>:
    T& at(const uint16_t index)
 801082e:	b580      	push	{r7, lr}
 8010830:	b082      	sub	sp, #8
 8010832:	af00      	add	r7, sp, #0
 8010834:	6078      	str	r0, [r7, #4]
 8010836:	460b      	mov	r3, r1
 8010838:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	3324      	adds	r3, #36	; 0x24
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	887a      	ldrh	r2, [r7, #2]
 8010844:	4611      	mov	r1, r2
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	4798      	blx	r3
 801084a:	4603      	mov	r3, r0
    }
 801084c:	4618      	mov	r0, r3
 801084e:	3708      	adds	r7, #8
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>:
    T& at(const uint16_t index)
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	460b      	mov	r3, r1
 801085e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	3324      	adds	r3, #36	; 0x24
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	887a      	ldrh	r2, [r7, #2]
 801086a:	4611      	mov	r1, r2
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	4798      	blx	r3
 8010870:	4603      	mov	r3, r0
    }
 8010872:	4618      	mov	r0, r3
 8010874:	3708      	adds	r7, #8
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}

0801087a <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>:
    void bind(T& presenter)
 801087a:	b480      	push	{r7}
 801087c:	b083      	sub	sp, #12
 801087e:	af00      	add	r7, sp, #0
 8010880:	6078      	str	r0, [r7, #4]
 8010882:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	683a      	ldr	r2, [r7, #0]
 8010888:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801088a:	bf00      	nop
 801088c:	370c      	adds	r7, #12
 801088e:	46bd      	mov	sp, r7
 8010890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010894:	4770      	bx	lr
	...

08010898 <_ZN8touchgfx12NoTransitionD1Ev>:
 8010898:	b580      	push	{r7, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	4a05      	ldr	r2, [pc, #20]	; (80108b8 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	601a      	str	r2, [r3, #0]
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	4618      	mov	r0, r3
 80108aa:	f7fe feeb 	bl	800f684 <_ZN8touchgfx10TransitionD1Ev>
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	4618      	mov	r0, r3
 80108b2:	3708      	adds	r7, #8
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}
 80108b8:	08028768 	.word	0x08028768

080108bc <_ZN8touchgfx12NoTransitionD0Ev>:
 80108bc:	b580      	push	{r7, lr}
 80108be:	b082      	sub	sp, #8
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	6878      	ldr	r0, [r7, #4]
 80108c6:	f7ff ffe7 	bl	8010898 <_ZN8touchgfx12NoTransitionD1Ev>
 80108ca:	210c      	movs	r1, #12
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	f016 fa91 	bl	8026df4 <_ZdlPvj>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	4618      	mov	r0, r3
 80108d6:	3708      	adds	r7, #8
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}

080108dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	4a05      	ldr	r2, [pc, #20]	; (80108fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	601a      	str	r2, [r3, #0]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7fe ff33 	bl	800f758 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	4618      	mov	r0, r3
 80108f6:	3708      	adds	r7, #8
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}
 80108fc:	080287cc 	.word	0x080287cc

08010900 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8010900:	b580      	push	{r7, lr}
 8010902:	b082      	sub	sp, #8
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f7ff ffe7 	bl	80108dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801090e:	2110      	movs	r1, #16
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f016 fa6f 	bl	8026df4 <_ZdlPvj>
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	4618      	mov	r0, r3
 801091a:	3708      	adds	r7, #8
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}

08010920 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8010920:	b580      	push	{r7, lr}
 8010922:	b082      	sub	sp, #8
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	687a      	ldr	r2, [r7, #4]
 801092e:	68d2      	ldr	r2, [r2, #12]
 8010930:	1052      	asrs	r2, r2, #1
 8010932:	1899      	adds	r1, r3, r2
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	f003 0301 	and.w	r3, r3, #1
 801093c:	2b00      	cmp	r3, #0
 801093e:	d102      	bne.n	8010946 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	689b      	ldr	r3, [r3, #8]
 8010944:	e00a      	b.n	801095c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	687a      	ldr	r2, [r7, #4]
 801094c:	68d2      	ldr	r2, [r2, #12]
 801094e:	1052      	asrs	r2, r2, #1
 8010950:	4413      	add	r3, r2
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	6892      	ldr	r2, [r2, #8]
 8010958:	4413      	add	r3, r2
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	4608      	mov	r0, r1
 801095e:	4798      	blx	r3
    }
 8010960:	bf00      	nop
 8010962:	3708      	adds	r7, #8
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}

08010968 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8010968:	b480      	push	{r7}
 801096a:	b083      	sub	sp, #12
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d010      	beq.n	801099a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	689b      	ldr	r3, [r3, #8]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d107      	bne.n	8010990 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	68db      	ldr	r3, [r3, #12]
 8010984:	f003 0301 	and.w	r3, r3, #1
 8010988:	2b00      	cmp	r3, #0
 801098a:	d101      	bne.n	8010990 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801098c:	2301      	movs	r3, #1
 801098e:	e000      	b.n	8010992 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8010990:	2300      	movs	r3, #0
 8010992:	2b01      	cmp	r3, #1
 8010994:	d001      	beq.n	801099a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010996:	2301      	movs	r3, #1
 8010998:	e000      	b.n	801099c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801099a:	2300      	movs	r3, #0
    }
 801099c:	4618      	mov	r0, r3
 801099e:	370c      	adds	r7, #12
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr

080109a8 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	460b      	mov	r3, r1
 80109b2:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	887a      	ldrh	r2, [r7, #2]
 80109b8:	801a      	strh	r2, [r3, #0]
    {
    }
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	4618      	mov	r0, r3
 80109be:	370c      	adds	r7, #12
 80109c0:	46bd      	mov	sp, r7
 80109c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c6:	4770      	bx	lr

080109c8 <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80109c8:	b480      	push	{r7}
 80109ca:	b083      	sub	sp, #12
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
    {
 80109d0:	4a04      	ldr	r2, [pc, #16]	; (80109e4 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	601a      	str	r2, [r3, #0]
    }
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	4618      	mov	r0, r3
 80109da:	370c      	adds	r7, #12
 80109dc:	46bd      	mov	sp, r7
 80109de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e2:	4770      	bx	lr
 80109e4:	0802b4fc 	.word	0x0802b4fc

080109e8 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
    }
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	f7ff ffe9 	bl	80109c8 <_ZN8touchgfx8DrawableD1Ev>
 80109f6:	2128      	movs	r1, #40	; 0x28
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f016 f9fb 	bl	8026df4 <_ZdlPvj>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	4618      	mov	r0, r3
 8010a02:	3708      	adds	r7, #8
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b084      	sub	sp, #16
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	60f8      	str	r0, [r7, #12]
 8010a10:	4608      	mov	r0, r1
 8010a12:	4611      	mov	r1, r2
 8010a14:	461a      	mov	r2, r3
 8010a16:	4603      	mov	r3, r0
 8010a18:	817b      	strh	r3, [r7, #10]
 8010a1a:	460b      	mov	r3, r1
 8010a1c:	813b      	strh	r3, [r7, #8]
 8010a1e:	4613      	mov	r3, r2
 8010a20:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	3334      	adds	r3, #52	; 0x34
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010a2e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010a32:	68f8      	ldr	r0, [r7, #12]
 8010a34:	4798      	blx	r3
        setWidth(width);
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	3338      	adds	r3, #56	; 0x38
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010a42:	4611      	mov	r1, r2
 8010a44:	68f8      	ldr	r0, [r7, #12]
 8010a46:	4798      	blx	r3
        setHeight(height);
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	333c      	adds	r3, #60	; 0x3c
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010a54:	4611      	mov	r1, r2
 8010a56:	68f8      	ldr	r0, [r7, #12]
 8010a58:	4798      	blx	r3
    }
 8010a5a:	bf00      	nop
 8010a5c:	3710      	adds	r7, #16
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}

08010a62 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8010a62:	b480      	push	{r7}
 8010a64:	b083      	sub	sp, #12
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	6078      	str	r0, [r7, #4]
 8010a6a:	460b      	mov	r3, r1
 8010a6c:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	887a      	ldrh	r2, [r7, #2]
 8010a72:	809a      	strh	r2, [r3, #4]
    }
 8010a74:	bf00      	nop
 8010a76:	370c      	adds	r7, #12
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	4770      	bx	lr

08010a80 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8010a80:	b480      	push	{r7}
 8010a82:	b083      	sub	sp, #12
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	460b      	mov	r3, r1
 8010a8a:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	887a      	ldrh	r2, [r7, #2]
 8010a90:	80da      	strh	r2, [r3, #6]
    }
 8010a92:	bf00      	nop
 8010a94:	370c      	adds	r7, #12
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr

08010a9e <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setXY(int16_t x, int16_t y)
 8010a9e:	b580      	push	{r7, lr}
 8010aa0:	b082      	sub	sp, #8
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	6078      	str	r0, [r7, #4]
 8010aa6:	460b      	mov	r3, r1
 8010aa8:	807b      	strh	r3, [r7, #2]
 8010aaa:	4613      	mov	r3, r2
 8010aac:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	332c      	adds	r3, #44	; 0x2c
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010aba:	4611      	mov	r1, r2
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	4798      	blx	r3
        setY(y);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	3330      	adds	r3, #48	; 0x30
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010acc:	4611      	mov	r1, r2
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	4798      	blx	r3
    }
 8010ad2:	bf00      	nop
 8010ad4:	3708      	adds	r7, #8
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}

08010ada <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8010ada:	b480      	push	{r7}
 8010adc:	b083      	sub	sp, #12
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
 8010ae2:	460b      	mov	r3, r1
 8010ae4:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	887a      	ldrh	r2, [r7, #2]
 8010aea:	811a      	strh	r2, [r3, #8]
    }
 8010aec:	bf00      	nop
 8010aee:	370c      	adds	r7, #12
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr

08010af8 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8010af8:	b480      	push	{r7}
 8010afa:	b083      	sub	sp, #12
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	460b      	mov	r3, r1
 8010b02:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	887a      	ldrh	r2, [r7, #2]
 8010b08:	815a      	strh	r2, [r3, #10]
    }
 8010b0a:	bf00      	nop
 8010b0c:	370c      	adds	r7, #12
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b14:	4770      	bx	lr

08010b16 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8010b16:	b480      	push	{r7}
 8010b18:	b083      	sub	sp, #12
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
    {
    }
 8010b1e:	bf00      	nop
 8010b20:	370c      	adds	r7, #12
 8010b22:	46bd      	mov	sp, r7
 8010b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b28:	4770      	bx	lr

08010b2a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * Defines the event handler interface for ClickEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 8010b2a:	b480      	push	{r7}
 8010b2c:	b083      	sub	sp, #12
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	6078      	str	r0, [r7, #4]
 8010b32:	6039      	str	r1, [r7, #0]
    {
    }
 8010b34:	bf00      	nop
 8010b36:	370c      	adds	r7, #12
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3e:	4770      	bx	lr

08010b40 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * Defines the event handler interface for GestureEvents. The default implementation
     * ignores the event. The event is only received if the Drawable is touchable and visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 8010b40:	b480      	push	{r7}
 8010b42:	b083      	sub	sp, #12
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
 8010b48:	6039      	str	r1, [r7, #0]
    {
    }
 8010b4a:	bf00      	nop
 8010b4c:	370c      	adds	r7, #12
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b54:	4770      	bx	lr

08010b56 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * Defines the event handler interface for DragEvents. The default implementation
     * ignores the event. The event is only received if the drawable is touchable and visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 8010b56:	b480      	push	{r7}
 8010b58:	b083      	sub	sp, #12
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
 8010b5e:	6039      	str	r1, [r7, #0]
    {
    }
 8010b60:	bf00      	nop
 8010b62:	370c      	adds	r7, #12
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr

08010b6c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8010b6c:	b480      	push	{r7}
 8010b6e:	b083      	sub	sp, #12
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
    {
    }
 8010b74:	bf00      	nop
 8010b76:	370c      	adds	r7, #12
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7e:	4770      	bx	lr

08010b80 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010b80:	b480      	push	{r7}
 8010b82:	b083      	sub	sp, #12
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8010b8e:	4618      	mov	r0, r3
 8010b90:	370c      	adds	r7, #12
 8010b92:	46bd      	mov	sp, r7
 8010b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b98:	4770      	bx	lr

08010b9a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8010b9a:	b480      	push	{r7}
 8010b9c:	b083      	sub	sp, #12
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8010ba8:	4618      	mov	r0, r3
 8010baa:	370c      	adds	r7, #12
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b082      	sub	sp, #8
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	460b      	mov	r3, r1
 8010bbe:	807b      	strh	r3, [r7, #2]
 8010bc0:	4613      	mov	r3, r2
 8010bc2:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	3354      	adds	r3, #84	; 0x54
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	8879      	ldrh	r1, [r7, #2]
 8010bce:	687a      	ldr	r2, [r7, #4]
 8010bd0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010bd4:	b292      	uxth	r2, r2
 8010bd6:	1a8a      	subs	r2, r1, r2
 8010bd8:	b292      	uxth	r2, r2
 8010bda:	b210      	sxth	r0, r2
 8010bdc:	8839      	ldrh	r1, [r7, #0]
 8010bde:	687a      	ldr	r2, [r7, #4]
 8010be0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010be4:	b292      	uxth	r2, r2
 8010be6:	1a8a      	subs	r2, r1, r2
 8010be8:	b292      	uxth	r2, r2
 8010bea:	b212      	sxth	r2, r2
 8010bec:	4601      	mov	r1, r0
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	4798      	blx	r3
    }
 8010bf2:	bf00      	nop
 8010bf4:	3708      	adds	r7, #8
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}

08010bfa <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8010bfa:	b480      	push	{r7}
 8010bfc:	b083      	sub	sp, #12
 8010bfe:	af00      	add	r7, sp, #0
 8010c00:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c08:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c10:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c18:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8010c1a:	bf00      	nop
 8010c1c:	370c      	adds	r7, #12
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c24:	4770      	bx	lr

08010c26 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8010c26:	b580      	push	{r7, lr}
 8010c28:	b084      	sub	sp, #16
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	60f8      	str	r0, [r7, #12]
 8010c2e:	60b9      	str	r1, [r7, #8]
 8010c30:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8010c32:	68f8      	ldr	r0, [r7, #12]
 8010c34:	f7ff ffe1 	bl	8010bfa <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681a      	ldr	r2, [r3, #0]
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	68fa      	ldr	r2, [r7, #12]
 8010c44:	601a      	str	r2, [r3, #0]
    }
 8010c46:	bf00      	nop
 8010c48:	3710      	adds	r7, #16
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
	...

08010c50 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
    {
 8010c58:	4a06      	ldr	r2, [pc, #24]	; (8010c74 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	601a      	str	r2, [r3, #0]
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	3304      	adds	r3, #4
 8010c62:	4618      	mov	r0, r3
 8010c64:	f000 fba0 	bl	80113a8 <_ZN8touchgfx9ContainerD1Ev>
    }
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3708      	adds	r7, #8
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
 8010c72:	bf00      	nop
 8010c74:	0802b5f4 	.word	0x0802b5f4

08010c78 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
    }
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f7ff ffe5 	bl	8010c50 <_ZN8touchgfx6ScreenD1Ev>
 8010c86:	213c      	movs	r1, #60	; 0x3c
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f016 f8b3 	bl	8026df4 <_ZdlPvj>
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	4618      	mov	r0, r3
 8010c92:	3708      	adds	r7, #8
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}

08010c98 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8010c98:	b480      	push	{r7}
 8010c9a:	b083      	sub	sp, #12
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
    {
    }
 8010ca0:	bf00      	nop
 8010ca2:	370c      	adds	r7, #12
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010caa:	4770      	bx	lr

08010cac <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8010cac:	b480      	push	{r7}
 8010cae:	b083      	sub	sp, #12
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
    {
    }
 8010cb4:	bf00      	nop
 8010cb6:	370c      	adds	r7, #12
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbe:	4770      	bx	lr

08010cc0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see touchgfx::Application::switchScreen
     */
    virtual void tearDownScreen()
 8010cc0:	b480      	push	{r7}
 8010cc2:	b083      	sub	sp, #12
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
    {
    }
 8010cc8:	bf00      	nop
 8010cca:	370c      	adds	r7, #12
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd2:	4770      	bx	lr

08010cd4 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010cd4:	b480      	push	{r7}
 8010cd6:	b083      	sub	sp, #12
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
    {
    }
 8010cdc:	bf00      	nop
 8010cde:	370c      	adds	r7, #12
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce6:	4770      	bx	lr

08010ce8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010ce8:	b480      	push	{r7}
 8010cea:	b083      	sub	sp, #12
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	460b      	mov	r3, r1
 8010cf2:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010cf4:	bf00      	nop
 8010cf6:	370c      	adds	r7, #12
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfe:	4770      	bx	lr

08010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b082      	sub	sp, #8
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	3304      	adds	r3, #4
 8010d0e:	6839      	ldr	r1, [r7, #0]
 8010d10:	4618      	mov	r0, r3
 8010d12:	f005 fc41 	bl	8016598 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010d16:	bf00      	nop
 8010d18:	3708      	adds	r7, #8
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}

08010d1e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8010d1e:	b580      	push	{r7, lr}
 8010d20:	b084      	sub	sp, #16
 8010d22:	af00      	add	r7, sp, #0
 8010d24:	60f8      	str	r0, [r7, #12]
 8010d26:	607b      	str	r3, [r7, #4]
 8010d28:	460b      	mov	r3, r1
 8010d2a:	817b      	strh	r3, [r7, #10]
 8010d2c:	4613      	mov	r3, r2
 8010d2e:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7ff ff24 	bl	8010b80 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d008      	beq.n	8010d50 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7ff ff2a 	bl	8010b9a <_ZNK8touchgfx8Drawable11isTouchableEv>
 8010d46:	4603      	mov	r3, r0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d001      	beq.n	8010d50 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	e000      	b.n	8010d52 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010d50:	2300      	movs	r3, #0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d002      	beq.n	8010d5c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8010d56:	68fa      	ldr	r2, [r7, #12]
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	601a      	str	r2, [r3, #0]
        }
    }
 8010d5c:	bf00      	nop
 8010d5e:	3710      	adds	r7, #16
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	4a05      	ldr	r2, [pc, #20]	; (8010d84 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	601a      	str	r2, [r3, #0]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	4618      	mov	r0, r3
 8010d76:	f7ff fe27 	bl	80109c8 <_ZN8touchgfx8DrawableD1Ev>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3708      	adds	r7, #8
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	08028d30 	.word	0x08028d30

08010d88 <_ZN8touchgfx6WidgetD0Ev>:
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f7ff ffe7 	bl	8010d64 <_ZN8touchgfx6WidgetD1Ev>
 8010d96:	2128      	movs	r1, #40	; 0x28
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f016 f82b 	bl	8026df4 <_ZdlPvj>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	4618      	mov	r0, r3
 8010da2:	3708      	adds	r7, #8
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}

08010da8 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8010da8:	b480      	push	{r7}
 8010daa:	b083      	sub	sp, #12
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	460b      	mov	r3, r1
 8010db2:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8010db4:	4a06      	ldr	r2, [pc, #24]	; (8010dd0 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	601a      	str	r2, [r3, #0]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	887a      	ldrh	r2, [r7, #2]
 8010dbe:	809a      	strh	r2, [r3, #4]
    }
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	370c      	adds	r7, #12
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dcc:	4770      	bx	lr
 8010dce:	bf00      	nop
 8010dd0:	080286f8 	.word	0x080286f8

08010dd4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8010dd4:	b480      	push	{r7}
 8010dd6:	b083      	sub	sp, #12
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	683a      	ldr	r2, [r7, #0]
 8010de2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010de4:	bf00      	nop
 8010de6:	370c      	adds	r7, #12
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr

08010df0 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b082      	sub	sp, #8
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
 8010df8:	4a05      	ldr	r2, [pc, #20]	; (8010e10 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	601a      	str	r2, [r3, #0]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7ff ffaf 	bl	8010d64 <_ZN8touchgfx6WidgetD1Ev>
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3708      	adds	r7, #8
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}
 8010e10:	0802ad50 	.word	0x0802ad50

08010e14 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b082      	sub	sp, #8
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f7ff ffe7 	bl	8010df0 <_ZN8touchgfx14AbstractButtonD1Ev>
 8010e22:	2130      	movs	r1, #48	; 0x30
 8010e24:	6878      	ldr	r0, [r7, #4]
 8010e26:	f015 ffe5 	bl	8026df4 <_ZdlPvj>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3708      	adds	r7, #8
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 8010e34:	b480      	push	{r7}
 8010e36:	b083      	sub	sp, #12
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
 8010e3c:	6039      	str	r1, [r7, #0]
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	889a      	ldrh	r2, [r3, #4]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	809a      	strh	r2, [r3, #4]
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	4618      	mov	r0, r3
 8010e4a:	370c      	adds	r7, #12
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr

08010e54 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b082      	sub	sp, #8
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	3334      	adds	r3, #52	; 0x34
 8010e62:	6839      	ldr	r1, [r7, #0]
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7ff ffe5 	bl	8010e34 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f000 f820 	bl	8010eb0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 8010e70:	bf00      	nop
 8010e72:	3708      	adds	r7, #8
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}

08010e78 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 8010e78:	b480      	push	{r7}
 8010e7a:	b083      	sub	sp, #12
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	683a      	ldr	r2, [r7, #0]
 8010e86:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010e88:	bf00      	nop
 8010e8a:	370c      	adds	r7, #12
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr

08010e94 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 8010e94:	b480      	push	{r7}
 8010e96:	b083      	sub	sp, #12
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	683a      	ldr	r2, [r7, #0]
 8010ea2:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8010ea4:	bf00      	nop
 8010ea6:	370c      	adds	r7, #12
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eae:	4770      	bx	lr

08010eb0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8010eb0:	b590      	push	{r4, r7, lr}
 8010eb2:	b08b      	sub	sp, #44	; 0x2c
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	3334      	adds	r3, #52	; 0x34
 8010ebc:	61fb      	str	r3, [r7, #28]
     *
     * @return Is the id valid.
     */
    FORCE_INLINE_FUNCTION bool hasValidId() const
    {
        return typedTextId != TYPED_TEXT_INVALID;
 8010ebe:	69fb      	ldr	r3, [r7, #28]
 8010ec0:	889b      	ldrh	r3, [r3, #4]
 8010ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	bf14      	ite	ne
 8010eca:	2301      	movne	r3, #1
 8010ecc:	2300      	moveq	r3, #0
 8010ece:	b2db      	uxtb	r3, r3
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d06f      	beq.n	8010fb4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x104>
        {
            const Font* f = typedText.getFont();
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	3334      	adds	r3, #52	; 0x34
 8010ed8:	613b      	str	r3, [r7, #16]
 8010eda:	693b      	ldr	r3, [r7, #16]
 8010edc:	60fb      	str	r3, [r7, #12]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010ede:	4b39      	ldr	r3, [pc, #228]	; (8010fc4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d105      	bne.n	8010ef2 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 8010ee6:	4b38      	ldr	r3, [pc, #224]	; (8010fc8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 8010ee8:	4a38      	ldr	r2, [pc, #224]	; (8010fcc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8010eea:	21b1      	movs	r1, #177	; 0xb1
 8010eec:	4838      	ldr	r0, [pc, #224]	; (8010fd0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8010eee:	f015 ffad 	bl	8026e4c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	889a      	ldrh	r2, [r3, #4]
 8010ef6:	4b37      	ldr	r3, [pc, #220]	; (8010fd4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8010ef8:	881b      	ldrh	r3, [r3, #0]
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d305      	bcc.n	8010f0a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 8010efe:	4b36      	ldr	r3, [pc, #216]	; (8010fd8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8010f00:	4a32      	ldr	r2, [pc, #200]	; (8010fcc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8010f02:	21b2      	movs	r1, #178	; 0xb2
 8010f04:	4832      	ldr	r0, [pc, #200]	; (8010fd0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8010f06:	f015 ffa1 	bl	8026e4c <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 8010f0a:	4b34      	ldr	r3, [pc, #208]	; (8010fdc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 8010f0c:	681a      	ldr	r2, [r3, #0]
 8010f0e:	4b2d      	ldr	r3, [pc, #180]	; (8010fc4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 8010f10:	6819      	ldr	r1, [r3, #0]
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	889b      	ldrh	r3, [r3, #4]
 8010f16:	005b      	lsls	r3, r3, #1
 8010f18:	440b      	add	r3, r1
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	009b      	lsls	r3, r3, #2
 8010f1e:	4413      	add	r3, r2
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	3334      	adds	r3, #52	; 0x34
 8010f28:	61bb      	str	r3, [r7, #24]
 8010f2a:	69bb      	ldr	r3, [r7, #24]
 8010f2c:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010f2e:	4b25      	ldr	r3, [pc, #148]	; (8010fc4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x114>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d105      	bne.n	8010f42 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x92>
 8010f36:	4b24      	ldr	r3, [pc, #144]	; (8010fc8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x118>)
 8010f38:	4a24      	ldr	r2, [pc, #144]	; (8010fcc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8010f3a:	21b1      	movs	r1, #177	; 0xb1
 8010f3c:	4824      	ldr	r0, [pc, #144]	; (8010fd0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8010f3e:	f015 ff85 	bl	8026e4c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	889a      	ldrh	r2, [r3, #4]
 8010f46:	4b23      	ldr	r3, [pc, #140]	; (8010fd4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8010f48:	881b      	ldrh	r3, [r3, #0]
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d305      	bcc.n	8010f5a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xaa>
 8010f4e:	4b22      	ldr	r3, [pc, #136]	; (8010fd8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8010f50:	4a1e      	ldr	r2, [pc, #120]	; (8010fcc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8010f52:	21b2      	movs	r1, #178	; 0xb2
 8010f54:	481e      	ldr	r0, [pc, #120]	; (8010fd0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8010f56:	f015 ff79 	bl	8026e4c <__assert_func>
        return texts->getText(typedTextId);
 8010f5a:	4b21      	ldr	r3, [pc, #132]	; (8010fe0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 8010f5c:	681a      	ldr	r2, [r3, #0]
 8010f5e:	69bb      	ldr	r3, [r7, #24]
 8010f60:	889b      	ldrh	r3, [r3, #4]
 8010f62:	4619      	mov	r1, r3
 8010f64:	4610      	mov	r0, r2
 8010f66:	f002 fc7d 	bl	8013864 <_ZNK8touchgfx5Texts7getTextEt>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8010f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	3328      	adds	r3, #40	; 0x28
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	6a39      	ldr	r1, [r7, #32]
 8010f78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f7a:	4798      	blx	r3
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	b2dc      	uxtb	r4, r3
 8010f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	3340      	adds	r3, #64	; 0x40
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	6a39      	ldr	r1, [r7, #32]
 8010f8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f8c:	4798      	blx	r3
 8010f8e:	4603      	mov	r3, r0
 8010f90:	b2db      	uxtb	r3, r3
 8010f92:	fb14 f303 	smulbb	r3, r4, r3
 8010f96:	b2dc      	uxtb	r4, r3
 8010f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	3324      	adds	r3, #36	; 0x24
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	6a39      	ldr	r1, [r7, #32]
 8010fa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fa4:	4798      	blx	r3
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	4423      	add	r3, r4
 8010faa:	b2da      	uxtb	r2, r3
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8010fb2:	e003      	b.n	8010fbc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10c>
            textHeightIncludingSpacing = 0;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 8010fbc:	bf00      	nop
 8010fbe:	372c      	adds	r7, #44	; 0x2c
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd90      	pop	{r4, r7, pc}
 8010fc4:	2000b464 	.word	0x2000b464
 8010fc8:	080280cc 	.word	0x080280cc
 8010fcc:	08028d90 	.word	0x08028d90
 8010fd0:	08028110 	.word	0x08028110
 8010fd4:	2000b468 	.word	0x2000b468
 8010fd8:	08028154 	.word	0x08028154
 8010fdc:	2000b46c 	.word	0x2000b46c
 8010fe0:	2000b470 	.word	0x2000b470

08010fe4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	4a05      	ldr	r2, [pc, #20]	; (8011004 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	601a      	str	r2, [r3, #0]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f7ff fe2b 	bl	8010c50 <_ZN8touchgfx6ScreenD1Ev>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3708      	adds	r7, #8
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}
 8011004:	08028ce4 	.word	0x08028ce4

08011008 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8011008:	b580      	push	{r7, lr}
 801100a:	b082      	sub	sp, #8
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f7ff ffe7 	bl	8010fe4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8011016:	2140      	movs	r1, #64	; 0x40
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	f015 feeb 	bl	8026df4 <_ZdlPvj>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	4618      	mov	r0, r3
 8011022:	3708      	adds	r7, #8
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}

08011028 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8011028:	b580      	push	{r7, lr}
 801102a:	b082      	sub	sp, #8
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	4a0d      	ldr	r2, [pc, #52]	; (8011068 <_ZN15Screen1ViewBaseD1Ev+0x40>)
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	601a      	str	r2, [r3, #0]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	33b4      	adds	r3, #180	; 0xb4
 801103a:	4618      	mov	r0, r3
 801103c:	f000 f992 	bl	8011364 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	336c      	adds	r3, #108	; 0x6c
 8011044:	4618      	mov	r0, r3
 8011046:	f000 fa15 	bl	8011474 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	3340      	adds	r3, #64	; 0x40
 801104e:	4618      	mov	r0, r3
 8011050:	f000 f9cc 	bl	80113ec <_ZN8touchgfx13ScalableImageD1Ev>
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	4618      	mov	r0, r3
 8011058:	f7ff ffc4 	bl	8010fe4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	4618      	mov	r0, r3
 8011060:	3708      	adds	r7, #8
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}
 8011066:	bf00      	nop
 8011068:	08028c98 	.word	0x08028c98

0801106c <_ZN15Screen1ViewBaseD0Ev>:
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f7ff ffd7 	bl	8011028 <_ZN15Screen1ViewBaseD1Ev>
 801107a:	21c4      	movs	r1, #196	; 0xc4
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f015 feb9 	bl	8026df4 <_ZdlPvj>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	4618      	mov	r0, r3
 8011086:	3708      	adds	r7, #8
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 801108c:	b580      	push	{r7, lr}
 801108e:	b082      	sub	sp, #8
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8011094:	f009 feb0 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 8011098:	4603      	mov	r3, r0
    }
 801109a:	4618      	mov	r0, r3
 801109c:	3708      	adds	r7, #8
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}
	...

080110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 80110a4:	b590      	push	{r4, r7, lr}
 80110a6:	b083      	sub	sp, #12
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	4603      	mov	r3, r0
 80110ac:	71fb      	strb	r3, [r7, #7]
 80110ae:	460b      	mov	r3, r1
 80110b0:	71bb      	strb	r3, [r7, #6]
 80110b2:	4613      	mov	r3, r2
 80110b4:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 80110b6:	f7fe fb6f 	bl	800f798 <_ZN8touchgfx3HAL11getInstanceEv>
 80110ba:	4603      	mov	r3, r0
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d105      	bne.n	80110cc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 80110c0:	4b0a      	ldr	r3, [pc, #40]	; (80110ec <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 80110c2:	4a0b      	ldr	r2, [pc, #44]	; (80110f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 80110c4:	2135      	movs	r1, #53	; 0x35
 80110c6:	480b      	ldr	r0, [pc, #44]	; (80110f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 80110c8:	f015 fec0 	bl	8026e4c <__assert_func>
 80110cc:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 80110ce:	f7fe fb6f 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 80110d2:	6803      	ldr	r3, [r0, #0]
 80110d4:	3328      	adds	r3, #40	; 0x28
 80110d6:	681c      	ldr	r4, [r3, #0]
 80110d8:	797b      	ldrb	r3, [r7, #5]
 80110da:	79ba      	ldrb	r2, [r7, #6]
 80110dc:	79f9      	ldrb	r1, [r7, #7]
 80110de:	47a0      	blx	r4
 80110e0:	4603      	mov	r3, r0
    }
 80110e2:	4618      	mov	r0, r3
 80110e4:	370c      	adds	r7, #12
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd90      	pop	{r4, r7, pc}
 80110ea:	bf00      	nop
 80110ec:	080281a8 	.word	0x080281a8
 80110f0:	08028dc0 	.word	0x08028dc0
 80110f4:	080281ec 	.word	0x080281ec

080110f8 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

Screen1ViewBase::Screen1ViewBase() :
 80110f8:	b590      	push	{r4, r7, lr}
 80110fa:	b08d      	sub	sp, #52	; 0x34
 80110fc:	af02      	add	r7, sp, #8
 80110fe:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	4618      	mov	r0, r3
 8011104:	f000 f8c8 	bl	8011298 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8011108:	4a51      	ldr	r2, [pc, #324]	; (8011250 <_ZN15Screen1ViewBaseC1Ev+0x158>)
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	601a      	str	r2, [r3, #0]
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	3340      	adds	r3, #64	; 0x40
 8011112:	4618      	mov	r0, r3
 8011114:	f007 fc6e 	bl	80189f4 <_ZN8touchgfx13ScalableImageC1Ev>
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	336c      	adds	r3, #108	; 0x6c
 801111c:	4618      	mov	r0, r3
 801111e:	f008 fa65 	bl	80195ec <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 8011128:	4b4a      	ldr	r3, [pc, #296]	; (8011254 <_ZN15Screen1ViewBaseC1Ev+0x15c>)
 801112a:	60fb      	str	r3, [r7, #12]
 801112c:	2300      	movs	r3, #0
 801112e:	613b      	str	r3, [r7, #16]
 8011130:	f107 030c 	add.w	r3, r7, #12
 8011134:	cb0c      	ldmia	r3, {r2, r3}
 8011136:	6879      	ldr	r1, [r7, #4]
 8011138:	f000 f8d4 	bl	80112e4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_CONT_MIN_ID));
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8011142:	f107 0314 	add.w	r3, r7, #20
 8011146:	2106      	movs	r1, #6
 8011148:	4618      	mov	r0, r3
 801114a:	f7ff fc2d 	bl	80109a8 <_ZN8touchgfx6BitmapC1Et>
 801114e:	f107 0314 	add.w	r3, r7, #20
 8011152:	4619      	mov	r1, r3
 8011154:	4620      	mov	r0, r4
 8011156:	f007 fc08 	bl	801896a <_ZN8touchgfx13ScalableImage9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(0, 0, 480, 272);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8011160:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011164:	9300      	str	r3, [sp, #0]
 8011166:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801116a:	2200      	movs	r2, #0
 801116c:	2100      	movs	r1, #0
 801116e:	f7ff fc4b 	bl	8010a08 <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	3340      	adds	r3, #64	; 0x40
 8011176:	2100      	movs	r1, #0
 8011178:	4618      	mov	r0, r3
 801117a:	f007 fbf0 	bl	801895e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>

    buttonWithLabel1.setXY(0, 212);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	336c      	adds	r3, #108	; 0x6c
 8011182:	22d4      	movs	r2, #212	; 0xd4
 8011184:	2100      	movs	r1, #0
 8011186:	4618      	mov	r0, r3
 8011188:	f7ff fc89 	bl	8010a9e <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8011192:	f107 0318 	add.w	r3, r7, #24
 8011196:	2102      	movs	r1, #2
 8011198:	4618      	mov	r0, r3
 801119a:	f7ff fc05 	bl	80109a8 <_ZN8touchgfx6BitmapC1Et>
 801119e:	f107 031c 	add.w	r3, r7, #28
 80111a2:	2103      	movs	r1, #3
 80111a4:	4618      	mov	r0, r3
 80111a6:	f7ff fbff 	bl	80109a8 <_ZN8touchgfx6BitmapC1Et>
 80111aa:	f107 021c 	add.w	r2, r7, #28
 80111ae:	f107 0318 	add.w	r3, r7, #24
 80111b2:	4619      	mov	r1, r3
 80111b4:	4620      	mov	r0, r4
 80111b6:	f008 f827 	bl	8019208 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID15));
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80111c0:	f107 0320 	add.w	r3, r7, #32
 80111c4:	2107      	movs	r1, #7
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7ff fdee 	bl	8010da8 <_ZN8touchgfx9TypedTextC1Et>
 80111cc:	f107 0320 	add.w	r3, r7, #32
 80111d0:	4619      	mov	r1, r3
 80111d2:	4620      	mov	r0, r4
 80111d4:	f7ff fe3e 	bl	8010e54 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80111d8:	f107 0320 	add.w	r3, r7, #32
 80111dc:	4618      	mov	r0, r3
 80111de:	f7fe f845 	bl	800f26c <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80111e8:	22ff      	movs	r2, #255	; 0xff
 80111ea:	21ff      	movs	r1, #255	; 0xff
 80111ec:	20ff      	movs	r0, #255	; 0xff
 80111ee:	f7ff ff59 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80111f2:	4603      	mov	r3, r0
 80111f4:	4619      	mov	r1, r3
 80111f6:	4620      	mov	r0, r4
 80111f8:	f7ff fe3e 	bl	8010e78 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8011202:	22ff      	movs	r2, #255	; 0xff
 8011204:	21ff      	movs	r1, #255	; 0xff
 8011206:	20ff      	movs	r0, #255	; 0xff
 8011208:	f7ff ff4c 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801120c:	4603      	mov	r3, r0
 801120e:	4619      	mov	r1, r3
 8011210:	4620      	mov	r0, r4
 8011212:	f7ff fe3f 	bl	8010e94 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	33b4      	adds	r3, #180	; 0xb4
 8011220:	4619      	mov	r1, r3
 8011222:	4610      	mov	r0, r2
 8011224:	f7ff fdd6 	bl	8010dd4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(scalableImage1);
 8011228:	687a      	ldr	r2, [r7, #4]
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	3340      	adds	r3, #64	; 0x40
 801122e:	4619      	mov	r1, r3
 8011230:	4610      	mov	r0, r2
 8011232:	f7ff fd65 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8011236:	687a      	ldr	r2, [r7, #4]
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	336c      	adds	r3, #108	; 0x6c
 801123c:	4619      	mov	r1, r3
 801123e:	4610      	mov	r0, r2
 8011240:	f7ff fd5e 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	4618      	mov	r0, r3
 8011248:	372c      	adds	r7, #44	; 0x2c
 801124a:	46bd      	mov	sp, r7
 801124c:	bd90      	pop	{r4, r7, pc}
 801124e:	bf00      	nop
 8011250:	08028c98 	.word	0x08028c98
 8011254:	0801126d 	.word	0x0801126d

08011258 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8011258:	b480      	push	{r7}
 801125a:	b083      	sub	sp, #12
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]

}
 8011260:	bf00      	nop
 8011262:	370c      	adds	r7, #12
 8011264:	46bd      	mov	sp, r7
 8011266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126a:	4770      	bx	lr

0801126c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	336c      	adds	r3, #108	; 0x6c
 801127a:	683a      	ldr	r2, [r7, #0]
 801127c:	429a      	cmp	r2, r3
 801127e:	d106      	bne.n	801128e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to screen
        //Go to screen with no screen transition
        application().gotoscreenScreenNoTransition();
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f7ff ff03 	bl	801108c <_ZN15Screen1ViewBase11applicationEv>
 8011286:	4603      	mov	r3, r0
 8011288:	4618      	mov	r0, r3
 801128a:	f7fe fbfd 	bl	800fa88 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
}
 801128e:	bf00      	nop
 8011290:	3708      	adds	r7, #8
 8011292:	46bd      	mov	sp, r7
 8011294:	bd80      	pop	{r7, pc}
	...

08011298 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	4618      	mov	r0, r3
 80112a4:	f00a fd6a 	bl	801bd7c <_ZN8touchgfx6ScreenC1Ev>
 80112a8:	4a05      	ldr	r2, [pc, #20]	; (80112c0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	601a      	str	r2, [r3, #0]
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	2200      	movs	r2, #0
 80112b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	4618      	mov	r0, r3
 80112b8:	3708      	adds	r7, #8
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
 80112be:	bf00      	nop
 80112c0:	08028ce4 	.word	0x08028ce4

080112c4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 80112c4:	b480      	push	{r7}
 80112c6:	b083      	sub	sp, #12
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	4a04      	ldr	r2, [pc, #16]	; (80112e0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	601a      	str	r2, [r3, #0]
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	4618      	mov	r0, r3
 80112d6:	370c      	adds	r7, #12
 80112d8:	46bd      	mov	sp, r7
 80112da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112de:	4770      	bx	lr
 80112e0:	08028d18 	.word	0x08028d18

080112e4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b084      	sub	sp, #16
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	60f8      	str	r0, [r7, #12]
 80112ec:	60b9      	str	r1, [r7, #8]
 80112ee:	4639      	mov	r1, r7
 80112f0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7ff ffe4 	bl	80112c4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80112fc:	4a08      	ldr	r2, [pc, #32]	; (8011320 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	68ba      	ldr	r2, [r7, #8]
 8011306:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	3308      	adds	r3, #8
 801130c:	463a      	mov	r2, r7
 801130e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011312:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	4618      	mov	r0, r3
 801131a:	3710      	adds	r7, #16
 801131c:	46bd      	mov	sp, r7
 801131e:	bd80      	pop	{r7, pc}
 8011320:	08028ccc 	.word	0x08028ccc

08011324 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8011324:	b480      	push	{r7}
 8011326:	b083      	sub	sp, #12
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
    }
 801132c:	4a04      	ldr	r2, [pc, #16]	; (8011340 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	601a      	str	r2, [r3, #0]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	4618      	mov	r0, r3
 8011336:	370c      	adds	r7, #12
 8011338:	46bd      	mov	sp, r7
 801133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133e:	4770      	bx	lr
 8011340:	08028d18 	.word	0x08028d18

08011344 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8011344:	b580      	push	{r7, lr}
 8011346:	b082      	sub	sp, #8
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
    }
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f7ff ffe9 	bl	8011324 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8011352:	2104      	movs	r1, #4
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f015 fd4d 	bl	8026df4 <_ZdlPvj>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	4618      	mov	r0, r3
 801135e:	3708      	adds	r7, #8
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}

08011364 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8011364:	b580      	push	{r7, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	4a05      	ldr	r2, [pc, #20]	; (8011384 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	601a      	str	r2, [r3, #0]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	4618      	mov	r0, r3
 8011376:	f7ff ffd5 	bl	8011324 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	4618      	mov	r0, r3
 801137e:	3708      	adds	r7, #8
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}
 8011384:	08028ccc 	.word	0x08028ccc

08011388 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8011388:	b580      	push	{r7, lr}
 801138a:	b082      	sub	sp, #8
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
 8011390:	6878      	ldr	r0, [r7, #4]
 8011392:	f7ff ffe7 	bl	8011364 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8011396:	2110      	movs	r1, #16
 8011398:	6878      	ldr	r0, [r7, #4]
 801139a:	f015 fd2b 	bl	8026df4 <_ZdlPvj>
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	4618      	mov	r0, r3
 80113a2:	3708      	adds	r7, #8
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}

080113a8 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b082      	sub	sp, #8
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	4a05      	ldr	r2, [pc, #20]	; (80113c8 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	601a      	str	r2, [r3, #0]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7ff fb05 	bl	80109c8 <_ZN8touchgfx8DrawableD1Ev>
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	4618      	mov	r0, r3
 80113c2:	3708      	adds	r7, #8
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	0802a060 	.word	0x0802a060

080113cc <_ZN8touchgfx9ContainerD0Ev>:
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b082      	sub	sp, #8
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f7ff ffe7 	bl	80113a8 <_ZN8touchgfx9ContainerD1Ev>
 80113da:	212c      	movs	r1, #44	; 0x2c
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f015 fd09 	bl	8026df4 <_ZdlPvj>
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	4618      	mov	r0, r3
 80113e6:	3708      	adds	r7, #8
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}

080113ec <_ZN8touchgfx13ScalableImageD1Ev>:
 * algorithm used. The rendering algorithm can be changed dynamically. Please note that
 * scaling images is done at runtime and may require a lot of calculations.
 *
 * @note Note that this widget does not support 1 bit per pixel color depth.
 */
class ScalableImage : public Widget
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b082      	sub	sp, #8
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
 80113f4:	4a05      	ldr	r2, [pc, #20]	; (801140c <_ZN8touchgfx13ScalableImageD1Ev+0x20>)
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	601a      	str	r2, [r3, #0]
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7ff fcb1 	bl	8010d64 <_ZN8touchgfx6WidgetD1Ev>
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	4618      	mov	r0, r3
 8011406:	3708      	adds	r7, #8
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}
 801140c:	0802adbc 	.word	0x0802adbc

08011410 <_ZN8touchgfx13ScalableImageD0Ev>:
 8011410:	b580      	push	{r7, lr}
 8011412:	b082      	sub	sp, #8
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f7ff ffe7 	bl	80113ec <_ZN8touchgfx13ScalableImageD1Ev>
 801141e:	212c      	movs	r1, #44	; 0x2c
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f015 fce7 	bl	8026df4 <_ZdlPvj>
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	4618      	mov	r0, r3
 801142a:	3708      	adds	r7, #8
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}

08011430 <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	4a05      	ldr	r2, [pc, #20]	; (8011450 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	601a      	str	r2, [r3, #0]
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	4618      	mov	r0, r3
 8011442:	f7ff fcd5 	bl	8010df0 <_ZN8touchgfx14AbstractButtonD1Ev>
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	4618      	mov	r0, r3
 801144a:	3708      	adds	r7, #8
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	0802b070 	.word	0x0802b070

08011454 <_ZN8touchgfx6ButtonD0Ev>:
 8011454:	b580      	push	{r7, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f7ff ffe7 	bl	8011430 <_ZN8touchgfx6ButtonD1Ev>
 8011462:	2134      	movs	r1, #52	; 0x34
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f015 fcc5 	bl	8026df4 <_ZdlPvj>
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	4618      	mov	r0, r3
 801146e:	3708      	adds	r7, #8
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}

08011474 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	4a08      	ldr	r2, [pc, #32]	; (80114a0 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	601a      	str	r2, [r3, #0]
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	3334      	adds	r3, #52	; 0x34
 8011486:	4618      	mov	r0, r3
 8011488:	f7fd fef0 	bl	800f26c <_ZN8touchgfx9TypedTextD1Ev>
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	4618      	mov	r0, r3
 8011490:	f7ff ffce 	bl	8011430 <_ZN8touchgfx6ButtonD1Ev>
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	4618      	mov	r0, r3
 8011498:	3708      	adds	r7, #8
 801149a:	46bd      	mov	sp, r7
 801149c:	bd80      	pop	{r7, pc}
 801149e:	bf00      	nop
 80114a0:	0802b180 	.word	0x0802b180

080114a4 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b082      	sub	sp, #8
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f7ff ffe1 	bl	8011474 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80114b2:	2148      	movs	r1, #72	; 0x48
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f015 fc9d 	bl	8026df4 <_ZdlPvj>
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	4618      	mov	r0, r3
 80114be:	3708      	adds	r7, #8
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b082      	sub	sp, #8
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
 80114cc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	685b      	ldr	r3, [r3, #4]
 80114d2:	687a      	ldr	r2, [r7, #4]
 80114d4:	68d2      	ldr	r2, [r2, #12]
 80114d6:	1052      	asrs	r2, r2, #1
 80114d8:	1898      	adds	r0, r3, r2
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	68db      	ldr	r3, [r3, #12]
 80114de:	f003 0301 	and.w	r3, r3, #1
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d102      	bne.n	80114ec <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	689b      	ldr	r3, [r3, #8]
 80114ea:	e00a      	b.n	8011502 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	68d2      	ldr	r2, [r2, #12]
 80114f4:	1052      	asrs	r2, r2, #1
 80114f6:	4413      	add	r3, r2
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	687a      	ldr	r2, [r7, #4]
 80114fc:	6892      	ldr	r2, [r2, #8]
 80114fe:	4413      	add	r3, r2
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	6839      	ldr	r1, [r7, #0]
 8011504:	4798      	blx	r3
    }
 8011506:	bf00      	nop
 8011508:	3708      	adds	r7, #8
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}

0801150e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801150e:	b480      	push	{r7}
 8011510:	b083      	sub	sp, #12
 8011512:	af00      	add	r7, sp, #0
 8011514:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d010      	beq.n	8011540 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	689b      	ldr	r3, [r3, #8]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d107      	bne.n	8011536 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	68db      	ldr	r3, [r3, #12]
 801152a:	f003 0301 	and.w	r3, r3, #1
 801152e:	2b00      	cmp	r3, #0
 8011530:	d101      	bne.n	8011536 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8011532:	2301      	movs	r3, #1
 8011534:	e000      	b.n	8011538 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8011536:	2300      	movs	r3, #0
 8011538:	2b01      	cmp	r3, #1
 801153a:	d001      	beq.n	8011540 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801153c:	2301      	movs	r3, #1
 801153e:	e000      	b.n	8011542 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8011540:	2300      	movs	r3, #0
    }
 8011542:	4618      	mov	r0, r3
 8011544:	370c      	adds	r7, #12
 8011546:	46bd      	mov	sp, r7
 8011548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154c:	4770      	bx	lr

0801154e <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 801154e:	b480      	push	{r7}
 8011550:	b083      	sub	sp, #12
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
 8011556:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	683a      	ldr	r2, [r7, #0]
 801155c:	601a      	str	r2, [r3, #0]
    }
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	4618      	mov	r0, r3
 8011562:	370c      	adds	r7, #12
 8011564:	46bd      	mov	sp, r7
 8011566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156a:	4770      	bx	lr

0801156c <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 801156c:	b480      	push	{r7}
 801156e:	b083      	sub	sp, #12
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	2200      	movs	r2, #0
 8011578:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	2200      	movs	r2, #0
 801157e:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	2200      	movs	r2, #0
 8011584:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2200      	movs	r2, #0
 801158a:	80da      	strh	r2, [r3, #6]
    }
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	4618      	mov	r0, r3
 8011590:	370c      	adds	r7, #12
 8011592:	46bd      	mov	sp, r7
 8011594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011598:	4770      	bx	lr

0801159a <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 801159a:	b480      	push	{r7}
 801159c:	b085      	sub	sp, #20
 801159e:	af00      	add	r7, sp, #0
 80115a0:	60f8      	str	r0, [r7, #12]
 80115a2:	4608      	mov	r0, r1
 80115a4:	4611      	mov	r1, r2
 80115a6:	461a      	mov	r2, r3
 80115a8:	4603      	mov	r3, r0
 80115aa:	817b      	strh	r3, [r7, #10]
 80115ac:	460b      	mov	r3, r1
 80115ae:	813b      	strh	r3, [r7, #8]
 80115b0:	4613      	mov	r3, r2
 80115b2:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	897a      	ldrh	r2, [r7, #10]
 80115b8:	801a      	strh	r2, [r3, #0]
        this->y = y;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	893a      	ldrh	r2, [r7, #8]
 80115be:	805a      	strh	r2, [r3, #2]
        this->width = width;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	88fa      	ldrh	r2, [r7, #6]
 80115c4:	809a      	strh	r2, [r3, #4]
        this->height = height;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	8b3a      	ldrh	r2, [r7, #24]
 80115ca:	80da      	strh	r2, [r3, #6]
    }
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	4618      	mov	r0, r3
 80115d0:	3714      	adds	r7, #20
 80115d2:	46bd      	mov	sp, r7
 80115d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d8:	4770      	bx	lr
	...

080115dc <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 80115dc:	b580      	push	{r7, lr}
 80115de:	b084      	sub	sp, #16
 80115e0:	af02      	add	r7, sp, #8
 80115e2:	6078      	str	r0, [r7, #4]
          visible(true)
 80115e4:	4a13      	ldr	r2, [pc, #76]	; (8011634 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	601a      	str	r2, [r3, #0]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	1d18      	adds	r0, r3, #4
 80115ee:	2300      	movs	r3, #0
 80115f0:	9300      	str	r3, [sp, #0]
 80115f2:	2300      	movs	r3, #0
 80115f4:	2200      	movs	r2, #0
 80115f6:	2100      	movs	r1, #0
 80115f8:	f7ff ffcf 	bl	801159a <_ZN8touchgfx4RectC1Essss>
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	330c      	adds	r3, #12
 8011600:	4618      	mov	r0, r3
 8011602:	f7ff ffb3 	bl	801156c <_ZN8touchgfx4RectC1Ev>
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2200      	movs	r2, #0
 801160a:	615a      	str	r2, [r3, #20]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2200      	movs	r2, #0
 8011610:	619a      	str	r2, [r3, #24]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2200      	movs	r2, #0
 8011616:	61da      	str	r2, [r3, #28]
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2200      	movs	r2, #0
 801161c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	2201      	movs	r2, #1
 8011624:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	4618      	mov	r0, r3
 801162c:	3708      	adds	r7, #8
 801162e:	46bd      	mov	sp, r7
 8011630:	bd80      	pop	{r7, pc}
 8011632:	bf00      	nop
 8011634:	0802b4fc 	.word	0x0802b4fc

08011638 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 8011638:	b480      	push	{r7}
 801163a:	b083      	sub	sp, #12
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8011644:	4618      	mov	r0, r3
 8011646:	370c      	adds	r7, #12
 8011648:	46bd      	mov	sp, r7
 801164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164e:	4770      	bx	lr

08011650 <_ZN8touchgfx6WidgetC1Ev>:
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	4618      	mov	r0, r3
 801165c:	f7ff ffbe 	bl	80115dc <_ZN8touchgfx8DrawableC1Ev>
 8011660:	4a03      	ldr	r2, [pc, #12]	; (8011670 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	601a      	str	r2, [r3, #0]
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	4618      	mov	r0, r3
 801166a:	3708      	adds	r7, #8
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}
 8011670:	08028d30 	.word	0x08028d30

08011674 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8011674:	b580      	push	{r7, lr}
 8011676:	b082      	sub	sp, #8
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0), reportAsSolid(false)
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	4618      	mov	r0, r3
 8011680:	2326      	movs	r3, #38	; 0x26
 8011682:	461a      	mov	r2, r3
 8011684:	2100      	movs	r1, #0
 8011686:	f015 fc6a 	bl	8026f5e <memset>
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	4618      	mov	r0, r3
 801168e:	f7ff ffdf 	bl	8011650 <_ZN8touchgfx6WidgetC1Ev>
 8011692:	4a0b      	ldr	r2, [pc, #44]	; (80116c0 <_ZN8touchgfx3BoxC1Ev+0x4c>)
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	601a      	str	r2, [r3, #0]
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	22ff      	movs	r2, #255	; 0xff
 801169c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	3328      	adds	r3, #40	; 0x28
 80116a4:	2100      	movs	r1, #0
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7ff ff51 	bl	801154e <_ZN8touchgfx9colortypeC1Em>
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2200      	movs	r2, #0
 80116b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	4618      	mov	r0, r3
 80116b8:	3708      	adds	r7, #8
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}
 80116be:	bf00      	nop
 80116c0:	0802afa4 	.word	0x0802afa4

080116c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 80116c4:	b480      	push	{r7}
 80116c6:	b083      	sub	sp, #12
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
 80116cc:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	683a      	ldr	r2, [r7, #0]
 80116d2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80116d4:	bf00      	nop
 80116d6:	370c      	adds	r7, #12
 80116d8:	46bd      	mov	sp, r7
 80116da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116de:	4770      	bx	lr

080116e0 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 80116e0:	b480      	push	{r7}
 80116e2:	b083      	sub	sp, #12
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255),
          painterAlpha(255)
 80116e8:	4a0a      	ldr	r2, [pc, #40]	; (8011714 <_ZN8touchgfx15AbstractPainterC1Ev+0x34>)
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	601a      	str	r2, [r3, #0]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	2200      	movs	r2, #0
 80116f2:	809a      	strh	r2, [r3, #4]
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2200      	movs	r2, #0
 80116f8:	80da      	strh	r2, [r3, #6]
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	22ff      	movs	r2, #255	; 0xff
 80116fe:	721a      	strb	r2, [r3, #8]
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	22ff      	movs	r2, #255	; 0xff
 8011704:	725a      	strb	r2, [r3, #9]
    {
    }
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	4618      	mov	r0, r3
 801170a:	370c      	adds	r7, #12
 801170c:	46bd      	mov	sp, r7
 801170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011712:	4770      	bx	lr
 8011714:	08028f40 	.word	0x08028f40

08011718 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8011718:	b480      	push	{r7}
 801171a:	b083      	sub	sp, #12
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
    {
 8011720:	4a04      	ldr	r2, [pc, #16]	; (8011734 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	601a      	str	r2, [r3, #0]
    }
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	4618      	mov	r0, r3
 801172a:	370c      	adds	r7, #12
 801172c:	46bd      	mov	sp, r7
 801172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011732:	4770      	bx	lr
 8011734:	08028f40 	.word	0x08028f40

08011738 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8011738:	b580      	push	{r7, lr}
 801173a:	b082      	sub	sp, #8
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
    }
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f7ff ffe9 	bl	8011718 <_ZN8touchgfx15AbstractPainterD1Ev>
 8011746:	210c      	movs	r1, #12
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f015 fb53 	bl	8026df4 <_ZdlPvj>
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	4618      	mov	r0, r3
 8011752:	3708      	adds	r7, #8
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}

08011758 <_ZN8touchgfx15AbstractPainter8setAlphaEh>:
     *       AbstractPainter for better performance.
     */
    virtual void render(uint8_t* ptr, int x, int xAdjust, int y, unsigned count, const uint8_t* covers) = 0;

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 8011758:	b480      	push	{r7}
 801175a:	b083      	sub	sp, #12
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
 8011760:	460b      	mov	r3, r1
 8011762:	70fb      	strb	r3, [r7, #3]
    {
        painterAlpha = newAlpha;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	78fa      	ldrb	r2, [r7, #3]
 8011768:	725a      	strb	r2, [r3, #9]
    }
 801176a:	bf00      	nop
 801176c:	370c      	adds	r7, #12
 801176e:	46bd      	mov	sp, r7
 8011770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011774:	4770      	bx	lr

08011776 <_ZNK8touchgfx15AbstractPainter8getAlphaEv>:

    /** @copydoc Image::getAlpha */
    virtual uint8_t getAlpha() const
 8011776:	b480      	push	{r7}
 8011778:	b083      	sub	sp, #12
 801177a:	af00      	add	r7, sp, #0
 801177c:	6078      	str	r0, [r7, #4]
    {
        return painterAlpha;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	7a5b      	ldrb	r3, [r3, #9]
    }
 8011782:	4618      	mov	r0, r3
 8011784:	370c      	adds	r7, #12
 8011786:	46bd      	mov	sp, r7
 8011788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178c:	4770      	bx	lr

0801178e <_ZN8touchgfx7CWRUtil2Q5C1Ev>:
     */
    class Q5
    {
    public:
        /** Initializes a new instance of the Q5 class. */
        Q5()
 801178e:	b480      	push	{r7}
 8011790:	b083      	sub	sp, #12
 8011792:	af00      	add	r7, sp, #0
 8011794:	6078      	str	r0, [r7, #4]
            : v(0)
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2200      	movs	r2, #0
 801179a:	601a      	str	r2, [r3, #0]
        {
        }
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	4618      	mov	r0, r3
 80117a0:	370c      	adds	r7, #12
 80117a2:	46bd      	mov	sp, r7
 80117a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a8:	4770      	bx	lr

080117aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 80117aa:	b480      	push	{r7}
 80117ac:	b083      	sub	sp, #12
 80117ae:	af00      	add	r7, sp, #0
 80117b0:	6078      	str	r0, [r7, #4]
 80117b2:	6039      	str	r1, [r7, #0]
            : v(i)
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	683a      	ldr	r2, [r7, #0]
 80117b8:	601a      	str	r2, [r3, #0]
        {
        }
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	4618      	mov	r0, r3
 80117be:	370c      	adds	r7, #12
 80117c0:	46bd      	mov	sp, r7
 80117c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c6:	4770      	bx	lr

080117c8 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 80117c8:	b480      	push	{r7}
 80117ca:	b083      	sub	sp, #12
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
        {
            return v;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
        }
 80117d4:	4618      	mov	r0, r3
 80117d6:	370c      	adds	r7, #12
 80117d8:	46bd      	mov	sp, r7
 80117da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117de:	4770      	bx	lr

080117e0 <_ZN8touchgfx7CWRUtil3Q10C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q10 format.
         *
         * @param  i int pre-formattet in Q10 format.
         */
        explicit Q10(int i)
 80117e0:	b480      	push	{r7}
 80117e2:	b083      	sub	sp, #12
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	6039      	str	r1, [r7, #0]
            : v(i)
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	683a      	ldr	r2, [r7, #0]
 80117ee:	601a      	str	r2, [r3, #0]
        {
        }
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	4618      	mov	r0, r3
 80117f4:	370c      	adds	r7, #12
 80117f6:	46bd      	mov	sp, r7
 80117f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fc:	4770      	bx	lr

080117fe <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
     *
     * @note The painter set with setPainter() can also have an alpha value. The alpha value of
     *       the painter and the alpha value of the CanvasWidget are combine to a single
     *       alpha value.
     */
    virtual void setAlpha(uint8_t alpha)
 80117fe:	b480      	push	{r7}
 8011800:	b083      	sub	sp, #12
 8011802:	af00      	add	r7, sp, #0
 8011804:	6078      	str	r0, [r7, #4]
 8011806:	460b      	mov	r3, r1
 8011808:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	78fa      	ldrb	r2, [r7, #3]
 801180e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
 8011812:	bf00      	nop
 8011814:	370c      	adds	r7, #12
 8011816:	46bd      	mov	sp, r7
 8011818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181c:	4770      	bx	lr

0801181e <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
     *
     * @return Gets the current alpha value of the Box.
     *
     * @see setAlpha
     */
    virtual uint8_t getAlpha() const
 801181e:	b480      	push	{r7}
 8011820:	b083      	sub	sp, #12
 8011822:	af00      	add	r7, sp, #0
 8011824:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    }
 801182c:	4618      	mov	r0, r3
 801182e:	370c      	adds	r7, #12
 8011830:	46bd      	mov	sp, r7
 8011832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011836:	4770      	bx	lr

08011838 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8011838:	b580      	push	{r7, lr}
 801183a:	b084      	sub	sp, #16
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	4618      	mov	r0, r3
 8011844:	f7ff ff4c 	bl	80116e0 <_ZN8touchgfx15AbstractPainterC1Ev>
 8011848:	4a27      	ldr	r2, [pc, #156]	; (80118e8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb0>)
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	601a      	str	r2, [r3, #0]
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	2200      	movs	r2, #0
 8011852:	60da      	str	r2, [r3, #12]
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2200      	movs	r2, #0
 8011858:	611a      	str	r2, [r3, #16]
 801185a:	2301      	movs	r3, #1
 801185c:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 801185e:	f7fd ffa7 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 8011862:	4602      	mov	r2, r0
 8011864:	6813      	ldr	r3, [r2, #0]
 8011866:	3320      	adds	r3, #32
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	4610      	mov	r0, r2
 801186c:	4798      	blx	r3
 801186e:	4603      	mov	r3, r0
 8011870:	461a      	mov	r2, r3
 8011872:	7bfb      	ldrb	r3, [r7, #15]
 8011874:	4293      	cmp	r3, r2
 8011876:	bf0c      	ite	eq
 8011878:	2301      	moveq	r3, #1
 801187a:	2300      	movne	r3, #0
 801187c:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 801187e:	f7fd ff8b 	bl	800f798 <_ZN8touchgfx3HAL11getInstanceEv>
 8011882:	4603      	mov	r3, r0
 8011884:	4618      	mov	r0, r3
 8011886:	f7ff fed7 	bl	8011638 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 801188a:	4603      	mov	r3, r0
 801188c:	2b00      	cmp	r3, #0
 801188e:	bf14      	ite	ne
 8011890:	2301      	movne	r3, #1
 8011892:	2300      	moveq	r3, #0
 8011894:	b2db      	uxtb	r3, r3
 8011896:	2b00      	cmp	r3, #0
 8011898:	d016      	beq.n	80118c8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x90>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 801189a:	f7fd ff7d 	bl	800f798 <_ZN8touchgfx3HAL11getInstanceEv>
 801189e:	4603      	mov	r3, r0
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7ff fec9 	bl	8011638 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80118a6:	4602      	mov	r2, r0
 80118a8:	6813      	ldr	r3, [r2, #0]
 80118aa:	3320      	adds	r3, #32
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	4610      	mov	r0, r2
 80118b0:	4798      	blx	r3
 80118b2:	4603      	mov	r3, r0
 80118b4:	461a      	mov	r2, r3
 80118b6:	7bfb      	ldrb	r3, [r7, #15]
 80118b8:	4293      	cmp	r3, r2
 80118ba:	bf0c      	ite	eq
 80118bc:	2301      	moveq	r3, #1
 80118be:	2300      	movne	r3, #0
 80118c0:	b2da      	uxtb	r2, r3
 80118c2:	7bbb      	ldrb	r3, [r7, #14]
 80118c4:	4313      	orrs	r3, r2
 80118c6:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 80118c8:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d105      	bne.n	80118da <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xa2>
 80118ce:	4b07      	ldr	r3, [pc, #28]	; (80118ec <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb4>)
 80118d0:	4a07      	ldr	r2, [pc, #28]	; (80118f0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 80118d2:	212b      	movs	r1, #43	; 0x2b
 80118d4:	4807      	ldr	r0, [pc, #28]	; (80118f4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 80118d6:	f015 fab9 	bl	8026e4c <__assert_func>
 80118da:	bf00      	nop
    }
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	4618      	mov	r0, r3
 80118e0:	3710      	adds	r7, #16
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}
 80118e6:	bf00      	nop
 80118e8:	0802a9c0 	.word	0x0802a9c0
 80118ec:	0802838c 	.word	0x0802838c
 80118f0:	08028f54 	.word	0x08028f54
 80118f4:	080283ec 	.word	0x080283ec

080118f8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b082      	sub	sp, #8
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
 8011900:	4a05      	ldr	r2, [pc, #20]	; (8011918 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	601a      	str	r2, [r3, #0]
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	4618      	mov	r0, r3
 801190a:	f7ff ff05 	bl	8011718 <_ZN8touchgfx15AbstractPainterD1Ev>
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	4618      	mov	r0, r3
 8011912:	3708      	adds	r7, #8
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}
 8011918:	0802a9c0 	.word	0x0802a9c0

0801191c <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 801191c:	b580      	push	{r7, lr}
 801191e:	b082      	sub	sp, #8
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f7ff ffe7 	bl	80118f8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 801192a:	2114      	movs	r1, #20
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f015 fa61 	bl	8026df4 <_ZdlPvj>
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	4618      	mov	r0, r3
 8011936:	3708      	adds	r7, #8
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}

0801193c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     * @param  alpha (Optional) the alpha, default is 255 i.e. solid.
     */
    PainterRGB888(colortype color = 0, uint8_t alpha = 255)
 801193c:	b580      	push	{r7, lr}
 801193e:	b084      	sub	sp, #16
 8011940:	af00      	add	r7, sp, #0
 8011942:	60f8      	str	r0, [r7, #12]
 8011944:	60b9      	str	r1, [r7, #8]
 8011946:	4613      	mov	r3, r2
 8011948:	71fb      	strb	r3, [r7, #7]
        : AbstractPainterRGB888()
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	4618      	mov	r0, r3
 801194e:	f7ff ff73 	bl	8011838 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8011952:	4a09      	ldr	r2, [pc, #36]	; (8011978 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x3c>)
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	601a      	str	r2, [r3, #0]
    {
        setColor(color);
 8011958:	68b9      	ldr	r1, [r7, #8]
 801195a:	68f8      	ldr	r0, [r7, #12]
 801195c:	f000 f80e 	bl	801197c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
        setAlpha(alpha);
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	79fa      	ldrb	r2, [r7, #7]
 8011964:	4611      	mov	r1, r2
 8011966:	4618      	mov	r0, r3
 8011968:	f7ff fef6 	bl	8011758 <_ZN8touchgfx15AbstractPainter8setAlphaEh>
    }
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	4618      	mov	r0, r3
 8011970:	3710      	adds	r7, #16
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}
 8011976:	bf00      	nop
 8011978:	0802aa68 	.word	0x0802aa68

0801197c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color and alpha to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 801197c:	b580      	push	{r7, lr}
 801197e:	b086      	sub	sp, #24
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	6039      	str	r1, [r7, #0]
 8011986:	683b      	ldr	r3, [r7, #0]
 8011988:	617b      	str	r3, [r7, #20]
     *
     * @see LCD16bpp::getRedFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getRedColor(colortype color)
    {
        return HAL::lcd().getRedColor(color);
 801198a:	f7fd ff11 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 801198e:	4602      	mov	r2, r0
 8011990:	6813      	ldr	r3, [r2, #0]
 8011992:	332c      	adds	r3, #44	; 0x2c
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	6979      	ldr	r1, [r7, #20]
 8011998:	4610      	mov	r0, r2
 801199a:	4798      	blx	r3
 801199c:	4603      	mov	r3, r0
 801199e:	461a      	mov	r2, r3
    {
        painterRed = Color::getRedColor(color);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	751a      	strb	r2, [r3, #20]
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	613b      	str	r3, [r7, #16]
     *
     * @see LCD16bpp::getGreenFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreenColor(colortype color)
    {
        return HAL::lcd().getGreenColor(color);
 80119a8:	f7fd ff02 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 80119ac:	4602      	mov	r2, r0
 80119ae:	6813      	ldr	r3, [r2, #0]
 80119b0:	3330      	adds	r3, #48	; 0x30
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	6939      	ldr	r1, [r7, #16]
 80119b6:	4610      	mov	r0, r2
 80119b8:	4798      	blx	r3
 80119ba:	4603      	mov	r3, r0
 80119bc:	461a      	mov	r2, r3
        painterGreen = Color::getGreenColor(color);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	755a      	strb	r2, [r3, #21]
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	60fb      	str	r3, [r7, #12]
     *
     * @see LCD16bpp::getBlueFromColor
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlueColor(colortype color)
    {
        return HAL::lcd().getBlueColor(color);
 80119c6:	f7fd fef3 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 80119ca:	4602      	mov	r2, r0
 80119cc:	6813      	ldr	r3, [r2, #0]
 80119ce:	3334      	adds	r3, #52	; 0x34
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	68f9      	ldr	r1, [r7, #12]
 80119d4:	4610      	mov	r0, r2
 80119d6:	4798      	blx	r3
 80119d8:	4603      	mov	r3, r0
 80119da:	461a      	mov	r2, r3
        painterBlue = Color::getBlueColor(color);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	759a      	strb	r2, [r3, #22]
    }
 80119e0:	bf00      	nop
 80119e2:	3718      	adds	r7, #24
 80119e4:	46bd      	mov	sp, r7
 80119e6:	bd80      	pop	{r7, pc}

080119e8 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	4618      	mov	r0, r3
 80119f4:	2326      	movs	r3, #38	; 0x26
 80119f6:	461a      	mov	r2, r3
 80119f8:	2100      	movs	r1, #0
 80119fa:	f015 fab0 	bl	8026f5e <memset>
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	4618      	mov	r0, r3
 8011a02:	f7ff fe25 	bl	8011650 <_ZN8touchgfx6WidgetC1Ev>
 8011a06:	4a14      	ldr	r2, [pc, #80]	; (8011a58 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	601a      	str	r2, [r3, #0]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	3328      	adds	r3, #40	; 0x28
 8011a10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011a14:	4618      	mov	r0, r3
 8011a16:	f7ff f9c7 	bl	8010da8 <_ZN8touchgfx9TypedTextC1Et>
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	3330      	adds	r3, #48	; 0x30
 8011a1e:	2100      	movs	r1, #0
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7ff fd94 	bl	801154e <_ZN8touchgfx9colortypeC1Em>
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2200      	movs	r2, #0
 8011a2a:	869a      	strh	r2, [r3, #52]	; 0x34
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	22ff      	movs	r2, #255	; 0xff
 8011a30:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2200      	movs	r2, #0
 8011a38:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2200      	movs	r2, #0
 8011a40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2200      	movs	r2, #0
 8011a48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3708      	adds	r7, #8
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}
 8011a56:	bf00      	nop
 8011a58:	0802aef8 	.word	0x0802aef8

08011a5c <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b082      	sub	sp, #8
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
 8011a64:	4a05      	ldr	r2, [pc, #20]	; (8011a7c <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	601a      	str	r2, [r3, #0]
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f7ff f8ef 	bl	8010c50 <_ZN8touchgfx6ScreenD1Ev>
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	4618      	mov	r0, r3
 8011a76:	3708      	adds	r7, #8
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	08028f0c 	.word	0x08028f0c

08011a80 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f7ff ffe7 	bl	8011a5c <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8011a8e:	2140      	movs	r1, #64	; 0x40
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f015 f9af 	bl	8026df4 <_ZdlPvj>
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3708      	adds	r7, #8
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b082      	sub	sp, #8
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	4a22      	ldr	r2, [pc, #136]	; (8011b34 <_ZN15Screen2ViewBaseD1Ev+0x94>)
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	601a      	str	r2, [r3, #0]
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f000 fd23 	bl	8012500 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f000 fe1d 	bl	8012700 <_ZN8touchgfx13PainterRGB888D1Ev>
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8011acc:	4618      	mov	r0, r3
 8011ace:	f000 fd39 	bl	8012544 <_ZN8touchgfx5ShapeILt3EED1Ev>
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f000 fe11 	bl	8012700 <_ZN8touchgfx13PainterRGB888D1Ev>
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f000 fe55 	bl	8012794 <_ZN8touchgfx6CircleD1Ev>
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011af0:	4618      	mov	r0, r3
 8011af2:	f000 fe27 	bl	8012744 <_ZN8touchgfx8TextAreaD1Ev>
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8011afc:	4618      	mov	r0, r3
 8011afe:	f000 fdff 	bl	8012700 <_ZN8touchgfx13PainterRGB888D1Ev>
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	33b8      	adds	r3, #184	; 0xb8
 8011b06:	4618      	mov	r0, r3
 8011b08:	f000 fdd0 	bl	80126ac <_ZN8touchgfx12LineProgressD1Ev>
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	3370      	adds	r3, #112	; 0x70
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7ff fcaf 	bl	8011474 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	3340      	adds	r3, #64	; 0x40
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f000 fd34 	bl	8012588 <_ZN8touchgfx3BoxD1Ev>
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	4618      	mov	r0, r3
 8011b24:	f7ff ff9a 	bl	8011a5c <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	3708      	adds	r7, #8
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}
 8011b32:	bf00      	nop
 8011b34:	08028e24 	.word	0x08028e24

08011b38 <_ZN15Screen2ViewBaseD0Ev>:
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b082      	sub	sp, #8
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f7ff ffad 	bl	8011aa0 <_ZN15Screen2ViewBaseD1Ev>
 8011b46:	f641 7148 	movw	r1, #8008	; 0x1f48
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f015 f952 	bl	8026df4 <_ZdlPvj>
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	4618      	mov	r0, r3
 8011b54:	3708      	adds	r7, #8
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}

08011b5a <_ZN15Screen2ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8011b5a:	b580      	push	{r7, lr}
 8011b5c:	b082      	sub	sp, #8
 8011b5e:	af00      	add	r7, sp, #0
 8011b60:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8011b62:	f009 f949 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 8011b66:	4603      	mov	r3, r0
    }
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3708      	adds	r7, #8
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}

08011b70 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b082      	sub	sp, #8
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
 8011b78:	4a05      	ldr	r2, [pc, #20]	; (8011b90 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	601a      	str	r2, [r3, #0]
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7ff f8ef 	bl	8010d64 <_ZN8touchgfx6WidgetD1Ev>
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3708      	adds	r7, #8
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}
 8011b90:	0802aaf4 	.word	0x0802aaf4

08011b94 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b082      	sub	sp, #8
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f7ff ffe7 	bl	8011b70 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8011ba2:	2130      	movs	r1, #48	; 0x30
 8011ba4:	6878      	ldr	r0, [r7, #4]
 8011ba6:	f015 f925 	bl	8026df4 <_ZdlPvj>
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	4618      	mov	r0, r3
 8011bae:	3708      	adds	r7, #8
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}

08011bb4 <_ZN8touchgfx13AbstractShapeD1Ev>:
 * around 0,0. The shapes points (corners) are calculated with regards to scaling and
 * rotation to allow for faster redrawing. Care must be taken to call
 * updateAbstractShapeCache() after updating the shape, the scale of the shape or the
 * rotation of the shape.
 */
class AbstractShape : public CanvasWidget
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	4a05      	ldr	r2, [pc, #20]	; (8011bd4 <_ZN8touchgfx13AbstractShapeD1Ev+0x20>)
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	601a      	str	r2, [r3, #0]
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7ff ffd3 	bl	8011b70 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3708      	adds	r7, #8
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}
 8011bd4:	0802a924 	.word	0x0802a924

08011bd8 <_ZN8touchgfx13AbstractShapeD0Ev>:
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b082      	sub	sp, #8
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	f7ff ffe7 	bl	8011bb4 <_ZN8touchgfx13AbstractShapeD1Ev>
 8011be6:	214c      	movs	r1, #76	; 0x4c
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f015 f903 	bl	8026df4 <_ZdlPvj>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3708      	adds	r7, #8
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}

08011bf8 <_ZN8touchgfx5ShapeILt3EEC1Ev>:
 * scaled, rotated and moved freely. Example uses could be the hands of a clock.
 *
 * @see AbstractShape
 */
template <uint16_t POINTS>
class Shape : public AbstractShape
 8011bf8:	b5b0      	push	{r4, r5, r7, lr}
 8011bfa:	b082      	sub	sp, #8
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	4618      	mov	r0, r3
 8011c04:	f005 fd22 	bl	801764c <_ZN8touchgfx13AbstractShapeC1Ev>
 8011c08:	4a1b      	ldr	r2, [pc, #108]	; (8011c78 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x80>)
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	601a      	str	r2, [r3, #0]
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	334c      	adds	r3, #76	; 0x4c
 8011c12:	2402      	movs	r4, #2
 8011c14:	461d      	mov	r5, r3
 8011c16:	2c00      	cmp	r4, #0
 8011c18:	db05      	blt.n	8011c26 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x2e>
 8011c1a:	4628      	mov	r0, r5
 8011c1c:	f7ff fdb7 	bl	801178e <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8011c20:	3504      	adds	r5, #4
 8011c22:	3c01      	subs	r4, #1
 8011c24:	e7f7      	b.n	8011c16 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x1e>
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	3358      	adds	r3, #88	; 0x58
 8011c2a:	2402      	movs	r4, #2
 8011c2c:	461d      	mov	r5, r3
 8011c2e:	2c00      	cmp	r4, #0
 8011c30:	db05      	blt.n	8011c3e <_ZN8touchgfx5ShapeILt3EEC1Ev+0x46>
 8011c32:	4628      	mov	r0, r5
 8011c34:	f7ff fdab 	bl	801178e <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8011c38:	3504      	adds	r5, #4
 8011c3a:	3c01      	subs	r4, #1
 8011c3c:	e7f7      	b.n	8011c2e <_ZN8touchgfx5ShapeILt3EEC1Ev+0x36>
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	3364      	adds	r3, #100	; 0x64
 8011c42:	2402      	movs	r4, #2
 8011c44:	461d      	mov	r5, r3
 8011c46:	2c00      	cmp	r4, #0
 8011c48:	db05      	blt.n	8011c56 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x5e>
 8011c4a:	4628      	mov	r0, r5
 8011c4c:	f7ff fd9f 	bl	801178e <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8011c50:	3504      	adds	r5, #4
 8011c52:	3c01      	subs	r4, #1
 8011c54:	e7f7      	b.n	8011c46 <_ZN8touchgfx5ShapeILt3EEC1Ev+0x4e>
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	3370      	adds	r3, #112	; 0x70
 8011c5a:	2402      	movs	r4, #2
 8011c5c:	461d      	mov	r5, r3
 8011c5e:	2c00      	cmp	r4, #0
 8011c60:	db05      	blt.n	8011c6e <_ZN8touchgfx5ShapeILt3EEC1Ev+0x76>
 8011c62:	4628      	mov	r0, r5
 8011c64:	f7ff fd93 	bl	801178e <_ZN8touchgfx7CWRUtil2Q5C1Ev>
 8011c68:	3504      	adds	r5, #4
 8011c6a:	3c01      	subs	r4, #1
 8011c6c:	e7f7      	b.n	8011c5e <_ZN8touchgfx5ShapeILt3EEC1Ev+0x66>
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	4618      	mov	r0, r3
 8011c72:	3708      	adds	r7, #8
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bdb0      	pop	{r4, r5, r7, pc}
 8011c78:	08028e70 	.word	0x08028e70

08011c7c <_ZN15Screen2ViewBaseC1Ev>:
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Screen2ViewBase::Screen2ViewBase() :
 8011c7c:	b5b0      	push	{r4, r5, r7, lr}
 8011c7e:	b09a      	sub	sp, #104	; 0x68
 8011c80:	af02      	add	r7, sp, #8
 8011c82:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	4618      	mov	r0, r3
 8011c88:	f000 faa6 	bl	80121d8 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 8011c8c:	4ada      	ldr	r2, [pc, #872]	; (8011ff8 <_ZN15Screen2ViewBaseC1Ev+0x37c>)
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	601a      	str	r2, [r3, #0]
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	3340      	adds	r3, #64	; 0x40
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7ff fcec 	bl	8011674 <_ZN8touchgfx3BoxC1Ev>
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	3370      	adds	r3, #112	; 0x70
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f007 fca3 	bl	80195ec <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	33b8      	adds	r3, #184	; 0xb8
 8011caa:	4618      	mov	r0, r3
 8011cac:	f004 fab0 	bl	8016210 <_ZN8touchgfx12LineProgressC1Ev>
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 8011cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011cba:	2100      	movs	r1, #0
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7ff fc46 	bl	801154e <_ZN8touchgfx9colortypeC1Em>
 8011cc2:	22ff      	movs	r2, #255	; 0xff
 8011cc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	f7ff fe38 	bl	801193c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7ff fe88 	bl	80119e8 <_ZN8touchgfx8TextAreaC1Ev>
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f005 fe3a 	bl	8017958 <_ZN8touchgfx6CircleC1Ev>
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f503 741b 	add.w	r4, r3, #620	; 0x26c
 8011cea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011cee:	2100      	movs	r1, #0
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f7ff fc2c 	bl	801154e <_ZN8touchgfx9colortypeC1Em>
 8011cf6:	22ff      	movs	r2, #255	; 0xff
 8011cf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011cfa:	4620      	mov	r0, r4
 8011cfc:	f7ff fe1e 	bl	801193c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7ff ff76 	bl	8011bf8 <_ZN8touchgfx5ShapeILt3EEC1Ev>
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f503 7440 	add.w	r4, r3, #768	; 0x300
 8011d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011d16:	2100      	movs	r1, #0
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f7ff fc18 	bl	801154e <_ZN8touchgfx9colortypeC1Em>
 8011d1e:	22ff      	movs	r2, #255	; 0xff
 8011d20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011d22:	4620      	mov	r0, r4
 8011d24:	f7ff fe0a 	bl	801193c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f503 7046 	add.w	r0, r3, #792	; 0x318
 8011d2e:	4bb3      	ldr	r3, [pc, #716]	; (8011ffc <_ZN15Screen2ViewBaseC1Ev+0x380>)
 8011d30:	633b      	str	r3, [r7, #48]	; 0x30
 8011d32:	2300      	movs	r3, #0
 8011d34:	637b      	str	r3, [r7, #52]	; 0x34
 8011d36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011d3a:	cb0c      	ldmia	r3, {r2, r3}
 8011d3c:	6879      	ldr	r1, [r7, #4]
 8011d3e:	f000 fa61 	bl	8012204 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8011d48:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f007 fc79 	bl	8019644 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    box1.setPosition(0, 0, 480, 272);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8011d58:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011d5c:	9300      	str	r3, [sp, #0]
 8011d5e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8011d62:	2200      	movs	r2, #0
 8011d64:	2100      	movs	r1, #0
 8011d66:	f7fe fe4f 	bl	8010a08 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8011d70:	22ff      	movs	r2, #255	; 0xff
 8011d72:	21ff      	movs	r1, #255	; 0xff
 8011d74:	20ff      	movs	r0, #255	; 0xff
 8011d76:	f7ff f995 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	4619      	mov	r1, r3
 8011d7e:	4620      	mov	r0, r4
 8011d80:	f7ff fca0 	bl	80116c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(0, 212);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	3370      	adds	r3, #112	; 0x70
 8011d88:	22d4      	movs	r2, #212	; 0xd4
 8011d8a:	2100      	movs	r1, #0
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7fe fe86 	bl	8010a9e <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8011d98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011d9c:	2102      	movs	r1, #2
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f7fe fe02 	bl	80109a8 <_ZN8touchgfx6BitmapC1Et>
 8011da4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011da8:	2103      	movs	r1, #3
 8011daa:	4618      	mov	r0, r3
 8011dac:	f7fe fdfc 	bl	80109a8 <_ZN8touchgfx6BitmapC1Et>
 8011db0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8011db4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011db8:	4619      	mov	r1, r3
 8011dba:	4620      	mov	r0, r4
 8011dbc:	f007 fa24 	bl	8019208 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID17));
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8011dc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011dca:	2109      	movs	r1, #9
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f7fe ffeb 	bl	8010da8 <_ZN8touchgfx9TypedTextC1Et>
 8011dd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	4620      	mov	r0, r4
 8011dda:	f7ff f83b 	bl	8010e54 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8011dde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011de2:	4618      	mov	r0, r3
 8011de4:	f7fd fa42 	bl	800f26c <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8011dee:	22ff      	movs	r2, #255	; 0xff
 8011df0:	21ff      	movs	r1, #255	; 0xff
 8011df2:	20ff      	movs	r0, #255	; 0xff
 8011df4:	f7ff f956 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	4619      	mov	r1, r3
 8011dfc:	4620      	mov	r0, r4
 8011dfe:	f7ff f83b 	bl	8010e78 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8011e08:	22ff      	movs	r2, #255	; 0xff
 8011e0a:	21ff      	movs	r1, #255	; 0xff
 8011e0c:	20ff      	movs	r0, #255	; 0xff
 8011e0e:	f7ff f949 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e12:	4603      	mov	r3, r0
 8011e14:	4619      	mov	r1, r3
 8011e16:	4620      	mov	r0, r4
 8011e18:	f7ff f83c 	bl	8010e94 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8011e28:	4619      	mov	r1, r3
 8011e2a:	4610      	mov	r0, r2
 8011e2c:	f7fe ffd2 	bl	8010dd4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    lineProgress1.setXY(38, 178);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	33b8      	adds	r3, #184	; 0xb8
 8011e34:	22b2      	movs	r2, #178	; 0xb2
 8011e36:	2126      	movs	r1, #38	; 0x26
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7fe fe30 	bl	8010a9e <_ZN8touchgfx8Drawable5setXYEss>
    lineProgress1.setProgressIndicatorPosition(0, 0, 404, 34);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 8011e44:	2322      	movs	r3, #34	; 0x22
 8011e46:	9300      	str	r3, [sp, #0]
 8011e48:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	2100      	movs	r1, #0
 8011e50:	f004 f97d 	bl	801614e <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>
    lineProgress1.setRange(0, 100);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	9300      	str	r3, [sp, #0]
 8011e5e:	2300      	movs	r3, #0
 8011e60:	2264      	movs	r2, #100	; 0x64
 8011e62:	2100      	movs	r1, #0
 8011e64:	f004 fa60 	bl	8016328 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    lineProgress1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_PROGRESS_INDICATOR_BG_ROUND_0_DEGREES_ID));
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8011e6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011e72:	2104      	movs	r1, #4
 8011e74:	4618      	mov	r0, r3
 8011e76:	f7fe fd97 	bl	80109a8 <_ZN8touchgfx6BitmapC1Et>
 8011e7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011e7e:	4619      	mov	r1, r3
 8011e80:	4620      	mov	r0, r4
 8011e82:	f004 fa47 	bl	8016314 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    lineProgress1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 151, 255));
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 8011e8c:	22ff      	movs	r2, #255	; 0xff
 8011e8e:	2197      	movs	r1, #151	; 0x97
 8011e90:	2000      	movs	r0, #0
 8011e92:	f7ff f907 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011e96:	4603      	mov	r3, r0
 8011e98:	4619      	mov	r1, r3
 8011e9a:	4620      	mov	r0, r4
 8011e9c:	f7ff fd6e 	bl	801197c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    lineProgress1.setPainter(lineProgress1Painter);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8011eac:	4619      	mov	r1, r3
 8011eae:	4610      	mov	r0, r2
 8011eb0:	f004 f965 	bl	801617e <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>
    lineProgress1.setStart(17, 17);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	33b8      	adds	r3, #184	; 0xb8
 8011eb8:	2211      	movs	r2, #17
 8011eba:	2111      	movs	r1, #17
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f004 f961 	bl	8016184 <_ZN8touchgfx12LineProgress8setStartEii>
    lineProgress1.setEnd(387, 17);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	33b8      	adds	r3, #184	; 0xb8
 8011ec6:	2211      	movs	r2, #17
 8011ec8:	f240 1183 	movw	r1, #387	; 0x183
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f004 f91e 	bl	801610e <_ZN8touchgfx12LineProgress6setEndEii>
    lineProgress1.setLineWidth(30);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	33b8      	adds	r3, #184	; 0xb8
 8011ed6:	211e      	movs	r1, #30
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f004 f95a 	bl	8016192 <_ZN8touchgfx12LineProgress12setLineWidthEi>
    lineProgress1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	33b8      	adds	r3, #184	; 0xb8
 8011ee2:	2101      	movs	r1, #1
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f004 f95f 	bl	80161a8 <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>
    lineProgress1.setValue(60);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	33b8      	adds	r3, #184	; 0xb8
 8011eee:	213c      	movs	r1, #60	; 0x3c
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f004 f95f 	bl	80161b4 <_ZN8touchgfx12LineProgress8setValueEi>

    textArea1.setXY(116, 0);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011efc:	2200      	movs	r2, #0
 8011efe:	2174      	movs	r1, #116	; 0x74
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7fe fdcc 	bl	8010a9e <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	2100      	movs	r1, #0
 8011f10:	2000      	movs	r0, #0
 8011f12:	f7ff f8c7 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011f16:	4603      	mov	r3, r0
 8011f18:	657c      	str	r4, [r7, #84]	; 0x54
 8011f1a:	60bb      	str	r3, [r7, #8]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8011f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f1e:	68ba      	ldr	r2, [r7, #8]
 8011f20:	631a      	str	r2, [r3, #48]	; 0x30
    textArea1.setLinespacing(0);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011f28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8011f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f32:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8011f36:	869a      	strh	r2, [r3, #52]	; 0x34
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f503 74f2 	add.w	r4, r3, #484	; 0x1e4
 8011f3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011f42:	210a      	movs	r1, #10
 8011f44:	4618      	mov	r0, r3
 8011f46:	f7fe ff2f 	bl	8010da8 <_ZN8touchgfx9TypedTextC1Et>
 8011f4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011f4e:	4619      	mov	r1, r3
 8011f50:	4620      	mov	r0, r4
 8011f52:	f007 f91f 	bl	8019194 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8011f56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7fd f986 	bl	800f26c <_ZN8touchgfx9TypedTextD1Ev>

    circle1.setPosition(200, 72, 80, 80);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f503 7008 	add.w	r0, r3, #544	; 0x220
 8011f66:	2350      	movs	r3, #80	; 0x50
 8011f68:	9300      	str	r3, [sp, #0]
 8011f6a:	2350      	movs	r3, #80	; 0x50
 8011f6c:	2248      	movs	r2, #72	; 0x48
 8011f6e:	21c8      	movs	r1, #200	; 0xc8
 8011f70:	f7fe fd4a 	bl	8010a08 <_ZN8touchgfx8Drawable11setPositionEssss>
    circle1.setCenter(40, 40);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8011f7a:	2228      	movs	r2, #40	; 0x28
 8011f7c:	2128      	movs	r1, #40	; 0x28
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f000 f8dd 	bl	801213e <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    circle1.setRadius(40);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8011f8a:	2128      	movs	r1, #40	; 0x28
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f000 f959 	bl	8012244 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    circle1.setLineWidth(0);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8011f98:	2100      	movs	r1, #0
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f000 f969 	bl	8012272 <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    circle1.setArc(0, 360);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8011fa6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011faa:	2100      	movs	r1, #0
 8011fac:	4618      	mov	r0, r3
 8011fae:	f000 f8ec 	bl	801218a <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    circle1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(52, 181, 214));
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	f503 741b 	add.w	r4, r3, #620	; 0x26c
 8011fb8:	22d6      	movs	r2, #214	; 0xd6
 8011fba:	21b5      	movs	r1, #181	; 0xb5
 8011fbc:	2034      	movs	r0, #52	; 0x34
 8011fbe:	f7ff f871 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	4619      	mov	r1, r3
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	f7ff fcd8 	bl	801197c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    circle1.setPainter(circle1Painter);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f503 7208 	add.w	r2, r3, #544	; 0x220
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8011fd8:	4619      	mov	r1, r3
 8011fda:	4610      	mov	r0, r2
 8011fdc:	f006 f8e2 	bl	80181a4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

    shape1.setPosition(199, 77, 80, 80);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8011fe6:	2350      	movs	r3, #80	; 0x50
 8011fe8:	9300      	str	r3, [sp, #0]
 8011fea:	2350      	movs	r3, #80	; 0x50
 8011fec:	224d      	movs	r2, #77	; 0x4d
 8011fee:	21c7      	movs	r1, #199	; 0xc7
 8011ff0:	f7fe fd0a 	bl	8010a08 <_ZN8touchgfx8Drawable11setPositionEssss>
    shape1.setOrigin(0.000f, 0.000f);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	e009      	b.n	801200c <_ZN15Screen2ViewBaseC1Ev+0x390>
 8011ff8:	08028e24 	.word	0x08028e24
 8011ffc:	08012115 	.word	0x08012115
 8012000:	3f666666 	.word	0x3f666666
 8012004:	3f4ccccd 	.word	0x3f4ccccd
 8012008:	00000000 	.word	0x00000000
 801200c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012010:	ed5f 0a03 	vldr	s1, [pc, #-12]	; 8012008 <_ZN15Screen2ViewBaseC1Ev+0x38c>
 8012014:	ed1f 0a04 	vldr	s0, [pc, #-16]	; 8012008 <_ZN15Screen2ViewBaseC1Ev+0x38c>
 8012018:	4618      	mov	r0, r3
 801201a:	f000 f941 	bl	80122a0 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>
    shape1.setScale(0.800f, 0.900f);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012024:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 8012000 <_ZN15Screen2ViewBaseC1Ev+0x384>
 8012028:	ed1f 0a0a 	vldr	s0, [pc, #-40]	; 8012004 <_ZN15Screen2ViewBaseC1Ev+0x388>
 801202c:	4618      	mov	r0, r3
 801202e:	f000 f997 	bl	8012360 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>
    shape1.setAngle(0.000f);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012038:	ed1f 0a0d 	vldr	s0, [pc, #-52]	; 8012008 <_ZN15Screen2ViewBaseC1Ev+0x38c>
 801203c:	4618      	mov	r0, r3
 801203e:	f000 f9d3 	bl	80123e8 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>
    shape1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(240, 219, 219));
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f503 7440 	add.w	r4, r3, #768	; 0x300
 8012048:	22db      	movs	r2, #219	; 0xdb
 801204a:	21db      	movs	r1, #219	; 0xdb
 801204c:	20f0      	movs	r0, #240	; 0xf0
 801204e:	f7ff f829 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012052:	4603      	mov	r3, r0
 8012054:	4619      	mov	r1, r3
 8012056:	4620      	mov	r0, r4
 8012058:	f7ff fc90 	bl	801197c <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    shape1.setPainter(shape1Painter);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8012068:	4619      	mov	r1, r3
 801206a:	4610      	mov	r0, r2
 801206c:	f006 f89a 	bl	80181a4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    const touchgfx::AbstractShape::ShapePoint<float> shape1Points[3] = { { 40.000f, 0.000f }, { 80.000f, 40.000f }, { 40.000f, 80.000f } };
 8012070:	4b22      	ldr	r3, [pc, #136]	; (80120fc <_ZN15Screen2ViewBaseC1Ev+0x480>)
 8012072:	f107 040c 	add.w	r4, r7, #12
 8012076:	461d      	mov	r5, r3
 8012078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801207a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801207c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012080:	e884 0003 	stmia.w	r4, {r0, r1}
    shape1.setShape(shape1Points);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801208a:	f107 020c 	add.w	r2, r7, #12
 801208e:	4611      	mov	r1, r2
 8012090:	4618      	mov	r0, r3
 8012092:	f000 f9e1 	bl	8012458 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>

    add(box1);
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	3340      	adds	r3, #64	; 0x40
 801209c:	4619      	mov	r1, r3
 801209e:	4610      	mov	r0, r2
 80120a0:	f7fe fe2e 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 80120a4:	687a      	ldr	r2, [r7, #4]
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	3370      	adds	r3, #112	; 0x70
 80120aa:	4619      	mov	r1, r3
 80120ac:	4610      	mov	r0, r2
 80120ae:	f7fe fe27 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lineProgress1);
 80120b2:	687a      	ldr	r2, [r7, #4]
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	33b8      	adds	r3, #184	; 0xb8
 80120b8:	4619      	mov	r1, r3
 80120ba:	4610      	mov	r0, r2
 80120bc:	f7fe fe20 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 80120c0:	687a      	ldr	r2, [r7, #4]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80120c8:	4619      	mov	r1, r3
 80120ca:	4610      	mov	r0, r2
 80120cc:	f7fe fe18 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(circle1);
 80120d0:	687a      	ldr	r2, [r7, #4]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80120d8:	4619      	mov	r1, r3
 80120da:	4610      	mov	r0, r2
 80120dc:	f7fe fe10 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(shape1);
 80120e0:	687a      	ldr	r2, [r7, #4]
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80120e8:	4619      	mov	r1, r3
 80120ea:	4610      	mov	r0, r2
 80120ec:	f7fe fe08 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	4618      	mov	r0, r3
 80120f4:	3760      	adds	r7, #96	; 0x60
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bdb0      	pop	{r4, r5, r7, pc}
 80120fa:	bf00      	nop
 80120fc:	0802844c 	.word	0x0802844c

08012100 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 8012100:	b480      	push	{r7}
 8012102:	b083      	sub	sp, #12
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]

}
 8012108:	bf00      	nop
 801210a:	370c      	adds	r7, #12
 801210c:	46bd      	mov	sp, r7
 801210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012112:	4770      	bx	lr

08012114 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b082      	sub	sp, #8
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	3370      	adds	r3, #112	; 0x70
 8012122:	683a      	ldr	r2, [r7, #0]
 8012124:	429a      	cmp	r2, r3
 8012126:	d106      	bne.n	8012136 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to screen
        //Go to screen with no screen transition
        application().gotoscreenScreenNoTransition();
 8012128:	6878      	ldr	r0, [r7, #4]
 801212a:	f7ff fd16 	bl	8011b5a <_ZN15Screen2ViewBase11applicationEv>
 801212e:	4603      	mov	r3, r0
 8012130:	4618      	mov	r0, r3
 8012132:	f7fd fca9 	bl	800fa88 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
}
 8012136:	bf00      	nop
 8012138:	3708      	adds	r7, #8
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}

0801213e <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>:
     * @see setRadius, setCircle, getCenter
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
 801213e:	b580      	push	{r7, lr}
 8012140:	b088      	sub	sp, #32
 8012142:	af00      	add	r7, sp, #0
 8012144:	60f8      	str	r0, [r7, #12]
 8012146:	60b9      	str	r1, [r7, #8]
 8012148:	607a      	str	r2, [r7, #4]
 801214a:	68bb      	ldr	r3, [r7, #8]
 801214c:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 801214e:	69bb      	ldr	r3, [r7, #24]
 8012150:	015a      	lsls	r2, r3, #5
 8012152:	f107 0314 	add.w	r3, r7, #20
 8012156:	4611      	mov	r1, r2
 8012158:	4618      	mov	r0, r3
 801215a:	f7ff fb26 	bl	80117aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	461a      	mov	r2, r3
    {
        this->circleCenterX = CWRUtil::toQ5<T>(x);
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	631a      	str	r2, [r3, #48]	; 0x30
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	61fb      	str	r3, [r7, #28]
 801216a:	69fb      	ldr	r3, [r7, #28]
 801216c:	015a      	lsls	r2, r3, #5
 801216e:	f107 0310 	add.w	r3, r7, #16
 8012172:	4611      	mov	r1, r2
 8012174:	4618      	mov	r0, r3
 8012176:	f7ff fb18 	bl	80117aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	461a      	mov	r2, r3
        this->circleCenterY = CWRUtil::toQ5<T>(y);
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8012182:	bf00      	nop
 8012184:	3720      	adds	r7, #32
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}

0801218a <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>:
     * @see getArc, updateArcStart, updateArcEnd, updateArc
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setArc(const T startAngle, const T endAngle)
 801218a:	b580      	push	{r7, lr}
 801218c:	b088      	sub	sp, #32
 801218e:	af00      	add	r7, sp, #0
 8012190:	60f8      	str	r0, [r7, #12]
 8012192:	60b9      	str	r1, [r7, #8]
 8012194:	607a      	str	r2, [r7, #4]
 8012196:	68bb      	ldr	r3, [r7, #8]
 8012198:	61bb      	str	r3, [r7, #24]
 801219a:	69bb      	ldr	r3, [r7, #24]
 801219c:	015a      	lsls	r2, r3, #5
 801219e:	f107 0314 	add.w	r3, r7, #20
 80121a2:	4611      	mov	r1, r2
 80121a4:	4618      	mov	r0, r3
 80121a6:	f7ff fb00 	bl	80117aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	461a      	mov	r2, r3
    {
        circleArcAngleStart = CWRUtil::toQ5<T>(startAngle);
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	61fb      	str	r3, [r7, #28]
 80121b6:	69fb      	ldr	r3, [r7, #28]
 80121b8:	015a      	lsls	r2, r3, #5
 80121ba:	f107 0310 	add.w	r3, r7, #16
 80121be:	4611      	mov	r1, r2
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7ff faf2 	bl	80117aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80121c6:	693b      	ldr	r3, [r7, #16]
 80121c8:	461a      	mov	r2, r3
        circleArcAngleEnd = CWRUtil::toQ5<T>(endAngle);
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
 80121ce:	bf00      	nop
 80121d0:	3720      	adds	r7, #32
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
	...

080121d8 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 80121d8:	b580      	push	{r7, lr}
 80121da:	b082      	sub	sp, #8
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	4618      	mov	r0, r3
 80121e4:	f009 fdca 	bl	801bd7c <_ZN8touchgfx6ScreenC1Ev>
 80121e8:	4a05      	ldr	r2, [pc, #20]	; (8012200 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	601a      	str	r2, [r3, #0]
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2200      	movs	r2, #0
 80121f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	4618      	mov	r0, r3
 80121f8:	3708      	adds	r7, #8
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}
 80121fe:	bf00      	nop
 8012200:	08028f0c 	.word	0x08028f0c

08012204 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8012204:	b580      	push	{r7, lr}
 8012206:	b084      	sub	sp, #16
 8012208:	af00      	add	r7, sp, #0
 801220a:	60f8      	str	r0, [r7, #12]
 801220c:	60b9      	str	r1, [r7, #8]
 801220e:	4639      	mov	r1, r7
 8012210:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	4618      	mov	r0, r3
 8012218:	f7ff f854 	bl	80112c4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 801221c:	4a08      	ldr	r2, [pc, #32]	; (8012240 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	68ba      	ldr	r2, [r7, #8]
 8012226:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	3308      	adds	r3, #8
 801222c:	463a      	mov	r2, r7
 801222e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012232:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	4618      	mov	r0, r3
 801223a:	3710      	adds	r7, #16
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}
 8012240:	08028e58 	.word	0x08028e58

08012244 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>:
    void setRadius(const T r)
 8012244:	b580      	push	{r7, lr}
 8012246:	b084      	sub	sp, #16
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	6039      	str	r1, [r7, #0]
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	60fb      	str	r3, [r7, #12]
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	015a      	lsls	r2, r3, #5
 8012256:	f107 0308 	add.w	r3, r7, #8
 801225a:	4611      	mov	r1, r2
 801225c:	4618      	mov	r0, r3
 801225e:	f7ff faa4 	bl	80117aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	461a      	mov	r2, r3
        this->circleRadius = CWRUtil::toQ5<T>(r);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	639a      	str	r2, [r3, #56]	; 0x38
    }
 801226a:	bf00      	nop
 801226c:	3710      	adds	r7, #16
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}

08012272 <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>:
     * @note The area containing the Circle is not invalidated.
     * @note if the new line with is smaller than the old width, the circle should be invalidated
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
 8012272:	b580      	push	{r7, lr}
 8012274:	b084      	sub	sp, #16
 8012276:	af00      	add	r7, sp, #0
 8012278:	6078      	str	r0, [r7, #4]
 801227a:	6039      	str	r1, [r7, #0]
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	60fb      	str	r3, [r7, #12]
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	015a      	lsls	r2, r3, #5
 8012284:	f107 0308 	add.w	r3, r7, #8
 8012288:	4611      	mov	r1, r2
 801228a:	4618      	mov	r0, r3
 801228c:	f7ff fa8d 	bl	80117aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012290:	68bb      	ldr	r3, [r7, #8]
 8012292:	461a      	mov	r2, r3
    {
        this->circleLineWidth = CWRUtil::toQ5<T>(width);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8012298:	bf00      	nop
 801229a:	3710      	adds	r7, #16
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}

080122a0 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_>:
     * @see moveOrigin
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setOrigin(T x, T y)
 80122a0:	b590      	push	{r4, r7, lr}
 80122a2:	b08b      	sub	sp, #44	; 0x2c
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	60f8      	str	r0, [r7, #12]
 80122a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80122ac:	edc7 0a01 	vstr	s1, [r7, #4]
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	623b      	str	r3, [r7, #32]
 80122b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80122b8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801235c <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 80122bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80122c4:	f107 031c 	add.w	r3, r7, #28
 80122c8:	ee17 1a90 	vmov	r1, s15
 80122cc:	4618      	mov	r0, r3
 80122ce:	f7ff fa6c 	bl	80117aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80122d2:	69fb      	ldr	r3, [r7, #28]
    {
        CWRUtil::Q5 dxNew = CWRUtil::toQ5<T>(x);
 80122d4:	617b      	str	r3, [r7, #20]
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	627b      	str	r3, [r7, #36]	; 0x24
 80122da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80122de:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801235c <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xbc>
 80122e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80122ea:	f107 0318 	add.w	r3, r7, #24
 80122ee:	ee17 1a90 	vmov	r1, s15
 80122f2:	4618      	mov	r0, r3
 80122f4:	f7ff fa59 	bl	80117aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80122f8:	69bb      	ldr	r3, [r7, #24]
        CWRUtil::Q5 dyNew = CWRUtil::toQ5<T>(y);
 80122fa:	613b      	str	r3, [r7, #16]

        if (dx == dxNew && dy == dyNew)
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	3330      	adds	r3, #48	; 0x30
 8012300:	4618      	mov	r0, r3
 8012302:	f7ff fa61 	bl	80117c8 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8012306:	4604      	mov	r4, r0
 8012308:	f107 0314 	add.w	r3, r7, #20
 801230c:	4618      	mov	r0, r3
 801230e:	f7ff fa5b 	bl	80117c8 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8012312:	4603      	mov	r3, r0
 8012314:	429c      	cmp	r4, r3
 8012316:	d10f      	bne.n	8012338 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	3334      	adds	r3, #52	; 0x34
 801231c:	4618      	mov	r0, r3
 801231e:	f7ff fa53 	bl	80117c8 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8012322:	4604      	mov	r4, r0
 8012324:	f107 0310 	add.w	r3, r7, #16
 8012328:	4618      	mov	r0, r3
 801232a:	f7ff fa4d 	bl	80117c8 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801232e:	4603      	mov	r3, r0
 8012330:	429c      	cmp	r4, r3
 8012332:	d101      	bne.n	8012338 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x98>
 8012334:	2301      	movs	r3, #1
 8012336:	e000      	b.n	801233a <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0x9a>
 8012338:	2300      	movs	r3, #0
 801233a:	2b00      	cmp	r3, #0
 801233c:	d109      	bne.n	8012352 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb2>
        {
            return;
        }

        dx = dxNew;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	697a      	ldr	r2, [r7, #20]
 8012342:	631a      	str	r2, [r3, #48]	; 0x30
        dy = dyNew;
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	693a      	ldr	r2, [r7, #16]
 8012348:	635a      	str	r2, [r3, #52]	; 0x34

        updateAbstractShapeCache();
 801234a:	68f8      	ldr	r0, [r7, #12]
 801234c:	f005 f994 	bl	8017678 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
 8012350:	e000      	b.n	8012354 <_ZN8touchgfx13AbstractShape9setOriginIfEEvT_S2_+0xb4>
            return;
 8012352:	bf00      	nop
    }
 8012354:	372c      	adds	r7, #44	; 0x2c
 8012356:	46bd      	mov	sp, r7
 8012358:	bd90      	pop	{r4, r7, pc}
 801235a:	bf00      	nop
 801235c:	42000000 	.word	0x42000000

08012360 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_>:
     * @see getScale, updateScale
     *
     * @note The area containing the AbstractShape is not invalidated.
     */
    template <typename T>
    void setScale(T newXScale, T newYScale)
 8012360:	b580      	push	{r7, lr}
 8012362:	b088      	sub	sp, #32
 8012364:	af00      	add	r7, sp, #0
 8012366:	60f8      	str	r0, [r7, #12]
 8012368:	ed87 0a02 	vstr	s0, [r7, #8]
 801236c:	edc7 0a01 	vstr	s1, [r7, #4]
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q10 toQ10(T value)
    {
        return Q10(int(value * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE));
 8012374:	edd7 7a06 	vldr	s15, [r7, #24]
 8012378:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80123e4 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 801237c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012380:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80123e4 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 8012384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801238c:	f107 0314 	add.w	r3, r7, #20
 8012390:	ee17 1a90 	vmov	r1, s15
 8012394:	4618      	mov	r0, r3
 8012396:	f7ff fa23 	bl	80117e0 <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 801239a:	697b      	ldr	r3, [r7, #20]
 801239c:	461a      	mov	r2, r3
    {
        xScale = CWRUtil::toQ10<T>(newXScale);
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	61fb      	str	r3, [r7, #28]
 80123a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80123aa:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80123e4 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 80123ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80123b2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80123e4 <_ZN8touchgfx13AbstractShape8setScaleIfEEvT_S2_+0x84>
 80123b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80123ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123be:	f107 0310 	add.w	r3, r7, #16
 80123c2:	ee17 1a90 	vmov	r1, s15
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7ff fa0a 	bl	80117e0 <_ZN8touchgfx7CWRUtil3Q10C1Ei>
 80123cc:	693b      	ldr	r3, [r7, #16]
 80123ce:	461a      	mov	r2, r3
        yScale = CWRUtil::toQ10<T>(newYScale);
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	641a      	str	r2, [r3, #64]	; 0x40
        updateAbstractShapeCache();
 80123d4:	68f8      	ldr	r0, [r7, #12]
 80123d6:	f005 f94f 	bl	8017678 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 80123da:	bf00      	nop
 80123dc:	3720      	adds	r7, #32
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	42000000 	.word	0x42000000

080123e8 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_>:
    void setAngle(T angle)
 80123e8:	b590      	push	{r4, r7, lr}
 80123ea:	b087      	sub	sp, #28
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	ed87 0a00 	vstr	s0, [r7]
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	617b      	str	r3, [r7, #20]
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80123f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80123fc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8012454 <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x6c>
 8012400:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012408:	f107 0310 	add.w	r3, r7, #16
 801240c:	ee17 1a90 	vmov	r1, s15
 8012410:	4618      	mov	r0, r3
 8012412:	f7ff f9ca 	bl	80117aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012416:	693b      	ldr	r3, [r7, #16]
        CWRUtil::Q5 angleQ5 = CWRUtil::toQ5<T>(angle);
 8012418:	60fb      	str	r3, [r7, #12]
        if (shapeAngle != angleQ5)
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	3338      	adds	r3, #56	; 0x38
 801241e:	4618      	mov	r0, r3
 8012420:	f7ff f9d2 	bl	80117c8 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8012424:	4604      	mov	r4, r0
 8012426:	f107 030c 	add.w	r3, r7, #12
 801242a:	4618      	mov	r0, r3
 801242c:	f7ff f9cc 	bl	80117c8 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8012430:	4603      	mov	r3, r0
 8012432:	429c      	cmp	r4, r3
 8012434:	bf14      	ite	ne
 8012436:	2301      	movne	r3, #1
 8012438:	2300      	moveq	r3, #0
 801243a:	b2db      	uxtb	r3, r3
 801243c:	2b00      	cmp	r3, #0
 801243e:	d005      	beq.n	801244c <_ZN8touchgfx13AbstractShape8setAngleIfEEvT_+0x64>
            shapeAngle = angleQ5;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	68fa      	ldr	r2, [r7, #12]
 8012444:	639a      	str	r2, [r3, #56]	; 0x38
            updateAbstractShapeCache();
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f005 f916 	bl	8017678 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 801244c:	bf00      	nop
 801244e:	371c      	adds	r7, #28
 8012450:	46bd      	mov	sp, r7
 8012452:	bd90      	pop	{r4, r7, pc}
 8012454:	42000000 	.word	0x42000000

08012458 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE>:
    void setShape(const ShapePoint<T>* points)
 8012458:	b5b0      	push	{r4, r5, r7, lr}
 801245a:	b088      	sub	sp, #32
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	6039      	str	r1, [r7, #0]
        int numPoints = getNumPoints();
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	3378      	adds	r3, #120	; 0x78
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	4798      	blx	r3
 801246e:	61b8      	str	r0, [r7, #24]
        for (int i = 0; i < numPoints; i++)
 8012470:	2300      	movs	r3, #0
 8012472:	61fb      	str	r3, [r7, #28]
 8012474:	69fa      	ldr	r2, [r7, #28]
 8012476:	69bb      	ldr	r3, [r7, #24]
 8012478:	429a      	cmp	r2, r3
 801247a:	da38      	bge.n	80124ee <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x96>
            setCorner(i, CWRUtil::toQ5<T>(points[i].x), CWRUtil::toQ5<T>(points[i].y));
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	337c      	adds	r3, #124	; 0x7c
 8012482:	681c      	ldr	r4, [r3, #0]
 8012484:	69fb      	ldr	r3, [r7, #28]
 8012486:	00db      	lsls	r3, r3, #3
 8012488:	683a      	ldr	r2, [r7, #0]
 801248a:	4413      	add	r3, r2
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	613b      	str	r3, [r7, #16]
 8012490:	edd7 7a04 	vldr	s15, [r7, #16]
 8012494:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80124fc <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 8012498:	ee67 7a87 	vmul.f32	s15, s15, s14
 801249c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80124a0:	f107 030c 	add.w	r3, r7, #12
 80124a4:	ee17 1a90 	vmov	r1, s15
 80124a8:	4618      	mov	r0, r3
 80124aa:	f7ff f97e 	bl	80117aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	461d      	mov	r5, r3
 80124b2:	69fb      	ldr	r3, [r7, #28]
 80124b4:	00db      	lsls	r3, r3, #3
 80124b6:	683a      	ldr	r2, [r7, #0]
 80124b8:	4413      	add	r3, r2
 80124ba:	685b      	ldr	r3, [r3, #4]
 80124bc:	617b      	str	r3, [r7, #20]
 80124be:	edd7 7a05 	vldr	s15, [r7, #20]
 80124c2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80124fc <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0xa4>
 80124c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80124ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80124ce:	f107 0308 	add.w	r3, r7, #8
 80124d2:	ee17 1a90 	vmov	r1, s15
 80124d6:	4618      	mov	r0, r3
 80124d8:	f7ff f967 	bl	80117aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80124dc:	68bb      	ldr	r3, [r7, #8]
 80124de:	462a      	mov	r2, r5
 80124e0:	69f9      	ldr	r1, [r7, #28]
 80124e2:	6878      	ldr	r0, [r7, #4]
 80124e4:	47a0      	blx	r4
        for (int i = 0; i < numPoints; i++)
 80124e6:	69fb      	ldr	r3, [r7, #28]
 80124e8:	3301      	adds	r3, #1
 80124ea:	61fb      	str	r3, [r7, #28]
 80124ec:	e7c2      	b.n	8012474 <_ZN8touchgfx13AbstractShape8setShapeIfEEvPKNS0_10ShapePointIT_EE+0x1c>
        updateAbstractShapeCache();
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f005 f8c2 	bl	8017678 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>
    }
 80124f4:	bf00      	nop
 80124f6:	3720      	adds	r7, #32
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bdb0      	pop	{r4, r5, r7, pc}
 80124fc:	42000000 	.word	0x42000000

08012500 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8012500:	b580      	push	{r7, lr}
 8012502:	b082      	sub	sp, #8
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
 8012508:	4a05      	ldr	r2, [pc, #20]	; (8012520 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	601a      	str	r2, [r3, #0]
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	4618      	mov	r0, r3
 8012512:	f7fe ff07 	bl	8011324 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	4618      	mov	r0, r3
 801251a:	3708      	adds	r7, #8
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}
 8012520:	08028e58 	.word	0x08028e58

08012524 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f7ff ffe7 	bl	8012500 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8012532:	2110      	movs	r1, #16
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	f014 fc5d 	bl	8026df4 <_ZdlPvj>
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	4618      	mov	r0, r3
 801253e:	3708      	adds	r7, #8
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}

08012544 <_ZN8touchgfx5ShapeILt3EED1Ev>:
 8012544:	b580      	push	{r7, lr}
 8012546:	b082      	sub	sp, #8
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	4a05      	ldr	r2, [pc, #20]	; (8012564 <_ZN8touchgfx5ShapeILt3EED1Ev+0x20>)
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	601a      	str	r2, [r3, #0]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	4618      	mov	r0, r3
 8012556:	f7ff fb2d 	bl	8011bb4 <_ZN8touchgfx13AbstractShapeD1Ev>
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	4618      	mov	r0, r3
 801255e:	3708      	adds	r7, #8
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}
 8012564:	08028e70 	.word	0x08028e70

08012568 <_ZN8touchgfx5ShapeILt3EED0Ev>:
 8012568:	b580      	push	{r7, lr}
 801256a:	b082      	sub	sp, #8
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f7ff ffe7 	bl	8012544 <_ZN8touchgfx5ShapeILt3EED1Ev>
 8012576:	217c      	movs	r1, #124	; 0x7c
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f014 fc3b 	bl	8026df4 <_ZdlPvj>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	4618      	mov	r0, r3
 8012582:	3708      	adds	r7, #8
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8012588:	b580      	push	{r7, lr}
 801258a:	b082      	sub	sp, #8
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	4a05      	ldr	r2, [pc, #20]	; (80125a8 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	601a      	str	r2, [r3, #0]
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	4618      	mov	r0, r3
 801259a:	f7fe fbe3 	bl	8010d64 <_ZN8touchgfx6WidgetD1Ev>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	4618      	mov	r0, r3
 80125a2:	3708      	adds	r7, #8
 80125a4:	46bd      	mov	sp, r7
 80125a6:	bd80      	pop	{r7, pc}
 80125a8:	0802afa4 	.word	0x0802afa4

080125ac <_ZN8touchgfx3BoxD0Ev>:
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b082      	sub	sp, #8
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f7ff ffe7 	bl	8012588 <_ZN8touchgfx3BoxD1Ev>
 80125ba:	2130      	movs	r1, #48	; 0x30
 80125bc:	6878      	ldr	r0, [r7, #4]
 80125be:	f014 fc19 	bl	8026df4 <_ZdlPvj>
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	4618      	mov	r0, r3
 80125c6:	3708      	adds	r7, #8
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}

080125cc <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b082      	sub	sp, #8
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
 80125d4:	4a05      	ldr	r2, [pc, #20]	; (80125ec <_ZN8touchgfx5ImageD1Ev+0x20>)
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	601a      	str	r2, [r3, #0]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	4618      	mov	r0, r3
 80125de:	f7fe fbc1 	bl	8010d64 <_ZN8touchgfx6WidgetD1Ev>
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	4618      	mov	r0, r3
 80125e6:	3708      	adds	r7, #8
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bd80      	pop	{r7, pc}
 80125ec:	0802b114 	.word	0x0802b114

080125f0 <_ZN8touchgfx5ImageD0Ev>:
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b082      	sub	sp, #8
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f7ff ffe7 	bl	80125cc <_ZN8touchgfx5ImageD1Ev>
 80125fe:	212c      	movs	r1, #44	; 0x2c
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f014 fbf7 	bl	8026df4 <_ZdlPvj>
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	4618      	mov	r0, r3
 801260a:	3708      	adds	r7, #8
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}

08012610 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 8012610:	b580      	push	{r7, lr}
 8012612:	b082      	sub	sp, #8
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	4a0a      	ldr	r2, [pc, #40]	; (8012644 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	601a      	str	r2, [r3, #0]
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	3358      	adds	r3, #88	; 0x58
 8012622:	4618      	mov	r0, r3
 8012624:	f7fe fec0 	bl	80113a8 <_ZN8touchgfx9ContainerD1Ev>
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	332c      	adds	r3, #44	; 0x2c
 801262c:	4618      	mov	r0, r3
 801262e:	f7ff ffcd 	bl	80125cc <_ZN8touchgfx5ImageD1Ev>
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	4618      	mov	r0, r3
 8012636:	f7fe feb7 	bl	80113a8 <_ZN8touchgfx9ContainerD1Ev>
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	4618      	mov	r0, r3
 801263e:	3708      	adds	r7, #8
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}
 8012644:	08029e74 	.word	0x08029e74

08012648 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8012648:	b580      	push	{r7, lr}
 801264a:	b082      	sub	sp, #8
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f7ff ffdd 	bl	8012610 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8012656:	2190      	movs	r1, #144	; 0x90
 8012658:	6878      	ldr	r0, [r7, #4]
 801265a:	f014 fbcb 	bl	8026df4 <_ZdlPvj>
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	4618      	mov	r0, r3
 8012662:	3708      	adds	r7, #8
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}

08012668 <_ZN8touchgfx4LineD1Ev>:
 *            line.setStart(1.1f, 1.1f); // Will use (35/32, 35/32) = (1.09375f, 1.09375f)
 *            int x, y;
 *            line.getStart(&amp;x, &amp;y); // Will return (1, 1)
 *       @endcode.
 */
class Line : public CanvasWidget
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	4a05      	ldr	r2, [pc, #20]	; (8012688 <_ZN8touchgfx4LineD1Ev+0x20>)
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	601a      	str	r2, [r3, #0]
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	4618      	mov	r0, r3
 801267a:	f7ff fa79 	bl	8011b70 <_ZN8touchgfx12CanvasWidgetD1Ev>
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	4618      	mov	r0, r3
 8012682:	3708      	adds	r7, #8
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}
 8012688:	0802ac64 	.word	0x0802ac64

0801268c <_ZN8touchgfx4LineD0Ev>:
 801268c:	b580      	push	{r7, lr}
 801268e:	b082      	sub	sp, #8
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f7ff ffe7 	bl	8012668 <_ZN8touchgfx4LineD1Ev>
 801269a:	2174      	movs	r1, #116	; 0x74
 801269c:	6878      	ldr	r0, [r7, #4]
 801269e:	f014 fba9 	bl	8026df4 <_ZdlPvj>
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	4618      	mov	r0, r3
 80126a6:	3708      	adds	r7, #8
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}

080126ac <_ZN8touchgfx12LineProgressD1Ev>:
 * horizontal or vertical, but can start at any coordinate and finish at any coordinate.
 *
 * @note As LineProgress uses CanvasWidgetRenderer, it is important that a buffer is set up by
 *       calling CanvasWidgetRendere::setBuffer().
 */
class LineProgress : public AbstractProgressIndicator
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b082      	sub	sp, #8
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
 80126b4:	4a08      	ldr	r2, [pc, #32]	; (80126d8 <_ZN8touchgfx12LineProgressD1Ev+0x2c>)
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	601a      	str	r2, [r3, #0]
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	3390      	adds	r3, #144	; 0x90
 80126be:	4618      	mov	r0, r3
 80126c0:	f7ff ffd2 	bl	8012668 <_ZN8touchgfx4LineD1Ev>
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7ff ffa2 	bl	8012610 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	4618      	mov	r0, r3
 80126d0:	3708      	adds	r7, #8
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}
 80126d6:	bf00      	nop
 80126d8:	08029d0c 	.word	0x08029d0c

080126dc <_ZN8touchgfx12LineProgressD0Ev>:
 80126dc:	b580      	push	{r7, lr}
 80126de:	b082      	sub	sp, #8
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f7ff ffe1 	bl	80126ac <_ZN8touchgfx12LineProgressD1Ev>
 80126ea:	f44f 718a 	mov.w	r1, #276	; 0x114
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f014 fb80 	bl	8026df4 <_ZdlPvj>
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	4618      	mov	r0, r3
 80126f8:	3708      	adds	r7, #8
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}
	...

08012700 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 8012700:	b580      	push	{r7, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	4a05      	ldr	r2, [pc, #20]	; (8012720 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	601a      	str	r2, [r3, #0]
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	4618      	mov	r0, r3
 8012712:	f7ff f8f1 	bl	80118f8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	4618      	mov	r0, r3
 801271a:	3708      	adds	r7, #8
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}
 8012720:	0802aa68 	.word	0x0802aa68

08012724 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8012724:	b580      	push	{r7, lr}
 8012726:	b082      	sub	sp, #8
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f7ff ffe7 	bl	8012700 <_ZN8touchgfx13PainterRGB888D1Ev>
 8012732:	2118      	movs	r1, #24
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f014 fb5d 	bl	8026df4 <_ZdlPvj>
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	4618      	mov	r0, r3
 801273e:	3708      	adds	r7, #8
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
 801274c:	4a08      	ldr	r2, [pc, #32]	; (8012770 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	601a      	str	r2, [r3, #0]
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	3328      	adds	r3, #40	; 0x28
 8012756:	4618      	mov	r0, r3
 8012758:	f7fc fd88 	bl	800f26c <_ZN8touchgfx9TypedTextD1Ev>
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	4618      	mov	r0, r3
 8012760:	f7fe fb00 	bl	8010d64 <_ZN8touchgfx6WidgetD1Ev>
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	4618      	mov	r0, r3
 8012768:	3708      	adds	r7, #8
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}
 801276e:	bf00      	nop
 8012770:	0802aef8 	.word	0x0802aef8

08012774 <_ZN8touchgfx8TextAreaD0Ev>:
 8012774:	b580      	push	{r7, lr}
 8012776:	b082      	sub	sp, #8
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f7ff ffe1 	bl	8012744 <_ZN8touchgfx8TextAreaD1Ev>
 8012782:	213c      	movs	r1, #60	; 0x3c
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f014 fb35 	bl	8026df4 <_ZdlPvj>
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	4618      	mov	r0, r3
 801278e:	3708      	adds	r7, #8
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}

08012794 <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	4a05      	ldr	r2, [pc, #20]	; (80127b4 <_ZN8touchgfx6CircleD1Ev+0x20>)
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	601a      	str	r2, [r3, #0]
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	4618      	mov	r0, r3
 80127a6:	f7ff f9e3 	bl	8011b70 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	4618      	mov	r0, r3
 80127ae:	3708      	adds	r7, #8
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}
 80127b4:	0802a9e8 	.word	0x0802a9e8

080127b8 <_ZN8touchgfx6CircleD0Ev>:
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b082      	sub	sp, #8
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f7ff ffe7 	bl	8012794 <_ZN8touchgfx6CircleD1Ev>
 80127c6:	214c      	movs	r1, #76	; 0x4c
 80127c8:	6878      	ldr	r0, [r7, #4]
 80127ca:	f014 fb13 	bl	8026df4 <_ZdlPvj>
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	4618      	mov	r0, r3
 80127d2:	3708      	adds	r7, #8
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}

080127d8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80127d8:	b580      	push	{r7, lr}
 80127da:	b082      	sub	sp, #8
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	685b      	ldr	r3, [r3, #4]
 80127e6:	687a      	ldr	r2, [r7, #4]
 80127e8:	68d2      	ldr	r2, [r2, #12]
 80127ea:	1052      	asrs	r2, r2, #1
 80127ec:	1898      	adds	r0, r3, r2
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	68db      	ldr	r3, [r3, #12]
 80127f2:	f003 0301 	and.w	r3, r3, #1
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d102      	bne.n	8012800 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	689b      	ldr	r3, [r3, #8]
 80127fe:	e00a      	b.n	8012816 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	685b      	ldr	r3, [r3, #4]
 8012804:	687a      	ldr	r2, [r7, #4]
 8012806:	68d2      	ldr	r2, [r2, #12]
 8012808:	1052      	asrs	r2, r2, #1
 801280a:	4413      	add	r3, r2
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	6892      	ldr	r2, [r2, #8]
 8012812:	4413      	add	r3, r2
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	6839      	ldr	r1, [r7, #0]
 8012818:	4798      	blx	r3
    }
 801281a:	bf00      	nop
 801281c:	3708      	adds	r7, #8
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}

08012822 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8012822:	b480      	push	{r7}
 8012824:	b083      	sub	sp, #12
 8012826:	af00      	add	r7, sp, #0
 8012828:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	685b      	ldr	r3, [r3, #4]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d010      	beq.n	8012854 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	689b      	ldr	r3, [r3, #8]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d107      	bne.n	801284a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	68db      	ldr	r3, [r3, #12]
 801283e:	f003 0301 	and.w	r3, r3, #1
 8012842:	2b00      	cmp	r3, #0
 8012844:	d101      	bne.n	801284a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8012846:	2301      	movs	r3, #1
 8012848:	e000      	b.n	801284c <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801284a:	2300      	movs	r3, #0
 801284c:	2b01      	cmp	r3, #1
 801284e:	d001      	beq.n	8012854 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8012850:	2301      	movs	r3, #1
 8012852:	e000      	b.n	8012856 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8012854:	2300      	movs	r3, #0
    }
 8012856:	4618      	mov	r0, r3
 8012858:	370c      	adds	r7, #12
 801285a:	46bd      	mov	sp, r7
 801285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012860:	4770      	bx	lr

08012862 <_ZNK8touchgfx5ShapeILt3EE12getNumPointsEv>:
{
public:
    virtual int getNumPoints() const
 8012862:	b480      	push	{r7}
 8012864:	b083      	sub	sp, #12
 8012866:	af00      	add	r7, sp, #0
 8012868:	6078      	str	r0, [r7, #4]
    {
        return POINTS;
 801286a:	2303      	movs	r3, #3
    }
 801286c:	4618      	mov	r0, r3
 801286e:	370c      	adds	r7, #12
 8012870:	46bd      	mov	sp, r7
 8012872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012876:	4770      	bx	lr

08012878 <_ZN8touchgfx5ShapeILt3EE9setCornerEiNS_7CWRUtil2Q5ES3_>:

    virtual void setCorner(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 8012878:	b480      	push	{r7}
 801287a:	b085      	sub	sp, #20
 801287c:	af00      	add	r7, sp, #0
 801287e:	60f8      	str	r0, [r7, #12]
 8012880:	60b9      	str	r1, [r7, #8]
 8012882:	607a      	str	r2, [r7, #4]
 8012884:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	2b00      	cmp	r3, #0
 801288a:	db0f      	blt.n	80128ac <_ZN8touchgfx5ShapeILt3EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x34>
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	2b02      	cmp	r3, #2
 8012890:	dc0c      	bgt.n	80128ac <_ZN8touchgfx5ShapeILt3EE9setCornerEiNS_7CWRUtil2Q5ES3_+0x34>
        {
            xCorner[i] = x, yCorner[i] = y;
 8012892:	68fa      	ldr	r2, [r7, #12]
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	3312      	adds	r3, #18
 8012898:	009b      	lsls	r3, r3, #2
 801289a:	4413      	add	r3, r2
 801289c:	687a      	ldr	r2, [r7, #4]
 801289e:	605a      	str	r2, [r3, #4]
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	68ba      	ldr	r2, [r7, #8]
 80128a4:	3216      	adds	r2, #22
 80128a6:	6839      	ldr	r1, [r7, #0]
 80128a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 80128ac:	bf00      	nop
 80128ae:	3714      	adds	r7, #20
 80128b0:	46bd      	mov	sp, r7
 80128b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b6:	4770      	bx	lr

080128b8 <_ZNK8touchgfx5ShapeILt3EE10getCornerXEi>:

    virtual CWRUtil::Q5 getCornerX(int i) const
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b084      	sub	sp, #16
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
 80128c0:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	db09      	blt.n	80128dc <_ZNK8touchgfx5ShapeILt3EE10getCornerXEi+0x24>
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	2b02      	cmp	r3, #2
 80128cc:	dc06      	bgt.n	80128dc <_ZNK8touchgfx5ShapeILt3EE10getCornerXEi+0x24>
        {
            return xCorner[i];
 80128ce:	687a      	ldr	r2, [r7, #4]
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	3312      	adds	r3, #18
 80128d4:	009b      	lsls	r3, r3, #2
 80128d6:	4413      	add	r3, r2
 80128d8:	685b      	ldr	r3, [r3, #4]
 80128da:	e00b      	b.n	80128f4 <_ZNK8touchgfx5ShapeILt3EE10getCornerXEi+0x3c>
 80128dc:	2300      	movs	r3, #0
 80128de:	60fb      	str	r3, [r7, #12]
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	015a      	lsls	r2, r3, #5
 80128e4:	f107 0308 	add.w	r3, r7, #8
 80128e8:	4611      	mov	r1, r2
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7fe ff5d 	bl	80117aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80128f0:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 80128f2:	bf00      	nop
    }
 80128f4:	4618      	mov	r0, r3
 80128f6:	3710      	adds	r7, #16
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}

080128fc <_ZNK8touchgfx5ShapeILt3EE10getCornerYEi>:

    virtual CWRUtil::Q5 getCornerY(int i) const
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b084      	sub	sp, #16
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	2b00      	cmp	r3, #0
 801290a:	db08      	blt.n	801291e <_ZNK8touchgfx5ShapeILt3EE10getCornerYEi+0x22>
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	2b02      	cmp	r3, #2
 8012910:	dc05      	bgt.n	801291e <_ZNK8touchgfx5ShapeILt3EE10getCornerYEi+0x22>
        {
            return yCorner[i];
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	683a      	ldr	r2, [r7, #0]
 8012916:	3216      	adds	r2, #22
 8012918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801291c:	e00b      	b.n	8012936 <_ZNK8touchgfx5ShapeILt3EE10getCornerYEi+0x3a>
 801291e:	2300      	movs	r3, #0
 8012920:	60fb      	str	r3, [r7, #12]
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	015a      	lsls	r2, r3, #5
 8012926:	f107 0308 	add.w	r3, r7, #8
 801292a:	4611      	mov	r1, r2
 801292c:	4618      	mov	r0, r3
 801292e:	f7fe ff3c 	bl	80117aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012932:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 8012934:	bf00      	nop
    }
 8012936:	4618      	mov	r0, r3
 8012938:	3710      	adds	r7, #16
 801293a:	46bd      	mov	sp, r7
 801293c:	bd80      	pop	{r7, pc}

0801293e <_ZN8touchgfx5ShapeILt3EE8setCacheEiNS_7CWRUtil2Q5ES3_>:

protected:
    virtual void setCache(int i, CWRUtil::Q5 x, CWRUtil::Q5 y)
 801293e:	b480      	push	{r7}
 8012940:	b085      	sub	sp, #20
 8012942:	af00      	add	r7, sp, #0
 8012944:	60f8      	str	r0, [r7, #12]
 8012946:	60b9      	str	r1, [r7, #8]
 8012948:	607a      	str	r2, [r7, #4]
 801294a:	603b      	str	r3, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	2b00      	cmp	r3, #0
 8012950:	db0f      	blt.n	8012972 <_ZN8touchgfx5ShapeILt3EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x34>
 8012952:	68bb      	ldr	r3, [r7, #8]
 8012954:	2b02      	cmp	r3, #2
 8012956:	dc0c      	bgt.n	8012972 <_ZN8touchgfx5ShapeILt3EE8setCacheEiNS_7CWRUtil2Q5ES3_+0x34>
        {
            xCache[i] = x, yCache[i] = y;
 8012958:	68fa      	ldr	r2, [r7, #12]
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	3318      	adds	r3, #24
 801295e:	009b      	lsls	r3, r3, #2
 8012960:	4413      	add	r3, r2
 8012962:	687a      	ldr	r2, [r7, #4]
 8012964:	605a      	str	r2, [r3, #4]
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	68ba      	ldr	r2, [r7, #8]
 801296a:	321c      	adds	r2, #28
 801296c:	6839      	ldr	r1, [r7, #0]
 801296e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
 8012972:	bf00      	nop
 8012974:	3714      	adds	r7, #20
 8012976:	46bd      	mov	sp, r7
 8012978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297c:	4770      	bx	lr

0801297e <_ZNK8touchgfx5ShapeILt3EE9getCacheXEi>:

    virtual CWRUtil::Q5 getCacheX(int i) const
 801297e:	b580      	push	{r7, lr}
 8012980:	b084      	sub	sp, #16
 8012982:	af00      	add	r7, sp, #0
 8012984:	6078      	str	r0, [r7, #4]
 8012986:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	2b00      	cmp	r3, #0
 801298c:	db09      	blt.n	80129a2 <_ZNK8touchgfx5ShapeILt3EE9getCacheXEi+0x24>
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	2b02      	cmp	r3, #2
 8012992:	dc06      	bgt.n	80129a2 <_ZNK8touchgfx5ShapeILt3EE9getCacheXEi+0x24>
        {
            return xCache[i];
 8012994:	687a      	ldr	r2, [r7, #4]
 8012996:	683b      	ldr	r3, [r7, #0]
 8012998:	3318      	adds	r3, #24
 801299a:	009b      	lsls	r3, r3, #2
 801299c:	4413      	add	r3, r2
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	e00b      	b.n	80129ba <_ZNK8touchgfx5ShapeILt3EE9getCacheXEi+0x3c>
 80129a2:	2300      	movs	r3, #0
 80129a4:	60fb      	str	r3, [r7, #12]
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	015a      	lsls	r2, r3, #5
 80129aa:	f107 0308 	add.w	r3, r7, #8
 80129ae:	4611      	mov	r1, r2
 80129b0:	4618      	mov	r0, r3
 80129b2:	f7fe fefa 	bl	80117aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80129b6:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 80129b8:	bf00      	nop
    }
 80129ba:	4618      	mov	r0, r3
 80129bc:	3710      	adds	r7, #16
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}

080129c2 <_ZNK8touchgfx5ShapeILt3EE9getCacheYEi>:

    virtual CWRUtil::Q5 getCacheY(int i) const
 80129c2:	b580      	push	{r7, lr}
 80129c4:	b084      	sub	sp, #16
 80129c6:	af00      	add	r7, sp, #0
 80129c8:	6078      	str	r0, [r7, #4]
 80129ca:	6039      	str	r1, [r7, #0]
    {
        if (i >= 0 && i < POINTS)
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	db08      	blt.n	80129e4 <_ZNK8touchgfx5ShapeILt3EE9getCacheYEi+0x22>
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	2b02      	cmp	r3, #2
 80129d6:	dc05      	bgt.n	80129e4 <_ZNK8touchgfx5ShapeILt3EE9getCacheYEi+0x22>
        {
            return yCache[i];
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	683a      	ldr	r2, [r7, #0]
 80129dc:	321c      	adds	r2, #28
 80129de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129e2:	e00b      	b.n	80129fc <_ZNK8touchgfx5ShapeILt3EE9getCacheYEi+0x3a>
 80129e4:	2300      	movs	r3, #0
 80129e6:	60fb      	str	r3, [r7, #12]
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	015a      	lsls	r2, r3, #5
 80129ec:	f107 0308 	add.w	r3, r7, #8
 80129f0:	4611      	mov	r1, r2
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7fe fed9 	bl	80117aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80129f8:	68bb      	ldr	r3, [r7, #8]
        }
        return CWRUtil::toQ5<int>(0);
 80129fa:	bf00      	nop
    }
 80129fc:	4618      	mov	r0, r3
 80129fe:	3710      	adds	r7, #16
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bd80      	pop	{r7, pc}

08012a04 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>:
class View : public Screen
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b082      	sub	sp, #8
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
 8012a0c:	4a05      	ldr	r2, [pc, #20]	; (8012a24 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev+0x20>)
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	601a      	str	r2, [r3, #0]
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7fe f91b 	bl	8010c50 <_ZN8touchgfx6ScreenD1Ev>
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3708      	adds	r7, #8
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}
 8012a24:	08028fe4 	.word	0x08028fe4

08012a28 <_ZN8touchgfx4ViewI16Screen3PresenterED0Ev>:
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b082      	sub	sp, #8
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f7ff ffe7 	bl	8012a04 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 8012a36:	2140      	movs	r1, #64	; 0x40
 8012a38:	6878      	ldr	r0, [r7, #4]
 8012a3a:	f014 f9db 	bl	8026df4 <_ZdlPvj>
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	4618      	mov	r0, r3
 8012a42:	3708      	adds	r7, #8
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}

08012a48 <_ZN15Screen3ViewBaseD1Ev>:

class Screen3ViewBase : public touchgfx::View<Screen3Presenter>
{
public:
    Screen3ViewBase();
    virtual ~Screen3ViewBase() {}
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b082      	sub	sp, #8
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
 8012a50:	4a18      	ldr	r2, [pc, #96]	; (8012ab4 <_ZN15Screen3ViewBaseD1Ev+0x6c>)
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	601a      	str	r2, [r3, #0]
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f000 fa03 	bl	8012e68 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f7ff fd8d 	bl	8012588 <_ZN8touchgfx3BoxD1Ev>
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012a74:	4618      	mov	r0, r3
 8012a76:	f7ff fd87 	bl	8012588 <_ZN8touchgfx3BoxD1Ev>
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	33e8      	adds	r3, #232	; 0xe8
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f000 fa36 	bl	8012ef0 <_ZN8touchgfx11BoxProgressD1Ev>
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	33a0      	adds	r3, #160	; 0xa0
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f7fe fcf3 	bl	8011474 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	3370      	adds	r3, #112	; 0x70
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7ff fd78 	bl	8012588 <_ZN8touchgfx3BoxD1Ev>
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	3340      	adds	r3, #64	; 0x40
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f7ff fd73 	bl	8012588 <_ZN8touchgfx3BoxD1Ev>
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f7ff ffad 	bl	8012a04 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	4618      	mov	r0, r3
 8012aae:	3708      	adds	r7, #8
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}
 8012ab4:	08028f98 	.word	0x08028f98

08012ab8 <_ZN15Screen3ViewBaseD0Ev>:
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b082      	sub	sp, #8
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f7ff ffc1 	bl	8012a48 <_ZN15Screen3ViewBaseD1Ev>
 8012ac6:	f44f 7106 	mov.w	r1, #536	; 0x218
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f014 f992 	bl	8026df4 <_ZdlPvj>
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3708      	adds	r7, #8
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}

08012ada <_ZN15Screen3ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8012ada:	b580      	push	{r7, lr}
 8012adc:	b082      	sub	sp, #8
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8012ae2:	f008 f989 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 8012ae6:	4603      	mov	r3, r0
    }
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3708      	adds	r7, #8
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}

08012af0 <_ZN15Screen3ViewBaseC1Ev>:
#include <gui_generated/screen3_screen/Screen3ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Screen3ViewBase::Screen3ViewBase() :
 8012af0:	b590      	push	{r4, r7, lr}
 8012af2:	b08d      	sub	sp, #52	; 0x34
 8012af4:	af02      	add	r7, sp, #8
 8012af6:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen3ViewBase::buttonCallbackHandler)
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	4618      	mov	r0, r3
 8012afc:	f000 f97e 	bl	8012dfc <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>
 8012b00:	4aac      	ldr	r2, [pc, #688]	; (8012db4 <_ZN15Screen3ViewBaseC1Ev+0x2c4>)
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	601a      	str	r2, [r3, #0]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	3340      	adds	r3, #64	; 0x40
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	f7fe fdb2 	bl	8011674 <_ZN8touchgfx3BoxC1Ev>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	3370      	adds	r3, #112	; 0x70
 8012b14:	4618      	mov	r0, r3
 8012b16:	f7fe fdad 	bl	8011674 <_ZN8touchgfx3BoxC1Ev>
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	33a0      	adds	r3, #160	; 0xa0
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f006 fd64 	bl	80195ec <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	33e8      	adds	r3, #232	; 0xe8
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f003 fa89 	bl	8016040 <_ZN8touchgfx11BoxProgressC1Ev>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012b34:	4618      	mov	r0, r3
 8012b36:	f7fe fd9d 	bl	8011674 <_ZN8touchgfx3BoxC1Ev>
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7fe fd97 	bl	8011674 <_ZN8touchgfx3BoxC1Ev>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8012b4c:	4b9a      	ldr	r3, [pc, #616]	; (8012db8 <_ZN15Screen3ViewBaseC1Ev+0x2c8>)
 8012b4e:	60fb      	str	r3, [r7, #12]
 8012b50:	2300      	movs	r3, #0
 8012b52:	613b      	str	r3, [r7, #16]
 8012b54:	f107 030c 	add.w	r3, r7, #12
 8012b58:	cb0c      	ldmia	r3, {r2, r3}
 8012b5a:	6879      	ldr	r1, [r7, #4]
 8012b5c:	f000 f964 	bl	8012e28 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    box1.setPosition(0, 0, 480, 272);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8012b66:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012b6a:	9300      	str	r3, [sp, #0]
 8012b6c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012b70:	2200      	movs	r2, #0
 8012b72:	2100      	movs	r1, #0
 8012b74:	f7fd ff48 	bl	8010a08 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012b7e:	22ff      	movs	r2, #255	; 0xff
 8012b80:	21ff      	movs	r1, #255	; 0xff
 8012b82:	20ff      	movs	r0, #255	; 0xff
 8012b84:	f7fe fa8e 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	4619      	mov	r1, r3
 8012b8c:	4620      	mov	r0, r4
 8012b8e:	f7fe fd99 	bl	80116c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box2.setPosition(0, 0, 480, 212);
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8012b98:	23d4      	movs	r3, #212	; 0xd4
 8012b9a:	9300      	str	r3, [sp, #0]
 8012b9c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	2100      	movs	r1, #0
 8012ba4:	f7fd ff30 	bl	8010a08 <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8012bae:	2200      	movs	r2, #0
 8012bb0:	2100      	movs	r1, #0
 8012bb2:	2000      	movs	r0, #0
 8012bb4:	f7fe fa76 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	4619      	mov	r1, r3
 8012bbc:	4620      	mov	r0, r4
 8012bbe:	f7fe fd81 	bl	80116c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(0, 0);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	33a0      	adds	r3, #160	; 0xa0
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	2100      	movs	r1, #0
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f7fd ff67 	bl	8010a9e <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8012bd6:	f107 0314 	add.w	r3, r7, #20
 8012bda:	2102      	movs	r1, #2
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f7fd fee3 	bl	80109a8 <_ZN8touchgfx6BitmapC1Et>
 8012be2:	f107 0318 	add.w	r3, r7, #24
 8012be6:	2103      	movs	r1, #3
 8012be8:	4618      	mov	r0, r3
 8012bea:	f7fd fedd 	bl	80109a8 <_ZN8touchgfx6BitmapC1Et>
 8012bee:	f107 0218 	add.w	r2, r7, #24
 8012bf2:	f107 0314 	add.w	r3, r7, #20
 8012bf6:	4619      	mov	r1, r3
 8012bf8:	4620      	mov	r0, r4
 8012bfa:	f006 fb05 	bl	8019208 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID21));
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8012c04:	f107 031c 	add.w	r3, r7, #28
 8012c08:	210d      	movs	r1, #13
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f7fe f8cc 	bl	8010da8 <_ZN8touchgfx9TypedTextC1Et>
 8012c10:	f107 031c 	add.w	r3, r7, #28
 8012c14:	4619      	mov	r1, r3
 8012c16:	4620      	mov	r0, r4
 8012c18:	f7fe f91c 	bl	8010e54 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8012c1c:	f107 031c 	add.w	r3, r7, #28
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7fc fb23 	bl	800f26c <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8012c2c:	22ff      	movs	r2, #255	; 0xff
 8012c2e:	21ff      	movs	r1, #255	; 0xff
 8012c30:	20ff      	movs	r0, #255	; 0xff
 8012c32:	f7fe fa37 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012c36:	4603      	mov	r3, r0
 8012c38:	4619      	mov	r1, r3
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	f7fe f91c 	bl	8010e78 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8012c46:	22ff      	movs	r2, #255	; 0xff
 8012c48:	21ff      	movs	r1, #255	; 0xff
 8012c4a:	20ff      	movs	r0, #255	; 0xff
 8012c4c:	f7fe fa2a 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012c50:	4603      	mov	r3, r0
 8012c52:	4619      	mov	r1, r3
 8012c54:	4620      	mov	r0, r4
 8012c56:	f7fe f91d 	bl	8010e94 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012c66:	4619      	mov	r1, r3
 8012c68:	4610      	mov	r0, r2
 8012c6a:	f7fe f8b3 	bl	8010dd4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    boxProgress1.setXY(60, 224);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	33e8      	adds	r3, #232	; 0xe8
 8012c72:	22e0      	movs	r2, #224	; 0xe0
 8012c74:	213c      	movs	r1, #60	; 0x3c
 8012c76:	4618      	mov	r0, r3
 8012c78:	f7fd ff11 	bl	8010a9e <_ZN8touchgfx8Drawable5setXYEss>
    boxProgress1.setProgressIndicatorPosition(2, 2, 400, 30);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 8012c82:	231e      	movs	r3, #30
 8012c84:	9300      	str	r3, [sp, #0]
 8012c86:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012c8a:	2202      	movs	r2, #2
 8012c8c:	2102      	movs	r1, #2
 8012c8e:	f003 f931 	bl	8015ef4 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    boxProgress1.setRange(0, 100);
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 8012c98:	2300      	movs	r3, #0
 8012c9a:	9300      	str	r3, [sp, #0]
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	2264      	movs	r2, #100	; 0x64
 8012ca0:	2100      	movs	r1, #0
 8012ca2:	f003 fb41 	bl	8016328 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    boxProgress1.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	33e8      	adds	r3, #232	; 0xe8
 8012caa:	2100      	movs	r1, #0
 8012cac:	4618      	mov	r0, r3
 8012cae:	f003 fa00 	bl	80160b2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    boxProgress1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8012cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012cbc:	2105      	movs	r1, #5
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f7fd fe72 	bl	80109a8 <_ZN8touchgfx6BitmapC1Et>
 8012cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012cc8:	4619      	mov	r1, r3
 8012cca:	4620      	mov	r0, r4
 8012ccc:	f003 fb22 	bl	8016314 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    boxProgress1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 151, 255));
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8012cd6:	22ff      	movs	r2, #255	; 0xff
 8012cd8:	2197      	movs	r1, #151	; 0x97
 8012cda:	2000      	movs	r0, #0
 8012cdc:	f7fe f9e2 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	4619      	mov	r1, r3
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	f003 f8f9 	bl	8015edc <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    boxProgress1.setValue(60);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	33e8      	adds	r3, #232	; 0xe8
 8012cee:	213c      	movs	r1, #60	; 0x3c
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f003 f917 	bl	8015f24 <_ZN8touchgfx11BoxProgress8setValueEi>

    box3.setPosition(9, 227, 15, 31);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 8012cfc:	231f      	movs	r3, #31
 8012cfe:	9300      	str	r3, [sp, #0]
 8012d00:	230f      	movs	r3, #15
 8012d02:	22e3      	movs	r2, #227	; 0xe3
 8012d04:	2109      	movs	r1, #9
 8012d06:	f7fd fe7f 	bl	8010a08 <_ZN8touchgfx8Drawable11setPositionEssss>
    box3.setColor(touchgfx::Color::getColorFrom24BitRGB(4, 48, 240));
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8012d10:	22f0      	movs	r2, #240	; 0xf0
 8012d12:	2130      	movs	r1, #48	; 0x30
 8012d14:	2004      	movs	r0, #4
 8012d16:	f7fe f9c5 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	4619      	mov	r1, r3
 8012d1e:	4620      	mov	r0, r4
 8012d20:	f7fe fcd0 	bl	80116c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box3_1.setPosition(30, 227, 15, 31);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8012d2a:	231f      	movs	r3, #31
 8012d2c:	9300      	str	r3, [sp, #0]
 8012d2e:	230f      	movs	r3, #15
 8012d30:	22e3      	movs	r2, #227	; 0xe3
 8012d32:	211e      	movs	r1, #30
 8012d34:	f7fd fe68 	bl	8010a08 <_ZN8touchgfx8Drawable11setPositionEssss>
    box3_1.setColor(touchgfx::Color::getColorFrom24BitRGB(4, 48, 240));
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f503 74ec 	add.w	r4, r3, #472	; 0x1d8
 8012d3e:	22f0      	movs	r2, #240	; 0xf0
 8012d40:	2130      	movs	r1, #48	; 0x30
 8012d42:	2004      	movs	r0, #4
 8012d44:	f7fe f9ae 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	f7fe fcb9 	bl	80116c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    add(box1);
 8012d52:	687a      	ldr	r2, [r7, #4]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	3340      	adds	r3, #64	; 0x40
 8012d58:	4619      	mov	r1, r3
 8012d5a:	4610      	mov	r0, r2
 8012d5c:	f7fd ffd0 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box2);
 8012d60:	687a      	ldr	r2, [r7, #4]
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	3370      	adds	r3, #112	; 0x70
 8012d66:	4619      	mov	r1, r3
 8012d68:	4610      	mov	r0, r2
 8012d6a:	f7fd ffc9 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8012d6e:	687a      	ldr	r2, [r7, #4]
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	33a0      	adds	r3, #160	; 0xa0
 8012d74:	4619      	mov	r1, r3
 8012d76:	4610      	mov	r0, r2
 8012d78:	f7fd ffc2 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(boxProgress1);
 8012d7c:	687a      	ldr	r2, [r7, #4]
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	33e8      	adds	r3, #232	; 0xe8
 8012d82:	4619      	mov	r1, r3
 8012d84:	4610      	mov	r0, r2
 8012d86:	f7fd ffbb 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box3);
 8012d8a:	687a      	ldr	r2, [r7, #4]
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012d92:	4619      	mov	r1, r3
 8012d94:	4610      	mov	r0, r2
 8012d96:	f7fd ffb3 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box3_1);
 8012d9a:	687a      	ldr	r2, [r7, #4]
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8012da2:	4619      	mov	r1, r3
 8012da4:	4610      	mov	r0, r2
 8012da6:	f7fd ffab 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	4618      	mov	r0, r3
 8012dae:	372c      	adds	r7, #44	; 0x2c
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd90      	pop	{r4, r7, pc}
 8012db4:	08028f98 	.word	0x08028f98
 8012db8:	08012dd1 	.word	0x08012dd1

08012dbc <_ZN15Screen3ViewBase11setupScreenEv>:

void Screen3ViewBase::setupScreen()
{
 8012dbc:	b480      	push	{r7}
 8012dbe:	b083      	sub	sp, #12
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]

}
 8012dc4:	bf00      	nop
 8012dc6:	370c      	adds	r7, #12
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dce:	4770      	bx	lr

08012dd0 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen3ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b082      	sub	sp, #8
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	33a0      	adds	r3, #160	; 0xa0
 8012dde:	683a      	ldr	r2, [r7, #0]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d106      	bne.n	8012df2 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to screen
        //Go to screen with no screen transition
        application().gotoscreenScreenNoTransition();
 8012de4:	6878      	ldr	r0, [r7, #4]
 8012de6:	f7ff fe78 	bl	8012ada <_ZN15Screen3ViewBase11applicationEv>
 8012dea:	4603      	mov	r3, r0
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7fc fe4b 	bl	800fa88 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
}
 8012df2:	bf00      	nop
 8012df4:	3708      	adds	r7, #8
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}
	...

08012dfc <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>:
    View()
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b082      	sub	sp, #8
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	4618      	mov	r0, r3
 8012e08:	f008 ffb8 	bl	801bd7c <_ZN8touchgfx6ScreenC1Ev>
 8012e0c:	4a05      	ldr	r2, [pc, #20]	; (8012e24 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev+0x28>)
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	601a      	str	r2, [r3, #0]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	2200      	movs	r2, #0
 8012e16:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3708      	adds	r7, #8
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}
 8012e22:	bf00      	nop
 8012e24:	08028fe4 	.word	0x08028fe4

08012e28 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b084      	sub	sp, #16
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	60f8      	str	r0, [r7, #12]
 8012e30:	60b9      	str	r1, [r7, #8]
 8012e32:	4639      	mov	r1, r7
 8012e34:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f7fe fa42 	bl	80112c4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8012e40:	4a08      	ldr	r2, [pc, #32]	; (8012e64 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	68ba      	ldr	r2, [r7, #8]
 8012e4a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	3308      	adds	r3, #8
 8012e50:	463a      	mov	r2, r7
 8012e52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e56:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	3710      	adds	r7, #16
 8012e60:	46bd      	mov	sp, r7
 8012e62:	bd80      	pop	{r7, pc}
 8012e64:	08028fcc 	.word	0x08028fcc

08012e68 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
 8012e70:	4a05      	ldr	r2, [pc, #20]	; (8012e88 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	601a      	str	r2, [r3, #0]
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f7fe fa53 	bl	8011324 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	4618      	mov	r0, r3
 8012e82:	3708      	adds	r7, #8
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}
 8012e88:	08028fcc 	.word	0x08028fcc

08012e8c <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b082      	sub	sp, #8
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f7ff ffe7 	bl	8012e68 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8012e9a:	2110      	movs	r1, #16
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f013 ffa9 	bl	8026df4 <_ZdlPvj>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	3708      	adds	r7, #8
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}

08012eac <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
{
/**
 * An abstract class for progress indicators that need a horizontal or vertical direction to be
 * specified.
 */
class AbstractDirectionProgress : public AbstractProgressIndicator
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b082      	sub	sp, #8
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
 8012eb4:	4a05      	ldr	r2, [pc, #20]	; (8012ecc <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x20>)
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	601a      	str	r2, [r3, #0]
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f7ff fba7 	bl	8012610 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3708      	adds	r7, #8
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}
 8012ecc:	08029c44 	.word	0x08029c44

08012ed0 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b082      	sub	sp, #8
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
 8012ed8:	6878      	ldr	r0, [r7, #4]
 8012eda:	f7ff ffe7 	bl	8012eac <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8012ede:	2190      	movs	r1, #144	; 0x90
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f013 ff87 	bl	8026df4 <_ZdlPvj>
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	4618      	mov	r0, r3
 8012eea:	3708      	adds	r7, #8
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd80      	pop	{r7, pc}

08012ef0 <_ZN8touchgfx11BoxProgressD1Ev>:
/**
 * A BoxProgress which shows the current progress using a simple Box. It is possible to set the
 * color and the alpha of the box. It is also possible to control in what direction the
 * box will progress (up, down, to the left or to the right).
 */
class BoxProgress : public AbstractDirectionProgress
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b082      	sub	sp, #8
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
 8012ef8:	4a08      	ldr	r2, [pc, #32]	; (8012f1c <_ZN8touchgfx11BoxProgressD1Ev+0x2c>)
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	601a      	str	r2, [r3, #0]
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	3390      	adds	r3, #144	; 0x90
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7ff fb40 	bl	8012588 <_ZN8touchgfx3BoxD1Ev>
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7ff ffce 	bl	8012eac <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	4618      	mov	r0, r3
 8012f14:	3708      	adds	r7, #8
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	08029b6c 	.word	0x08029b6c

08012f20 <_ZN8touchgfx11BoxProgressD0Ev>:
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b082      	sub	sp, #8
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f7ff ffe1 	bl	8012ef0 <_ZN8touchgfx11BoxProgressD1Ev>
 8012f2e:	21c0      	movs	r1, #192	; 0xc0
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f013 ff5f 	bl	8026df4 <_ZdlPvj>
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	4618      	mov	r0, r3
 8012f3a:	3708      	adds	r7, #8
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
 8012f48:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	685b      	ldr	r3, [r3, #4]
 8012f4e:	687a      	ldr	r2, [r7, #4]
 8012f50:	68d2      	ldr	r2, [r2, #12]
 8012f52:	1052      	asrs	r2, r2, #1
 8012f54:	1898      	adds	r0, r3, r2
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	68db      	ldr	r3, [r3, #12]
 8012f5a:	f003 0301 	and.w	r3, r3, #1
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d102      	bne.n	8012f68 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	689b      	ldr	r3, [r3, #8]
 8012f66:	e00a      	b.n	8012f7e <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	685b      	ldr	r3, [r3, #4]
 8012f6c:	687a      	ldr	r2, [r7, #4]
 8012f6e:	68d2      	ldr	r2, [r2, #12]
 8012f70:	1052      	asrs	r2, r2, #1
 8012f72:	4413      	add	r3, r2
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	687a      	ldr	r2, [r7, #4]
 8012f78:	6892      	ldr	r2, [r2, #8]
 8012f7a:	4413      	add	r3, r2
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	6839      	ldr	r1, [r7, #0]
 8012f80:	4798      	blx	r3
    }
 8012f82:	bf00      	nop
 8012f84:	3708      	adds	r7, #8
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}

08012f8a <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8012f8a:	b480      	push	{r7}
 8012f8c:	b083      	sub	sp, #12
 8012f8e:	af00      	add	r7, sp, #0
 8012f90:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	685b      	ldr	r3, [r3, #4]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d010      	beq.n	8012fbc <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	689b      	ldr	r3, [r3, #8]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d107      	bne.n	8012fb2 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	68db      	ldr	r3, [r3, #12]
 8012fa6:	f003 0301 	and.w	r3, r3, #1
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d101      	bne.n	8012fb2 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8012fae:	2301      	movs	r3, #1
 8012fb0:	e000      	b.n	8012fb4 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	2b01      	cmp	r3, #1
 8012fb6:	d001      	beq.n	8012fbc <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8012fb8:	2301      	movs	r3, #1
 8012fba:	e000      	b.n	8012fbe <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8012fbc:	2300      	movs	r3, #0
    }
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	370c      	adds	r7, #12
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc8:	4770      	bx	lr
	...

08012fcc <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b082      	sub	sp, #8
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	4a05      	ldr	r2, [pc, #20]	; (8012fec <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	601a      	str	r2, [r3, #0]
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f7fd fe37 	bl	8010c50 <_ZN8touchgfx6ScreenD1Ev>
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3708      	adds	r7, #8
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}
 8012fec:	08029064 	.word	0x08029064

08012ff0 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b082      	sub	sp, #8
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
 8012ff8:	6878      	ldr	r0, [r7, #4]
 8012ffa:	f7ff ffe7 	bl	8012fcc <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8012ffe:	2140      	movs	r1, #64	; 0x40
 8013000:	6878      	ldr	r0, [r7, #4]
 8013002:	f013 fef7 	bl	8026df4 <_ZdlPvj>
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	4618      	mov	r0, r3
 801300a:	3708      	adds	r7, #8
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}

08013010 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 8013010:	b580      	push	{r7, lr}
 8013012:	b082      	sub	sp, #8
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	4a13      	ldr	r2, [pc, #76]	; (8013068 <_ZN14screenViewBaseD1Ev+0x58>)
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	601a      	str	r2, [r3, #0]
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8013024:	4618      	mov	r0, r3
 8013026:	f000 fa1d 	bl	8013464 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013030:	4618      	mov	r0, r3
 8013032:	f7fe fa1f 	bl	8011474 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	33b8      	adds	r3, #184	; 0xb8
 801303a:	4618      	mov	r0, r3
 801303c:	f7fe fa1a 	bl	8011474 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	3370      	adds	r3, #112	; 0x70
 8013044:	4618      	mov	r0, r3
 8013046:	f7fe fa15 	bl	8011474 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	3340      	adds	r3, #64	; 0x40
 801304e:	4618      	mov	r0, r3
 8013050:	f7ff fa9a 	bl	8012588 <_ZN8touchgfx3BoxD1Ev>
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	4618      	mov	r0, r3
 8013058:	f7ff ffb8 	bl	8012fcc <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	4618      	mov	r0, r3
 8013060:	3708      	adds	r7, #8
 8013062:	46bd      	mov	sp, r7
 8013064:	bd80      	pop	{r7, pc}
 8013066:	bf00      	nop
 8013068:	08029018 	.word	0x08029018

0801306c <_ZN14screenViewBaseD0Ev>:
 801306c:	b580      	push	{r7, lr}
 801306e:	b082      	sub	sp, #8
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f7ff ffcb 	bl	8013010 <_ZN14screenViewBaseD1Ev>
 801307a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801307e:	6878      	ldr	r0, [r7, #4]
 8013080:	f013 feb8 	bl	8026df4 <_ZdlPvj>
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	4618      	mov	r0, r3
 8013088:	3708      	adds	r7, #8
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}

0801308e <_ZN14screenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 801308e:	b580      	push	{r7, lr}
 8013090:	b082      	sub	sp, #8
 8013092:	af00      	add	r7, sp, #0
 8013094:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8013096:	f007 feaf 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 801309a:	4603      	mov	r3, r0
    }
 801309c:	4618      	mov	r0, r3
 801309e:	3708      	adds	r7, #8
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}

080130a4 <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

screenViewBase::screenViewBase() :
 80130a4:	b590      	push	{r4, r7, lr}
 80130a6:	b093      	sub	sp, #76	; 0x4c
 80130a8:	af02      	add	r7, sp, #8
 80130aa:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	4618      	mov	r0, r3
 80130b0:	f000 f9a2 	bl	80133f8 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 80130b4:	4ab1      	ldr	r2, [pc, #708]	; (801337c <_ZN14screenViewBaseC1Ev+0x2d8>)
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	601a      	str	r2, [r3, #0]
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	3340      	adds	r3, #64	; 0x40
 80130be:	4618      	mov	r0, r3
 80130c0:	f7fe fad8 	bl	8011674 <_ZN8touchgfx3BoxC1Ev>
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	3370      	adds	r3, #112	; 0x70
 80130c8:	4618      	mov	r0, r3
 80130ca:	f006 fa8f 	bl	80195ec <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	33b8      	adds	r3, #184	; 0xb8
 80130d2:	4618      	mov	r0, r3
 80130d4:	f006 fa8a 	bl	80195ec <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80130de:	4618      	mov	r0, r3
 80130e0:	f006 fa84 	bl	80195ec <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 80130ea:	4ba5      	ldr	r3, [pc, #660]	; (8013380 <_ZN14screenViewBaseC1Ev+0x2dc>)
 80130ec:	60bb      	str	r3, [r7, #8]
 80130ee:	2300      	movs	r3, #0
 80130f0:	60fb      	str	r3, [r7, #12]
 80130f2:	f107 0308 	add.w	r3, r7, #8
 80130f6:	cb0c      	ldmia	r3, {r2, r3}
 80130f8:	6879      	ldr	r1, [r7, #4]
 80130fa:	f000 f993 	bl	8013424 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    box1.setPosition(0, 0, 480, 272);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013104:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013108:	9300      	str	r3, [sp, #0]
 801310a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801310e:	2200      	movs	r2, #0
 8013110:	2100      	movs	r1, #0
 8013112:	f7fd fc79 	bl	8010a08 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801311c:	22ff      	movs	r2, #255	; 0xff
 801311e:	21ff      	movs	r1, #255	; 0xff
 8013120:	20ff      	movs	r0, #255	; 0xff
 8013122:	f7fd ffbf 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013126:	4603      	mov	r3, r0
 8013128:	4619      	mov	r1, r3
 801312a:	4620      	mov	r0, r4
 801312c:	f7fe faca 	bl	80116c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    buttonWithLabel1.setXY(155, 18);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	3370      	adds	r3, #112	; 0x70
 8013134:	2212      	movs	r2, #18
 8013136:	219b      	movs	r1, #155	; 0x9b
 8013138:	4618      	mov	r0, r3
 801313a:	f7fd fcb0 	bl	8010a9e <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8013144:	f107 0310 	add.w	r3, r7, #16
 8013148:	2100      	movs	r1, #0
 801314a:	4618      	mov	r0, r3
 801314c:	f7fd fc2c 	bl	80109a8 <_ZN8touchgfx6BitmapC1Et>
 8013150:	f107 0314 	add.w	r3, r7, #20
 8013154:	2101      	movs	r1, #1
 8013156:	4618      	mov	r0, r3
 8013158:	f7fd fc26 	bl	80109a8 <_ZN8touchgfx6BitmapC1Et>
 801315c:	f107 0214 	add.w	r2, r7, #20
 8013160:	f107 0310 	add.w	r3, r7, #16
 8013164:	4619      	mov	r1, r3
 8013166:	4620      	mov	r0, r4
 8013168:	f006 f84e 	bl	8019208 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_SINGLEUSEID1));
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8013172:	f107 0318 	add.w	r3, r7, #24
 8013176:	2100      	movs	r1, #0
 8013178:	4618      	mov	r0, r3
 801317a:	f7fd fe15 	bl	8010da8 <_ZN8touchgfx9TypedTextC1Et>
 801317e:	f107 0318 	add.w	r3, r7, #24
 8013182:	4619      	mov	r1, r3
 8013184:	4620      	mov	r0, r4
 8013186:	f7fd fe65 	bl	8010e54 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 801318a:	f107 0318 	add.w	r3, r7, #24
 801318e:	4618      	mov	r0, r3
 8013190:	f7fc f86c 	bl	800f26c <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801319a:	22ff      	movs	r2, #255	; 0xff
 801319c:	21ff      	movs	r1, #255	; 0xff
 801319e:	20ff      	movs	r0, #255	; 0xff
 80131a0:	f7fd ff80 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80131a4:	4603      	mov	r3, r0
 80131a6:	4619      	mov	r1, r3
 80131a8:	4620      	mov	r0, r4
 80131aa:	f7fd fe65 	bl	8010e78 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80131b4:	22ff      	movs	r2, #255	; 0xff
 80131b6:	21ff      	movs	r1, #255	; 0xff
 80131b8:	20ff      	movs	r0, #255	; 0xff
 80131ba:	f7fd ff73 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80131be:	4603      	mov	r3, r0
 80131c0:	4619      	mov	r1, r3
 80131c2:	4620      	mov	r0, r4
 80131c4:	f7fd fe66 	bl	8010e94 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80131d4:	4619      	mov	r1, r3
 80131d6:	4610      	mov	r0, r2
 80131d8:	f7fd fdfc 	bl	8010dd4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel2.setXY(155, 106);
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	33b8      	adds	r3, #184	; 0xb8
 80131e0:	226a      	movs	r2, #106	; 0x6a
 80131e2:	219b      	movs	r1, #155	; 0x9b
 80131e4:	4618      	mov	r0, r3
 80131e6:	f7fd fc5a 	bl	8010a9e <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80131f0:	f107 0320 	add.w	r3, r7, #32
 80131f4:	2100      	movs	r1, #0
 80131f6:	4618      	mov	r0, r3
 80131f8:	f7fd fbd6 	bl	80109a8 <_ZN8touchgfx6BitmapC1Et>
 80131fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013200:	2101      	movs	r1, #1
 8013202:	4618      	mov	r0, r3
 8013204:	f7fd fbd0 	bl	80109a8 <_ZN8touchgfx6BitmapC1Et>
 8013208:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801320c:	f107 0320 	add.w	r3, r7, #32
 8013210:	4619      	mov	r1, r3
 8013212:	4620      	mov	r0, r4
 8013214:	f005 fff8 	bl	8019208 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel2.setLabelText(touchgfx::TypedText(T_SINGLEUSEID2));
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 801321e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013222:	2101      	movs	r1, #1
 8013224:	4618      	mov	r0, r3
 8013226:	f7fd fdbf 	bl	8010da8 <_ZN8touchgfx9TypedTextC1Et>
 801322a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801322e:	4619      	mov	r1, r3
 8013230:	4620      	mov	r0, r4
 8013232:	f7fd fe0f 	bl	8010e54 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8013236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801323a:	4618      	mov	r0, r3
 801323c:	f7fc f816 	bl	800f26c <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel2.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8013246:	22ff      	movs	r2, #255	; 0xff
 8013248:	21ff      	movs	r1, #255	; 0xff
 801324a:	20ff      	movs	r0, #255	; 0xff
 801324c:	f7fd ff2a 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013250:	4603      	mov	r3, r0
 8013252:	4619      	mov	r1, r3
 8013254:	4620      	mov	r0, r4
 8013256:	f7fd fe0f 	bl	8010e78 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel2.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8013260:	22ff      	movs	r2, #255	; 0xff
 8013262:	21ff      	movs	r1, #255	; 0xff
 8013264:	20ff      	movs	r0, #255	; 0xff
 8013266:	f7fd ff1d 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801326a:	4603      	mov	r3, r0
 801326c:	4619      	mov	r1, r3
 801326e:	4620      	mov	r0, r4
 8013270:	f7fd fe10 	bl	8010e94 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel2.setAction(buttonCallback);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8013280:	4619      	mov	r1, r3
 8013282:	4610      	mov	r0, r2
 8013284:	f7fd fda6 	bl	8010dd4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel3.setXY(155, 197);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801328e:	22c5      	movs	r2, #197	; 0xc5
 8013290:	219b      	movs	r1, #155	; 0x9b
 8013292:	4618      	mov	r0, r3
 8013294:	f7fd fc03 	bl	8010a9e <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel3.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	f503 7480 	add.w	r4, r3, #256	; 0x100
 801329e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80132a2:	2100      	movs	r1, #0
 80132a4:	4618      	mov	r0, r3
 80132a6:	f7fd fb7f 	bl	80109a8 <_ZN8touchgfx6BitmapC1Et>
 80132aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80132ae:	2101      	movs	r1, #1
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7fd fb79 	bl	80109a8 <_ZN8touchgfx6BitmapC1Et>
 80132b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80132ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80132be:	4619      	mov	r1, r3
 80132c0:	4620      	mov	r0, r4
 80132c2:	f005 ffa1 	bl	8019208 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel3.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3));
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80132cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80132d0:	2102      	movs	r1, #2
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7fd fd68 	bl	8010da8 <_ZN8touchgfx9TypedTextC1Et>
 80132d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80132dc:	4619      	mov	r1, r3
 80132de:	4620      	mov	r0, r4
 80132e0:	f7fd fdb8 	bl	8010e54 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80132e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7fb ffbf 	bl	800f26c <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel3.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80132f4:	22ff      	movs	r2, #255	; 0xff
 80132f6:	21ff      	movs	r1, #255	; 0xff
 80132f8:	20ff      	movs	r0, #255	; 0xff
 80132fa:	f7fd fed3 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80132fe:	4603      	mov	r3, r0
 8013300:	4619      	mov	r1, r3
 8013302:	4620      	mov	r0, r4
 8013304:	f7fd fdb8 	bl	8010e78 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel3.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	f503 7480 	add.w	r4, r3, #256	; 0x100
 801330e:	22ff      	movs	r2, #255	; 0xff
 8013310:	21ff      	movs	r1, #255	; 0xff
 8013312:	20ff      	movs	r0, #255	; 0xff
 8013314:	f7fd fec6 	bl	80110a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013318:	4603      	mov	r3, r0
 801331a:	4619      	mov	r1, r3
 801331c:	4620      	mov	r0, r4
 801331e:	f7fd fdb9 	bl	8010e94 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel3.setAction(buttonCallback);
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 801332e:	4619      	mov	r1, r3
 8013330:	4610      	mov	r0, r2
 8013332:	f7fd fd4f 	bl	8010dd4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 8013336:	687a      	ldr	r2, [r7, #4]
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	3340      	adds	r3, #64	; 0x40
 801333c:	4619      	mov	r1, r3
 801333e:	4610      	mov	r0, r2
 8013340:	f7fd fcde 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8013344:	687a      	ldr	r2, [r7, #4]
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	3370      	adds	r3, #112	; 0x70
 801334a:	4619      	mov	r1, r3
 801334c:	4610      	mov	r0, r2
 801334e:	f7fd fcd7 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel2);
 8013352:	687a      	ldr	r2, [r7, #4]
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	33b8      	adds	r3, #184	; 0xb8
 8013358:	4619      	mov	r1, r3
 801335a:	4610      	mov	r0, r2
 801335c:	f7fd fcd0 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel3);
 8013360:	687a      	ldr	r2, [r7, #4]
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013368:	4619      	mov	r1, r3
 801336a:	4610      	mov	r0, r2
 801336c:	f7fd fcc8 	bl	8010d00 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	4618      	mov	r0, r3
 8013374:	3744      	adds	r7, #68	; 0x44
 8013376:	46bd      	mov	sp, r7
 8013378:	bd90      	pop	{r4, r7, pc}
 801337a:	bf00      	nop
 801337c:	08029018 	.word	0x08029018
 8013380:	08013399 	.word	0x08013399

08013384 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8013384:	b480      	push	{r7}
 8013386:	b083      	sub	sp, #12
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]

}
 801338c:	bf00      	nop
 801338e:	370c      	adds	r7, #12
 8013390:	46bd      	mov	sp, r7
 8013392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013396:	4770      	bx	lr

08013398 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b082      	sub	sp, #8
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
 80133a0:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	3370      	adds	r3, #112	; 0x70
 80133a6:	683a      	ldr	r2, [r7, #0]
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d107      	bne.n	80133bc <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	f7ff fe6e 	bl	801308e <_ZN14screenViewBase11applicationEv>
 80133b2:	4603      	mov	r3, r0
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7fc fbad 	bl	800fb14 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        //Interaction3
        //When buttonWithLabel3 clicked change screen to Screen3
        //Go to Screen3 with no screen transition
        application().gotoScreen3ScreenNoTransition();
    }
}
 80133ba:	e019      	b.n	80133f0 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &buttonWithLabel2)
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	33b8      	adds	r3, #184	; 0xb8
 80133c0:	683a      	ldr	r2, [r7, #0]
 80133c2:	429a      	cmp	r2, r3
 80133c4:	d107      	bne.n	80133d6 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
        application().gotoScreen2ScreenNoTransition();
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	f7ff fe61 	bl	801308e <_ZN14screenViewBase11applicationEv>
 80133cc:	4603      	mov	r3, r0
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7fc fbe6 	bl	800fba0 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
}
 80133d4:	e00c      	b.n	80133f0 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &buttonWithLabel3)
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80133dc:	683a      	ldr	r2, [r7, #0]
 80133de:	429a      	cmp	r2, r3
 80133e0:	d106      	bne.n	80133f0 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        application().gotoScreen3ScreenNoTransition();
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f7ff fe53 	bl	801308e <_ZN14screenViewBase11applicationEv>
 80133e8:	4603      	mov	r3, r0
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7fc fc1e 	bl	800fc2c <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>
}
 80133f0:	bf00      	nop
 80133f2:	3708      	adds	r7, #8
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}

080133f8 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b082      	sub	sp, #8
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	4618      	mov	r0, r3
 8013404:	f008 fcba 	bl	801bd7c <_ZN8touchgfx6ScreenC1Ev>
 8013408:	4a05      	ldr	r2, [pc, #20]	; (8013420 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	601a      	str	r2, [r3, #0]
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2200      	movs	r2, #0
 8013412:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	4618      	mov	r0, r3
 8013418:	3708      	adds	r7, #8
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}
 801341e:	bf00      	nop
 8013420:	08029064 	.word	0x08029064

08013424 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8013424:	b580      	push	{r7, lr}
 8013426:	b084      	sub	sp, #16
 8013428:	af00      	add	r7, sp, #0
 801342a:	60f8      	str	r0, [r7, #12]
 801342c:	60b9      	str	r1, [r7, #8]
 801342e:	4639      	mov	r1, r7
 8013430:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	4618      	mov	r0, r3
 8013438:	f7fd ff44 	bl	80112c4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 801343c:	4a08      	ldr	r2, [pc, #32]	; (8013460 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	68ba      	ldr	r2, [r7, #8]
 8013446:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	3308      	adds	r3, #8
 801344c:	463a      	mov	r2, r7
 801344e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013452:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	4618      	mov	r0, r3
 801345a:	3710      	adds	r7, #16
 801345c:	46bd      	mov	sp, r7
 801345e:	bd80      	pop	{r7, pc}
 8013460:	0802904c 	.word	0x0802904c

08013464 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8013464:	b580      	push	{r7, lr}
 8013466:	b082      	sub	sp, #8
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	4a05      	ldr	r2, [pc, #20]	; (8013484 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	601a      	str	r2, [r3, #0]
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	4618      	mov	r0, r3
 8013476:	f7fd ff55 	bl	8011324 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	4618      	mov	r0, r3
 801347e:	3708      	adds	r7, #8
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}
 8013484:	0802904c 	.word	0x0802904c

08013488 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8013488:	b580      	push	{r7, lr}
 801348a:	b082      	sub	sp, #8
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
 8013490:	6878      	ldr	r0, [r7, #4]
 8013492:	f7ff ffe7 	bl	8013464 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8013496:	2110      	movs	r1, #16
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f013 fcab 	bl	8026df4 <_ZdlPvj>
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	4618      	mov	r0, r3
 80134a2:	3708      	adds	r7, #8
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}

080134a8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b082      	sub	sp, #8
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
 80134b0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	685b      	ldr	r3, [r3, #4]
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	68d2      	ldr	r2, [r2, #12]
 80134ba:	1052      	asrs	r2, r2, #1
 80134bc:	1898      	adds	r0, r3, r2
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	68db      	ldr	r3, [r3, #12]
 80134c2:	f003 0301 	and.w	r3, r3, #1
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d102      	bne.n	80134d0 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	689b      	ldr	r3, [r3, #8]
 80134ce:	e00a      	b.n	80134e6 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	685b      	ldr	r3, [r3, #4]
 80134d4:	687a      	ldr	r2, [r7, #4]
 80134d6:	68d2      	ldr	r2, [r2, #12]
 80134d8:	1052      	asrs	r2, r2, #1
 80134da:	4413      	add	r3, r2
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	687a      	ldr	r2, [r7, #4]
 80134e0:	6892      	ldr	r2, [r2, #8]
 80134e2:	4413      	add	r3, r2
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	6839      	ldr	r1, [r7, #0]
 80134e8:	4798      	blx	r3
    }
 80134ea:	bf00      	nop
 80134ec:	3708      	adds	r7, #8
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}

080134f2 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80134f2:	b480      	push	{r7}
 80134f4:	b083      	sub	sp, #12
 80134f6:	af00      	add	r7, sp, #0
 80134f8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	685b      	ldr	r3, [r3, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d010      	beq.n	8013524 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	689b      	ldr	r3, [r3, #8]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d107      	bne.n	801351a <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	68db      	ldr	r3, [r3, #12]
 801350e:	f003 0301 	and.w	r3, r3, #1
 8013512:	2b00      	cmp	r3, #0
 8013514:	d101      	bne.n	801351a <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8013516:	2301      	movs	r3, #1
 8013518:	e000      	b.n	801351c <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801351a:	2300      	movs	r3, #0
 801351c:	2b01      	cmp	r3, #1
 801351e:	d001      	beq.n	8013524 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8013520:	2301      	movs	r3, #1
 8013522:	e000      	b.n	8013526 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8013524:	2300      	movs	r3, #0
    }
 8013526:	4618      	mov	r0, r3
 8013528:	370c      	adds	r7, #12
 801352a:	46bd      	mov	sp, r7
 801352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013530:	4770      	bx	lr
	...

08013534 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8013534:	b480      	push	{r7}
 8013536:	af00      	add	r7, sp, #0
    return bitmap_database;
 8013538:	4b02      	ldr	r3, [pc, #8]	; (8013544 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801353a:	4618      	mov	r0, r3
 801353c:	46bd      	mov	sp, r7
 801353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013542:	4770      	bx	lr
 8013544:	08029090 	.word	0x08029090

08013548 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8013548:	b480      	push	{r7}
 801354a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 801354c:	2307      	movs	r3, #7
}
 801354e:	4618      	mov	r0, r3
 8013550:	46bd      	mov	sp, r7
 8013552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013556:	4770      	bx	lr

08013558 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8013558:	b480      	push	{r7}
 801355a:	b085      	sub	sp, #20
 801355c:	af00      	add	r7, sp, #0
 801355e:	60f8      	str	r0, [r7, #12]
 8013560:	460b      	mov	r3, r1
 8013562:	607a      	str	r2, [r7, #4]
 8013564:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8013566:	2300      	movs	r3, #0
    }
 8013568:	4618      	mov	r0, r3
 801356a:	3714      	adds	r7, #20
 801356c:	46bd      	mov	sp, r7
 801356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013572:	4770      	bx	lr

08013574 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8013574:	b480      	push	{r7}
 8013576:	b083      	sub	sp, #12
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801357c:	2300      	movs	r3, #0
    }
 801357e:	4618      	mov	r0, r3
 8013580:	370c      	adds	r7, #12
 8013582:	46bd      	mov	sp, r7
 8013584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013588:	4770      	bx	lr
	...

0801358c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 801358c:	b480      	push	{r7}
 801358e:	b085      	sub	sp, #20
 8013590:	af00      	add	r7, sp, #0
 8013592:	60f8      	str	r0, [r7, #12]
 8013594:	60b9      	str	r1, [r7, #8]
 8013596:	4613      	mov	r3, r2
 8013598:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 801359a:	4a07      	ldr	r2, [pc, #28]	; (80135b8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	6013      	str	r3, [r2, #0]
        fonts = f;
 80135a0:	4a06      	ldr	r2, [pc, #24]	; (80135bc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80135a2:	68bb      	ldr	r3, [r7, #8]
 80135a4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80135a6:	4a06      	ldr	r2, [pc, #24]	; (80135c0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80135a8:	88fb      	ldrh	r3, [r7, #6]
 80135aa:	8013      	strh	r3, [r2, #0]
    }
 80135ac:	bf00      	nop
 80135ae:	3714      	adds	r7, #20
 80135b0:	46bd      	mov	sp, r7
 80135b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b6:	4770      	bx	lr
 80135b8:	2000b464 	.word	0x2000b464
 80135bc:	2000b46c 	.word	0x2000b46c
 80135c0:	2000b468 	.word	0x2000b468

080135c4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80135c4:	b40e      	push	{r1, r2, r3}
 80135c6:	b580      	push	{r7, lr}
 80135c8:	b085      	sub	sp, #20
 80135ca:	af00      	add	r7, sp, #0
 80135cc:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80135ce:	f107 0320 	add.w	r3, r7, #32
 80135d2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	69fa      	ldr	r2, [r7, #28]
 80135d8:	2100      	movs	r1, #0
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f007 ff0e 	bl	801b3fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80135e0:	4603      	mov	r3, r0
 80135e2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80135e4:	89fb      	ldrh	r3, [r7, #14]
}
 80135e6:	4618      	mov	r0, r3
 80135e8:	3714      	adds	r7, #20
 80135ea:	46bd      	mov	sp, r7
 80135ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80135f0:	b003      	add	sp, #12
 80135f2:	4770      	bx	lr

080135f4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80135f4:	b40c      	push	{r2, r3}
 80135f6:	b580      	push	{r7, lr}
 80135f8:	b084      	sub	sp, #16
 80135fa:	af00      	add	r7, sp, #0
 80135fc:	6078      	str	r0, [r7, #4]
 80135fe:	460b      	mov	r3, r1
 8013600:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8013602:	f107 031c 	add.w	r3, r7, #28
 8013606:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8013608:	78f9      	ldrb	r1, [r7, #3]
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	69ba      	ldr	r2, [r7, #24]
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	f007 fef4 	bl	801b3fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8013614:	4603      	mov	r3, r0
 8013616:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8013618:	89fb      	ldrh	r3, [r7, #14]
}
 801361a:	4618      	mov	r0, r3
 801361c:	3710      	adds	r7, #16
 801361e:	46bd      	mov	sp, r7
 8013620:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013624:	b002      	add	sp, #8
 8013626:	4770      	bx	lr

08013628 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b08a      	sub	sp, #40	; 0x28
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
 8013630:	460b      	mov	r3, r1
 8013632:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013638:	2b00      	cmp	r3, #0
 801363a:	d016      	beq.n	801366a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	331a      	adds	r3, #26
 8013640:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8013642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013644:	8adb      	ldrh	r3, [r3, #22]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d105      	bne.n	8013656 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 801364a:	4b42      	ldr	r3, [pc, #264]	; (8013754 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 801364c:	4a42      	ldr	r2, [pc, #264]	; (8013758 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 801364e:	21c0      	movs	r1, #192	; 0xc0
 8013650:	4842      	ldr	r0, [pc, #264]	; (801375c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8013652:	f013 fbfb 	bl	8026e4c <__assert_func>
            return buffer[pos];
 8013656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013658:	8a9b      	ldrh	r3, [r3, #20]
 801365a:	461a      	mov	r2, r3
 801365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801365e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d001      	beq.n	801366a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8013666:	2301      	movs	r3, #1
 8013668:	e000      	b.n	801366c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 801366a:	2300      	movs	r3, #0
 801366c:	2b00      	cmp	r3, #0
 801366e:	d068      	beq.n	8013742 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
    {
        substituteGlyphs();
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f009 fa53 	bl	801cb1c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	331a      	adds	r3, #26
 801367a:	623b      	str	r3, [r7, #32]
 801367c:	2301      	movs	r3, #1
 801367e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8013680:	6a3b      	ldr	r3, [r7, #32]
 8013682:	8adb      	ldrh	r3, [r3, #22]
 8013684:	8bfa      	ldrh	r2, [r7, #30]
 8013686:	429a      	cmp	r2, r3
 8013688:	d305      	bcc.n	8013696 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 801368a:	4b35      	ldr	r3, [pc, #212]	; (8013760 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801368c:	4a35      	ldr	r2, [pc, #212]	; (8013764 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 801368e:	21c5      	movs	r1, #197	; 0xc5
 8013690:	4832      	ldr	r0, [pc, #200]	; (801375c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8013692:	f013 fbdb 	bl	8026e4c <__assert_func>
            const uint16_t index = pos + offset;
 8013696:	6a3b      	ldr	r3, [r7, #32]
 8013698:	8a9a      	ldrh	r2, [r3, #20]
 801369a:	8bfb      	ldrh	r3, [r7, #30]
 801369c:	4413      	add	r3, r2
 801369e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80136a0:	8bbb      	ldrh	r3, [r7, #28]
 80136a2:	2b09      	cmp	r3, #9
 80136a4:	d801      	bhi.n	80136aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80136a6:	8bbb      	ldrh	r3, [r7, #28]
 80136a8:	e001      	b.n	80136ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80136aa:	8bbb      	ldrh	r3, [r7, #28]
 80136ac:	3b0a      	subs	r3, #10
 80136ae:	6a3a      	ldr	r2, [r7, #32]
 80136b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80136b4:	f640 123f 	movw	r2, #2367	; 0x93f
 80136b8:	4293      	cmp	r3, r2
 80136ba:	bf0c      	ite	eq
 80136bc:	2301      	moveq	r3, #1
 80136be:	2300      	movne	r3, #0
 80136c0:	b2db      	uxtb	r3, r3
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d03d      	beq.n	8013742 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	331a      	adds	r3, #26
 80136ca:	687a      	ldr	r2, [r7, #4]
 80136cc:	321a      	adds	r2, #26
 80136ce:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80136d0:	68ba      	ldr	r2, [r7, #8]
 80136d2:	8ad2      	ldrh	r2, [r2, #22]
 80136d4:	2a00      	cmp	r2, #0
 80136d6:	d105      	bne.n	80136e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80136d8:	4b1e      	ldr	r3, [pc, #120]	; (8013754 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12c>)
 80136da:	4a1f      	ldr	r2, [pc, #124]	; (8013758 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80136dc:	21c0      	movs	r1, #192	; 0xc0
 80136de:	481f      	ldr	r0, [pc, #124]	; (801375c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80136e0:	f013 fbb4 	bl	8026e4c <__assert_func>
            return buffer[pos];
 80136e4:	68ba      	ldr	r2, [r7, #8]
 80136e6:	8a92      	ldrh	r2, [r2, #20]
 80136e8:	4611      	mov	r1, r2
 80136ea:	68ba      	ldr	r2, [r7, #8]
 80136ec:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80136f0:	613b      	str	r3, [r7, #16]
 80136f2:	4613      	mov	r3, r2
 80136f4:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80136f6:	693b      	ldr	r3, [r7, #16]
 80136f8:	8adb      	ldrh	r3, [r3, #22]
 80136fa:	2b01      	cmp	r3, #1
 80136fc:	d806      	bhi.n	801370c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80136fe:	4b1a      	ldr	r3, [pc, #104]	; (8013768 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8013700:	4a1a      	ldr	r2, [pc, #104]	; (801376c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8013702:	f240 110d 	movw	r1, #269	; 0x10d
 8013706:	4815      	ldr	r0, [pc, #84]	; (801375c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8013708:	f013 fba0 	bl	8026e4c <__assert_func>
            const uint16_t index = pos + 1;
 801370c:	693b      	ldr	r3, [r7, #16]
 801370e:	8a9b      	ldrh	r3, [r3, #20]
 8013710:	3301      	adds	r3, #1
 8013712:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8013714:	89bb      	ldrh	r3, [r7, #12]
 8013716:	2b09      	cmp	r3, #9
 8013718:	d801      	bhi.n	801371e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 801371a:	89bb      	ldrh	r3, [r7, #12]
 801371c:	e000      	b.n	8013720 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 801371e:	2300      	movs	r3, #0
 8013720:	693a      	ldr	r2, [r7, #16]
 8013722:	89f9      	ldrh	r1, [r7, #14]
 8013724:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            nextCharacters.replaceAt0(0x093F);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	331a      	adds	r3, #26
 801372c:	61bb      	str	r3, [r7, #24]
 801372e:	f640 133f 	movw	r3, #2367	; 0x93f
 8013732:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8013734:	69bb      	ldr	r3, [r7, #24]
 8013736:	8a9b      	ldrh	r3, [r3, #20]
 8013738:	4619      	mov	r1, r3
 801373a:	69bb      	ldr	r3, [r7, #24]
 801373c:	8afa      	ldrh	r2, [r7, #22]
 801373e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
    }
    return getNextChar();
 8013742:	6878      	ldr	r0, [r7, #4]
 8013744:	f009 f8ce 	bl	801c8e4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013748:	4603      	mov	r3, r0
}
 801374a:	4618      	mov	r0, r3
 801374c:	3728      	adds	r7, #40	; 0x28
 801374e:	46bd      	mov	sp, r7
 8013750:	bd80      	pop	{r7, pc}
 8013752:	bf00      	nop
 8013754:	08028464 	.word	0x08028464
 8013758:	08029240 	.word	0x08029240
 801375c:	08028470 	.word	0x08028470
 8013760:	080284b8 	.word	0x080284b8
 8013764:	0802916c 	.word	0x0802916c
 8013768:	080284c8 	.word	0x080284c8
 801376c:	080292ec 	.word	0x080292ec

08013770 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f009 f86d 	bl	801c858 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 801377e:	bf00      	nop
 8013780:	3708      	adds	r7, #8
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}

08013786 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8013786:	b580      	push	{r7, lr}
 8013788:	b088      	sub	sp, #32
 801378a:	af02      	add	r7, sp, #8
 801378c:	60f8      	str	r0, [r7, #12]
 801378e:	1d38      	adds	r0, r7, #4
 8013790:	e880 0006 	stmia.w	r0, {r1, r2}
 8013794:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8013796:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801379a:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 801379c:	1d39      	adds	r1, r7, #4
 801379e:	697b      	ldr	r3, [r7, #20]
 80137a0:	9301      	str	r3, [sp, #4]
 80137a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137a4:	9300      	str	r3, [sp, #0]
 80137a6:	6a3b      	ldr	r3, [r7, #32]
 80137a8:	683a      	ldr	r2, [r7, #0]
 80137aa:	68f8      	ldr	r0, [r7, #12]
 80137ac:	f006 fbed 	bl	8019f8a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80137b0:	bf00      	nop
 80137b2:	3718      	adds	r7, #24
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}

080137b8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80137b8:	b590      	push	{r4, r7, lr}
 80137ba:	b085      	sub	sp, #20
 80137bc:	af00      	add	r7, sp, #0
 80137be:	4603      	mov	r3, r0
 80137c0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80137c2:	2300      	movs	r3, #0
 80137c4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80137c6:	88fb      	ldrh	r3, [r7, #6]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d127      	bne.n	801381c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80137cc:	88fb      	ldrh	r3, [r7, #6]
 80137ce:	4a1e      	ldr	r2, [pc, #120]	; (8013848 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80137d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d016      	beq.n	8013806 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80137d8:	88fb      	ldrh	r3, [r7, #6]
 80137da:	4a1b      	ldr	r2, [pc, #108]	; (8013848 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80137dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137e0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	68ba      	ldr	r2, [r7, #8]
 80137e8:	4413      	add	r3, r2
 80137ea:	4a18      	ldr	r2, [pc, #96]	; (801384c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80137ec:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80137ee:	68bb      	ldr	r3, [r7, #8]
 80137f0:	685b      	ldr	r3, [r3, #4]
 80137f2:	68ba      	ldr	r2, [r7, #8]
 80137f4:	4413      	add	r3, r2
 80137f6:	4a16      	ldr	r2, [pc, #88]	; (8013850 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80137f8:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	689b      	ldr	r3, [r3, #8]
 80137fe:	68ba      	ldr	r2, [r7, #8]
 8013800:	4413      	add	r3, r2
 8013802:	60fb      	str	r3, [r7, #12]
 8013804:	e00a      	b.n	801381c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8013806:	4b11      	ldr	r3, [pc, #68]	; (801384c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8013808:	4a12      	ldr	r2, [pc, #72]	; (8013854 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801380a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 801380c:	4a12      	ldr	r2, [pc, #72]	; (8013858 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 801380e:	4b10      	ldr	r3, [pc, #64]	; (8013850 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8013810:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8013812:	88fb      	ldrh	r3, [r7, #6]
 8013814:	4a11      	ldr	r2, [pc, #68]	; (801385c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8013816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801381a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d00d      	beq.n	801383e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8013822:	4a0f      	ldr	r2, [pc, #60]	; (8013860 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8013824:	88fb      	ldrh	r3, [r7, #6]
 8013826:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8013828:	f000 f83e 	bl	80138a8 <_ZN17TypedTextDatabase8getFontsEv>
 801382c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 801382e:	f000 f833 	bl	8013898 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8013832:	4603      	mov	r3, r0
 8013834:	461a      	mov	r2, r3
 8013836:	4621      	mov	r1, r4
 8013838:	68f8      	ldr	r0, [r7, #12]
 801383a:	f7ff fea7 	bl	801358c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801383e:	bf00      	nop
 8013840:	3714      	adds	r7, #20
 8013842:	46bd      	mov	sp, r7
 8013844:	bd90      	pop	{r4, r7, pc}
 8013846:	bf00      	nop
 8013848:	200085b4 	.word	0x200085b4
 801384c:	200085bc 	.word	0x200085bc
 8013850:	200085c0 	.word	0x200085c0
 8013854:	080c0628 	.word	0x080c0628
 8013858:	080c05f0 	.word	0x080c05f0
 801385c:	080c0698 	.word	0x080c0698
 8013860:	200085b8 	.word	0x200085b8

08013864 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8013864:	b480      	push	{r7}
 8013866:	b083      	sub	sp, #12
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
 801386c:	460b      	mov	r3, r1
 801386e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8013870:	4b07      	ldr	r3, [pc, #28]	; (8013890 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8013872:	681a      	ldr	r2, [r3, #0]
 8013874:	4b07      	ldr	r3, [pc, #28]	; (8013894 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8013876:	6819      	ldr	r1, [r3, #0]
 8013878:	887b      	ldrh	r3, [r7, #2]
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	440b      	add	r3, r1
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	005b      	lsls	r3, r3, #1
 8013882:	4413      	add	r3, r2
}
 8013884:	4618      	mov	r0, r3
 8013886:	370c      	adds	r7, #12
 8013888:	46bd      	mov	sp, r7
 801388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388e:	4770      	bx	lr
 8013890:	200085bc 	.word	0x200085bc
 8013894:	200085c0 	.word	0x200085c0

08013898 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8013898:	b480      	push	{r7}
 801389a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 801389c:	230e      	movs	r3, #14
}
 801389e:	4618      	mov	r0, r3
 80138a0:	46bd      	mov	sp, r7
 80138a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a6:	4770      	bx	lr

080138a8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80138a8:	b480      	push	{r7}
 80138aa:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80138ac:	4b02      	ldr	r3, [pc, #8]	; (80138b8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80138ae:	4618      	mov	r0, r3
 80138b0:	46bd      	mov	sp, r7
 80138b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b6:	4770      	bx	lr
 80138b8:	200085c4 	.word	0x200085c4

080138bc <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 80138bc:	b580      	push	{r7, lr}
 80138be:	b082      	sub	sp, #8
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	6039      	str	r1, [r7, #0]
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	2b01      	cmp	r3, #1
 80138ca:	d113      	bne.n	80138f4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138d2:	4293      	cmp	r3, r2
 80138d4:	d10e      	bne.n	80138f4 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 80138d6:	f7fb fdd5 	bl	800f484 <_Z23getFont_verdana_20_4bppv>
 80138da:	4602      	mov	r2, r0
};
 80138dc:	4b07      	ldr	r3, [pc, #28]	; (80138fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80138de:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 80138e0:	f7fb fe12 	bl	800f508 <_Z23getFont_verdana_40_4bppv>
 80138e4:	4602      	mov	r2, r0
};
 80138e6:	4b05      	ldr	r3, [pc, #20]	; (80138fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80138e8:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 80138ea:	f7fb fd89 	bl	800f400 <_Z23getFont_verdana_10_4bppv>
 80138ee:	4602      	mov	r2, r0
};
 80138f0:	4b02      	ldr	r3, [pc, #8]	; (80138fc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80138f2:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 80138f4:	bf00      	nop
 80138f6:	3708      	adds	r7, #8
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}
 80138fc:	200085c4 	.word	0x200085c4

08013900 <_GLOBAL__sub_I_touchgfx_fonts>:
 8013900:	b580      	push	{r7, lr}
 8013902:	af00      	add	r7, sp, #0
 8013904:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013908:	2001      	movs	r0, #1
 801390a:	f7ff ffd7 	bl	80138bc <_Z41__static_initialization_and_destruction_0ii>
 801390e:	bd80      	pop	{r7, pc}

08013910 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8013910:	b580      	push	{r7, lr}
 8013912:	b082      	sub	sp, #8
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	4a05      	ldr	r2, [pc, #20]	; (8013930 <_ZN19FrontendApplicationD1Ev+0x20>)
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	601a      	str	r2, [r3, #0]
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	4618      	mov	r0, r3
 8013922:	f7fc f811 	bl	800f948 <_ZN23FrontendApplicationBaseD1Ev>
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	4618      	mov	r0, r3
 801392a:	3708      	adds	r7, #8
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}
 8013930:	080293a8 	.word	0x080293a8

08013934 <_ZN19FrontendApplicationD0Ev>:
 8013934:	b580      	push	{r7, lr}
 8013936:	b082      	sub	sp, #8
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
 801393c:	6878      	ldr	r0, [r7, #4]
 801393e:	f7ff ffe7 	bl	8013910 <_ZN19FrontendApplicationD1Ev>
 8013942:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8013946:	6878      	ldr	r0, [r7, #4]
 8013948:	f013 fa54 	bl	8026df4 <_ZdlPvj>
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	4618      	mov	r0, r3
 8013950:	3708      	adds	r7, #8
 8013952:	46bd      	mov	sp, r7
 8013954:	bd80      	pop	{r7, pc}

08013956 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8013956:	b580      	push	{r7, lr}
 8013958:	b082      	sub	sp, #8
 801395a:	af00      	add	r7, sp, #0
 801395c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8013964:	4618      	mov	r0, r3
 8013966:	f000 f82d 	bl	80139c4 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	4618      	mov	r0, r3
 801396e:	f007 f96b 	bl	801ac48 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8013972:	bf00      	nop
 8013974:	3708      	adds	r7, #8
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}
	...

0801397c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 801397c:	b580      	push	{r7, lr}
 801397e:	b084      	sub	sp, #16
 8013980:	af00      	add	r7, sp, #0
 8013982:	60f8      	str	r0, [r7, #12]
 8013984:	60b9      	str	r1, [r7, #8]
 8013986:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	687a      	ldr	r2, [r7, #4]
 801398c:	68b9      	ldr	r1, [r7, #8]
 801398e:	4618      	mov	r0, r3
 8013990:	f7fc f81e 	bl	800f9d0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8013994:	4a03      	ldr	r2, [pc, #12]	; (80139a4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	601a      	str	r2, [r3, #0]
{

}
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	4618      	mov	r0, r3
 801399e:	3710      	adds	r7, #16
 80139a0:	46bd      	mov	sp, r7
 80139a2:	bd80      	pop	{r7, pc}
 80139a4:	080293a8 	.word	0x080293a8

080139a8 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80139a8:	b480      	push	{r7}
 80139aa:	b083      	sub	sp, #12
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2200      	movs	r2, #0
 80139b4:	601a      	str	r2, [r3, #0]
{

}
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	4618      	mov	r0, r3
 80139ba:	370c      	adds	r7, #12
 80139bc:	46bd      	mov	sp, r7
 80139be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c2:	4770      	bx	lr

080139c4 <_ZN5Model4tickEv>:

void Model::tick()
{
 80139c4:	b480      	push	{r7}
 80139c6:	b083      	sub	sp, #12
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]

}
 80139cc:	bf00      	nop
 80139ce:	370c      	adds	r7, #12
 80139d0:	46bd      	mov	sp, r7
 80139d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d6:	4770      	bx	lr

080139d8 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80139d8:	b480      	push	{r7}
 80139da:	b083      	sub	sp, #12
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
    {
    }
 80139e0:	bf00      	nop
 80139e2:	370c      	adds	r7, #12
 80139e4:	46bd      	mov	sp, r7
 80139e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ea:	4770      	bx	lr

080139ec <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80139ec:	b480      	push	{r7}
 80139ee:	b083      	sub	sp, #12
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
    {
    }
 80139f4:	bf00      	nop
 80139f6:	370c      	adds	r7, #12
 80139f8:	46bd      	mov	sp, r7
 80139fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fe:	4770      	bx	lr

08013a00 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8013a00:	b480      	push	{r7}
 8013a02:	b083      	sub	sp, #12
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
    {
 8013a08:	4a04      	ldr	r2, [pc, #16]	; (8013a1c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	601a      	str	r2, [r3, #0]
    }
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	4618      	mov	r0, r3
 8013a12:	370c      	adds	r7, #12
 8013a14:	46bd      	mov	sp, r7
 8013a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1a:	4770      	bx	lr
 8013a1c:	08029424 	.word	0x08029424

08013a20 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b082      	sub	sp, #8
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
    }
 8013a28:	6878      	ldr	r0, [r7, #4]
 8013a2a:	f7ff ffe9 	bl	8013a00 <_ZN8touchgfx9PresenterD1Ev>
 8013a2e:	2104      	movs	r1, #4
 8013a30:	6878      	ldr	r0, [r7, #4]
 8013a32:	f013 f9df 	bl	8026df4 <_ZdlPvj>
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	4618      	mov	r0, r3
 8013a3a:	3708      	adds	r7, #8
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}

08013a40 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8013a40:	b480      	push	{r7}
 8013a42:	b083      	sub	sp, #12
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
    {
 8013a48:	4a04      	ldr	r2, [pc, #16]	; (8013a5c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	601a      	str	r2, [r3, #0]
    }
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	4618      	mov	r0, r3
 8013a52:	370c      	adds	r7, #12
 8013a54:	46bd      	mov	sp, r7
 8013a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5a:	4770      	bx	lr
 8013a5c:	08029424 	.word	0x08029424

08013a60 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8013a60:	b480      	push	{r7}
 8013a62:	b083      	sub	sp, #12
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
 8013a68:	4a06      	ldr	r2, [pc, #24]	; (8013a84 <_ZN13ModelListenerC1Ev+0x24>)
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	601a      	str	r2, [r3, #0]
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	2200      	movs	r2, #0
 8013a72:	605a      	str	r2, [r3, #4]
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	4618      	mov	r0, r3
 8013a78:	370c      	adds	r7, #12
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a80:	4770      	bx	lr
 8013a82:	bf00      	nop
 8013a84:	08029414 	.word	0x08029414

08013a88 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8013a88:	b480      	push	{r7}
 8013a8a:	b083      	sub	sp, #12
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
 8013a90:	4a04      	ldr	r2, [pc, #16]	; (8013aa4 <_ZN13ModelListenerD1Ev+0x1c>)
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	601a      	str	r2, [r3, #0]
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	4618      	mov	r0, r3
 8013a9a:	370c      	adds	r7, #12
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa2:	4770      	bx	lr
 8013aa4:	08029414 	.word	0x08029414

08013aa8 <_ZN13ModelListenerD0Ev>:
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b082      	sub	sp, #8
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
 8013ab0:	6878      	ldr	r0, [r7, #4]
 8013ab2:	f7ff ffe9 	bl	8013a88 <_ZN13ModelListenerD1Ev>
 8013ab6:	2108      	movs	r1, #8
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f013 f99b 	bl	8026df4 <_ZdlPvj>
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	3708      	adds	r7, #8
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}

08013ac8 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b082      	sub	sp, #8
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	4a09      	ldr	r2, [pc, #36]	; (8013af8 <_ZN16Screen1PresenterD1Ev+0x30>)
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	601a      	str	r2, [r3, #0]
 8013ad6:	4a09      	ldr	r2, [pc, #36]	; (8013afc <_ZN16Screen1PresenterD1Ev+0x34>)
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	605a      	str	r2, [r3, #4]
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	3304      	adds	r3, #4
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7ff ffd1 	bl	8013a88 <_ZN13ModelListenerD1Ev>
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f7ff ff89 	bl	8013a00 <_ZN8touchgfx9PresenterD1Ev>
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	4618      	mov	r0, r3
 8013af2:	3708      	adds	r7, #8
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}
 8013af8:	080293ec 	.word	0x080293ec
 8013afc:	08029404 	.word	0x08029404

08013b00 <_ZThn4_N16Screen1PresenterD1Ev>:
 8013b00:	f1a0 0004 	sub.w	r0, r0, #4
 8013b04:	e7e0      	b.n	8013ac8 <_ZN16Screen1PresenterD1Ev>
 8013b06:	bf00      	nop

08013b08 <_ZN16Screen1PresenterD0Ev>:
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b082      	sub	sp, #8
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f7ff ffd9 	bl	8013ac8 <_ZN16Screen1PresenterD1Ev>
 8013b16:	2110      	movs	r1, #16
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f013 f96b 	bl	8026df4 <_ZdlPvj>
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	4618      	mov	r0, r3
 8013b22:	3708      	adds	r7, #8
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}

08013b28 <_ZThn4_N16Screen1PresenterD0Ev>:
 8013b28:	f1a0 0004 	sub.w	r0, r0, #4
 8013b2c:	e7ec      	b.n	8013b08 <_ZN16Screen1PresenterD0Ev>
	...

08013b30 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b082      	sub	sp, #8
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
 8013b38:	6039      	str	r1, [r7, #0]
    : view(v)
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7ff ff7f 	bl	8013a40 <_ZN8touchgfx9PresenterC1Ev>
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	3304      	adds	r3, #4
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7ff ff8a 	bl	8013a60 <_ZN13ModelListenerC1Ev>
 8013b4c:	4a06      	ldr	r2, [pc, #24]	; (8013b68 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	601a      	str	r2, [r3, #0]
 8013b52:	4a06      	ldr	r2, [pc, #24]	; (8013b6c <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	605a      	str	r2, [r3, #4]
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	683a      	ldr	r2, [r7, #0]
 8013b5c:	60da      	str	r2, [r3, #12]
{

}
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	4618      	mov	r0, r3
 8013b62:	3708      	adds	r7, #8
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd80      	pop	{r7, pc}
 8013b68:	080293ec 	.word	0x080293ec
 8013b6c:	08029404 	.word	0x08029404

08013b70 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8013b70:	b480      	push	{r7}
 8013b72:	b083      	sub	sp, #12
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]

}
 8013b78:	bf00      	nop
 8013b7a:	370c      	adds	r7, #12
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b82:	4770      	bx	lr

08013b84 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8013b84:	b480      	push	{r7}
 8013b86:	b083      	sub	sp, #12
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]

}
 8013b8c:	bf00      	nop
 8013b8e:	370c      	adds	r7, #12
 8013b90:	46bd      	mov	sp, r7
 8013b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b96:	4770      	bx	lr

08013b98 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b082      	sub	sp, #8
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
 8013ba0:	4a05      	ldr	r2, [pc, #20]	; (8013bb8 <_ZN11Screen1ViewD1Ev+0x20>)
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	601a      	str	r2, [r3, #0]
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7fd fa3d 	bl	8011028 <_ZN15Screen1ViewBaseD1Ev>
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	3708      	adds	r7, #8
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd80      	pop	{r7, pc}
 8013bb8:	0802943c 	.word	0x0802943c

08013bbc <_ZN11Screen1ViewD0Ev>:
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b082      	sub	sp, #8
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f7ff ffe7 	bl	8013b98 <_ZN11Screen1ViewD1Ev>
 8013bca:	21c4      	movs	r1, #196	; 0xc4
 8013bcc:	6878      	ldr	r0, [r7, #4]
 8013bce:	f013 f911 	bl	8026df4 <_ZdlPvj>
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	3708      	adds	r7, #8
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}

08013bdc <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b082      	sub	sp, #8
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7fd fa86 	bl	80110f8 <_ZN15Screen1ViewBaseC1Ev>
 8013bec:	4a03      	ldr	r2, [pc, #12]	; (8013bfc <_ZN11Screen1ViewC1Ev+0x20>)
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	601a      	str	r2, [r3, #0]
{

}
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	3708      	adds	r7, #8
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd80      	pop	{r7, pc}
 8013bfc:	0802943c 	.word	0x0802943c

08013c00 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b082      	sub	sp, #8
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7fd fb24 	bl	8011258 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8013c10:	bf00      	nop
 8013c12:	3708      	adds	r7, #8
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}

08013c18 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7fd f84c 	bl	8010cc0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013c28:	bf00      	nop
 8013c2a:	3708      	adds	r7, #8
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd80      	pop	{r7, pc}

08013c30 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b082      	sub	sp, #8
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	4a09      	ldr	r2, [pc, #36]	; (8013c60 <_ZN16Screen2PresenterD1Ev+0x30>)
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	601a      	str	r2, [r3, #0]
 8013c3e:	4a09      	ldr	r2, [pc, #36]	; (8013c64 <_ZN16Screen2PresenterD1Ev+0x34>)
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	605a      	str	r2, [r3, #4]
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	3304      	adds	r3, #4
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f7ff ff1d 	bl	8013a88 <_ZN13ModelListenerD1Ev>
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7ff fed5 	bl	8013a00 <_ZN8touchgfx9PresenterD1Ev>
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	4618      	mov	r0, r3
 8013c5a:	3708      	adds	r7, #8
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}
 8013c60:	08029470 	.word	0x08029470
 8013c64:	08029488 	.word	0x08029488

08013c68 <_ZThn4_N16Screen2PresenterD1Ev>:
 8013c68:	f1a0 0004 	sub.w	r0, r0, #4
 8013c6c:	e7e0      	b.n	8013c30 <_ZN16Screen2PresenterD1Ev>
 8013c6e:	bf00      	nop

08013c70 <_ZN16Screen2PresenterD0Ev>:
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b082      	sub	sp, #8
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	6878      	ldr	r0, [r7, #4]
 8013c7a:	f7ff ffd9 	bl	8013c30 <_ZN16Screen2PresenterD1Ev>
 8013c7e:	2110      	movs	r1, #16
 8013c80:	6878      	ldr	r0, [r7, #4]
 8013c82:	f013 f8b7 	bl	8026df4 <_ZdlPvj>
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	4618      	mov	r0, r3
 8013c8a:	3708      	adds	r7, #8
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}

08013c90 <_ZThn4_N16Screen2PresenterD0Ev>:
 8013c90:	f1a0 0004 	sub.w	r0, r0, #4
 8013c94:	e7ec      	b.n	8013c70 <_ZN16Screen2PresenterD0Ev>
	...

08013c98 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b082      	sub	sp, #8
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
 8013ca0:	6039      	str	r1, [r7, #0]
    : view(v)
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f7ff fecb 	bl	8013a40 <_ZN8touchgfx9PresenterC1Ev>
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	3304      	adds	r3, #4
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f7ff fed6 	bl	8013a60 <_ZN13ModelListenerC1Ev>
 8013cb4:	4a06      	ldr	r2, [pc, #24]	; (8013cd0 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	601a      	str	r2, [r3, #0]
 8013cba:	4a06      	ldr	r2, [pc, #24]	; (8013cd4 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	605a      	str	r2, [r3, #4]
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	683a      	ldr	r2, [r7, #0]
 8013cc4:	60da      	str	r2, [r3, #12]
{

}
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	4618      	mov	r0, r3
 8013cca:	3708      	adds	r7, #8
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}
 8013cd0:	08029470 	.word	0x08029470
 8013cd4:	08029488 	.word	0x08029488

08013cd8 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 8013cd8:	b480      	push	{r7}
 8013cda:	b083      	sub	sp, #12
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]

}
 8013ce0:	bf00      	nop
 8013ce2:	370c      	adds	r7, #12
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cea:	4770      	bx	lr

08013cec <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 8013cec:	b480      	push	{r7}
 8013cee:	b083      	sub	sp, #12
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]

}
 8013cf4:	bf00      	nop
 8013cf6:	370c      	adds	r7, #12
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfe:	4770      	bx	lr

08013d00 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b082      	sub	sp, #8
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
 8013d08:	4a05      	ldr	r2, [pc, #20]	; (8013d20 <_ZN11Screen2ViewD1Ev+0x20>)
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	601a      	str	r2, [r3, #0]
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	4618      	mov	r0, r3
 8013d12:	f7fd fec5 	bl	8011aa0 <_ZN15Screen2ViewBaseD1Ev>
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	4618      	mov	r0, r3
 8013d1a:	3708      	adds	r7, #8
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}
 8013d20:	08029498 	.word	0x08029498

08013d24 <_ZN11Screen2ViewD0Ev>:
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b082      	sub	sp, #8
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
 8013d2c:	6878      	ldr	r0, [r7, #4]
 8013d2e:	f7ff ffe7 	bl	8013d00 <_ZN11Screen2ViewD1Ev>
 8013d32:	f641 7148 	movw	r1, #8008	; 0x1f48
 8013d36:	6878      	ldr	r0, [r7, #4]
 8013d38:	f013 f85c 	bl	8026df4 <_ZdlPvj>
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	4618      	mov	r0, r3
 8013d40:	3708      	adds	r7, #8
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bd80      	pop	{r7, pc}
	...

08013d48 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b082      	sub	sp, #8
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	4618      	mov	r0, r3
 8013d54:	f7fd ff92 	bl	8011c7c <_ZN15Screen2ViewBaseC1Ev>
 8013d58:	4a03      	ldr	r2, [pc, #12]	; (8013d68 <_ZN11Screen2ViewC1Ev+0x20>)
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	601a      	str	r2, [r3, #0]
{

}
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	4618      	mov	r0, r3
 8013d62:	3708      	adds	r7, #8
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bd80      	pop	{r7, pc}
 8013d68:	08029498 	.word	0x08029498

08013d6c <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b082      	sub	sp, #8
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7fe f9c2 	bl	8012100 <_ZN15Screen2ViewBase11setupScreenEv>
}
 8013d7c:	bf00      	nop
 8013d7e:	3708      	adds	r7, #8
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}

08013d84 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b082      	sub	sp, #8
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7fc ff96 	bl	8010cc0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013d94:	bf00      	nop
 8013d96:	3708      	adds	r7, #8
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}

08013d9c <_ZN16Screen3PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen3Presenter() {};
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b082      	sub	sp, #8
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
 8013da4:	4a09      	ldr	r2, [pc, #36]	; (8013dcc <_ZN16Screen3PresenterD1Ev+0x30>)
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	601a      	str	r2, [r3, #0]
 8013daa:	4a09      	ldr	r2, [pc, #36]	; (8013dd0 <_ZN16Screen3PresenterD1Ev+0x34>)
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	605a      	str	r2, [r3, #4]
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	3304      	adds	r3, #4
 8013db4:	4618      	mov	r0, r3
 8013db6:	f7ff fe67 	bl	8013a88 <_ZN13ModelListenerD1Ev>
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f7ff fe1f 	bl	8013a00 <_ZN8touchgfx9PresenterD1Ev>
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3708      	adds	r7, #8
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}
 8013dcc:	080294cc 	.word	0x080294cc
 8013dd0:	080294e4 	.word	0x080294e4

08013dd4 <_ZThn4_N16Screen3PresenterD1Ev>:
 8013dd4:	f1a0 0004 	sub.w	r0, r0, #4
 8013dd8:	e7e0      	b.n	8013d9c <_ZN16Screen3PresenterD1Ev>
 8013dda:	bf00      	nop

08013ddc <_ZN16Screen3PresenterD0Ev>:
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b082      	sub	sp, #8
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
 8013de4:	6878      	ldr	r0, [r7, #4]
 8013de6:	f7ff ffd9 	bl	8013d9c <_ZN16Screen3PresenterD1Ev>
 8013dea:	2110      	movs	r1, #16
 8013dec:	6878      	ldr	r0, [r7, #4]
 8013dee:	f013 f801 	bl	8026df4 <_ZdlPvj>
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	4618      	mov	r0, r3
 8013df6:	3708      	adds	r7, #8
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	bd80      	pop	{r7, pc}

08013dfc <_ZThn4_N16Screen3PresenterD0Ev>:
 8013dfc:	f1a0 0004 	sub.w	r0, r0, #4
 8013e00:	e7ec      	b.n	8013ddc <_ZN16Screen3PresenterD0Ev>
	...

08013e04 <_ZN16Screen3PresenterC1ER11Screen3View>:
#include <gui/screen3_screen/Screen3View.hpp>
#include <gui/screen3_screen/Screen3Presenter.hpp>

Screen3Presenter::Screen3Presenter(Screen3View& v)
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b082      	sub	sp, #8
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
 8013e0c:	6039      	str	r1, [r7, #0]
    : view(v)
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	4618      	mov	r0, r3
 8013e12:	f7ff fe15 	bl	8013a40 <_ZN8touchgfx9PresenterC1Ev>
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	3304      	adds	r3, #4
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f7ff fe20 	bl	8013a60 <_ZN13ModelListenerC1Ev>
 8013e20:	4a06      	ldr	r2, [pc, #24]	; (8013e3c <_ZN16Screen3PresenterC1ER11Screen3View+0x38>)
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	601a      	str	r2, [r3, #0]
 8013e26:	4a06      	ldr	r2, [pc, #24]	; (8013e40 <_ZN16Screen3PresenterC1ER11Screen3View+0x3c>)
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	605a      	str	r2, [r3, #4]
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	683a      	ldr	r2, [r7, #0]
 8013e30:	60da      	str	r2, [r3, #12]
{

}
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	4618      	mov	r0, r3
 8013e36:	3708      	adds	r7, #8
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	bd80      	pop	{r7, pc}
 8013e3c:	080294cc 	.word	0x080294cc
 8013e40:	080294e4 	.word	0x080294e4

08013e44 <_ZN16Screen3Presenter8activateEv>:

void Screen3Presenter::activate()
{
 8013e44:	b480      	push	{r7}
 8013e46:	b083      	sub	sp, #12
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]

}
 8013e4c:	bf00      	nop
 8013e4e:	370c      	adds	r7, #12
 8013e50:	46bd      	mov	sp, r7
 8013e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e56:	4770      	bx	lr

08013e58 <_ZN16Screen3Presenter10deactivateEv>:

void Screen3Presenter::deactivate()
{
 8013e58:	b480      	push	{r7}
 8013e5a:	b083      	sub	sp, #12
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]

}
 8013e60:	bf00      	nop
 8013e62:	370c      	adds	r7, #12
 8013e64:	46bd      	mov	sp, r7
 8013e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6a:	4770      	bx	lr

08013e6c <_ZN11Screen3ViewD1Ev>:

class Screen3View : public Screen3ViewBase
{
public:
    Screen3View();
    virtual ~Screen3View() {}
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b082      	sub	sp, #8
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
 8013e74:	4a05      	ldr	r2, [pc, #20]	; (8013e8c <_ZN11Screen3ViewD1Ev+0x20>)
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	601a      	str	r2, [r3, #0]
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	f7fe fde3 	bl	8012a48 <_ZN15Screen3ViewBaseD1Ev>
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	4618      	mov	r0, r3
 8013e86:	3708      	adds	r7, #8
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bd80      	pop	{r7, pc}
 8013e8c:	080294f4 	.word	0x080294f4

08013e90 <_ZN11Screen3ViewD0Ev>:
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b082      	sub	sp, #8
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
 8013e98:	6878      	ldr	r0, [r7, #4]
 8013e9a:	f7ff ffe7 	bl	8013e6c <_ZN11Screen3ViewD1Ev>
 8013e9e:	f44f 7106 	mov.w	r1, #536	; 0x218
 8013ea2:	6878      	ldr	r0, [r7, #4]
 8013ea4:	f012 ffa6 	bl	8026df4 <_ZdlPvj>
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	4618      	mov	r0, r3
 8013eac:	3708      	adds	r7, #8
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}
	...

08013eb4 <_ZN11Screen3ViewC1Ev>:
#include <gui/screen3_screen/Screen3View.hpp>

Screen3View::Screen3View()
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b082      	sub	sp, #8
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7fe fe16 	bl	8012af0 <_ZN15Screen3ViewBaseC1Ev>
 8013ec4:	4a03      	ldr	r2, [pc, #12]	; (8013ed4 <_ZN11Screen3ViewC1Ev+0x20>)
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	601a      	str	r2, [r3, #0]
{

}
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3708      	adds	r7, #8
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}
 8013ed4:	080294f4 	.word	0x080294f4

08013ed8 <_ZN11Screen3View11setupScreenEv>:

void Screen3View::setupScreen()
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b082      	sub	sp, #8
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
    Screen3ViewBase::setupScreen();
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f7fe ff6a 	bl	8012dbc <_ZN15Screen3ViewBase11setupScreenEv>
}
 8013ee8:	bf00      	nop
 8013eea:	3708      	adds	r7, #8
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}

08013ef0 <_ZN11Screen3View14tearDownScreenEv>:

void Screen3View::tearDownScreen()
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b082      	sub	sp, #8
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
    Screen3ViewBase::tearDownScreen();
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	4618      	mov	r0, r3
 8013efc:	f7fc fee0 	bl	8010cc0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013f00:	bf00      	nop
 8013f02:	3708      	adds	r7, #8
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}

08013f08 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b082      	sub	sp, #8
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
 8013f10:	4a09      	ldr	r2, [pc, #36]	; (8013f38 <_ZN15screenPresenterD1Ev+0x30>)
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	601a      	str	r2, [r3, #0]
 8013f16:	4a09      	ldr	r2, [pc, #36]	; (8013f3c <_ZN15screenPresenterD1Ev+0x34>)
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	605a      	str	r2, [r3, #4]
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	3304      	adds	r3, #4
 8013f20:	4618      	mov	r0, r3
 8013f22:	f7ff fdb1 	bl	8013a88 <_ZN13ModelListenerD1Ev>
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7ff fd69 	bl	8013a00 <_ZN8touchgfx9PresenterD1Ev>
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	4618      	mov	r0, r3
 8013f32:	3708      	adds	r7, #8
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}
 8013f38:	08029528 	.word	0x08029528
 8013f3c:	08029540 	.word	0x08029540

08013f40 <_ZThn4_N15screenPresenterD1Ev>:
 8013f40:	f1a0 0004 	sub.w	r0, r0, #4
 8013f44:	e7e0      	b.n	8013f08 <_ZN15screenPresenterD1Ev>
 8013f46:	bf00      	nop

08013f48 <_ZN15screenPresenterD0Ev>:
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b082      	sub	sp, #8
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
 8013f50:	6878      	ldr	r0, [r7, #4]
 8013f52:	f7ff ffd9 	bl	8013f08 <_ZN15screenPresenterD1Ev>
 8013f56:	2110      	movs	r1, #16
 8013f58:	6878      	ldr	r0, [r7, #4]
 8013f5a:	f012 ff4b 	bl	8026df4 <_ZdlPvj>
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	4618      	mov	r0, r3
 8013f62:	3708      	adds	r7, #8
 8013f64:	46bd      	mov	sp, r7
 8013f66:	bd80      	pop	{r7, pc}

08013f68 <_ZThn4_N15screenPresenterD0Ev>:
 8013f68:	f1a0 0004 	sub.w	r0, r0, #4
 8013f6c:	e7ec      	b.n	8013f48 <_ZN15screenPresenterD0Ev>
	...

08013f70 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b082      	sub	sp, #8
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
 8013f78:	6039      	str	r1, [r7, #0]
    : view(v)
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7ff fd5f 	bl	8013a40 <_ZN8touchgfx9PresenterC1Ev>
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	3304      	adds	r3, #4
 8013f86:	4618      	mov	r0, r3
 8013f88:	f7ff fd6a 	bl	8013a60 <_ZN13ModelListenerC1Ev>
 8013f8c:	4a06      	ldr	r2, [pc, #24]	; (8013fa8 <_ZN15screenPresenterC1ER10screenView+0x38>)
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	601a      	str	r2, [r3, #0]
 8013f92:	4a06      	ldr	r2, [pc, #24]	; (8013fac <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	605a      	str	r2, [r3, #4]
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	683a      	ldr	r2, [r7, #0]
 8013f9c:	60da      	str	r2, [r3, #12]
{

}
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	3708      	adds	r7, #8
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	bd80      	pop	{r7, pc}
 8013fa8:	08029528 	.word	0x08029528
 8013fac:	08029540 	.word	0x08029540

08013fb0 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8013fb0:	b480      	push	{r7}
 8013fb2:	b083      	sub	sp, #12
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]

}
 8013fb8:	bf00      	nop
 8013fba:	370c      	adds	r7, #12
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc2:	4770      	bx	lr

08013fc4 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8013fc4:	b480      	push	{r7}
 8013fc6:	b083      	sub	sp, #12
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]

}
 8013fcc:	bf00      	nop
 8013fce:	370c      	adds	r7, #12
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd6:	4770      	bx	lr

08013fd8 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b082      	sub	sp, #8
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
 8013fe0:	4a05      	ldr	r2, [pc, #20]	; (8013ff8 <_ZN10screenViewD1Ev+0x20>)
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	601a      	str	r2, [r3, #0]
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f7ff f811 	bl	8013010 <_ZN14screenViewBaseD1Ev>
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	3708      	adds	r7, #8
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}
 8013ff8:	08029550 	.word	0x08029550

08013ffc <_ZN10screenViewD0Ev>:
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b082      	sub	sp, #8
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	f7ff ffe7 	bl	8013fd8 <_ZN10screenViewD1Ev>
 801400a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801400e:	6878      	ldr	r0, [r7, #4]
 8014010:	f012 fef0 	bl	8026df4 <_ZdlPvj>
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	4618      	mov	r0, r3
 8014018:	3708      	adds	r7, #8
 801401a:	46bd      	mov	sp, r7
 801401c:	bd80      	pop	{r7, pc}
	...

08014020 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 8014020:	b580      	push	{r7, lr}
 8014022:	b082      	sub	sp, #8
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	4618      	mov	r0, r3
 801402c:	f7ff f83a 	bl	80130a4 <_ZN14screenViewBaseC1Ev>
 8014030:	4a03      	ldr	r2, [pc, #12]	; (8014040 <_ZN10screenViewC1Ev+0x20>)
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	601a      	str	r2, [r3, #0]
{

}
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	4618      	mov	r0, r3
 801403a:	3708      	adds	r7, #8
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}
 8014040:	08029550 	.word	0x08029550

08014044 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b082      	sub	sp, #8
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	4618      	mov	r0, r3
 8014050:	f7ff f998 	bl	8013384 <_ZN14screenViewBase11setupScreenEv>
}
 8014054:	bf00      	nop
 8014056:	3708      	adds	r7, #8
 8014058:	46bd      	mov	sp, r7
 801405a:	bd80      	pop	{r7, pc}

0801405c <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b082      	sub	sp, #8
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	4618      	mov	r0, r3
 8014068:	f7fc fe2a 	bl	8010cc0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801406c:	bf00      	nop
 801406e:	3708      	adds	r7, #8
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}

08014074 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8014074:	b480      	push	{r7}
 8014076:	b083      	sub	sp, #12
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
    {
 801407c:	4a04      	ldr	r2, [pc, #16]	; (8014090 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	601a      	str	r2, [r3, #0]
    }
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	4618      	mov	r0, r3
 8014086:	370c      	adds	r7, #12
 8014088:	46bd      	mov	sp, r7
 801408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408e:	4770      	bx	lr
 8014090:	0802959c 	.word	0x0802959c

08014094 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8014094:	b580      	push	{r7, lr}
 8014096:	b082      	sub	sp, #8
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
    }
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	f7ff ffe9 	bl	8014074 <_ZN8touchgfx15TouchControllerD1Ev>
 80140a2:	2104      	movs	r1, #4
 80140a4:	6878      	ldr	r0, [r7, #4]
 80140a6:	f012 fea5 	bl	8026df4 <_ZdlPvj>
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	4618      	mov	r0, r3
 80140ae:	3708      	adds	r7, #8
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}

080140b4 <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b082      	sub	sp, #8
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	tsDriver = &ft5336_ts_drv;
 80140bc:	4b05      	ldr	r3, [pc, #20]	; (80140d4 <_ZN20STM32TouchController4initEv+0x20>)
 80140be:	4a06      	ldr	r2, [pc, #24]	; (80140d8 <_ZN20STM32TouchController4initEv+0x24>)
 80140c0:	601a      	str	r2, [r3, #0]
	tsDriver->Start(TS_I2C_ADDRESS);
 80140c2:	4b04      	ldr	r3, [pc, #16]	; (80140d4 <_ZN20STM32TouchController4initEv+0x20>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	68db      	ldr	r3, [r3, #12]
 80140c8:	2070      	movs	r0, #112	; 0x70
 80140ca:	4798      	blx	r3

}
 80140cc:	bf00      	nop
 80140ce:	3708      	adds	r7, #8
 80140d0:	46bd      	mov	sp, r7
 80140d2:	bd80      	pop	{r7, pc}
 80140d4:	200085d0 	.word	0x200085d0
 80140d8:	20000004 	.word	0x20000004

080140dc <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b084      	sub	sp, #16
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	60f8      	str	r0, [r7, #12]
 80140e4:	60b9      	str	r1, [r7, #8]
 80140e6:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	if (tsDriver)
 80140e8:	4b0f      	ldr	r3, [pc, #60]	; (8014128 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d015      	beq.n	801411c <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	    {
	        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 80140f0:	4b0d      	ldr	r3, [pc, #52]	; (8014128 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	691b      	ldr	r3, [r3, #16]
 80140f6:	2070      	movs	r0, #112	; 0x70
 80140f8:	4798      	blx	r3
 80140fa:	4603      	mov	r3, r0
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	bf14      	ite	ne
 8014100:	2301      	movne	r3, #1
 8014102:	2300      	moveq	r3, #0
 8014104:	b2db      	uxtb	r3, r3
 8014106:	2b00      	cmp	r3, #0
 8014108:	d008      	beq.n	801411c <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	        {
	            /* Get each touch coordinates */
	            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 801410a:	4b07      	ldr	r3, [pc, #28]	; (8014128 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	695b      	ldr	r3, [r3, #20]
 8014110:	68ba      	ldr	r2, [r7, #8]
 8014112:	6879      	ldr	r1, [r7, #4]
 8014114:	2070      	movs	r0, #112	; 0x70
 8014116:	4798      	blx	r3
	            return true;
 8014118:	2301      	movs	r3, #1
 801411a:	e000      	b.n	801411e <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
	        }
	    }


    return false;
 801411c:	2300      	movs	r3, #0
}
 801411e:	4618      	mov	r0, r3
 8014120:	3710      	adds	r7, #16
 8014122:	46bd      	mov	sp, r7
 8014124:	bd80      	pop	{r7, pc}
 8014126:	bf00      	nop
 8014128:	200085d0 	.word	0x200085d0

0801412c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
 8014134:	4a05      	ldr	r2, [pc, #20]	; (801414c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	601a      	str	r2, [r3, #0]
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	4618      	mov	r0, r3
 801413e:	f7ff ff99 	bl	8014074 <_ZN8touchgfx15TouchControllerD1Ev>
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	4618      	mov	r0, r3
 8014146:	3708      	adds	r7, #8
 8014148:	46bd      	mov	sp, r7
 801414a:	bd80      	pop	{r7, pc}
 801414c:	08029584 	.word	0x08029584

08014150 <_ZN20STM32TouchControllerD0Ev>:
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	6878      	ldr	r0, [r7, #4]
 801415a:	f7ff ffe7 	bl	801412c <_ZN20STM32TouchControllerD1Ev>
 801415e:	2104      	movs	r1, #4
 8014160:	6878      	ldr	r0, [r7, #4]
 8014162:	f012 fe47 	bl	8026df4 <_ZdlPvj>
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	4618      	mov	r0, r3
 801416a:	3708      	adds	r7, #8
 801416c:	46bd      	mov	sp, r7
 801416e:	bd80      	pop	{r7, pc}

08014170 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8014170:	b480      	push	{r7}
 8014172:	b083      	sub	sp, #12
 8014174:	af00      	add	r7, sp, #0
 8014176:	4603      	mov	r3, r0
 8014178:	71fb      	strb	r3, [r7, #7]

}
 801417a:	bf00      	nop
 801417c:	370c      	adds	r7, #12
 801417e:	46bd      	mov	sp, r7
 8014180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014184:	4770      	bx	lr

08014186 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8014186:	b480      	push	{r7}
 8014188:	b083      	sub	sp, #12
 801418a:	af00      	add	r7, sp, #0
 801418c:	4603      	mov	r3, r0
 801418e:	71fb      	strb	r3, [r7, #7]

}
 8014190:	bf00      	nop
 8014192:	370c      	adds	r7, #12
 8014194:	46bd      	mov	sp, r7
 8014196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419a:	4770      	bx	lr

0801419c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 801419c:	b480      	push	{r7}
 801419e:	b083      	sub	sp, #12
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	4603      	mov	r3, r0
 80141a4:	71fb      	strb	r3, [r7, #7]

}
 80141a6:	bf00      	nop
 80141a8:	370c      	adds	r7, #12
 80141aa:	46bd      	mov	sp, r7
 80141ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b0:	4770      	bx	lr
	...

080141b4 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80141b4:	b480      	push	{r7}
 80141b6:	b083      	sub	sp, #12
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
    {
 80141bc:	4a04      	ldr	r2, [pc, #16]	; (80141d0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	601a      	str	r2, [r3, #0]
    }
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	4618      	mov	r0, r3
 80141c6:	370c      	adds	r7, #12
 80141c8:	46bd      	mov	sp, r7
 80141ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ce:	4770      	bx	lr
 80141d0:	0802a308 	.word	0x0802a308

080141d4 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b082      	sub	sp, #8
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
    }
 80141dc:	6878      	ldr	r0, [r7, #4]
 80141de:	f7ff ffe9 	bl	80141b4 <_ZN8touchgfx3HALD1Ev>
 80141e2:	2178      	movs	r1, #120	; 0x78
 80141e4:	6878      	ldr	r0, [r7, #4]
 80141e6:	f012 fe05 	bl	8026df4 <_ZdlPvj>
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	4618      	mov	r0, r3
 80141ee:	3708      	adds	r7, #8
 80141f0:	46bd      	mov	sp, r7
 80141f2:	bd80      	pop	{r7, pc}

080141f4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80141f4:	b480      	push	{r7}
 80141f6:	b083      	sub	sp, #12
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
 80141fc:	460b      	mov	r3, r1
 80141fe:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	78fa      	ldrb	r2, [r7, #3]
 8014204:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2201      	movs	r2, #1
 801420c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8014210:	bf00      	nop
 8014212:	370c      	adds	r7, #12
 8014214:	46bd      	mov	sp, r7
 8014216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421a:	4770      	bx	lr

0801421c <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 801421c:	b580      	push	{r7, lr}
 801421e:	b082      	sub	sp, #8
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	685a      	ldr	r2, [r3, #4]
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	685b      	ldr	r3, [r3, #4]
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	4610      	mov	r0, r2
 8014232:	4798      	blx	r3
 8014234:	4603      	mov	r3, r0
    }
 8014236:	4618      	mov	r0, r3
 8014238:	3708      	adds	r7, #8
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}

0801423e <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 801423e:	b580      	push	{r7, lr}
 8014240:	b082      	sub	sp, #8
 8014242:	af00      	add	r7, sp, #0
 8014244:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8014246:	6878      	ldr	r0, [r7, #4]
 8014248:	f003 f866 	bl	8017318 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	3390      	adds	r3, #144	; 0x90
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	6878      	ldr	r0, [r7, #4]
 8014256:	4798      	blx	r3
    }
 8014258:	bf00      	nop
 801425a:	3708      	adds	r7, #8
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}

08014260 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8014260:	b480      	push	{r7}
 8014262:	b083      	sub	sp, #12
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
 8014268:	6039      	str	r1, [r7, #0]
        return false;
 801426a:	2300      	movs	r3, #0
    }
 801426c:	4618      	mov	r0, r3
 801426e:	370c      	adds	r7, #12
 8014270:	46bd      	mov	sp, r7
 8014272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014276:	4770      	bx	lr

08014278 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    TOUCHGFX_DEPRECATED(
 8014278:	b590      	push	{r4, r7, lr}
 801427a:	b08b      	sub	sp, #44	; 0x2c
 801427c:	af00      	add	r7, sp, #0
 801427e:	60f8      	str	r0, [r7, #12]
 8014280:	60b9      	str	r1, [r7, #8]
 8014282:	4611      	mov	r1, r2
 8014284:	461a      	mov	r2, r3
 8014286:	460b      	mov	r3, r1
 8014288:	80fb      	strh	r3, [r7, #6]
 801428a:	4613      	mov	r3, r2
 801428c:	717b      	strb	r3, [r7, #5]
        uint16_t stride = lcd().framebufferStride();
 801428e:	f7fb fa8f 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 8014292:	4602      	mov	r2, r0
 8014294:	6813      	ldr	r3, [r2, #0]
 8014296:	3324      	adds	r3, #36	; 0x24
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	4610      	mov	r0, r2
 801429c:	4798      	blx	r3
 801429e:	4603      	mov	r3, r0
 80142a0:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 80142a2:	8b7b      	ldrh	r3, [r7, #26]
 80142a4:	4a3d      	ldr	r2, [pc, #244]	; (801439c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 80142a6:	8812      	ldrh	r2, [r2, #0]
 80142a8:	fb02 f303 	mul.w	r3, r2, r3
 80142ac:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 80142b2:	2300      	movs	r3, #0
 80142b4:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 80142b6:	2300      	movs	r3, #0
 80142b8:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 80142ba:	797b      	ldrb	r3, [r7, #5]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d005      	beq.n	80142cc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 80142c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	4413      	add	r3, r2
 80142c6:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 80142c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ca:	623b      	str	r3, [r7, #32]
        if (useAnimationStorage)
 80142cc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d005      	beq.n	80142e0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 80142d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142d6:	697b      	ldr	r3, [r7, #20]
 80142d8:	4413      	add	r3, r2
 80142da:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 80142dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142de:	61fb      	str	r3, [r7, #28]
        switch (depth)
 80142e0:	88fb      	ldrh	r3, [r7, #6]
 80142e2:	3b01      	subs	r3, #1
 80142e4:	2b1f      	cmp	r3, #31
 80142e6:	d84d      	bhi.n	8014384 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 80142e8:	a201      	add	r2, pc, #4	; (adr r2, 80142f0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 80142ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142ee:	bf00      	nop
 80142f0:	08014371 	.word	0x08014371
 80142f4:	08014371 	.word	0x08014371
 80142f8:	08014385 	.word	0x08014385
 80142fc:	08014371 	.word	0x08014371
 8014300:	08014385 	.word	0x08014385
 8014304:	08014385 	.word	0x08014385
 8014308:	08014385 	.word	0x08014385
 801430c:	08014371 	.word	0x08014371
 8014310:	08014385 	.word	0x08014385
 8014314:	08014385 	.word	0x08014385
 8014318:	08014385 	.word	0x08014385
 801431c:	08014385 	.word	0x08014385
 8014320:	08014385 	.word	0x08014385
 8014324:	08014385 	.word	0x08014385
 8014328:	08014385 	.word	0x08014385
 801432c:	08014371 	.word	0x08014371
 8014330:	08014385 	.word	0x08014385
 8014334:	08014385 	.word	0x08014385
 8014338:	08014385 	.word	0x08014385
 801433c:	08014385 	.word	0x08014385
 8014340:	08014385 	.word	0x08014385
 8014344:	08014385 	.word	0x08014385
 8014348:	08014385 	.word	0x08014385
 801434c:	08014371 	.word	0x08014371
 8014350:	08014385 	.word	0x08014385
 8014354:	08014385 	.word	0x08014385
 8014358:	08014385 	.word	0x08014385
 801435c:	08014385 	.word	0x08014385
 8014360:	08014385 	.word	0x08014385
 8014364:	08014385 	.word	0x08014385
 8014368:	08014385 	.word	0x08014385
 801436c:	08014371 	.word	0x08014371
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	3374      	adds	r3, #116	; 0x74
 8014376:	681c      	ldr	r4, [r3, #0]
 8014378:	69fb      	ldr	r3, [r7, #28]
 801437a:	6a3a      	ldr	r2, [r7, #32]
 801437c:	68b9      	ldr	r1, [r7, #8]
 801437e:	68f8      	ldr	r0, [r7, #12]
 8014380:	47a0      	blx	r4
            break;
 8014382:	e006      	b.n	8014392 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
            assert(0 && "Unsupported bit depth");
 8014384:	4b06      	ldr	r3, [pc, #24]	; (80143a0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8014386:	4a07      	ldr	r2, [pc, #28]	; (80143a4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8014388:	f240 216f 	movw	r1, #623	; 0x26f
 801438c:	4806      	ldr	r0, [pc, #24]	; (80143a8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 801438e:	f012 fd5d 	bl	8026e4c <__assert_func>
    }
 8014392:	bf00      	nop
 8014394:	372c      	adds	r7, #44	; 0x2c
 8014396:	46bd      	mov	sp, r7
 8014398:	bd90      	pop	{r4, r7, pc}
 801439a:	bf00      	nop
 801439c:	2000b3d0 	.word	0x2000b3d0
 80143a0:	080284d4 	.word	0x080284d4
 80143a4:	080296b0 	.word	0x080296b0
 80143a8:	080284f4 	.word	0x080284f4

080143ac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b084      	sub	sp, #16
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	60f8      	str	r0, [r7, #12]
 80143b4:	60b9      	str	r1, [r7, #8]
 80143b6:	607a      	str	r2, [r7, #4]
 80143b8:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d106      	bne.n	80143ce <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80143c0:	4b11      	ldr	r3, [pc, #68]	; (8014408 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80143c2:	4a12      	ldr	r2, [pc, #72]	; (801440c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80143c4:	f240 2182 	movw	r1, #642	; 0x282
 80143c8:	4811      	ldr	r0, [pc, #68]	; (8014410 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80143ca:	f012 fd3f 	bl	8026e4c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	68ba      	ldr	r2, [r7, #8]
 80143d2:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	687a      	ldr	r2, [r7, #4]
 80143d8:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	683a      	ldr	r2, [r7, #0]
 80143de:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	bf14      	ite	ne
 80143e6:	2301      	movne	r3, #1
 80143e8:	2300      	moveq	r3, #0
 80143ea:	b2da      	uxtb	r2, r3
 80143ec:	4b09      	ldr	r3, [pc, #36]	; (8014414 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 80143ee:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	bf14      	ite	ne
 80143f6:	2301      	movne	r3, #1
 80143f8:	2300      	moveq	r3, #0
 80143fa:	b2da      	uxtb	r2, r3
 80143fc:	4b06      	ldr	r3, [pc, #24]	; (8014418 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 80143fe:	701a      	strb	r2, [r3, #0]
    }
 8014400:	bf00      	nop
 8014402:	3710      	adds	r7, #16
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}
 8014408:	08028538 	.word	0x08028538
 801440c:	08029660 	.word	0x08029660
 8014410:	080284f4 	.word	0x080284f4
 8014414:	2000b3d2 	.word	0x2000b3d2
 8014418:	2000b3d3 	.word	0x2000b3d3

0801441c <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 801441c:	b580      	push	{r7, lr}
 801441e:	b082      	sub	sp, #8
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
 8014424:	460b      	mov	r3, r1
 8014426:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801442c:	2b00      	cmp	r3, #0
 801442e:	d004      	beq.n	801443a <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014434:	887a      	ldrh	r2, [r7, #2]
 8014436:	4610      	mov	r0, r2
 8014438:	4798      	blx	r3
    }
 801443a:	bf00      	nop
 801443c:	3708      	adds	r7, #8
 801443e:	46bd      	mov	sp, r7
 8014440:	bd80      	pop	{r7, pc}

08014442 <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 8014442:	b580      	push	{r7, lr}
 8014444:	b082      	sub	sp, #8
 8014446:	af00      	add	r7, sp, #0
 8014448:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	685a      	ldr	r2, [r3, #4]
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	685b      	ldr	r3, [r3, #4]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	3318      	adds	r3, #24
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	4610      	mov	r0, r2
 801445a:	4798      	blx	r3
 801445c:	4603      	mov	r3, r0
    }
 801445e:	4618      	mov	r0, r3
 8014460:	3708      	adds	r7, #8
 8014462:	46bd      	mov	sp, r7
 8014464:	bd80      	pop	{r7, pc}
	...

08014468 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8014468:	b480      	push	{r7}
 801446a:	b083      	sub	sp, #12
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801447c:	429a      	cmp	r2, r3
 801447e:	d017      	beq.n	80144b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8014480:	4b1a      	ldr	r3, [pc, #104]	; (80144ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014482:	781b      	ldrb	r3, [r3, #0]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d12a      	bne.n	80144de <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014488:	4b19      	ldr	r3, [pc, #100]	; (80144f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801448a:	881a      	ldrh	r2, [r3, #0]
 801448c:	4b19      	ldr	r3, [pc, #100]	; (80144f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801448e:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014490:	4b19      	ldr	r3, [pc, #100]	; (80144f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014492:	881a      	ldrh	r2, [r3, #0]
 8014494:	4b19      	ldr	r3, [pc, #100]	; (80144fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014496:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8014498:	4b16      	ldr	r3, [pc, #88]	; (80144f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801449a:	881a      	ldrh	r2, [r3, #0]
 801449c:	4b16      	ldr	r3, [pc, #88]	; (80144f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801449e:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80144a0:	4b16      	ldr	r3, [pc, #88]	; (80144fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80144a2:	881a      	ldrh	r2, [r3, #0]
 80144a4:	4b12      	ldr	r3, [pc, #72]	; (80144f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80144a6:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80144a8:	4b10      	ldr	r3, [pc, #64]	; (80144ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80144aa:	2201      	movs	r2, #1
 80144ac:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80144ae:	e016      	b.n	80144de <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80144b0:	4b0e      	ldr	r3, [pc, #56]	; (80144ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80144b2:	781b      	ldrb	r3, [r3, #0]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d012      	beq.n	80144de <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80144b8:	4b0f      	ldr	r3, [pc, #60]	; (80144f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80144ba:	881a      	ldrh	r2, [r3, #0]
 80144bc:	4b0d      	ldr	r3, [pc, #52]	; (80144f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80144be:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80144c0:	4b0b      	ldr	r3, [pc, #44]	; (80144f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80144c2:	881a      	ldrh	r2, [r3, #0]
 80144c4:	4b0d      	ldr	r3, [pc, #52]	; (80144fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80144c6:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80144c8:	4b0c      	ldr	r3, [pc, #48]	; (80144fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80144ca:	881a      	ldrh	r2, [r3, #0]
 80144cc:	4b0a      	ldr	r3, [pc, #40]	; (80144f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80144ce:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80144d0:	4b08      	ldr	r3, [pc, #32]	; (80144f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80144d2:	881a      	ldrh	r2, [r3, #0]
 80144d4:	4b06      	ldr	r3, [pc, #24]	; (80144f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80144d6:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80144d8:	4b04      	ldr	r3, [pc, #16]	; (80144ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80144da:	2200      	movs	r2, #0
 80144dc:	701a      	strb	r2, [r3, #0]
    }
 80144de:	bf00      	nop
 80144e0:	370c      	adds	r7, #12
 80144e2:	46bd      	mov	sp, r7
 80144e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e8:	4770      	bx	lr
 80144ea:	bf00      	nop
 80144ec:	2000b3cc 	.word	0x2000b3cc
 80144f0:	2000b3c8 	.word	0x2000b3c8
 80144f4:	2000b3ce 	.word	0x2000b3ce
 80144f8:	2000b3ca 	.word	0x2000b3ca
 80144fc:	2000b3d0 	.word	0x2000b3d0

08014500 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8014500:	b580      	push	{r7, lr}
 8014502:	b082      	sub	sp, #8
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	4618      	mov	r0, r3
 801450c:	f002 f987 	bl	801681e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8014510:	bf00      	nop
 8014512:	3708      	adds	r7, #8
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}

08014518 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8014518:	b580      	push	{r7, lr}
 801451a:	b082      	sub	sp, #8
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
 8014520:	4a05      	ldr	r2, [pc, #20]	; (8014538 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	601a      	str	r2, [r3, #0]
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	4618      	mov	r0, r3
 801452a:	f7ff fe43 	bl	80141b4 <_ZN8touchgfx3HALD1Ev>
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	4618      	mov	r0, r3
 8014532:	3708      	adds	r7, #8
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}
 8014538:	080298c8 	.word	0x080298c8

0801453c <_ZN20TouchGFXGeneratedHALD0Ev>:
 801453c:	b580      	push	{r7, lr}
 801453e:	b082      	sub	sp, #8
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	f7ff ffe7 	bl	8014518 <_ZN20TouchGFXGeneratedHALD1Ev>
 801454a:	2178      	movs	r1, #120	; 0x78
 801454c:	6878      	ldr	r0, [r7, #4]
 801454e:	f012 fc51 	bl	8026df4 <_ZdlPvj>
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	4618      	mov	r0, r3
 8014556:	3708      	adds	r7, #8
 8014558:	46bd      	mov	sp, r7
 801455a:	bd80      	pop	{r7, pc}

0801455c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801455c:	b580      	push	{r7, lr}
 801455e:	b082      	sub	sp, #8
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	4618      	mov	r0, r3
 8014568:	f7ff ffca 	bl	8014500 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 801456c:	bf00      	nop
 801456e:	3708      	adds	r7, #8
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}

08014574 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b082      	sub	sp, #8
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	4618      	mov	r0, r3
 8014580:	f001 fafe 	bl	8015b80 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8014584:	bf00      	nop
 8014586:	3708      	adds	r7, #8
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}

0801458c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b082      	sub	sp, #8
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	4618      	mov	r0, r3
 8014598:	f001 fb7e 	bl	8015c98 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 801459c:	4603      	mov	r3, r0
}
 801459e:	4618      	mov	r0, r3
 80145a0:	3708      	adds	r7, #8
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd80      	pop	{r7, pc}

080145a6 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80145a6:	b580      	push	{r7, lr}
 80145a8:	b082      	sub	sp, #8
 80145aa:	af00      	add	r7, sp, #0
 80145ac:	6078      	str	r0, [r7, #4]
 80145ae:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	6839      	ldr	r1, [r7, #0]
 80145b4:	4618      	mov	r0, r3
 80145b6:	f001 fb7d 	bl	8015cb4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80145ba:	bf00      	nop
 80145bc:	3708      	adds	r7, #8
 80145be:	46bd      	mov	sp, r7
 80145c0:	bd80      	pop	{r7, pc}

080145c2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80145c2:	b580      	push	{r7, lr}
 80145c4:	b082      	sub	sp, #8
 80145c6:	af00      	add	r7, sp, #0
 80145c8:	6078      	str	r0, [r7, #4]
 80145ca:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	6839      	ldr	r1, [r7, #0]
 80145d0:	4618      	mov	r0, r3
 80145d2:	f001 fb85 	bl	8015ce0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 80145d6:	bf00      	nop
 80145d8:	3708      	adds	r7, #8
 80145da:	46bd      	mov	sp, r7
 80145dc:	bd80      	pop	{r7, pc}

080145de <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80145de:	b580      	push	{r7, lr}
 80145e0:	b084      	sub	sp, #16
 80145e2:	af00      	add	r7, sp, #0
 80145e4:	60f8      	str	r0, [r7, #12]
 80145e6:	60b9      	str	r1, [r7, #8]
 80145e8:	607a      	str	r2, [r7, #4]
 80145ea:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80145ec:	68f8      	ldr	r0, [r7, #12]
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	687a      	ldr	r2, [r7, #4]
 80145f2:	68b9      	ldr	r1, [r7, #8]
 80145f4:	f002 fa4d 	bl	8016a92 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80145f8:	4603      	mov	r3, r0
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3710      	adds	r7, #16
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}

08014602 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8014602:	b580      	push	{r7, lr}
 8014604:	b082      	sub	sp, #8
 8014606:	af00      	add	r7, sp, #0
 8014608:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	4618      	mov	r0, r3
 801460e:	f001 fae9 	bl	8015be4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8014612:	bf00      	nop
 8014614:	3708      	adds	r7, #8
 8014616:	46bd      	mov	sp, r7
 8014618:	bd80      	pop	{r7, pc}

0801461a <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801461a:	b580      	push	{r7, lr}
 801461c:	b082      	sub	sp, #8
 801461e:	af00      	add	r7, sp, #0
 8014620:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	4618      	mov	r0, r3
 8014626:	f001 faed 	bl	8015c04 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801462a:	bf00      	nop
 801462c:	3708      	adds	r7, #8
 801462e:	46bd      	mov	sp, r7
 8014630:	bd80      	pop	{r7, pc}

08014632 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8014632:	b580      	push	{r7, lr}
 8014634:	b082      	sub	sp, #8
 8014636:	af00      	add	r7, sp, #0
 8014638:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	4618      	mov	r0, r3
 801463e:	f001 faef 	bl	8015c20 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8014642:	bf00      	nop
 8014644:	3708      	adds	r7, #8
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}

0801464a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 801464a:	b580      	push	{r7, lr}
 801464c:	b082      	sub	sp, #8
 801464e:	af00      	add	r7, sp, #0
 8014650:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	4618      	mov	r0, r3
 8014656:	f001 faf1 	bl	8015c3c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801465a:	bf00      	nop
 801465c:	3708      	adds	r7, #8
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}
	...

08014664 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8014664:	b580      	push	{r7, lr}
 8014666:	b082      	sub	sp, #8
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
 801466c:	4a05      	ldr	r2, [pc, #20]	; (8014684 <_ZN11TouchGFXHALD1Ev+0x20>)
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	601a      	str	r2, [r3, #0]
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	4618      	mov	r0, r3
 8014676:	f7ff ff4f 	bl	8014518 <_ZN20TouchGFXGeneratedHALD1Ev>
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	4618      	mov	r0, r3
 801467e:	3708      	adds	r7, #8
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}
 8014684:	080295b4 	.word	0x080295b4

08014688 <_ZN11TouchGFXHALD0Ev>:
 8014688:	b580      	push	{r7, lr}
 801468a:	b082      	sub	sp, #8
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	f7ff ffe7 	bl	8014664 <_ZN11TouchGFXHALD1Ev>
 8014696:	2178      	movs	r1, #120	; 0x78
 8014698:	6878      	ldr	r0, [r7, #4]
 801469a:	f012 fbab 	bl	8026df4 <_ZdlPvj>
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	4618      	mov	r0, r3
 80146a2:	3708      	adds	r7, #8
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}

080146a8 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 80146ac:	2101      	movs	r1, #1
 80146ae:	4811      	ldr	r0, [pc, #68]	; (80146f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80146b0:	f7f7 fca2 	bl	800bff8 <osSemaphoreCreate>
 80146b4:	4602      	mov	r2, r0
 80146b6:	4b10      	ldr	r3, [pc, #64]	; (80146f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80146b8:	601a      	str	r2, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80146ba:	4b0f      	ldr	r3, [pc, #60]	; (80146f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d105      	bne.n	80146ce <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 80146c2:	4b0e      	ldr	r3, [pc, #56]	; (80146fc <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80146c4:	4a0e      	ldr	r2, [pc, #56]	; (8014700 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80146c6:	2125      	movs	r1, #37	; 0x25
 80146c8:	480e      	ldr	r0, [pc, #56]	; (8014704 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80146ca:	f012 fbbf 	bl	8026e4c <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 80146ce:	2101      	movs	r1, #1
 80146d0:	480d      	ldr	r0, [pc, #52]	; (8014708 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80146d2:	f7f7 fc91 	bl	800bff8 <osSemaphoreCreate>
 80146d6:	4602      	mov	r2, r0
 80146d8:	4b0c      	ldr	r3, [pc, #48]	; (801470c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80146da:	601a      	str	r2, [r3, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 80146dc:	4b0b      	ldr	r3, [pc, #44]	; (801470c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d105      	bne.n	80146f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 80146e4:	4b0a      	ldr	r3, [pc, #40]	; (8014710 <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 80146e6:	4a06      	ldr	r2, [pc, #24]	; (8014700 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80146e8:	2128      	movs	r1, #40	; 0x28
 80146ea:	4806      	ldr	r0, [pc, #24]	; (8014704 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80146ec:	f012 fbae 	bl	8026e4c <__assert_func>
}
 80146f0:	bf00      	nop
 80146f2:	bd80      	pop	{r7, pc}
 80146f4:	08029704 	.word	0x08029704
 80146f8:	200085d4 	.word	0x200085d4
 80146fc:	08028570 	.word	0x08028570
 8014700:	08029714 	.word	0x08029714
 8014704:	080285bc 	.word	0x080285bc
 8014708:	0802970c 	.word	0x0802970c
 801470c:	200085d8 	.word	0x200085d8
 8014710:	080285e8 	.word	0x080285e8

08014714 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8014714:	b580      	push	{r7, lr}
 8014716:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 8014718:	4b04      	ldr	r3, [pc, #16]	; (801472c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	f04f 31ff 	mov.w	r1, #4294967295
 8014720:	4618      	mov	r0, r3
 8014722:	f7f7 fca9 	bl	800c078 <osSemaphoreWait>
}
 8014726:	bf00      	nop
 8014728:	bd80      	pop	{r7, pc}
 801472a:	bf00      	nop
 801472c:	200085d4 	.word	0x200085d4

08014730 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8014730:	b580      	push	{r7, lr}
 8014732:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8014734:	4b03      	ldr	r3, [pc, #12]	; (8014744 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	4618      	mov	r0, r3
 801473a:	f7f7 fceb 	bl	800c114 <osSemaphoreRelease>
}
 801473e:	bf00      	nop
 8014740:	bd80      	pop	{r7, pc}
 8014742:	bf00      	nop
 8014744:	200085d4 	.word	0x200085d4

08014748 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8014748:	b580      	push	{r7, lr}
 801474a:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 801474c:	4b03      	ldr	r3, [pc, #12]	; (801475c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	2100      	movs	r1, #0
 8014752:	4618      	mov	r0, r3
 8014754:	f7f7 fc90 	bl	800c078 <osSemaphoreWait>
}
 8014758:	bf00      	nop
 801475a:	bd80      	pop	{r7, pc}
 801475c:	200085d4 	.word	0x200085d4

08014760 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8014760:	b580      	push	{r7, lr}
 8014762:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 8014764:	4b03      	ldr	r3, [pc, #12]	; (8014774 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	4618      	mov	r0, r3
 801476a:	f7f7 fcd3 	bl	800c114 <osSemaphoreRelease>
}
 801476e:	bf00      	nop
 8014770:	bd80      	pop	{r7, pc}
 8014772:	bf00      	nop
 8014774:	200085d4 	.word	0x200085d4

08014778 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8014778:	b580      	push	{r7, lr}
 801477a:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 801477c:	4b03      	ldr	r3, [pc, #12]	; (801478c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	4618      	mov	r0, r3
 8014782:	f7f7 fcc7 	bl	800c114 <osSemaphoreRelease>
}
 8014786:	bf00      	nop
 8014788:	bd80      	pop	{r7, pc}
 801478a:	bf00      	nop
 801478c:	200085d8 	.word	0x200085d8

08014790 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8014790:	b580      	push	{r7, lr}
 8014792:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 8014794:	4b07      	ldr	r3, [pc, #28]	; (80147b4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	2100      	movs	r1, #0
 801479a:	4618      	mov	r0, r3
 801479c:	f7f7 fc6c 	bl	800c078 <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 80147a0:	4b04      	ldr	r3, [pc, #16]	; (80147b4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	f04f 31ff 	mov.w	r1, #4294967295
 80147a8:	4618      	mov	r0, r3
 80147aa:	f7f7 fc65 	bl	800c078 <osSemaphoreWait>
}
 80147ae:	bf00      	nop
 80147b0:	bd80      	pop	{r7, pc}
 80147b2:	bf00      	nop
 80147b4:	200085d8 	.word	0x200085d8

080147b8 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b082      	sub	sp, #8
 80147bc:	af00      	add	r7, sp, #0
 80147be:	4603      	mov	r3, r0
 80147c0:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 80147c2:	88fb      	ldrh	r3, [r7, #6]
 80147c4:	4618      	mov	r0, r3
 80147c6:	f7f7 fc03 	bl	800bfd0 <osDelay>
}
 80147ca:	bf00      	nop
 80147cc:	3708      	adds	r7, #8
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}
	...

080147d4 <__NVIC_EnableIRQ>:
{
 80147d4:	b480      	push	{r7}
 80147d6:	b083      	sub	sp, #12
 80147d8:	af00      	add	r7, sp, #0
 80147da:	4603      	mov	r3, r0
 80147dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80147de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	db0d      	blt.n	8014802 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80147e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80147ea:	b2db      	uxtb	r3, r3
 80147ec:	f003 021f 	and.w	r2, r3, #31
 80147f0:	4907      	ldr	r1, [pc, #28]	; (8014810 <__NVIC_EnableIRQ+0x3c>)
 80147f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80147f6:	095b      	lsrs	r3, r3, #5
 80147f8:	2001      	movs	r0, #1
 80147fa:	fa00 f202 	lsl.w	r2, r0, r2
 80147fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014802:	bf00      	nop
 8014804:	370c      	adds	r7, #12
 8014806:	46bd      	mov	sp, r7
 8014808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480c:	4770      	bx	lr
 801480e:	bf00      	nop
 8014810:	e000e100 	.word	0xe000e100

08014814 <__NVIC_DisableIRQ>:
{
 8014814:	b480      	push	{r7}
 8014816:	b083      	sub	sp, #12
 8014818:	af00      	add	r7, sp, #0
 801481a:	4603      	mov	r3, r0
 801481c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801481e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014822:	2b00      	cmp	r3, #0
 8014824:	db12      	blt.n	801484c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801482a:	b2db      	uxtb	r3, r3
 801482c:	f003 021f 	and.w	r2, r3, #31
 8014830:	4909      	ldr	r1, [pc, #36]	; (8014858 <__NVIC_DisableIRQ+0x44>)
 8014832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014836:	095b      	lsrs	r3, r3, #5
 8014838:	2001      	movs	r0, #1
 801483a:	fa00 f202 	lsl.w	r2, r0, r2
 801483e:	3320      	adds	r3, #32
 8014840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014844:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8014848:	f3bf 8f6f 	isb	sy
}
 801484c:	bf00      	nop
 801484e:	370c      	adds	r7, #12
 8014850:	46bd      	mov	sp, r7
 8014852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014856:	4770      	bx	lr
 8014858:	e000e100 	.word	0xe000e100

0801485c <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 801485c:	b480      	push	{r7}
 801485e:	b083      	sub	sp, #12
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
        : color(0)
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2200      	movs	r2, #0
 8014868:	601a      	str	r2, [r3, #0]
    }
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	4618      	mov	r0, r3
 801486e:	370c      	adds	r7, #12
 8014870:	46bd      	mov	sp, r7
 8014872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014876:	4770      	bx	lr

08014878 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8014878:	b480      	push	{r7}
 801487a:	b083      	sub	sp, #12
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
        return color;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
    }
 8014884:	4618      	mov	r0, r3
 8014886:	370c      	adds	r7, #12
 8014888:	46bd      	mov	sp, r7
 801488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488e:	4770      	bx	lr

08014890 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8014890:	b480      	push	{r7}
 8014892:	b083      	sub	sp, #12
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
    {
 8014898:	4a04      	ldr	r2, [pc, #16]	; (80148ac <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	601a      	str	r2, [r3, #0]
    }
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	4618      	mov	r0, r3
 80148a2:	370c      	adds	r7, #12
 80148a4:	46bd      	mov	sp, r7
 80148a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148aa:	4770      	bx	lr
 80148ac:	0802979c 	.word	0x0802979c

080148b0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b082      	sub	sp, #8
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
    }
 80148b8:	6878      	ldr	r0, [r7, #4]
 80148ba:	f7ff ffe9 	bl	8014890 <_ZN8touchgfx9DMA_QueueD1Ev>
 80148be:	2104      	movs	r1, #4
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f012 fa97 	bl	8026df4 <_ZdlPvj>
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	4618      	mov	r0, r3
 80148ca:	3708      	adds	r7, #8
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}

080148d0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b082      	sub	sp, #8
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	3344      	adds	r3, #68	; 0x44
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	4798      	blx	r3
    }
 80148e4:	bf00      	nop
 80148e6:	3708      	adds	r7, #8
 80148e8:	46bd      	mov	sp, r7
 80148ea:	bd80      	pop	{r7, pc}

080148ec <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 80148ec:	b480      	push	{r7}
 80148ee:	b083      	sub	sp, #12
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80148f4:	2300      	movs	r3, #0
    }
 80148f6:	4618      	mov	r0, r3
 80148f8:	370c      	adds	r7, #12
 80148fa:	46bd      	mov	sp, r7
 80148fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014900:	4770      	bx	lr
	...

08014904 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8014904:	b480      	push	{r7}
 8014906:	b083      	sub	sp, #12
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
    {
 801490c:	4a04      	ldr	r2, [pc, #16]	; (8014920 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	601a      	str	r2, [r3, #0]
    }
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	4618      	mov	r0, r3
 8014916:	370c      	adds	r7, #12
 8014918:	46bd      	mov	sp, r7
 801491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491e:	4770      	bx	lr
 8014920:	0802a74c 	.word	0x0802a74c

08014924 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8014924:	b580      	push	{r7, lr}
 8014926:	b082      	sub	sp, #8
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
    }
 801492c:	6878      	ldr	r0, [r7, #4]
 801492e:	f7ff ffe9 	bl	8014904 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8014932:	210c      	movs	r1, #12
 8014934:	6878      	ldr	r0, [r7, #4]
 8014936:	f012 fa5d 	bl	8026df4 <_ZdlPvj>
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	4618      	mov	r0, r3
 801493e:	3708      	adds	r7, #8
 8014940:	46bd      	mov	sp, r7
 8014942:	bd80      	pop	{r7, pc}

08014944 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8014944:	b480      	push	{r7}
 8014946:	b083      	sub	sp, #12
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]
 801494c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801494e:	4a09      	ldr	r2, [pc, #36]	; (8014974 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	601a      	str	r2, [r3, #0]
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	683a      	ldr	r2, [r7, #0]
 8014958:	605a      	str	r2, [r3, #4]
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	2200      	movs	r2, #0
 801495e:	721a      	strb	r2, [r3, #8]
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2200      	movs	r2, #0
 8014964:	725a      	strb	r2, [r3, #9]
    {
    }
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	4618      	mov	r0, r3
 801496a:	370c      	adds	r7, #12
 801496c:	46bd      	mov	sp, r7
 801496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014972:	4770      	bx	lr
 8014974:	0802a74c 	.word	0x0802a74c

08014978 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8014978:	b580      	push	{r7, lr}
 801497a:	b082      	sub	sp, #8
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	685a      	ldr	r2, [r3, #4]
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	685b      	ldr	r3, [r3, #4]
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	3314      	adds	r3, #20
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	4610      	mov	r0, r2
 8014990:	4798      	blx	r3
    }
 8014992:	bf00      	nop
 8014994:	3708      	adds	r7, #8
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}

0801499a <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801499a:	b580      	push	{r7, lr}
 801499c:	b082      	sub	sp, #8
 801499e:	af00      	add	r7, sp, #0
 80149a0:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80149a2:	687a      	ldr	r2, [r7, #4]
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	3328      	adds	r3, #40	; 0x28
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	4610      	mov	r0, r2
 80149ae:	4798      	blx	r3
    }
 80149b0:	bf00      	nop
 80149b2:	3708      	adds	r7, #8
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}

080149b8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 80149b8:	b480      	push	{r7}
 80149ba:	b085      	sub	sp, #20
 80149bc:	af00      	add	r7, sp, #0
 80149be:	60f8      	str	r0, [r7, #12]
 80149c0:	60b9      	str	r1, [r7, #8]
 80149c2:	607a      	str	r2, [r7, #4]
 80149c4:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80149d0:	68ba      	ldr	r2, [r7, #8]
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	430a      	orrs	r2, r1
 80149d8:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149e0:	f023 0107 	bic.w	r1, r3, #7
 80149e4:	687a      	ldr	r2, [r7, #4]
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	430a      	orrs	r2, r1
 80149ec:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80149f4:	4b06      	ldr	r3, [pc, #24]	; (8014a10 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 80149f6:	4013      	ands	r3, r2
 80149f8:	6839      	ldr	r1, [r7, #0]
 80149fa:	68fa      	ldr	r2, [r7, #12]
 80149fc:	6812      	ldr	r2, [r2, #0]
 80149fe:	430b      	orrs	r3, r1
 8014a00:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8014a02:	2300      	movs	r3, #0
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	3714      	adds	r7, #20
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0e:	4770      	bx	lr
 8014a10:	ffffc000 	.word	0xffffc000

08014a14 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b082      	sub	sp, #8
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8014a1c:	f7fa febc 	bl	800f798 <_ZN8touchgfx3HAL11getInstanceEv>
 8014a20:	4603      	mov	r3, r0
 8014a22:	4618      	mov	r0, r3
 8014a24:	f7ff ffa8 	bl	8014978 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8014a28:	bf00      	nop
 8014a2a:	3708      	adds	r7, #8
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	bd80      	pop	{r7, pc}

08014a30 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b082      	sub	sp, #8
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
    assert(0);
 8014a38:	4b02      	ldr	r3, [pc, #8]	; (8014a44 <DMA2D_XferErrorCallback+0x14>)
 8014a3a:	4a03      	ldr	r2, [pc, #12]	; (8014a48 <DMA2D_XferErrorCallback+0x18>)
 8014a3c:	213e      	movs	r1, #62	; 0x3e
 8014a3e:	4803      	ldr	r0, [pc, #12]	; (8014a4c <DMA2D_XferErrorCallback+0x1c>)
 8014a40:	f012 fa04 	bl	8026e4c <__assert_func>
 8014a44:	08028624 	.word	0x08028624
 8014a48:	080297b8 	.word	0x080297b8
 8014a4c:	08028628 	.word	0x08028628

08014a50 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b082      	sub	sp, #8
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	3318      	adds	r3, #24
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7ff fefd 	bl	801485c <_ZN8touchgfx9colortypeC1Ev>
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	4618      	mov	r0, r3
 8014a66:	3708      	adds	r7, #8
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	bd80      	pop	{r7, pc}

08014a6c <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8014a6c:	b5b0      	push	{r4, r5, r7, lr}
 8014a6e:	b082      	sub	sp, #8
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8014a74:	687a      	ldr	r2, [r7, #4]
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	330c      	adds	r3, #12
 8014a7a:	4619      	mov	r1, r3
 8014a7c:	4610      	mov	r0, r2
 8014a7e:	f7ff ff61 	bl	8014944 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8014a82:	4a0e      	ldr	r2, [pc, #56]	; (8014abc <_ZN10STM32F7DMAC1Ev+0x50>)
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	601a      	str	r2, [r3, #0]
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f103 000c 	add.w	r0, r3, #12
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	3320      	adds	r3, #32
 8014a92:	2260      	movs	r2, #96	; 0x60
 8014a94:	4619      	mov	r1, r3
 8014a96:	f002 fd65 	bl	8017564 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	3320      	adds	r3, #32
 8014a9e:	245f      	movs	r4, #95	; 0x5f
 8014aa0:	461d      	mov	r5, r3
 8014aa2:	2c00      	cmp	r4, #0
 8014aa4:	db05      	blt.n	8014ab2 <_ZN10STM32F7DMAC1Ev+0x46>
 8014aa6:	4628      	mov	r0, r5
 8014aa8:	f7ff ffd2 	bl	8014a50 <_ZN8touchgfx6BlitOpC1Ev>
 8014aac:	3520      	adds	r5, #32
 8014aae:	3c01      	subs	r4, #1
 8014ab0:	e7f7      	b.n	8014aa2 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	3708      	adds	r7, #8
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bdb0      	pop	{r4, r5, r7, pc}
 8014abc:	0802974c 	.word	0x0802974c

08014ac0 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b082      	sub	sp, #8
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
 8014ac8:	4a0b      	ldr	r2, [pc, #44]	; (8014af8 <_ZN10STM32F7DMAD1Ev+0x38>)
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8014ace:	480b      	ldr	r0, [pc, #44]	; (8014afc <_ZN10STM32F7DMAD1Ev+0x3c>)
 8014ad0:	f7ef fa12 	bl	8003ef8 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014ad4:	205a      	movs	r0, #90	; 0x5a
 8014ad6:	f7ff fe9d 	bl	8014814 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	330c      	adds	r3, #12
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f000 faa4 	bl	801502c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f7ff ff0c 	bl	8014904 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	4618      	mov	r0, r3
 8014af0:	3708      	adds	r7, #8
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
 8014af6:	bf00      	nop
 8014af8:	0802974c 	.word	0x0802974c
 8014afc:	2000bcec 	.word	0x2000bcec

08014b00 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b082      	sub	sp, #8
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
}
 8014b08:	6878      	ldr	r0, [r7, #4]
 8014b0a:	f7ff ffd9 	bl	8014ac0 <_ZN10STM32F7DMAD1Ev>
 8014b0e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8014b12:	6878      	ldr	r0, [r7, #4]
 8014b14:	f012 f96e 	bl	8026df4 <_ZdlPvj>
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	3708      	adds	r7, #8
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd80      	pop	{r7, pc}
	...

08014b24 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b082      	sub	sp, #8
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8014b2c:	4b09      	ldr	r3, [pc, #36]	; (8014b54 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8014b2e:	4a0a      	ldr	r2, [pc, #40]	; (8014b58 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8014b30:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8014b32:	4808      	ldr	r0, [pc, #32]	; (8014b54 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8014b34:	f7ef f996 	bl	8003e64 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8014b38:	4b06      	ldr	r3, [pc, #24]	; (8014b54 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8014b3a:	4a08      	ldr	r2, [pc, #32]	; (8014b5c <_ZN10STM32F7DMA10initializeEv+0x38>)
 8014b3c:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8014b3e:	4b05      	ldr	r3, [pc, #20]	; (8014b54 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8014b40:	4a07      	ldr	r2, [pc, #28]	; (8014b60 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8014b42:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8014b44:	205a      	movs	r0, #90	; 0x5a
 8014b46:	f7ff fe45 	bl	80147d4 <__NVIC_EnableIRQ>
}
 8014b4a:	bf00      	nop
 8014b4c:	3708      	adds	r7, #8
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}
 8014b52:	bf00      	nop
 8014b54:	2000bcec 	.word	0x2000bcec
 8014b58:	4002b000 	.word	0x4002b000
 8014b5c:	08014a15 	.word	0x08014a15
 8014b60:	08014a31 	.word	0x08014a31

08014b64 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8014b64:	b480      	push	{r7}
 8014b66:	b083      	sub	sp, #12
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8014b6c:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8014b70:	4618      	mov	r0, r3
 8014b72:	370c      	adds	r7, #12
 8014b74:	46bd      	mov	sp, r7
 8014b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b7a:	4770      	bx	lr

08014b7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8014b7c:	b590      	push	{r4, r7, lr}
 8014b7e:	b08d      	sub	sp, #52	; 0x34
 8014b80:	af02      	add	r7, sp, #8
 8014b82:	6078      	str	r0, [r7, #4]
 8014b84:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8014b86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014b8a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8014b90:	683b      	ldr	r3, [r7, #0]
 8014b92:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8014b94:	2b20      	cmp	r3, #32
 8014b96:	d007      	beq.n	8014ba8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8014b98:	683b      	ldr	r3, [r7, #0]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	2b40      	cmp	r3, #64	; 0x40
 8014b9e:	d003      	beq.n	8014ba8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8014ba0:	683b      	ldr	r3, [r7, #0]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	2b04      	cmp	r3, #4
 8014ba6:	d101      	bne.n	8014bac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8014ba8:	2301      	movs	r3, #1
 8014baa:	e000      	b.n	8014bae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8014bac:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8014bae:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8014bb0:	683b      	ldr	r3, [r7, #0]
 8014bb2:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8014bb4:	2b80      	cmp	r3, #128	; 0x80
 8014bb6:	d004      	beq.n	8014bc2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014bc0:	d101      	bne.n	8014bc6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8014bc2:	2301      	movs	r3, #1
 8014bc4:	e000      	b.n	8014bc8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8014bc6:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8014bc8:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8014bca:	f7fa fdf1 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 8014bce:	4602      	mov	r2, r0
 8014bd0:	6813      	ldr	r3, [r2, #0]
 8014bd2:	331c      	adds	r3, #28
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	4610      	mov	r0, r2
 8014bd8:	4798      	blx	r3
 8014bda:	4603      	mov	r3, r0
 8014bdc:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8014bde:	683b      	ldr	r3, [r7, #0]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	2b40      	cmp	r3, #64	; 0x40
 8014be4:	d01d      	beq.n	8014c22 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8014be6:	2b40      	cmp	r3, #64	; 0x40
 8014be8:	d804      	bhi.n	8014bf4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8014bea:	2b04      	cmp	r3, #4
 8014bec:	d00e      	beq.n	8014c0c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8014bee:	2b20      	cmp	r3, #32
 8014bf0:	d017      	beq.n	8014c22 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8014bf2:	e019      	b.n	8014c28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8014bf4:	2b80      	cmp	r3, #128	; 0x80
 8014bf6:	d003      	beq.n	8014c00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8014bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014bfc:	d003      	beq.n	8014c06 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8014bfe:	e013      	b.n	8014c28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8014c00:	230a      	movs	r3, #10
 8014c02:	623b      	str	r3, [r7, #32]
        break;
 8014c04:	e01a      	b.n	8014c3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8014c06:	2309      	movs	r3, #9
 8014c08:	623b      	str	r3, [r7, #32]
        break;
 8014c0a:	e017      	b.n	8014c3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8014c0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014c10:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014c12:	7f7b      	ldrb	r3, [r7, #29]
 8014c14:	2b10      	cmp	r3, #16
 8014c16:	d101      	bne.n	8014c1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8014c18:	2302      	movs	r3, #2
 8014c1a:	e000      	b.n	8014c1e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8014c1c:	2301      	movs	r3, #1
 8014c1e:	623b      	str	r3, [r7, #32]
        break;
 8014c20:	e00c      	b.n	8014c3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8014c22:	2300      	movs	r3, #0
 8014c24:	623b      	str	r3, [r7, #32]
        break;
 8014c26:	e009      	b.n	8014c3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8014c28:	2300      	movs	r3, #0
 8014c2a:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014c2c:	7f7b      	ldrb	r3, [r7, #29]
 8014c2e:	2b10      	cmp	r3, #16
 8014c30:	d101      	bne.n	8014c36 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8014c32:	2302      	movs	r3, #2
 8014c34:	e000      	b.n	8014c38 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8014c36:	2301      	movs	r3, #1
 8014c38:	623b      	str	r3, [r7, #32]
        break;
 8014c3a:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8014c3c:	4a75      	ldr	r2, [pc, #468]	; (8014e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c40:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8014c42:	7f7b      	ldrb	r3, [r7, #29]
 8014c44:	2b10      	cmp	r3, #16
 8014c46:	d101      	bne.n	8014c4c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8014c48:	2302      	movs	r3, #2
 8014c4a:	e000      	b.n	8014c4e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8014c4c:	2301      	movs	r3, #1
 8014c4e:	4a71      	ldr	r2, [pc, #452]	; (8014e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c50:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014c52:	683b      	ldr	r3, [r7, #0]
 8014c54:	8adb      	ldrh	r3, [r3, #22]
 8014c56:	461a      	mov	r2, r3
 8014c58:	683b      	ldr	r3, [r7, #0]
 8014c5a:	8a1b      	ldrh	r3, [r3, #16]
 8014c5c:	1ad3      	subs	r3, r2, r3
 8014c5e:	461a      	mov	r2, r3
 8014c60:	4b6c      	ldr	r3, [pc, #432]	; (8014e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c62:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014c64:	7f7b      	ldrb	r3, [r7, #29]
 8014c66:	2b10      	cmp	r3, #16
 8014c68:	d101      	bne.n	8014c6e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8014c6a:	2202      	movs	r2, #2
 8014c6c:	e000      	b.n	8014c70 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8014c6e:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8014c70:	683b      	ldr	r3, [r7, #0]
 8014c72:	8adb      	ldrh	r3, [r3, #22]
 8014c74:	4619      	mov	r1, r3
 8014c76:	683b      	ldr	r3, [r7, #0]
 8014c78:	8a1b      	ldrh	r3, [r3, #16]
 8014c7a:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014c7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014c7e:	4865      	ldr	r0, [pc, #404]	; (8014e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c80:	f7ff fe9a 	bl	80149b8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8014c84:	4a63      	ldr	r2, [pc, #396]	; (8014e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c86:	6a3b      	ldr	r3, [r7, #32]
 8014c88:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8014c8a:	683b      	ldr	r3, [r7, #0]
 8014c8c:	8a9b      	ldrh	r3, [r3, #20]
 8014c8e:	461a      	mov	r2, r3
 8014c90:	683b      	ldr	r3, [r7, #0]
 8014c92:	8a1b      	ldrh	r3, [r3, #16]
 8014c94:	1ad3      	subs	r3, r2, r3
 8014c96:	461a      	mov	r2, r3
 8014c98:	4b5e      	ldr	r3, [pc, #376]	; (8014e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014c9a:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8014c9c:	7ffb      	ldrb	r3, [r7, #31]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d103      	bne.n	8014caa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8014ca2:	7fbb      	ldrb	r3, [r7, #30]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	f000 8081 	beq.w	8014dac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
    {
        if (blitOp.alpha < 255)
 8014caa:	683b      	ldr	r3, [r7, #0]
 8014cac:	7f1b      	ldrb	r3, [r3, #28]
 8014cae:	2bff      	cmp	r3, #255	; 0xff
 8014cb0:	d008      	beq.n	8014cc4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8014cb2:	4b58      	ldr	r3, [pc, #352]	; (8014e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014cb4:	2202      	movs	r2, #2
 8014cb6:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8014cb8:	683b      	ldr	r3, [r7, #0]
 8014cba:	7f1b      	ldrb	r3, [r3, #28]
 8014cbc:	461a      	mov	r2, r3
 8014cbe:	4b55      	ldr	r3, [pc, #340]	; (8014e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014cc0:	635a      	str	r2, [r3, #52]	; 0x34
 8014cc2:	e002      	b.n	8014cca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8014cc4:	4b53      	ldr	r3, [pc, #332]	; (8014e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8014cca:	7fbb      	ldrb	r3, [r7, #30]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d058      	beq.n	8014d82 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
        {
            if (bitDepth == 16)
 8014cd0:	7f7b      	ldrb	r3, [r7, #29]
 8014cd2:	2b10      	cmp	r3, #16
 8014cd4:	d14a      	bne.n	8014d6c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	3318      	adds	r3, #24
 8014cda:	4618      	mov	r0, r3
 8014cdc:	f7ff fdcc 	bl	8014878 <_ZNK8touchgfx9colortypecvmEv>
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	0adb      	lsrs	r3, r3, #11
 8014ce4:	f003 021f 	and.w	r2, r3, #31
 8014ce8:	4613      	mov	r3, r2
 8014cea:	021b      	lsls	r3, r3, #8
 8014cec:	1a9a      	subs	r2, r3, r2
 8014cee:	4b4a      	ldr	r3, [pc, #296]	; (8014e18 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8014cf4:	1ad2      	subs	r2, r2, r3
 8014cf6:	0852      	lsrs	r2, r2, #1
 8014cf8:	4413      	add	r3, r2
 8014cfa:	091b      	lsrs	r3, r3, #4
 8014cfc:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8014cfe:	683b      	ldr	r3, [r7, #0]
 8014d00:	3318      	adds	r3, #24
 8014d02:	4618      	mov	r0, r3
 8014d04:	f7ff fdb8 	bl	8014878 <_ZNK8touchgfx9colortypecvmEv>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	095b      	lsrs	r3, r3, #5
 8014d0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014d10:	4613      	mov	r3, r2
 8014d12:	021b      	lsls	r3, r3, #8
 8014d14:	1a9a      	subs	r2, r3, r2
 8014d16:	4b41      	ldr	r3, [pc, #260]	; (8014e1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014d18:	fba3 1302 	umull	r1, r3, r3, r2
 8014d1c:	1ad2      	subs	r2, r2, r3
 8014d1e:	0852      	lsrs	r2, r2, #1
 8014d20:	4413      	add	r3, r2
 8014d22:	095b      	lsrs	r3, r3, #5
 8014d24:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8014d26:	683b      	ldr	r3, [r7, #0]
 8014d28:	3318      	adds	r3, #24
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f7ff fda4 	bl	8014878 <_ZNK8touchgfx9colortypecvmEv>
 8014d30:	4603      	mov	r3, r0
 8014d32:	f003 021f 	and.w	r2, r3, #31
 8014d36:	4613      	mov	r3, r2
 8014d38:	021b      	lsls	r3, r3, #8
 8014d3a:	1a9a      	subs	r2, r3, r2
 8014d3c:	4b36      	ldr	r3, [pc, #216]	; (8014e18 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014d3e:	fba3 1302 	umull	r1, r3, r3, r2
 8014d42:	1ad2      	subs	r2, r2, r3
 8014d44:	0852      	lsrs	r2, r2, #1
 8014d46:	4413      	add	r3, r2
 8014d48:	091b      	lsrs	r3, r3, #4
 8014d4a:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8014d4c:	683b      	ldr	r3, [r7, #0]
 8014d4e:	7f1b      	ldrb	r3, [r3, #28]
 8014d50:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	061a      	lsls	r2, r3, #24
 8014d56:	69bb      	ldr	r3, [r7, #24]
 8014d58:	041b      	lsls	r3, r3, #16
 8014d5a:	431a      	orrs	r2, r3
 8014d5c:	697b      	ldr	r3, [r7, #20]
 8014d5e:	021b      	lsls	r3, r3, #8
 8014d60:	431a      	orrs	r2, r3
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	4313      	orrs	r3, r2
 8014d66:	4a2b      	ldr	r2, [pc, #172]	; (8014e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014d68:	6353      	str	r3, [r2, #52]	; 0x34
 8014d6a:	e00a      	b.n	8014d82 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8014d6c:	683b      	ldr	r3, [r7, #0]
 8014d6e:	3318      	adds	r3, #24
 8014d70:	60bb      	str	r3, [r7, #8]
        return color;
 8014d72:	68bb      	ldr	r3, [r7, #8]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	683a      	ldr	r2, [r7, #0]
 8014d78:	7f12      	ldrb	r2, [r2, #28]
 8014d7a:	0612      	lsls	r2, r2, #24
 8014d7c:	4313      	orrs	r3, r2
 8014d7e:	4a25      	ldr	r2, [pc, #148]	; (8014e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014d80:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014d82:	683b      	ldr	r3, [r7, #0]
 8014d84:	8adb      	ldrh	r3, [r3, #22]
 8014d86:	461a      	mov	r2, r3
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	8a1b      	ldrh	r3, [r3, #16]
 8014d8c:	1ad3      	subs	r3, r2, r3
 8014d8e:	461a      	mov	r2, r3
 8014d90:	4b20      	ldr	r3, [pc, #128]	; (8014e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014d92:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014d94:	7f7b      	ldrb	r3, [r7, #29]
 8014d96:	2b10      	cmp	r3, #16
 8014d98:	d101      	bne.n	8014d9e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x222>
 8014d9a:	2302      	movs	r3, #2
 8014d9c:	e000      	b.n	8014da0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8014d9e:	2301      	movs	r3, #1
 8014da0:	4a1c      	ldr	r2, [pc, #112]	; (8014e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014da2:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8014da4:	2100      	movs	r1, #0
 8014da6:	481b      	ldr	r0, [pc, #108]	; (8014e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014da8:	f7ef fb26 	bl	80043f8 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8014dac:	2101      	movs	r1, #1
 8014dae:	4819      	ldr	r0, [pc, #100]	; (8014e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014db0:	f7ef fb22 	bl	80043f8 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8014db4:	7ffb      	ldrb	r3, [r7, #31]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d102      	bne.n	8014dc0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8014dba:	7fbb      	ldrb	r3, [r7, #30]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d015      	beq.n	8014dec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x270>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8014dc0:	683b      	ldr	r3, [r7, #0]
 8014dc2:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014dc4:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014dca:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8014dcc:	683b      	ldr	r3, [r7, #0]
 8014dce:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014dd0:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014dd2:	683b      	ldr	r3, [r7, #0]
 8014dd4:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014dd6:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014dd8:	683b      	ldr	r3, [r7, #0]
 8014dda:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014ddc:	9301      	str	r3, [sp, #4]
 8014dde:	9200      	str	r2, [sp, #0]
 8014de0:	4623      	mov	r3, r4
 8014de2:	4602      	mov	r2, r0
 8014de4:	480b      	ldr	r0, [pc, #44]	; (8014e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014de6:	f7ef f92a 	bl	800403e <HAL_DMA2D_BlendingStart_IT>
 8014dea:	e00f      	b.n	8014e0c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014df0:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8014df2:	683b      	ldr	r3, [r7, #0]
 8014df4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014df6:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014df8:	683b      	ldr	r3, [r7, #0]
 8014dfa:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014dfc:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014dfe:	683b      	ldr	r3, [r7, #0]
 8014e00:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014e02:	9300      	str	r3, [sp, #0]
 8014e04:	4603      	mov	r3, r0
 8014e06:	4803      	ldr	r0, [pc, #12]	; (8014e14 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8014e08:	f7ef f8e6 	bl	8003fd8 <HAL_DMA2D_Start_IT>
    }
}
 8014e0c:	bf00      	nop
 8014e0e:	372c      	adds	r7, #44	; 0x2c
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd90      	pop	{r4, r7, pc}
 8014e14:	2000bcec 	.word	0x2000bcec
 8014e18:	08421085 	.word	0x08421085
 8014e1c:	04104105 	.word	0x04104105

08014e20 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8014e20:	b590      	push	{r4, r7, lr}
 8014e22:	b08f      	sub	sp, #60	; 0x3c
 8014e24:	af02      	add	r7, sp, #8
 8014e26:	6078      	str	r0, [r7, #4]
 8014e28:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8014e2a:	f7fa fcc1 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 8014e2e:	4602      	mov	r2, r0
 8014e30:	6813      	ldr	r3, [r2, #0]
 8014e32:	331c      	adds	r3, #28
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	4610      	mov	r0, r2
 8014e38:	4798      	blx	r3
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e44:	2b10      	cmp	r3, #16
 8014e46:	d101      	bne.n	8014e4c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2c>
 8014e48:	2302      	movs	r3, #2
 8014e4a:	e000      	b.n	8014e4e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
 8014e4c:	2301      	movs	r3, #1
 8014e4e:	623b      	str	r3, [r7, #32]

    uint32_t color = 0;
 8014e50:	2300      	movs	r3, #0
 8014e52:	62bb      	str	r3, [r7, #40]	; 0x28
    if (bitDepth == 16)
 8014e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e58:	2b10      	cmp	r3, #16
 8014e5a:	d149      	bne.n	8014ef0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	3318      	adds	r3, #24
 8014e60:	4618      	mov	r0, r3
 8014e62:	f7ff fd09 	bl	8014878 <_ZNK8touchgfx9colortypecvmEv>
 8014e66:	4603      	mov	r3, r0
 8014e68:	0adb      	lsrs	r3, r3, #11
 8014e6a:	f003 021f 	and.w	r2, r3, #31
 8014e6e:	4613      	mov	r3, r2
 8014e70:	021b      	lsls	r3, r3, #8
 8014e72:	1a9a      	subs	r2, r3, r2
 8014e74:	4b6a      	ldr	r3, [pc, #424]	; (8015020 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014e76:	fba3 1302 	umull	r1, r3, r3, r2
 8014e7a:	1ad2      	subs	r2, r2, r3
 8014e7c:	0852      	lsrs	r2, r2, #1
 8014e7e:	4413      	add	r3, r2
 8014e80:	091b      	lsrs	r3, r3, #4
 8014e82:	61fb      	str	r3, [r7, #28]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8014e84:	683b      	ldr	r3, [r7, #0]
 8014e86:	3318      	adds	r3, #24
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7ff fcf5 	bl	8014878 <_ZNK8touchgfx9colortypecvmEv>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	095b      	lsrs	r3, r3, #5
 8014e92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014e96:	4613      	mov	r3, r2
 8014e98:	021b      	lsls	r3, r3, #8
 8014e9a:	1a9a      	subs	r2, r3, r2
 8014e9c:	4b61      	ldr	r3, [pc, #388]	; (8015024 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x204>)
 8014e9e:	fba3 1302 	umull	r1, r3, r3, r2
 8014ea2:	1ad2      	subs	r2, r2, r3
 8014ea4:	0852      	lsrs	r2, r2, #1
 8014ea6:	4413      	add	r3, r2
 8014ea8:	095b      	lsrs	r3, r3, #5
 8014eaa:	61bb      	str	r3, [r7, #24]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8014eac:	683b      	ldr	r3, [r7, #0]
 8014eae:	3318      	adds	r3, #24
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7ff fce1 	bl	8014878 <_ZNK8touchgfx9colortypecvmEv>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	f003 021f 	and.w	r2, r3, #31
 8014ebc:	4613      	mov	r3, r2
 8014ebe:	021b      	lsls	r3, r3, #8
 8014ec0:	1a9a      	subs	r2, r3, r2
 8014ec2:	4b57      	ldr	r3, [pc, #348]	; (8015020 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x200>)
 8014ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8014ec8:	1ad2      	subs	r2, r2, r3
 8014eca:	0852      	lsrs	r2, r2, #1
 8014ecc:	4413      	add	r3, r2
 8014ece:	091b      	lsrs	r3, r3, #4
 8014ed0:	617b      	str	r3, [r7, #20]
        uint32_t alpha = blitOp.alpha;
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	7f1b      	ldrb	r3, [r3, #28]
 8014ed6:	613b      	str	r3, [r7, #16]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	061a      	lsls	r2, r3, #24
 8014edc:	69fb      	ldr	r3, [r7, #28]
 8014ede:	041b      	lsls	r3, r3, #16
 8014ee0:	431a      	orrs	r2, r3
 8014ee2:	69bb      	ldr	r3, [r7, #24]
 8014ee4:	021b      	lsls	r3, r3, #8
 8014ee6:	4313      	orrs	r3, r2
 8014ee8:	697a      	ldr	r2, [r7, #20]
 8014eea:	4313      	orrs	r3, r2
 8014eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8014eee:	e00a      	b.n	8014f06 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe6>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	7f1b      	ldrb	r3, [r3, #28]
 8014ef4:	061b      	lsls	r3, r3, #24
 8014ef6:	461a      	mov	r2, r3
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	3318      	adds	r3, #24
 8014efc:	60fb      	str	r3, [r7, #12]
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	4313      	orrs	r3, r2
 8014f04:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    switch (blitOp.operation)
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	2b08      	cmp	r3, #8
 8014f0c:	d103      	bne.n	8014f16 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8014f0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014f12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8014f14:	e003      	b.n	8014f1e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8014f16:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8014f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8014f1c:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8014f1e:	4a42      	ldr	r2, [pc, #264]	; (8015028 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f22:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8014f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f28:	2b10      	cmp	r3, #16
 8014f2a:	d101      	bne.n	8014f30 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>
 8014f2c:	2302      	movs	r3, #2
 8014f2e:	e000      	b.n	8014f32 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
 8014f30:	2301      	movs	r3, #1
 8014f32:	4a3d      	ldr	r2, [pc, #244]	; (8015028 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014f34:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	8adb      	ldrh	r3, [r3, #22]
 8014f3a:	461a      	mov	r2, r3
 8014f3c:	683b      	ldr	r3, [r7, #0]
 8014f3e:	8a1b      	ldrh	r3, [r3, #16]
 8014f40:	1ad3      	subs	r3, r2, r3
 8014f42:	461a      	mov	r2, r3
 8014f44:	4b38      	ldr	r3, [pc, #224]	; (8015028 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014f46:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f4c:	2b10      	cmp	r3, #16
 8014f4e:	d101      	bne.n	8014f54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x134>
 8014f50:	2202      	movs	r2, #2
 8014f52:	e000      	b.n	8014f56 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x136>
 8014f54:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8014f56:	683b      	ldr	r3, [r7, #0]
 8014f58:	8adb      	ldrh	r3, [r3, #22]
 8014f5a:	4619      	mov	r1, r3
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	8a1b      	ldrh	r3, [r3, #16]
 8014f60:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014f64:	4830      	ldr	r0, [pc, #192]	; (8015028 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014f66:	f7ff fd27 	bl	80149b8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8014f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014f70:	d11f      	bne.n	8014fb2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x192>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8014f72:	4b2d      	ldr	r3, [pc, #180]	; (8015028 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014f74:	2201      	movs	r2, #1
 8014f76:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8014f78:	4a2b      	ldr	r2, [pc, #172]	; (8015028 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f7c:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8014f7e:	4b2a      	ldr	r3, [pc, #168]	; (8015028 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014f80:	2209      	movs	r2, #9
 8014f82:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014f84:	683b      	ldr	r3, [r7, #0]
 8014f86:	8adb      	ldrh	r3, [r3, #22]
 8014f88:	461a      	mov	r2, r3
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	8a1b      	ldrh	r3, [r3, #16]
 8014f8e:	1ad3      	subs	r3, r2, r3
 8014f90:	461a      	mov	r2, r3
 8014f92:	4b25      	ldr	r3, [pc, #148]	; (8015028 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014f94:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014f96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f9a:	2b10      	cmp	r3, #16
 8014f9c:	d101      	bne.n	8014fa2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x182>
 8014f9e:	2302      	movs	r3, #2
 8014fa0:	e000      	b.n	8014fa4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x184>
 8014fa2:	2301      	movs	r3, #1
 8014fa4:	4a20      	ldr	r2, [pc, #128]	; (8015028 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014fa6:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8014fa8:	2100      	movs	r1, #0
 8014faa:	481f      	ldr	r0, [pc, #124]	; (8015028 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014fac:	f7ef fa24 	bl	80043f8 <HAL_DMA2D_ConfigLayer>
 8014fb0:	e005      	b.n	8014fbe <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x19e>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8014fb2:	4a1d      	ldr	r2, [pc, #116]	; (8015028 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014fb4:	6a3b      	ldr	r3, [r7, #32]
 8014fb6:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8014fb8:	4b1b      	ldr	r3, [pc, #108]	; (8015028 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014fba:	2200      	movs	r2, #0
 8014fbc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8014fbe:	2101      	movs	r1, #1
 8014fc0:	4819      	ldr	r0, [pc, #100]	; (8015028 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014fc2:	f7ef fa19 	bl	80043f8 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8014fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014fcc:	d115      	bne.n	8014ffa <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1da>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8014fce:	683b      	ldr	r3, [r7, #0]
 8014fd0:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014fd2:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8014fd4:	683b      	ldr	r3, [r7, #0]
 8014fd6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014fd8:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014fde:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014fe4:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014fe6:	683b      	ldr	r3, [r7, #0]
 8014fe8:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014fea:	9301      	str	r3, [sp, #4]
 8014fec:	9200      	str	r2, [sp, #0]
 8014fee:	4623      	mov	r3, r4
 8014ff0:	4602      	mov	r2, r0
 8014ff2:	480d      	ldr	r0, [pc, #52]	; (8015028 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8014ff4:	f7ef f823 	bl	800403e <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8014ff8:	e00d      	b.n	8015016 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f6>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8014ffa:	683b      	ldr	r3, [r7, #0]
 8014ffc:	68db      	ldr	r3, [r3, #12]
 8014ffe:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8015000:	683b      	ldr	r3, [r7, #0]
 8015002:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8015004:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801500a:	9300      	str	r3, [sp, #0]
 801500c:	460b      	mov	r3, r1
 801500e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015010:	4805      	ldr	r0, [pc, #20]	; (8015028 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x208>)
 8015012:	f7ee ffe1 	bl	8003fd8 <HAL_DMA2D_Start_IT>
}
 8015016:	bf00      	nop
 8015018:	3734      	adds	r7, #52	; 0x34
 801501a:	46bd      	mov	sp, r7
 801501c:	bd90      	pop	{r4, r7, pc}
 801501e:	bf00      	nop
 8015020:	08421085 	.word	0x08421085
 8015024:	04104105 	.word	0x04104105
 8015028:	2000bcec 	.word	0x2000bcec

0801502c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 801502c:	b580      	push	{r7, lr}
 801502e:	b082      	sub	sp, #8
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
 8015034:	4a05      	ldr	r2, [pc, #20]	; (801504c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	601a      	str	r2, [r3, #0]
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	4618      	mov	r0, r3
 801503e:	f7ff fc27 	bl	8014890 <_ZN8touchgfx9DMA_QueueD1Ev>
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	4618      	mov	r0, r3
 8015046:	3708      	adds	r7, #8
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}
 801504c:	0802a79c 	.word	0x0802a79c

08015050 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8015050:	b580      	push	{r7, lr}
 8015052:	b082      	sub	sp, #8
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f7ff ffe7 	bl	801502c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801505e:	2114      	movs	r1, #20
 8015060:	6878      	ldr	r0, [r7, #4]
 8015062:	f011 fec7 	bl	8026df4 <_ZdlPvj>
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	4618      	mov	r0, r3
 801506a:	3708      	adds	r7, #8
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}

08015070 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8015070:	b480      	push	{r7}
 8015072:	b083      	sub	sp, #12
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
        texts = t;
 8015078:	4a04      	ldr	r2, [pc, #16]	; (801508c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	6013      	str	r3, [r2, #0]
    }
 801507e:	bf00      	nop
 8015080:	370c      	adds	r7, #12
 8015082:	46bd      	mov	sp, r7
 8015084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015088:	4770      	bx	lr
 801508a:	bf00      	nop
 801508c:	2000b470 	.word	0x2000b470

08015090 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8015090:	b480      	push	{r7}
 8015092:	b085      	sub	sp, #20
 8015094:	af00      	add	r7, sp, #0
 8015096:	60f8      	str	r0, [r7, #12]
 8015098:	60b9      	str	r1, [r7, #8]
 801509a:	607a      	str	r2, [r7, #4]
 801509c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 801509e:	4a0b      	ldr	r2, [pc, #44]	; (80150cc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	601a      	str	r2, [r3, #0]
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	68ba      	ldr	r2, [r7, #8]
 80150a8:	605a      	str	r2, [r3, #4]
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	687a      	ldr	r2, [r7, #4]
 80150ae:	609a      	str	r2, [r3, #8]
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	683a      	ldr	r2, [r7, #0]
 80150b4:	60da      	str	r2, [r3, #12]
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	69ba      	ldr	r2, [r7, #24]
 80150ba:	611a      	str	r2, [r3, #16]
    {
    }
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	4618      	mov	r0, r3
 80150c0:	3714      	adds	r7, #20
 80150c2:	46bd      	mov	sp, r7
 80150c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c8:	4770      	bx	lr
 80150ca:	bf00      	nop
 80150cc:	080298b8 	.word	0x080298b8

080150d0 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80150d0:	b480      	push	{r7}
 80150d2:	b083      	sub	sp, #12
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
    {
 80150d8:	4a04      	ldr	r2, [pc, #16]	; (80150ec <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	601a      	str	r2, [r3, #0]
    }
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	4618      	mov	r0, r3
 80150e2:	370c      	adds	r7, #12
 80150e4:	46bd      	mov	sp, r7
 80150e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ea:	4770      	bx	lr
 80150ec:	080298b8 	.word	0x080298b8

080150f0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b082      	sub	sp, #8
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
    }
 80150f8:	6878      	ldr	r0, [r7, #4]
 80150fa:	f7ff ffe9 	bl	80150d0 <_ZN8touchgfx7MVPHeapD1Ev>
 80150fe:	2114      	movs	r1, #20
 8015100:	6878      	ldr	r0, [r7, #4]
 8015102:	f011 fe77 	bl	8026df4 <_ZdlPvj>
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	4618      	mov	r0, r3
 801510a:	3708      	adds	r7, #8
 801510c:	46bd      	mov	sp, r7
 801510e:	bd80      	pop	{r7, pc}

08015110 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8015110:	b480      	push	{r7}
 8015112:	b083      	sub	sp, #12
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
    {
 8015118:	4a04      	ldr	r2, [pc, #16]	; (801512c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	601a      	str	r2, [r3, #0]
    }
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	4618      	mov	r0, r3
 8015122:	370c      	adds	r7, #12
 8015124:	46bd      	mov	sp, r7
 8015126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512a:	4770      	bx	lr
 801512c:	0802b334 	.word	0x0802b334

08015130 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8015130:	b580      	push	{r7, lr}
 8015132:	b082      	sub	sp, #8
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
    }
 8015138:	6878      	ldr	r0, [r7, #4]
 801513a:	f7ff ffe9 	bl	8015110 <_ZN8touchgfx3LCDD1Ev>
 801513e:	2108      	movs	r1, #8
 8015140:	6878      	ldr	r0, [r7, #4]
 8015142:	f011 fe57 	bl	8026df4 <_ZdlPvj>
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	4618      	mov	r0, r3
 801514a:	3708      	adds	r7, #8
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}

08015150 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8015150:	b480      	push	{r7}
 8015152:	b083      	sub	sp, #12
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	2200      	movs	r2, #0
 801515c:	801a      	strh	r2, [r3, #0]
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	2200      	movs	r2, #0
 8015162:	805a      	strh	r2, [r3, #2]
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	2200      	movs	r2, #0
 8015168:	809a      	strh	r2, [r3, #4]
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	2200      	movs	r2, #0
 801516e:	80da      	strh	r2, [r3, #6]
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	2200      	movs	r2, #0
 8015174:	811a      	strh	r2, [r3, #8]
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	2200      	movs	r2, #0
 801517a:	815a      	strh	r2, [r3, #10]
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	2200      	movs	r2, #0
 8015180:	819a      	strh	r2, [r3, #12]
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	2200      	movs	r2, #0
 8015186:	739a      	strb	r2, [r3, #14]
        {
        }
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	4618      	mov	r0, r3
 801518c:	370c      	adds	r7, #12
 801518e:	46bd      	mov	sp, r7
 8015190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015194:	4770      	bx	lr

08015196 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8015196:	b580      	push	{r7, lr}
 8015198:	b082      	sub	sp, #8
 801519a:	af00      	add	r7, sp, #0
 801519c:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	4618      	mov	r0, r3
 80151a2:	f7ff ffd5 	bl	8015150 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	2200      	movs	r2, #0
 80151aa:	611a      	str	r2, [r3, #16]
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	2200      	movs	r2, #0
 80151b0:	829a      	strh	r2, [r3, #20]
    {
    }
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	4618      	mov	r0, r3
 80151b6:	3708      	adds	r7, #8
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}

080151bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80151bc:	b580      	push	{r7, lr}
 80151be:	b084      	sub	sp, #16
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	60f8      	str	r0, [r7, #12]
 80151c4:	60b9      	str	r1, [r7, #8]
 80151c6:	607a      	str	r2, [r7, #4]
 80151c8:	603b      	str	r3, [r7, #0]
          displayOrientationChangeRequested(false)
 80151ca:	4a44      	ldr	r2, [pc, #272]	; (80152dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	601a      	str	r2, [r3, #0]
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	68ba      	ldr	r2, [r7, #8]
 80151d4:	605a      	str	r2, [r3, #4]
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	687a      	ldr	r2, [r7, #4]
 80151da:	609a      	str	r2, [r3, #8]
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	683a      	ldr	r2, [r7, #0]
 80151e0:	60da      	str	r2, [r3, #12]
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	2200      	movs	r2, #0
 80151e6:	611a      	str	r2, [r3, #16]
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	2200      	movs	r2, #0
 80151ec:	615a      	str	r2, [r3, #20]
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	2200      	movs	r2, #0
 80151f2:	619a      	str	r2, [r3, #24]
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	331c      	adds	r3, #28
 80151f8:	4618      	mov	r0, r3
 80151fa:	f7ff ffcc 	bl	8015196 <_ZN8touchgfx8GesturesC1Ev>
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	2200      	movs	r2, #0
 8015202:	639a      	str	r2, [r3, #56]	; 0x38
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	2200      	movs	r2, #0
 8015208:	63da      	str	r2, [r3, #60]	; 0x3c
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	2200      	movs	r2, #0
 801520e:	641a      	str	r2, [r3, #64]	; 0x40
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	2200      	movs	r2, #0
 8015214:	645a      	str	r2, [r3, #68]	; 0x44
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	2200      	movs	r2, #0
 801521a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	2201      	movs	r2, #1
 8015222:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	2200      	movs	r2, #0
 801522a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	2200      	movs	r2, #0
 8015232:	64da      	str	r2, [r3, #76]	; 0x4c
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	3350      	adds	r3, #80	; 0x50
 8015238:	4618      	mov	r0, r3
 801523a:	f7fc f997 	bl	801156c <_ZN8touchgfx4RectC1Ev>
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	2201      	movs	r2, #1
 8015242:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	2200      	movs	r2, #0
 801524a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	2200      	movs	r2, #0
 8015252:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	2201      	movs	r2, #1
 801525a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	2200      	movs	r2, #0
 8015262:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	2200      	movs	r2, #0
 801526a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	2200      	movs	r2, #0
 8015272:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	2200      	movs	r2, #0
 801527a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	2200      	movs	r2, #0
 8015282:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	2200      	movs	r2, #0
 801528a:	671a      	str	r2, [r3, #112]	; 0x70
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	2200      	movs	r2, #0
 8015290:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8015294:	4a12      	ldr	r2, [pc, #72]	; (80152e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 801529a:	4a12      	ldr	r2, [pc, #72]	; (80152e4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 801529c:	8b3b      	ldrh	r3, [r7, #24]
 801529e:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80152a0:	4a11      	ldr	r2, [pc, #68]	; (80152e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80152a2:	8bbb      	ldrh	r3, [r7, #28]
 80152a4:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80152a6:	4b11      	ldr	r3, [pc, #68]	; (80152ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 80152a8:	2200      	movs	r2, #0
 80152aa:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80152ac:	4b0d      	ldr	r3, [pc, #52]	; (80152e4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80152ae:	881a      	ldrh	r2, [r3, #0]
 80152b0:	4b0f      	ldr	r3, [pc, #60]	; (80152f0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 80152b2:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80152b4:	4b0c      	ldr	r3, [pc, #48]	; (80152e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80152b6:	881a      	ldrh	r2, [r3, #0]
 80152b8:	4b0e      	ldr	r3, [pc, #56]	; (80152f4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 80152ba:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80152bc:	8b3a      	ldrh	r2, [r7, #24]
 80152be:	8bbb      	ldrh	r3, [r7, #28]
 80152c0:	429a      	cmp	r2, r3
 80152c2:	d301      	bcc.n	80152c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 80152c4:	2200      	movs	r2, #0
 80152c6:	e000      	b.n	80152ca <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 80152c8:	2201      	movs	r2, #1
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	4618      	mov	r0, r3
 80152d4:	3710      	adds	r7, #16
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bd80      	pop	{r7, pc}
 80152da:	bf00      	nop
 80152dc:	0802a308 	.word	0x0802a308
 80152e0:	2000b3d4 	.word	0x2000b3d4
 80152e4:	2000b3c8 	.word	0x2000b3c8
 80152e8:	2000b3ca 	.word	0x2000b3ca
 80152ec:	2000b3cc 	.word	0x2000b3cc
 80152f0:	2000b3ce 	.word	0x2000b3ce
 80152f4:	2000b3d0 	.word	0x2000b3d0

080152f8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b082      	sub	sp, #8
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
 8015300:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8015302:	683b      	ldr	r3, [r7, #0]
 8015304:	4618      	mov	r0, r3
 8015306:	f7fa fbbf 	bl	800fa88 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 801530a:	bf00      	nop
 801530c:	3708      	adds	r7, #8
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}
	...

08015314 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8015314:	b580      	push	{r7, lr}
 8015316:	b086      	sub	sp, #24
 8015318:	af02      	add	r7, sp, #8
 801531a:	60f8      	str	r0, [r7, #12]
 801531c:	60b9      	str	r1, [r7, #8]
 801531e:	607a      	str	r2, [r7, #4]
 8015320:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8015322:	68f8      	ldr	r0, [r7, #12]
 8015324:	69bb      	ldr	r3, [r7, #24]
 8015326:	9300      	str	r3, [sp, #0]
 8015328:	683b      	ldr	r3, [r7, #0]
 801532a:	687a      	ldr	r2, [r7, #4]
 801532c:	68b9      	ldr	r1, [r7, #8]
 801532e:	f7ff feaf 	bl	8015090 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8015332:	4a04      	ldr	r2, [pc, #16]	; (8015344 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	601a      	str	r2, [r3, #0]
    {

    }
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	4618      	mov	r0, r3
 801533c:	3710      	adds	r7, #16
 801533e:	46bd      	mov	sp, r7
 8015340:	bd80      	pop	{r7, pc}
 8015342:	bf00      	nop
 8015344:	080298a4 	.word	0x080298a4

08015348 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8015348:	b580      	push	{r7, lr}
 801534a:	af00      	add	r7, sp, #0
 801534c:	4801      	ldr	r0, [pc, #4]	; (8015354 <__tcf_0+0xc>)
 801534e:	f000 f953 	bl	80155f8 <_ZN12FrontendHeapD1Ev>
 8015352:	bd80      	pop	{r7, pc}
 8015354:	200085dc 	.word	0x200085dc

08015358 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8015358:	b580      	push	{r7, lr}
 801535a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 801535c:	4b08      	ldr	r3, [pc, #32]	; (8015380 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	f003 0301 	and.w	r3, r3, #1
 8015364:	2b00      	cmp	r3, #0
 8015366:	d108      	bne.n	801537a <_ZN12FrontendHeap11getInstanceEv+0x22>
 8015368:	4806      	ldr	r0, [pc, #24]	; (8015384 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 801536a:	f000 f867 	bl	801543c <_ZN12FrontendHeapC1Ev>
 801536e:	4b04      	ldr	r3, [pc, #16]	; (8015380 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8015370:	2201      	movs	r2, #1
 8015372:	601a      	str	r2, [r3, #0]
 8015374:	4804      	ldr	r0, [pc, #16]	; (8015388 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8015376:	f011 fd87 	bl	8026e88 <atexit>
        return instance;
 801537a:	4b02      	ldr	r3, [pc, #8]	; (8015384 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 801537c:	4618      	mov	r0, r3
 801537e:	bd80      	pop	{r7, pc}
 8015380:	2000a6c8 	.word	0x2000a6c8
 8015384:	200085dc 	.word	0x200085dc
 8015388:	08015349 	.word	0x08015349

0801538c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
 8015394:	4a05      	ldr	r2, [pc, #20]	; (80153ac <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	601a      	str	r2, [r3, #0]
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	4618      	mov	r0, r3
 801539e:	f7ff fe97 	bl	80150d0 <_ZN8touchgfx7MVPHeapD1Ev>
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	4618      	mov	r0, r3
 80153a6:	3708      	adds	r7, #8
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}
 80153ac:	080298a4 	.word	0x080298a4

080153b0 <_ZN16FrontendHeapBaseD0Ev>:
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b082      	sub	sp, #8
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
 80153b8:	6878      	ldr	r0, [r7, #4]
 80153ba:	f7ff ffe7 	bl	801538c <_ZN16FrontendHeapBaseD1Ev>
 80153be:	2114      	movs	r1, #20
 80153c0:	6878      	ldr	r0, [r7, #4]
 80153c2:	f011 fd17 	bl	8026df4 <_ZdlPvj>
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	4618      	mov	r0, r3
 80153ca:	3708      	adds	r7, #8
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bd80      	pop	{r7, pc}

080153d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b082      	sub	sp, #8
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	4618      	mov	r0, r3
 80153dc:	f000 fd76 	bl	8015ecc <_ZN8touchgfx17AbstractPartitionC1Ev>
 80153e0:	4a03      	ldr	r2, [pc, #12]	; (80153f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	601a      	str	r2, [r3, #0]
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	4618      	mov	r0, r3
 80153ea:	3708      	adds	r7, #8
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd80      	pop	{r7, pc}
 80153f0:	08029870 	.word	0x08029870

080153f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b082      	sub	sp, #8
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	6078      	str	r0, [r7, #4]
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	4618      	mov	r0, r3
 8015400:	f000 fd64 	bl	8015ecc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015404:	4a03      	ldr	r2, [pc, #12]	; (8015414 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	601a      	str	r2, [r3, #0]
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	4618      	mov	r0, r3
 801540e:	3708      	adds	r7, #8
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}
 8015414:	0802983c 	.word	0x0802983c

08015418 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8015418:	b580      	push	{r7, lr}
 801541a:	b082      	sub	sp, #8
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	4618      	mov	r0, r3
 8015424:	f000 fd52 	bl	8015ecc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015428:	4a03      	ldr	r2, [pc, #12]	; (8015438 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	601a      	str	r2, [r3, #0]
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	4618      	mov	r0, r3
 8015432:	3708      	adds	r7, #8
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}
 8015438:	08029808 	.word	0x08029808

0801543c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 801543c:	b5b0      	push	{r4, r5, r7, lr}
 801543e:	b084      	sub	sp, #16
 8015440:	af02      	add	r7, sp, #8
 8015442:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	f103 0414 	add.w	r4, r3, #20
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	f641 727c 	movw	r2, #8060	; 0x1f7c
 8015458:	441a      	add	r2, r3
 801545a:	6879      	ldr	r1, [r7, #4]
 801545c:	f641 7394 	movw	r3, #8084	; 0x1f94
 8015460:	440b      	add	r3, r1
 8015462:	9300      	str	r3, [sp, #0]
 8015464:	4613      	mov	r3, r2
 8015466:	462a      	mov	r2, r5
 8015468:	4621      	mov	r1, r4
 801546a:	f7ff ff53 	bl	8015314 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801546e:	4a1a      	ldr	r2, [pc, #104]	; (80154d8 <_ZN12FrontendHeapC1Ev+0x9c>)
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	601a      	str	r2, [r3, #0]
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	3314      	adds	r3, #20
 8015478:	4618      	mov	r0, r3
 801547a:	f7ff ffa9 	bl	80153d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	332c      	adds	r3, #44	; 0x2c
 8015482:	4618      	mov	r0, r3
 8015484:	f7ff ffb6 	bl	80153f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8015488:	687a      	ldr	r2, [r7, #4]
 801548a:	f641 737c 	movw	r3, #8060	; 0x1f7c
 801548e:	4413      	add	r3, r2
 8015490:	4618      	mov	r0, r3
 8015492:	f7ff ffc1 	bl	8015418 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8015496:	687a      	ldr	r2, [r7, #4]
 8015498:	f641 7390 	movw	r3, #8080	; 0x1f90
 801549c:	4413      	add	r3, r2
 801549e:	4618      	mov	r0, r3
 80154a0:	f7fe fa82 	bl	80139a8 <_ZN5ModelC1Ev>
 80154a4:	687a      	ldr	r2, [r7, #4]
 80154a6:	f641 7394 	movw	r3, #8084	; 0x1f94
 80154aa:	4413      	add	r3, r2
 80154ac:	687a      	ldr	r2, [r7, #4]
 80154ae:	f641 7190 	movw	r1, #8080	; 0x1f90
 80154b2:	4411      	add	r1, r2
 80154b4:	687a      	ldr	r2, [r7, #4]
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7fe fa60 	bl	801397c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	687a      	ldr	r2, [r7, #4]
 80154c0:	f641 7394 	movw	r3, #8084	; 0x1f94
 80154c4:	4413      	add	r3, r2
 80154c6:	4619      	mov	r1, r3
 80154c8:	f7ff ff16 	bl	80152f8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	4618      	mov	r0, r3
 80154d0:	3708      	adds	r7, #8
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bdb0      	pop	{r4, r5, r7, pc}
 80154d6:	bf00      	nop
 80154d8:	080297f4 	.word	0x080297f4

080154dc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 80154dc:	b580      	push	{r7, lr}
 80154de:	b086      	sub	sp, #24
 80154e0:	af02      	add	r7, sp, #8
 80154e2:	60f8      	str	r0, [r7, #12]
 80154e4:	60b9      	str	r1, [r7, #8]
 80154e6:	607a      	str	r2, [r7, #4]
 80154e8:	603b      	str	r3, [r7, #0]
 80154ea:	68f8      	ldr	r0, [r7, #12]
 80154ec:	8bbb      	ldrh	r3, [r7, #28]
 80154ee:	9301      	str	r3, [sp, #4]
 80154f0:	8b3b      	ldrh	r3, [r7, #24]
 80154f2:	9300      	str	r3, [sp, #0]
 80154f4:	683b      	ldr	r3, [r7, #0]
 80154f6:	687a      	ldr	r2, [r7, #4]
 80154f8:	68b9      	ldr	r1, [r7, #8]
 80154fa:	f7ff fe5f 	bl	80151bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80154fe:	4a04      	ldr	r2, [pc, #16]	; (8015510 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	601a      	str	r2, [r3, #0]
    }
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	4618      	mov	r0, r3
 8015508:	3710      	adds	r7, #16
 801550a:	46bd      	mov	sp, r7
 801550c:	bd80      	pop	{r7, pc}
 801550e:	bf00      	nop
 8015510:	080298c8 	.word	0x080298c8

08015514 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8015514:	b580      	push	{r7, lr}
 8015516:	b086      	sub	sp, #24
 8015518:	af02      	add	r7, sp, #8
 801551a:	60f8      	str	r0, [r7, #12]
 801551c:	60b9      	str	r1, [r7, #8]
 801551e:	607a      	str	r2, [r7, #4]
 8015520:	603b      	str	r3, [r7, #0]
 8015522:	68f8      	ldr	r0, [r7, #12]
 8015524:	8bbb      	ldrh	r3, [r7, #28]
 8015526:	9301      	str	r3, [sp, #4]
 8015528:	8b3b      	ldrh	r3, [r7, #24]
 801552a:	9300      	str	r3, [sp, #0]
 801552c:	683b      	ldr	r3, [r7, #0]
 801552e:	687a      	ldr	r2, [r7, #4]
 8015530:	68b9      	ldr	r1, [r7, #8]
 8015532:	f7ff ffd3 	bl	80154dc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015536:	4a04      	ldr	r2, [pc, #16]	; (8015548 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	601a      	str	r2, [r3, #0]
    }
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	4618      	mov	r0, r3
 8015540:	3710      	adds	r7, #16
 8015542:	46bd      	mov	sp, r7
 8015544:	bd80      	pop	{r7, pc}
 8015546:	bf00      	nop
 8015548:	080295b4 	.word	0x080295b4

0801554c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 801554c:	b480      	push	{r7}
 801554e:	b083      	sub	sp, #12
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	4a04      	ldr	r2, [pc, #16]	; (8015568 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	601a      	str	r2, [r3, #0]
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	4618      	mov	r0, r3
 801555e:	370c      	adds	r7, #12
 8015560:	46bd      	mov	sp, r7
 8015562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015566:	4770      	bx	lr
 8015568:	0802959c 	.word	0x0802959c

0801556c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 801556c:	b580      	push	{r7, lr}
 801556e:	b082      	sub	sp, #8
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	4618      	mov	r0, r3
 8015578:	f7ff ffe8 	bl	801554c <_ZN8touchgfx15TouchControllerC1Ev>
 801557c:	4a03      	ldr	r2, [pc, #12]	; (801558c <_ZN20STM32TouchControllerC1Ev+0x20>)
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	601a      	str	r2, [r3, #0]
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	4618      	mov	r0, r3
 8015586:	3708      	adds	r7, #8
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}
 801558c:	08029584 	.word	0x08029584

08015590 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8015590:	b590      	push	{r4, r7, lr}
 8015592:	b085      	sub	sp, #20
 8015594:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8015596:	f7fd ffcd 	bl	8013534 <_ZN14BitmapDatabase11getInstanceEv>
 801559a:	4604      	mov	r4, r0
 801559c:	f7fd ffd4 	bl	8013548 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80155a0:	4603      	mov	r3, r0
 80155a2:	4619      	mov	r1, r3
 80155a4:	2300      	movs	r3, #0
 80155a6:	9300      	str	r3, [sp, #0]
 80155a8:	2300      	movs	r3, #0
 80155aa:	2200      	movs	r2, #0
 80155ac:	4620      	mov	r0, r4
 80155ae:	f007 fdb1 	bl	801d114 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 80155b2:	4809      	ldr	r0, [pc, #36]	; (80155d8 <touchgfx_init+0x48>)
 80155b4:	f7ff fd5c 	bl	8015070 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 80155b8:	2000      	movs	r0, #0
 80155ba:	f7fe f8fd 	bl	80137b8 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80155be:	4807      	ldr	r0, [pc, #28]	; (80155dc <touchgfx_init+0x4c>)
 80155c0:	f007 fcf2 	bl	801cfa8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 80155c4:	f7ff fec8 	bl	8015358 <_ZN12FrontendHeap11getInstanceEv>
 80155c8:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 80155ca:	4805      	ldr	r0, [pc, #20]	; (80155e0 <touchgfx_init+0x50>)
 80155cc:	f7fe ffd2 	bl	8014574 <_ZN11TouchGFXHAL10initializeEv>
}
 80155d0:	bf00      	nop
 80155d2:	370c      	adds	r7, #12
 80155d4:	46bd      	mov	sp, r7
 80155d6:	bd90      	pop	{r4, r7, pc}
 80155d8:	2000b348 	.word	0x2000b348
 80155dc:	2000003c 	.word	0x2000003c
 80155e0:	2000b34c 	.word	0x2000b34c

080155e4 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80155e8:	4802      	ldr	r0, [pc, #8]	; (80155f4 <touchgfx_taskEntry+0x10>)
 80155ea:	f001 f948 	bl	801687e <_ZN8touchgfx3HAL9taskEntryEv>
}
 80155ee:	bf00      	nop
 80155f0:	bd80      	pop	{r7, pc}
 80155f2:	bf00      	nop
 80155f4:	2000b34c 	.word	0x2000b34c

080155f8 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b082      	sub	sp, #8
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
 8015600:	4a11      	ldr	r2, [pc, #68]	; (8015648 <_ZN12FrontendHeapD1Ev+0x50>)
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	601a      	str	r2, [r3, #0]
 8015606:	687a      	ldr	r2, [r7, #4]
 8015608:	f641 7394 	movw	r3, #8084	; 0x1f94
 801560c:	4413      	add	r3, r2
 801560e:	4618      	mov	r0, r3
 8015610:	f7fe f97e 	bl	8013910 <_ZN19FrontendApplicationD1Ev>
 8015614:	687a      	ldr	r2, [r7, #4]
 8015616:	f641 737c 	movw	r3, #8060	; 0x1f7c
 801561a:	4413      	add	r3, r2
 801561c:	4618      	mov	r0, r3
 801561e:	f000 f827 	bl	8015670 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	332c      	adds	r3, #44	; 0x2c
 8015626:	4618      	mov	r0, r3
 8015628:	f000 f844 	bl	80156b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	3314      	adds	r3, #20
 8015630:	4618      	mov	r0, r3
 8015632:	f000 f863 	bl	80156fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	4618      	mov	r0, r3
 801563a:	f7ff fea7 	bl	801538c <_ZN16FrontendHeapBaseD1Ev>
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	4618      	mov	r0, r3
 8015642:	3708      	adds	r7, #8
 8015644:	46bd      	mov	sp, r7
 8015646:	bd80      	pop	{r7, pc}
 8015648:	080297f4 	.word	0x080297f4

0801564c <_ZN12FrontendHeapD0Ev>:
 801564c:	b580      	push	{r7, lr}
 801564e:	b082      	sub	sp, #8
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
 8015654:	6878      	ldr	r0, [r7, #4]
 8015656:	f7ff ffcf 	bl	80155f8 <_ZN12FrontendHeapD1Ev>
 801565a:	f242 01ec 	movw	r1, #8428	; 0x20ec
 801565e:	6878      	ldr	r0, [r7, #4]
 8015660:	f011 fbc8 	bl	8026df4 <_ZdlPvj>
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	4618      	mov	r0, r3
 8015668:	3708      	adds	r7, #8
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}
	...

08015670 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8015670:	b580      	push	{r7, lr}
 8015672:	b082      	sub	sp, #8
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
 8015678:	4a05      	ldr	r2, [pc, #20]	; (8015690 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	601a      	str	r2, [r3, #0]
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	4618      	mov	r0, r3
 8015682:	f000 fc21 	bl	8015ec8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	4618      	mov	r0, r3
 801568a:	3708      	adds	r7, #8
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}
 8015690:	08029808 	.word	0x08029808

08015694 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8015694:	b580      	push	{r7, lr}
 8015696:	b082      	sub	sp, #8
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	f7ff ffe7 	bl	8015670 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80156a2:	2114      	movs	r1, #20
 80156a4:	6878      	ldr	r0, [r7, #4]
 80156a6:	f011 fba5 	bl	8026df4 <_ZdlPvj>
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	4618      	mov	r0, r3
 80156ae:	3708      	adds	r7, #8
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}

080156b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b082      	sub	sp, #8
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
 80156bc:	4a05      	ldr	r2, [pc, #20]	; (80156d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	601a      	str	r2, [r3, #0]
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	4618      	mov	r0, r3
 80156c6:	f000 fbff 	bl	8015ec8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	4618      	mov	r0, r3
 80156ce:	3708      	adds	r7, #8
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd80      	pop	{r7, pc}
 80156d4:	0802983c 	.word	0x0802983c

080156d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80156d8:	b580      	push	{r7, lr}
 80156da:	b082      	sub	sp, #8
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
 80156e0:	6878      	ldr	r0, [r7, #4]
 80156e2:	f7ff ffe7 	bl	80156b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80156e6:	f641 7150 	movw	r1, #8016	; 0x1f50
 80156ea:	6878      	ldr	r0, [r7, #4]
 80156ec:	f011 fb82 	bl	8026df4 <_ZdlPvj>
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	4618      	mov	r0, r3
 80156f4:	3708      	adds	r7, #8
 80156f6:	46bd      	mov	sp, r7
 80156f8:	bd80      	pop	{r7, pc}
	...

080156fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b082      	sub	sp, #8
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
 8015704:	4a05      	ldr	r2, [pc, #20]	; (801571c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	601a      	str	r2, [r3, #0]
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	4618      	mov	r0, r3
 801570e:	f000 fbdb 	bl	8015ec8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	4618      	mov	r0, r3
 8015716:	3708      	adds	r7, #8
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}
 801571c:	08029870 	.word	0x08029870

08015720 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8015720:	b580      	push	{r7, lr}
 8015722:	b082      	sub	sp, #8
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
 8015728:	6878      	ldr	r0, [r7, #4]
 801572a:	f7ff ffe7 	bl	80156fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801572e:	2118      	movs	r1, #24
 8015730:	6878      	ldr	r0, [r7, #4]
 8015732:	f011 fb5f 	bl	8026df4 <_ZdlPvj>
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	4618      	mov	r0, r3
 801573a:	3708      	adds	r7, #8
 801573c:	46bd      	mov	sp, r7
 801573e:	bd80      	pop	{r7, pc}

08015740 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8015740:	b580      	push	{r7, lr}
 8015742:	b082      	sub	sp, #8
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
 8015748:	4a05      	ldr	r2, [pc, #20]	; (8015760 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	601a      	str	r2, [r3, #0]
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	4618      	mov	r0, r3
 8015752:	f7ff fcdd 	bl	8015110 <_ZN8touchgfx3LCDD1Ev>
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	4618      	mov	r0, r3
 801575a:	3708      	adds	r7, #8
 801575c:	46bd      	mov	sp, r7
 801575e:	bd80      	pop	{r7, pc}
 8015760:	0802c488 	.word	0x0802c488

08015764 <_ZN8touchgfx8LCD24bppD0Ev>:
 8015764:	b580      	push	{r7, lr}
 8015766:	b082      	sub	sp, #8
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
 801576c:	6878      	ldr	r0, [r7, #4]
 801576e:	f7ff ffe7 	bl	8015740 <_ZN8touchgfx8LCD24bppD1Ev>
 8015772:	2158      	movs	r1, #88	; 0x58
 8015774:	6878      	ldr	r0, [r7, #4]
 8015776:	f011 fb3d 	bl	8026df4 <_ZdlPvj>
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	4618      	mov	r0, r3
 801577e:	3708      	adds	r7, #8
 8015780:	46bd      	mov	sp, r7
 8015782:	bd80      	pop	{r7, pc}

08015784 <_Z41__static_initialization_and_destruction_0ii>:
 8015784:	b580      	push	{r7, lr}
 8015786:	b084      	sub	sp, #16
 8015788:	af02      	add	r7, sp, #8
 801578a:	6078      	str	r0, [r7, #4]
 801578c:	6039      	str	r1, [r7, #0]
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	2b01      	cmp	r3, #1
 8015792:	d119      	bne.n	80157c8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8015794:	683b      	ldr	r3, [r7, #0]
 8015796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801579a:	4293      	cmp	r3, r2
 801579c:	d114      	bne.n	80157c8 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 801579e:	4818      	ldr	r0, [pc, #96]	; (8015800 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80157a0:	f7ff fee4 	bl	801556c <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 80157a4:	4817      	ldr	r0, [pc, #92]	; (8015804 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80157a6:	f7ff f961 	bl	8014a6c <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 80157aa:	4817      	ldr	r0, [pc, #92]	; (8015808 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80157ac:	f009 feda 	bl	801f564 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80157b0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80157b4:	9301      	str	r3, [sp, #4]
 80157b6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80157ba:	9300      	str	r3, [sp, #0]
 80157bc:	4b10      	ldr	r3, [pc, #64]	; (8015800 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80157be:	4a12      	ldr	r2, [pc, #72]	; (8015808 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80157c0:	4910      	ldr	r1, [pc, #64]	; (8015804 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80157c2:	4812      	ldr	r0, [pc, #72]	; (801580c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80157c4:	f7ff fea6 	bl	8015514 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d113      	bne.n	80157f6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80157ce:	683b      	ldr	r3, [r7, #0]
 80157d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80157d4:	4293      	cmp	r3, r2
 80157d6:	d10e      	bne.n	80157f6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80157d8:	480c      	ldr	r0, [pc, #48]	; (801580c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80157da:	f7fe ff43 	bl	8014664 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80157de:	480c      	ldr	r0, [pc, #48]	; (8015810 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80157e0:	f7f9 fc4a 	bl	800f078 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80157e4:	4808      	ldr	r0, [pc, #32]	; (8015808 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80157e6:	f7ff ffab 	bl	8015740 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 80157ea:	4806      	ldr	r0, [pc, #24]	; (8015804 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80157ec:	f7ff f968 	bl	8014ac0 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 80157f0:	4803      	ldr	r0, [pc, #12]	; (8015800 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80157f2:	f7fe fc9b 	bl	801412c <_ZN20STM32TouchControllerD1Ev>
}
 80157f6:	bf00      	nop
 80157f8:	3708      	adds	r7, #8
 80157fa:	46bd      	mov	sp, r7
 80157fc:	bd80      	pop	{r7, pc}
 80157fe:	bf00      	nop
 8015800:	2000a6cc 	.word	0x2000a6cc
 8015804:	2000a6d0 	.word	0x2000a6d0
 8015808:	2000b2f0 	.word	0x2000b2f0
 801580c:	2000b34c 	.word	0x2000b34c
 8015810:	2000003c 	.word	0x2000003c

08015814 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity
     */
    virtual uint16_t capacity() const
 8015814:	b480      	push	{r7}
 8015816:	b083      	sub	sp, #12
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 801581c:	2301      	movs	r3, #1
    }
 801581e:	4618      	mov	r0, r3
 8015820:	370c      	adds	r7, #12
 8015822:	46bd      	mov	sp, r7
 8015824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015828:	4770      	bx	lr

0801582a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size
     */
    virtual uint32_t element_size()
 801582a:	b480      	push	{r7}
 801582c:	b083      	sub	sp, #12
 801582e:	af00      	add	r7, sp, #0
 8015830:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8015832:	230c      	movs	r3, #12
    }
 8015834:	4618      	mov	r0, r3
 8015836:	370c      	adds	r7, #12
 8015838:	46bd      	mov	sp, r7
 801583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801583e:	4770      	bx	lr

08015840 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual void* element(uint16_t index)
 8015840:	b480      	push	{r7}
 8015842:	b083      	sub	sp, #12
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
 8015848:	460b      	mov	r3, r1
 801584a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801584c:	887a      	ldrh	r2, [r7, #2]
 801584e:	4613      	mov	r3, r2
 8015850:	005b      	lsls	r3, r3, #1
 8015852:	4413      	add	r3, r2
 8015854:	009b      	lsls	r3, r3, #2
 8015856:	3308      	adds	r3, #8
 8015858:	687a      	ldr	r2, [r7, #4]
 801585a:	4413      	add	r3, r2
    }
 801585c:	4618      	mov	r0, r3
 801585e:	370c      	adds	r7, #12
 8015860:	46bd      	mov	sp, r7
 8015862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015866:	4770      	bx	lr

08015868 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element
     */
    virtual const void* element(uint16_t index) const
 8015868:	b480      	push	{r7}
 801586a:	b083      	sub	sp, #12
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
 8015870:	460b      	mov	r3, r1
 8015872:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015874:	887a      	ldrh	r2, [r7, #2]
 8015876:	4613      	mov	r3, r2
 8015878:	005b      	lsls	r3, r3, #1
 801587a:	4413      	add	r3, r2
 801587c:	009b      	lsls	r3, r3, #2
 801587e:	3308      	adds	r3, #8
 8015880:	687a      	ldr	r2, [r7, #4]
 8015882:	4413      	add	r3, r2
    }
 8015884:	4618      	mov	r0, r3
 8015886:	370c      	adds	r7, #12
 8015888:	46bd      	mov	sp, r7
 801588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588e:	4770      	bx	lr

08015890 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8015890:	b480      	push	{r7}
 8015892:	b083      	sub	sp, #12
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015898:	2301      	movs	r3, #1
    }
 801589a:	4618      	mov	r0, r3
 801589c:	370c      	adds	r7, #12
 801589e:	46bd      	mov	sp, r7
 80158a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a4:	4770      	bx	lr

080158a6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80158a6:	b480      	push	{r7}
 80158a8:	b083      	sub	sp, #12
 80158aa:	af00      	add	r7, sp, #0
 80158ac:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80158ae:	f641 7348 	movw	r3, #8008	; 0x1f48
    }
 80158b2:	4618      	mov	r0, r3
 80158b4:	370c      	adds	r7, #12
 80158b6:	46bd      	mov	sp, r7
 80158b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158bc:	4770      	bx	lr

080158be <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80158be:	b480      	push	{r7}
 80158c0:	b083      	sub	sp, #12
 80158c2:	af00      	add	r7, sp, #0
 80158c4:	6078      	str	r0, [r7, #4]
 80158c6:	460b      	mov	r3, r1
 80158c8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80158ca:	887b      	ldrh	r3, [r7, #2]
 80158cc:	f641 7248 	movw	r2, #8008	; 0x1f48
 80158d0:	fb02 f303 	mul.w	r3, r2, r3
 80158d4:	3308      	adds	r3, #8
 80158d6:	687a      	ldr	r2, [r7, #4]
 80158d8:	4413      	add	r3, r2
    }
 80158da:	4618      	mov	r0, r3
 80158dc:	370c      	adds	r7, #12
 80158de:	46bd      	mov	sp, r7
 80158e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e4:	4770      	bx	lr

080158e6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80158e6:	b480      	push	{r7}
 80158e8:	b083      	sub	sp, #12
 80158ea:	af00      	add	r7, sp, #0
 80158ec:	6078      	str	r0, [r7, #4]
 80158ee:	460b      	mov	r3, r1
 80158f0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80158f2:	887b      	ldrh	r3, [r7, #2]
 80158f4:	f641 7248 	movw	r2, #8008	; 0x1f48
 80158f8:	fb02 f303 	mul.w	r3, r2, r3
 80158fc:	3308      	adds	r3, #8
 80158fe:	687a      	ldr	r2, [r7, #4]
 8015900:	4413      	add	r3, r2
    }
 8015902:	4618      	mov	r0, r3
 8015904:	370c      	adds	r7, #12
 8015906:	46bd      	mov	sp, r7
 8015908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801590c:	4770      	bx	lr

0801590e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801590e:	b480      	push	{r7}
 8015910:	b083      	sub	sp, #12
 8015912:	af00      	add	r7, sp, #0
 8015914:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015916:	2301      	movs	r3, #1
    }
 8015918:	4618      	mov	r0, r3
 801591a:	370c      	adds	r7, #12
 801591c:	46bd      	mov	sp, r7
 801591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015922:	4770      	bx	lr

08015924 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8015924:	b480      	push	{r7}
 8015926:	b083      	sub	sp, #12
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801592c:	2310      	movs	r3, #16
    }
 801592e:	4618      	mov	r0, r3
 8015930:	370c      	adds	r7, #12
 8015932:	46bd      	mov	sp, r7
 8015934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015938:	4770      	bx	lr

0801593a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801593a:	b480      	push	{r7}
 801593c:	b083      	sub	sp, #12
 801593e:	af00      	add	r7, sp, #0
 8015940:	6078      	str	r0, [r7, #4]
 8015942:	460b      	mov	r3, r1
 8015944:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015946:	887b      	ldrh	r3, [r7, #2]
 8015948:	011b      	lsls	r3, r3, #4
 801594a:	3308      	adds	r3, #8
 801594c:	687a      	ldr	r2, [r7, #4]
 801594e:	4413      	add	r3, r2
    }
 8015950:	4618      	mov	r0, r3
 8015952:	370c      	adds	r7, #12
 8015954:	46bd      	mov	sp, r7
 8015956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801595a:	4770      	bx	lr

0801595c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801595c:	b480      	push	{r7}
 801595e:	b083      	sub	sp, #12
 8015960:	af00      	add	r7, sp, #0
 8015962:	6078      	str	r0, [r7, #4]
 8015964:	460b      	mov	r3, r1
 8015966:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015968:	887b      	ldrh	r3, [r7, #2]
 801596a:	011b      	lsls	r3, r3, #4
 801596c:	3308      	adds	r3, #8
 801596e:	687a      	ldr	r2, [r7, #4]
 8015970:	4413      	add	r3, r2
    }
 8015972:	4618      	mov	r0, r3
 8015974:	370c      	adds	r7, #12
 8015976:	46bd      	mov	sp, r7
 8015978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597c:	4770      	bx	lr

0801597e <_GLOBAL__sub_I_touchgfx_init>:
 801597e:	b580      	push	{r7, lr}
 8015980:	af00      	add	r7, sp, #0
 8015982:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015986:	2001      	movs	r0, #1
 8015988:	f7ff fefc 	bl	8015784 <_Z41__static_initialization_and_destruction_0ii>
 801598c:	bd80      	pop	{r7, pc}

0801598e <_GLOBAL__sub_D_touchgfx_init>:
 801598e:	b580      	push	{r7, lr}
 8015990:	af00      	add	r7, sp, #0
 8015992:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015996:	2000      	movs	r0, #0
 8015998:	f7ff fef4 	bl	8015784 <_Z41__static_initialization_and_destruction_0ii>
 801599c:	bd80      	pop	{r7, pc}

0801599e <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 801599e:	b580      	push	{r7, lr}
 80159a0:	b082      	sub	sp, #8
 80159a2:	af00      	add	r7, sp, #0
 80159a4:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	3318      	adds	r3, #24
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	4798      	blx	r3
    }
 80159b2:	bf00      	nop
 80159b4:	3708      	adds	r7, #8
 80159b6:	46bd      	mov	sp, r7
 80159b8:	bd80      	pop	{r7, pc}

080159ba <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80159ba:	b480      	push	{r7}
 80159bc:	b083      	sub	sp, #12
 80159be:	af00      	add	r7, sp, #0
 80159c0:	6078      	str	r0, [r7, #4]
 80159c2:	460b      	mov	r3, r1
 80159c4:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	78fa      	ldrb	r2, [r7, #3]
 80159ca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80159ce:	bf00      	nop
 80159d0:	370c      	adds	r7, #12
 80159d2:	46bd      	mov	sp, r7
 80159d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d8:	4770      	bx	lr

080159da <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80159da:	b480      	push	{r7}
 80159dc:	b083      	sub	sp, #12
 80159de:	af00      	add	r7, sp, #0
 80159e0:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80159e8:	3301      	adds	r3, #1
 80159ea:	b2da      	uxtb	r2, r3
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80159f2:	bf00      	nop
 80159f4:	370c      	adds	r7, #12
 80159f6:	46bd      	mov	sp, r7
 80159f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fc:	4770      	bx	lr
	...

08015a00 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b082      	sub	sp, #8
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
 8015a08:	460b      	mov	r3, r1
 8015a0a:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8015a0c:	78fb      	ldrb	r3, [r7, #3]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d002      	beq.n	8015a18 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8015a12:	78fb      	ldrb	r3, [r7, #3]
 8015a14:	2b02      	cmp	r3, #2
 8015a16:	d105      	bne.n	8015a24 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	78fa      	ldrb	r2, [r7, #3]
 8015a1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8015a20:	2301      	movs	r3, #1
 8015a22:	e027      	b.n	8015a74 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8015a24:	78fb      	ldrb	r3, [r7, #3]
 8015a26:	2b01      	cmp	r3, #1
 8015a28:	d123      	bne.n	8015a72 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d014      	beq.n	8015a5c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	3380      	adds	r3, #128	; 0x80
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	6878      	ldr	r0, [r7, #4]
 8015a3c:	4798      	blx	r3
 8015a3e:	4603      	mov	r3, r0
 8015a40:	461a      	mov	r2, r3
 8015a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015a46:	429a      	cmp	r2, r3
 8015a48:	d008      	beq.n	8015a5c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015a4a:	4b0c      	ldr	r3, [pc, #48]	; (8015a7c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8015a4c:	781b      	ldrb	r3, [r3, #0]
 8015a4e:	f083 0301 	eor.w	r3, r3, #1
 8015a52:	b2db      	uxtb	r3, r3
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d001      	beq.n	8015a5c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015a58:	2301      	movs	r3, #1
 8015a5a:	e000      	b.n	8015a5e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d005      	beq.n	8015a6e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	78fa      	ldrb	r2, [r7, #3]
 8015a66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	e002      	b.n	8015a74 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	e000      	b.n	8015a74 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8015a72:	2300      	movs	r3, #0
    }
 8015a74:	4618      	mov	r0, r3
 8015a76:	3708      	adds	r7, #8
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	bd80      	pop	{r7, pc}
 8015a7c:	2000b3d2 	.word	0x2000b3d2

08015a80 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8015a80:	b480      	push	{r7}
 8015a82:	b083      	sub	sp, #12
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
 8015a88:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	683a      	ldr	r2, [r7, #0]
 8015a8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8015a90:	bf00      	nop
 8015a92:	370c      	adds	r7, #12
 8015a94:	46bd      	mov	sp, r7
 8015a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9a:	4770      	bx	lr

08015a9c <__NVIC_EnableIRQ>:
{
 8015a9c:	b480      	push	{r7}
 8015a9e:	b083      	sub	sp, #12
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	db0d      	blt.n	8015aca <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015ab2:	b2db      	uxtb	r3, r3
 8015ab4:	f003 021f 	and.w	r2, r3, #31
 8015ab8:	4907      	ldr	r1, [pc, #28]	; (8015ad8 <__NVIC_EnableIRQ+0x3c>)
 8015aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015abe:	095b      	lsrs	r3, r3, #5
 8015ac0:	2001      	movs	r0, #1
 8015ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8015ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015aca:	bf00      	nop
 8015acc:	370c      	adds	r7, #12
 8015ace:	46bd      	mov	sp, r7
 8015ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad4:	4770      	bx	lr
 8015ad6:	bf00      	nop
 8015ad8:	e000e100 	.word	0xe000e100

08015adc <__NVIC_DisableIRQ>:
{
 8015adc:	b480      	push	{r7}
 8015ade:	b083      	sub	sp, #12
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	db12      	blt.n	8015b14 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015af2:	b2db      	uxtb	r3, r3
 8015af4:	f003 021f 	and.w	r2, r3, #31
 8015af8:	4909      	ldr	r1, [pc, #36]	; (8015b20 <__NVIC_DisableIRQ+0x44>)
 8015afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015afe:	095b      	lsrs	r3, r3, #5
 8015b00:	2001      	movs	r0, #1
 8015b02:	fa00 f202 	lsl.w	r2, r0, r2
 8015b06:	3320      	adds	r3, #32
 8015b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8015b0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8015b10:	f3bf 8f6f 	isb	sy
}
 8015b14:	bf00      	nop
 8015b16:	370c      	adds	r7, #12
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1e:	4770      	bx	lr
 8015b20:	e000e100 	.word	0xe000e100

08015b24 <__NVIC_SetPriority>:
{
 8015b24:	b480      	push	{r7}
 8015b26:	b083      	sub	sp, #12
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	6039      	str	r1, [r7, #0]
 8015b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	db0c      	blt.n	8015b52 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015b38:	683b      	ldr	r3, [r7, #0]
 8015b3a:	b2db      	uxtb	r3, r3
 8015b3c:	4a0e      	ldr	r2, [pc, #56]	; (8015b78 <__NVIC_SetPriority+0x54>)
 8015b3e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8015b42:	4608      	mov	r0, r1
 8015b44:	011b      	lsls	r3, r3, #4
 8015b46:	b2d9      	uxtb	r1, r3
 8015b48:	1813      	adds	r3, r2, r0
 8015b4a:	460a      	mov	r2, r1
 8015b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015b50:	e00c      	b.n	8015b6c <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015b52:	683b      	ldr	r3, [r7, #0]
 8015b54:	b2da      	uxtb	r2, r3
 8015b56:	4909      	ldr	r1, [pc, #36]	; (8015b7c <__NVIC_SetPriority+0x58>)
 8015b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015b5c:	b2db      	uxtb	r3, r3
 8015b5e:	f003 030f 	and.w	r3, r3, #15
 8015b62:	3b04      	subs	r3, #4
 8015b64:	0112      	lsls	r2, r2, #4
 8015b66:	b2d2      	uxtb	r2, r2
 8015b68:	440b      	add	r3, r1
 8015b6a:	761a      	strb	r2, [r3, #24]
}
 8015b6c:	bf00      	nop
 8015b6e:	370c      	adds	r7, #12
 8015b70:	46bd      	mov	sp, r7
 8015b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b76:	4770      	bx	lr
 8015b78:	e000e100 	.word	0xe000e100
 8015b7c:	e000ed00 	.word	0xe000ed00

08015b80 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8015b80:	b5b0      	push	{r4, r5, r7, lr}
 8015b82:	b082      	sub	sp, #8
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	f001 f93c 	bl	8016e08 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 8015b90:	687d      	ldr	r5, [r7, #4]
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	334c      	adds	r3, #76	; 0x4c
 8015b98:	681c      	ldr	r4, [r3, #0]
 8015b9a:	f005 f92d 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	4619      	mov	r1, r3
 8015ba2:	4628      	mov	r0, r5
 8015ba4:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	490d      	ldr	r1, [pc, #52]	; (8015be0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8015baa:	4618      	mov	r0, r3
 8015bac:	f7ff ff68 	bl	8015a80 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2101      	movs	r1, #1
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f7ff ff23 	bl	8015a00 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8015bba:	6878      	ldr	r0, [r7, #4]
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	3374      	adds	r3, #116	; 0x74
 8015bc2:	681c      	ldr	r4, [r3, #0]
 8015bc4:	2300      	movs	r3, #0
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8015bcc:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	2101      	movs	r1, #1
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f7ff fef1 	bl	80159ba <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8015bd8:	bf00      	nop
 8015bda:	3708      	adds	r7, #8
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bdb0      	pop	{r4, r5, r7, pc}
 8015be0:	080147b9 	.word	0x080147b9

08015be4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b082      	sub	sp, #8
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8015bec:	2109      	movs	r1, #9
 8015bee:	205a      	movs	r0, #90	; 0x5a
 8015bf0:	f7ff ff98 	bl	8015b24 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8015bf4:	2109      	movs	r1, #9
 8015bf6:	2058      	movs	r0, #88	; 0x58
 8015bf8:	f7ff ff94 	bl	8015b24 <__NVIC_SetPriority>
}
 8015bfc:	bf00      	nop
 8015bfe:	3708      	adds	r7, #8
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}

08015c04 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b082      	sub	sp, #8
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8015c0c:	205a      	movs	r0, #90	; 0x5a
 8015c0e:	f7ff ff45 	bl	8015a9c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8015c12:	2058      	movs	r0, #88	; 0x58
 8015c14:	f7ff ff42 	bl	8015a9c <__NVIC_EnableIRQ>
}
 8015c18:	bf00      	nop
 8015c1a:	3708      	adds	r7, #8
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	bd80      	pop	{r7, pc}

08015c20 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b082      	sub	sp, #8
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8015c28:	205a      	movs	r0, #90	; 0x5a
 8015c2a:	f7ff ff57 	bl	8015adc <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8015c2e:	2058      	movs	r0, #88	; 0x58
 8015c30:	f7ff ff54 	bl	8015adc <__NVIC_DisableIRQ>
}
 8015c34:	bf00      	nop
 8015c36:	3708      	adds	r7, #8
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	bd80      	pop	{r7, pc}

08015c3c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8015c3c:	b480      	push	{r7}
 8015c3e:	b083      	sub	sp, #12
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8015c44:	4b11      	ldr	r3, [pc, #68]	; (8015c8c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015c46:	68db      	ldr	r3, [r3, #12]
 8015c48:	b29b      	uxth	r3, r3
 8015c4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015c4e:	b29b      	uxth	r3, r3
 8015c50:	3b01      	subs	r3, #1
 8015c52:	b29a      	uxth	r2, r3
 8015c54:	4b0e      	ldr	r3, [pc, #56]	; (8015c90 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8015c56:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8015c58:	4b0c      	ldr	r3, [pc, #48]	; (8015c8c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015c5a:	691b      	ldr	r3, [r3, #16]
 8015c5c:	b29b      	uxth	r3, r3
 8015c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015c62:	b29b      	uxth	r3, r3
 8015c64:	3b01      	subs	r3, #1
 8015c66:	b29a      	uxth	r2, r3
 8015c68:	4b0a      	ldr	r3, [pc, #40]	; (8015c94 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8015c6a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8015c6c:	4b08      	ldr	r3, [pc, #32]	; (8015c90 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8015c6e:	881a      	ldrh	r2, [r3, #0]
 8015c70:	4b06      	ldr	r3, [pc, #24]	; (8015c8c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015c72:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8015c74:	4b05      	ldr	r3, [pc, #20]	; (8015c8c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c78:	4a04      	ldr	r2, [pc, #16]	; (8015c8c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015c7a:	f043 0301 	orr.w	r3, r3, #1
 8015c7e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8015c80:	bf00      	nop
 8015c82:	370c      	adds	r7, #12
 8015c84:	46bd      	mov	sp, r7
 8015c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8a:	4770      	bx	lr
 8015c8c:	40016800 	.word	0x40016800
 8015c90:	2000b3c4 	.word	0x2000b3c4
 8015c94:	2000b3c6 	.word	0x2000b3c6

08015c98 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8015c98:	b480      	push	{r7}
 8015c9a:	b083      	sub	sp, #12
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8015ca0:	4b03      	ldr	r3, [pc, #12]	; (8015cb0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8015ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	370c      	adds	r7, #12
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cae:	4770      	bx	lr
 8015cb0:	40016884 	.word	0x40016884

08015cb4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8015cb4:	b480      	push	{r7}
 8015cb6:	b083      	sub	sp, #12
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	6078      	str	r0, [r7, #4]
 8015cbc:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8015cbe:	4a06      	ldr	r2, [pc, #24]	; (8015cd8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8015cc0:	683b      	ldr	r3, [r7, #0]
 8015cc2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8015cc4:	4b05      	ldr	r3, [pc, #20]	; (8015cdc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8015cc6:	2201      	movs	r2, #1
 8015cc8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015cca:	bf00      	nop
 8015ccc:	370c      	adds	r7, #12
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd4:	4770      	bx	lr
 8015cd6:	bf00      	nop
 8015cd8:	40016884 	.word	0x40016884
 8015cdc:	40016800 	.word	0x40016800

08015ce0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b082      	sub	sp, #8
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6078      	str	r0, [r7, #4]
 8015ce8:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	6839      	ldr	r1, [r7, #0]
 8015cee:	4618      	mov	r0, r3
 8015cf0:	f000 fd9b 	bl	801682a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8015cf4:	bf00      	nop
 8015cf6:	3708      	adds	r7, #8
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	bd80      	pop	{r7, pc}

08015cfc <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8015cfc:	b480      	push	{r7}
 8015cfe:	b085      	sub	sp, #20
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8015d04:	4b0d      	ldr	r3, [pc, #52]	; (8015d3c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8015d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d08:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8015d0a:	4b0c      	ldr	r3, [pc, #48]	; (8015d3c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8015d0c:	68db      	ldr	r3, [r3, #12]
 8015d0e:	b29b      	uxth	r3, r3
 8015d10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015d14:	b29b      	uxth	r3, r3
 8015d16:	3301      	adds	r3, #1
 8015d18:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8015d1a:	89fa      	ldrh	r2, [r7, #14]
 8015d1c:	89bb      	ldrh	r3, [r7, #12]
 8015d1e:	429a      	cmp	r2, r3
 8015d20:	d201      	bcs.n	8015d26 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8015d22:	2300      	movs	r3, #0
 8015d24:	e003      	b.n	8015d2e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8015d26:	89fa      	ldrh	r2, [r7, #14]
 8015d28:	89bb      	ldrh	r3, [r7, #12]
 8015d2a:	1ad3      	subs	r3, r2, r3
 8015d2c:	b29b      	uxth	r3, r3
    }
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3714      	adds	r7, #20
 8015d32:	46bd      	mov	sp, r7
 8015d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d38:	4770      	bx	lr
 8015d3a:	bf00      	nop
 8015d3c:	40016800 	.word	0x40016800

08015d40 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b082      	sub	sp, #8
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8015d48:	4b1a      	ldr	r3, [pc, #104]	; (8015db4 <HAL_LTDC_LineEventCallback+0x74>)
 8015d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d4c:	4a1a      	ldr	r2, [pc, #104]	; (8015db8 <HAL_LTDC_LineEventCallback+0x78>)
 8015d4e:	8812      	ldrh	r2, [r2, #0]
 8015d50:	4293      	cmp	r3, r2
 8015d52:	bf0c      	ite	eq
 8015d54:	2301      	moveq	r3, #1
 8015d56:	2300      	movne	r3, #0
 8015d58:	b2db      	uxtb	r3, r3
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d017      	beq.n	8015d8e <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8015d5e:	4b17      	ldr	r3, [pc, #92]	; (8015dbc <HAL_LTDC_LineEventCallback+0x7c>)
 8015d60:	881b      	ldrh	r3, [r3, #0]
 8015d62:	4619      	mov	r1, r3
 8015d64:	6878      	ldr	r0, [r7, #4]
 8015d66:	f7ef fed1 	bl	8005b0c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8015d6a:	f7f9 fd15 	bl	800f798 <_ZN8touchgfx3HAL11getInstanceEv>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	4618      	mov	r0, r3
 8015d72:	f7ff fe32 	bl	80159da <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8015d76:	f7fe fcff 	bl	8014778 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8015d7a:	f7f9 fd0d 	bl	800f798 <_ZN8touchgfx3HAL11getInstanceEv>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	4618      	mov	r0, r3
 8015d82:	f001 fac9 	bl	8017318 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8015d86:	2000      	movs	r0, #0
 8015d88:	f7fe f9f2 	bl	8014170 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8015d8c:	e00e      	b.n	8015dac <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8015d8e:	4b0a      	ldr	r3, [pc, #40]	; (8015db8 <HAL_LTDC_LineEventCallback+0x78>)
 8015d90:	881b      	ldrh	r3, [r3, #0]
 8015d92:	4619      	mov	r1, r3
 8015d94:	6878      	ldr	r0, [r7, #4]
 8015d96:	f7ef feb9 	bl	8005b0c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8015d9a:	2000      	movs	r0, #0
 8015d9c:	f7fe f9f3 	bl	8014186 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8015da0:	f7f9 fcfa 	bl	800f798 <_ZN8touchgfx3HAL11getInstanceEv>
 8015da4:	4603      	mov	r3, r0
 8015da6:	4618      	mov	r0, r3
 8015da8:	f7ff fdf9 	bl	801599e <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8015dac:	bf00      	nop
 8015dae:	3708      	adds	r7, #8
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bd80      	pop	{r7, pc}
 8015db4:	40016800 	.word	0x40016800
 8015db8:	2000b3c4 	.word	0x2000b3c4
 8015dbc:	2000b3c6 	.word	0x2000b3c6

08015dc0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8015dc0:	8880      	ldrh	r0, [r0, #4]
 8015dc2:	4770      	bx	lr

08015dc4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	8083      	strh	r3, [r0, #4]
 8015dc8:	4770      	bx	lr
	...

08015dcc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8015dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dce:	6803      	ldr	r3, [r0, #0]
 8015dd0:	460e      	mov	r6, r1
 8015dd2:	2100      	movs	r1, #0
 8015dd4:	4605      	mov	r5, r0
 8015dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dd8:	4798      	blx	r3
 8015dda:	4604      	mov	r4, r0
 8015ddc:	682b      	ldr	r3, [r5, #0]
 8015dde:	4628      	mov	r0, r5
 8015de0:	1b34      	subs	r4, r6, r4
 8015de2:	6a1b      	ldr	r3, [r3, #32]
 8015de4:	b2a4      	uxth	r4, r4
 8015de6:	4798      	blx	r3
 8015de8:	88ab      	ldrh	r3, [r5, #4]
 8015dea:	fbb4 f4f0 	udiv	r4, r4, r0
 8015dee:	42a3      	cmp	r3, r4
 8015df0:	d805      	bhi.n	8015dfe <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8015df2:	4b0e      	ldr	r3, [pc, #56]	; (8015e2c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8015df4:	2120      	movs	r1, #32
 8015df6:	4a0e      	ldr	r2, [pc, #56]	; (8015e30 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8015df8:	480e      	ldr	r0, [pc, #56]	; (8015e34 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8015dfa:	f011 f827 	bl	8026e4c <__assert_func>
 8015dfe:	682b      	ldr	r3, [r5, #0]
 8015e00:	2100      	movs	r1, #0
 8015e02:	4628      	mov	r0, r5
 8015e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e06:	4798      	blx	r3
 8015e08:	682b      	ldr	r3, [r5, #0]
 8015e0a:	4607      	mov	r7, r0
 8015e0c:	4628      	mov	r0, r5
 8015e0e:	6a1b      	ldr	r3, [r3, #32]
 8015e10:	4798      	blx	r3
 8015e12:	1bf3      	subs	r3, r6, r7
 8015e14:	b29b      	uxth	r3, r3
 8015e16:	fbb3 f2f0 	udiv	r2, r3, r0
 8015e1a:	fb02 3010 	mls	r0, r2, r0, r3
 8015e1e:	b118      	cbz	r0, 8015e28 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8015e20:	4b05      	ldr	r3, [pc, #20]	; (8015e38 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8015e22:	2121      	movs	r1, #33	; 0x21
 8015e24:	4a02      	ldr	r2, [pc, #8]	; (8015e30 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8015e26:	e7e7      	b.n	8015df8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8015e28:	4620      	mov	r0, r4
 8015e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e2c:	08029974 	.word	0x08029974
 8015e30:	08029ae2 	.word	0x08029ae2
 8015e34:	08029989 	.word	0x08029989
 8015e38:	080299b7 	.word	0x080299b7

08015e3c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8015e3c:	b538      	push	{r3, r4, r5, lr}
 8015e3e:	6803      	ldr	r3, [r0, #0]
 8015e40:	460d      	mov	r5, r1
 8015e42:	4604      	mov	r4, r0
 8015e44:	6a1b      	ldr	r3, [r3, #32]
 8015e46:	4798      	blx	r3
 8015e48:	4285      	cmp	r5, r0
 8015e4a:	d905      	bls.n	8015e58 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8015e4c:	4b0c      	ldr	r3, [pc, #48]	; (8015e80 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8015e4e:	2132      	movs	r1, #50	; 0x32
 8015e50:	4a0c      	ldr	r2, [pc, #48]	; (8015e84 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015e52:	480d      	ldr	r0, [pc, #52]	; (8015e88 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8015e54:	f010 fffa 	bl	8026e4c <__assert_func>
 8015e58:	6823      	ldr	r3, [r4, #0]
 8015e5a:	4620      	mov	r0, r4
 8015e5c:	88a5      	ldrh	r5, [r4, #4]
 8015e5e:	69db      	ldr	r3, [r3, #28]
 8015e60:	4798      	blx	r3
 8015e62:	4285      	cmp	r5, r0
 8015e64:	d303      	bcc.n	8015e6e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8015e66:	4b09      	ldr	r3, [pc, #36]	; (8015e8c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8015e68:	2133      	movs	r1, #51	; 0x33
 8015e6a:	4a06      	ldr	r2, [pc, #24]	; (8015e84 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8015e6c:	e7f1      	b.n	8015e52 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8015e6e:	6823      	ldr	r3, [r4, #0]
 8015e70:	4620      	mov	r0, r4
 8015e72:	88a1      	ldrh	r1, [r4, #4]
 8015e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e76:	4798      	blx	r3
 8015e78:	88a3      	ldrh	r3, [r4, #4]
 8015e7a:	3301      	adds	r3, #1
 8015e7c:	80a3      	strh	r3, [r4, #4]
 8015e7e:	bd38      	pop	{r3, r4, r5, pc}
 8015e80:	08029a31 	.word	0x08029a31
 8015e84:	08029b25 	.word	0x08029b25
 8015e88:	08029989 	.word	0x08029989
 8015e8c:	08029a48 	.word	0x08029a48

08015e90 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015e90:	b570      	push	{r4, r5, r6, lr}
 8015e92:	6803      	ldr	r3, [r0, #0]
 8015e94:	4616      	mov	r6, r2
 8015e96:	4604      	mov	r4, r0
 8015e98:	460d      	mov	r5, r1
 8015e9a:	6a1b      	ldr	r3, [r3, #32]
 8015e9c:	4798      	blx	r3
 8015e9e:	4286      	cmp	r6, r0
 8015ea0:	d905      	bls.n	8015eae <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8015ea2:	4b06      	ldr	r3, [pc, #24]	; (8015ebc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8015ea4:	213c      	movs	r1, #60	; 0x3c
 8015ea6:	4a06      	ldr	r2, [pc, #24]	; (8015ec0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8015ea8:	4806      	ldr	r0, [pc, #24]	; (8015ec4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8015eaa:	f010 ffcf 	bl	8026e4c <__assert_func>
 8015eae:	6823      	ldr	r3, [r4, #0]
 8015eb0:	4629      	mov	r1, r5
 8015eb2:	4620      	mov	r0, r4
 8015eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015eba:	4718      	bx	r3
 8015ebc:	08029a31 	.word	0x08029a31
 8015ec0:	08029a98 	.word	0x08029a98
 8015ec4:	08029989 	.word	0x08029989

08015ec8 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8015ec8:	4770      	bx	lr
	...

08015ecc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8015ecc:	4a02      	ldr	r2, [pc, #8]	; (8015ed8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8015ece:	6002      	str	r2, [r0, #0]
 8015ed0:	2200      	movs	r2, #0
 8015ed2:	8082      	strh	r2, [r0, #4]
 8015ed4:	4770      	bx	lr
 8015ed6:	bf00      	nop
 8015ed8:	08029a6c 	.word	0x08029a6c

08015edc <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8015edc:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 8015ee0:	4770      	bx	lr

08015ee2 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 8015ee2:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8015ee6:	4770      	bx	lr

08015ee8 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8015ee8:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8015eec:	4770      	bx	lr

08015eee <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 8015eee:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 8015ef2:	4770      	bx	lr

08015ef4 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8015ef4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015ef8:	4617      	mov	r7, r2
 8015efa:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8015efe:	2200      	movs	r2, #0
 8015f00:	4604      	mov	r4, r0
 8015f02:	460e      	mov	r6, r1
 8015f04:	4698      	mov	r8, r3
 8015f06:	4611      	mov	r1, r2
 8015f08:	9500      	str	r5, [sp, #0]
 8015f0a:	3090      	adds	r0, #144	; 0x90
 8015f0c:	f7fa fd7c 	bl	8010a08 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015f10:	4643      	mov	r3, r8
 8015f12:	463a      	mov	r2, r7
 8015f14:	4631      	mov	r1, r6
 8015f16:	4620      	mov	r0, r4
 8015f18:	9508      	str	r5, [sp, #32]
 8015f1a:	b002      	add	sp, #8
 8015f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f20:	f000 b99e 	b.w	8016260 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08015f24 <_ZN8touchgfx11BoxProgress8setValueEi>:
 8015f24:	b530      	push	{r4, r5, lr}
 8015f26:	4604      	mov	r4, r0
 8015f28:	b085      	sub	sp, #20
 8015f2a:	f000 f9e3 	bl	80162f4 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8015f2e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8015f32:	2b03      	cmp	r3, #3
 8015f34:	d814      	bhi.n	8015f60 <_ZN8touchgfx11BoxProgress8setValueEi+0x3c>
 8015f36:	e8df f003 	tbb	[pc, r3]
 8015f3a:	0202      	.short	0x0202
 8015f3c:	1010      	.short	0x1010
 8015f3e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8015f42:	4620      	mov	r0, r4
 8015f44:	f000 fa28 	bl	8016398 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8015f48:	b200      	sxth	r0, r0
 8015f4a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8015f4e:	2b03      	cmp	r3, #3
 8015f50:	d830      	bhi.n	8015fb4 <_ZN8touchgfx11BoxProgress8setValueEi+0x90>
 8015f52:	e8df f003 	tbb	[pc, r3]
 8015f56:	3107      	.short	0x3107
 8015f58:	6442      	.short	0x6442
 8015f5a:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8015f5e:	e7f0      	b.n	8015f42 <_ZN8touchgfx11BoxProgress8setValueEi+0x1e>
 8015f60:	2000      	movs	r0, #0
 8015f62:	e7f2      	b.n	8015f4a <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8015f64:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015f68:	2200      	movs	r2, #0
 8015f6a:	f9b4 5098 	ldrsh.w	r5, [r4, #152]	; 0x98
 8015f6e:	9300      	str	r3, [sp, #0]
 8015f70:	4611      	mov	r1, r2
 8015f72:	4603      	mov	r3, r0
 8015f74:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8015f78:	f7fa fd46 	bl	8010a08 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015f7c:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
 8015f80:	4629      	mov	r1, r5
 8015f82:	429d      	cmp	r5, r3
 8015f84:	eba5 0503 	sub.w	r5, r5, r3
 8015f88:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 8015f8c:	bfa8      	it	ge
 8015f8e:	4619      	movge	r1, r3
 8015f90:	2d00      	cmp	r5, #0
 8015f92:	f8ad 200e 	strh.w	r2, [sp, #14]
 8015f96:	f8ad 1008 	strh.w	r1, [sp, #8]
 8015f9a:	f04f 0100 	mov.w	r1, #0
 8015f9e:	bfb8      	it	lt
 8015fa0:	426d      	neglt	r5, r5
 8015fa2:	f8ad 100a 	strh.w	r1, [sp, #10]
 8015fa6:	f8ad 500c 	strh.w	r5, [sp, #12]
 8015faa:	a902      	add	r1, sp, #8
 8015fac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015fb0:	f005 fb91 	bl	801b6d6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
 8015fb4:	b005      	add	sp, #20
 8015fb6:	bd30      	pop	{r4, r5, pc}
 8015fb8:	8921      	ldrh	r1, [r4, #8]
 8015fba:	2200      	movs	r2, #0
 8015fbc:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8015fc0:	1a09      	subs	r1, r1, r0
 8015fc2:	f9b4 5094 	ldrsh.w	r5, [r4, #148]	; 0x94
 8015fc6:	9300      	str	r3, [sp, #0]
 8015fc8:	4603      	mov	r3, r0
 8015fca:	b209      	sxth	r1, r1
 8015fcc:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8015fd0:	f7fa fd1a 	bl	8010a08 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015fd4:	f9b4 3094 	ldrsh.w	r3, [r4, #148]	; 0x94
 8015fd8:	e7d2      	b.n	8015f80 <_ZN8touchgfx11BoxProgress8setValueEi+0x5c>
 8015fda:	2200      	movs	r2, #0
 8015fdc:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8015fe0:	9000      	str	r0, [sp, #0]
 8015fe2:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8015fe6:	4611      	mov	r1, r2
 8015fe8:	f9b4 509a 	ldrsh.w	r5, [r4, #154]	; 0x9a
 8015fec:	f7fa fd0c 	bl	8010a08 <_ZN8touchgfx8Drawable11setPositionEssss>
 8015ff0:	f9b4 309a 	ldrsh.w	r3, [r4, #154]	; 0x9a
 8015ff4:	2100      	movs	r1, #0
 8015ff6:	429d      	cmp	r5, r3
 8015ff8:	f9b4 2098 	ldrsh.w	r2, [r4, #152]	; 0x98
 8015ffc:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016000:	4629      	mov	r1, r5
 8016002:	eba5 0503 	sub.w	r5, r5, r3
 8016006:	bfa8      	it	ge
 8016008:	4619      	movge	r1, r3
 801600a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801600e:	2d00      	cmp	r5, #0
 8016010:	f8ad 100a 	strh.w	r1, [sp, #10]
 8016014:	bfb8      	it	lt
 8016016:	426d      	neglt	r5, r5
 8016018:	f8ad 500e 	strh.w	r5, [sp, #14]
 801601c:	e7c5      	b.n	8015faa <_ZN8touchgfx11BoxProgress8setValueEi+0x86>
 801601e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8016022:	2100      	movs	r1, #0
 8016024:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016028:	1a12      	subs	r2, r2, r0
 801602a:	9000      	str	r0, [sp, #0]
 801602c:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8016030:	f9b4 5096 	ldrsh.w	r5, [r4, #150]	; 0x96
 8016034:	b212      	sxth	r2, r2
 8016036:	f7fa fce7 	bl	8010a08 <_ZN8touchgfx8Drawable11setPositionEssss>
 801603a:	f9b4 3096 	ldrsh.w	r3, [r4, #150]	; 0x96
 801603e:	e7d9      	b.n	8015ff4 <_ZN8touchgfx11BoxProgress8setValueEi+0xd0>

08016040 <_ZN8touchgfx11BoxProgressC1Ev>:
 8016040:	b510      	push	{r4, lr}
 8016042:	4604      	mov	r4, r0
 8016044:	f000 f848 	bl	80160d8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8016048:	2201      	movs	r2, #1
 801604a:	4b16      	ldr	r3, [pc, #88]	; (80160a4 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 801604c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016050:	f104 0190 	add.w	r1, r4, #144	; 0x90
 8016054:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8016058:	4a13      	ldr	r2, [pc, #76]	; (80160a8 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 801605a:	6023      	str	r3, [r4, #0]
 801605c:	2300      	movs	r3, #0
 801605e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8016062:	22ff      	movs	r2, #255	; 0xff
 8016064:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8016068:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 801606c:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8016070:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8016074:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8016078:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 801607c:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8016080:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8016084:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8016088:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 801608c:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8016090:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8016094:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8016098:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 801609c:	f000 fa7c 	bl	8016598 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80160a0:	4620      	mov	r0, r4
 80160a2:	bd10      	pop	{r4, pc}
 80160a4:	08029b6c 	.word	0x08029b6c
 80160a8:	0802afa4 	.word	0x0802afa4

080160ac <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 80160ac:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 80160b0:	4770      	bx	lr

080160b2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 80160b2:	b570      	push	{r4, r5, r6, lr}
 80160b4:	4604      	mov	r4, r0
 80160b6:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 80160ba:	3058      	adds	r0, #88	; 0x58
 80160bc:	f005 faa8 	bl	801b610 <_ZNK8touchgfx8Drawable10invalidateEv>
 80160c0:	6823      	ldr	r3, [r4, #0]
 80160c2:	4620      	mov	r0, r4
 80160c4:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 80160c8:	4798      	blx	r3
 80160ca:	4601      	mov	r1, r0
 80160cc:	462b      	mov	r3, r5
 80160ce:	4620      	mov	r0, r4
 80160d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160d4:	4718      	bx	r3
	...

080160d8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 80160d8:	b510      	push	{r4, lr}
 80160da:	4604      	mov	r4, r0
 80160dc:	f000 f97c 	bl	80163d8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80160e0:	4b03      	ldr	r3, [pc, #12]	; (80160f0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 80160e2:	2100      	movs	r1, #0
 80160e4:	4620      	mov	r0, r4
 80160e6:	6023      	str	r3, [r4, #0]
 80160e8:	f7ff ffe3 	bl	80160b2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 80160ec:	4620      	mov	r0, r4
 80160ee:	bd10      	pop	{r4, pc}
 80160f0:	08029c44 	.word	0x08029c44

080160f4 <_ZNK8touchgfx12LineProgress8getStartERiS1_>:
 80160f4:	b530      	push	{r4, r5, lr}
 80160f6:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
 80160fa:	2520      	movs	r5, #32
 80160fc:	fb94 f4f5 	sdiv	r4, r4, r5
 8016100:	600c      	str	r4, [r1, #0]
 8016102:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8016106:	fb93 f3f5 	sdiv	r3, r3, r5
 801610a:	6013      	str	r3, [r2, #0]
 801610c:	bd30      	pop	{r4, r5, pc}

0801610e <_ZN8touchgfx12LineProgress6setEndEii>:
 801610e:	0149      	lsls	r1, r1, #5
 8016110:	0152      	lsls	r2, r2, #5
 8016112:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
 8016116:	f8c0 2110 	str.w	r2, [r0, #272]	; 0x110
 801611a:	4770      	bx	lr

0801611c <_ZNK8touchgfx12LineProgress6getEndERiS1_>:
 801611c:	b530      	push	{r4, r5, lr}
 801611e:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
 8016122:	2520      	movs	r5, #32
 8016124:	fb94 f4f5 	sdiv	r4, r4, r5
 8016128:	600c      	str	r4, [r1, #0]
 801612a:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 801612e:	fb93 f3f5 	sdiv	r3, r3, r5
 8016132:	6013      	str	r3, [r2, #0]
 8016134:	bd30      	pop	{r4, r5, pc}

08016136 <_ZNK8touchgfx12LineProgress12getLineWidthEv>:
 8016136:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
 801613a:	2320      	movs	r3, #32
 801613c:	fb90 f0f3 	sdiv	r0, r0, r3
 8016140:	4770      	bx	lr

08016142 <_ZN8touchgfx12LineProgress8setAlphaEh>:
 8016142:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
 8016146:	4770      	bx	lr

08016148 <_ZNK8touchgfx12LineProgress8getAlphaEv>:
 8016148:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
 801614c:	4770      	bx	lr

0801614e <_ZN8touchgfx12LineProgress28setProgressIndicatorPositionEssss>:
 801614e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016152:	4617      	mov	r7, r2
 8016154:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8016158:	2200      	movs	r2, #0
 801615a:	4604      	mov	r4, r0
 801615c:	460e      	mov	r6, r1
 801615e:	4698      	mov	r8, r3
 8016160:	4611      	mov	r1, r2
 8016162:	9500      	str	r5, [sp, #0]
 8016164:	3090      	adds	r0, #144	; 0x90
 8016166:	f7fa fc4f 	bl	8010a08 <_ZN8touchgfx8Drawable11setPositionEssss>
 801616a:	4643      	mov	r3, r8
 801616c:	463a      	mov	r2, r7
 801616e:	4631      	mov	r1, r6
 8016170:	4620      	mov	r0, r4
 8016172:	9508      	str	r5, [sp, #32]
 8016174:	b002      	add	sp, #8
 8016176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801617a:	f000 b871 	b.w	8016260 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0801617e <_ZN8touchgfx12LineProgress10setPainterERNS_15AbstractPainterE>:
 801617e:	3090      	adds	r0, #144	; 0x90
 8016180:	f002 b810 	b.w	80181a4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

08016184 <_ZN8touchgfx12LineProgress8setStartEii>:
 8016184:	0149      	lsls	r1, r1, #5
 8016186:	3090      	adds	r0, #144	; 0x90
 8016188:	0152      	lsls	r2, r2, #5
 801618a:	6741      	str	r1, [r0, #116]	; 0x74
 801618c:	6782      	str	r2, [r0, #120]	; 0x78
 801618e:	f002 bae5 	b.w	801875c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>

08016192 <_ZN8touchgfx12LineProgress12setLineWidthEi>:
 8016192:	0149      	lsls	r1, r1, #5
 8016194:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
 8016198:	4299      	cmp	r1, r3
 801619a:	d004      	beq.n	80161a6 <_ZN8touchgfx12LineProgress12setLineWidthEi+0x14>
 801619c:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
 80161a0:	3090      	adds	r0, #144	; 0x90
 80161a2:	f002 b9b7 	b.w	8018514 <_ZN8touchgfx4Line17updateCachedShapeEv>
 80161a6:	4770      	bx	lr

080161a8 <_ZN8touchgfx12LineProgress18setLineEndingStyleENS_4Line17LINE_ENDING_STYLEE>:
 80161a8:	3090      	adds	r0, #144	; 0x90
 80161aa:	f002 bb06 	b.w	80187ba <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

080161ae <_ZNK8touchgfx12LineProgress18getLineEndingStyleEv>:
 80161ae:	3090      	adds	r0, #144	; 0x90
 80161b0:	f002 b9ac 	b.w	801850c <_ZNK8touchgfx4Line18getLineEndingStyleEv>

080161b4 <_ZN8touchgfx12LineProgress8setValueEi>:
 80161b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161b6:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
 80161ba:	4604      	mov	r4, r0
 80161bc:	b33b      	cbz	r3, 801620e <_ZN8touchgfx12LineProgress8setValueEi+0x5a>
 80161be:	f000 f899 	bl	80162f4 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80161c2:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 80161c6:	4620      	mov	r0, r4
 80161c8:	2720      	movs	r7, #32
 80161ca:	f000 f8e5 	bl	8016398 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80161ce:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
 80161d2:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
 80161d6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 80161da:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 80161de:	1a5b      	subs	r3, r3, r1
 80161e0:	f8b4 608a 	ldrh.w	r6, [r4, #138]	; 0x8a
 80161e4:	1aad      	subs	r5, r5, r2
 80161e6:	015b      	lsls	r3, r3, #5
 80161e8:	016d      	lsls	r5, r5, #5
 80161ea:	fb93 f3f6 	sdiv	r3, r3, r6
 80161ee:	fb95 f5f6 	sdiv	r5, r5, r6
 80161f2:	4343      	muls	r3, r0
 80161f4:	4368      	muls	r0, r5
 80161f6:	fb93 f3f7 	sdiv	r3, r3, r7
 80161fa:	fb90 f0f7 	sdiv	r0, r0, r7
 80161fe:	4419      	add	r1, r3
 8016200:	4402      	add	r2, r0
 8016202:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8016206:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801620a:	f002 bab2 	b.w	8018772 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_>
 801620e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016210 <_ZN8touchgfx12LineProgressC1Ev>:
 8016210:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016212:	4604      	mov	r4, r0
 8016214:	f000 f8e0 	bl	80163d8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8016218:	4b10      	ldr	r3, [pc, #64]	; (801625c <_ZN8touchgfx12LineProgressC1Ev+0x4c>)
 801621a:	2600      	movs	r6, #0
 801621c:	4625      	mov	r5, r4
 801621e:	f845 3b90 	str.w	r3, [r5], #144
 8016222:	4628      	mov	r0, r5
 8016224:	f002 f952 	bl	80184cc <_ZN8touchgfx4LineC1Ev>
 8016228:	4629      	mov	r1, r5
 801622a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801622e:	f8c4 6104 	str.w	r6, [r4, #260]	; 0x104
 8016232:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
 8016236:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 801623a:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 801623e:	f000 f9ab 	bl	8016598 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016242:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8016246:	4628      	mov	r0, r5
 8016248:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801624c:	9200      	str	r2, [sp, #0]
 801624e:	4631      	mov	r1, r6
 8016250:	4632      	mov	r2, r6
 8016252:	f7fa fbd9 	bl	8010a08 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016256:	4620      	mov	r0, r4
 8016258:	b002      	add	sp, #8
 801625a:	bd70      	pop	{r4, r5, r6, pc}
 801625c:	08029d0c 	.word	0x08029d0c

08016260 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8016260:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016264:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8016268:	4604      	mov	r4, r0
 801626a:	460e      	mov	r6, r1
 801626c:	4698      	mov	r8, r3
 801626e:	9700      	str	r7, [sp, #0]
 8016270:	3058      	adds	r0, #88	; 0x58
 8016272:	4615      	mov	r5, r2
 8016274:	f7fa fbc8 	bl	8010a08 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016278:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801627c:	eb06 0308 	add.w	r3, r6, r8
 8016280:	429a      	cmp	r2, r3
 8016282:	eb05 0207 	add.w	r2, r5, r7
 8016286:	bfb8      	it	lt
 8016288:	8123      	strhlt	r3, [r4, #8]
 801628a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801628e:	4293      	cmp	r3, r2
 8016290:	bfb8      	it	lt
 8016292:	8162      	strhlt	r2, [r4, #10]
 8016294:	b002      	add	sp, #8
 8016296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801629a <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 801629a:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 801629e:	4770      	bx	lr

080162a0 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 80162a0:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 80162a4:	4770      	bx	lr

080162a6 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 80162a6:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 80162aa:	4770      	bx	lr

080162ac <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 80162ac:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 80162b0:	4770      	bx	lr

080162b2 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 80162b2:	b510      	push	{r4, lr}
 80162b4:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 80162b8:	800c      	strh	r4, [r1, #0]
 80162ba:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 80162be:	8011      	strh	r1, [r2, #0]
 80162c0:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 80162c4:	801a      	strh	r2, [r3, #0]
 80162c6:	9b02      	ldr	r3, [sp, #8]
 80162c8:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 80162cc:	801a      	strh	r2, [r3, #0]
 80162ce:	bd10      	pop	{r4, pc}

080162d0 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 80162d0:	b510      	push	{r4, lr}
 80162d2:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 80162d6:	800c      	strh	r4, [r1, #0]
 80162d8:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 80162dc:	8011      	strh	r1, [r2, #0]
 80162de:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 80162e2:	801a      	strh	r2, [r3, #0]
 80162e4:	bd10      	pop	{r4, pc}

080162e6 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 80162e6:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 80162ea:	800b      	strh	r3, [r1, #0]
 80162ec:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 80162f0:	8013      	strh	r3, [r2, #0]
 80162f2:	4770      	bx	lr

080162f4 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 80162f4:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 80162f8:	4299      	cmp	r1, r3
 80162fa:	bfb8      	it	lt
 80162fc:	4619      	movlt	r1, r3
 80162fe:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8016302:	4299      	cmp	r1, r3
 8016304:	bfa8      	it	ge
 8016306:	4619      	movge	r1, r3
 8016308:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 801630c:	4770      	bx	lr

0801630e <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 801630e:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 8016312:	4770      	bx	lr

08016314 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8016314:	b510      	push	{r4, lr}
 8016316:	4604      	mov	r4, r0
 8016318:	302c      	adds	r0, #44	; 0x2c
 801631a:	f003 f82b 	bl	8019374 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801631e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016320:	8123      	strh	r3, [r4, #8]
 8016322:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8016324:	8163      	strh	r3, [r4, #10]
 8016326:	bd10      	pop	{r4, pc}

08016328 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 8016328:	4291      	cmp	r1, r2
 801632a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801632e:	4604      	mov	r4, r0
 8016330:	460e      	mov	r6, r1
 8016332:	4615      	mov	r5, r2
 8016334:	4698      	mov	r8, r3
 8016336:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801633a:	db05      	blt.n	8016348 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 801633c:	4b12      	ldr	r3, [pc, #72]	; (8016388 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 801633e:	2149      	movs	r1, #73	; 0x49
 8016340:	4a12      	ldr	r2, [pc, #72]	; (801638c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8016342:	4813      	ldr	r0, [pc, #76]	; (8016390 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 8016344:	f010 fd82 	bl	8026e4c <__assert_func>
 8016348:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 801634c:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 8016350:	6803      	ldr	r3, [r0, #0]
 8016352:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 8016356:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801635a:	4798      	blx	r3
 801635c:	f1b8 0f00 	cmp.w	r8, #0
 8016360:	d10c      	bne.n	801637c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 8016362:	1bad      	subs	r5, r5, r6
 8016364:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 8016368:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 801636c:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8016370:	42bb      	cmp	r3, r7
 8016372:	d806      	bhi.n	8016382 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 8016374:	4b07      	ldr	r3, [pc, #28]	; (8016394 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 8016376:	2156      	movs	r1, #86	; 0x56
 8016378:	4a04      	ldr	r2, [pc, #16]	; (801638c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801637a:	e7e2      	b.n	8016342 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 801637c:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 8016380:	e7f2      	b.n	8016368 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 8016382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016386:	bf00      	nop
 8016388:	08029df0 	.word	0x08029df0
 801638c:	08029f2c 	.word	0x08029f2c
 8016390:	08029dfa 	.word	0x08029dfa
 8016394:	08029e51 	.word	0x08029e51

08016398 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8016398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801639a:	4604      	mov	r4, r0
 801639c:	460d      	mov	r5, r1
 801639e:	b1b9      	cbz	r1, 80163d0 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 80163a0:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 80163a4:	ab01      	add	r3, sp, #4
 80163a6:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 80163aa:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 80163ae:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 80163b2:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 80163b6:	1a12      	subs	r2, r2, r0
 80163b8:	1b89      	subs	r1, r1, r6
 80163ba:	1a38      	subs	r0, r7, r0
 80163bc:	f005 fab8 	bl	801b930 <_ZN8touchgfx6muldivElllRl>
 80163c0:	4629      	mov	r1, r5
 80163c2:	ab01      	add	r3, sp, #4
 80163c4:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 80163c8:	4430      	add	r0, r6
 80163ca:	f005 fab1 	bl	801b930 <_ZN8touchgfx6muldivElllRl>
 80163ce:	b285      	uxth	r5, r0
 80163d0:	4628      	mov	r0, r5
 80163d2:	b003      	add	sp, #12
 80163d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080163d8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 80163d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80163dc:	4604      	mov	r4, r0
 80163de:	2600      	movs	r6, #0
 80163e0:	f7fb f8fc 	bl	80115dc <_ZN8touchgfx8DrawableC1Ev>
 80163e4:	4b1d      	ldr	r3, [pc, #116]	; (801645c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 80163e6:	4625      	mov	r5, r4
 80163e8:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80163ec:	af02      	add	r7, sp, #8
 80163ee:	2226      	movs	r2, #38	; 0x26
 80163f0:	4631      	mov	r1, r6
 80163f2:	62a6      	str	r6, [r4, #40]	; 0x28
 80163f4:	f845 3b2c 	str.w	r3, [r5], #44
 80163f8:	4628      	mov	r0, r5
 80163fa:	f827 8d04 	strh.w	r8, [r7, #-4]!
 80163fe:	f010 fdae 	bl	8026f5e <memset>
 8016402:	4628      	mov	r0, r5
 8016404:	f7fb f8ea 	bl	80115dc <_ZN8touchgfx8DrawableC1Ev>
 8016408:	4b15      	ldr	r3, [pc, #84]	; (8016460 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x88>)
 801640a:	4639      	mov	r1, r7
 801640c:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8016410:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016412:	4628      	mov	r0, r5
 8016414:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 8016418:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 801641c:	f002 ffaa 	bl	8019374 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016420:	4638      	mov	r0, r7
 8016422:	f7fb f8db 	bl	80115dc <_ZN8touchgfx8DrawableC1Ev>
 8016426:	4b0f      	ldr	r3, [pc, #60]	; (8016464 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x8c>)
 8016428:	4632      	mov	r2, r6
 801642a:	4631      	mov	r1, r6
 801642c:	65a3      	str	r3, [r4, #88]	; 0x58
 801642e:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8016432:	4628      	mov	r0, r5
 8016434:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 8016438:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 801643c:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 8016440:	f7fa fb2d 	bl	8010a9e <_ZN8touchgfx8Drawable5setXYEss>
 8016444:	4629      	mov	r1, r5
 8016446:	4620      	mov	r0, r4
 8016448:	f000 f8a6 	bl	8016598 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801644c:	4620      	mov	r0, r4
 801644e:	4639      	mov	r1, r7
 8016450:	f000 f8a2 	bl	8016598 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016454:	4620      	mov	r0, r4
 8016456:	b002      	add	sp, #8
 8016458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801645c:	08029e74 	.word	0x08029e74
 8016460:	0802b114 	.word	0x0802b114
 8016464:	0802a060 	.word	0x0802a060

08016468 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8016468:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801646a:	2000      	movs	r0, #0
 801646c:	b12b      	cbz	r3, 801647a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801646e:	b920      	cbnz	r0, 801647a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016470:	1a5a      	subs	r2, r3, r1
 8016472:	699b      	ldr	r3, [r3, #24]
 8016474:	4250      	negs	r0, r2
 8016476:	4150      	adcs	r0, r2
 8016478:	e7f8      	b.n	801646c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801647a:	4770      	bx	lr

0801647c <_ZN8touchgfx9Container9removeAllEv>:
 801647c:	2200      	movs	r2, #0
 801647e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016480:	b123      	cbz	r3, 801648c <_ZN8touchgfx9Container9removeAllEv+0x10>
 8016482:	6999      	ldr	r1, [r3, #24]
 8016484:	6281      	str	r1, [r0, #40]	; 0x28
 8016486:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801648a:	e7f8      	b.n	801647e <_ZN8touchgfx9Container9removeAllEv+0x2>
 801648c:	4770      	bx	lr

0801648e <_ZN8touchgfx9Container6unlinkEv>:
 801648e:	2300      	movs	r3, #0
 8016490:	6283      	str	r3, [r0, #40]	; 0x28
 8016492:	4770      	bx	lr

08016494 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8016494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016498:	461f      	mov	r7, r3
 801649a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801649e:	460d      	mov	r5, r1
 80164a0:	4616      	mov	r6, r2
 80164a2:	b103      	cbz	r3, 80164a6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80164a4:	6038      	str	r0, [r7, #0]
 80164a6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80164a8:	b314      	cbz	r4, 80164f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80164aa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80164ae:	b1eb      	cbz	r3, 80164ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80164b0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80164b4:	428d      	cmp	r5, r1
 80164b6:	db19      	blt.n	80164ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80164b8:	b289      	uxth	r1, r1
 80164ba:	8923      	ldrh	r3, [r4, #8]
 80164bc:	440b      	add	r3, r1
 80164be:	b21b      	sxth	r3, r3
 80164c0:	429d      	cmp	r5, r3
 80164c2:	da13      	bge.n	80164ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80164c4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80164c8:	4296      	cmp	r6, r2
 80164ca:	db0f      	blt.n	80164ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80164cc:	b292      	uxth	r2, r2
 80164ce:	8963      	ldrh	r3, [r4, #10]
 80164d0:	4413      	add	r3, r2
 80164d2:	b21b      	sxth	r3, r3
 80164d4:	429e      	cmp	r6, r3
 80164d6:	da09      	bge.n	80164ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80164d8:	6823      	ldr	r3, [r4, #0]
 80164da:	1ab2      	subs	r2, r6, r2
 80164dc:	1a69      	subs	r1, r5, r1
 80164de:	4620      	mov	r0, r4
 80164e0:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80164e4:	b212      	sxth	r2, r2
 80164e6:	463b      	mov	r3, r7
 80164e8:	b209      	sxth	r1, r1
 80164ea:	47c0      	blx	r8
 80164ec:	69a4      	ldr	r4, [r4, #24]
 80164ee:	e7db      	b.n	80164a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80164f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080164f4 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80164f4:	2200      	movs	r2, #0
 80164f6:	8002      	strh	r2, [r0, #0]
 80164f8:	8042      	strh	r2, [r0, #2]
 80164fa:	8082      	strh	r2, [r0, #4]
 80164fc:	80c2      	strh	r2, [r0, #6]
 80164fe:	4770      	bx	lr

08016500 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8016500:	b570      	push	{r4, r5, r6, lr}
 8016502:	460d      	mov	r5, r1
 8016504:	4616      	mov	r6, r2
 8016506:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016508:	b13c      	cbz	r4, 801651a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801650a:	6823      	ldr	r3, [r4, #0]
 801650c:	4620      	mov	r0, r4
 801650e:	4632      	mov	r2, r6
 8016510:	4629      	mov	r1, r5
 8016512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016514:	4798      	blx	r3
 8016516:	69a4      	ldr	r4, [r4, #24]
 8016518:	e7f6      	b.n	8016508 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801651a:	bd70      	pop	{r4, r5, r6, pc}

0801651c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801651c:	b538      	push	{r3, r4, r5, lr}
 801651e:	460d      	mov	r5, r1
 8016520:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016522:	b134      	cbz	r4, 8016532 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8016524:	682b      	ldr	r3, [r5, #0]
 8016526:	4621      	mov	r1, r4
 8016528:	4628      	mov	r0, r5
 801652a:	689b      	ldr	r3, [r3, #8]
 801652c:	4798      	blx	r3
 801652e:	69a4      	ldr	r4, [r4, #24]
 8016530:	e7f7      	b.n	8016522 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016532:	bd38      	pop	{r3, r4, r5, pc}

08016534 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8016534:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016536:	b19b      	cbz	r3, 8016560 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016538:	428b      	cmp	r3, r1
 801653a:	d109      	bne.n	8016550 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801653c:	699a      	ldr	r2, [r3, #24]
 801653e:	2100      	movs	r1, #0
 8016540:	6159      	str	r1, [r3, #20]
 8016542:	6282      	str	r2, [r0, #40]	; 0x28
 8016544:	b902      	cbnz	r2, 8016548 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016546:	4770      	bx	lr
 8016548:	6199      	str	r1, [r3, #24]
 801654a:	4770      	bx	lr
 801654c:	4613      	mov	r3, r2
 801654e:	b13a      	cbz	r2, 8016560 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016550:	699a      	ldr	r2, [r3, #24]
 8016552:	428a      	cmp	r2, r1
 8016554:	d1fa      	bne.n	801654c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8016556:	698a      	ldr	r2, [r1, #24]
 8016558:	619a      	str	r2, [r3, #24]
 801655a:	2300      	movs	r3, #0
 801655c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8016560:	4770      	bx	lr

08016562 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8016562:	b410      	push	{r4}
 8016564:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016566:	4604      	mov	r4, r0
 8016568:	b92b      	cbnz	r3, 8016576 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801656a:	6803      	ldr	r3, [r0, #0]
 801656c:	4611      	mov	r1, r2
 801656e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016574:	4718      	bx	r3
 8016576:	b941      	cbnz	r1, 801658a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8016578:	6193      	str	r3, [r2, #24]
 801657a:	6282      	str	r2, [r0, #40]	; 0x28
 801657c:	6154      	str	r4, [r2, #20]
 801657e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016582:	4770      	bx	lr
 8016584:	4603      	mov	r3, r0
 8016586:	2800      	cmp	r0, #0
 8016588:	d0f9      	beq.n	801657e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801658a:	4299      	cmp	r1, r3
 801658c:	6998      	ldr	r0, [r3, #24]
 801658e:	d1f9      	bne.n	8016584 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8016590:	6190      	str	r0, [r2, #24]
 8016592:	618a      	str	r2, [r1, #24]
 8016594:	e7f2      	b.n	801657c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08016598 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8016598:	4288      	cmp	r0, r1
 801659a:	b508      	push	{r3, lr}
 801659c:	d105      	bne.n	80165aa <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801659e:	4b11      	ldr	r3, [pc, #68]	; (80165e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80165a0:	2123      	movs	r1, #35	; 0x23
 80165a2:	4a11      	ldr	r2, [pc, #68]	; (80165e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80165a4:	4811      	ldr	r0, [pc, #68]	; (80165ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80165a6:	f010 fc51 	bl	8026e4c <__assert_func>
 80165aa:	694b      	ldr	r3, [r1, #20]
 80165ac:	b11b      	cbz	r3, 80165b6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80165ae:	4b10      	ldr	r3, [pc, #64]	; (80165f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80165b0:	2124      	movs	r1, #36	; 0x24
 80165b2:	4a0d      	ldr	r2, [pc, #52]	; (80165e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80165b4:	e7f6      	b.n	80165a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80165b6:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80165ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80165bc:	b913      	cbnz	r3, 80165c4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80165be:	6281      	str	r1, [r0, #40]	; 0x28
 80165c0:	bd08      	pop	{r3, pc}
 80165c2:	4613      	mov	r3, r2
 80165c4:	699a      	ldr	r2, [r3, #24]
 80165c6:	b12a      	cbz	r2, 80165d4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80165c8:	428b      	cmp	r3, r1
 80165ca:	d1fa      	bne.n	80165c2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 80165cc:	4b09      	ldr	r3, [pc, #36]	; (80165f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80165ce:	2135      	movs	r1, #53	; 0x35
 80165d0:	4a05      	ldr	r2, [pc, #20]	; (80165e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80165d2:	e7e7      	b.n	80165a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80165d4:	428b      	cmp	r3, r1
 80165d6:	d103      	bne.n	80165e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 80165d8:	4b06      	ldr	r3, [pc, #24]	; (80165f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80165da:	2138      	movs	r1, #56	; 0x38
 80165dc:	4a02      	ldr	r2, [pc, #8]	; (80165e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80165de:	e7e1      	b.n	80165a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80165e0:	6199      	str	r1, [r3, #24]
 80165e2:	e7ed      	b.n	80165c0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 80165e4:	08029f8d 	.word	0x08029f8d
 80165e8:	0802a0e4 	.word	0x0802a0e4
 80165ec:	08029fb9 	.word	0x08029fb9
 80165f0:	08029fec 	.word	0x08029fec
 80165f4:	0802a022 	.word	0x0802a022

080165f8 <_ZN8touchgfx4RectaNERKS0_>:
 80165f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80165fc:	f9b1 7000 	ldrsh.w	r7, [r1]
 8016600:	888c      	ldrh	r4, [r1, #4]
 8016602:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016606:	443c      	add	r4, r7
 8016608:	b2a4      	uxth	r4, r4
 801660a:	fa0f f884 	sxth.w	r8, r4
 801660e:	45c1      	cmp	r9, r8
 8016610:	da2f      	bge.n	8016672 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016612:	8882      	ldrh	r2, [r0, #4]
 8016614:	444a      	add	r2, r9
 8016616:	b292      	uxth	r2, r2
 8016618:	fa0f fe82 	sxth.w	lr, r2
 801661c:	4577      	cmp	r7, lr
 801661e:	da28      	bge.n	8016672 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016620:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8016624:	88cb      	ldrh	r3, [r1, #6]
 8016626:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801662a:	442b      	add	r3, r5
 801662c:	b21b      	sxth	r3, r3
 801662e:	429e      	cmp	r6, r3
 8016630:	da1f      	bge.n	8016672 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016632:	88c3      	ldrh	r3, [r0, #6]
 8016634:	4433      	add	r3, r6
 8016636:	b29b      	uxth	r3, r3
 8016638:	fa0f fc83 	sxth.w	ip, r3
 801663c:	4565      	cmp	r5, ip
 801663e:	da18      	bge.n	8016672 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016640:	454f      	cmp	r7, r9
 8016642:	bfb8      	it	lt
 8016644:	464f      	movlt	r7, r9
 8016646:	42b5      	cmp	r5, r6
 8016648:	bfb8      	it	lt
 801664a:	4635      	movlt	r5, r6
 801664c:	45f0      	cmp	r8, lr
 801664e:	bfd8      	it	le
 8016650:	4622      	movle	r2, r4
 8016652:	1bd2      	subs	r2, r2, r7
 8016654:	8082      	strh	r2, [r0, #4]
 8016656:	884a      	ldrh	r2, [r1, #2]
 8016658:	88c9      	ldrh	r1, [r1, #6]
 801665a:	8007      	strh	r7, [r0, #0]
 801665c:	440a      	add	r2, r1
 801665e:	8045      	strh	r5, [r0, #2]
 8016660:	b292      	uxth	r2, r2
 8016662:	b211      	sxth	r1, r2
 8016664:	458c      	cmp	ip, r1
 8016666:	bfa8      	it	ge
 8016668:	4613      	movge	r3, r2
 801666a:	1b5b      	subs	r3, r3, r5
 801666c:	80c3      	strh	r3, [r0, #6]
 801666e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016672:	2300      	movs	r3, #0
 8016674:	8003      	strh	r3, [r0, #0]
 8016676:	8043      	strh	r3, [r0, #2]
 8016678:	8083      	strh	r3, [r0, #4]
 801667a:	80c3      	strh	r3, [r0, #6]
 801667c:	e7f7      	b.n	801666e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801667e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801667e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016682:	2b00      	cmp	r3, #0
 8016684:	dd06      	ble.n	8016694 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8016686:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801668a:	2800      	cmp	r0, #0
 801668c:	bfcc      	ite	gt
 801668e:	2000      	movgt	r0, #0
 8016690:	2001      	movle	r0, #1
 8016692:	4770      	bx	lr
 8016694:	2001      	movs	r0, #1
 8016696:	4770      	bx	lr

08016698 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8016698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801669c:	2300      	movs	r3, #0
 801669e:	4604      	mov	r4, r0
 80166a0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80166a2:	8003      	strh	r3, [r0, #0]
 80166a4:	8043      	strh	r3, [r0, #2]
 80166a6:	8083      	strh	r3, [r0, #4]
 80166a8:	80c3      	strh	r3, [r0, #6]
 80166aa:	2d00      	cmp	r5, #0
 80166ac:	d040      	beq.n	8016730 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80166ae:	1d28      	adds	r0, r5, #4
 80166b0:	f7ff ffe5 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 80166b4:	b988      	cbnz	r0, 80166da <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80166b6:	4620      	mov	r0, r4
 80166b8:	f7ff ffe1 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 80166bc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80166c0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80166c4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80166c8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80166cc:	b138      	cbz	r0, 80166de <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80166ce:	8022      	strh	r2, [r4, #0]
 80166d0:	8063      	strh	r3, [r4, #2]
 80166d2:	f8a4 e004 	strh.w	lr, [r4, #4]
 80166d6:	f8a4 c006 	strh.w	ip, [r4, #6]
 80166da:	69ad      	ldr	r5, [r5, #24]
 80166dc:	e7e5      	b.n	80166aa <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80166de:	f9b4 0000 	ldrsh.w	r0, [r4]
 80166e2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80166e6:	4290      	cmp	r0, r2
 80166e8:	4607      	mov	r7, r0
 80166ea:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80166ee:	460e      	mov	r6, r1
 80166f0:	bfa8      	it	ge
 80166f2:	4617      	movge	r7, r2
 80166f4:	4299      	cmp	r1, r3
 80166f6:	4472      	add	r2, lr
 80166f8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80166fc:	bfa8      	it	ge
 80166fe:	461e      	movge	r6, r3
 8016700:	4440      	add	r0, r8
 8016702:	4471      	add	r1, lr
 8016704:	4463      	add	r3, ip
 8016706:	b200      	sxth	r0, r0
 8016708:	8027      	strh	r7, [r4, #0]
 801670a:	b212      	sxth	r2, r2
 801670c:	8066      	strh	r6, [r4, #2]
 801670e:	b209      	sxth	r1, r1
 8016710:	b21b      	sxth	r3, r3
 8016712:	4290      	cmp	r0, r2
 8016714:	bfac      	ite	ge
 8016716:	ebc7 0200 	rsbge	r2, r7, r0
 801671a:	ebc7 0202 	rsblt	r2, r7, r2
 801671e:	4299      	cmp	r1, r3
 8016720:	bfac      	ite	ge
 8016722:	ebc6 0301 	rsbge	r3, r6, r1
 8016726:	ebc6 0303 	rsblt	r3, r6, r3
 801672a:	80a2      	strh	r2, [r4, #4]
 801672c:	80e3      	strh	r3, [r4, #6]
 801672e:	e7d4      	b.n	80166da <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016730:	4620      	mov	r0, r4
 8016732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016736 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8016736:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801673a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801673e:	b383      	cbz	r3, 80167a2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016740:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016742:	b374      	cbz	r4, 80167a2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016744:	f9b1 5000 	ldrsh.w	r5, [r1]
 8016748:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801674c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8016750:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016754:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016758:	b303      	cbz	r3, 801679c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801675a:	4668      	mov	r0, sp
 801675c:	1d21      	adds	r1, r4, #4
 801675e:	f8ad 5000 	strh.w	r5, [sp]
 8016762:	f8ad 6002 	strh.w	r6, [sp, #2]
 8016766:	f8ad 7004 	strh.w	r7, [sp, #4]
 801676a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801676e:	f7ff ff43 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 8016772:	4668      	mov	r0, sp
 8016774:	f7ff ff83 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016778:	b980      	cbnz	r0, 801679c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801677a:	f8bd 3000 	ldrh.w	r3, [sp]
 801677e:	4669      	mov	r1, sp
 8016780:	88a2      	ldrh	r2, [r4, #4]
 8016782:	4620      	mov	r0, r4
 8016784:	1a9b      	subs	r3, r3, r2
 8016786:	88e2      	ldrh	r2, [r4, #6]
 8016788:	f8ad 3000 	strh.w	r3, [sp]
 801678c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016790:	1a9b      	subs	r3, r3, r2
 8016792:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016796:	6823      	ldr	r3, [r4, #0]
 8016798:	689b      	ldr	r3, [r3, #8]
 801679a:	4798      	blx	r3
 801679c:	69a4      	ldr	r4, [r4, #24]
 801679e:	2c00      	cmp	r4, #0
 80167a0:	d1d8      	bne.n	8016754 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80167a2:	b002      	add	sp, #8
 80167a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080167a8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80167a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80167aa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80167ae:	460d      	mov	r5, r1
 80167b0:	4616      	mov	r6, r2
 80167b2:	b323      	cbz	r3, 80167fe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80167b4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80167b6:	b314      	cbz	r4, 80167fe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80167b8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80167bc:	b1eb      	cbz	r3, 80167fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80167be:	6828      	ldr	r0, [r5, #0]
 80167c0:	466b      	mov	r3, sp
 80167c2:	6869      	ldr	r1, [r5, #4]
 80167c4:	c303      	stmia	r3!, {r0, r1}
 80167c6:	4668      	mov	r0, sp
 80167c8:	1d21      	adds	r1, r4, #4
 80167ca:	f7ff ff15 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 80167ce:	4668      	mov	r0, sp
 80167d0:	f7ff ff55 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 80167d4:	b988      	cbnz	r0, 80167fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80167d6:	f8bd 3000 	ldrh.w	r3, [sp]
 80167da:	4669      	mov	r1, sp
 80167dc:	88a2      	ldrh	r2, [r4, #4]
 80167de:	4620      	mov	r0, r4
 80167e0:	1a9b      	subs	r3, r3, r2
 80167e2:	88e2      	ldrh	r2, [r4, #6]
 80167e4:	f8ad 3000 	strh.w	r3, [sp]
 80167e8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80167ec:	1a9b      	subs	r3, r3, r2
 80167ee:	4632      	mov	r2, r6
 80167f0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80167f4:	6823      	ldr	r3, [r4, #0]
 80167f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80167f8:	4798      	blx	r3
 80167fa:	69a4      	ldr	r4, [r4, #24]
 80167fc:	e7db      	b.n	80167b6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80167fe:	b002      	add	sp, #8
 8016800:	bd70      	pop	{r4, r5, r6, pc}

08016802 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8016802:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016806:	4770      	bx	lr

08016808 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8016808:	6803      	ldr	r3, [r0, #0]
 801680a:	b513      	push	{r0, r1, r4, lr}
 801680c:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8016810:	2300      	movs	r3, #0
 8016812:	e9cd 3300 	strd	r3, r3, [sp]
 8016816:	466b      	mov	r3, sp
 8016818:	47a0      	blx	r4
 801681a:	b002      	add	sp, #8
 801681c:	bd10      	pop	{r4, pc}

0801681e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801681e:	2301      	movs	r3, #1
 8016820:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016824:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016828:	4770      	bx	lr

0801682a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801682a:	2301      	movs	r3, #1
 801682c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016830:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016834:	4770      	bx	lr

08016836 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8016836:	6843      	ldr	r3, [r0, #4]
 8016838:	2201      	movs	r2, #1
 801683a:	725a      	strb	r2, [r3, #9]
 801683c:	6840      	ldr	r0, [r0, #4]
 801683e:	6803      	ldr	r3, [r0, #0]
 8016840:	691b      	ldr	r3, [r3, #16]
 8016842:	4718      	bx	r3

08016844 <_ZN8touchgfx3HAL8flushDMAEv>:
 8016844:	6840      	ldr	r0, [r0, #4]
 8016846:	6803      	ldr	r3, [r0, #0]
 8016848:	689b      	ldr	r3, [r3, #8]
 801684a:	4718      	bx	r3

0801684c <_ZN8touchgfx3HAL10beginFrameEv>:
 801684c:	4b04      	ldr	r3, [pc, #16]	; (8016860 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801684e:	781b      	ldrb	r3, [r3, #0]
 8016850:	b123      	cbz	r3, 801685c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8016852:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8016856:	f080 0001 	eor.w	r0, r0, #1
 801685a:	4770      	bx	lr
 801685c:	2001      	movs	r0, #1
 801685e:	4770      	bx	lr
 8016860:	2000b3d2 	.word	0x2000b3d2

08016864 <_ZN8touchgfx3HAL8endFrameEv>:
 8016864:	b510      	push	{r4, lr}
 8016866:	4604      	mov	r4, r0
 8016868:	6840      	ldr	r0, [r0, #4]
 801686a:	6803      	ldr	r3, [r0, #0]
 801686c:	689b      	ldr	r3, [r3, #8]
 801686e:	4798      	blx	r3
 8016870:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8016874:	b113      	cbz	r3, 801687c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8016876:	2301      	movs	r3, #1
 8016878:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801687c:	bd10      	pop	{r4, pc}

0801687e <_ZN8touchgfx3HAL9taskEntryEv>:
 801687e:	b508      	push	{r3, lr}
 8016880:	6803      	ldr	r3, [r0, #0]
 8016882:	4604      	mov	r4, r0
 8016884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016886:	4798      	blx	r3
 8016888:	6823      	ldr	r3, [r4, #0]
 801688a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801688c:	4620      	mov	r0, r4
 801688e:	4798      	blx	r3
 8016890:	f7fd ff7e 	bl	8014790 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8016894:	6823      	ldr	r3, [r4, #0]
 8016896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016898:	e7f8      	b.n	801688c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801689c <_ZN8touchgfx3HAL4tickEv>:
 801689c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801689e:	6803      	ldr	r3, [r0, #0]
 80168a0:	4604      	mov	r4, r0
 80168a2:	4d5c      	ldr	r5, [pc, #368]	; (8016a14 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80168a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80168a8:	4798      	blx	r3
 80168aa:	2800      	cmp	r0, #0
 80168ac:	f000 8097 	beq.w	80169de <_ZN8touchgfx3HAL4tickEv+0x142>
 80168b0:	2001      	movs	r0, #1
 80168b2:	2600      	movs	r6, #0
 80168b4:	f7fd fc5c 	bl	8014170 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80168b8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80168bc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80168c0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80168c4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80168c8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80168cc:	b133      	cbz	r3, 80168dc <_ZN8touchgfx3HAL4tickEv+0x40>
 80168ce:	6823      	ldr	r3, [r4, #0]
 80168d0:	4620      	mov	r0, r4
 80168d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80168d6:	4798      	blx	r3
 80168d8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80168dc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80168e0:	2601      	movs	r6, #1
 80168e2:	6862      	ldr	r2, [r4, #4]
 80168e4:	f083 0301 	eor.w	r3, r3, #1
 80168e8:	702e      	strb	r6, [r5, #0]
 80168ea:	7253      	strb	r3, [r2, #9]
 80168ec:	f004 fa84 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 80168f0:	6803      	ldr	r3, [r0, #0]
 80168f2:	4631      	mov	r1, r6
 80168f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168f6:	4798      	blx	r3
 80168f8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80168fc:	b90b      	cbnz	r3, 8016902 <_ZN8touchgfx3HAL4tickEv+0x66>
 80168fe:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8016902:	f004 fa79 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 8016906:	6803      	ldr	r3, [r0, #0]
 8016908:	695b      	ldr	r3, [r3, #20]
 801690a:	4798      	blx	r3
 801690c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801690e:	6803      	ldr	r3, [r0, #0]
 8016910:	691b      	ldr	r3, [r3, #16]
 8016912:	4798      	blx	r3
 8016914:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016918:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801691c:	3b01      	subs	r3, #1
 801691e:	b2db      	uxtb	r3, r3
 8016920:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016924:	b10a      	cbz	r2, 801692a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8016926:	2b00      	cmp	r3, #0
 8016928:	d1eb      	bne.n	8016902 <_ZN8touchgfx3HAL4tickEv+0x66>
 801692a:	4a3b      	ldr	r2, [pc, #236]	; (8016a18 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801692c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8016930:	7813      	ldrb	r3, [r2, #0]
 8016932:	3301      	adds	r3, #1
 8016934:	b25b      	sxtb	r3, r3
 8016936:	4299      	cmp	r1, r3
 8016938:	7013      	strb	r3, [r2, #0]
 801693a:	dc10      	bgt.n	801695e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801693c:	2300      	movs	r3, #0
 801693e:	68e0      	ldr	r0, [r4, #12]
 8016940:	a902      	add	r1, sp, #8
 8016942:	7013      	strb	r3, [r2, #0]
 8016944:	aa03      	add	r2, sp, #12
 8016946:	6803      	ldr	r3, [r0, #0]
 8016948:	68db      	ldr	r3, [r3, #12]
 801694a:	4798      	blx	r3
 801694c:	6823      	ldr	r3, [r4, #0]
 801694e:	2800      	cmp	r0, #0
 8016950:	d051      	beq.n	80169f6 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8016952:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016956:	4620      	mov	r0, r4
 8016958:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801695c:	4798      	blx	r3
 801695e:	2300      	movs	r3, #0
 8016960:	6960      	ldr	r0, [r4, #20]
 8016962:	f88d 3007 	strb.w	r3, [sp, #7]
 8016966:	b158      	cbz	r0, 8016980 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8016968:	6803      	ldr	r3, [r0, #0]
 801696a:	f10d 0107 	add.w	r1, sp, #7
 801696e:	68db      	ldr	r3, [r3, #12]
 8016970:	4798      	blx	r3
 8016972:	b128      	cbz	r0, 8016980 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8016974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016976:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801697a:	6803      	ldr	r3, [r0, #0]
 801697c:	68db      	ldr	r3, [r3, #12]
 801697e:	4798      	blx	r3
 8016980:	f104 001c 	add.w	r0, r4, #28
 8016984:	f00e fd8c 	bl	80254a0 <_ZN8touchgfx8Gestures4tickEv>
 8016988:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801698c:	b30b      	cbz	r3, 80169d2 <_ZN8touchgfx3HAL4tickEv+0x136>
 801698e:	6920      	ldr	r0, [r4, #16]
 8016990:	6803      	ldr	r3, [r0, #0]
 8016992:	691b      	ldr	r3, [r3, #16]
 8016994:	4798      	blx	r3
 8016996:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016998:	4606      	mov	r6, r0
 801699a:	b903      	cbnz	r3, 801699e <_ZN8touchgfx3HAL4tickEv+0x102>
 801699c:	6720      	str	r0, [r4, #112]	; 0x70
 801699e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80169a0:	4a1e      	ldr	r2, [pc, #120]	; (8016a1c <_ZN8touchgfx3HAL4tickEv+0x180>)
 80169a2:	1af3      	subs	r3, r6, r3
 80169a4:	4293      	cmp	r3, r2
 80169a6:	d914      	bls.n	80169d2 <_ZN8touchgfx3HAL4tickEv+0x136>
 80169a8:	6920      	ldr	r0, [r4, #16]
 80169aa:	6803      	ldr	r3, [r0, #0]
 80169ac:	699b      	ldr	r3, [r3, #24]
 80169ae:	4798      	blx	r3
 80169b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80169b2:	2264      	movs	r2, #100	; 0x64
 80169b4:	1af3      	subs	r3, r6, r3
 80169b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80169ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80169be:	2800      	cmp	r0, #0
 80169c0:	dc1e      	bgt.n	8016a00 <_ZN8touchgfx3HAL4tickEv+0x164>
 80169c2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80169c6:	6920      	ldr	r0, [r4, #16]
 80169c8:	2100      	movs	r1, #0
 80169ca:	6803      	ldr	r3, [r0, #0]
 80169cc:	69db      	ldr	r3, [r3, #28]
 80169ce:	4798      	blx	r3
 80169d0:	6726      	str	r6, [r4, #112]	; 0x70
 80169d2:	f004 fa11 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 80169d6:	6803      	ldr	r3, [r0, #0]
 80169d8:	2100      	movs	r1, #0
 80169da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169dc:	4798      	blx	r3
 80169de:	6823      	ldr	r3, [r4, #0]
 80169e0:	4620      	mov	r0, r4
 80169e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80169e6:	4798      	blx	r3
 80169e8:	2001      	movs	r0, #1
 80169ea:	f7fd fbcc 	bl	8014186 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80169ee:	2300      	movs	r3, #0
 80169f0:	702b      	strb	r3, [r5, #0]
 80169f2:	b004      	add	sp, #16
 80169f4:	bd70      	pop	{r4, r5, r6, pc}
 80169f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80169fa:	4620      	mov	r0, r4
 80169fc:	4798      	blx	r3
 80169fe:	e7ae      	b.n	801695e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8016a00:	2863      	cmp	r0, #99	; 0x63
 8016a02:	bfcb      	itete	gt
 8016a04:	2300      	movgt	r3, #0
 8016a06:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8016a0a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8016a0e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8016a12:	e7d8      	b.n	80169c6 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8016a14:	2000b3d8 	.word	0x2000b3d8
 8016a18:	2000b3d9 	.word	0x2000b3d9
 8016a1c:	05f5e100 	.word	0x05f5e100

08016a20 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8016a20:	f7fd be86 	b.w	8014730 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016a24 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8016a24:	6581      	str	r1, [r0, #88]	; 0x58
 8016a26:	301c      	adds	r0, #28
 8016a28:	f00e bd38 	b.w	802549c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08016a2c <_ZN8touchgfx3HAL5touchEll>:
 8016a2c:	b530      	push	{r4, r5, lr}
 8016a2e:	b087      	sub	sp, #28
 8016a30:	4604      	mov	r4, r0
 8016a32:	a804      	add	r0, sp, #16
 8016a34:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016a38:	f003 ffc2 	bl	801a9c0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8016a3c:	9b04      	ldr	r3, [sp, #16]
 8016a3e:	a906      	add	r1, sp, #24
 8016a40:	a803      	add	r0, sp, #12
 8016a42:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016a46:	9b05      	ldr	r3, [sp, #20]
 8016a48:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8016a4c:	f004 f806 	bl	801aa5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8016a50:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8016a54:	f104 001c 	add.w	r0, r4, #28
 8016a58:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8016a5c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016a60:	b189      	cbz	r1, 8016a86 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8016a62:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8016a66:	9300      	str	r3, [sp, #0]
 8016a68:	4613      	mov	r3, r2
 8016a6a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8016a6e:	462a      	mov	r2, r5
 8016a70:	f00e fd24 	bl	80254bc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8016a74:	b128      	cbz	r0, 8016a82 <_ZN8touchgfx3HAL5touchEll+0x56>
 8016a76:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016a7a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016a7c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016a80:	6623      	str	r3, [r4, #96]	; 0x60
 8016a82:	b007      	add	sp, #28
 8016a84:	bd30      	pop	{r4, r5, pc}
 8016a86:	f00e fd5d 	bl	8025544 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016a8a:	2301      	movs	r3, #1
 8016a8c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016a90:	e7f1      	b.n	8016a76 <_ZN8touchgfx3HAL5touchEll+0x4a>

08016a92 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8016a92:	b570      	push	{r4, r5, r6, lr}
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d050      	beq.n	8016b3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016a98:	ea81 0002 	eor.w	r0, r1, r2
 8016a9c:	07c6      	lsls	r6, r0, #31
 8016a9e:	d508      	bpl.n	8016ab2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8016aa0:	3a01      	subs	r2, #1
 8016aa2:	18cc      	adds	r4, r1, r3
 8016aa4:	42a1      	cmp	r1, r4
 8016aa6:	d048      	beq.n	8016b3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016aa8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016aac:	f801 0b01 	strb.w	r0, [r1], #1
 8016ab0:	e7f8      	b.n	8016aa4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8016ab2:	07d5      	lsls	r5, r2, #31
 8016ab4:	bf42      	ittt	mi
 8016ab6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8016aba:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8016abe:	f801 0b01 	strbmi.w	r0, [r1], #1
 8016ac2:	2b01      	cmp	r3, #1
 8016ac4:	d915      	bls.n	8016af2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016ac6:	ea82 0001 	eor.w	r0, r2, r1
 8016aca:	0784      	lsls	r4, r0, #30
 8016acc:	d02d      	beq.n	8016b2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8016ace:	1e94      	subs	r4, r2, #2
 8016ad0:	4608      	mov	r0, r1
 8016ad2:	18ce      	adds	r6, r1, r3
 8016ad4:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8016ad8:	f820 5b02 	strh.w	r5, [r0], #2
 8016adc:	1a35      	subs	r5, r6, r0
 8016ade:	2d01      	cmp	r5, #1
 8016ae0:	d8f8      	bhi.n	8016ad4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8016ae2:	1e98      	subs	r0, r3, #2
 8016ae4:	f003 0301 	and.w	r3, r3, #1
 8016ae8:	f020 0001 	bic.w	r0, r0, #1
 8016aec:	3002      	adds	r0, #2
 8016aee:	4401      	add	r1, r0
 8016af0:	4402      	add	r2, r0
 8016af2:	1f14      	subs	r4, r2, #4
 8016af4:	4608      	mov	r0, r1
 8016af6:	18ce      	adds	r6, r1, r3
 8016af8:	1a35      	subs	r5, r6, r0
 8016afa:	2d03      	cmp	r5, #3
 8016afc:	d810      	bhi.n	8016b20 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8016afe:	089c      	lsrs	r4, r3, #2
 8016b00:	00a0      	lsls	r0, r4, #2
 8016b02:	4401      	add	r1, r0
 8016b04:	3801      	subs	r0, #1
 8016b06:	4402      	add	r2, r0
 8016b08:	f06f 0003 	mvn.w	r0, #3
 8016b0c:	fb00 3404 	mla	r4, r0, r4, r3
 8016b10:	440c      	add	r4, r1
 8016b12:	42a1      	cmp	r1, r4
 8016b14:	d011      	beq.n	8016b3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016b16:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8016b1a:	f801 3b01 	strb.w	r3, [r1], #1
 8016b1e:	e7f8      	b.n	8016b12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8016b20:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8016b24:	f840 5b04 	str.w	r5, [r0], #4
 8016b28:	e7e6      	b.n	8016af8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8016b2a:	0790      	lsls	r0, r2, #30
 8016b2c:	d0e1      	beq.n	8016af2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016b2e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8016b32:	3b02      	subs	r3, #2
 8016b34:	f821 0b02 	strh.w	r0, [r1], #2
 8016b38:	e7db      	b.n	8016af2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016b3a:	2001      	movs	r0, #1
 8016b3c:	bd70      	pop	{r4, r5, r6, pc}

08016b3e <_ZN8touchgfx3HAL7noTouchEv>:
 8016b3e:	b510      	push	{r4, lr}
 8016b40:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8016b44:	4604      	mov	r4, r0
 8016b46:	b153      	cbz	r3, 8016b5e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8016b48:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8016b4c:	2101      	movs	r1, #1
 8016b4e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8016b52:	301c      	adds	r0, #28
 8016b54:	f00e fcf6 	bl	8025544 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016b58:	2300      	movs	r3, #0
 8016b5a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016b5e:	bd10      	pop	{r4, pc}

08016b60 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8016b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b64:	4605      	mov	r5, r0
 8016b66:	6980      	ldr	r0, [r0, #24]
 8016b68:	b085      	sub	sp, #20
 8016b6a:	460f      	mov	r7, r1
 8016b6c:	4690      	mov	r8, r2
 8016b6e:	4699      	mov	r9, r3
 8016b70:	b930      	cbnz	r0, 8016b80 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8016b72:	4b1f      	ldr	r3, [pc, #124]	; (8016bf0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8016b74:	f44f 7198 	mov.w	r1, #304	; 0x130
 8016b78:	4a1e      	ldr	r2, [pc, #120]	; (8016bf4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8016b7a:	481f      	ldr	r0, [pc, #124]	; (8016bf8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8016b7c:	f010 f966 	bl	8026e4c <__assert_func>
 8016b80:	ac04      	add	r4, sp, #16
 8016b82:	2600      	movs	r6, #0
 8016b84:	f844 6d04 	str.w	r6, [r4, #-4]!
 8016b88:	6806      	ldr	r6, [r0, #0]
 8016b8a:	9401      	str	r4, [sp, #4]
 8016b8c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8016b90:	9400      	str	r4, [sp, #0]
 8016b92:	6834      	ldr	r4, [r6, #0]
 8016b94:	47a0      	blx	r4
 8016b96:	4c19      	ldr	r4, [pc, #100]	; (8016bfc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8016b98:	4606      	mov	r6, r0
 8016b9a:	f8a4 9000 	strh.w	r9, [r4]
 8016b9e:	f7f8 fe07 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 8016ba2:	6803      	ldr	r3, [r0, #0]
 8016ba4:	6a1b      	ldr	r3, [r3, #32]
 8016ba6:	4798      	blx	r3
 8016ba8:	280c      	cmp	r0, #12
 8016baa:	d80f      	bhi.n	8016bcc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8016bac:	e8df f000 	tbb	[pc, r0]
 8016bb0:	1b1b1207 	.word	0x1b1b1207
 8016bb4:	1b1b1b1b 	.word	0x1b1b1b1b
 8016bb8:	1b1b1b1b 	.word	0x1b1b1b1b
 8016bbc:	1b          	.byte	0x1b
 8016bbd:	00          	.byte	0x00
 8016bbe:	8823      	ldrh	r3, [r4, #0]
 8016bc0:	fb08 7203 	mla	r2, r8, r3, r7
 8016bc4:	9b03      	ldr	r3, [sp, #12]
 8016bc6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8016bca:	63eb      	str	r3, [r5, #60]	; 0x3c
 8016bcc:	4630      	mov	r0, r6
 8016bce:	b005      	add	sp, #20
 8016bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016bd4:	8822      	ldrh	r2, [r4, #0]
 8016bd6:	9b03      	ldr	r3, [sp, #12]
 8016bd8:	fb08 7202 	mla	r2, r8, r2, r7
 8016bdc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016be0:	1a9a      	subs	r2, r3, r2
 8016be2:	63ea      	str	r2, [r5, #60]	; 0x3c
 8016be4:	e7f2      	b.n	8016bcc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8016be6:	4b06      	ldr	r3, [pc, #24]	; (8016c00 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8016be8:	f240 114d 	movw	r1, #333	; 0x14d
 8016bec:	4a01      	ldr	r2, [pc, #4]	; (8016bf4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8016bee:	e7c4      	b.n	8016b7a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8016bf0:	0802a18d 	.word	0x0802a18d
 8016bf4:	0802a49e 	.word	0x0802a49e
 8016bf8:	0802a1d2 	.word	0x0802a1d2
 8016bfc:	2000b3ce 	.word	0x2000b3ce
 8016c00:	0802a1f8 	.word	0x0802a1f8

08016c04 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8016c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c08:	4698      	mov	r8, r3
 8016c0a:	6803      	ldr	r3, [r0, #0]
 8016c0c:	b087      	sub	sp, #28
 8016c0e:	460e      	mov	r6, r1
 8016c10:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8016c12:	4617      	mov	r7, r2
 8016c14:	4b0d      	ldr	r3, [pc, #52]	; (8016c4c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8016c16:	4604      	mov	r4, r0
 8016c18:	f8b3 9000 	ldrh.w	r9, [r3]
 8016c1c:	f7f8 fdc8 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 8016c20:	6803      	ldr	r3, [r0, #0]
 8016c22:	6a1b      	ldr	r3, [r3, #32]
 8016c24:	4798      	blx	r3
 8016c26:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8016c2a:	463a      	mov	r2, r7
 8016c2c:	4631      	mov	r1, r6
 8016c2e:	9302      	str	r3, [sp, #8]
 8016c30:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016c34:	9301      	str	r3, [sp, #4]
 8016c36:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016c3a:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8016c3e:	9300      	str	r3, [sp, #0]
 8016c40:	4620      	mov	r0, r4
 8016c42:	4643      	mov	r3, r8
 8016c44:	47a8      	blx	r5
 8016c46:	b007      	add	sp, #28
 8016c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c4c:	2000b3ce 	.word	0x2000b3ce

08016c50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c54:	4606      	mov	r6, r0
 8016c56:	b089      	sub	sp, #36	; 0x24
 8016c58:	4610      	mov	r0, r2
 8016c5a:	460c      	mov	r4, r1
 8016c5c:	4691      	mov	r9, r2
 8016c5e:	4698      	mov	r8, r3
 8016c60:	f006 f9a8 	bl	801cfb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016c64:	2800      	cmp	r0, #0
 8016c66:	f000 8093 	beq.w	8016d90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 8016c6a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8016da8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8016c6e:	ad08      	add	r5, sp, #32
 8016c70:	f8df b138 	ldr.w	fp, [pc, #312]	; 8016dac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8016c74:	f8da 0000 	ldr.w	r0, [sl]
 8016c78:	4f4a      	ldr	r7, [pc, #296]	; (8016da4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8016c7a:	6802      	ldr	r2, [r0, #0]
 8016c7c:	6a12      	ldr	r2, [r2, #32]
 8016c7e:	4790      	blx	r2
 8016c80:	f8da 0000 	ldr.w	r0, [sl]
 8016c84:	6802      	ldr	r2, [r0, #0]
 8016c86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8016c88:	4790      	blx	r2
 8016c8a:	f8bb 3000 	ldrh.w	r3, [fp]
 8016c8e:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8016c92:	4628      	mov	r0, r5
 8016c94:	9300      	str	r3, [sp, #0]
 8016c96:	883b      	ldrh	r3, [r7, #0]
 8016c98:	9301      	str	r3, [sp, #4]
 8016c9a:	f006 fa4f 	bl	801d13c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016c9e:	f8ab 0000 	strh.w	r0, [fp]
 8016ca2:	4628      	mov	r0, r5
 8016ca4:	f006 fa84 	bl	801d1b0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016ca8:	f8da b000 	ldr.w	fp, [sl]
 8016cac:	8038      	strh	r0, [r7, #0]
 8016cae:	4648      	mov	r0, r9
 8016cb0:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8016cb4:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8016cb8:	9302      	str	r3, [sp, #8]
 8016cba:	f006 f97b 	bl	801cfb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016cbe:	f8da 2000 	ldr.w	r2, [sl]
 8016cc2:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8016cc6:	63d0      	str	r0, [r2, #60]	; 0x3c
 8016cc8:	4620      	mov	r0, r4
 8016cca:	6822      	ldr	r2, [r4, #0]
 8016ccc:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8016cd0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8016cd2:	2200      	movs	r2, #0
 8016cd4:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8016cd8:	4611      	mov	r1, r2
 8016cda:	4798      	blx	r3
 8016cdc:	2201      	movs	r2, #1
 8016cde:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8016ce2:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8016ce6:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8016cea:	2a00      	cmp	r2, #0
 8016cec:	f104 0204 	add.w	r2, r4, #4
 8016cf0:	dd51      	ble.n	8016d96 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 8016cf2:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8016cf6:	2900      	cmp	r1, #0
 8016cf8:	dd4d      	ble.n	8016d96 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x146>
 8016cfa:	6810      	ldr	r0, [r2, #0]
 8016cfc:	f10d 0c18 	add.w	ip, sp, #24
 8016d00:	6851      	ldr	r1, [r2, #4]
 8016d02:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016d06:	4641      	mov	r1, r8
 8016d08:	a806      	add	r0, sp, #24
 8016d0a:	f7ff fc75 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 8016d0e:	4628      	mov	r0, r5
 8016d10:	f006 fba0 	bl	801d454 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016d14:	4680      	mov	r8, r0
 8016d16:	f7f8 fd4b 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 8016d1a:	6802      	ldr	r2, [r0, #0]
 8016d1c:	6a12      	ldr	r2, [r2, #32]
 8016d1e:	4790      	blx	r2
 8016d20:	4580      	cmp	r8, r0
 8016d22:	d03d      	beq.n	8016da0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x150>
 8016d24:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8016d26:	b150      	cbz	r0, 8016d3e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 8016d28:	4628      	mov	r0, r5
 8016d2a:	f006 fb93 	bl	801d454 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016d2e:	4605      	mov	r5, r0
 8016d30:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8016d32:	6803      	ldr	r3, [r0, #0]
 8016d34:	6a1b      	ldr	r3, [r3, #32]
 8016d36:	4798      	blx	r3
 8016d38:	1a2b      	subs	r3, r5, r0
 8016d3a:	4258      	negs	r0, r3
 8016d3c:	4158      	adcs	r0, r3
 8016d3e:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8016d42:	2500      	movs	r5, #0
 8016d44:	6963      	ldr	r3, [r4, #20]
 8016d46:	4620      	mov	r0, r4
 8016d48:	6822      	ldr	r2, [r4, #0]
 8016d4a:	a906      	add	r1, sp, #24
 8016d4c:	6165      	str	r5, [r4, #20]
 8016d4e:	9303      	str	r3, [sp, #12]
 8016d50:	6892      	ldr	r2, [r2, #8]
 8016d52:	4790      	blx	r2
 8016d54:	9b03      	ldr	r3, [sp, #12]
 8016d56:	4620      	mov	r0, r4
 8016d58:	4652      	mov	r2, sl
 8016d5a:	6163      	str	r3, [r4, #20]
 8016d5c:	4649      	mov	r1, r9
 8016d5e:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8016d62:	6823      	ldr	r3, [r4, #0]
 8016d64:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8016d68:	4c0f      	ldr	r4, [pc, #60]	; (8016da8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8016d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d6c:	4798      	blx	r3
 8016d6e:	6820      	ldr	r0, [r4, #0]
 8016d70:	9b02      	ldr	r3, [sp, #8]
 8016d72:	9a00      	ldr	r2, [sp, #0]
 8016d74:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8016d78:	4b0c      	ldr	r3, [pc, #48]	; (8016dac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8016d7a:	801a      	strh	r2, [r3, #0]
 8016d7c:	4b09      	ldr	r3, [pc, #36]	; (8016da4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8016d7e:	9a01      	ldr	r2, [sp, #4]
 8016d80:	801a      	strh	r2, [r3, #0]
 8016d82:	6803      	ldr	r3, [r0, #0]
 8016d84:	6a1b      	ldr	r3, [r3, #32]
 8016d86:	4798      	blx	r3
 8016d88:	6820      	ldr	r0, [r4, #0]
 8016d8a:	6803      	ldr	r3, [r0, #0]
 8016d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d8e:	4798      	blx	r3
 8016d90:	b009      	add	sp, #36	; 0x24
 8016d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d96:	ab06      	add	r3, sp, #24
 8016d98:	6810      	ldr	r0, [r2, #0]
 8016d9a:	6851      	ldr	r1, [r2, #4]
 8016d9c:	c303      	stmia	r3!, {r0, r1}
 8016d9e:	e7b6      	b.n	8016d0e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbe>
 8016da0:	2000      	movs	r0, #0
 8016da2:	e7cc      	b.n	8016d3e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xee>
 8016da4:	2000b3d0 	.word	0x2000b3d0
 8016da8:	2000b3d4 	.word	0x2000b3d4
 8016dac:	2000b3ce 	.word	0x2000b3ce

08016db0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8016db0:	4b07      	ldr	r3, [pc, #28]	; (8016dd0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8016db2:	b510      	push	{r4, lr}
 8016db4:	781b      	ldrb	r3, [r3, #0]
 8016db6:	4604      	mov	r4, r0
 8016db8:	b13b      	cbz	r3, 8016dca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016dba:	6803      	ldr	r3, [r0, #0]
 8016dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016dbe:	4798      	blx	r3
 8016dc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016dc2:	4283      	cmp	r3, r0
 8016dc4:	d101      	bne.n	8016dca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016dc6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016dc8:	bd10      	pop	{r4, pc}
 8016dca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8016dcc:	e7fc      	b.n	8016dc8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8016dce:	bf00      	nop
 8016dd0:	2000b3d2 	.word	0x2000b3d2

08016dd4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8016dd4:	4b0b      	ldr	r3, [pc, #44]	; (8016e04 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8016dd6:	b510      	push	{r4, lr}
 8016dd8:	781b      	ldrb	r3, [r3, #0]
 8016dda:	4604      	mov	r4, r0
 8016ddc:	b95b      	cbnz	r3, 8016df6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016dde:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8016de2:	2b02      	cmp	r3, #2
 8016de4:	d007      	beq.n	8016df6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016de6:	6840      	ldr	r0, [r0, #4]
 8016de8:	f000 fbc8 	bl	801757c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016dec:	b118      	cbz	r0, 8016df6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016dee:	6862      	ldr	r2, [r4, #4]
 8016df0:	7a53      	ldrb	r3, [r2, #9]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d0fc      	beq.n	8016df0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8016df6:	f7fd fc8d 	bl	8014714 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016dfa:	4620      	mov	r0, r4
 8016dfc:	f7ff ffd8 	bl	8016db0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016e00:	bd10      	pop	{r4, pc}
 8016e02:	bf00      	nop
 8016e04:	2000b3d2 	.word	0x2000b3d2

08016e08 <_ZN8touchgfx3HAL10initializeEv>:
 8016e08:	b510      	push	{r4, lr}
 8016e0a:	4604      	mov	r4, r0
 8016e0c:	f7fd fc4c 	bl	80146a8 <_ZN8touchgfx10OSWrappers10initializeEv>
 8016e10:	6860      	ldr	r0, [r4, #4]
 8016e12:	6803      	ldr	r3, [r0, #0]
 8016e14:	68db      	ldr	r3, [r3, #12]
 8016e16:	4798      	blx	r3
 8016e18:	68e0      	ldr	r0, [r4, #12]
 8016e1a:	6803      	ldr	r3, [r0, #0]
 8016e1c:	689b      	ldr	r3, [r3, #8]
 8016e1e:	4798      	blx	r3
 8016e20:	6823      	ldr	r3, [r4, #0]
 8016e22:	4620      	mov	r0, r4
 8016e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e2a:	4718      	bx	r3

08016e2c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8016e2c:	b508      	push	{r3, lr}
 8016e2e:	290c      	cmp	r1, #12
 8016e30:	d817      	bhi.n	8016e62 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8016e32:	e8df f001 	tbb	[pc, r1]
 8016e36:	090b      	.short	0x090b
 8016e38:	0d0d0d07 	.word	0x0d0d0d07
 8016e3c:	1414140d 	.word	0x1414140d
 8016e40:	1414      	.short	0x1414
 8016e42:	0d          	.byte	0x0d
 8016e43:	00          	.byte	0x00
 8016e44:	2020      	movs	r0, #32
 8016e46:	bd08      	pop	{r3, pc}
 8016e48:	2018      	movs	r0, #24
 8016e4a:	e7fc      	b.n	8016e46 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016e4c:	2010      	movs	r0, #16
 8016e4e:	e7fa      	b.n	8016e46 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016e50:	4b05      	ldr	r3, [pc, #20]	; (8016e68 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8016e52:	f44f 710c 	mov.w	r1, #560	; 0x230
 8016e56:	4a05      	ldr	r2, [pc, #20]	; (8016e6c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8016e58:	4805      	ldr	r0, [pc, #20]	; (8016e70 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8016e5a:	f00f fff7 	bl	8026e4c <__assert_func>
 8016e5e:	2008      	movs	r0, #8
 8016e60:	e7f1      	b.n	8016e46 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016e62:	2000      	movs	r0, #0
 8016e64:	e7ef      	b.n	8016e46 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8016e66:	bf00      	nop
 8016e68:	0802a2cb 	.word	0x0802a2cb
 8016e6c:	0802a660 	.word	0x0802a660
 8016e70:	0802a1d2 	.word	0x0802a1d2

08016e74 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8016e74:	b570      	push	{r4, r5, r6, lr}
 8016e76:	460d      	mov	r5, r1
 8016e78:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8016e7c:	4616      	mov	r6, r2
 8016e7e:	461c      	mov	r4, r3
 8016e80:	f7ff ffd4 	bl	8016e2c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8016e84:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8016e88:	10c0      	asrs	r0, r0, #3
 8016e8a:	fb06 5101 	mla	r1, r6, r1, r5
 8016e8e:	fb00 4001 	mla	r0, r0, r1, r4
 8016e92:	bd70      	pop	{r4, r5, r6, pc}

08016e94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8016e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e98:	b08a      	sub	sp, #40	; 0x28
 8016e9a:	f04f 0c00 	mov.w	ip, #0
 8016e9e:	4604      	mov	r4, r0
 8016ea0:	469a      	mov	sl, r3
 8016ea2:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8016ea6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8016eaa:	f1b8 0f02 	cmp.w	r8, #2
 8016eae:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8016eb2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016eb6:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8016eba:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8016ebe:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8016ec2:	f8cd c020 	str.w	ip, [sp, #32]
 8016ec6:	d030      	beq.n	8016f2a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8016ec8:	2bff      	cmp	r3, #255	; 0xff
 8016eca:	d12c      	bne.n	8016f26 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8016ecc:	4560      	cmp	r0, ip
 8016ece:	bf14      	ite	ne
 8016ed0:	2004      	movne	r0, #4
 8016ed2:	2001      	moveq	r0, #1
 8016ed4:	9204      	str	r2, [sp, #16]
 8016ed6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8016eda:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016ede:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016ee2:	f8ad 6018 	strh.w	r6, [sp, #24]
 8016ee6:	f8ad 501a 	strh.w	r5, [sp, #26]
 8016eea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016eee:	4620      	mov	r0, r4
 8016ef0:	f7ff ff5e 	bl	8016db0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016ef4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8016ef8:	4603      	mov	r3, r0
 8016efa:	4651      	mov	r1, sl
 8016efc:	4620      	mov	r0, r4
 8016efe:	e9cd 9700 	strd	r9, r7, [sp]
 8016f02:	f7ff ffb7 	bl	8016e74 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8016f06:	f8ad 901e 	strh.w	r9, [sp, #30]
 8016f0a:	9005      	str	r0, [sp, #20]
 8016f0c:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8016f10:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8016f14:	b106      	cbz	r6, 8016f18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8016f16:	b98d      	cbnz	r5, 8016f3c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8016f18:	4b12      	ldr	r3, [pc, #72]	; (8016f64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8016f1a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8016f1e:	4a12      	ldr	r2, [pc, #72]	; (8016f68 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8016f20:	4812      	ldr	r0, [pc, #72]	; (8016f6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8016f22:	f00f ff93 	bl	8026e4c <__assert_func>
 8016f26:	2004      	movs	r0, #4
 8016f28:	e7d4      	b.n	8016ed4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016f2a:	2bff      	cmp	r3, #255	; 0xff
 8016f2c:	d104      	bne.n	8016f38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8016f2e:	2800      	cmp	r0, #0
 8016f30:	bf14      	ite	ne
 8016f32:	2040      	movne	r0, #64	; 0x40
 8016f34:	2020      	moveq	r0, #32
 8016f36:	e7cd      	b.n	8016ed4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016f38:	2040      	movs	r0, #64	; 0x40
 8016f3a:	e7cb      	b.n	8016ed4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8016f3c:	6823      	ldr	r3, [r4, #0]
 8016f3e:	4620      	mov	r0, r4
 8016f40:	9d02      	ldr	r5, [sp, #8]
 8016f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f44:	4798      	blx	r3
 8016f46:	4228      	tst	r0, r5
 8016f48:	d104      	bne.n	8016f54 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8016f4a:	4b09      	ldr	r3, [pc, #36]	; (8016f70 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8016f4c:	f240 11b1 	movw	r1, #433	; 0x1b1
 8016f50:	4a05      	ldr	r2, [pc, #20]	; (8016f68 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8016f52:	e7e5      	b.n	8016f20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8016f54:	6860      	ldr	r0, [r4, #4]
 8016f56:	a902      	add	r1, sp, #8
 8016f58:	6803      	ldr	r3, [r0, #0]
 8016f5a:	685b      	ldr	r3, [r3, #4]
 8016f5c:	4798      	blx	r3
 8016f5e:	b00a      	add	sp, #40	; 0x28
 8016f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f64:	0802a24e 	.word	0x0802a24e
 8016f68:	0802a502 	.word	0x0802a502
 8016f6c:	0802a1d2 	.word	0x0802a1d2
 8016f70:	0802a286 	.word	0x0802a286

08016f74 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8016f74:	b510      	push	{r4, lr}
 8016f76:	b08a      	sub	sp, #40	; 0x28
 8016f78:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8016f7c:	9408      	str	r4, [sp, #32]
 8016f7e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8016f82:	9407      	str	r4, [sp, #28]
 8016f84:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8016f88:	9406      	str	r4, [sp, #24]
 8016f8a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8016f8e:	9405      	str	r4, [sp, #20]
 8016f90:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8016f94:	9404      	str	r4, [sp, #16]
 8016f96:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8016f9a:	9403      	str	r4, [sp, #12]
 8016f9c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8016fa0:	9402      	str	r4, [sp, #8]
 8016fa2:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8016fa6:	e9cd 3400 	strd	r3, r4, [sp]
 8016faa:	4613      	mov	r3, r2
 8016fac:	2200      	movs	r2, #0
 8016fae:	f7ff ff71 	bl	8016e94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016fb2:	b00a      	add	sp, #40	; 0x28
 8016fb4:	bd10      	pop	{r4, pc}
	...

08016fb8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8016fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fba:	b08b      	sub	sp, #44	; 0x2c
 8016fbc:	4616      	mov	r6, r2
 8016fbe:	460d      	mov	r5, r1
 8016fc0:	461f      	mov	r7, r3
 8016fc2:	4604      	mov	r4, r0
 8016fc4:	f7f8 fbf4 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 8016fc8:	6803      	ldr	r3, [r0, #0]
 8016fca:	6a1b      	ldr	r3, [r3, #32]
 8016fcc:	4798      	blx	r3
 8016fce:	4b0e      	ldr	r3, [pc, #56]	; (8017008 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	4629      	mov	r1, r5
 8016fd4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016fd8:	881b      	ldrh	r3, [r3, #0]
 8016fda:	4620      	mov	r0, r4
 8016fdc:	9306      	str	r3, [sp, #24]
 8016fde:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016fe2:	9305      	str	r3, [sp, #20]
 8016fe4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016fe8:	9304      	str	r3, [sp, #16]
 8016fea:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016fee:	9303      	str	r3, [sp, #12]
 8016ff0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016ff4:	9302      	str	r3, [sp, #8]
 8016ff6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016ffa:	e9cd 7300 	strd	r7, r3, [sp]
 8016ffe:	4633      	mov	r3, r6
 8017000:	f7ff ff48 	bl	8016e94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017004:	b00b      	add	sp, #44	; 0x2c
 8017006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017008:	2000b3ce 	.word	0x2000b3ce

0801700c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801700c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017010:	461f      	mov	r7, r3
 8017012:	4b14      	ldr	r3, [pc, #80]	; (8017064 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8017014:	b08a      	sub	sp, #40	; 0x28
 8017016:	4616      	mov	r6, r2
 8017018:	f8b3 8000 	ldrh.w	r8, [r3]
 801701c:	460d      	mov	r5, r1
 801701e:	4604      	mov	r4, r0
 8017020:	f7f8 fbc6 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 8017024:	6803      	ldr	r3, [r0, #0]
 8017026:	6a1b      	ldr	r3, [r3, #32]
 8017028:	4798      	blx	r3
 801702a:	2302      	movs	r3, #2
 801702c:	9008      	str	r0, [sp, #32]
 801702e:	2200      	movs	r2, #0
 8017030:	4629      	mov	r1, r5
 8017032:	4620      	mov	r0, r4
 8017034:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8017038:	2301      	movs	r3, #1
 801703a:	9305      	str	r3, [sp, #20]
 801703c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017040:	9304      	str	r3, [sp, #16]
 8017042:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017046:	9303      	str	r3, [sp, #12]
 8017048:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801704c:	9302      	str	r3, [sp, #8]
 801704e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017052:	e9cd 7300 	strd	r7, r3, [sp]
 8017056:	4633      	mov	r3, r6
 8017058:	f7ff ff1c 	bl	8016e94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801705c:	b00a      	add	sp, #40	; 0x28
 801705e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017062:	bf00      	nop
 8017064:	2000b3ce 	.word	0x2000b3ce

08017068 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8017068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801706c:	b08b      	sub	sp, #44	; 0x2c
 801706e:	469b      	mov	fp, r3
 8017070:	4604      	mov	r4, r0
 8017072:	4692      	mov	sl, r2
 8017074:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8017078:	2600      	movs	r6, #0
 801707a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801707e:	4689      	mov	r9, r1
 8017080:	2fff      	cmp	r7, #255	; 0xff
 8017082:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8017086:	9608      	str	r6, [sp, #32]
 8017088:	bf14      	ite	ne
 801708a:	2308      	movne	r3, #8
 801708c:	2302      	moveq	r3, #2
 801708e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8017092:	f7ff fe8d 	bl	8016db0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017096:	465a      	mov	r2, fp
 8017098:	4603      	mov	r3, r0
 801709a:	4651      	mov	r1, sl
 801709c:	4620      	mov	r0, r4
 801709e:	e9cd 8500 	strd	r8, r5, [sp]
 80170a2:	f7ff fee7 	bl	8016e74 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80170a6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80170aa:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80170ae:	f8ad 3018 	strh.w	r3, [sp, #24]
 80170b2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80170b6:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80170ba:	f8ad 301a 	strh.w	r3, [sp, #26]
 80170be:	6823      	ldr	r3, [r4, #0]
 80170c0:	9d02      	ldr	r5, [sp, #8]
 80170c2:	9005      	str	r0, [sp, #20]
 80170c4:	4620      	mov	r0, r4
 80170c6:	f8ad 601c 	strh.w	r6, [sp, #28]
 80170ca:	f8ad 801e 	strh.w	r8, [sp, #30]
 80170ce:	f8cd 9020 	str.w	r9, [sp, #32]
 80170d2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80170d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170d8:	4798      	blx	r3
 80170da:	4228      	tst	r0, r5
 80170dc:	d106      	bne.n	80170ec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 80170de:	4b07      	ldr	r3, [pc, #28]	; (80170fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 80170e0:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 80170e4:	4a06      	ldr	r2, [pc, #24]	; (8017100 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 80170e6:	4807      	ldr	r0, [pc, #28]	; (8017104 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 80170e8:	f00f feb0 	bl	8026e4c <__assert_func>
 80170ec:	6860      	ldr	r0, [r4, #4]
 80170ee:	a902      	add	r1, sp, #8
 80170f0:	6803      	ldr	r3, [r0, #0]
 80170f2:	685b      	ldr	r3, [r3, #4]
 80170f4:	4798      	blx	r3
 80170f6:	b00b      	add	sp, #44	; 0x2c
 80170f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170fc:	0802a286 	.word	0x0802a286
 8017100:	0802a5cb 	.word	0x0802a5cb
 8017104:	0802a1d2 	.word	0x0802a1d2

08017108 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8017108:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801710c:	461f      	mov	r7, r3
 801710e:	4b0b      	ldr	r3, [pc, #44]	; (801713c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8017110:	460d      	mov	r5, r1
 8017112:	4616      	mov	r6, r2
 8017114:	f8b3 8000 	ldrh.w	r8, [r3]
 8017118:	4604      	mov	r4, r0
 801711a:	f7f8 fb49 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 801711e:	6803      	ldr	r3, [r0, #0]
 8017120:	6a1b      	ldr	r3, [r3, #32]
 8017122:	4798      	blx	r3
 8017124:	463b      	mov	r3, r7
 8017126:	4632      	mov	r2, r6
 8017128:	4629      	mov	r1, r5
 801712a:	e9cd 8000 	strd	r8, r0, [sp]
 801712e:	4620      	mov	r0, r4
 8017130:	f7ff fea0 	bl	8016e74 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8017134:	b002      	add	sp, #8
 8017136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801713a:	bf00      	nop
 801713c:	2000b3ce 	.word	0x2000b3ce

08017140 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8017140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017144:	4698      	mov	r8, r3
 8017146:	b088      	sub	sp, #32
 8017148:	2300      	movs	r3, #0
 801714a:	4617      	mov	r7, r2
 801714c:	4604      	mov	r4, r0
 801714e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8017152:	9306      	str	r3, [sp, #24]
 8017154:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017158:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801715c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8017160:	f8ad 5012 	strh.w	r5, [sp, #18]
 8017164:	e9cd 3100 	strd	r3, r1, [sp]
 8017168:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801716c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017170:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8017174:	f88d 301c 	strb.w	r3, [sp, #28]
 8017178:	f7ff fe1a 	bl	8016db0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801717c:	4642      	mov	r2, r8
 801717e:	4603      	mov	r3, r0
 8017180:	4639      	mov	r1, r7
 8017182:	4620      	mov	r0, r4
 8017184:	f7ff ffc0 	bl	8017108 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017188:	4b16      	ldr	r3, [pc, #88]	; (80171e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801718a:	9003      	str	r0, [sp, #12]
 801718c:	881b      	ldrh	r3, [r3, #0]
 801718e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017192:	f7f8 fb0d 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 8017196:	6803      	ldr	r3, [r0, #0]
 8017198:	6a1b      	ldr	r3, [r3, #32]
 801719a:	4798      	blx	r3
 801719c:	f88d 001e 	strb.w	r0, [sp, #30]
 80171a0:	f88d 001d 	strb.w	r0, [sp, #29]
 80171a4:	b106      	cbz	r6, 80171a8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80171a6:	b935      	cbnz	r5, 80171b6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80171a8:	4b0f      	ldr	r3, [pc, #60]	; (80171e8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80171aa:	f240 11cd 	movw	r1, #461	; 0x1cd
 80171ae:	4a0f      	ldr	r2, [pc, #60]	; (80171ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80171b0:	480f      	ldr	r0, [pc, #60]	; (80171f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80171b2:	f00f fe4b 	bl	8026e4c <__assert_func>
 80171b6:	6823      	ldr	r3, [r4, #0]
 80171b8:	4620      	mov	r0, r4
 80171ba:	9d00      	ldr	r5, [sp, #0]
 80171bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171be:	4798      	blx	r3
 80171c0:	4228      	tst	r0, r5
 80171c2:	d104      	bne.n	80171ce <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 80171c4:	4b0b      	ldr	r3, [pc, #44]	; (80171f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 80171c6:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80171ca:	4a08      	ldr	r2, [pc, #32]	; (80171ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80171cc:	e7f0      	b.n	80171b0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 80171ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80171d0:	4669      	mov	r1, sp
 80171d2:	6860      	ldr	r0, [r4, #4]
 80171d4:	9306      	str	r3, [sp, #24]
 80171d6:	6803      	ldr	r3, [r0, #0]
 80171d8:	685b      	ldr	r3, [r3, #4]
 80171da:	4798      	blx	r3
 80171dc:	b008      	add	sp, #32
 80171de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171e2:	bf00      	nop
 80171e4:	2000b3ce 	.word	0x2000b3ce
 80171e8:	0802a24e 	.word	0x0802a24e
 80171ec:	0802a3b4 	.word	0x0802a3b4
 80171f0:	0802a1d2 	.word	0x0802a1d2
 80171f4:	0802a286 	.word	0x0802a286

080171f8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80171f8:	b570      	push	{r4, r5, r6, lr}
 80171fa:	b08a      	sub	sp, #40	; 0x28
 80171fc:	4604      	mov	r4, r0
 80171fe:	466b      	mov	r3, sp
 8017200:	e883 0006 	stmia.w	r3, {r1, r2}
 8017204:	4b1f      	ldr	r3, [pc, #124]	; (8017284 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8017206:	781b      	ldrb	r3, [r3, #0]
 8017208:	b933      	cbnz	r3, 8017218 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801720a:	4b1f      	ldr	r3, [pc, #124]	; (8017288 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801720c:	f240 11f9 	movw	r1, #505	; 0x1f9
 8017210:	4a1e      	ldr	r2, [pc, #120]	; (801728c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8017212:	481f      	ldr	r0, [pc, #124]	; (8017290 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8017214:	f00f fe1a 	bl	8026e4c <__assert_func>
 8017218:	2300      	movs	r3, #0
 801721a:	f8bd 5000 	ldrh.w	r5, [sp]
 801721e:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8017222:	9308      	str	r3, [sp, #32]
 8017224:	2301      	movs	r3, #1
 8017226:	9302      	str	r3, [sp, #8]
 8017228:	6803      	ldr	r3, [r0, #0]
 801722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801722c:	4798      	blx	r3
 801722e:	4632      	mov	r2, r6
 8017230:	4629      	mov	r1, r5
 8017232:	4603      	mov	r3, r0
 8017234:	4620      	mov	r0, r4
 8017236:	f7ff ff67 	bl	8017108 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801723a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801723c:	9003      	str	r0, [sp, #12]
 801723e:	9305      	str	r3, [sp, #20]
 8017240:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017244:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017248:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801724c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017250:	4b10      	ldr	r3, [pc, #64]	; (8017294 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8017252:	881b      	ldrh	r3, [r3, #0]
 8017254:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017258:	f8ad 301e 	strh.w	r3, [sp, #30]
 801725c:	f7f8 faa8 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 8017260:	6803      	ldr	r3, [r0, #0]
 8017262:	6a1b      	ldr	r3, [r3, #32]
 8017264:	4798      	blx	r3
 8017266:	23ff      	movs	r3, #255	; 0xff
 8017268:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801726c:	a902      	add	r1, sp, #8
 801726e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8017272:	6860      	ldr	r0, [r4, #4]
 8017274:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017278:	6803      	ldr	r3, [r0, #0]
 801727a:	685b      	ldr	r3, [r3, #4]
 801727c:	4798      	blx	r3
 801727e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8017280:	b00a      	add	sp, #40	; 0x28
 8017282:	bd70      	pop	{r4, r5, r6, pc}
 8017284:	2000b3d3 	.word	0x2000b3d3
 8017288:	0802a11f 	.word	0x0802a11f
 801728c:	0802a458 	.word	0x0802a458
 8017290:	0802a1d2 	.word	0x0802a1d2
 8017294:	2000b3ce 	.word	0x2000b3ce

08017298 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8017298:	b5f0      	push	{r4, r5, r6, r7, lr}
 801729a:	b08b      	sub	sp, #44	; 0x2c
 801729c:	4604      	mov	r4, r0
 801729e:	466d      	mov	r5, sp
 80172a0:	e885 0006 	stmia.w	r5, {r1, r2}
 80172a4:	461d      	mov	r5, r3
 80172a6:	2300      	movs	r3, #0
 80172a8:	f8bd 6000 	ldrh.w	r6, [sp]
 80172ac:	9308      	str	r3, [sp, #32]
 80172ae:	2301      	movs	r3, #1
 80172b0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80172b4:	9302      	str	r3, [sp, #8]
 80172b6:	6803      	ldr	r3, [r0, #0]
 80172b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172ba:	4798      	blx	r3
 80172bc:	463a      	mov	r2, r7
 80172be:	4631      	mov	r1, r6
 80172c0:	4603      	mov	r3, r0
 80172c2:	4620      	mov	r0, r4
 80172c4:	f7ff ff20 	bl	8017108 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80172c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80172cc:	9003      	str	r0, [sp, #12]
 80172ce:	f8ad 3018 	strh.w	r3, [sp, #24]
 80172d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80172d6:	9505      	str	r5, [sp, #20]
 80172d8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80172dc:	4b0d      	ldr	r3, [pc, #52]	; (8017314 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 80172de:	881b      	ldrh	r3, [r3, #0]
 80172e0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80172e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80172e6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80172ea:	f7f8 fa61 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 80172ee:	6803      	ldr	r3, [r0, #0]
 80172f0:	6a1b      	ldr	r3, [r3, #32]
 80172f2:	4798      	blx	r3
 80172f4:	23ff      	movs	r3, #255	; 0xff
 80172f6:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80172fa:	a902      	add	r1, sp, #8
 80172fc:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8017300:	6860      	ldr	r0, [r4, #4]
 8017302:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017306:	6803      	ldr	r3, [r0, #0]
 8017308:	685b      	ldr	r3, [r3, #4]
 801730a:	4798      	blx	r3
 801730c:	4628      	mov	r0, r5
 801730e:	b00b      	add	sp, #44	; 0x2c
 8017310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017312:	bf00      	nop
 8017314:	2000b3ce 	.word	0x2000b3ce

08017318 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8017318:	b570      	push	{r4, r5, r6, lr}
 801731a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801731e:	4604      	mov	r4, r0
 8017320:	b19b      	cbz	r3, 801734a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8017322:	2002      	movs	r0, #2
 8017324:	f7fc ff3a 	bl	801419c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8017328:	2300      	movs	r3, #0
 801732a:	4620      	mov	r0, r4
 801732c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8017330:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8017334:	6823      	ldr	r3, [r4, #0]
 8017336:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 801733a:	f7ff fd39 	bl	8016db0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801733e:	4601      	mov	r1, r0
 8017340:	4620      	mov	r0, r4
 8017342:	462b      	mov	r3, r5
 8017344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017348:	4718      	bx	r3
 801734a:	bd70      	pop	{r4, r5, r6, pc}

0801734c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801734c:	4770      	bx	lr

0801734e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801734e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8017352:	1a13      	subs	r3, r2, r0
 8017354:	4258      	negs	r0, r3
 8017356:	4158      	adcs	r0, r3
 8017358:	4770      	bx	lr

0801735a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801735a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801735e:	1a9b      	subs	r3, r3, r2
 8017360:	2b00      	cmp	r3, #0
 8017362:	bfdc      	itt	le
 8017364:	6882      	ldrle	r2, [r0, #8]
 8017366:	189b      	addle	r3, r3, r2
 8017368:	2b01      	cmp	r3, #1
 801736a:	bfcc      	ite	gt
 801736c:	2000      	movgt	r0, #0
 801736e:	2001      	movle	r0, #1
 8017370:	4770      	bx	lr

08017372 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8017372:	6902      	ldr	r2, [r0, #16]
 8017374:	6840      	ldr	r0, [r0, #4]
 8017376:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801737a:	4770      	bx	lr

0801737c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801737c:	6803      	ldr	r3, [r0, #0]
 801737e:	691b      	ldr	r3, [r3, #16]
 8017380:	4718      	bx	r3

08017382 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8017382:	4770      	bx	lr

08017384 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8017384:	4770      	bx	lr
	...

08017388 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8017388:	2301      	movs	r3, #1
 801738a:	b570      	push	{r4, r5, r6, lr}
 801738c:	7203      	strb	r3, [r0, #8]
 801738e:	4604      	mov	r4, r0
 8017390:	6840      	ldr	r0, [r0, #4]
 8017392:	6803      	ldr	r3, [r0, #0]
 8017394:	699b      	ldr	r3, [r3, #24]
 8017396:	4798      	blx	r3
 8017398:	6803      	ldr	r3, [r0, #0]
 801739a:	4605      	mov	r5, r0
 801739c:	2b08      	cmp	r3, #8
 801739e:	d01e      	beq.n	80173de <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80173a0:	d80b      	bhi.n	80173ba <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80173a2:	2b02      	cmp	r3, #2
 80173a4:	d027      	beq.n	80173f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80173a6:	2b04      	cmp	r3, #4
 80173a8:	d011      	beq.n	80173ce <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80173aa:	2b01      	cmp	r3, #1
 80173ac:	d028      	beq.n	8017400 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80173ae:	4b17      	ldr	r3, [pc, #92]	; (801740c <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80173b0:	218b      	movs	r1, #139	; 0x8b
 80173b2:	4a17      	ldr	r2, [pc, #92]	; (8017410 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80173b4:	4817      	ldr	r0, [pc, #92]	; (8017414 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80173b6:	f00f fd49 	bl	8026e4c <__assert_func>
 80173ba:	2b40      	cmp	r3, #64	; 0x40
 80173bc:	d020      	beq.n	8017400 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80173be:	d801      	bhi.n	80173c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80173c0:	2b20      	cmp	r3, #32
 80173c2:	e7f3      	b.n	80173ac <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80173c4:	2b80      	cmp	r3, #128	; 0x80
 80173c6:	d01b      	beq.n	8017400 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80173c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80173cc:	e7ee      	b.n	80173ac <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80173ce:	6823      	ldr	r3, [r4, #0]
 80173d0:	7f01      	ldrb	r1, [r0, #28]
 80173d2:	4620      	mov	r0, r4
 80173d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173d6:	4798      	blx	r3
 80173d8:	6823      	ldr	r3, [r4, #0]
 80173da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173dc:	e006      	b.n	80173ec <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80173de:	6823      	ldr	r3, [r4, #0]
 80173e0:	7f01      	ldrb	r1, [r0, #28]
 80173e2:	4620      	mov	r0, r4
 80173e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173e6:	4798      	blx	r3
 80173e8:	6823      	ldr	r3, [r4, #0]
 80173ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80173ec:	4629      	mov	r1, r5
 80173ee:	4620      	mov	r0, r4
 80173f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173f4:	4718      	bx	r3
 80173f6:	6823      	ldr	r3, [r4, #0]
 80173f8:	4620      	mov	r0, r4
 80173fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173fc:	4798      	blx	r3
 80173fe:	e7f3      	b.n	80173e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8017400:	6823      	ldr	r3, [r4, #0]
 8017402:	4620      	mov	r0, r4
 8017404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017406:	4798      	blx	r3
 8017408:	e7e6      	b.n	80173d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801740a:	bf00      	nop
 801740c:	0802a6a9 	.word	0x0802a6a9
 8017410:	0802a7b8 	.word	0x0802a7b8
 8017414:	0802a6ce 	.word	0x0802a6ce

08017418 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8017418:	b570      	push	{r4, r5, r6, lr}
 801741a:	4604      	mov	r4, r0
 801741c:	460e      	mov	r6, r1
 801741e:	6860      	ldr	r0, [r4, #4]
 8017420:	6803      	ldr	r3, [r0, #0]
 8017422:	685b      	ldr	r3, [r3, #4]
 8017424:	4798      	blx	r3
 8017426:	2800      	cmp	r0, #0
 8017428:	d1f9      	bne.n	801741e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801742a:	4d0b      	ldr	r5, [pc, #44]	; (8017458 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801742c:	6828      	ldr	r0, [r5, #0]
 801742e:	6803      	ldr	r3, [r0, #0]
 8017430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017432:	4798      	blx	r3
 8017434:	f7fd f988 	bl	8014748 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8017438:	6860      	ldr	r0, [r4, #4]
 801743a:	4631      	mov	r1, r6
 801743c:	6803      	ldr	r3, [r0, #0]
 801743e:	689b      	ldr	r3, [r3, #8]
 8017440:	4798      	blx	r3
 8017442:	6823      	ldr	r3, [r4, #0]
 8017444:	4620      	mov	r0, r4
 8017446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017448:	4798      	blx	r3
 801744a:	6828      	ldr	r0, [r5, #0]
 801744c:	6803      	ldr	r3, [r0, #0]
 801744e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017454:	4718      	bx	r3
 8017456:	bf00      	nop
 8017458:	2000b3d4 	.word	0x2000b3d4

0801745c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801745c:	b508      	push	{r3, lr}
 801745e:	f7fd f959 	bl	8014714 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017466:	f7fd b963 	b.w	8014730 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801746a <_ZN8touchgfx13DMA_Interface5startEv>:
 801746a:	b510      	push	{r4, lr}
 801746c:	4604      	mov	r4, r0
 801746e:	6840      	ldr	r0, [r0, #4]
 8017470:	6803      	ldr	r3, [r0, #0]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	4798      	blx	r3
 8017476:	b948      	cbnz	r0, 801748c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017478:	7a63      	ldrb	r3, [r4, #9]
 801747a:	b13b      	cbz	r3, 801748c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801747c:	7a23      	ldrb	r3, [r4, #8]
 801747e:	b92b      	cbnz	r3, 801748c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017480:	6823      	ldr	r3, [r4, #0]
 8017482:	4620      	mov	r0, r4
 8017484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801748a:	4718      	bx	r3
 801748c:	bd10      	pop	{r4, pc}
	...

08017490 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8017490:	b510      	push	{r4, lr}
 8017492:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8017496:	1b12      	subs	r2, r2, r4
 8017498:	2a00      	cmp	r2, #0
 801749a:	bfdc      	itt	le
 801749c:	6883      	ldrle	r3, [r0, #8]
 801749e:	18d2      	addle	r2, r2, r3
 80174a0:	2a01      	cmp	r2, #1
 80174a2:	dd18      	ble.n	80174d6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80174a4:	6843      	ldr	r3, [r0, #4]
 80174a6:	f101 021c 	add.w	r2, r1, #28
 80174aa:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80174ae:	f851 4b04 	ldr.w	r4, [r1], #4
 80174b2:	4291      	cmp	r1, r2
 80174b4:	f843 4b04 	str.w	r4, [r3], #4
 80174b8:	d1f9      	bne.n	80174ae <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80174ba:	880a      	ldrh	r2, [r1, #0]
 80174bc:	801a      	strh	r2, [r3, #0]
 80174be:	788a      	ldrb	r2, [r1, #2]
 80174c0:	709a      	strb	r2, [r3, #2]
 80174c2:	68c3      	ldr	r3, [r0, #12]
 80174c4:	6882      	ldr	r2, [r0, #8]
 80174c6:	f3bf 8f5b 	dmb	ish
 80174ca:	3301      	adds	r3, #1
 80174cc:	429a      	cmp	r2, r3
 80174ce:	bfd8      	it	le
 80174d0:	1a9b      	suble	r3, r3, r2
 80174d2:	60c3      	str	r3, [r0, #12]
 80174d4:	bd10      	pop	{r4, pc}
 80174d6:	4b03      	ldr	r3, [pc, #12]	; (80174e4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80174d8:	2139      	movs	r1, #57	; 0x39
 80174da:	4a03      	ldr	r2, [pc, #12]	; (80174e8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80174dc:	4803      	ldr	r0, [pc, #12]	; (80174ec <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80174de:	f00f fcb5 	bl	8026e4c <__assert_func>
 80174e2:	bf00      	nop
 80174e4:	0802a6f4 	.word	0x0802a6f4
 80174e8:	0802a7e8 	.word	0x0802a7e8
 80174ec:	0802a6ce 	.word	0x0802a6ce

080174f0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80174f0:	b510      	push	{r4, lr}
 80174f2:	6803      	ldr	r3, [r0, #0]
 80174f4:	4604      	mov	r4, r0
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	4798      	blx	r3
 80174fa:	b128      	cbz	r0, 8017508 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80174fc:	4b07      	ldr	r3, [pc, #28]	; (801751c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80174fe:	213f      	movs	r1, #63	; 0x3f
 8017500:	4a07      	ldr	r2, [pc, #28]	; (8017520 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8017502:	4808      	ldr	r0, [pc, #32]	; (8017524 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8017504:	f00f fca2 	bl	8026e4c <__assert_func>
 8017508:	6923      	ldr	r3, [r4, #16]
 801750a:	68a2      	ldr	r2, [r4, #8]
 801750c:	f3bf 8f5b 	dmb	ish
 8017510:	3301      	adds	r3, #1
 8017512:	429a      	cmp	r2, r3
 8017514:	bfd8      	it	le
 8017516:	1a9b      	suble	r3, r3, r2
 8017518:	6123      	str	r3, [r4, #16]
 801751a:	bd10      	pop	{r4, pc}
 801751c:	0802a717 	.word	0x0802a717
 8017520:	0802a836 	.word	0x0802a836
 8017524:	0802a6ce 	.word	0x0802a6ce

08017528 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8017528:	b570      	push	{r4, r5, r6, lr}
 801752a:	4604      	mov	r4, r0
 801752c:	6840      	ldr	r0, [r0, #4]
 801752e:	6803      	ldr	r3, [r0, #0]
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	4798      	blx	r3
 8017534:	4605      	mov	r5, r0
 8017536:	b930      	cbnz	r0, 8017546 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8017538:	7a23      	ldrb	r3, [r4, #8]
 801753a:	b123      	cbz	r3, 8017546 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801753c:	6860      	ldr	r0, [r4, #4]
 801753e:	6803      	ldr	r3, [r0, #0]
 8017540:	695b      	ldr	r3, [r3, #20]
 8017542:	4798      	blx	r3
 8017544:	7225      	strb	r5, [r4, #8]
 8017546:	6860      	ldr	r0, [r4, #4]
 8017548:	6803      	ldr	r3, [r0, #0]
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	4798      	blx	r3
 801754e:	b928      	cbnz	r0, 801755c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8017550:	6823      	ldr	r3, [r4, #0]
 8017552:	4620      	mov	r0, r4
 8017554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801755a:	4718      	bx	r3
 801755c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017560:	f7fd b8fe 	b.w	8014760 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08017564 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8017564:	b510      	push	{r4, lr}
 8017566:	6082      	str	r2, [r0, #8]
 8017568:	2200      	movs	r2, #0
 801756a:	4c03      	ldr	r4, [pc, #12]	; (8017578 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801756c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017570:	e9c0 4100 	strd	r4, r1, [r0]
 8017574:	bd10      	pop	{r4, pc}
 8017576:	bf00      	nop
 8017578:	0802a79c 	.word	0x0802a79c

0801757c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801757c:	6840      	ldr	r0, [r0, #4]
 801757e:	6803      	ldr	r3, [r0, #0]
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	4718      	bx	r3

08017584 <_ZNK8touchgfx13AbstractShape14getMinimalRectEv>:
 8017584:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8017588:	4602      	mov	r2, r0
 801758a:	cb03      	ldmia	r3!, {r0, r1}
 801758c:	6010      	str	r0, [r2, #0]
 801758e:	4610      	mov	r0, r2
 8017590:	6051      	str	r1, [r2, #4]
 8017592:	4770      	bx	lr

08017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8017594:	b507      	push	{r0, r1, r2, lr}
 8017596:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801759a:	ab01      	add	r3, sp, #4
 801759c:	6809      	ldr	r1, [r1, #0]
 801759e:	6800      	ldr	r0, [r0, #0]
 80175a0:	f004 f9c6 	bl	801b930 <_ZN8touchgfx6muldivElllRl>
 80175a4:	b003      	add	sp, #12
 80175a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080175ac <_ZN8touchgfx7CWRUtil4sineEi>:
 80175ac:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80175b0:	fb90 f3f2 	sdiv	r3, r0, r2
 80175b4:	fb03 0312 	mls	r3, r3, r2, r0
 80175b8:	4413      	add	r3, r2
 80175ba:	fb93 f0f2 	sdiv	r0, r3, r2
 80175be:	fb02 3010 	mls	r0, r2, r0, r3
 80175c2:	4b0a      	ldr	r3, [pc, #40]	; (80175ec <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 80175c4:	285a      	cmp	r0, #90	; 0x5a
 80175c6:	dc02      	bgt.n	80175ce <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 80175c8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80175cc:	4770      	bx	lr
 80175ce:	28b4      	cmp	r0, #180	; 0xb4
 80175d0:	dc02      	bgt.n	80175d8 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 80175d2:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 80175d6:	e7f7      	b.n	80175c8 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 80175d8:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 80175dc:	bfd4      	ite	le
 80175de:	38b4      	suble	r0, #180	; 0xb4
 80175e0:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 80175e4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80175e8:	4240      	negs	r0, r0
 80175ea:	4770      	bx	lr
 80175ec:	0802a866 	.word	0x0802a866

080175f0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 80175f0:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 80175f4:	fb90 f3f2 	sdiv	r3, r0, r2
 80175f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80175fa:	fb03 0012 	mls	r0, r3, r2, r0
 80175fe:	4410      	add	r0, r2
 8017600:	fb90 f4f2 	sdiv	r4, r0, r2
 8017604:	fb02 0414 	mls	r4, r2, r4, r0
 8017608:	f004 061f 	and.w	r6, r4, #31
 801760c:	1164      	asrs	r4, r4, #5
 801760e:	4620      	mov	r0, r4
 8017610:	f7ff ffcc 	bl	80175ac <_ZN8touchgfx7CWRUtil4sineEi>
 8017614:	4605      	mov	r5, r0
 8017616:	b90e      	cbnz	r6, 801761c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 8017618:	b002      	add	sp, #8
 801761a:	bd70      	pop	{r4, r5, r6, pc}
 801761c:	1c60      	adds	r0, r4, #1
 801761e:	f7ff ffc5 	bl	80175ac <_ZN8touchgfx7CWRUtil4sineEi>
 8017622:	ab01      	add	r3, sp, #4
 8017624:	2220      	movs	r2, #32
 8017626:	4631      	mov	r1, r6
 8017628:	1b40      	subs	r0, r0, r5
 801762a:	f004 f981 	bl	801b930 <_ZN8touchgfx6muldivElllRl>
 801762e:	4428      	add	r0, r5
 8017630:	e7f2      	b.n	8017618 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

08017632 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>:
 8017632:	b507      	push	{r0, r1, r2, lr}
 8017634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017638:	ab01      	add	r3, sp, #4
 801763a:	0140      	lsls	r0, r0, #5
 801763c:	f004 f978 	bl	801b930 <_ZN8touchgfx6muldivElllRl>
 8017640:	2320      	movs	r3, #32
 8017642:	fb90 f0f3 	sdiv	r0, r0, r3
 8017646:	b003      	add	sp, #12
 8017648:	f85d fb04 	ldr.w	pc, [sp], #4

0801764c <_ZN8touchgfx13AbstractShapeC1Ev>:
 801764c:	b510      	push	{r4, lr}
 801764e:	4604      	mov	r4, r0
 8017650:	f000 fe68 	bl	8018324 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8017654:	4b07      	ldr	r3, [pc, #28]	; (8017674 <_ZN8touchgfx13AbstractShapeC1Ev+0x28>)
 8017656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801765a:	4620      	mov	r0, r4
 801765c:	6023      	str	r3, [r4, #0]
 801765e:	2300      	movs	r3, #0
 8017660:	e9c4 220f 	strd	r2, r2, [r4, #60]	; 0x3c
 8017664:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8017668:	63a3      	str	r3, [r4, #56]	; 0x38
 801766a:	60a3      	str	r3, [r4, #8]
 801766c:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8017670:	bd10      	pop	{r4, pc}
 8017672:	bf00      	nop
 8017674:	0802a924 	.word	0x0802a924

08017678 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv>:
 8017678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801767c:	2500      	movs	r5, #0
 801767e:	6803      	ldr	r3, [r0, #0]
 8017680:	b087      	sub	sp, #28
 8017682:	4604      	mov	r4, r0
 8017684:	462e      	mov	r6, r5
 8017686:	46a8      	mov	r8, r5
 8017688:	462f      	mov	r7, r5
 801768a:	46a9      	mov	r9, r5
 801768c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801768e:	4798      	blx	r3
 8017690:	9000      	str	r0, [sp, #0]
 8017692:	9b00      	ldr	r3, [sp, #0]
 8017694:	429d      	cmp	r5, r3
 8017696:	da7f      	bge.n	8017798 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x120>
 8017698:	6823      	ldr	r3, [r4, #0]
 801769a:	4629      	mov	r1, r5
 801769c:	4620      	mov	r0, r4
 801769e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80176a2:	4798      	blx	r3
 80176a4:	6823      	ldr	r3, [r4, #0]
 80176a6:	4682      	mov	sl, r0
 80176a8:	4629      	mov	r1, r5
 80176aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80176ae:	4620      	mov	r0, r4
 80176b0:	4798      	blx	r3
 80176b2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80176b4:	4683      	mov	fp, r0
 80176b6:	4650      	mov	r0, sl
 80176b8:	f7ff ffbb 	bl	8017632 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 80176bc:	9002      	str	r0, [sp, #8]
 80176be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80176c0:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 80176c4:	f7ff ff94 	bl	80175f0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80176c8:	a903      	add	r1, sp, #12
 80176ca:	9003      	str	r0, [sp, #12]
 80176cc:	a802      	add	r0, sp, #8
 80176ce:	f7ff ff61 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80176d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80176d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80176d6:	4402      	add	r2, r0
 80176d8:	4658      	mov	r0, fp
 80176da:	9201      	str	r2, [sp, #4]
 80176dc:	f7ff ffa9 	bl	8017632 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 80176e0:	9004      	str	r0, [sp, #16]
 80176e2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80176e4:	f7ff ff84 	bl	80175f0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80176e8:	a905      	add	r1, sp, #20
 80176ea:	9005      	str	r0, [sp, #20]
 80176ec:	a804      	add	r0, sp, #16
 80176ee:	f7ff ff51 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80176f2:	9a01      	ldr	r2, [sp, #4]
 80176f4:	1a12      	subs	r2, r2, r0
 80176f6:	b125      	cbz	r5, 8017702 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x8a>
 80176f8:	2320      	movs	r3, #32
 80176fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80176fe:	429f      	cmp	r7, r3
 8017700:	da03      	bge.n	801770a <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x92>
 8017702:	2720      	movs	r7, #32
 8017704:	fb92 f7f7 	sdiv	r7, r2, r7
 8017708:	b125      	cbz	r5, 8017714 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x9c>
 801770a:	2320      	movs	r3, #32
 801770c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017710:	4599      	cmp	r9, r3
 8017712:	dd03      	ble.n	801771c <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xa4>
 8017714:	f04f 0920 	mov.w	r9, #32
 8017718:	fb92 f9f9 	sdiv	r9, r2, r9
 801771c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801771e:	4658      	mov	r0, fp
 8017720:	9201      	str	r2, [sp, #4]
 8017722:	f7ff ff86 	bl	8017632 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 8017726:	9002      	str	r0, [sp, #8]
 8017728:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801772a:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 801772e:	f7ff ff5f 	bl	80175f0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017732:	a903      	add	r1, sp, #12
 8017734:	9003      	str	r0, [sp, #12]
 8017736:	a802      	add	r0, sp, #8
 8017738:	f7ff ff2c 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801773c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801773e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017740:	eb00 0b03 	add.w	fp, r0, r3
 8017744:	4650      	mov	r0, sl
 8017746:	f7ff ff74 	bl	8017632 <_ZN8touchgfx7CWRUtil5mulQ5ENS0_2Q5ENS0_3Q10E>
 801774a:	9004      	str	r0, [sp, #16]
 801774c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801774e:	f7ff ff4f 	bl	80175f0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017752:	a905      	add	r1, sp, #20
 8017754:	9005      	str	r0, [sp, #20]
 8017756:	a804      	add	r0, sp, #16
 8017758:	f7ff ff1c 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801775c:	9a01      	ldr	r2, [sp, #4]
 801775e:	eb00 030b 	add.w	r3, r0, fp
 8017762:	b125      	cbz	r5, 801776e <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xf6>
 8017764:	2120      	movs	r1, #32
 8017766:	fb93 f1f1 	sdiv	r1, r3, r1
 801776a:	428e      	cmp	r6, r1
 801776c:	da03      	bge.n	8017776 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0xfe>
 801776e:	2620      	movs	r6, #32
 8017770:	fb93 f6f6 	sdiv	r6, r3, r6
 8017774:	b125      	cbz	r5, 8017780 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x108>
 8017776:	2120      	movs	r1, #32
 8017778:	fb93 f1f1 	sdiv	r1, r3, r1
 801777c:	4588      	cmp	r8, r1
 801777e:	dd03      	ble.n	8017788 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x110>
 8017780:	f04f 0820 	mov.w	r8, #32
 8017784:	fb93 f8f8 	sdiv	r8, r3, r8
 8017788:	6821      	ldr	r1, [r4, #0]
 801778a:	4620      	mov	r0, r4
 801778c:	f8d1 a088 	ldr.w	sl, [r1, #136]	; 0x88
 8017790:	4629      	mov	r1, r5
 8017792:	47d0      	blx	sl
 8017794:	3501      	adds	r5, #1
 8017796:	e77c      	b.n	8017692 <_ZN8touchgfx13AbstractShape24updateAbstractShapeCacheEv+0x1a>
 8017798:	3701      	adds	r7, #1
 801779a:	3601      	adds	r6, #1
 801779c:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
 80177a0:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
 80177a4:	eba7 0909 	sub.w	r9, r7, r9
 80177a8:	eba6 0808 	sub.w	r8, r6, r8
 80177ac:	f8a4 9048 	strh.w	r9, [r4, #72]	; 0x48
 80177b0:	f8a4 804a 	strh.w	r8, [r4, #74]	; 0x4a
 80177b4:	b007      	add	sp, #28
 80177b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080177ba <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE>:
 80177ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80177bc:	b0b1      	sub	sp, #196	; 0xc4
 80177be:	4604      	mov	r4, r0
 80177c0:	460a      	mov	r2, r1
 80177c2:	4601      	mov	r1, r0
 80177c4:	a801      	add	r0, sp, #4
 80177c6:	f00d ff6b 	bl	80256a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80177ca:	6823      	ldr	r3, [r4, #0]
 80177cc:	4620      	mov	r0, r4
 80177ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80177d0:	4798      	blx	r3
 80177d2:	4606      	mov	r6, r0
 80177d4:	b390      	cbz	r0, 801783c <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x82>
 80177d6:	6823      	ldr	r3, [r4, #0]
 80177d8:	2100      	movs	r1, #0
 80177da:	4620      	mov	r0, r4
 80177dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80177e0:	4798      	blx	r3
 80177e2:	6823      	ldr	r3, [r4, #0]
 80177e4:	4605      	mov	r5, r0
 80177e6:	2100      	movs	r1, #0
 80177e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80177ec:	4620      	mov	r0, r4
 80177ee:	4798      	blx	r3
 80177f0:	4629      	mov	r1, r5
 80177f2:	2501      	movs	r5, #1
 80177f4:	4602      	mov	r2, r0
 80177f6:	a801      	add	r0, sp, #4
 80177f8:	f00e f91b 	bl	8025a32 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80177fc:	42b5      	cmp	r5, r6
 80177fe:	da13      	bge.n	8017828 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x6e>
 8017800:	6823      	ldr	r3, [r4, #0]
 8017802:	4629      	mov	r1, r5
 8017804:	4620      	mov	r0, r4
 8017806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801780a:	4798      	blx	r3
 801780c:	6823      	ldr	r3, [r4, #0]
 801780e:	4607      	mov	r7, r0
 8017810:	4629      	mov	r1, r5
 8017812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017816:	4620      	mov	r0, r4
 8017818:	4798      	blx	r3
 801781a:	4639      	mov	r1, r7
 801781c:	4602      	mov	r2, r0
 801781e:	a801      	add	r0, sp, #4
 8017820:	f00e f896 	bl	8025950 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017824:	3501      	adds	r5, #1
 8017826:	e7e9      	b.n	80177fc <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x42>
 8017828:	a801      	add	r0, sp, #4
 801782a:	f00e fa06 	bl	8025c3a <_ZN8touchgfx6Canvas6renderEv>
 801782e:	4604      	mov	r4, r0
 8017830:	a801      	add	r0, sp, #4
 8017832:	f00e fa3f 	bl	8025cb4 <_ZN8touchgfx6CanvasD1Ev>
 8017836:	4620      	mov	r0, r4
 8017838:	b031      	add	sp, #196	; 0xc4
 801783a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801783c:	2401      	movs	r4, #1
 801783e:	e7f7      	b.n	8017830 <_ZNK8touchgfx13AbstractShape16drawCanvasWidgetERKNS_4RectE+0x76>

08017840 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8017840:	2001      	movs	r0, #1
 8017842:	4770      	bx	lr

08017844 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8017844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017848:	460d      	mov	r5, r1
 801784a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801784e:	b085      	sub	sp, #20
 8017850:	4690      	mov	r8, r2
 8017852:	4411      	add	r1, r2
 8017854:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8017858:	4699      	mov	r9, r3
 801785a:	6803      	ldr	r3, [r0, #0]
 801785c:	60c1      	str	r1, [r0, #12]
 801785e:	4604      	mov	r4, r0
 8017860:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017862:	440a      	add	r2, r1
 8017864:	6102      	str	r2, [r0, #16]
 8017866:	695b      	ldr	r3, [r3, #20]
 8017868:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 801786c:	4798      	blx	r3
 801786e:	2800      	cmp	r0, #0
 8017870:	d039      	beq.n	80178e6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8017872:	44c8      	add	r8, r9
 8017874:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017878:	4445      	add	r5, r8
 801787a:	6823      	ldr	r3, [r4, #0]
 801787c:	f10d 020f 	add.w	r2, sp, #15
 8017880:	a903      	add	r1, sp, #12
 8017882:	4620      	mov	r0, r4
 8017884:	9200      	str	r2, [sp, #0]
 8017886:	f10d 020d 	add.w	r2, sp, #13
 801788a:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801788e:	f10d 030e 	add.w	r3, sp, #14
 8017892:	47c0      	blx	r8
 8017894:	b1f8      	cbz	r0, 80178d6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8017896:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801789a:	7a20      	ldrb	r0, [r4, #8]
 801789c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80178a0:	4358      	muls	r0, r3
 80178a2:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80178a6:	1c43      	adds	r3, r0, #1
 80178a8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80178ac:	f817 0b01 	ldrb.w	r0, [r7], #1
 80178b0:	121b      	asrs	r3, r3, #8
 80178b2:	fb10 f003 	smulbb	r0, r0, r3
 80178b6:	b283      	uxth	r3, r0
 80178b8:	1c58      	adds	r0, r3, #1
 80178ba:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80178be:	6823      	ldr	r3, [r4, #0]
 80178c0:	1200      	asrs	r0, r0, #8
 80178c2:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80178c6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80178ca:	28ff      	cmp	r0, #255	; 0xff
 80178cc:	d10e      	bne.n	80178ec <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 80178ce:	9100      	str	r1, [sp, #0]
 80178d0:	4629      	mov	r1, r5
 80178d2:	4620      	mov	r0, r4
 80178d4:	47c0      	blx	r8
 80178d6:	68e3      	ldr	r3, [r4, #12]
 80178d8:	3e01      	subs	r6, #1
 80178da:	f105 0503 	add.w	r5, r5, #3
 80178de:	f103 0301 	add.w	r3, r3, #1
 80178e2:	60e3      	str	r3, [r4, #12]
 80178e4:	d1c9      	bne.n	801787a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 80178e6:	b005      	add	sp, #20
 80178e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178ec:	fa1f fc80 	uxth.w	ip, r0
 80178f0:	43c0      	mvns	r0, r0
 80178f2:	f895 e002 	ldrb.w	lr, [r5, #2]
 80178f6:	fb12 f20c 	smulbb	r2, r2, ip
 80178fa:	b2c0      	uxtb	r0, r0
 80178fc:	fb13 f30c 	smulbb	r3, r3, ip
 8017900:	fb0e 2200 	mla	r2, lr, r0, r2
 8017904:	f895 e001 	ldrb.w	lr, [r5, #1]
 8017908:	fb11 f10c 	smulbb	r1, r1, ip
 801790c:	fb0e 3300 	mla	r3, lr, r0, r3
 8017910:	f895 e000 	ldrb.w	lr, [r5]
 8017914:	b292      	uxth	r2, r2
 8017916:	b29b      	uxth	r3, r3
 8017918:	fb0e 1000 	mla	r0, lr, r0, r1
 801791c:	1c59      	adds	r1, r3, #1
 801791e:	b280      	uxth	r0, r0
 8017920:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8017924:	1c51      	adds	r1, r2, #1
 8017926:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801792a:	1c41      	adds	r1, r0, #1
 801792c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017930:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8017934:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8017938:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801793c:	9000      	str	r0, [sp, #0]
 801793e:	e7c7      	b.n	80178d0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08017940 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8017940:	f89d 0000 	ldrb.w	r0, [sp]
 8017944:	704b      	strb	r3, [r1, #1]
 8017946:	7008      	strb	r0, [r1, #0]
 8017948:	708a      	strb	r2, [r1, #2]
 801794a:	4770      	bx	lr

0801794c <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 801794c:	b508      	push	{r3, lr}
 801794e:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8017952:	f7ff fe4d 	bl	80175f0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017956:	bd08      	pop	{r3, pc}

08017958 <_ZN8touchgfx6CircleC1Ev>:
 8017958:	b510      	push	{r4, lr}
 801795a:	4604      	mov	r4, r0
 801795c:	f000 fce2 	bl	8018324 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8017960:	4b08      	ldr	r3, [pc, #32]	; (8017984 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8017962:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8017966:	4620      	mov	r0, r4
 8017968:	6023      	str	r3, [r4, #0]
 801796a:	2300      	movs	r3, #0
 801796c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8017970:	f24b 4205 	movw	r2, #46085	; 0xb405
 8017974:	60a3      	str	r3, [r4, #8]
 8017976:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801797a:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801797e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8017982:	bd10      	pop	{r4, pc}
 8017984:	0802a9e8 	.word	0x0802a9e8

08017988 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8017988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801798c:	4606      	mov	r6, r0
 801798e:	6810      	ldr	r0, [r2, #0]
 8017990:	4698      	mov	r8, r3
 8017992:	4691      	mov	r9, r2
 8017994:	460f      	mov	r7, r1
 8017996:	f7ff fe2b 	bl	80175f0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801799a:	a902      	add	r1, sp, #8
 801799c:	2402      	movs	r4, #2
 801799e:	f841 0d08 	str.w	r0, [r1, #-8]!
 80179a2:	4640      	mov	r0, r8
 80179a4:	f7ff fdf6 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80179a8:	6b35      	ldr	r5, [r6, #48]	; 0x30
 80179aa:	fb90 f0f4 	sdiv	r0, r0, r4
 80179ae:	4405      	add	r5, r0
 80179b0:	f8d9 0000 	ldr.w	r0, [r9]
 80179b4:	f7ff ffca 	bl	801794c <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80179b8:	a902      	add	r1, sp, #8
 80179ba:	f841 0d04 	str.w	r0, [r1, #-4]!
 80179be:	4640      	mov	r0, r8
 80179c0:	f7ff fde8 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80179c4:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80179c6:	4629      	mov	r1, r5
 80179c8:	fb90 f0f4 	sdiv	r0, r0, r4
 80179cc:	1a12      	subs	r2, r2, r0
 80179ce:	4638      	mov	r0, r7
 80179d0:	f00e f82f 	bl	8025a32 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80179d4:	b003      	add	sp, #12
 80179d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080179da <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 80179da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80179de:	9e08      	ldr	r6, [sp, #32]
 80179e0:	4698      	mov	r8, r3
 80179e2:	4615      	mov	r5, r2
 80179e4:	460f      	mov	r7, r1
 80179e6:	6830      	ldr	r0, [r6, #0]
 80179e8:	2402      	movs	r4, #2
 80179ea:	f7ff fe01 	bl	80175f0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80179ee:	a902      	add	r1, sp, #8
 80179f0:	f841 0d08 	str.w	r0, [r1, #-8]!
 80179f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80179f6:	f7ff fdcd 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80179fa:	682d      	ldr	r5, [r5, #0]
 80179fc:	fb90 f0f4 	sdiv	r0, r0, r4
 8017a00:	4405      	add	r5, r0
 8017a02:	6830      	ldr	r0, [r6, #0]
 8017a04:	f7ff ffa2 	bl	801794c <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017a08:	a902      	add	r1, sp, #8
 8017a0a:	f841 0d04 	str.w	r0, [r1, #-4]!
 8017a0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a10:	f7ff fdc0 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017a14:	f8d8 2000 	ldr.w	r2, [r8]
 8017a18:	4629      	mov	r1, r5
 8017a1a:	fb90 f0f4 	sdiv	r0, r0, r4
 8017a1e:	1a12      	subs	r2, r2, r0
 8017a20:	4638      	mov	r0, r7
 8017a22:	f00d ff95 	bl	8025950 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017a26:	b002      	add	sp, #8
 8017a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017a2c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8017a2c:	b513      	push	{r0, r1, r4, lr}
 8017a2e:	e9cd 2300 	strd	r2, r3, [sp]
 8017a32:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8017a36:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8017a3a:	f7ff ffce 	bl	80179da <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8017a3e:	b002      	add	sp, #8
 8017a40:	bd10      	pop	{r4, pc}

08017a42 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8017a42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a44:	680e      	ldr	r6, [r1, #0]
 8017a46:	681f      	ldr	r7, [r3, #0]
 8017a48:	9807      	ldr	r0, [sp, #28]
 8017a4a:	42be      	cmp	r6, r7
 8017a4c:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8017a50:	bfb8      	it	lt
 8017a52:	601e      	strlt	r6, [r3, #0]
 8017a54:	680b      	ldr	r3, [r1, #0]
 8017a56:	6829      	ldr	r1, [r5, #0]
 8017a58:	428b      	cmp	r3, r1
 8017a5a:	bfc8      	it	gt
 8017a5c:	602b      	strgt	r3, [r5, #0]
 8017a5e:	6813      	ldr	r3, [r2, #0]
 8017a60:	6821      	ldr	r1, [r4, #0]
 8017a62:	428b      	cmp	r3, r1
 8017a64:	bfb8      	it	lt
 8017a66:	6023      	strlt	r3, [r4, #0]
 8017a68:	6813      	ldr	r3, [r2, #0]
 8017a6a:	6802      	ldr	r2, [r0, #0]
 8017a6c:	4293      	cmp	r3, r2
 8017a6e:	bfc8      	it	gt
 8017a70:	6003      	strgt	r3, [r0, #0]
 8017a72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017a74 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8017a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a78:	b089      	sub	sp, #36	; 0x24
 8017a7a:	4690      	mov	r8, r2
 8017a7c:	4606      	mov	r6, r0
 8017a7e:	2402      	movs	r4, #2
 8017a80:	ad08      	add	r5, sp, #32
 8017a82:	6808      	ldr	r0, [r1, #0]
 8017a84:	461f      	mov	r7, r3
 8017a86:	4689      	mov	r9, r1
 8017a88:	f7ff fdb2 	bl	80175f0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017a8c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8017a90:	4640      	mov	r0, r8
 8017a92:	4629      	mov	r1, r5
 8017a94:	f7ff fd7e 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017a98:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8017a9a:	fb90 f0f4 	sdiv	r0, r0, r4
 8017a9e:	4418      	add	r0, r3
 8017aa0:	9005      	str	r0, [sp, #20]
 8017aa2:	f8d9 0000 	ldr.w	r0, [r9]
 8017aa6:	f7ff ff51 	bl	801794c <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017aaa:	4629      	mov	r1, r5
 8017aac:	9007      	str	r0, [sp, #28]
 8017aae:	4640      	mov	r0, r8
 8017ab0:	f7ff fd70 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017ab4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017ab6:	aa08      	add	r2, sp, #32
 8017ab8:	a905      	add	r1, sp, #20
 8017aba:	fb90 f0f4 	sdiv	r0, r0, r4
 8017abe:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8017ac0:	1a24      	subs	r4, r4, r0
 8017ac2:	4630      	mov	r0, r6
 8017ac4:	f842 4d08 	str.w	r4, [r2, #-8]!
 8017ac8:	9302      	str	r3, [sp, #8]
 8017aca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017acc:	9301      	str	r3, [sp, #4]
 8017ace:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017ad0:	9300      	str	r3, [sp, #0]
 8017ad2:	463b      	mov	r3, r7
 8017ad4:	f7ff ffb5 	bl	8017a42 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017ad8:	b009      	add	sp, #36	; 0x24
 8017ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017ade <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 8017ade:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ae2:	4291      	cmp	r1, r2
 8017ae4:	b08d      	sub	sp, #52	; 0x34
 8017ae6:	461e      	mov	r6, r3
 8017ae8:	4604      	mov	r4, r0
 8017aea:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8017aee:	ad0c      	add	r5, sp, #48	; 0x30
 8017af0:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8017af4:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8017af8:	bfc8      	it	gt
 8017afa:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 8017afe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017b02:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 8017b06:	1a9b      	subs	r3, r3, r2
 8017b08:	a907      	add	r1, sp, #28
 8017b0a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017b0e:	bfa2      	ittt	ge
 8017b10:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8017b14:	2200      	movge	r2, #0
 8017b16:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 8017b1a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8017b1c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8017b1e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017b22:	f845 3d04 	str.w	r3, [r5, #-4]!
 8017b26:	4633      	mov	r3, r6
 8017b28:	462a      	mov	r2, r5
 8017b2a:	9700      	str	r7, [sp, #0]
 8017b2c:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017b30:	f7ff ffa0 	bl	8017a74 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017b34:	9b07      	ldr	r3, [sp, #28]
 8017b36:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 8017b3a:	f103 0120 	add.w	r1, r3, #32
 8017b3e:	fb91 f3f0 	sdiv	r3, r1, r0
 8017b42:	fb00 1313 	mls	r3, r0, r3, r1
 8017b46:	1ac3      	subs	r3, r0, r3
 8017b48:	fb93 f2f0 	sdiv	r2, r3, r0
 8017b4c:	fb00 3312 	mls	r3, r0, r2, r3
 8017b50:	440b      	add	r3, r1
 8017b52:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 8017b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b58:	9906      	ldr	r1, [sp, #24]
 8017b5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017b5c:	4291      	cmp	r1, r2
 8017b5e:	db11      	blt.n	8017b84 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 8017b60:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017b62:	4651      	mov	r1, sl
 8017b64:	9700      	str	r7, [sp, #0]
 8017b66:	4620      	mov	r0, r4
 8017b68:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017b6c:	462a      	mov	r2, r5
 8017b6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b70:	4633      	mov	r3, r6
 8017b72:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017b76:	f7ff ff7d 	bl	8017a74 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b7c:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8017b80:	9309      	str	r3, [sp, #36]	; 0x24
 8017b82:	e7e8      	b.n	8017b56 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8017b84:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 8017b88:	4291      	cmp	r1, r2
 8017b8a:	dd0c      	ble.n	8017ba6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 8017b8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017b8e:	a906      	add	r1, sp, #24
 8017b90:	9700      	str	r7, [sp, #0]
 8017b92:	4620      	mov	r0, r4
 8017b94:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017b98:	462a      	mov	r2, r5
 8017b9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b9c:	4633      	mov	r3, r6
 8017b9e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017ba2:	f7ff ff67 	bl	8017a74 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017ba6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	f040 8097 	bne.w	8017cdc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 8017bae:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8017bb2:	1a52      	subs	r2, r2, r1
 8017bb4:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 8017bb8:	da0a      	bge.n	8017bd0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 8017bba:	462a      	mov	r2, r5
 8017bbc:	a90a      	add	r1, sp, #40	; 0x28
 8017bbe:	9700      	str	r7, [sp, #0]
 8017bc0:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8017bc4:	4633      	mov	r3, r6
 8017bc6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017bca:	4620      	mov	r0, r4
 8017bcc:	f7ff ff52 	bl	8017a74 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017bd0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8017bd4:	2bb3      	cmp	r3, #179	; 0xb3
 8017bd6:	d87e      	bhi.n	8017cd6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8017bd8:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 8017bdc:	1a1b      	subs	r3, r3, r0
 8017bde:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017be2:	da78      	bge.n	8017cd6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8017be4:	ad0c      	add	r5, sp, #48	; 0x30
 8017be6:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8017bea:	f7ff fd01 	bl	80175f0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017bee:	f04f 0a02 	mov.w	sl, #2
 8017bf2:	f845 0d04 	str.w	r0, [r5, #-4]!
 8017bf6:	4658      	mov	r0, fp
 8017bf8:	4629      	mov	r1, r5
 8017bfa:	f7ff fccb 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017bfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017c00:	18c3      	adds	r3, r0, r3
 8017c02:	9807      	ldr	r0, [sp, #28]
 8017c04:	9305      	str	r3, [sp, #20]
 8017c06:	f7ff fea1 	bl	801794c <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017c0a:	4629      	mov	r1, r5
 8017c0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8017c0e:	4658      	mov	r0, fp
 8017c10:	f7ff fcc0 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017c14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017c16:	9a05      	ldr	r2, [sp, #20]
 8017c18:	a90a      	add	r1, sp, #40	; 0x28
 8017c1a:	1a1b      	subs	r3, r3, r0
 8017c1c:	9700      	str	r7, [sp, #0]
 8017c1e:	4620      	mov	r0, r4
 8017c20:	9304      	str	r3, [sp, #16]
 8017c22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017c24:	fb93 f3fa 	sdiv	r3, r3, sl
 8017c28:	1ad2      	subs	r2, r2, r3
 8017c2a:	920a      	str	r2, [sp, #40]	; 0x28
 8017c2c:	9a04      	ldr	r2, [sp, #16]
 8017c2e:	1ad3      	subs	r3, r2, r3
 8017c30:	462a      	mov	r2, r5
 8017c32:	930b      	str	r3, [sp, #44]	; 0x2c
 8017c34:	4633      	mov	r3, r6
 8017c36:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017c3a:	f7ff ff02 	bl	8017a42 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017c3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017c40:	9a05      	ldr	r2, [sp, #20]
 8017c42:	a90a      	add	r1, sp, #40	; 0x28
 8017c44:	4620      	mov	r0, r4
 8017c46:	9700      	str	r7, [sp, #0]
 8017c48:	fb93 f3fa 	sdiv	r3, r3, sl
 8017c4c:	189a      	adds	r2, r3, r2
 8017c4e:	920a      	str	r2, [sp, #40]	; 0x28
 8017c50:	9a04      	ldr	r2, [sp, #16]
 8017c52:	4413      	add	r3, r2
 8017c54:	462a      	mov	r2, r5
 8017c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8017c58:	4633      	mov	r3, r6
 8017c5a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017c5e:	f7ff fef0 	bl	8017a42 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017c62:	9806      	ldr	r0, [sp, #24]
 8017c64:	f7ff fcc4 	bl	80175f0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017c68:	4629      	mov	r1, r5
 8017c6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8017c6c:	4658      	mov	r0, fp
 8017c6e:	f7ff fc91 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017c72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017c74:	18c3      	adds	r3, r0, r3
 8017c76:	9806      	ldr	r0, [sp, #24]
 8017c78:	9304      	str	r3, [sp, #16]
 8017c7a:	f7ff fe67 	bl	801794c <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017c7e:	4629      	mov	r1, r5
 8017c80:	900b      	str	r0, [sp, #44]	; 0x2c
 8017c82:	4658      	mov	r0, fp
 8017c84:	f7ff fc86 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017c88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017c8a:	9a04      	ldr	r2, [sp, #16]
 8017c8c:	a90a      	add	r1, sp, #40	; 0x28
 8017c8e:	eba3 0b00 	sub.w	fp, r3, r0
 8017c92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017c94:	4620      	mov	r0, r4
 8017c96:	9700      	str	r7, [sp, #0]
 8017c98:	fb93 f3fa 	sdiv	r3, r3, sl
 8017c9c:	1ad2      	subs	r2, r2, r3
 8017c9e:	ebab 0303 	sub.w	r3, fp, r3
 8017ca2:	920a      	str	r2, [sp, #40]	; 0x28
 8017ca4:	462a      	mov	r2, r5
 8017ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8017ca8:	4633      	mov	r3, r6
 8017caa:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017cae:	f7ff fec8 	bl	8017a42 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017cb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017cb4:	9700      	str	r7, [sp, #0]
 8017cb6:	462a      	mov	r2, r5
 8017cb8:	a90a      	add	r1, sp, #40	; 0x28
 8017cba:	4620      	mov	r0, r4
 8017cbc:	fb93 fafa 	sdiv	sl, r3, sl
 8017cc0:	9b04      	ldr	r3, [sp, #16]
 8017cc2:	4453      	add	r3, sl
 8017cc4:	930a      	str	r3, [sp, #40]	; 0x28
 8017cc6:	eb0a 030b 	add.w	r3, sl, fp
 8017cca:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017cce:	930b      	str	r3, [sp, #44]	; 0x2c
 8017cd0:	4633      	mov	r3, r6
 8017cd2:	f7ff feb6 	bl	8017a42 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017cd6:	b00d      	add	sp, #52	; 0x34
 8017cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cdc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017cde:	a907      	add	r1, sp, #28
 8017ce0:	9700      	str	r7, [sp, #0]
 8017ce2:	4620      	mov	r0, r4
 8017ce4:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017ce8:	462a      	mov	r2, r5
 8017cea:	930b      	str	r3, [sp, #44]	; 0x2c
 8017cec:	4633      	mov	r3, r6
 8017cee:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017cf2:	f7ff febf 	bl	8017a74 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8017cf6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017cf8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017cfa:	a906      	add	r1, sp, #24
 8017cfc:	9700      	str	r7, [sp, #0]
 8017cfe:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017d02:	462a      	mov	r2, r5
 8017d04:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d06:	4633      	mov	r3, r6
 8017d08:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8017d0c:	e75d      	b.n	8017bca <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

08017d0e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8017d0e:	b530      	push	{r4, r5, lr}
 8017d10:	4604      	mov	r4, r0
 8017d12:	4608      	mov	r0, r1
 8017d14:	4611      	mov	r1, r2
 8017d16:	461a      	mov	r2, r3
 8017d18:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017d1c:	b089      	sub	sp, #36	; 0x24
 8017d1e:	2500      	movs	r5, #0
 8017d20:	015b      	lsls	r3, r3, #5
 8017d22:	9505      	str	r5, [sp, #20]
 8017d24:	9304      	str	r3, [sp, #16]
 8017d26:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017d2a:	015b      	lsls	r3, r3, #5
 8017d2c:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8017d30:	ab07      	add	r3, sp, #28
 8017d32:	2520      	movs	r5, #32
 8017d34:	9302      	str	r3, [sp, #8]
 8017d36:	ab06      	add	r3, sp, #24
 8017d38:	9301      	str	r3, [sp, #4]
 8017d3a:	ab05      	add	r3, sp, #20
 8017d3c:	9300      	str	r3, [sp, #0]
 8017d3e:	ab04      	add	r3, sp, #16
 8017d40:	f7ff fecd 	bl	8017ade <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8017d44:	9a04      	ldr	r2, [sp, #16]
 8017d46:	9805      	ldr	r0, [sp, #20]
 8017d48:	9b06      	ldr	r3, [sp, #24]
 8017d4a:	9907      	ldr	r1, [sp, #28]
 8017d4c:	fb92 f2f5 	sdiv	r2, r2, r5
 8017d50:	fb90 f0f5 	sdiv	r0, r0, r5
 8017d54:	fb93 f3f5 	sdiv	r3, r3, r5
 8017d58:	fb91 f1f5 	sdiv	r1, r1, r5
 8017d5c:	b292      	uxth	r2, r2
 8017d5e:	3002      	adds	r0, #2
 8017d60:	b29b      	uxth	r3, r3
 8017d62:	3102      	adds	r1, #2
 8017d64:	1a80      	subs	r0, r0, r2
 8017d66:	3a01      	subs	r2, #1
 8017d68:	1ac9      	subs	r1, r1, r3
 8017d6a:	3b01      	subs	r3, #1
 8017d6c:	80a0      	strh	r0, [r4, #4]
 8017d6e:	4620      	mov	r0, r4
 8017d70:	8022      	strh	r2, [r4, #0]
 8017d72:	8063      	strh	r3, [r4, #2]
 8017d74:	80e1      	strh	r1, [r4, #6]
 8017d76:	b009      	add	sp, #36	; 0x24
 8017d78:	bd30      	pop	{r4, r5, pc}

08017d7a <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8017d7a:	b510      	push	{r4, lr}
 8017d7c:	4604      	mov	r4, r0
 8017d7e:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8017d82:	f7ff ffc4 	bl	8017d0e <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8017d86:	4620      	mov	r0, r4
 8017d88:	bd10      	pop	{r4, pc}

08017d8a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8017d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d8e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8017d90:	b0ba      	sub	sp, #232	; 0xe8
 8017d92:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8017d94:	4604      	mov	r4, r0
 8017d96:	9303      	str	r3, [sp, #12]
 8017d98:	460f      	mov	r7, r1
 8017d9a:	429a      	cmp	r2, r3
 8017d9c:	9204      	str	r2, [sp, #16]
 8017d9e:	ae0a      	add	r6, sp, #40	; 0x28
 8017da0:	bfb8      	it	lt
 8017da2:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 8017da6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8017daa:	1a9b      	subs	r3, r3, r2
 8017dac:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017db0:	bfa2      	ittt	ge
 8017db2:	2200      	movge	r2, #0
 8017db4:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8017db8:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 8017dbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017dbe:	2a00      	cmp	r2, #0
 8017dc0:	d131      	bne.n	8017e26 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 8017dc2:	463a      	mov	r2, r7
 8017dc4:	4621      	mov	r1, r4
 8017dc6:	a80b      	add	r0, sp, #44	; 0x2c
 8017dc8:	f00d fc6a 	bl	80256a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8017dcc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017dce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017dd0:	9205      	str	r2, [sp, #20]
 8017dd2:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8017dd6:	9306      	str	r3, [sp, #24]
 8017dd8:	dc6f      	bgt.n	8017eba <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 8017dda:	9b03      	ldr	r3, [sp, #12]
 8017ddc:	a90b      	add	r1, sp, #44	; 0x2c
 8017dde:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8017de2:	4620      	mov	r0, r4
 8017de4:	9307      	str	r3, [sp, #28]
 8017de6:	016d      	lsls	r5, r5, #5
 8017de8:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8017dec:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017df0:	aa07      	add	r2, sp, #28
 8017df2:	930a      	str	r3, [sp, #40]	; 0x28
 8017df4:	4633      	mov	r3, r6
 8017df6:	f7ff fdc7 	bl	8017988 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017dfa:	9f07      	ldr	r7, [sp, #28]
 8017dfc:	2d00      	cmp	r5, #0
 8017dfe:	d165      	bne.n	8017ecc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 8017e00:	3720      	adds	r7, #32
 8017e02:	4639      	mov	r1, r7
 8017e04:	9a04      	ldr	r2, [sp, #16]
 8017e06:	9b06      	ldr	r3, [sp, #24]
 8017e08:	442f      	add	r7, r5
 8017e0a:	4291      	cmp	r1, r2
 8017e0c:	dc6b      	bgt.n	8017ee6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 8017e0e:	9a05      	ldr	r2, [sp, #20]
 8017e10:	4620      	mov	r0, r4
 8017e12:	9107      	str	r1, [sp, #28]
 8017e14:	a90b      	add	r1, sp, #44	; 0x2c
 8017e16:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017e1a:	aa07      	add	r2, sp, #28
 8017e1c:	930a      	str	r3, [sp, #40]	; 0x28
 8017e1e:	4633      	mov	r3, r6
 8017e20:	f7ff fe04 	bl	8017a2c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017e24:	e7ed      	b.n	8017e02 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8017e26:	f9b1 c000 	ldrsh.w	ip, [r1]
 8017e2a:	88bd      	ldrh	r5, [r7, #4]
 8017e2c:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8017e30:	4465      	add	r5, ip
 8017e32:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8017e36:	b22d      	sxth	r5, r5
 8017e38:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 8017e3c:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 8017e40:	2d00      	cmp	r5, #0
 8017e42:	bfb8      	it	lt
 8017e44:	426d      	neglt	r5, r5
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	bfb8      	it	lt
 8017e4a:	425b      	neglt	r3, r3
 8017e4c:	429d      	cmp	r5, r3
 8017e4e:	bfb8      	it	lt
 8017e50:	461d      	movlt	r5, r3
 8017e52:	88fb      	ldrh	r3, [r7, #6]
 8017e54:	4403      	add	r3, r0
 8017e56:	116d      	asrs	r5, r5, #5
 8017e58:	b21b      	sxth	r3, r3
 8017e5a:	3501      	adds	r5, #1
 8017e5c:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8017e60:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 8017e64:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	f100 0001 	add.w	r0, r0, #1
 8017e6e:	bfb8      	it	lt
 8017e70:	425b      	neglt	r3, r3
 8017e72:	2900      	cmp	r1, #0
 8017e74:	ea4f 0060 	mov.w	r0, r0, asr #1
 8017e78:	bfb8      	it	lt
 8017e7a:	4249      	neglt	r1, r1
 8017e7c:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8017e80:	428b      	cmp	r3, r1
 8017e82:	bfb8      	it	lt
 8017e84:	460b      	movlt	r3, r1
 8017e86:	115b      	asrs	r3, r3, #5
 8017e88:	3301      	adds	r3, #1
 8017e8a:	435b      	muls	r3, r3
 8017e8c:	fb05 3505 	mla	r5, r5, r5, r3
 8017e90:	2302      	movs	r3, #2
 8017e92:	fb92 f2f3 	sdiv	r2, r2, r3
 8017e96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017e98:	1a9a      	subs	r2, r3, r2
 8017e9a:	920a      	str	r2, [sp, #40]	; 0x28
 8017e9c:	f7ff fb86 	bl	80175ac <_ZN8touchgfx7CWRUtil4sineEi>
 8017ea0:	a90b      	add	r1, sp, #44	; 0x2c
 8017ea2:	900b      	str	r0, [sp, #44]	; 0x2c
 8017ea4:	4630      	mov	r0, r6
 8017ea6:	f7ff fb75 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017eaa:	2320      	movs	r3, #32
 8017eac:	fb90 f0f3 	sdiv	r0, r0, r3
 8017eb0:	4340      	muls	r0, r0
 8017eb2:	42a8      	cmp	r0, r5
 8017eb4:	dd85      	ble.n	8017dc2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 8017eb6:	2401      	movs	r4, #1
 8017eb8:	e036      	b.n	8017f28 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19e>
 8017eba:	2102      	movs	r1, #2
 8017ebc:	fb93 f3f1 	sdiv	r3, r3, r1
 8017ec0:	4413      	add	r3, r2
 8017ec2:	9306      	str	r3, [sp, #24]
 8017ec4:	fb93 f3f1 	sdiv	r3, r3, r1
 8017ec8:	9305      	str	r3, [sp, #20]
 8017eca:	e786      	b.n	8017dda <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 8017ecc:	f107 0320 	add.w	r3, r7, #32
 8017ed0:	fb93 f7f5 	sdiv	r7, r3, r5
 8017ed4:	fb05 3717 	mls	r7, r5, r7, r3
 8017ed8:	1bea      	subs	r2, r5, r7
 8017eda:	fb92 f7f5 	sdiv	r7, r2, r5
 8017ede:	fb05 2717 	mls	r7, r5, r7, r2
 8017ee2:	441f      	add	r7, r3
 8017ee4:	e78d      	b.n	8017e02 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8017ee6:	9907      	ldr	r1, [sp, #28]
 8017ee8:	428a      	cmp	r2, r1
 8017eea:	dd09      	ble.n	8017f00 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 8017eec:	9a05      	ldr	r2, [sp, #20]
 8017eee:	a90b      	add	r1, sp, #44	; 0x2c
 8017ef0:	4620      	mov	r0, r4
 8017ef2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017ef6:	aa04      	add	r2, sp, #16
 8017ef8:	930a      	str	r3, [sp, #40]	; 0x28
 8017efa:	4633      	mov	r3, r6
 8017efc:	f7ff fd96 	bl	8017a2c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017f00:	9a06      	ldr	r2, [sp, #24]
 8017f02:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8017f06:	1ac3      	subs	r3, r0, r3
 8017f08:	b992      	cbnz	r2, 8017f30 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a6>
 8017f0a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017f0e:	da04      	bge.n	8017f1a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8017f10:	a80b      	add	r0, sp, #44	; 0x2c
 8017f12:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8017f16:	f00d fd1b 	bl	8025950 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017f1a:	a80b      	add	r0, sp, #44	; 0x2c
 8017f1c:	f00d fe8d 	bl	8025c3a <_ZN8touchgfx6Canvas6renderEv>
 8017f20:	4604      	mov	r4, r0
 8017f22:	a80b      	add	r0, sp, #44	; 0x2c
 8017f24:	f00d fec6 	bl	8025cb4 <_ZN8touchgfx6CanvasD1Ev>
 8017f28:	4620      	mov	r0, r4
 8017f2a:	b03a      	add	sp, #232	; 0xe8
 8017f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f30:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8017f34:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8017f38:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8017f3c:	da2b      	bge.n	8017f96 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 8017f3e:	f7ff fb57 	bl	80175f0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8017f42:	4631      	mov	r1, r6
 8017f44:	900a      	str	r0, [sp, #40]	; 0x28
 8017f46:	a805      	add	r0, sp, #20
 8017f48:	f7ff fb24 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017f4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017f4e:	f10d 0818 	add.w	r8, sp, #24
 8017f52:	4418      	add	r0, r3
 8017f54:	9008      	str	r0, [sp, #32]
 8017f56:	9804      	ldr	r0, [sp, #16]
 8017f58:	f7ff fcf8 	bl	801794c <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8017f5c:	4631      	mov	r1, r6
 8017f5e:	900a      	str	r0, [sp, #40]	; 0x28
 8017f60:	a805      	add	r0, sp, #20
 8017f62:	f7ff fb17 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017f66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017f68:	1a18      	subs	r0, r3, r0
 8017f6a:	9b04      	ldr	r3, [sp, #16]
 8017f6c:	443b      	add	r3, r7
 8017f6e:	9009      	str	r0, [sp, #36]	; 0x24
 8017f70:	930a      	str	r3, [sp, #40]	; 0x28
 8017f72:	9b04      	ldr	r3, [sp, #16]
 8017f74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f76:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8017f7a:	4293      	cmp	r3, r2
 8017f7c:	dd0b      	ble.n	8017f96 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 8017f7e:	ab09      	add	r3, sp, #36	; 0x24
 8017f80:	aa08      	add	r2, sp, #32
 8017f82:	a90b      	add	r1, sp, #44	; 0x2c
 8017f84:	4620      	mov	r0, r4
 8017f86:	e9cd 6800 	strd	r6, r8, [sp]
 8017f8a:	f7ff fd26 	bl	80179da <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8017f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f90:	443b      	add	r3, r7
 8017f92:	930a      	str	r3, [sp, #40]	; 0x28
 8017f94:	e7ed      	b.n	8017f72 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e8>
 8017f96:	9a04      	ldr	r2, [sp, #16]
 8017f98:	9b07      	ldr	r3, [sp, #28]
 8017f9a:	429a      	cmp	r2, r3
 8017f9c:	dd0a      	ble.n	8017fb4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 8017f9e:	a90b      	add	r1, sp, #44	; 0x2c
 8017fa0:	4620      	mov	r0, r4
 8017fa2:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8017fa6:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017faa:	aa04      	add	r2, sp, #16
 8017fac:	930a      	str	r3, [sp, #40]	; 0x28
 8017fae:	4633      	mov	r3, r6
 8017fb0:	f7ff fd3c 	bl	8017a2c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017fb4:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8017fb8:	4642      	mov	r2, r8
 8017fba:	9b03      	ldr	r3, [sp, #12]
 8017fbc:	eba8 0805 	sub.w	r8, r8, r5
 8017fc0:	429a      	cmp	r2, r3
 8017fc2:	db0c      	blt.n	8017fde <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x254>
 8017fc4:	9207      	str	r2, [sp, #28]
 8017fc6:	a90b      	add	r1, sp, #44	; 0x2c
 8017fc8:	4620      	mov	r0, r4
 8017fca:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8017fce:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017fd2:	aa07      	add	r2, sp, #28
 8017fd4:	930a      	str	r3, [sp, #40]	; 0x28
 8017fd6:	4633      	mov	r3, r6
 8017fd8:	f7ff fd28 	bl	8017a2c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017fdc:	e7ec      	b.n	8017fb8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22e>
 8017fde:	9a07      	ldr	r2, [sp, #28]
 8017fe0:	4293      	cmp	r3, r2
 8017fe2:	da0a      	bge.n	8017ffa <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x270>
 8017fe4:	a90b      	add	r1, sp, #44	; 0x2c
 8017fe6:	4620      	mov	r0, r4
 8017fe8:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8017fec:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8017ff0:	aa03      	add	r2, sp, #12
 8017ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8017ff4:	4633      	mov	r3, r6
 8017ff6:	f7ff fd19 	bl	8017a2c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8017ffa:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 8017ffe:	1a1b      	subs	r3, r3, r0
 8018000:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018004:	da89      	bge.n	8017f1a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8018006:	f7ff faf3 	bl	80175f0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801800a:	4631      	mov	r1, r6
 801800c:	900a      	str	r0, [sp, #40]	; 0x28
 801800e:	a805      	add	r0, sp, #20
 8018010:	f7ff fac0 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018014:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018016:	ad06      	add	r5, sp, #24
 8018018:	4418      	add	r0, r3
 801801a:	9008      	str	r0, [sp, #32]
 801801c:	9803      	ldr	r0, [sp, #12]
 801801e:	f7ff fc95 	bl	801794c <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018022:	4631      	mov	r1, r6
 8018024:	900a      	str	r0, [sp, #40]	; 0x28
 8018026:	a805      	add	r0, sp, #20
 8018028:	f7ff fab4 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801802c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801802e:	1a18      	subs	r0, r3, r0
 8018030:	9b03      	ldr	r3, [sp, #12]
 8018032:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 8018036:	9009      	str	r0, [sp, #36]	; 0x24
 8018038:	443b      	add	r3, r7
 801803a:	930a      	str	r3, [sp, #40]	; 0x28
 801803c:	9a03      	ldr	r2, [sp, #12]
 801803e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018040:	429a      	cmp	r2, r3
 8018042:	f77f af6a 	ble.w	8017f1a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8018046:	ab09      	add	r3, sp, #36	; 0x24
 8018048:	aa08      	add	r2, sp, #32
 801804a:	a90b      	add	r1, sp, #44	; 0x2c
 801804c:	4620      	mov	r0, r4
 801804e:	e9cd 6500 	strd	r6, r5, [sp]
 8018052:	f7ff fcc2 	bl	80179da <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8018056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018058:	443b      	add	r3, r7
 801805a:	930a      	str	r3, [sp, #40]	; 0x28
 801805c:	e7ee      	b.n	801803c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b2>

0801805e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 801805e:	4413      	add	r3, r2
 8018060:	7a42      	ldrb	r2, [r0, #9]
 8018062:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018066:	4419      	add	r1, r3
 8018068:	7a03      	ldrb	r3, [r0, #8]
 801806a:	435a      	muls	r2, r3
 801806c:	1c53      	adds	r3, r2, #1
 801806e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8018072:	121b      	asrs	r3, r3, #8
 8018074:	2bff      	cmp	r3, #255	; 0xff
 8018076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018078:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 801807c:	d13e      	bne.n	80180fc <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 801807e:	4427      	add	r7, r4
 8018080:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018084:	3103      	adds	r1, #3
 8018086:	7d86      	ldrb	r6, [r0, #22]
 8018088:	2bff      	cmp	r3, #255	; 0xff
 801808a:	d10a      	bne.n	80180a2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 801808c:	f801 6c03 	strb.w	r6, [r1, #-3]
 8018090:	7d43      	ldrb	r3, [r0, #21]
 8018092:	f801 3c02 	strb.w	r3, [r1, #-2]
 8018096:	7d03      	ldrb	r3, [r0, #20]
 8018098:	f801 3c01 	strb.w	r3, [r1, #-1]
 801809c:	42a7      	cmp	r7, r4
 801809e:	d1ef      	bne.n	8018080 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 80180a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180a2:	b29a      	uxth	r2, r3
 80180a4:	43db      	mvns	r3, r3
 80180a6:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 80180aa:	fb16 f602 	smulbb	r6, r6, r2
 80180ae:	b2db      	uxtb	r3, r3
 80180b0:	fb05 6503 	mla	r5, r5, r3, r6
 80180b4:	b2ad      	uxth	r5, r5
 80180b6:	1c6e      	adds	r6, r5, #1
 80180b8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80180bc:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 80180c0:	fb16 f603 	smulbb	r6, r6, r3
 80180c4:	122d      	asrs	r5, r5, #8
 80180c6:	f801 5c03 	strb.w	r5, [r1, #-3]
 80180ca:	7d45      	ldrb	r5, [r0, #21]
 80180cc:	fb05 6502 	mla	r5, r5, r2, r6
 80180d0:	b2ad      	uxth	r5, r5
 80180d2:	1c6e      	adds	r6, r5, #1
 80180d4:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80180d8:	122d      	asrs	r5, r5, #8
 80180da:	f801 5c02 	strb.w	r5, [r1, #-2]
 80180de:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80180e2:	7d06      	ldrb	r6, [r0, #20]
 80180e4:	fb15 f303 	smulbb	r3, r5, r3
 80180e8:	fb06 3202 	mla	r2, r6, r2, r3
 80180ec:	b292      	uxth	r2, r2
 80180ee:	1c53      	adds	r3, r2, #1
 80180f0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80180f4:	1212      	asrs	r2, r2, #8
 80180f6:	f801 2c01 	strb.w	r2, [r1, #-1]
 80180fa:	e7cf      	b.n	801809c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 80180fc:	b2de      	uxtb	r6, r3
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d0ce      	beq.n	80180a0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8018102:	3103      	adds	r1, #3
 8018104:	4427      	add	r7, r4
 8018106:	f814 2b01 	ldrb.w	r2, [r4], #1
 801810a:	3103      	adds	r1, #3
 801810c:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8018110:	fb02 f306 	mul.w	r3, r2, r6
 8018114:	42bc      	cmp	r4, r7
 8018116:	f103 0201 	add.w	r2, r3, #1
 801811a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801811e:	ea4f 2222 	mov.w	r2, r2, asr #8
 8018122:	b295      	uxth	r5, r2
 8018124:	ea6f 0202 	mvn.w	r2, r2
 8018128:	b2d3      	uxtb	r3, r2
 801812a:	7d82      	ldrb	r2, [r0, #22]
 801812c:	fb1c fc03 	smulbb	ip, ip, r3
 8018130:	fb02 c205 	mla	r2, r2, r5, ip
 8018134:	b292      	uxth	r2, r2
 8018136:	f102 0c01 	add.w	ip, r2, #1
 801813a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801813e:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8018142:	fb1c fc03 	smulbb	ip, ip, r3
 8018146:	ea4f 2222 	mov.w	r2, r2, asr #8
 801814a:	f801 2c06 	strb.w	r2, [r1, #-6]
 801814e:	7d42      	ldrb	r2, [r0, #21]
 8018150:	fb02 c205 	mla	r2, r2, r5, ip
 8018154:	b292      	uxth	r2, r2
 8018156:	f102 0c01 	add.w	ip, r2, #1
 801815a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801815e:	ea4f 2222 	mov.w	r2, r2, asr #8
 8018162:	f801 2c05 	strb.w	r2, [r1, #-5]
 8018166:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 801816a:	f890 c014 	ldrb.w	ip, [r0, #20]
 801816e:	fb12 f303 	smulbb	r3, r2, r3
 8018172:	fb0c 3305 	mla	r3, ip, r5, r3
 8018176:	b29b      	uxth	r3, r3
 8018178:	f103 0201 	add.w	r2, r3, #1
 801817c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018180:	ea4f 2323 	mov.w	r3, r3, asr #8
 8018184:	f801 3c04 	strb.w	r3, [r1, #-4]
 8018188:	d1bd      	bne.n	8018106 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 801818a:	e789      	b.n	80180a0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

0801818c <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 801818c:	b510      	push	{r4, lr}
 801818e:	7d04      	ldrb	r4, [r0, #20]
 8018190:	700c      	strb	r4, [r1, #0]
 8018192:	7d41      	ldrb	r1, [r0, #21]
 8018194:	7011      	strb	r1, [r2, #0]
 8018196:	7d82      	ldrb	r2, [r0, #22]
 8018198:	701a      	strb	r2, [r3, #0]
 801819a:	9b02      	ldr	r3, [sp, #8]
 801819c:	7a42      	ldrb	r2, [r0, #9]
 801819e:	2001      	movs	r0, #1
 80181a0:	701a      	strb	r2, [r3, #0]
 80181a2:	bd10      	pop	{r4, pc}

080181a4 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 80181a4:	6281      	str	r1, [r0, #40]	; 0x28
 80181a6:	4770      	bx	lr

080181a8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80181a8:	b513      	push	{r0, r1, r4, lr}
 80181aa:	6803      	ldr	r3, [r0, #0]
 80181ac:	4604      	mov	r4, r0
 80181ae:	4601      	mov	r1, r0
 80181b0:	4668      	mov	r0, sp
 80181b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80181b4:	4798      	blx	r3
 80181b6:	6823      	ldr	r3, [r4, #0]
 80181b8:	4669      	mov	r1, sp
 80181ba:	4620      	mov	r0, r4
 80181bc:	691b      	ldr	r3, [r3, #16]
 80181be:	4798      	blx	r3
 80181c0:	b002      	add	sp, #8
 80181c2:	bd10      	pop	{r4, pc}

080181c4 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 80181c4:	b510      	push	{r4, lr}
 80181c6:	2200      	movs	r2, #0
 80181c8:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80181cc:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80181d0:	8002      	strh	r2, [r0, #0]
 80181d2:	8042      	strh	r2, [r0, #2]
 80181d4:	8084      	strh	r4, [r0, #4]
 80181d6:	80c1      	strh	r1, [r0, #6]
 80181d8:	bd10      	pop	{r4, pc}

080181da <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80181da:	2200      	movs	r2, #0
 80181dc:	8002      	strh	r2, [r0, #0]
 80181de:	8042      	strh	r2, [r0, #2]
 80181e0:	8082      	strh	r2, [r0, #4]
 80181e2:	80c2      	strh	r2, [r0, #6]
 80181e4:	4770      	bx	lr
	...

080181e8 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 80181e8:	b508      	push	{r3, lr}
 80181ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80181ec:	b928      	cbnz	r0, 80181fa <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 80181ee:	4b03      	ldr	r3, [pc, #12]	; (80181fc <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 80181f0:	2123      	movs	r1, #35	; 0x23
 80181f2:	4a03      	ldr	r2, [pc, #12]	; (8018200 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 80181f4:	4803      	ldr	r0, [pc, #12]	; (8018204 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 80181f6:	f00e fe29 	bl	8026e4c <__assert_func>
 80181fa:	bd08      	pop	{r3, pc}
 80181fc:	0802aa88 	.word	0x0802aa88
 8018200:	0802ab6c 	.word	0x0802ab6c
 8018204:	0802aaaf 	.word	0x0802aaaf

08018208 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8018208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801820c:	b089      	sub	sp, #36	; 0x24
 801820e:	4604      	mov	r4, r0
 8018210:	6808      	ldr	r0, [r1, #0]
 8018212:	f04f 0a00 	mov.w	sl, #0
 8018216:	6849      	ldr	r1, [r1, #4]
 8018218:	ab02      	add	r3, sp, #8
 801821a:	f04f 0b01 	mov.w	fp, #1
 801821e:	c303      	stmia	r3!, {r0, r1}
 8018220:	4b3f      	ldr	r3, [pc, #252]	; (8018320 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 8018222:	4621      	mov	r1, r4
 8018224:	a804      	add	r0, sp, #16
 8018226:	781b      	ldrb	r3, [r3, #0]
 8018228:	2b01      	cmp	r3, #1
 801822a:	6823      	ldr	r3, [r4, #0]
 801822c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801822e:	bf1f      	itttt	ne
 8018230:	f10d 0906 	addne.w	r9, sp, #6
 8018234:	ae03      	addne	r6, sp, #12
 8018236:	f10d 050e 	addne.w	r5, sp, #14
 801823a:	f10d 080a 	addne.w	r8, sp, #10
 801823e:	bf01      	itttt	eq
 8018240:	f10d 090e 	addeq.w	r9, sp, #14
 8018244:	f10d 0606 	addeq.w	r6, sp, #6
 8018248:	ad03      	addeq	r5, sp, #12
 801824a:	f10d 0808 	addeq.w	r8, sp, #8
 801824e:	4798      	blx	r3
 8018250:	f9b5 3000 	ldrsh.w	r3, [r5]
 8018254:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8018258:	2b00      	cmp	r3, #0
 801825a:	d056      	beq.n	801830a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 801825c:	4293      	cmp	r3, r2
 801825e:	bfa8      	it	ge
 8018260:	4613      	movge	r3, r2
 8018262:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018266:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801826a:	2f00      	cmp	r7, #0
 801826c:	dd34      	ble.n	80182d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 801826e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8018272:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8018276:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801827a:	4484      	add	ip, r0
 801827c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8018280:	f9b6 e000 	ldrsh.w	lr, [r6]
 8018284:	fa0f fc8c 	sxth.w	ip, ip
 8018288:	f9b9 1000 	ldrsh.w	r1, [r9]
 801828c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018290:	4562      	cmp	r2, ip
 8018292:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018296:	f8ad e01c 	strh.w	lr, [sp, #28]
 801829a:	f8ad 101e 	strh.w	r1, [sp, #30]
 801829e:	da29      	bge.n	80182f4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80182a0:	4472      	add	r2, lr
 80182a2:	b212      	sxth	r2, r2
 80182a4:	4290      	cmp	r0, r2
 80182a6:	da25      	bge.n	80182f4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80182a8:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80182ac:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80182b0:	4402      	add	r2, r0
 80182b2:	b212      	sxth	r2, r2
 80182b4:	4293      	cmp	r3, r2
 80182b6:	da1d      	bge.n	80182f4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80182b8:	440b      	add	r3, r1
 80182ba:	b21b      	sxth	r3, r3
 80182bc:	4298      	cmp	r0, r3
 80182be:	da19      	bge.n	80182f4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80182c0:	6823      	ldr	r3, [r4, #0]
 80182c2:	a906      	add	r1, sp, #24
 80182c4:	4620      	mov	r0, r4
 80182c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80182c8:	4798      	blx	r3
 80182ca:	b998      	cbnz	r0, 80182f4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80182cc:	107f      	asrs	r7, r7, #1
 80182ce:	f04f 0a01 	mov.w	sl, #1
 80182d2:	f8ad 7006 	strh.w	r7, [sp, #6]
 80182d6:	e7c6      	b.n	8018266 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80182d8:	d10c      	bne.n	80182f4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80182da:	f8ad b006 	strh.w	fp, [sp, #6]
 80182de:	f8b8 2000 	ldrh.w	r2, [r8]
 80182e2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80182e6:	440a      	add	r2, r1
 80182e8:	f8a8 2000 	strh.w	r2, [r8]
 80182ec:	882b      	ldrh	r3, [r5, #0]
 80182ee:	1a5b      	subs	r3, r3, r1
 80182f0:	802b      	strh	r3, [r5, #0]
 80182f2:	e7ad      	b.n	8018250 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80182f4:	f1ba 0f00 	cmp.w	sl, #0
 80182f8:	d0f1      	beq.n	80182de <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 80182fa:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80182fe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018302:	429a      	cmp	r2, r3
 8018304:	bf08      	it	eq
 8018306:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8018308:	e7e9      	b.n	80182de <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801830a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801830e:	429a      	cmp	r2, r3
 8018310:	bf04      	itt	eq
 8018312:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8018316:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8018318:	b009      	add	sp, #36	; 0x24
 801831a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801831e:	bf00      	nop
 8018320:	2000b3cc 	.word	0x2000b3cc

08018324 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8018324:	2200      	movs	r2, #0
 8018326:	2101      	movs	r1, #1
 8018328:	8082      	strh	r2, [r0, #4]
 801832a:	80c2      	strh	r2, [r0, #6]
 801832c:	8102      	strh	r2, [r0, #8]
 801832e:	8142      	strh	r2, [r0, #10]
 8018330:	8182      	strh	r2, [r0, #12]
 8018332:	81c2      	strh	r2, [r0, #14]
 8018334:	8202      	strh	r2, [r0, #16]
 8018336:	8242      	strh	r2, [r0, #18]
 8018338:	61c2      	str	r2, [r0, #28]
 801833a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801833e:	6282      	str	r2, [r0, #40]	; 0x28
 8018340:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8018344:	4905      	ldr	r1, [pc, #20]	; (801835c <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8018346:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801834a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801834e:	6001      	str	r1, [r0, #0]
 8018350:	8582      	strh	r2, [r0, #44]	; 0x2c
 8018352:	22ff      	movs	r2, #255	; 0xff
 8018354:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8018358:	4770      	bx	lr
 801835a:	bf00      	nop
 801835c:	0802aaf4 	.word	0x0802aaf4

08018360 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8018360:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8018364:	4602      	mov	r2, r0
 8018366:	cb03      	ldmia	r3!, {r0, r1}
 8018368:	6010      	str	r0, [r2, #0]
 801836a:	4610      	mov	r0, r2
 801836c:	6051      	str	r1, [r2, #4]
 801836e:	4770      	bx	lr

08018370 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8018370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018374:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8018378:	2d00      	cmp	r5, #0
 801837a:	dd34      	ble.n	80183e6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x76>
 801837c:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 8018380:	f1bc 0f00 	cmp.w	ip, #0
 8018384:	dd2f      	ble.n	80183e6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x76>
 8018386:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801838a:	f9b1 e000 	ldrsh.w	lr, [r1]
 801838e:	2c00      	cmp	r4, #0
 8018390:	dd2b      	ble.n	80183ea <_ZN8touchgfx4Rect11expandToFitERKS0_+0x7a>
 8018392:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8018396:	2f00      	cmp	r7, #0
 8018398:	dd27      	ble.n	80183ea <_ZN8touchgfx4Rect11expandToFitERKS0_+0x7a>
 801839a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801839e:	4475      	add	r5, lr
 80183a0:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80183a4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80183a8:	45f0      	cmp	r8, lr
 80183aa:	4646      	mov	r6, r8
 80183ac:	4444      	add	r4, r8
 80183ae:	bfa8      	it	ge
 80183b0:	4676      	movge	r6, lr
 80183b2:	4293      	cmp	r3, r2
 80183b4:	4619      	mov	r1, r3
 80183b6:	443b      	add	r3, r7
 80183b8:	bfa8      	it	ge
 80183ba:	4611      	movge	r1, r2
 80183bc:	4462      	add	r2, ip
 80183be:	b22d      	sxth	r5, r5
 80183c0:	8006      	strh	r6, [r0, #0]
 80183c2:	b224      	sxth	r4, r4
 80183c4:	8041      	strh	r1, [r0, #2]
 80183c6:	b212      	sxth	r2, r2
 80183c8:	b21b      	sxth	r3, r3
 80183ca:	42a5      	cmp	r5, r4
 80183cc:	bfac      	ite	ge
 80183ce:	ebc6 0405 	rsbge	r4, r6, r5
 80183d2:	ebc6 0404 	rsblt	r4, r6, r4
 80183d6:	429a      	cmp	r2, r3
 80183d8:	bfac      	ite	ge
 80183da:	ebc1 0302 	rsbge	r3, r1, r2
 80183de:	ebc1 0303 	rsblt	r3, r1, r3
 80183e2:	8084      	strh	r4, [r0, #4]
 80183e4:	80c3      	strh	r3, [r0, #6]
 80183e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183ea:	f8a0 e000 	strh.w	lr, [r0]
 80183ee:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80183f2:	8043      	strh	r3, [r0, #2]
 80183f4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80183f8:	8083      	strh	r3, [r0, #4]
 80183fa:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80183fe:	e7f1      	b.n	80183e4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>

08018400 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8018400:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8018404:	f04f 0300 	mov.w	r3, #0
 8018408:	bf2c      	ite	cs
 801840a:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801840e:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8018412:	1899      	adds	r1, r3, r2
 8018414:	4288      	cmp	r0, r1
 8018416:	bf24      	itt	cs
 8018418:	1853      	addcs	r3, r2, r1
 801841a:	1a40      	subcs	r0, r0, r1
 801841c:	0892      	lsrs	r2, r2, #2
 801841e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8018422:	d1f6      	bne.n	8018412 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8018424:	4618      	mov	r0, r3
 8018426:	4770      	bx	lr

08018428 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8018428:	2800      	cmp	r0, #0
 801842a:	b508      	push	{r3, lr}
 801842c:	da05      	bge.n	801843a <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801842e:	4240      	negs	r0, r0
 8018430:	f7ff fffa 	bl	8018428 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8018434:	4240      	negs	r0, r0
 8018436:	b240      	sxtb	r0, r0
 8018438:	bd08      	pop	{r3, pc}
 801843a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801843e:	dc11      	bgt.n	8018464 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8018440:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8018444:	dd09      	ble.n	801845a <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8018446:	4340      	muls	r0, r0
 8018448:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 801844c:	f7ff ffd8 	bl	8018400 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8018450:	f7ff ffea 	bl	8018428 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8018454:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8018458:	e7ed      	b.n	8018436 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 801845a:	3003      	adds	r0, #3
 801845c:	4b02      	ldr	r3, [pc, #8]	; (8018468 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801845e:	10c0      	asrs	r0, r0, #3
 8018460:	5618      	ldrsb	r0, [r3, r0]
 8018462:	e7e9      	b.n	8018438 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8018464:	2000      	movs	r0, #0
 8018466:	e7e7      	b.n	8018438 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8018468:	0802abba 	.word	0x0802abba

0801846c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 801846c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801846e:	460c      	mov	r4, r1
 8018470:	1e01      	subs	r1, r0, #0
 8018472:	4615      	mov	r5, r2
 8018474:	db01      	blt.n	801847a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8018476:	2c00      	cmp	r4, #0
 8018478:	da06      	bge.n	8018488 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 801847a:	4b11      	ldr	r3, [pc, #68]	; (80184c0 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 801847c:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 8018480:	4a10      	ldr	r2, [pc, #64]	; (80184c4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8018482:	4811      	ldr	r0, [pc, #68]	; (80184c8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8018484:	f00e fce2 	bl	8026e4c <__assert_func>
 8018488:	428c      	cmp	r4, r1
 801848a:	dd06      	ble.n	801849a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 801848c:	4620      	mov	r0, r4
 801848e:	f7ff ffed 	bl	801846c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018492:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8018496:	b003      	add	sp, #12
 8018498:	bd30      	pop	{r4, r5, pc}
 801849a:	4349      	muls	r1, r1
 801849c:	fb04 1004 	mla	r0, r4, r4, r1
 80184a0:	f7ff ffae 	bl	8018400 <_ZN8touchgfx7CWRUtil5isqrtEm>
 80184a4:	6028      	str	r0, [r5, #0]
 80184a6:	2800      	cmp	r0, #0
 80184a8:	d0f5      	beq.n	8018496 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 80184aa:	4602      	mov	r2, r0
 80184ac:	ab01      	add	r3, sp, #4
 80184ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80184b2:	4620      	mov	r0, r4
 80184b4:	f003 fa3c 	bl	801b930 <_ZN8touchgfx6muldivElllRl>
 80184b8:	f7ff ffb6 	bl	8018428 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80184bc:	e7eb      	b.n	8018496 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 80184be:	bf00      	nop
 80184c0:	0802ac15 	.word	0x0802ac15
 80184c4:	0802acdc 	.word	0x0802acdc
 80184c8:	0802ac26 	.word	0x0802ac26

080184cc <_ZN8touchgfx4LineC1Ev>:
 80184cc:	b510      	push	{r4, lr}
 80184ce:	4604      	mov	r4, r0
 80184d0:	f7ff ff28 	bl	8018324 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80184d4:	4b0c      	ldr	r3, [pc, #48]	; (8018508 <_ZN8touchgfx4LineC1Ev+0x3c>)
 80184d6:	2220      	movs	r2, #32
 80184d8:	4620      	mov	r0, r4
 80184da:	6023      	str	r3, [r4, #0]
 80184dc:	2300      	movs	r3, #0
 80184de:	6422      	str	r2, [r4, #64]	; 0x40
 80184e0:	2212      	movs	r2, #18
 80184e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80184e6:	6722      	str	r2, [r4, #112]	; 0x70
 80184e8:	60a3      	str	r3, [r4, #8]
 80184ea:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 80184ee:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 80184f2:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80184f6:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 80184fa:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 80184fe:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8018502:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8018506:	bd10      	pop	{r4, pc}
 8018508:	0802ac64 	.word	0x0802ac64

0801850c <_ZNK8touchgfx4Line18getLineEndingStyleEv>:
 801850c:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 8018510:	4770      	bx	lr
	...

08018514 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8018514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018518:	6b86      	ldr	r6, [r0, #56]	; 0x38
 801851a:	b085      	sub	sp, #20
 801851c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801851e:	4604      	mov	r4, r0
 8018520:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8018522:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8018524:	1af6      	subs	r6, r6, r3
 8018526:	eba5 0502 	sub.w	r5, r5, r2
 801852a:	f040 809b 	bne.w	8018664 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 801852e:	b955      	cbnz	r5, 8018546 <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 8018530:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8018534:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8018538:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801853c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8018540:	b005      	add	sp, #20
 8018542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018546:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 801854a:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 801854e:	f04f 0802 	mov.w	r8, #2
 8018552:	463a      	mov	r2, r7
 8018554:	4629      	mov	r1, r5
 8018556:	ab03      	add	r3, sp, #12
 8018558:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801855a:	f003 f9e9 	bl	801b930 <_ZN8touchgfx6muldivElllRl>
 801855e:	ab03      	add	r3, sp, #12
 8018560:	463a      	mov	r2, r7
 8018562:	4631      	mov	r1, r6
 8018564:	fb90 f5f8 	sdiv	r5, r0, r8
 8018568:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801856a:	f003 f9e1 	bl	801b930 <_ZN8touchgfx6muldivElllRl>
 801856e:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 8018572:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8018576:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 801857a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 801857c:	fb90 f0f8 	sdiv	r0, r0, r8
 8018580:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8018584:	eba8 0305 	sub.w	r3, r8, r5
 8018588:	f1ba 0f00 	cmp.w	sl, #0
 801858c:	f040 80c3 	bne.w	8018716 <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 8018590:	64a3      	str	r3, [r4, #72]	; 0x48
 8018592:	19c3      	adds	r3, r0, r7
 8018594:	65a3      	str	r3, [r4, #88]	; 0x58
 8018596:	ebae 0305 	sub.w	r3, lr, r5
 801859a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801859c:	eb00 030c 	add.w	r3, r0, ip
 80185a0:	65e3      	str	r3, [r4, #92]	; 0x5c
 80185a2:	eb05 030e 	add.w	r3, r5, lr
 80185a6:	6523      	str	r3, [r4, #80]	; 0x50
 80185a8:	ebac 0300 	sub.w	r3, ip, r0
 80185ac:	6623      	str	r3, [r4, #96]	; 0x60
 80185ae:	eb05 0308 	add.w	r3, r5, r8
 80185b2:	6563      	str	r3, [r4, #84]	; 0x54
 80185b4:	1a3b      	subs	r3, r7, r0
 80185b6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80185b8:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 80185bc:	6663      	str	r3, [r4, #100]	; 0x64
 80185be:	f104 0358 	add.w	r3, r4, #88	; 0x58
 80185c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80185c4:	4632      	mov	r2, r6
 80185c6:	9301      	str	r3, [sp, #4]
 80185c8:	9100      	str	r1, [sp, #0]
 80185ca:	f859 bb04 	ldr.w	fp, [r9], #4
 80185ce:	9b00      	ldr	r3, [sp, #0]
 80185d0:	455e      	cmp	r6, fp
 80185d2:	bfa8      	it	ge
 80185d4:	465e      	movge	r6, fp
 80185d6:	455a      	cmp	r2, fp
 80185d8:	bfb8      	it	lt
 80185da:	465a      	movlt	r2, fp
 80185dc:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 80185e0:	4559      	cmp	r1, fp
 80185e2:	bfa8      	it	ge
 80185e4:	4659      	movge	r1, fp
 80185e6:	455b      	cmp	r3, fp
 80185e8:	bfb8      	it	lt
 80185ea:	465b      	movlt	r3, fp
 80185ec:	9300      	str	r3, [sp, #0]
 80185ee:	9b01      	ldr	r3, [sp, #4]
 80185f0:	454b      	cmp	r3, r9
 80185f2:	d1ea      	bne.n	80185ca <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 80185f4:	f04f 0b20 	mov.w	fp, #32
 80185f8:	b209      	sxth	r1, r1
 80185fa:	b212      	sxth	r2, r2
 80185fc:	f1ba 0f01 	cmp.w	sl, #1
 8018600:	b236      	sxth	r6, r6
 8018602:	fb91 f9fb 	sdiv	r9, r1, fp
 8018606:	f9bd 1000 	ldrsh.w	r1, [sp]
 801860a:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 801860e:	fb92 f2fb 	sdiv	r2, r2, fp
 8018612:	fb91 f1fb 	sdiv	r1, r1, fp
 8018616:	fb96 f6fb 	sdiv	r6, r6, fp
 801861a:	f102 0201 	add.w	r2, r2, #1
 801861e:	f101 0101 	add.w	r1, r1, #1
 8018622:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 8018626:	eba1 0109 	sub.w	r1, r1, r9
 801862a:	eba2 0606 	sub.w	r6, r2, r6
 801862e:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 8018632:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 8018636:	d183      	bne.n	8018540 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8018638:	eba8 0305 	sub.w	r3, r8, r5
 801863c:	64a3      	str	r3, [r4, #72]	; 0x48
 801863e:	19c3      	adds	r3, r0, r7
 8018640:	65a3      	str	r3, [r4, #88]	; 0x58
 8018642:	ebae 0305 	sub.w	r3, lr, r5
 8018646:	64e3      	str	r3, [r4, #76]	; 0x4c
 8018648:	eb00 030c 	add.w	r3, r0, ip
 801864c:	65e3      	str	r3, [r4, #92]	; 0x5c
 801864e:	eb05 030e 	add.w	r3, r5, lr
 8018652:	4445      	add	r5, r8
 8018654:	6523      	str	r3, [r4, #80]	; 0x50
 8018656:	ebac 0300 	sub.w	r3, ip, r0
 801865a:	1a38      	subs	r0, r7, r0
 801865c:	6565      	str	r5, [r4, #84]	; 0x54
 801865e:	6623      	str	r3, [r4, #96]	; 0x60
 8018660:	6660      	str	r0, [r4, #100]	; 0x64
 8018662:	e76d      	b.n	8018540 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8018664:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8018668:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 801866c:	2d00      	cmp	r5, #0
 801866e:	f43f af6e 	beq.w	801854e <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8018672:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8018676:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801867a:	fb93 f2f7 	sdiv	r2, r3, r7
 801867e:	fb07 3312 	mls	r3, r7, r2, r3
 8018682:	b34b      	cbz	r3, 80186d8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 8018684:	fb97 f2f3 	sdiv	r2, r7, r3
 8018688:	fb03 7712 	mls	r7, r3, r2, r7
 801868c:	2f00      	cmp	r7, #0
 801868e:	d1f4      	bne.n	801867a <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8018690:	2b01      	cmp	r3, #1
 8018692:	f24b 5204 	movw	r2, #46340	; 0xb504
 8018696:	bf18      	it	ne
 8018698:	fb96 f6f3 	sdivne	r6, r6, r3
 801869c:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 80186a0:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 80186a4:	bf18      	it	ne
 80186a6:	fb95 f5f3 	sdivne	r5, r5, r3
 80186aa:	4291      	cmp	r1, r2
 80186ac:	dd16      	ble.n	80186dc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 80186ae:	2d00      	cmp	r5, #0
 80186b0:	da4d      	bge.n	801874e <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 80186b2:	4b29      	ldr	r3, [pc, #164]	; (8018758 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 80186b4:	429d      	cmp	r5, r3
 80186b6:	da27      	bge.n	8018708 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 80186b8:	426a      	negs	r2, r5
 80186ba:	f24b 5304 	movw	r3, #46340	; 0xb504
 80186be:	fb91 f1f3 	sdiv	r1, r1, r3
 80186c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80186c6:	4299      	cmp	r1, r3
 80186c8:	bfcc      	ite	gt
 80186ca:	1c4b      	addgt	r3, r1, #1
 80186cc:	3301      	addle	r3, #1
 80186ce:	fb96 f6f3 	sdiv	r6, r6, r3
 80186d2:	fb95 f5f3 	sdiv	r5, r5, r3
 80186d6:	e00f      	b.n	80186f8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 80186d8:	463b      	mov	r3, r7
 80186da:	e7d9      	b.n	8018690 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 80186dc:	2d00      	cmp	r5, #0
 80186de:	fb92 f2f1 	sdiv	r2, r2, r1
 80186e2:	da13      	bge.n	801870c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 80186e4:	4269      	negs	r1, r5
 80186e6:	f24b 5304 	movw	r3, #46340	; 0xb504
 80186ea:	fb93 f3f1 	sdiv	r3, r3, r1
 80186ee:	429a      	cmp	r2, r3
 80186f0:	bfa8      	it	ge
 80186f2:	461a      	movge	r2, r3
 80186f4:	4356      	muls	r6, r2
 80186f6:	4355      	muls	r5, r2
 80186f8:	fb05 f005 	mul.w	r0, r5, r5
 80186fc:	fb06 0006 	mla	r0, r6, r6, r0
 8018700:	f7ff fe7e 	bl	8018400 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8018704:	4607      	mov	r7, r0
 8018706:	e722      	b.n	801854e <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 8018708:	2200      	movs	r2, #0
 801870a:	e7eb      	b.n	80186e4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 801870c:	4629      	mov	r1, r5
 801870e:	e7ea      	b.n	80186e6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8018710:	4629      	mov	r1, r5
 8018712:	2200      	movs	r2, #0
 8018714:	e7e7      	b.n	80186e6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 8018716:	1a1b      	subs	r3, r3, r0
 8018718:	64a3      	str	r3, [r4, #72]	; 0x48
 801871a:	19c3      	adds	r3, r0, r7
 801871c:	1b5b      	subs	r3, r3, r5
 801871e:	65a3      	str	r3, [r4, #88]	; 0x58
 8018720:	ebae 0305 	sub.w	r3, lr, r5
 8018724:	4403      	add	r3, r0
 8018726:	64e3      	str	r3, [r4, #76]	; 0x4c
 8018728:	eb00 030c 	add.w	r3, r0, ip
 801872c:	442b      	add	r3, r5
 801872e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018730:	eb05 030e 	add.w	r3, r5, lr
 8018734:	4403      	add	r3, r0
 8018736:	6523      	str	r3, [r4, #80]	; 0x50
 8018738:	ebac 0300 	sub.w	r3, ip, r0
 801873c:	442b      	add	r3, r5
 801873e:	6623      	str	r3, [r4, #96]	; 0x60
 8018740:	eb05 0308 	add.w	r3, r5, r8
 8018744:	1a1b      	subs	r3, r3, r0
 8018746:	6563      	str	r3, [r4, #84]	; 0x54
 8018748:	1a3b      	subs	r3, r7, r0
 801874a:	1b5b      	subs	r3, r3, r5
 801874c:	e733      	b.n	80185b6 <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 801874e:	4295      	cmp	r5, r2
 8018750:	ddde      	ble.n	8018710 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 8018752:	462a      	mov	r2, r5
 8018754:	e7b1      	b.n	80186ba <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 8018756:	bf00      	nop
 8018758:	ffff4afc 	.word	0xffff4afc

0801875c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 801875c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801875e:	428b      	cmp	r3, r1
 8018760:	d102      	bne.n	8018768 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8018762:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8018764:	4293      	cmp	r3, r2
 8018766:	d003      	beq.n	8018770 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8018768:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 801876c:	f7ff bed2 	b.w	8018514 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8018770:	4770      	bx	lr

08018772 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_>:
 8018772:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018774:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018776:	4604      	mov	r4, r0
 8018778:	460e      	mov	r6, r1
 801877a:	4615      	mov	r5, r2
 801877c:	428b      	cmp	r3, r1
 801877e:	d102      	bne.n	8018786 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_+0x14>
 8018780:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8018782:	4293      	cmp	r3, r2
 8018784:	d017      	beq.n	80187b6 <_ZN8touchgfx4Line9updateEndENS_7CWRUtil2Q5ES2_+0x44>
 8018786:	6823      	ldr	r3, [r4, #0]
 8018788:	4621      	mov	r1, r4
 801878a:	4668      	mov	r0, sp
 801878c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801878e:	4798      	blx	r3
 8018790:	4620      	mov	r0, r4
 8018792:	e9c4 650e 	strd	r6, r5, [r4, #56]	; 0x38
 8018796:	f7ff febd 	bl	8018514 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801879a:	6823      	ldr	r3, [r4, #0]
 801879c:	4621      	mov	r1, r4
 801879e:	a802      	add	r0, sp, #8
 80187a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80187a2:	4798      	blx	r3
 80187a4:	a902      	add	r1, sp, #8
 80187a6:	4668      	mov	r0, sp
 80187a8:	f7ff fde2 	bl	8018370 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80187ac:	6823      	ldr	r3, [r4, #0]
 80187ae:	4669      	mov	r1, sp
 80187b0:	4620      	mov	r0, r4
 80187b2:	691b      	ldr	r3, [r3, #16]
 80187b4:	4798      	blx	r3
 80187b6:	b004      	add	sp, #16
 80187b8:	bd70      	pop	{r4, r5, r6, pc}

080187ba <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 80187ba:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 80187be:	f7ff bea9 	b.w	8018514 <_ZN8touchgfx4Line17updateCachedShapeEv>

080187c2 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 80187c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80187c6:	b0b3      	sub	sp, #204	; 0xcc
 80187c8:	4604      	mov	r4, r0
 80187ca:	460a      	mov	r2, r1
 80187cc:	4601      	mov	r1, r0
 80187ce:	a803      	add	r0, sp, #12
 80187d0:	ad32      	add	r5, sp, #200	; 0xc8
 80187d2:	f00c ff65 	bl	80256a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80187d6:	2300      	movs	r3, #0
 80187d8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80187da:	f845 3dc8 	str.w	r3, [r5, #-200]!
 80187de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80187e0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80187e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80187e4:	1ac0      	subs	r0, r0, r3
 80187e6:	eba1 0102 	sub.w	r1, r1, r2
 80187ea:	d43c      	bmi.n	8018866 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 80187ec:	2900      	cmp	r1, #0
 80187ee:	462a      	mov	r2, r5
 80187f0:	db33      	blt.n	801885a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 80187f2:	f7ff fe3b 	bl	801846c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80187f6:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 80187fa:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80187fc:	a803      	add	r0, sp, #12
 80187fe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018800:	f00d f917 	bl	8025a32 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8018804:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8018806:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8018808:	a803      	add	r0, sp, #12
 801880a:	f00d f8a1 	bl	8025950 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801880e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018812:	2b01      	cmp	r3, #1
 8018814:	d137      	bne.n	8018886 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8018816:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8018818:	2eb3      	cmp	r6, #179	; 0xb3
 801881a:	dc34      	bgt.n	8018886 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801881c:	eba7 0906 	sub.w	r9, r7, r6
 8018820:	4648      	mov	r0, r9
 8018822:	f7fe fec3 	bl	80175ac <_ZN8touchgfx7CWRUtil4sineEi>
 8018826:	a901      	add	r1, sp, #4
 8018828:	9001      	str	r0, [sp, #4]
 801882a:	4628      	mov	r0, r5
 801882c:	f7fe feb2 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018830:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018832:	eb00 0801 	add.w	r8, r0, r1
 8018836:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801883a:	f7fe feb7 	bl	80175ac <_ZN8touchgfx7CWRUtil4sineEi>
 801883e:	a902      	add	r1, sp, #8
 8018840:	9002      	str	r0, [sp, #8]
 8018842:	4628      	mov	r0, r5
 8018844:	f7fe fea6 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018848:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801884a:	4641      	mov	r1, r8
 801884c:	1a12      	subs	r2, r2, r0
 801884e:	a803      	add	r0, sp, #12
 8018850:	f00d f87e 	bl	8025950 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018854:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018856:	441e      	add	r6, r3
 8018858:	e7de      	b.n	8018818 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 801885a:	4249      	negs	r1, r1
 801885c:	f7ff fe06 	bl	801846c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018860:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 8018864:	e7c9      	b.n	80187fa <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8018866:	2900      	cmp	r1, #0
 8018868:	f1c0 0000 	rsb	r0, r0, #0
 801886c:	462a      	mov	r2, r5
 801886e:	db04      	blt.n	801887a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 8018870:	f7ff fdfc 	bl	801846c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018874:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 8018878:	e7bf      	b.n	80187fa <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801887a:	4249      	negs	r1, r1
 801887c:	f7ff fdf6 	bl	801846c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018880:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 8018884:	e7b9      	b.n	80187fa <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8018886:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8018888:	a803      	add	r0, sp, #12
 801888a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801888c:	f00d f860 	bl	8025950 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018890:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018892:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8018894:	a803      	add	r0, sp, #12
 8018896:	f00d f85b 	bl	8025950 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801889a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801889e:	2b01      	cmp	r3, #1
 80188a0:	d123      	bne.n	80188ea <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 80188a2:	6f26      	ldr	r6, [r4, #112]	; 0x70
 80188a4:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 80188a8:	2e00      	cmp	r6, #0
 80188aa:	dd1e      	ble.n	80188ea <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 80188ac:	eb06 0907 	add.w	r9, r6, r7
 80188b0:	4648      	mov	r0, r9
 80188b2:	f7fe fe7b 	bl	80175ac <_ZN8touchgfx7CWRUtil4sineEi>
 80188b6:	a901      	add	r1, sp, #4
 80188b8:	9001      	str	r0, [sp, #4]
 80188ba:	4628      	mov	r0, r5
 80188bc:	f7fe fe6a 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80188c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80188c2:	eb00 0801 	add.w	r8, r0, r1
 80188c6:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 80188ca:	f7fe fe6f 	bl	80175ac <_ZN8touchgfx7CWRUtil4sineEi>
 80188ce:	a902      	add	r1, sp, #8
 80188d0:	9002      	str	r0, [sp, #8]
 80188d2:	4628      	mov	r0, r5
 80188d4:	f7fe fe5e 	bl	8017594 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80188d8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80188da:	4641      	mov	r1, r8
 80188dc:	1a12      	subs	r2, r2, r0
 80188de:	a803      	add	r0, sp, #12
 80188e0:	f00d f836 	bl	8025950 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80188e4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80188e6:	1af6      	subs	r6, r6, r3
 80188e8:	e7de      	b.n	80188a8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 80188ea:	a803      	add	r0, sp, #12
 80188ec:	f00d f9a5 	bl	8025c3a <_ZN8touchgfx6Canvas6renderEv>
 80188f0:	4604      	mov	r4, r0
 80188f2:	a803      	add	r0, sp, #12
 80188f4:	f00d f9de 	bl	8025cb4 <_ZN8touchgfx6CanvasD1Ev>
 80188f8:	4620      	mov	r0, r4
 80188fa:	b033      	add	sp, #204	; 0xcc
 80188fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08018900 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8018900:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8018904:	4770      	bx	lr

08018906 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8018906:	b570      	push	{r4, r5, r6, lr}
 8018908:	790b      	ldrb	r3, [r1, #4]
 801890a:	4604      	mov	r4, r0
 801890c:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8018910:	460e      	mov	r6, r1
 8018912:	2b00      	cmp	r3, #0
 8018914:	bf0c      	ite	eq
 8018916:	2301      	moveq	r3, #1
 8018918:	2300      	movne	r3, #0
 801891a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801891e:	d110      	bne.n	8018942 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8018920:	b185      	cbz	r5, 8018944 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 8018922:	7933      	ldrb	r3, [r6, #4]
 8018924:	2b01      	cmp	r3, #1
 8018926:	d113      	bne.n	8018950 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8018928:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801892a:	b188      	cbz	r0, 8018950 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801892c:	6803      	ldr	r3, [r0, #0]
 801892e:	68db      	ldr	r3, [r3, #12]
 8018930:	4798      	blx	r3
 8018932:	b168      	cbz	r0, 8018950 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8018934:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8018936:	4621      	mov	r1, r4
 8018938:	6803      	ldr	r3, [r0, #0]
 801893a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801893e:	689b      	ldr	r3, [r3, #8]
 8018940:	4718      	bx	r3
 8018942:	b12d      	cbz	r5, 8018950 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8018944:	6823      	ldr	r3, [r4, #0]
 8018946:	4620      	mov	r0, r4
 8018948:	695b      	ldr	r3, [r3, #20]
 801894a:	4798      	blx	r3
 801894c:	2d00      	cmp	r5, #0
 801894e:	d1e8      	bne.n	8018922 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8018950:	bd70      	pop	{r4, r5, r6, pc}

08018952 <_ZN8touchgfx13ScalableImage8setAlphaEh>:
 8018952:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
 8018956:	4770      	bx	lr

08018958 <_ZNK8touchgfx13ScalableImage8getAlphaEv>:
 8018958:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 801895c:	4770      	bx	lr

0801895e <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 801895e:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8018962:	4770      	bx	lr

08018964 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 8018964:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8018968:	4770      	bx	lr

0801896a <_ZN8touchgfx13ScalableImage9setBitmapERKNS_6BitmapE>:
 801896a:	b570      	push	{r4, r5, r6, lr}
 801896c:	4605      	mov	r5, r0
 801896e:	880b      	ldrh	r3, [r1, #0]
 8018970:	4604      	mov	r4, r0
 8018972:	8503      	strh	r3, [r0, #40]	; 0x28
 8018974:	f855 3b28 	ldr.w	r3, [r5], #40
 8018978:	4628      	mov	r0, r5
 801897a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801897c:	f004 fbde 	bl	801d13c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018980:	b201      	sxth	r1, r0
 8018982:	4620      	mov	r0, r4
 8018984:	47b0      	blx	r6
 8018986:	6823      	ldr	r3, [r4, #0]
 8018988:	4628      	mov	r0, r5
 801898a:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801898c:	f004 fc10 	bl	801d1b0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018990:	b201      	sxth	r1, r0
 8018992:	4620      	mov	r0, r4
 8018994:	4633      	mov	r3, r6
 8018996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801899a:	4718      	bx	r3

0801899c <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 801899c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801899e:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 80189a2:	4605      	mov	r5, r0
 80189a4:	2bff      	cmp	r3, #255	; 0xff
 80189a6:	d007      	beq.n	80189b8 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x1c>
 80189a8:	2300      	movs	r3, #0
 80189aa:	802b      	strh	r3, [r5, #0]
 80189ac:	806b      	strh	r3, [r5, #2]
 80189ae:	80ab      	strh	r3, [r5, #4]
 80189b0:	80eb      	strh	r3, [r5, #6]
 80189b2:	4628      	mov	r0, r5
 80189b4:	b004      	add	sp, #16
 80189b6:	bd70      	pop	{r4, r5, r6, pc}
 80189b8:	f101 0428 	add.w	r4, r1, #40	; 0x28
 80189bc:	4668      	mov	r0, sp
 80189be:	4621      	mov	r1, r4
 80189c0:	f004 fc30 	bl	801d224 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80189c4:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 80189c8:	4620      	mov	r0, r4
 80189ca:	f004 fbb7 	bl	801d13c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80189ce:	4286      	cmp	r6, r0
 80189d0:	d1ea      	bne.n	80189a8 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 80189d2:	4621      	mov	r1, r4
 80189d4:	a802      	add	r0, sp, #8
 80189d6:	f004 fc25 	bl	801d224 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80189da:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80189de:	4620      	mov	r0, r4
 80189e0:	f004 fbe6 	bl	801d1b0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80189e4:	4286      	cmp	r6, r0
 80189e6:	d1df      	bne.n	80189a8 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 80189e8:	4621      	mov	r1, r4
 80189ea:	4628      	mov	r0, r5
 80189ec:	f004 fc1a 	bl	801d224 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80189f0:	e7df      	b.n	80189b2 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x16>
	...

080189f4 <_ZN8touchgfx13ScalableImageC1Ev>:
 80189f4:	2200      	movs	r2, #0
 80189f6:	490d      	ldr	r1, [pc, #52]	; (8018a2c <_ZN8touchgfx13ScalableImageC1Ev+0x38>)
 80189f8:	8082      	strh	r2, [r0, #4]
 80189fa:	80c2      	strh	r2, [r0, #6]
 80189fc:	8102      	strh	r2, [r0, #8]
 80189fe:	8142      	strh	r2, [r0, #10]
 8018a00:	8182      	strh	r2, [r0, #12]
 8018a02:	81c2      	strh	r2, [r0, #14]
 8018a04:	8202      	strh	r2, [r0, #16]
 8018a06:	8242      	strh	r2, [r0, #18]
 8018a08:	61c2      	str	r2, [r0, #28]
 8018a0a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8018a0e:	6001      	str	r1, [r0, #0]
 8018a10:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8018a14:	2201      	movs	r2, #1
 8018a16:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 8018a1a:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
 8018a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018a22:	8502      	strh	r2, [r0, #40]	; 0x28
 8018a24:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
 8018a28:	4770      	bx	lr
 8018a2a:	bf00      	nop
 8018a2c:	0802adbc 	.word	0x0802adbc

08018a30 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 8018a30:	4603      	mov	r3, r0
 8018a32:	3028      	adds	r0, #40	; 0x28
 8018a34:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8018a38:	b90b      	cbnz	r3, 8018a3e <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 8018a3a:	f002 bf36 	b.w	801b8aa <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8018a3e:	f002 bf44 	b.w	801b8ca <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08018a44 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8018a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a48:	4604      	mov	r4, r0
 8018a4a:	469b      	mov	fp, r3
 8018a4c:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8018a50:	b0ab      	sub	sp, #172	; 0xac
 8018a52:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018a56:	f9b1 6000 	ldrsh.w	r6, [r1]
 8018a5a:	8888      	ldrh	r0, [r1, #4]
 8018a5c:	9206      	str	r2, [sp, #24]
 8018a5e:	2200      	movs	r2, #0
 8018a60:	4430      	add	r0, r6
 8018a62:	920e      	str	r2, [sp, #56]	; 0x38
 8018a64:	b280      	uxth	r0, r0
 8018a66:	fa0f fe80 	sxth.w	lr, r0
 8018a6a:	4596      	cmp	lr, r2
 8018a6c:	e9dd a934 	ldrd	sl, r9, [sp, #208]	; 0xd0
 8018a70:	e9dd 8736 	ldrd	r8, r7, [sp, #216]	; 0xd8
 8018a74:	f340 80f2 	ble.w	8018c5c <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x218>
 8018a78:	45b4      	cmp	ip, r6
 8018a7a:	f340 80ef 	ble.w	8018c5c <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x218>
 8018a7e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8018a82:	88ca      	ldrh	r2, [r1, #6]
 8018a84:	442a      	add	r2, r5
 8018a86:	b292      	uxth	r2, r2
 8018a88:	b211      	sxth	r1, r2
 8018a8a:	2900      	cmp	r1, #0
 8018a8c:	f340 80e6 	ble.w	8018c5c <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x218>
 8018a90:	42ab      	cmp	r3, r5
 8018a92:	f340 80e3 	ble.w	8018c5c <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x218>
 8018a96:	45f4      	cmp	ip, lr
 8018a98:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8018a9c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8018aa0:	bfb8      	it	lt
 8018aa2:	fa1f f08c 	uxthlt.w	r0, ip
 8018aa6:	428b      	cmp	r3, r1
 8018aa8:	f8ad 6038 	strh.w	r6, [sp, #56]	; 0x38
 8018aac:	bfb8      	it	lt
 8018aae:	b29a      	uxthlt	r2, r3
 8018ab0:	1b80      	subs	r0, r0, r6
 8018ab2:	f8ad 503a 	strh.w	r5, [sp, #58]	; 0x3a
 8018ab6:	1b52      	subs	r2, r2, r5
 8018ab8:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8018abc:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8018ac0:	ab0e      	add	r3, sp, #56	; 0x38
 8018ac2:	ad10      	add	r5, sp, #64	; 0x40
 8018ac4:	6822      	ldr	r2, [r4, #0]
 8018ac6:	1d26      	adds	r6, r4, #4
 8018ac8:	9307      	str	r3, [sp, #28]
 8018aca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018acc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018ad0:	e885 0003 	stmia.w	r5, {r0, r1}
 8018ad4:	4629      	mov	r1, r5
 8018ad6:	4620      	mov	r0, r4
 8018ad8:	4790      	blx	r2
 8018ada:	4621      	mov	r1, r4
 8018adc:	a812      	add	r0, sp, #72	; 0x48
 8018ade:	f002 fe40 	bl	801b762 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018ae2:	a812      	add	r0, sp, #72	; 0x48
 8018ae4:	f002 f844 	bl	801ab70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018ae8:	9b07      	ldr	r3, [sp, #28]
 8018aea:	4631      	mov	r1, r6
 8018aec:	4618      	mov	r0, r3
 8018aee:	f002 f827 	bl	801ab40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018af2:	4628      	mov	r0, r5
 8018af4:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8018af8:	f002 f83a 	bl	801ab70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018afc:	4628      	mov	r0, r5
 8018afe:	f004 fc25 	bl	801d34c <_ZNK8touchgfx6Bitmap7getDataEv>
 8018b02:	9007      	str	r0, [sp, #28]
 8018b04:	2800      	cmp	r0, #0
 8018b06:	f000 80a6 	beq.w	8018c56 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x212>
 8018b0a:	f8db 2000 	ldr.w	r2, [fp]
 8018b0e:	a90b      	add	r1, sp, #44	; 0x2c
 8018b10:	a808      	add	r0, sp, #32
 8018b12:	9208      	str	r2, [sp, #32]
 8018b14:	f8db 2004 	ldr.w	r2, [fp, #4]
 8018b18:	9209      	str	r2, [sp, #36]	; 0x24
 8018b1a:	f8db 2008 	ldr.w	r2, [fp, #8]
 8018b1e:	920a      	str	r2, [sp, #40]	; 0x28
 8018b20:	f8da 2000 	ldr.w	r2, [sl]
 8018b24:	920b      	str	r2, [sp, #44]	; 0x2c
 8018b26:	f8da 2004 	ldr.w	r2, [sl, #4]
 8018b2a:	920c      	str	r2, [sp, #48]	; 0x30
 8018b2c:	f8da 2008 	ldr.w	r2, [sl, #8]
 8018b30:	920d      	str	r2, [sp, #52]	; 0x34
 8018b32:	4632      	mov	r2, r6
 8018b34:	f001 ffe8 	bl	801ab08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8018b38:	4632      	mov	r2, r6
 8018b3a:	a90c      	add	r1, sp, #48	; 0x30
 8018b3c:	a809      	add	r0, sp, #36	; 0x24
 8018b3e:	f001 ffe3 	bl	801ab08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8018b42:	4632      	mov	r2, r6
 8018b44:	a90d      	add	r1, sp, #52	; 0x34
 8018b46:	a80a      	add	r0, sp, #40	; 0x28
 8018b48:	f001 ffde 	bl	801ab08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8018b4c:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8018b50:	ed97 6a00 	vldr	s12, [r7]
 8018b54:	eeb0 7a67 	vmov.f32	s14, s15
 8018b58:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8018b5c:	ed99 5a00 	vldr	s10, [r9]
 8018b60:	edd8 5a00 	vldr	s11, [r8]
 8018b64:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8018b68:	edd9 6a01 	vldr	s13, [r9, #4]
 8018b6c:	f8d9 e008 	ldr.w	lr, [r9, #8]
 8018b70:	f8d8 c008 	ldr.w	ip, [r8, #8]
 8018b74:	ee17 6a10 	vmov	r6, s14
 8018b78:	eeb0 7a67 	vmov.f32	s14, s15
 8018b7c:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8018b80:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8018b84:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8018b88:	9b06      	ldr	r3, [sp, #24]
 8018b8a:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8018b8e:	68bf      	ldr	r7, [r7, #8]
 8018b90:	ee17 0a10 	vmov	r0, s14
 8018b94:	eeb0 7a67 	vmov.f32	s14, s15
 8018b98:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8018b9c:	ed8d 5a1d 	vstr	s10, [sp, #116]	; 0x74
 8018ba0:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8018ba4:	edcd 5a1e 	vstr	s11, [sp, #120]	; 0x78
 8018ba8:	ed8d 6a1f 	vstr	s12, [sp, #124]	; 0x7c
 8018bac:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8018bb0:	ee17 1a10 	vmov	r1, s14
 8018bb4:	eeb0 7a67 	vmov.f32	s14, s15
 8018bb8:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8018bbc:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
 8018bc0:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8018bc4:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
 8018bc8:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8018bcc:	9314      	str	r3, [sp, #80]	; 0x50
 8018bce:	961c      	str	r6, [sp, #112]	; 0x70
 8018bd0:	ee17 2a10 	vmov	r2, s14
 8018bd4:	ed9d 7a08 	vldr	s14, [sp, #32]
 8018bd8:	edcd 7a26 	vstr	s15, [sp, #152]	; 0x98
 8018bdc:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8018be0:	9225      	str	r2, [sp, #148]	; 0x94
 8018be2:	4a20      	ldr	r2, [pc, #128]	; (8018c64 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x220>)
 8018be4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8018be8:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 8018bec:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 8018bf0:	9729      	str	r7, [sp, #164]	; 0xa4
 8018bf2:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 8018bf6:	8812      	ldrh	r2, [r2, #0]
 8018bf8:	4628      	mov	r0, r5
 8018bfa:	9b07      	ldr	r3, [sp, #28]
 8018bfc:	9215      	str	r2, [sp, #84]	; 0x54
 8018bfe:	9316      	str	r3, [sp, #88]	; 0x58
 8018c00:	f004 fbd6 	bl	801d3b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8018c04:	9017      	str	r0, [sp, #92]	; 0x5c
 8018c06:	4628      	mov	r0, r5
 8018c08:	f004 fa98 	bl	801d13c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018c0c:	9018      	str	r0, [sp, #96]	; 0x60
 8018c0e:	4628      	mov	r0, r5
 8018c10:	f004 face 	bl	801d1b0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018c14:	9019      	str	r0, [sp, #100]	; 0x64
 8018c16:	4628      	mov	r0, r5
 8018c18:	f004 fa90 	bl	801d13c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018c1c:	4b12      	ldr	r3, [pc, #72]	; (8018c68 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x224>)
 8018c1e:	901a      	str	r0, [sp, #104]	; 0x68
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018c26:	b10a      	cbz	r2, 8018c2c <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1e8>
 8018c28:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8018c2a:	b905      	cbnz	r5, 8018c2e <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ea>
 8018c2c:	689d      	ldr	r5, [r3, #8]
 8018c2e:	4620      	mov	r0, r4
 8018c30:	f7ff fefe 	bl	8018a30 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 8018c34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018c38:	aa1b      	add	r2, sp, #108	; 0x6c
 8018c3a:	a914      	add	r1, sp, #80	; 0x50
 8018c3c:	9304      	str	r3, [sp, #16]
 8018c3e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8018c42:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8018c46:	ab10      	add	r3, sp, #64	; 0x40
 8018c48:	4628      	mov	r0, r5
 8018c4a:	9301      	str	r3, [sp, #4]
 8018c4c:	ab12      	add	r3, sp, #72	; 0x48
 8018c4e:	9300      	str	r3, [sp, #0]
 8018c50:	ab16      	add	r3, sp, #88	; 0x58
 8018c52:	f001 faff 	bl	801a254 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 8018c56:	b02b      	add	sp, #172	; 0xac
 8018c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c5c:	2300      	movs	r3, #0
 8018c5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018c60:	e72e      	b.n	8018ac0 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 8018c62:	bf00      	nop
 8018c64:	2000b3ce 	.word	0x2000b3ce
 8018c68:	2000b3d4 	.word	0x2000b3d4

08018c6c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 8018c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c70:	ed2d 8b0a 	vpush	{d8-d12}
 8018c74:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8018c78:	b095      	sub	sp, #84	; 0x54
 8018c7a:	4680      	mov	r8, r0
 8018c7c:	4689      	mov	r9, r1
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	f000 808a 	beq.w	8018d98 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x12c>
 8018c84:	4c4b      	ldr	r4, [pc, #300]	; (8018db4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x148>)
 8018c86:	f108 0528 	add.w	r5, r8, #40	; 0x28
 8018c8a:	ed9f 8a4b 	vldr	s16, [pc, #300]	; 8018db8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x14c>
 8018c8e:	6820      	ldr	r0, [r4, #0]
 8018c90:	46a3      	mov	fp, r4
 8018c92:	6803      	ldr	r3, [r0, #0]
 8018c94:	6a1b      	ldr	r3, [r3, #32]
 8018c96:	4798      	blx	r3
 8018c98:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
 8018c9c:	4682      	mov	sl, r0
 8018c9e:	4628      	mov	r0, r5
 8018ca0:	ee09 3a10 	vmov	s18, r3
 8018ca4:	f9b8 300a 	ldrsh.w	r3, [r8, #10]
 8018ca8:	ee08 3a90 	vmov	s17, r3
 8018cac:	4b43      	ldr	r3, [pc, #268]	; (8018dbc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x150>)
 8018cae:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8018cb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8018cb4:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8018cb8:	930c      	str	r3, [sp, #48]	; 0x30
 8018cba:	930d      	str	r3, [sp, #52]	; 0x34
 8018cbc:	f004 fa3e 	bl	801d13c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018cc0:	ee07 0a90 	vmov	s15, r0
 8018cc4:	4628      	mov	r0, r5
 8018cc6:	ee39 9a08 	vadd.f32	s18, s18, s16
 8018cca:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8018cce:	f004 fa6f 	bl	801d1b0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018cd2:	4b3b      	ldr	r3, [pc, #236]	; (8018dc0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x154>)
 8018cd4:	ee07 0a90 	vmov	s15, r0
 8018cd8:	ee78 8a88 	vadd.f32	s17, s17, s16
 8018cdc:	781b      	ldrb	r3, [r3, #0]
 8018cde:	eef8 9a67 	vcvt.f32.u32	s19, s15
 8018ce2:	2b01      	cmp	r3, #1
 8018ce4:	d15d      	bne.n	8018da2 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x136>
 8018ce6:	eef0 aa4a 	vmov.f32	s21, s20
 8018cea:	eef0 ba69 	vmov.f32	s23, s19
 8018cee:	eeb0 ca69 	vmov.f32	s24, s19
 8018cf2:	eeb0 ba4a 	vmov.f32	s22, s20
 8018cf6:	eef0 9a48 	vmov.f32	s19, s16
 8018cfa:	eeb0 aa48 	vmov.f32	s20, s16
 8018cfe:	af11      	add	r7, sp, #68	; 0x44
 8018d00:	ae0e      	add	r6, sp, #56	; 0x38
 8018d02:	ad0b      	add	r5, sp, #44	; 0x2c
 8018d04:	ac08      	add	r4, sp, #32
 8018d06:	ab05      	add	r3, sp, #20
 8018d08:	4652      	mov	r2, sl
 8018d0a:	4649      	mov	r1, r9
 8018d0c:	4640      	mov	r0, r8
 8018d0e:	9703      	str	r7, [sp, #12]
 8018d10:	9602      	str	r6, [sp, #8]
 8018d12:	9501      	str	r5, [sp, #4]
 8018d14:	9400      	str	r4, [sp, #0]
 8018d16:	ed8d 8a05 	vstr	s16, [sp, #20]
 8018d1a:	ed8d 9a06 	vstr	s18, [sp, #24]
 8018d1e:	ed8d 9a07 	vstr	s18, [sp, #28]
 8018d22:	ed8d 8a08 	vstr	s16, [sp, #32]
 8018d26:	ed8d 8a09 	vstr	s16, [sp, #36]	; 0x24
 8018d2a:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 8018d2e:	ed8d 8a0e 	vstr	s16, [sp, #56]	; 0x38
 8018d32:	ed8d aa0f 	vstr	s20, [sp, #60]	; 0x3c
 8018d36:	ed8d ca10 	vstr	s24, [sp, #64]	; 0x40
 8018d3a:	ed8d ba11 	vstr	s22, [sp, #68]	; 0x44
 8018d3e:	ed8d 8a12 	vstr	s16, [sp, #72]	; 0x48
 8018d42:	edcd 9a13 	vstr	s19, [sp, #76]	; 0x4c
 8018d46:	f7ff fe7d 	bl	8018a44 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8018d4a:	ab05      	add	r3, sp, #20
 8018d4c:	4640      	mov	r0, r8
 8018d4e:	4652      	mov	r2, sl
 8018d50:	4649      	mov	r1, r9
 8018d52:	ed8d 8a05 	vstr	s16, [sp, #20]
 8018d56:	ed8d 9a06 	vstr	s18, [sp, #24]
 8018d5a:	ed8d 8a07 	vstr	s16, [sp, #28]
 8018d5e:	ed8d 8a08 	vstr	s16, [sp, #32]
 8018d62:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8018d66:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 8018d6a:	ed8d 8a0e 	vstr	s16, [sp, #56]	; 0x38
 8018d6e:	ed8d ca0f 	vstr	s24, [sp, #60]	; 0x3c
 8018d72:	edcd ba10 	vstr	s23, [sp, #64]	; 0x40
 8018d76:	ed8d ba11 	vstr	s22, [sp, #68]	; 0x44
 8018d7a:	edcd 9a12 	vstr	s19, [sp, #72]	; 0x48
 8018d7e:	edcd aa13 	vstr	s21, [sp, #76]	; 0x4c
 8018d82:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8018d86:	e9cd 4500 	strd	r4, r5, [sp]
 8018d8a:	f7ff fe5b 	bl	8018a44 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8018d8e:	f8db 0000 	ldr.w	r0, [fp]
 8018d92:	6803      	ldr	r3, [r0, #0]
 8018d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d96:	4798      	blx	r3
 8018d98:	b015      	add	sp, #84	; 0x54
 8018d9a:	ecbd 8b0a 	vpop	{d8-d12}
 8018d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018da2:	eef0 aa69 	vmov.f32	s21, s19
 8018da6:	eeb0 ca4a 	vmov.f32	s24, s20
 8018daa:	eef0 ba48 	vmov.f32	s23, s16
 8018dae:	eeb0 ba48 	vmov.f32	s22, s16
 8018db2:	e7a4      	b.n	8018cfe <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x92>
 8018db4:	2000b3d4 	.word	0x2000b3d4
 8018db8:	00000000 	.word	0x00000000
 8018dbc:	42c80000 	.word	0x42c80000
 8018dc0:	2000b3cc 	.word	0x2000b3cc

08018dc4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8018dc4:	2200      	movs	r2, #0
 8018dc6:	8002      	strh	r2, [r0, #0]
 8018dc8:	8042      	strh	r2, [r0, #2]
 8018dca:	8082      	strh	r2, [r0, #4]
 8018dcc:	80c2      	strh	r2, [r0, #6]
 8018dce:	4770      	bx	lr

08018dd0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8018dd0:	b570      	push	{r4, r5, r6, lr}
 8018dd2:	6803      	ldr	r3, [r0, #0]
 8018dd4:	4604      	mov	r4, r0
 8018dd6:	4615      	mov	r5, r2
 8018dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018dda:	4798      	blx	r3
 8018ddc:	6823      	ldr	r3, [r4, #0]
 8018dde:	4629      	mov	r1, r5
 8018de0:	4620      	mov	r0, r4
 8018de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018de4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018de8:	4718      	bx	r3
	...

08018dec <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8018dec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018dee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018df2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018df4:	4299      	cmp	r1, r3
 8018df6:	d029      	beq.n	8018e4c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8018df8:	4b15      	ldr	r3, [pc, #84]	; (8018e50 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	b92b      	cbnz	r3, 8018e0a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8018dfe:	4b15      	ldr	r3, [pc, #84]	; (8018e54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8018e00:	21b1      	movs	r1, #177	; 0xb1
 8018e02:	4a15      	ldr	r2, [pc, #84]	; (8018e58 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8018e04:	4815      	ldr	r0, [pc, #84]	; (8018e5c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8018e06:	f00e f821 	bl	8026e4c <__assert_func>
 8018e0a:	4a15      	ldr	r2, [pc, #84]	; (8018e60 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8018e0c:	8812      	ldrh	r2, [r2, #0]
 8018e0e:	428a      	cmp	r2, r1
 8018e10:	d803      	bhi.n	8018e1a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8018e12:	4b14      	ldr	r3, [pc, #80]	; (8018e64 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8018e14:	21b2      	movs	r1, #178	; 0xb2
 8018e16:	4a10      	ldr	r2, [pc, #64]	; (8018e58 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8018e18:	e7f4      	b.n	8018e04 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8018e1a:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8018e1e:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8018e22:	4b11      	ldr	r3, [pc, #68]	; (8018e68 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8018e24:	7854      	ldrb	r4, [r2, #1]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8018e2c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8018e30:	682b      	ldr	r3, [r5, #0]
 8018e32:	69de      	ldr	r6, [r3, #28]
 8018e34:	4b0d      	ldr	r3, [pc, #52]	; (8018e6c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8018e36:	6818      	ldr	r0, [r3, #0]
 8018e38:	f7fa fd14 	bl	8013864 <_ZNK8touchgfx5Texts7getTextEt>
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	4602      	mov	r2, r0
 8018e40:	4621      	mov	r1, r4
 8018e42:	9300      	str	r3, [sp, #0]
 8018e44:	4628      	mov	r0, r5
 8018e46:	47b0      	blx	r6
 8018e48:	b002      	add	sp, #8
 8018e4a:	bd70      	pop	{r4, r5, r6, pc}
 8018e4c:	2000      	movs	r0, #0
 8018e4e:	e7fb      	b.n	8018e48 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8018e50:	2000b464 	.word	0x2000b464
 8018e54:	0802ae30 	.word	0x0802ae30
 8018e58:	0802af6c 	.word	0x0802af6c
 8018e5c:	0802ae72 	.word	0x0802ae72
 8018e60:	2000b468 	.word	0x2000b468
 8018e64:	0802ae9b 	.word	0x0802ae9b
 8018e68:	2000b46c 	.word	0x2000b46c
 8018e6c:	2000b470 	.word	0x2000b470

08018e70 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8018e70:	b570      	push	{r4, r5, r6, lr}
 8018e72:	6803      	ldr	r3, [r0, #0]
 8018e74:	4604      	mov	r4, r0
 8018e76:	b28d      	uxth	r5, r1
 8018e78:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018e7a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8018e7c:	4b10      	ldr	r3, [pc, #64]	; (8018ec0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	b92b      	cbnz	r3, 8018e8e <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8018e82:	4b10      	ldr	r3, [pc, #64]	; (8018ec4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8018e84:	21b1      	movs	r1, #177	; 0xb1
 8018e86:	4a10      	ldr	r2, [pc, #64]	; (8018ec8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8018e88:	4810      	ldr	r0, [pc, #64]	; (8018ecc <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8018e8a:	f00d ffdf 	bl	8026e4c <__assert_func>
 8018e8e:	4910      	ldr	r1, [pc, #64]	; (8018ed0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8018e90:	8809      	ldrh	r1, [r1, #0]
 8018e92:	4291      	cmp	r1, r2
 8018e94:	d803      	bhi.n	8018e9e <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8018e96:	4b0f      	ldr	r3, [pc, #60]	; (8018ed4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8018e98:	21b2      	movs	r1, #178	; 0xb2
 8018e9a:	4a0b      	ldr	r2, [pc, #44]	; (8018ec8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8018e9c:	e7f4      	b.n	8018e88 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8018e9e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8018ea2:	4b0d      	ldr	r3, [pc, #52]	; (8018ed8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018eaa:	6803      	ldr	r3, [r0, #0]
 8018eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018eae:	4798      	blx	r3
 8018eb0:	1a29      	subs	r1, r5, r0
 8018eb2:	4633      	mov	r3, r6
 8018eb4:	4620      	mov	r0, r4
 8018eb6:	b209      	sxth	r1, r1
 8018eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ebc:	4718      	bx	r3
 8018ebe:	bf00      	nop
 8018ec0:	2000b464 	.word	0x2000b464
 8018ec4:	0802ae30 	.word	0x0802ae30
 8018ec8:	0802af6c 	.word	0x0802af6c
 8018ecc:	0802ae72 	.word	0x0802ae72
 8018ed0:	2000b468 	.word	0x2000b468
 8018ed4:	0802ae9b 	.word	0x0802ae9b
 8018ed8:	2000b46c 	.word	0x2000b46c

08018edc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8018edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018ee4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8018ee6:	b08c      	sub	sp, #48	; 0x30
 8018ee8:	4604      	mov	r4, r0
 8018eea:	4293      	cmp	r3, r2
 8018eec:	4688      	mov	r8, r1
 8018eee:	d05f      	beq.n	8018fb0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8018ef0:	4e31      	ldr	r6, [pc, #196]	; (8018fb8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8018ef2:	6832      	ldr	r2, [r6, #0]
 8018ef4:	b92a      	cbnz	r2, 8018f02 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8018ef6:	4b31      	ldr	r3, [pc, #196]	; (8018fbc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8018ef8:	21b1      	movs	r1, #177	; 0xb1
 8018efa:	4a31      	ldr	r2, [pc, #196]	; (8018fc0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8018efc:	4831      	ldr	r0, [pc, #196]	; (8018fc4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8018efe:	f00d ffa5 	bl	8026e4c <__assert_func>
 8018f02:	4d31      	ldr	r5, [pc, #196]	; (8018fc8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8018f04:	8829      	ldrh	r1, [r5, #0]
 8018f06:	4299      	cmp	r1, r3
 8018f08:	d803      	bhi.n	8018f12 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8018f0a:	4b30      	ldr	r3, [pc, #192]	; (8018fcc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8018f0c:	21b2      	movs	r1, #178	; 0xb2
 8018f0e:	4a2c      	ldr	r2, [pc, #176]	; (8018fc0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8018f10:	e7f4      	b.n	8018efc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8018f12:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018f16:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018f1a:	4b2d      	ldr	r3, [pc, #180]	; (8018fd0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018f22:	2a00      	cmp	r2, #0
 8018f24:	d044      	beq.n	8018fb0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8018f26:	784b      	ldrb	r3, [r1, #1]
 8018f28:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8018f2c:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8018f30:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018f34:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8018f38:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8018f3c:	4b25      	ldr	r3, [pc, #148]	; (8018fd4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8018f3e:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8018f48:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8018f4c:	9207      	str	r2, [sp, #28]
 8018f4e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018f50:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018f54:	9009      	str	r0, [sp, #36]	; 0x24
 8018f56:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8018f5a:	f88d 9020 	strb.w	r9, [sp, #32]
 8018f5e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8018f62:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8018f66:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8018f6a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8018f6e:	b10a      	cbz	r2, 8018f74 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8018f70:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8018f72:	b907      	cbnz	r7, 8018f76 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8018f74:	689f      	ldr	r7, [r3, #8]
 8018f76:	f10d 0914 	add.w	r9, sp, #20
 8018f7a:	4621      	mov	r1, r4
 8018f7c:	4648      	mov	r0, r9
 8018f7e:	f002 fbf0 	bl	801b762 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018f82:	6833      	ldr	r3, [r6, #0]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d0b6      	beq.n	8018ef6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8018f88:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018f8a:	882b      	ldrh	r3, [r5, #0]
 8018f8c:	428b      	cmp	r3, r1
 8018f8e:	d9bc      	bls.n	8018f0a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8018f90:	4b11      	ldr	r3, [pc, #68]	; (8018fd8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8018f92:	6818      	ldr	r0, [r3, #0]
 8018f94:	f7fa fc66 	bl	8013864 <_ZNK8touchgfx5Texts7getTextEt>
 8018f98:	2300      	movs	r3, #0
 8018f9a:	9001      	str	r0, [sp, #4]
 8018f9c:	4638      	mov	r0, r7
 8018f9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8018fa2:	ab07      	add	r3, sp, #28
 8018fa4:	9300      	str	r3, [sp, #0]
 8018fa6:	4643      	mov	r3, r8
 8018fa8:	e899 0006 	ldmia.w	r9, {r1, r2}
 8018fac:	f7fa fbeb 	bl	8013786 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018fb0:	b00c      	add	sp, #48	; 0x30
 8018fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fb6:	bf00      	nop
 8018fb8:	2000b464 	.word	0x2000b464
 8018fbc:	0802ae30 	.word	0x0802ae30
 8018fc0:	0802af6c 	.word	0x0802af6c
 8018fc4:	0802ae72 	.word	0x0802ae72
 8018fc8:	2000b468 	.word	0x2000b468
 8018fcc:	0802ae9b 	.word	0x0802ae9b
 8018fd0:	2000b46c 	.word	0x2000b46c
 8018fd4:	2000b3d4 	.word	0x2000b3d4
 8018fd8:	2000b470 	.word	0x2000b470

08018fdc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8018fdc:	b40e      	push	{r1, r2, r3}
 8018fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018fe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fe6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8018fe8:	b09b      	sub	sp, #108	; 0x6c
 8018fea:	4604      	mov	r4, r0
 8018fec:	4293      	cmp	r3, r2
 8018fee:	d061      	beq.n	80190b4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 8018ff0:	aa24      	add	r2, sp, #144	; 0x90
 8018ff2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80190c8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8018ff6:	9203      	str	r2, [sp, #12]
 8018ff8:	f8da 2000 	ldr.w	r2, [sl]
 8018ffc:	b92a      	cbnz	r2, 801900a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8018ffe:	4b2e      	ldr	r3, [pc, #184]	; (80190b8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 8019000:	21b1      	movs	r1, #177	; 0xb1
 8019002:	4a2e      	ldr	r2, [pc, #184]	; (80190bc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8019004:	482e      	ldr	r0, [pc, #184]	; (80190c0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 8019006:	f00d ff21 	bl	8026e4c <__assert_func>
 801900a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80190cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 801900e:	f8b8 1000 	ldrh.w	r1, [r8]
 8019012:	4299      	cmp	r1, r3
 8019014:	d803      	bhi.n	801901e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8019016:	4b2b      	ldr	r3, [pc, #172]	; (80190c4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8019018:	21b2      	movs	r1, #178	; 0xb2
 801901a:	4a28      	ldr	r2, [pc, #160]	; (80190bc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 801901c:	e7f2      	b.n	8019004 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 801901e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80190d0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 8019022:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019026:	f8d9 3000 	ldr.w	r3, [r9]
 801902a:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801902e:	683b      	ldr	r3, [r7, #0]
 8019030:	4638      	mov	r0, r7
 8019032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019034:	4798      	blx	r3
 8019036:	4606      	mov	r6, r0
 8019038:	b205      	sxth	r5, r0
 801903a:	a804      	add	r0, sp, #16
 801903c:	f003 f820 	bl	801c080 <_ZN8touchgfx12TextProviderC1Ev>
 8019040:	683b      	ldr	r3, [r7, #0]
 8019042:	4638      	mov	r0, r7
 8019044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019046:	4798      	blx	r3
 8019048:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801904a:	4603      	mov	r3, r0
 801904c:	9a03      	ldr	r2, [sp, #12]
 801904e:	a804      	add	r0, sp, #16
 8019050:	f003 f85b 	bl	801c10a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019054:	f8da 3000 	ldr.w	r3, [sl]
 8019058:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801905c:	2b00      	cmp	r3, #0
 801905e:	d0ce      	beq.n	8018ffe <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8019060:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019062:	f8b8 0000 	ldrh.w	r0, [r8]
 8019066:	4290      	cmp	r0, r2
 8019068:	d9d5      	bls.n	8019016 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801906a:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 801906e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8019072:	f8d9 3000 	ldr.w	r3, [r9]
 8019076:	787a      	ldrb	r2, [r7, #1]
 8019078:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 801907c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8019080:	9700      	str	r7, [sp, #0]
 8019082:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8019086:	a804      	add	r0, sp, #16
 8019088:	f000 ff5a 	bl	8019f40 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801908c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8019090:	b203      	sxth	r3, r0
 8019092:	18a9      	adds	r1, r5, r2
 8019094:	2900      	cmp	r1, #0
 8019096:	dd0b      	ble.n	80190b0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8019098:	3b01      	subs	r3, #1
 801909a:	fb13 f302 	smulbb	r3, r3, r2
 801909e:	fb16 3300 	smlabb	r3, r6, r0, r3
 80190a2:	b21d      	sxth	r5, r3
 80190a4:	4628      	mov	r0, r5
 80190a6:	b01b      	add	sp, #108	; 0x6c
 80190a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190ac:	b003      	add	sp, #12
 80190ae:	4770      	bx	lr
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	dcf7      	bgt.n	80190a4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80190b4:	2500      	movs	r5, #0
 80190b6:	e7f5      	b.n	80190a4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80190b8:	0802ae30 	.word	0x0802ae30
 80190bc:	0802af6c 	.word	0x0802af6c
 80190c0:	0802ae72 	.word	0x0802ae72
 80190c4:	0802ae9b 	.word	0x0802ae9b
 80190c8:	2000b464 	.word	0x2000b464
 80190cc:	2000b468 	.word	0x2000b468
 80190d0:	2000b46c 	.word	0x2000b46c

080190d4 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 80190d4:	b570      	push	{r4, r5, r6, lr}
 80190d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80190da:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80190dc:	4604      	mov	r4, r0
 80190de:	4299      	cmp	r1, r3
 80190e0:	d01e      	beq.n	8019120 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 80190e2:	6803      	ldr	r3, [r0, #0]
 80190e4:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80190e6:	4b0f      	ldr	r3, [pc, #60]	; (8019124 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	b92b      	cbnz	r3, 80190f8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 80190ec:	4b0e      	ldr	r3, [pc, #56]	; (8019128 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 80190ee:	21b1      	movs	r1, #177	; 0xb1
 80190f0:	4a0e      	ldr	r2, [pc, #56]	; (801912c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 80190f2:	480f      	ldr	r0, [pc, #60]	; (8019130 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 80190f4:	f00d feaa 	bl	8026e4c <__assert_func>
 80190f8:	4b0e      	ldr	r3, [pc, #56]	; (8019134 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 80190fa:	881b      	ldrh	r3, [r3, #0]
 80190fc:	428b      	cmp	r3, r1
 80190fe:	d803      	bhi.n	8019108 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8019100:	4b0d      	ldr	r3, [pc, #52]	; (8019138 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8019102:	21b2      	movs	r1, #178	; 0xb2
 8019104:	4a09      	ldr	r2, [pc, #36]	; (801912c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8019106:	e7f4      	b.n	80190f2 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8019108:	4b0c      	ldr	r3, [pc, #48]	; (801913c <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 801910a:	6818      	ldr	r0, [r3, #0]
 801910c:	f7fa fbaa 	bl	8013864 <_ZNK8touchgfx5Texts7getTextEt>
 8019110:	2300      	movs	r3, #0
 8019112:	4601      	mov	r1, r0
 8019114:	46ac      	mov	ip, r5
 8019116:	4620      	mov	r0, r4
 8019118:	461a      	mov	r2, r3
 801911a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801911e:	4760      	bx	ip
 8019120:	2000      	movs	r0, #0
 8019122:	bd70      	pop	{r4, r5, r6, pc}
 8019124:	2000b464 	.word	0x2000b464
 8019128:	0802ae30 	.word	0x0802ae30
 801912c:	0802af6c 	.word	0x0802af6c
 8019130:	0802ae72 	.word	0x0802ae72
 8019134:	2000b468 	.word	0x2000b468
 8019138:	0802ae9b 	.word	0x0802ae9b
 801913c:	2000b470 	.word	0x2000b470

08019140 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8019140:	b570      	push	{r4, r5, r6, lr}
 8019142:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019146:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019148:	4604      	mov	r4, r0
 801914a:	429a      	cmp	r2, r3
 801914c:	d021      	beq.n	8019192 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801914e:	6803      	ldr	r3, [r0, #0]
 8019150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019152:	4798      	blx	r3
 8019154:	6823      	ldr	r3, [r4, #0]
 8019156:	4605      	mov	r5, r0
 8019158:	4620      	mov	r0, r4
 801915a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801915c:	4798      	blx	r3
 801915e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019162:	4606      	mov	r6, r0
 8019164:	b22d      	sxth	r5, r5
 8019166:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801916a:	6823      	ldr	r3, [r4, #0]
 801916c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801916e:	d109      	bne.n	8019184 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8019170:	4629      	mov	r1, r5
 8019172:	4620      	mov	r0, r4
 8019174:	4798      	blx	r3
 8019176:	6823      	ldr	r3, [r4, #0]
 8019178:	4631      	mov	r1, r6
 801917a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801917c:	4620      	mov	r0, r4
 801917e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019182:	4718      	bx	r3
 8019184:	4601      	mov	r1, r0
 8019186:	4620      	mov	r0, r4
 8019188:	4798      	blx	r3
 801918a:	6823      	ldr	r3, [r4, #0]
 801918c:	4629      	mov	r1, r5
 801918e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019190:	e7f4      	b.n	801917c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8019192:	bd70      	pop	{r4, r5, r6, pc}

08019194 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8019194:	888a      	ldrh	r2, [r1, #4]
 8019196:	8582      	strh	r2, [r0, #44]	; 0x2c
 8019198:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801919c:	b922      	cbnz	r2, 80191a8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 801919e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80191a2:	b90b      	cbnz	r3, 80191a8 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 80191a4:	f7ff bfcc 	b.w	8019140 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80191a8:	4770      	bx	lr

080191aa <_ZNK8touchgfx3Box12getSolidRectEv>:
 80191aa:	2300      	movs	r3, #0
 80191ac:	8003      	strh	r3, [r0, #0]
 80191ae:	8043      	strh	r3, [r0, #2]
 80191b0:	8083      	strh	r3, [r0, #4]
 80191b2:	80c3      	strh	r3, [r0, #6]
 80191b4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80191b8:	b91b      	cbnz	r3, 80191c2 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 80191ba:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80191be:	2bff      	cmp	r3, #255	; 0xff
 80191c0:	d103      	bne.n	80191ca <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 80191c2:	890b      	ldrh	r3, [r1, #8]
 80191c4:	8083      	strh	r3, [r0, #4]
 80191c6:	894b      	ldrh	r3, [r1, #10]
 80191c8:	80c3      	strh	r3, [r0, #6]
 80191ca:	4770      	bx	lr

080191cc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80191cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80191ce:	4604      	mov	r4, r0
 80191d0:	466b      	mov	r3, sp
 80191d2:	6808      	ldr	r0, [r1, #0]
 80191d4:	6849      	ldr	r1, [r1, #4]
 80191d6:	c303      	stmia	r3!, {r0, r1}
 80191d8:	6823      	ldr	r3, [r4, #0]
 80191da:	4669      	mov	r1, sp
 80191dc:	4620      	mov	r0, r4
 80191de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191e0:	4798      	blx	r3
 80191e2:	4b08      	ldr	r3, [pc, #32]	; (8019204 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80191ea:	b10a      	cbz	r2, 80191f0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80191ec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80191ee:	b900      	cbnz	r0, 80191f2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80191f0:	6898      	ldr	r0, [r3, #8]
 80191f2:	6803      	ldr	r3, [r0, #0]
 80191f4:	4669      	mov	r1, sp
 80191f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80191f8:	699d      	ldr	r5, [r3, #24]
 80191fa:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80191fe:	47a8      	blx	r5
 8019200:	b003      	add	sp, #12
 8019202:	bd30      	pop	{r4, r5, pc}
 8019204:	2000b3d4 	.word	0x2000b3d4

08019208 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8019208:	b538      	push	{r3, r4, r5, lr}
 801920a:	880b      	ldrh	r3, [r1, #0]
 801920c:	4605      	mov	r5, r0
 801920e:	4604      	mov	r4, r0
 8019210:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8019212:	8813      	ldrh	r3, [r2, #0]
 8019214:	f825 3f30 	strh.w	r3, [r5, #48]!
 8019218:	4628      	mov	r0, r5
 801921a:	f003 ff8f 	bl	801d13c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801921e:	8120      	strh	r0, [r4, #8]
 8019220:	4628      	mov	r0, r5
 8019222:	f003 ffc5 	bl	801d1b0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019226:	8160      	strh	r0, [r4, #10]
 8019228:	bd38      	pop	{r3, r4, r5, pc}

0801922a <_ZNK8touchgfx6Button12getSolidRectEv>:
 801922a:	b510      	push	{r4, lr}
 801922c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8019230:	4604      	mov	r4, r0
 8019232:	2bff      	cmp	r3, #255	; 0xff
 8019234:	d006      	beq.n	8019244 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8019236:	2300      	movs	r3, #0
 8019238:	8003      	strh	r3, [r0, #0]
 801923a:	8043      	strh	r3, [r0, #2]
 801923c:	8083      	strh	r3, [r0, #4]
 801923e:	80c3      	strh	r3, [r0, #6]
 8019240:	4620      	mov	r0, r4
 8019242:	bd10      	pop	{r4, pc}
 8019244:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8019248:	b11b      	cbz	r3, 8019252 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801924a:	3130      	adds	r1, #48	; 0x30
 801924c:	f003 ffea 	bl	801d224 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019250:	e7f6      	b.n	8019240 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8019252:	312e      	adds	r1, #46	; 0x2e
 8019254:	e7fa      	b.n	801924c <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08019258 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8019258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801925c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8019260:	b08a      	sub	sp, #40	; 0x28
 8019262:	4604      	mov	r4, r0
 8019264:	4688      	mov	r8, r1
 8019266:	2b00      	cmp	r3, #0
 8019268:	d044      	beq.n	80192f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 801926a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801926c:	a805      	add	r0, sp, #20
 801926e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019272:	f003 ff63 	bl	801d13c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019276:	4605      	mov	r5, r0
 8019278:	b206      	sxth	r6, r0
 801927a:	a805      	add	r0, sp, #20
 801927c:	f003 ff98 	bl	801d1b0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019280:	f9b8 2000 	ldrsh.w	r2, [r8]
 8019284:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8019288:	2300      	movs	r3, #0
 801928a:	fa0f fc80 	sxth.w	ip, r0
 801928e:	4417      	add	r7, r2
 8019290:	9306      	str	r3, [sp, #24]
 8019292:	b2bf      	uxth	r7, r7
 8019294:	fa0f fe87 	sxth.w	lr, r7
 8019298:	459e      	cmp	lr, r3
 801929a:	dd2d      	ble.n	80192f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801929c:	4296      	cmp	r6, r2
 801929e:	dd2b      	ble.n	80192f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80192a0:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 80192a4:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 80192a8:	4419      	add	r1, r3
 80192aa:	b289      	uxth	r1, r1
 80192ac:	fa0f f881 	sxth.w	r8, r1
 80192b0:	f1b8 0f00 	cmp.w	r8, #0
 80192b4:	dd20      	ble.n	80192f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80192b6:	459c      	cmp	ip, r3
 80192b8:	dd1e      	ble.n	80192f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80192ba:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80192be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80192c2:	4576      	cmp	r6, lr
 80192c4:	bfa8      	it	ge
 80192c6:	463d      	movge	r5, r7
 80192c8:	45c4      	cmp	ip, r8
 80192ca:	bfa8      	it	ge
 80192cc:	4608      	movge	r0, r1
 80192ce:	f8ad 2018 	strh.w	r2, [sp, #24]
 80192d2:	1aad      	subs	r5, r5, r2
 80192d4:	1ac0      	subs	r0, r0, r3
 80192d6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80192da:	f8ad 501c 	strh.w	r5, [sp, #28]
 80192de:	f8ad 001e 	strh.w	r0, [sp, #30]
 80192e2:	4b1f      	ldr	r3, [pc, #124]	; (8019360 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	b953      	cbnz	r3, 80192fe <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 80192e8:	4b1e      	ldr	r3, [pc, #120]	; (8019364 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 80192ea:	2189      	movs	r1, #137	; 0x89
 80192ec:	4a1e      	ldr	r2, [pc, #120]	; (8019368 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 80192ee:	481f      	ldr	r0, [pc, #124]	; (801936c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 80192f0:	f00d fdac 	bl	8026e4c <__assert_func>
 80192f4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80192f6:	e7b9      	b.n	801926c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80192f8:	2300      	movs	r3, #0
 80192fa:	9307      	str	r3, [sp, #28]
 80192fc:	e7f1      	b.n	80192e2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 80192fe:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019306:	429a      	cmp	r2, r3
 8019308:	d026      	beq.n	8019358 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801930a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801930e:	2b00      	cmp	r3, #0
 8019310:	dd22      	ble.n	8019358 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8019312:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019316:	2b00      	cmp	r3, #0
 8019318:	dd1e      	ble.n	8019358 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801931a:	2300      	movs	r3, #0
 801931c:	a908      	add	r1, sp, #32
 801931e:	4620      	mov	r0, r4
 8019320:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8019324:	6823      	ldr	r3, [r4, #0]
 8019326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019328:	4798      	blx	r3
 801932a:	4b11      	ldr	r3, [pc, #68]	; (8019370 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019332:	b10a      	cbz	r2, 8019338 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8019334:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019336:	b900      	cbnz	r0, 801933a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8019338:	6898      	ldr	r0, [r3, #8]
 801933a:	2501      	movs	r5, #1
 801933c:	6801      	ldr	r1, [r0, #0]
 801933e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8019342:	9502      	str	r5, [sp, #8]
 8019344:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8019348:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801934c:	9401      	str	r4, [sp, #4]
 801934e:	ac06      	add	r4, sp, #24
 8019350:	9400      	str	r4, [sp, #0]
 8019352:	688c      	ldr	r4, [r1, #8]
 8019354:	a905      	add	r1, sp, #20
 8019356:	47a0      	blx	r4
 8019358:	b00a      	add	sp, #40	; 0x28
 801935a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801935e:	bf00      	nop
 8019360:	2000b49c 	.word	0x2000b49c
 8019364:	0802b004 	.word	0x0802b004
 8019368:	0802b0d8 	.word	0x0802b0d8
 801936c:	0802b040 	.word	0x0802b040
 8019370:	2000b3d4 	.word	0x2000b3d4

08019374 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8019374:	b570      	push	{r4, r5, r6, lr}
 8019376:	4605      	mov	r5, r0
 8019378:	880b      	ldrh	r3, [r1, #0]
 801937a:	4604      	mov	r4, r0
 801937c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801937e:	f855 3b26 	ldr.w	r3, [r5], #38
 8019382:	4628      	mov	r0, r5
 8019384:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8019386:	f003 fed9 	bl	801d13c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801938a:	b201      	sxth	r1, r0
 801938c:	4620      	mov	r0, r4
 801938e:	47b0      	blx	r6
 8019390:	6823      	ldr	r3, [r4, #0]
 8019392:	4628      	mov	r0, r5
 8019394:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8019396:	f003 ff0b 	bl	801d1b0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801939a:	b201      	sxth	r1, r0
 801939c:	4620      	mov	r0, r4
 801939e:	4633      	mov	r3, r6
 80193a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193a4:	4718      	bx	r3

080193a6 <_ZNK8touchgfx5Image12getSolidRectEv>:
 80193a6:	b510      	push	{r4, lr}
 80193a8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80193ac:	4604      	mov	r4, r0
 80193ae:	2bff      	cmp	r3, #255	; 0xff
 80193b0:	d006      	beq.n	80193c0 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80193b2:	2300      	movs	r3, #0
 80193b4:	8003      	strh	r3, [r0, #0]
 80193b6:	8043      	strh	r3, [r0, #2]
 80193b8:	8083      	strh	r3, [r0, #4]
 80193ba:	80c3      	strh	r3, [r0, #6]
 80193bc:	4620      	mov	r0, r4
 80193be:	bd10      	pop	{r4, pc}
 80193c0:	3126      	adds	r1, #38	; 0x26
 80193c2:	f003 ff2f 	bl	801d224 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80193c6:	e7f9      	b.n	80193bc <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080193c8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80193c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193cc:	4604      	mov	r4, r0
 80193ce:	b088      	sub	sp, #32
 80193d0:	2500      	movs	r5, #0
 80193d2:	460f      	mov	r7, r1
 80193d4:	f854 3b26 	ldr.w	r3, [r4], #38
 80193d8:	a904      	add	r1, sp, #16
 80193da:	4606      	mov	r6, r0
 80193dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80193e2:	4798      	blx	r3
 80193e4:	4620      	mov	r0, r4
 80193e6:	f003 fea9 	bl	801d13c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80193ea:	4680      	mov	r8, r0
 80193ec:	4620      	mov	r0, r4
 80193ee:	f003 fedf 	bl	801d1b0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80193f2:	9506      	str	r5, [sp, #24]
 80193f4:	ad06      	add	r5, sp, #24
 80193f6:	f8ad 001e 	strh.w	r0, [sp, #30]
 80193fa:	4639      	mov	r1, r7
 80193fc:	f8ad 801c 	strh.w	r8, [sp, #28]
 8019400:	4628      	mov	r0, r5
 8019402:	f7fd f8f9 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 8019406:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801940a:	2b00      	cmp	r3, #0
 801940c:	dd19      	ble.n	8019442 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801940e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019412:	2b00      	cmp	r3, #0
 8019414:	dd15      	ble.n	8019442 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8019416:	4b0c      	ldr	r3, [pc, #48]	; (8019448 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801941e:	b10a      	cbz	r2, 8019424 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8019420:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019422:	b900      	cbnz	r0, 8019426 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8019424:	6898      	ldr	r0, [r3, #8]
 8019426:	2701      	movs	r7, #1
 8019428:	6801      	ldr	r1, [r0, #0]
 801942a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801942e:	9702      	str	r7, [sp, #8]
 8019430:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8019434:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019438:	e9cd 5600 	strd	r5, r6, [sp]
 801943c:	688d      	ldr	r5, [r1, #8]
 801943e:	4621      	mov	r1, r4
 8019440:	47a8      	blx	r5
 8019442:	b008      	add	sp, #32
 8019444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019448:	2000b3d4 	.word	0x2000b3d4

0801944c <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
 801944c:	b510      	push	{r4, lr}
 801944e:	4604      	mov	r4, r0
 8019450:	f7ff feeb 	bl	801922a <_ZNK8touchgfx6Button12getSolidRectEv>
 8019454:	4620      	mov	r0, r4
 8019456:	bd10      	pop	{r4, pc}

08019458 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8019458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801945c:	4604      	mov	r4, r0
 801945e:	b08c      	sub	sp, #48	; 0x30
 8019460:	4688      	mov	r8, r1
 8019462:	f7ff fef9 	bl	8019258 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8019466:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801946c:	4293      	cmp	r3, r2
 801946e:	f000 809a 	beq.w	80195a6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 8019472:	4e55      	ldr	r6, [pc, #340]	; (80195c8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8019474:	6832      	ldr	r2, [r6, #0]
 8019476:	b92a      	cbnz	r2, 8019484 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 8019478:	4b54      	ldr	r3, [pc, #336]	; (80195cc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 801947a:	21b1      	movs	r1, #177	; 0xb1
 801947c:	4a54      	ldr	r2, [pc, #336]	; (80195d0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801947e:	4855      	ldr	r0, [pc, #340]	; (80195d4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 8019480:	f00d fce4 	bl	8026e4c <__assert_func>
 8019484:	4d54      	ldr	r5, [pc, #336]	; (80195d8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 8019486:	8829      	ldrh	r1, [r5, #0]
 8019488:	4299      	cmp	r1, r3
 801948a:	d803      	bhi.n	8019494 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 801948c:	4b53      	ldr	r3, [pc, #332]	; (80195dc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 801948e:	21b2      	movs	r1, #178	; 0xb2
 8019490:	4a4f      	ldr	r2, [pc, #316]	; (80195d0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 8019492:	e7f4      	b.n	801947e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 8019494:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019498:	f04f 0c02 	mov.w	ip, #2
 801949c:	4b50      	ldr	r3, [pc, #320]	; (80195e0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 801949e:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80194a8:	f1be 0f01 	cmp.w	lr, #1
 80194ac:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80194b0:	f04f 0300 	mov.w	r3, #0
 80194b4:	b208      	sxth	r0, r1
 80194b6:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80194ba:	9303      	str	r3, [sp, #12]
 80194bc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80194c0:	d074      	beq.n	80195ac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 80194c2:	f1be 0f03 	cmp.w	lr, #3
 80194c6:	d071      	beq.n	80195ac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 80194c8:	1a52      	subs	r2, r2, r1
 80194ca:	f8ad 3010 	strh.w	r3, [sp, #16]
 80194ce:	f8ad 0012 	strh.w	r0, [sp, #18]
 80194d2:	fb92 f2fc 	sdiv	r2, r2, ip
 80194d6:	f8ad 200e 	strh.w	r2, [sp, #14]
 80194da:	f10d 090c 	add.w	r9, sp, #12
 80194de:	f10d 0a14 	add.w	sl, sp, #20
 80194e2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80194e6:	e88a 0003 	stmia.w	sl, {r0, r1}
 80194ea:	4641      	mov	r1, r8
 80194ec:	4650      	mov	r0, sl
 80194ee:	f7fd f883 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 80194f2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	dd55      	ble.n	80195a6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 80194fa:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80194fe:	2b00      	cmp	r3, #0
 8019500:	dd51      	ble.n	80195a6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 8019502:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8019506:	4649      	mov	r1, r9
 8019508:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801950c:	4620      	mov	r0, r4
 801950e:	1a9b      	subs	r3, r3, r2
 8019510:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019514:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019518:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801951c:	1a9b      	subs	r3, r3, r2
 801951e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019522:	6823      	ldr	r3, [r4, #0]
 8019524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019526:	4798      	blx	r3
 8019528:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801952c:	2b00      	cmp	r3, #0
 801952e:	d047      	beq.n	80195c0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 8019530:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8019534:	6833      	ldr	r3, [r6, #0]
 8019536:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
 801953a:	2b00      	cmp	r3, #0
 801953c:	d09c      	beq.n	8019478 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 801953e:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8019540:	8828      	ldrh	r0, [r5, #0]
 8019542:	4288      	cmp	r0, r1
 8019544:	d9a2      	bls.n	801948c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 8019546:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801954a:	6812      	ldr	r2, [r2, #0]
 801954c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8019550:	785b      	ldrb	r3, [r3, #1]
 8019552:	9209      	str	r2, [sp, #36]	; 0x24
 8019554:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8019558:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801955c:	9707      	str	r7, [sp, #28]
 801955e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8019562:	2300      	movs	r3, #0
 8019564:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8019568:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801956c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8019570:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8019574:	4b1b      	ldr	r3, [pc, #108]	; (80195e4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 8019576:	f88d 5020 	strb.w	r5, [sp, #32]
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8019580:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019584:	b10a      	cbz	r2, 801958a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 8019586:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019588:	b904      	cbnz	r4, 801958c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 801958a:	689c      	ldr	r4, [r3, #8]
 801958c:	4b16      	ldr	r3, [pc, #88]	; (80195e8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 801958e:	6818      	ldr	r0, [r3, #0]
 8019590:	f7fa f968 	bl	8013864 <_ZNK8touchgfx5Texts7getTextEt>
 8019594:	ab07      	add	r3, sp, #28
 8019596:	9001      	str	r0, [sp, #4]
 8019598:	4620      	mov	r0, r4
 801959a:	9300      	str	r3, [sp, #0]
 801959c:	4653      	mov	r3, sl
 801959e:	e899 0006 	ldmia.w	r9, {r1, r2}
 80195a2:	f7fa f8f0 	bl	8013786 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80195a6:	b00c      	add	sp, #48	; 0x30
 80195a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195ac:	1a5b      	subs	r3, r3, r1
 80195ae:	f8ad 0010 	strh.w	r0, [sp, #16]
 80195b2:	f8ad 2012 	strh.w	r2, [sp, #18]
 80195b6:	fb93 f3fc 	sdiv	r3, r3, ip
 80195ba:	f8ad 300c 	strh.w	r3, [sp, #12]
 80195be:	e78c      	b.n	80194da <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 80195c0:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80195c4:	e7b6      	b.n	8019534 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 80195c6:	bf00      	nop
 80195c8:	2000b464 	.word	0x2000b464
 80195cc:	0802ae30 	.word	0x0802ae30
 80195d0:	0802b1e8 	.word	0x0802b1e8
 80195d4:	0802ae72 	.word	0x0802ae72
 80195d8:	2000b468 	.word	0x2000b468
 80195dc:	0802ae9b 	.word	0x0802ae9b
 80195e0:	2000b46c 	.word	0x2000b46c
 80195e4:	2000b3d4 	.word	0x2000b3d4
 80195e8:	2000b470 	.word	0x2000b470

080195ec <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 80195ec:	2101      	movs	r1, #1
 80195ee:	2200      	movs	r2, #0
 80195f0:	b510      	push	{r4, lr}
 80195f2:	4c12      	ldr	r4, [pc, #72]	; (801963c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x50>)
 80195f4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80195f8:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80195fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019600:	6004      	str	r4, [r0, #0]
 8019602:	4c0f      	ldr	r4, [pc, #60]	; (8019640 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8019604:	8082      	strh	r2, [r0, #4]
 8019606:	80c2      	strh	r2, [r0, #6]
 8019608:	8102      	strh	r2, [r0, #8]
 801960a:	8142      	strh	r2, [r0, #10]
 801960c:	8182      	strh	r2, [r0, #12]
 801960e:	81c2      	strh	r2, [r0, #14]
 8019610:	8202      	strh	r2, [r0, #16]
 8019612:	8242      	strh	r2, [r0, #18]
 8019614:	61c2      	str	r2, [r0, #28]
 8019616:	6282      	str	r2, [r0, #40]	; 0x28
 8019618:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 801961c:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801961e:	8601      	strh	r1, [r0, #48]	; 0x30
 8019620:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8019624:	6344      	str	r4, [r0, #52]	; 0x34
 8019626:	8701      	strh	r1, [r0, #56]	; 0x38
 8019628:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801962c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 8019630:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019634:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 8019638:	bd10      	pop	{r4, pc}
 801963a:	bf00      	nop
 801963c:	0802b180 	.word	0x0802b180
 8019640:	080286f8 	.word	0x080286f8

08019644 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8019644:	4b02      	ldr	r3, [pc, #8]	; (8019650 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8019646:	6018      	str	r0, [r3, #0]
 8019648:	4b02      	ldr	r3, [pc, #8]	; (8019654 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801964a:	6019      	str	r1, [r3, #0]
 801964c:	4770      	bx	lr
 801964e:	bf00      	nop
 8019650:	2000b3dc 	.word	0x2000b3dc
 8019654:	2000b3f0 	.word	0x2000b3f0

08019658 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8019658:	b538      	push	{r3, r4, r5, lr}
 801965a:	4c2b      	ldr	r4, [pc, #172]	; (8019708 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 801965c:	4b2b      	ldr	r3, [pc, #172]	; (801970c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801965e:	6821      	ldr	r1, [r4, #0]
 8019660:	681a      	ldr	r2, [r3, #0]
 8019662:	4281      	cmp	r1, r0
 8019664:	4d2a      	ldr	r5, [pc, #168]	; (8019710 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8019666:	492b      	ldr	r1, [pc, #172]	; (8019714 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8019668:	d108      	bne.n	801967c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801966a:	682b      	ldr	r3, [r5, #0]
 801966c:	4293      	cmp	r3, r2
 801966e:	d105      	bne.n	801967c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8019670:	6808      	ldr	r0, [r1, #0]
 8019672:	280f      	cmp	r0, #15
 8019674:	bf94      	ite	ls
 8019676:	2000      	movls	r0, #0
 8019678:	2001      	movhi	r0, #1
 801967a:	bd38      	pop	{r3, r4, r5, pc}
 801967c:	4b26      	ldr	r3, [pc, #152]	; (8019718 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801967e:	6020      	str	r0, [r4, #0]
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	602a      	str	r2, [r5, #0]
 8019684:	4298      	cmp	r0, r3
 8019686:	d905      	bls.n	8019694 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8019688:	4b24      	ldr	r3, [pc, #144]	; (801971c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801968a:	2137      	movs	r1, #55	; 0x37
 801968c:	4a24      	ldr	r2, [pc, #144]	; (8019720 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801968e:	4825      	ldr	r0, [pc, #148]	; (8019724 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8019690:	f00d fbdc 	bl	8026e4c <__assert_func>
 8019694:	f010 0403 	ands.w	r4, r0, #3
 8019698:	bf1f      	itttt	ne
 801969a:	f1c4 0504 	rsbne	r5, r4, #4
 801969e:	3b04      	subne	r3, #4
 80196a0:	1952      	addne	r2, r2, r5
 80196a2:	191b      	addne	r3, r3, r4
 80196a4:	4d20      	ldr	r5, [pc, #128]	; (8019728 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 80196a6:	4402      	add	r2, r0
 80196a8:	1a1b      	subs	r3, r3, r0
 80196aa:	3001      	adds	r0, #1
 80196ac:	602a      	str	r2, [r5, #0]
 80196ae:	f020 0401 	bic.w	r4, r0, #1
 80196b2:	42a3      	cmp	r3, r4
 80196b4:	d203      	bcs.n	80196be <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 80196b6:	4b19      	ldr	r3, [pc, #100]	; (801971c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80196b8:	214a      	movs	r1, #74	; 0x4a
 80196ba:	4a19      	ldr	r2, [pc, #100]	; (8019720 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80196bc:	e7e7      	b.n	801968e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80196be:	f010 0002 	ands.w	r0, r0, #2
 80196c2:	bf1f      	itttt	ne
 80196c4:	f1c0 0504 	rsbne	r5, r0, #4
 80196c8:	1952      	addne	r2, r2, r5
 80196ca:	1f05      	subne	r5, r0, #4
 80196cc:	195b      	addne	r3, r3, r5
 80196ce:	4422      	add	r2, r4
 80196d0:	4d16      	ldr	r5, [pc, #88]	; (801972c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 80196d2:	1b1b      	subs	r3, r3, r4
 80196d4:	602a      	str	r2, [r5, #0]
 80196d6:	429c      	cmp	r4, r3
 80196d8:	d903      	bls.n	80196e2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 80196da:	4b10      	ldr	r3, [pc, #64]	; (801971c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80196dc:	215d      	movs	r1, #93	; 0x5d
 80196de:	4a10      	ldr	r2, [pc, #64]	; (8019720 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80196e0:	e7d5      	b.n	801968e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80196e2:	b120      	cbz	r0, 80196ee <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 80196e4:	f1c0 0504 	rsb	r5, r0, #4
 80196e8:	3804      	subs	r0, #4
 80196ea:	442a      	add	r2, r5
 80196ec:	4403      	add	r3, r0
 80196ee:	1b1b      	subs	r3, r3, r4
 80196f0:	4422      	add	r2, r4
 80196f2:	480f      	ldr	r0, [pc, #60]	; (8019730 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 80196f4:	2b0f      	cmp	r3, #15
 80196f6:	600b      	str	r3, [r1, #0]
 80196f8:	6002      	str	r2, [r0, #0]
 80196fa:	d803      	bhi.n	8019704 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 80196fc:	4b0d      	ldr	r3, [pc, #52]	; (8019734 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 80196fe:	2170      	movs	r1, #112	; 0x70
 8019700:	4a07      	ldr	r2, [pc, #28]	; (8019720 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8019702:	e7c4      	b.n	801968e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8019704:	2001      	movs	r0, #1
 8019706:	e7b8      	b.n	801967a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8019708:	2000b3e4 	.word	0x2000b3e4
 801970c:	2000b3dc 	.word	0x2000b3dc
 8019710:	2000b3ec 	.word	0x2000b3ec
 8019714:	2000b3f4 	.word	0x2000b3f4
 8019718:	2000b3f0 	.word	0x2000b3f0
 801971c:	0802b216 	.word	0x0802b216
 8019720:	0802b2de 	.word	0x0802b2de
 8019724:	0802b24f 	.word	0x0802b24f
 8019728:	2000b3f8 	.word	0x2000b3f8
 801972c:	2000b3e8 	.word	0x2000b3e8
 8019730:	2000b3e0 	.word	0x2000b3e0
 8019734:	0802b299 	.word	0x0802b299

08019738 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8019738:	4b04      	ldr	r3, [pc, #16]	; (801974c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801973a:	6818      	ldr	r0, [r3, #0]
 801973c:	b120      	cbz	r0, 8019748 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801973e:	4b04      	ldr	r3, [pc, #16]	; (8019750 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8019740:	6818      	ldr	r0, [r3, #0]
 8019742:	3000      	adds	r0, #0
 8019744:	bf18      	it	ne
 8019746:	2001      	movne	r0, #1
 8019748:	4770      	bx	lr
 801974a:	bf00      	nop
 801974c:	2000b3dc 	.word	0x2000b3dc
 8019750:	2000b3f0 	.word	0x2000b3f0

08019754 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8019754:	4b01      	ldr	r3, [pc, #4]	; (801975c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8019756:	6818      	ldr	r0, [r3, #0]
 8019758:	4770      	bx	lr
 801975a:	bf00      	nop
 801975c:	2000b3e4 	.word	0x2000b3e4

08019760 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8019760:	4b01      	ldr	r3, [pc, #4]	; (8019768 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8019762:	6818      	ldr	r0, [r3, #0]
 8019764:	4770      	bx	lr
 8019766:	bf00      	nop
 8019768:	2000b3ec 	.word	0x2000b3ec

0801976c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 801976c:	4b01      	ldr	r3, [pc, #4]	; (8019774 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801976e:	6818      	ldr	r0, [r3, #0]
 8019770:	4770      	bx	lr
 8019772:	bf00      	nop
 8019774:	2000b3f8 	.word	0x2000b3f8

08019778 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8019778:	4b01      	ldr	r3, [pc, #4]	; (8019780 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 801977a:	6818      	ldr	r0, [r3, #0]
 801977c:	4770      	bx	lr
 801977e:	bf00      	nop
 8019780:	2000b3e8 	.word	0x2000b3e8

08019784 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8019784:	4b01      	ldr	r3, [pc, #4]	; (801978c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8019786:	6818      	ldr	r0, [r3, #0]
 8019788:	4770      	bx	lr
 801978a:	bf00      	nop
 801978c:	2000b3e0 	.word	0x2000b3e0

08019790 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8019790:	4b01      	ldr	r3, [pc, #4]	; (8019798 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8019792:	6818      	ldr	r0, [r3, #0]
 8019794:	4770      	bx	lr
 8019796:	bf00      	nop
 8019798:	2000b3f4 	.word	0x2000b3f4

0801979c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801979c:	2000      	movs	r0, #0
 801979e:	4770      	bx	lr

080197a0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80197a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197a4:	b091      	sub	sp, #68	; 0x44
 80197a6:	4699      	mov	r9, r3
 80197a8:	4617      	mov	r7, r2
 80197aa:	2500      	movs	r5, #0
 80197ac:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 80197b0:	4680      	mov	r8, r0
 80197b2:	a80e      	add	r0, sp, #56	; 0x38
 80197b4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80197b6:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 80197ba:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 80197be:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 80197c2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80197c6:	910d      	str	r1, [sp, #52]	; 0x34
 80197c8:	950e      	str	r5, [sp, #56]	; 0x38
 80197ca:	f001 f9d1 	bl	801ab70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80197ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80197d0:	f8d9 6000 	ldr.w	r6, [r9]
 80197d4:	6818      	ldr	r0, [r3, #0]
 80197d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80197d8:	f9b4 b000 	ldrsh.w	fp, [r4]
 80197dc:	1b80      	subs	r0, r0, r6
 80197de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80197e2:	eb02 0c06 	add.w	ip, r2, r6
 80197e6:	ebab 0e0c 	sub.w	lr, fp, ip
 80197ea:	4570      	cmp	r0, lr
 80197ec:	f340 80bc 	ble.w	8019968 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 80197f0:	88a1      	ldrh	r1, [r4, #4]
 80197f2:	4459      	add	r1, fp
 80197f4:	b209      	sxth	r1, r1
 80197f6:	458c      	cmp	ip, r1
 80197f8:	f300 80b6 	bgt.w	8019968 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 80197fc:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8019800:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8019804:	4283      	cmp	r3, r0
 8019806:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801980a:	edd9 6a07 	vldr	s13, [r9, #28]
 801980e:	bfa8      	it	ge
 8019810:	4603      	movge	r3, r0
 8019812:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8019816:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801981a:	45e3      	cmp	fp, ip
 801981c:	ee07 3a90 	vmov	s15, r3
 8019820:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8019824:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019828:	ee25 4a04 	vmul.f32	s8, s10, s8
 801982c:	ee65 4a24 	vmul.f32	s9, s10, s9
 8019830:	ee25 5a27 	vmul.f32	s10, s10, s15
 8019834:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019838:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801983c:	ee32 1a05 	vadd.f32	s2, s4, s10
 8019840:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019844:	ee36 0a84 	vadd.f32	s0, s13, s8
 8019848:	ee61 1a87 	vmul.f32	s3, s3, s14
 801984c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019850:	f340 808d 	ble.w	801996e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 8019854:	fb9e f5f3 	sdiv	r5, lr, r3
 8019858:	ee07 5a10 	vmov	s14, r5
 801985c:	2d00      	cmp	r5, #0
 801985e:	fb03 e415 	mls	r4, r3, r5, lr
 8019862:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019866:	eea7 0a04 	vfma.f32	s0, s14, s8
 801986a:	eee7 0a24 	vfma.f32	s1, s14, s9
 801986e:	eea7 1a05 	vfma.f32	s2, s14, s10
 8019872:	dd12      	ble.n	801989a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 8019874:	ee70 6a44 	vsub.f32	s13, s0, s8
 8019878:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801987c:	ee31 2a45 	vsub.f32	s4, s2, s10
 8019880:	eef5 6a40 	vcmp.f32	s13, #0.0
 8019884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019888:	bf14      	ite	ne
 801988a:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801988e:	eeb0 7a67 	vmoveq.f32	s14, s15
 8019892:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019896:	ee22 2a07 	vmul.f32	s4, s4, s14
 801989a:	fb05 f703 	mul.w	r7, r5, r3
 801989e:	1bc0      	subs	r0, r0, r7
 80198a0:	443e      	add	r6, r7
 80198a2:	1997      	adds	r7, r2, r6
 80198a4:	4407      	add	r7, r0
 80198a6:	42b9      	cmp	r1, r7
 80198a8:	bfbc      	itt	lt
 80198aa:	1a88      	sublt	r0, r1, r2
 80198ac:	1b80      	sublt	r0, r0, r6
 80198ae:	2800      	cmp	r0, #0
 80198b0:	dd5a      	ble.n	8019968 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 80198b2:	fb90 f1f3 	sdiv	r1, r0, r3
 80198b6:	fb03 0211 	mls	r2, r3, r1, r0
 80198ba:	b90a      	cbnz	r2, 80198c0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 80198bc:	3901      	subs	r1, #1
 80198be:	461a      	mov	r2, r3
 80198c0:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80198c4:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 80198c8:	44a4      	add	ip, r4
 80198ca:	2900      	cmp	r1, #0
 80198cc:	bfcc      	ite	gt
 80198ce:	469e      	movgt	lr, r3
 80198d0:	4696      	movle	lr, r2
 80198d2:	fb03 c505 	mla	r5, r3, r5, ip
 80198d6:	eef0 6a42 	vmov.f32	s13, s4
 80198da:	eeb0 7a61 	vmov.f32	s14, s3
 80198de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80198e2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80198e6:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80198ea:	ee21 3a23 	vmul.f32	s6, s2, s7
 80198ee:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80198f2:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80198f6:	ee17 0a90 	vmov	r0, s15
 80198fa:	ee73 7a42 	vsub.f32	s15, s6, s4
 80198fe:	fb90 f6f3 	sdiv	r6, r0, r3
 8019902:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019906:	ee17 0a90 	vmov	r0, s15
 801990a:	fb90 f7f3 	sdiv	r7, r0, r3
 801990e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019912:	f8d0 8000 	ldr.w	r8, [r0]
 8019916:	900c      	str	r0, [sp, #48]	; 0x30
 8019918:	981c      	ldr	r0, [sp, #112]	; 0x70
 801991a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801991e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8019922:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8019926:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801992a:	f8cd a020 	str.w	sl, [sp, #32]
 801992e:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8019932:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019934:	f8d9 9014 	ldr.w	r9, [r9, #20]
 8019938:	9603      	str	r6, [sp, #12]
 801993a:	44ca      	add	sl, r9
 801993c:	9506      	str	r5, [sp, #24]
 801993e:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8019942:	ee16 0a90 	vmov	r0, s13
 8019946:	f8cd a01c 	str.w	sl, [sp, #28]
 801994a:	fb07 0704 	mla	r7, r7, r4, r0
 801994e:	ee17 0a10 	vmov	r0, s14
 8019952:	fb06 0604 	mla	r6, r6, r4, r0
 8019956:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019958:	9702      	str	r7, [sp, #8]
 801995a:	e9cd 3600 	strd	r3, r6, [sp]
 801995e:	ebae 0304 	sub.w	r3, lr, r4
 8019962:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8019966:	47a8      	blx	r5
 8019968:	b011      	add	sp, #68	; 0x44
 801996a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801996e:	462c      	mov	r4, r5
 8019970:	e797      	b.n	80198a2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

08019972 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8019972:	b570      	push	{r4, r5, r6, lr}
 8019974:	4604      	mov	r4, r0
 8019976:	2500      	movs	r5, #0
 8019978:	9804      	ldr	r0, [sp, #16]
 801997a:	7223      	strb	r3, [r4, #8]
 801997c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019980:	8025      	strh	r5, [r4, #0]
 8019982:	6061      	str	r1, [r4, #4]
 8019984:	7263      	strb	r3, [r4, #9]
 8019986:	60e0      	str	r0, [r4, #12]
 8019988:	8222      	strh	r2, [r4, #16]
 801998a:	8265      	strh	r5, [r4, #18]
 801998c:	82a5      	strh	r5, [r4, #20]
 801998e:	82e5      	strh	r5, [r4, #22]
 8019990:	8325      	strh	r5, [r4, #24]
 8019992:	8365      	strh	r5, [r4, #26]
 8019994:	83a5      	strh	r5, [r4, #28]
 8019996:	77a5      	strb	r5, [r4, #30]
 8019998:	6803      	ldr	r3, [r0, #0]
 801999a:	695b      	ldr	r3, [r3, #20]
 801999c:	4798      	blx	r3
 801999e:	4606      	mov	r6, r0
 80199a0:	b1f8      	cbz	r0, 80199e2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80199a2:	68e0      	ldr	r0, [r4, #12]
 80199a4:	4631      	mov	r1, r6
 80199a6:	6803      	ldr	r3, [r0, #0]
 80199a8:	68db      	ldr	r3, [r3, #12]
 80199aa:	4798      	blx	r3
 80199ac:	7b43      	ldrb	r3, [r0, #13]
 80199ae:	7a82      	ldrb	r2, [r0, #10]
 80199b0:	4605      	mov	r5, r0
 80199b2:	005b      	lsls	r3, r3, #1
 80199b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80199b8:	4313      	orrs	r3, r2
 80199ba:	83a3      	strh	r3, [r4, #28]
 80199bc:	7a63      	ldrb	r3, [r4, #9]
 80199be:	2b04      	cmp	r3, #4
 80199c0:	d10f      	bne.n	80199e2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80199c2:	68e0      	ldr	r0, [r4, #12]
 80199c4:	462a      	mov	r2, r5
 80199c6:	4631      	mov	r1, r6
 80199c8:	6803      	ldr	r3, [r0, #0]
 80199ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199cc:	4798      	blx	r3
 80199ce:	7b6b      	ldrb	r3, [r5, #13]
 80199d0:	005b      	lsls	r3, r3, #1
 80199d2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80199d6:	7aab      	ldrb	r3, [r5, #10]
 80199d8:	4313      	orrs	r3, r2
 80199da:	4418      	add	r0, r3
 80199dc:	8ba3      	ldrh	r3, [r4, #28]
 80199de:	4418      	add	r0, r3
 80199e0:	83a0      	strh	r0, [r4, #28]
 80199e2:	4620      	mov	r0, r4
 80199e4:	bd70      	pop	{r4, r5, r6, pc}

080199e6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80199e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199ea:	2400      	movs	r4, #0
 80199ec:	b085      	sub	sp, #20
 80199ee:	4681      	mov	r9, r0
 80199f0:	4688      	mov	r8, r1
 80199f2:	4692      	mov	sl, r2
 80199f4:	469b      	mov	fp, r3
 80199f6:	4627      	mov	r7, r4
 80199f8:	4625      	mov	r5, r4
 80199fa:	4626      	mov	r6, r4
 80199fc:	4554      	cmp	r4, sl
 80199fe:	da2a      	bge.n	8019a56 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019a00:	2300      	movs	r3, #0
 8019a02:	9303      	str	r3, [sp, #12]
 8019a04:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019a08:	429d      	cmp	r5, r3
 8019a0a:	d004      	beq.n	8019a16 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8019a0c:	f242 030b 	movw	r3, #8203	; 0x200b
 8019a10:	429d      	cmp	r5, r3
 8019a12:	bf18      	it	ne
 8019a14:	462f      	movne	r7, r5
 8019a16:	ab03      	add	r3, sp, #12
 8019a18:	4642      	mov	r2, r8
 8019a1a:	4659      	mov	r1, fp
 8019a1c:	4648      	mov	r0, r9
 8019a1e:	f002 fe6f 	bl	801c700 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019a22:	4605      	mov	r5, r0
 8019a24:	b1b8      	cbz	r0, 8019a56 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019a26:	280a      	cmp	r0, #10
 8019a28:	d015      	beq.n	8019a56 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019a2a:	9a03      	ldr	r2, [sp, #12]
 8019a2c:	b18a      	cbz	r2, 8019a52 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8019a2e:	7b50      	ldrb	r0, [r2, #13]
 8019a30:	4639      	mov	r1, r7
 8019a32:	7a93      	ldrb	r3, [r2, #10]
 8019a34:	0040      	lsls	r0, r0, #1
 8019a36:	8895      	ldrh	r5, [r2, #4]
 8019a38:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019a3c:	4303      	orrs	r3, r0
 8019a3e:	4640      	mov	r0, r8
 8019a40:	9301      	str	r3, [sp, #4]
 8019a42:	f8d8 3000 	ldr.w	r3, [r8]
 8019a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a48:	4798      	blx	r3
 8019a4a:	9b01      	ldr	r3, [sp, #4]
 8019a4c:	4418      	add	r0, r3
 8019a4e:	4406      	add	r6, r0
 8019a50:	b2b6      	uxth	r6, r6
 8019a52:	3401      	adds	r4, #1
 8019a54:	e7d2      	b.n	80199fc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8019a56:	4630      	mov	r0, r6
 8019a58:	b005      	add	sp, #20
 8019a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019a5e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8019a5e:	2a02      	cmp	r2, #2
 8019a60:	b530      	push	{r4, r5, lr}
 8019a62:	d011      	beq.n	8019a88 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8019a64:	2a03      	cmp	r2, #3
 8019a66:	d01c      	beq.n	8019aa2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8019a68:	2a01      	cmp	r2, #1
 8019a6a:	d10c      	bne.n	8019a86 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019a6c:	888b      	ldrh	r3, [r1, #4]
 8019a6e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8019a72:	8801      	ldrh	r1, [r0, #0]
 8019a74:	1a9b      	subs	r3, r3, r2
 8019a76:	8844      	ldrh	r4, [r0, #2]
 8019a78:	1a5b      	subs	r3, r3, r1
 8019a7a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019a7e:	8004      	strh	r4, [r0, #0]
 8019a80:	8043      	strh	r3, [r0, #2]
 8019a82:	8081      	strh	r1, [r0, #4]
 8019a84:	80c2      	strh	r2, [r0, #6]
 8019a86:	bd30      	pop	{r4, r5, pc}
 8019a88:	88cb      	ldrh	r3, [r1, #6]
 8019a8a:	88c2      	ldrh	r2, [r0, #6]
 8019a8c:	1a9b      	subs	r3, r3, r2
 8019a8e:	8842      	ldrh	r2, [r0, #2]
 8019a90:	1a9b      	subs	r3, r3, r2
 8019a92:	888a      	ldrh	r2, [r1, #4]
 8019a94:	8881      	ldrh	r1, [r0, #4]
 8019a96:	8043      	strh	r3, [r0, #2]
 8019a98:	1a52      	subs	r2, r2, r1
 8019a9a:	8801      	ldrh	r1, [r0, #0]
 8019a9c:	1a52      	subs	r2, r2, r1
 8019a9e:	8002      	strh	r2, [r0, #0]
 8019aa0:	e7f1      	b.n	8019a86 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019aa2:	88cb      	ldrh	r3, [r1, #6]
 8019aa4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019aa8:	8841      	ldrh	r1, [r0, #2]
 8019aaa:	1a9b      	subs	r3, r3, r2
 8019aac:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019ab0:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019ab4:	1a5b      	subs	r3, r3, r1
 8019ab6:	8045      	strh	r5, [r0, #2]
 8019ab8:	8082      	strh	r2, [r0, #4]
 8019aba:	8003      	strh	r3, [r0, #0]
 8019abc:	80c4      	strh	r4, [r0, #6]
 8019abe:	e7e2      	b.n	8019a86 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08019ac0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ac4:	b09f      	sub	sp, #124	; 0x7c
 8019ac6:	9116      	str	r1, [sp, #88]	; 0x58
 8019ac8:	9317      	str	r3, [sp, #92]	; 0x5c
 8019aca:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019acc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019ace:	8809      	ldrh	r1, [r1, #0]
 8019ad0:	889b      	ldrh	r3, [r3, #4]
 8019ad2:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8019ad6:	440b      	add	r3, r1
 8019ad8:	9212      	str	r2, [sp, #72]	; 0x48
 8019ada:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8019ade:	b21b      	sxth	r3, r3
 8019ae0:	9011      	str	r0, [sp, #68]	; 0x44
 8019ae2:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8019ae6:	9310      	str	r3, [sp, #64]	; 0x40
 8019ae8:	f8d8 3000 	ldr.w	r3, [r8]
 8019aec:	7a59      	ldrb	r1, [r3, #9]
 8019aee:	7a1b      	ldrb	r3, [r3, #8]
 8019af0:	9114      	str	r1, [sp, #80]	; 0x50
 8019af2:	9315      	str	r3, [sp, #84]	; 0x54
 8019af4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019af6:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019afa:	2a00      	cmp	r2, #0
 8019afc:	d067      	beq.n	8019bce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8019afe:	f898 3010 	ldrb.w	r3, [r8, #16]
 8019b02:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019b04:	2b04      	cmp	r3, #4
 8019b06:	bf14      	ite	ne
 8019b08:	2301      	movne	r3, #1
 8019b0a:	2302      	moveq	r3, #2
 8019b0c:	4413      	add	r3, r2
 8019b0e:	f04f 0900 	mov.w	r9, #0
 8019b12:	930f      	str	r3, [sp, #60]	; 0x3c
 8019b14:	464c      	mov	r4, r9
 8019b16:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019b1a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8019b1e:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8019b22:	4293      	cmp	r3, r2
 8019b24:	f280 808c 	bge.w	8019c40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019b28:	2300      	movs	r3, #0
 8019b2a:	931c      	str	r3, [sp, #112]	; 0x70
 8019b2c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019b30:	429c      	cmp	r4, r3
 8019b32:	d006      	beq.n	8019b42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8019b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019b36:	f242 020b 	movw	r2, #8203	; 0x200b
 8019b3a:	4294      	cmp	r4, r2
 8019b3c:	bf18      	it	ne
 8019b3e:	4623      	movne	r3, r4
 8019b40:	930d      	str	r3, [sp, #52]	; 0x34
 8019b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019b44:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8019b46:	f8d8 2000 	ldr.w	r2, [r8]
 8019b4a:	428b      	cmp	r3, r1
 8019b4c:	db41      	blt.n	8019bd2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8019b4e:	6813      	ldr	r3, [r2, #0]
 8019b50:	4610      	mov	r0, r2
 8019b52:	695b      	ldr	r3, [r3, #20]
 8019b54:	4798      	blx	r3
 8019b56:	4604      	mov	r4, r0
 8019b58:	f8d8 0000 	ldr.w	r0, [r8]
 8019b5c:	aa1d      	add	r2, sp, #116	; 0x74
 8019b5e:	4621      	mov	r1, r4
 8019b60:	6803      	ldr	r3, [r0, #0]
 8019b62:	689e      	ldr	r6, [r3, #8]
 8019b64:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019b68:	47b0      	blx	r6
 8019b6a:	901c      	str	r0, [sp, #112]	; 0x70
 8019b6c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019b70:	429c      	cmp	r4, r3
 8019b72:	f000 80ea 	beq.w	8019d4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019b76:	f242 030b 	movw	r3, #8203	; 0x200b
 8019b7a:	429c      	cmp	r4, r3
 8019b7c:	f000 80e5 	beq.w	8019d4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019b80:	2c00      	cmp	r4, #0
 8019b82:	f000 80f7 	beq.w	8019d74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8019b86:	2c0a      	cmp	r4, #10
 8019b88:	d060      	beq.n	8019c4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8019b8a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019b8c:	b36a      	cbz	r2, 8019bea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8019b8e:	8894      	ldrh	r4, [r2, #4]
 8019b90:	f1bb 0f00 	cmp.w	fp, #0
 8019b94:	d03b      	beq.n	8019c0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8019b96:	f892 900d 	ldrb.w	r9, [r2, #13]
 8019b9a:	f1bb 0f01 	cmp.w	fp, #1
 8019b9e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019ba2:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8019ba6:	f892 900a 	ldrb.w	r9, [r2, #10]
 8019baa:	ea49 0903 	orr.w	r9, r9, r3
 8019bae:	d134      	bne.n	8019c1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8019bb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019bb2:	eba5 0509 	sub.w	r5, r5, r9
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d14f      	bne.n	8019c5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019bba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019bbc:	eb09 0305 	add.w	r3, r9, r5
 8019bc0:	4413      	add	r3, r2
 8019bc2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019bc4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019bc8:	4293      	cmp	r3, r2
 8019bca:	da51      	bge.n	8019c70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8019bcc:	e038      	b.n	8019c40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019bce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019bd0:	e79d      	b.n	8019b0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8019bd2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019bd6:	4659      	mov	r1, fp
 8019bd8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019bda:	9301      	str	r3, [sp, #4]
 8019bdc:	ab1d      	add	r3, sp, #116	; 0x74
 8019bde:	9300      	str	r3, [sp, #0]
 8019be0:	ab1c      	add	r3, sp, #112	; 0x70
 8019be2:	f002 fde1 	bl	801c7a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019be6:	4604      	mov	r4, r0
 8019be8:	e7c0      	b.n	8019b6c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8019bea:	f8d8 0000 	ldr.w	r0, [r8]
 8019bee:	6803      	ldr	r3, [r0, #0]
 8019bf0:	691b      	ldr	r3, [r3, #16]
 8019bf2:	4798      	blx	r3
 8019bf4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019bf8:	4298      	cmp	r0, r3
 8019bfa:	f000 80a6 	beq.w	8019d4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019bfe:	f242 030b 	movw	r3, #8203	; 0x200b
 8019c02:	4298      	cmp	r0, r3
 8019c04:	f000 80a1 	beq.w	8019d4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019c08:	f1bb 0f00 	cmp.w	fp, #0
 8019c0c:	d100      	bne.n	8019c10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8019c0e:	444d      	add	r5, r9
 8019c10:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019c12:	2a00      	cmp	r2, #0
 8019c14:	d1bf      	bne.n	8019b96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8019c16:	4691      	mov	r9, r2
 8019c18:	e097      	b.n	8019d4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	f000 80ab 	beq.w	8019d78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8019c22:	f1bb 0f00 	cmp.w	fp, #0
 8019c26:	d118      	bne.n	8019c5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019c28:	f8d8 0000 	ldr.w	r0, [r8]
 8019c2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019c2e:	6803      	ldr	r3, [r0, #0]
 8019c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c32:	4798      	blx	r3
 8019c34:	4405      	add	r5, r0
 8019c36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019c38:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019c3a:	1aeb      	subs	r3, r5, r3
 8019c3c:	4293      	cmp	r3, r2
 8019c3e:	dd17      	ble.n	8019c70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8019c40:	2c00      	cmp	r4, #0
 8019c42:	f000 8097 	beq.w	8019d74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8019c46:	2c0a      	cmp	r4, #10
 8019c48:	f040 8085 	bne.w	8019d56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8019c4c:	240a      	movs	r4, #10
 8019c4e:	fab4 f084 	clz	r0, r4
 8019c52:	0940      	lsrs	r0, r0, #5
 8019c54:	b01f      	add	sp, #124	; 0x7c
 8019c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c5a:	f8d8 0000 	ldr.w	r0, [r8]
 8019c5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019c60:	6803      	ldr	r3, [r0, #0]
 8019c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c64:	4798      	blx	r3
 8019c66:	f1bb 0f01 	cmp.w	fp, #1
 8019c6a:	eba5 0500 	sub.w	r5, r5, r0
 8019c6e:	d0a4      	beq.n	8019bba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8019c70:	981c      	ldr	r0, [sp, #112]	; 0x70
 8019c72:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019c74:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8019c78:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019c7c:	7b43      	ldrb	r3, [r0, #13]
 8019c7e:	4429      	add	r1, r5
 8019c80:	015b      	lsls	r3, r3, #5
 8019c82:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019c86:	7983      	ldrb	r3, [r0, #6]
 8019c88:	4313      	orrs	r3, r2
 8019c8a:	440b      	add	r3, r1
 8019c8c:	42b3      	cmp	r3, r6
 8019c8e:	db5c      	blt.n	8019d4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019c90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019c92:	4299      	cmp	r1, r3
 8019c94:	da59      	bge.n	8019d4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019c96:	f8d8 0000 	ldr.w	r0, [r8]
 8019c9a:	42ae      	cmp	r6, r5
 8019c9c:	6803      	ldr	r3, [r0, #0]
 8019c9e:	bfcc      	ite	gt
 8019ca0:	1b76      	subgt	r6, r6, r5
 8019ca2:	2600      	movle	r6, #0
 8019ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ca6:	bfc8      	it	gt
 8019ca8:	b2b6      	uxthgt	r6, r6
 8019caa:	4798      	blx	r3
 8019cac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019cae:	7b5a      	ldrb	r2, [r3, #13]
 8019cb0:	00d1      	lsls	r1, r2, #3
 8019cb2:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8019cb6:	7a19      	ldrb	r1, [r3, #8]
 8019cb8:	4339      	orrs	r1, r7
 8019cba:	0657      	lsls	r7, r2, #25
 8019cbc:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8019cbe:	bf48      	it	mi
 8019cc0:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8019cc4:	4407      	add	r7, r0
 8019cc6:	bf48      	it	mi
 8019cc8:	b209      	sxthmi	r1, r1
 8019cca:	1a7f      	subs	r7, r7, r1
 8019ccc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019cce:	b2bf      	uxth	r7, r7
 8019cd0:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8019cd4:	fa0f fa87 	sxth.w	sl, r7
 8019cd8:	4551      	cmp	r1, sl
 8019cda:	dd3a      	ble.n	8019d52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8019cdc:	0112      	lsls	r2, r2, #4
 8019cde:	79d8      	ldrb	r0, [r3, #7]
 8019ce0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019ce4:	4302      	orrs	r2, r0
 8019ce6:	4492      	add	sl, r2
 8019ce8:	4551      	cmp	r1, sl
 8019cea:	dc2e      	bgt.n	8019d4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019cec:	1bcf      	subs	r7, r1, r7
 8019cee:	468a      	mov	sl, r1
 8019cf0:	b2bf      	uxth	r7, r7
 8019cf2:	9319      	str	r3, [sp, #100]	; 0x64
 8019cf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019cf6:	f8d8 0000 	ldr.w	r0, [r8]
 8019cfa:	681a      	ldr	r2, [r3, #0]
 8019cfc:	6801      	ldr	r1, [r0, #0]
 8019cfe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8019d00:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019d02:	9313      	str	r3, [sp, #76]	; 0x4c
 8019d04:	9218      	str	r2, [sp, #96]	; 0x60
 8019d06:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8019d08:	4788      	blx	r1
 8019d0a:	f898 1006 	ldrb.w	r1, [r8, #6]
 8019d0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019d10:	910b      	str	r1, [sp, #44]	; 0x2c
 8019d12:	f898 100e 	ldrb.w	r1, [r8, #14]
 8019d16:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019d18:	910a      	str	r1, [sp, #40]	; 0x28
 8019d1a:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8019d1e:	9109      	str	r1, [sp, #36]	; 0x24
 8019d20:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8019d24:	9305      	str	r3, [sp, #20]
 8019d26:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019d28:	9206      	str	r2, [sp, #24]
 8019d2a:	e9cd a601 	strd	sl, r6, [sp, #4]
 8019d2e:	442e      	add	r6, r5
 8019d30:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8019d34:	b236      	sxth	r6, r6
 8019d36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019d38:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8019d3c:	9600      	str	r6, [sp, #0]
 8019d3e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019d40:	681a      	ldr	r2, [r3, #0]
 8019d42:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019d44:	685b      	ldr	r3, [r3, #4]
 8019d46:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019d48:	47b0      	blx	r6
 8019d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d4c:	3301      	adds	r3, #1
 8019d4e:	930e      	str	r3, [sp, #56]	; 0x38
 8019d50:	e6e5      	b.n	8019b1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8019d52:	2700      	movs	r7, #0
 8019d54:	e7cd      	b.n	8019cf2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 8019d56:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019d58:	3501      	adds	r5, #1
 8019d5a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019d5c:	429d      	cmp	r5, r3
 8019d5e:	f6bf af76 	bge.w	8019c4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8019d62:	4659      	mov	r1, fp
 8019d64:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019d66:	f7f9 fc5f 	bl	8013628 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019d6a:	4604      	mov	r4, r0
 8019d6c:	b110      	cbz	r0, 8019d74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8019d6e:	280a      	cmp	r0, #10
 8019d70:	d1f2      	bne.n	8019d58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8019d72:	e76b      	b.n	8019c4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8019d74:	2400      	movs	r4, #0
 8019d76:	e76a      	b.n	8019c4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8019d78:	f1bb 0f00 	cmp.w	fp, #0
 8019d7c:	f43f af5b 	beq.w	8019c36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8019d80:	e776      	b.n	8019c70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08019d82 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8019d82:	b530      	push	{r4, r5, lr}
 8019d84:	8a44      	ldrh	r4, [r0, #18]
 8019d86:	8ac5      	ldrh	r5, [r0, #22]
 8019d88:	82c3      	strh	r3, [r0, #22]
 8019d8a:	442c      	add	r4, r5
 8019d8c:	1ae4      	subs	r4, r4, r3
 8019d8e:	8b03      	ldrh	r3, [r0, #24]
 8019d90:	8244      	strh	r4, [r0, #18]
 8019d92:	8a84      	ldrh	r4, [r0, #20]
 8019d94:	4422      	add	r2, r4
 8019d96:	440c      	add	r4, r1
 8019d98:	1a59      	subs	r1, r3, r1
 8019d9a:	8342      	strh	r2, [r0, #26]
 8019d9c:	8284      	strh	r4, [r0, #20]
 8019d9e:	8301      	strh	r1, [r0, #24]
 8019da0:	bd30      	pop	{r4, r5, pc}

08019da2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8019da2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019da6:	7a43      	ldrb	r3, [r0, #9]
 8019da8:	b087      	sub	sp, #28
 8019daa:	4604      	mov	r4, r0
 8019dac:	460f      	mov	r7, r1
 8019dae:	1eda      	subs	r2, r3, #3
 8019db0:	b2d2      	uxtb	r2, r2
 8019db2:	2900      	cmp	r1, #0
 8019db4:	d036      	beq.n	8019e24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8019db6:	2a01      	cmp	r2, #1
 8019db8:	d932      	bls.n	8019e20 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8019dba:	1e58      	subs	r0, r3, #1
 8019dbc:	f1d0 0b00 	rsbs	fp, r0, #0
 8019dc0:	eb4b 0b00 	adc.w	fp, fp, r0
 8019dc4:	1e99      	subs	r1, r3, #2
 8019dc6:	424b      	negs	r3, r1
 8019dc8:	414b      	adcs	r3, r1
 8019dca:	9303      	str	r3, [sp, #12]
 8019dcc:	2300      	movs	r3, #0
 8019dce:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8019dd2:	2500      	movs	r5, #0
 8019dd4:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8019dd8:	46a9      	mov	r9, r5
 8019dda:	8265      	strh	r5, [r4, #18]
 8019ddc:	82a5      	strh	r5, [r4, #20]
 8019dde:	2300      	movs	r3, #0
 8019de0:	9305      	str	r3, [sp, #20]
 8019de2:	8823      	ldrh	r3, [r4, #0]
 8019de4:	2b20      	cmp	r3, #32
 8019de6:	d02b      	beq.n	8019e40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8019de8:	eba3 020a 	sub.w	r2, r3, sl
 8019dec:	4256      	negs	r6, r2
 8019dee:	4156      	adcs	r6, r2
 8019df0:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019df4:	4293      	cmp	r3, r2
 8019df6:	d004      	beq.n	8019e02 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8019df8:	4553      	cmp	r3, sl
 8019dfa:	bf16      	itet	ne
 8019dfc:	4699      	movne	r9, r3
 8019dfe:	2601      	moveq	r6, #1
 8019e00:	2600      	movne	r6, #0
 8019e02:	ab05      	add	r3, sp, #20
 8019e04:	68e2      	ldr	r2, [r4, #12]
 8019e06:	7a21      	ldrb	r1, [r4, #8]
 8019e08:	6860      	ldr	r0, [r4, #4]
 8019e0a:	f002 fc79 	bl	801c700 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019e0e:	8020      	strh	r0, [r4, #0]
 8019e10:	b9c8      	cbnz	r0, 8019e46 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8019e12:	8b22      	ldrh	r2, [r4, #24]
 8019e14:	2300      	movs	r3, #0
 8019e16:	4611      	mov	r1, r2
 8019e18:	4620      	mov	r0, r4
 8019e1a:	f7ff ffb2 	bl	8019d82 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019e1e:	e066      	b.n	8019eee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8019e20:	468b      	mov	fp, r1
 8019e22:	e7cf      	b.n	8019dc4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8019e24:	3b01      	subs	r3, #1
 8019e26:	2a01      	cmp	r2, #1
 8019e28:	9103      	str	r1, [sp, #12]
 8019e2a:	468b      	mov	fp, r1
 8019e2c:	bf8c      	ite	hi
 8019e2e:	2200      	movhi	r2, #0
 8019e30:	2201      	movls	r2, #1
 8019e32:	2b01      	cmp	r3, #1
 8019e34:	9202      	str	r2, [sp, #8]
 8019e36:	bf8c      	ite	hi
 8019e38:	2300      	movhi	r3, #0
 8019e3a:	2301      	movls	r3, #1
 8019e3c:	9301      	str	r3, [sp, #4]
 8019e3e:	e7c8      	b.n	8019dd2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8019e40:	4699      	mov	r9, r3
 8019e42:	2601      	movs	r6, #1
 8019e44:	e7dd      	b.n	8019e02 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8019e46:	8ae3      	ldrh	r3, [r4, #22]
 8019e48:	280a      	cmp	r0, #10
 8019e4a:	f103 0301 	add.w	r3, r3, #1
 8019e4e:	82e3      	strh	r3, [r4, #22]
 8019e50:	d0df      	beq.n	8019e12 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8019e52:	9a05      	ldr	r2, [sp, #20]
 8019e54:	bb42      	cbnz	r2, 8019ea8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8019e56:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019e5a:	4298      	cmp	r0, r3
 8019e5c:	d001      	beq.n	8019e62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8019e5e:	4550      	cmp	r0, sl
 8019e60:	d1bd      	bne.n	8019dde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019e62:	8823      	ldrh	r3, [r4, #0]
 8019e64:	8b21      	ldrh	r1, [r4, #24]
 8019e66:	2b20      	cmp	r3, #32
 8019e68:	d001      	beq.n	8019e6e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8019e6a:	4553      	cmp	r3, sl
 8019e6c:	d131      	bne.n	8019ed2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8019e6e:	2e00      	cmp	r6, #0
 8019e70:	bf0a      	itet	eq
 8019e72:	460d      	moveq	r5, r1
 8019e74:	4630      	movne	r0, r6
 8019e76:	2001      	moveq	r0, #1
 8019e78:	440a      	add	r2, r1
 8019e7a:	8aa3      	ldrh	r3, [r4, #20]
 8019e7c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8019e80:	b292      	uxth	r2, r2
 8019e82:	8322      	strh	r2, [r4, #24]
 8019e84:	4413      	add	r3, r2
 8019e86:	2f00      	cmp	r7, #0
 8019e88:	d03a      	beq.n	8019f00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8019e8a:	f1bb 0f00 	cmp.w	fp, #0
 8019e8e:	d102      	bne.n	8019e96 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8019e90:	9903      	ldr	r1, [sp, #12]
 8019e92:	b301      	cbz	r1, 8019ed6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8019e94:	b1f8      	cbz	r0, 8019ed6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8019e96:	8ba1      	ldrh	r1, [r4, #28]
 8019e98:	4419      	add	r1, r3
 8019e9a:	458c      	cmp	ip, r1
 8019e9c:	da2a      	bge.n	8019ef4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8019e9e:	8a61      	ldrh	r1, [r4, #18]
 8019ea0:	b341      	cbz	r1, 8019ef4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8019ea2:	4563      	cmp	r3, ip
 8019ea4:	dd9b      	ble.n	8019dde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019ea6:	e01c      	b.n	8019ee2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8019ea8:	8893      	ldrh	r3, [r2, #4]
 8019eaa:	4649      	mov	r1, r9
 8019eac:	8023      	strh	r3, [r4, #0]
 8019eae:	f892 800d 	ldrb.w	r8, [r2, #13]
 8019eb2:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8019eb6:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8019eba:	f892 800a 	ldrb.w	r8, [r2, #10]
 8019ebe:	ea48 0800 	orr.w	r8, r8, r0
 8019ec2:	68e0      	ldr	r0, [r4, #12]
 8019ec4:	6803      	ldr	r3, [r0, #0]
 8019ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ec8:	4798      	blx	r3
 8019eca:	eb08 0200 	add.w	r2, r8, r0
 8019ece:	b292      	uxth	r2, r2
 8019ed0:	e7c7      	b.n	8019e62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8019ed2:	2000      	movs	r0, #0
 8019ed4:	e7d0      	b.n	8019e78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8019ed6:	4563      	cmp	r3, ip
 8019ed8:	dd81      	ble.n	8019dde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019eda:	8a63      	ldrh	r3, [r4, #18]
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	f43f af7e 	beq.w	8019dde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019ee2:	2301      	movs	r3, #1
 8019ee4:	8ba2      	ldrh	r2, [r4, #28]
 8019ee6:	77a3      	strb	r3, [r4, #30]
 8019ee8:	8b63      	ldrh	r3, [r4, #26]
 8019eea:	4413      	add	r3, r2
 8019eec:	8363      	strh	r3, [r4, #26]
 8019eee:	b007      	add	sp, #28
 8019ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ef4:	2300      	movs	r3, #0
 8019ef6:	4611      	mov	r1, r2
 8019ef8:	4620      	mov	r0, r4
 8019efa:	f7ff ff42 	bl	8019d82 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019efe:	e76e      	b.n	8019dde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019f00:	4563      	cmp	r3, ip
 8019f02:	dd14      	ble.n	8019f2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8019f04:	9b02      	ldr	r3, [sp, #8]
 8019f06:	b113      	cbz	r3, 8019f0e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8019f08:	2301      	movs	r3, #1
 8019f0a:	460a      	mov	r2, r1
 8019f0c:	e783      	b.n	8019e16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8019f0e:	9b01      	ldr	r3, [sp, #4]
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	f43f af64 	beq.w	8019dde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019f16:	2800      	cmp	r0, #0
 8019f18:	f47f af61 	bne.w	8019dde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019f1c:	b116      	cbz	r6, 8019f24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8019f1e:	2301      	movs	r3, #1
 8019f20:	462a      	mov	r2, r5
 8019f22:	e779      	b.n	8019e18 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8019f24:	8a63      	ldrh	r3, [r4, #18]
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	f43f af59 	beq.w	8019dde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019f2c:	e7df      	b.n	8019eee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8019f2e:	2800      	cmp	r0, #0
 8019f30:	f47f af55 	bne.w	8019dde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019f34:	2e00      	cmp	r6, #0
 8019f36:	f43f af52 	beq.w	8019dde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019f3a:	2301      	movs	r3, #1
 8019f3c:	462a      	mov	r2, r5
 8019f3e:	e7db      	b.n	8019ef8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08019f40 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8019f40:	b530      	push	{r4, r5, lr}
 8019f42:	4605      	mov	r5, r0
 8019f44:	b08b      	sub	sp, #44	; 0x2c
 8019f46:	b191      	cbz	r1, 8019f6e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8019f48:	2401      	movs	r4, #1
 8019f4a:	e9cd 3100 	strd	r3, r1, [sp]
 8019f4e:	4613      	mov	r3, r2
 8019f50:	4601      	mov	r1, r0
 8019f52:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8019f56:	a802      	add	r0, sp, #8
 8019f58:	f7ff fd0b 	bl	8019972 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019f5c:	2100      	movs	r1, #0
 8019f5e:	a802      	add	r0, sp, #8
 8019f60:	f7ff ff1f 	bl	8019da2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019f64:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019f68:	b163      	cbz	r3, 8019f84 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8019f6a:	3401      	adds	r4, #1
 8019f6c:	e7f6      	b.n	8019f5c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8019f6e:	2401      	movs	r4, #1
 8019f70:	f002 fcb8 	bl	801c8e4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019f74:	280a      	cmp	r0, #10
 8019f76:	4628      	mov	r0, r5
 8019f78:	bf08      	it	eq
 8019f7a:	3401      	addeq	r4, #1
 8019f7c:	f002 fcb2 	bl	801c8e4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019f80:	2800      	cmp	r0, #0
 8019f82:	d1f7      	bne.n	8019f74 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8019f84:	b2a0      	uxth	r0, r4
 8019f86:	b00b      	add	sp, #44	; 0x2c
 8019f88:	bd30      	pop	{r4, r5, pc}

08019f8a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8019f8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f8e:	b0db      	sub	sp, #364	; 0x16c
 8019f90:	4689      	mov	r9, r1
 8019f92:	461c      	mov	r4, r3
 8019f94:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 8019f98:	900a      	str	r0, [sp, #40]	; 0x28
 8019f9a:	f1ba 0f00 	cmp.w	sl, #0
 8019f9e:	f000 80a5 	beq.w	801a0ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	f000 80a1 	beq.w	801a0ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019faa:	7ba3      	ldrb	r3, [r4, #14]
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	f000 809d 	beq.w	801a0ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019fb2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8019fb6:	6810      	ldr	r0, [r2, #0]
 8019fb8:	6851      	ldr	r1, [r2, #4]
 8019fba:	2500      	movs	r5, #0
 8019fbc:	4643      	mov	r3, r8
 8019fbe:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8019fc2:	950e      	str	r5, [sp, #56]	; 0x38
 8019fc4:	af18      	add	r7, sp, #96	; 0x60
 8019fc6:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8019fca:	79a2      	ldrb	r2, [r4, #6]
 8019fcc:	c303      	stmia	r3!, {r0, r1}
 8019fce:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8019fd2:	a90e      	add	r1, sp, #56	; 0x38
 8019fd4:	4640      	mov	r0, r8
 8019fd6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019fda:	f7ff fd40 	bl	8019a5e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019fde:	a90e      	add	r1, sp, #56	; 0x38
 8019fe0:	79a2      	ldrb	r2, [r4, #6]
 8019fe2:	4608      	mov	r0, r1
 8019fe4:	f7ff fd3b 	bl	8019a5e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019fe8:	4638      	mov	r0, r7
 8019fea:	f002 f849 	bl	801c080 <_ZN8touchgfx12TextProviderC1Ev>
 8019fee:	6820      	ldr	r0, [r4, #0]
 8019ff0:	6803      	ldr	r3, [r0, #0]
 8019ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ff4:	4798      	blx	r3
 8019ff6:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019ff8:	4603      	mov	r3, r0
 8019ffa:	4651      	mov	r1, sl
 8019ffc:	4638      	mov	r0, r7
 8019ffe:	f002 f884 	bl	801c10a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a002:	7923      	ldrb	r3, [r4, #4]
 801a004:	6820      	ldr	r0, [r4, #0]
 801a006:	9308      	str	r3, [sp, #32]
 801a008:	6803      	ldr	r3, [r0, #0]
 801a00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a00c:	4798      	blx	r3
 801a00e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a012:	181e      	adds	r6, r3, r0
 801a014:	42ae      	cmp	r6, r5
 801a016:	dd06      	ble.n	801a026 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801a018:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801a01c:	4282      	cmp	r2, r0
 801a01e:	bfa4      	itt	ge
 801a020:	189d      	addge	r5, r3, r2
 801a022:	fb95 f5f6 	sdivge	r5, r5, r6
 801a026:	a82e      	add	r0, sp, #184	; 0xb8
 801a028:	f002 f82a 	bl	801c080 <_ZN8touchgfx12TextProviderC1Ev>
 801a02c:	7c23      	ldrb	r3, [r4, #16]
 801a02e:	b14b      	cbz	r3, 801a044 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 801a030:	6820      	ldr	r0, [r4, #0]
 801a032:	6803      	ldr	r3, [r0, #0]
 801a034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a036:	4798      	blx	r3
 801a038:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801a03a:	4603      	mov	r3, r0
 801a03c:	4651      	mov	r1, sl
 801a03e:	a82e      	add	r0, sp, #184	; 0xb8
 801a040:	f002 f863 	bl	801c10a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a044:	7c21      	ldrb	r1, [r4, #16]
 801a046:	a810      	add	r0, sp, #64	; 0x40
 801a048:	7963      	ldrb	r3, [r4, #5]
 801a04a:	9101      	str	r1, [sp, #4]
 801a04c:	6821      	ldr	r1, [r4, #0]
 801a04e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801a052:	9100      	str	r1, [sp, #0]
 801a054:	a92e      	add	r1, sp, #184	; 0xb8
 801a056:	f7ff fc8c 	bl	8019972 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a05a:	7c23      	ldrb	r3, [r4, #16]
 801a05c:	b9bb      	cbnz	r3, 801a08e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 801a05e:	fa1f fa86 	uxth.w	sl, r6
 801a062:	2d00      	cmp	r5, #0
 801a064:	dd45      	ble.n	801a0f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801a066:	4638      	mov	r0, r7
 801a068:	f002 fc3c 	bl	801c8e4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a06c:	2800      	cmp	r0, #0
 801a06e:	d03d      	beq.n	801a0ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801a070:	280a      	cmp	r0, #10
 801a072:	d1f6      	bne.n	801a062 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801a074:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801a078:	3d01      	subs	r5, #1
 801a07a:	4453      	add	r3, sl
 801a07c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a080:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a084:	eba3 030a 	sub.w	r3, r3, sl
 801a088:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a08c:	e7e9      	b.n	801a062 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801a08e:	0073      	lsls	r3, r6, #1
 801a090:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801a094:	fa1f fa86 	uxth.w	sl, r6
 801a098:	9309      	str	r3, [sp, #36]	; 0x24
 801a09a:	2d00      	cmp	r5, #0
 801a09c:	dd29      	ble.n	801a0f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801a09e:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801a0a2:	a810      	add	r0, sp, #64	; 0x40
 801a0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0a6:	428b      	cmp	r3, r1
 801a0a8:	bfd4      	ite	le
 801a0aa:	2100      	movle	r1, #0
 801a0ac:	2101      	movgt	r1, #1
 801a0ae:	f7ff fe78 	bl	8019da2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a0b2:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 801a0b6:	3b01      	subs	r3, #1
 801a0b8:	b29b      	uxth	r3, r3
 801a0ba:	455b      	cmp	r3, fp
 801a0bc:	930b      	str	r3, [sp, #44]	; 0x2c
 801a0be:	d005      	beq.n	801a0cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801a0c0:	7961      	ldrb	r1, [r4, #5]
 801a0c2:	4638      	mov	r0, r7
 801a0c4:	f7f9 fab0 	bl	8013628 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a0c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a0ca:	e7f4      	b.n	801a0b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 801a0cc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801a0d0:	3d01      	subs	r5, #1
 801a0d2:	4453      	add	r3, sl
 801a0d4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a0d8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a0dc:	eba3 030a 	sub.w	r3, r3, sl
 801a0e0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a0e4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d1d6      	bne.n	801a09a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 801a0ec:	b05b      	add	sp, #364	; 0x16c
 801a0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0f2:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801a0f6:	ad44      	add	r5, sp, #272	; 0x110
 801a0f8:	f04f 0b00 	mov.w	fp, #0
 801a0fc:	7c23      	ldrb	r3, [r4, #16]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d067      	beq.n	801a1d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801a102:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801a106:	a810      	add	r0, sp, #64	; 0x40
 801a108:	458a      	cmp	sl, r1
 801a10a:	bfd4      	ite	le
 801a10c:	2100      	movle	r1, #0
 801a10e:	2101      	movgt	r1, #1
 801a110:	f7ff fe47 	bl	8019da2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a114:	9b08      	ldr	r3, [sp, #32]
 801a116:	2b00      	cmp	r3, #0
 801a118:	d056      	beq.n	801a1c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801a11a:	7c23      	ldrb	r3, [r4, #16]
 801a11c:	2258      	movs	r2, #88	; 0x58
 801a11e:	4639      	mov	r1, r7
 801a120:	4628      	mov	r0, r5
 801a122:	9309      	str	r3, [sp, #36]	; 0x24
 801a124:	f00c ff10 	bl	8026f48 <memcpy>
 801a128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d059      	beq.n	801a1e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801a12e:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801a132:	7922      	ldrb	r2, [r4, #4]
 801a134:	2a01      	cmp	r2, #1
 801a136:	d13d      	bne.n	801a1b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 801a138:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801a13c:	1ac0      	subs	r0, r0, r3
 801a13e:	2302      	movs	r3, #2
 801a140:	fb90 f0f3 	sdiv	r0, r0, r3
 801a144:	b200      	sxth	r0, r0
 801a146:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a14a:	4418      	add	r0, r3
 801a14c:	7c23      	ldrb	r3, [r4, #16]
 801a14e:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 801a152:	2b00      	cmp	r3, #0
 801a154:	d03a      	beq.n	801a1cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801a156:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801a15a:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801a15e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a162:	9500      	str	r5, [sp, #0]
 801a164:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a166:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a16a:	e9cd b703 	strd	fp, r7, [sp, #12]
 801a16e:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801a172:	464a      	mov	r2, r9
 801a174:	2100      	movs	r1, #0
 801a176:	f7ff fca3 	bl	8019ac0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a17a:	2800      	cmp	r0, #0
 801a17c:	d1b6      	bne.n	801a0ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801a17e:	b2b2      	uxth	r2, r6
 801a180:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801a184:	4611      	mov	r1, r2
 801a186:	4413      	add	r3, r2
 801a188:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801a18c:	b21b      	sxth	r3, r3
 801a18e:	1a52      	subs	r2, r2, r1
 801a190:	7c21      	ldrb	r1, [r4, #16]
 801a192:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a196:	b212      	sxth	r2, r2
 801a198:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801a19c:	b109      	cbz	r1, 801a1a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 801a19e:	42b2      	cmp	r2, r6
 801a1a0:	dba4      	blt.n	801a0ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801a1a2:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801a1a6:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801a1aa:	440a      	add	r2, r1
 801a1ac:	b212      	sxth	r2, r2
 801a1ae:	4293      	cmp	r3, r2
 801a1b0:	dda4      	ble.n	801a0fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 801a1b2:	e79b      	b.n	801a0ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801a1b4:	2a02      	cmp	r2, #2
 801a1b6:	d105      	bne.n	801a1c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 801a1b8:	7be2      	ldrb	r2, [r4, #15]
 801a1ba:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801a1be:	1a80      	subs	r0, r0, r2
 801a1c0:	1ac0      	subs	r0, r0, r3
 801a1c2:	e7bf      	b.n	801a144 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 801a1c4:	2000      	movs	r0, #0
 801a1c6:	e7be      	b.n	801a146 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801a1c8:	7be0      	ldrb	r0, [r4, #15]
 801a1ca:	e7bc      	b.n	801a146 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801a1cc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a1d0:	e7c3      	b.n	801a15a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 801a1d2:	9b08      	ldr	r3, [sp, #32]
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d0f7      	beq.n	801a1c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801a1d8:	2258      	movs	r2, #88	; 0x58
 801a1da:	4639      	mov	r1, r7
 801a1dc:	4628      	mov	r0, r5
 801a1de:	f00c feb3 	bl	8026f48 <memcpy>
 801a1e2:	2300      	movs	r3, #0
 801a1e4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a1e8:	6821      	ldr	r1, [r4, #0]
 801a1ea:	4628      	mov	r0, r5
 801a1ec:	f7ff fbfb 	bl	80199e6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a1f0:	b203      	sxth	r3, r0
 801a1f2:	e79e      	b.n	801a132 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

0801a1f4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a1f4:	2b02      	cmp	r3, #2
 801a1f6:	b510      	push	{r4, lr}
 801a1f8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a1fc:	d00b      	beq.n	801a216 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801a1fe:	2b03      	cmp	r3, #3
 801a200:	d00e      	beq.n	801a220 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801a202:	2b01      	cmp	r3, #1
 801a204:	d001      	beq.n	801a20a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801a206:	1860      	adds	r0, r4, r1
 801a208:	bd10      	pop	{r4, pc}
 801a20a:	8880      	ldrh	r0, [r0, #4]
 801a20c:	4420      	add	r0, r4
 801a20e:	b200      	sxth	r0, r0
 801a210:	1a80      	subs	r0, r0, r2
 801a212:	3801      	subs	r0, #1
 801a214:	e7f8      	b.n	801a208 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801a216:	8880      	ldrh	r0, [r0, #4]
 801a218:	4420      	add	r0, r4
 801a21a:	b200      	sxth	r0, r0
 801a21c:	1a40      	subs	r0, r0, r1
 801a21e:	e7f8      	b.n	801a212 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a220:	18a0      	adds	r0, r4, r2
 801a222:	e7f1      	b.n	801a208 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801a224 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a224:	2b02      	cmp	r3, #2
 801a226:	b510      	push	{r4, lr}
 801a228:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801a22c:	d006      	beq.n	801a23c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801a22e:	2b03      	cmp	r3, #3
 801a230:	d00a      	beq.n	801a248 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a232:	2b01      	cmp	r3, #1
 801a234:	bf14      	ite	ne
 801a236:	18a0      	addne	r0, r4, r2
 801a238:	1860      	addeq	r0, r4, r1
 801a23a:	bd10      	pop	{r4, pc}
 801a23c:	88c0      	ldrh	r0, [r0, #6]
 801a23e:	4420      	add	r0, r4
 801a240:	b200      	sxth	r0, r0
 801a242:	1a80      	subs	r0, r0, r2
 801a244:	3801      	subs	r0, #1
 801a246:	e7f8      	b.n	801a23a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801a248:	88c0      	ldrh	r0, [r0, #6]
 801a24a:	4420      	add	r0, r4
 801a24c:	b200      	sxth	r0, r0
 801a24e:	1a40      	subs	r0, r0, r1
 801a250:	e7f8      	b.n	801a244 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801a254 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a258:	b0d3      	sub	sp, #332	; 0x14c
 801a25a:	4614      	mov	r4, r2
 801a25c:	9309      	str	r3, [sp, #36]	; 0x24
 801a25e:	f8bd 3178 	ldrh.w	r3, [sp, #376]	; 0x178
 801a262:	910d      	str	r1, [sp, #52]	; 0x34
 801a264:	930a      	str	r3, [sp, #40]	; 0x28
 801a266:	f89d 317c 	ldrb.w	r3, [sp, #380]	; 0x17c
 801a26a:	9008      	str	r0, [sp, #32]
 801a26c:	930b      	str	r3, [sp, #44]	; 0x2c
 801a26e:	f8bd 3180 	ldrh.w	r3, [sp, #384]	; 0x180
 801a272:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a274:	930e      	str	r3, [sp, #56]	; 0x38
 801a276:	6803      	ldr	r3, [r0, #0]
 801a278:	f8dd b174 	ldr.w	fp, [sp, #372]	; 0x174
 801a27c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 801a27e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a282:	47a8      	blx	r5
 801a284:	9b08      	ldr	r3, [sp, #32]
 801a286:	6058      	str	r0, [r3, #4]
 801a288:	2800      	cmp	r0, #0
 801a28a:	f000 835c 	beq.w	801a946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6f2>
 801a28e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801a292:	ed94 7a02 	vldr	s14, [r4, #8]
 801a296:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a29e:	f240 8352 	bls.w	801a946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6f2>
 801a2a2:	ed94 7a07 	vldr	s14, [r4, #28]
 801a2a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2ae:	f240 834a 	bls.w	801a946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6f2>
 801a2b2:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801a2b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2be:	f240 8342 	bls.w	801a946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6f2>
 801a2c2:	6822      	ldr	r2, [r4, #0]
 801a2c4:	4ba3      	ldr	r3, [pc, #652]	; (801a554 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x300>)
 801a2c6:	429a      	cmp	r2, r3
 801a2c8:	f2c0 833d 	blt.w	801a946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6f2>
 801a2cc:	49a2      	ldr	r1, [pc, #648]	; (801a558 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x304>)
 801a2ce:	6963      	ldr	r3, [r4, #20]
 801a2d0:	428a      	cmp	r2, r1
 801a2d2:	f300 8338 	bgt.w	801a946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6f2>
 801a2d6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a2da:	48a0      	ldr	r0, [pc, #640]	; (801a55c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x308>)
 801a2dc:	33ff      	adds	r3, #255	; 0xff
 801a2de:	4283      	cmp	r3, r0
 801a2e0:	f200 8331 	bhi.w	801a946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6f2>
 801a2e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a2e6:	4a9e      	ldr	r2, [pc, #632]	; (801a560 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>)
 801a2e8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a2ec:	33ff      	adds	r3, #255	; 0xff
 801a2ee:	4293      	cmp	r3, r2
 801a2f0:	f200 8329 	bhi.w	801a946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6f2>
 801a2f4:	6862      	ldr	r2, [r4, #4]
 801a2f6:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801a2fa:	33ff      	adds	r3, #255	; 0xff
 801a2fc:	4283      	cmp	r3, r0
 801a2fe:	f200 8322 	bhi.w	801a946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6f2>
 801a302:	69a1      	ldr	r1, [r4, #24]
 801a304:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801a308:	33ff      	adds	r3, #255	; 0xff
 801a30a:	4283      	cmp	r3, r0
 801a30c:	f200 831b 	bhi.w	801a946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6f2>
 801a310:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a312:	4d93      	ldr	r5, [pc, #588]	; (801a560 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>)
 801a314:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801a318:	30ff      	adds	r0, #255	; 0xff
 801a31a:	42a8      	cmp	r0, r5
 801a31c:	f200 8313 	bhi.w	801a946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6f2>
 801a320:	428a      	cmp	r2, r1
 801a322:	f280 80f5 	bge.w	801a510 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2bc>
 801a326:	429a      	cmp	r2, r3
 801a328:	f300 80fe 	bgt.w	801a528 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2d4>
 801a32c:	4299      	cmp	r1, r3
 801a32e:	f280 8102 	bge.w	801a536 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2e2>
 801a332:	2502      	movs	r5, #2
 801a334:	2701      	movs	r7, #1
 801a336:	46a9      	mov	r9, r5
 801a338:	46b8      	mov	r8, r7
 801a33a:	f04f 0a00 	mov.w	sl, #0
 801a33e:	4621      	mov	r1, r4
 801a340:	a841      	add	r0, sp, #260	; 0x104
 801a342:	f002 fc51 	bl	801cbe8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801a346:	4622      	mov	r2, r4
 801a348:	4653      	mov	r3, sl
 801a34a:	a941      	add	r1, sp, #260	; 0x104
 801a34c:	f8cd 9000 	str.w	r9, [sp]
 801a350:	a811      	add	r0, sp, #68	; 0x44
 801a352:	f002 fd79 	bl	801ce48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a356:	4622      	mov	r2, r4
 801a358:	4653      	mov	r3, sl
 801a35a:	a941      	add	r1, sp, #260	; 0x104
 801a35c:	f8cd 8000 	str.w	r8, [sp]
 801a360:	a821      	add	r0, sp, #132	; 0x84
 801a362:	f002 fd71 	bl	801ce48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a366:	4643      	mov	r3, r8
 801a368:	4622      	mov	r2, r4
 801a36a:	a941      	add	r1, sp, #260	; 0x104
 801a36c:	f8cd 9000 	str.w	r9, [sp]
 801a370:	a831      	add	r0, sp, #196	; 0xc4
 801a372:	f002 fd69 	bl	801ce48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a376:	42af      	cmp	r7, r5
 801a378:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 801a37c:	bfb5      	itete	lt
 801a37e:	2300      	movlt	r3, #0
 801a380:	2301      	movge	r3, #1
 801a382:	ac11      	addlt	r4, sp, #68	; 0x44
 801a384:	ac21      	addge	r4, sp, #132	; 0x84
 801a386:	bfb9      	ittee	lt
 801a388:	930c      	strlt	r3, [sp, #48]	; 0x30
 801a38a:	ad21      	addlt	r5, sp, #132	; 0x84
 801a38c:	930c      	strge	r3, [sp, #48]	; 0x30
 801a38e:	ad11      	addge	r5, sp, #68	; 0x44
 801a390:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 801a392:	6961      	ldr	r1, [r4, #20]
 801a394:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a398:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801a39a:	440b      	add	r3, r1
 801a39c:	f8bb 1006 	ldrh.w	r1, [fp, #6]
 801a3a0:	4401      	add	r1, r0
 801a3a2:	b209      	sxth	r1, r1
 801a3a4:	428b      	cmp	r3, r1
 801a3a6:	f280 80d2 	bge.w	801a54e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2fa>
 801a3aa:	4283      	cmp	r3, r0
 801a3ac:	da09      	bge.n	801a3c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x16e>
 801a3ae:	2a00      	cmp	r2, #0
 801a3b0:	f340 816a 	ble.w	801a688 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801a3b4:	1ac3      	subs	r3, r0, r3
 801a3b6:	429a      	cmp	r2, r3
 801a3b8:	f2c0 80d4 	blt.w	801a564 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	f300 80d2 	bgt.w	801a566 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x312>
 801a3c2:	4617      	mov	r7, r2
 801a3c4:	2f00      	cmp	r7, #0
 801a3c6:	f340 815f 	ble.w	801a688 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801a3ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a3cc:	9b08      	ldr	r3, [sp, #32]
 801a3ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	9206      	str	r2, [sp, #24]
 801a3d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a3d6:	9808      	ldr	r0, [sp, #32]
 801a3d8:	9205      	str	r2, [sp, #20]
 801a3da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a3dc:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a3e0:	9a5c      	ldr	r2, [sp, #368]	; 0x170
 801a3e2:	9202      	str	r2, [sp, #8]
 801a3e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a3e6:	e9cd 5200 	strd	r5, r2, [sp]
 801a3ea:	aa41      	add	r2, sp, #260	; 0x104
 801a3ec:	f8d3 803c 	ldr.w	r8, [r3, #60]	; 0x3c
 801a3f0:	4623      	mov	r3, r4
 801a3f2:	47c0      	blx	r8
 801a3f4:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 801a3f6:	6961      	ldr	r1, [r4, #20]
 801a3f8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a3fc:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a400:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801a404:	440a      	add	r2, r1
 801a406:	4403      	add	r3, r0
 801a408:	3201      	adds	r2, #1
 801a40a:	b21b      	sxth	r3, r3
 801a40c:	429a      	cmp	r2, r3
 801a40e:	f280 813b 	bge.w	801a688 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801a412:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801a416:	3101      	adds	r1, #1
 801a418:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801a41c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801a420:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a424:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801a428:	6161      	str	r1, [r4, #20]
 801a42a:	68a1      	ldr	r1, [r4, #8]
 801a42c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a430:	ed94 6a08 	vldr	s12, [r4, #32]
 801a434:	edd4 6a07 	vldr	s13, [r4, #28]
 801a438:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a43c:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a440:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a444:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a448:	edc4 6a07 	vstr	s13, [r4, #28]
 801a44c:	441a      	add	r2, r3
 801a44e:	69a3      	ldr	r3, [r4, #24]
 801a450:	3b01      	subs	r3, #1
 801a452:	6022      	str	r2, [r4, #0]
 801a454:	61a3      	str	r3, [r4, #24]
 801a456:	6923      	ldr	r3, [r4, #16]
 801a458:	440b      	add	r3, r1
 801a45a:	68e1      	ldr	r1, [r4, #12]
 801a45c:	428b      	cmp	r3, r1
 801a45e:	6123      	str	r3, [r4, #16]
 801a460:	db15      	blt.n	801a48e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23a>
 801a462:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801a466:	3201      	adds	r2, #1
 801a468:	1a5b      	subs	r3, r3, r1
 801a46a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a46e:	6022      	str	r2, [r4, #0]
 801a470:	6123      	str	r3, [r4, #16]
 801a472:	edc4 6a07 	vstr	s13, [r4, #28]
 801a476:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801a47a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a47e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a482:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801a486:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a48a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a48e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801a492:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801a496:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801a49a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a49e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801a4a2:	68a9      	ldr	r1, [r5, #8]
 801a4a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a4a8:	ed95 6a08 	vldr	s12, [r5, #32]
 801a4ac:	edd5 6a07 	vldr	s13, [r5, #28]
 801a4b0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a4b4:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a4b8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a4bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a4c0:	edc5 6a07 	vstr	s13, [r5, #28]
 801a4c4:	441a      	add	r2, r3
 801a4c6:	696b      	ldr	r3, [r5, #20]
 801a4c8:	3301      	adds	r3, #1
 801a4ca:	602a      	str	r2, [r5, #0]
 801a4cc:	616b      	str	r3, [r5, #20]
 801a4ce:	69ab      	ldr	r3, [r5, #24]
 801a4d0:	3b01      	subs	r3, #1
 801a4d2:	61ab      	str	r3, [r5, #24]
 801a4d4:	692b      	ldr	r3, [r5, #16]
 801a4d6:	440b      	add	r3, r1
 801a4d8:	68e9      	ldr	r1, [r5, #12]
 801a4da:	428b      	cmp	r3, r1
 801a4dc:	612b      	str	r3, [r5, #16]
 801a4de:	db15      	blt.n	801a50c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b8>
 801a4e0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a4e4:	3201      	adds	r2, #1
 801a4e6:	1a5b      	subs	r3, r3, r1
 801a4e8:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a4ec:	602a      	str	r2, [r5, #0]
 801a4ee:	612b      	str	r3, [r5, #16]
 801a4f0:	edc5 6a07 	vstr	s13, [r5, #28]
 801a4f4:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a4f8:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a4fc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a500:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a504:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a508:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a50c:	3f01      	subs	r7, #1
 801a50e:	e759      	b.n	801a3c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801a510:	4299      	cmp	r1, r3
 801a512:	dc13      	bgt.n	801a53c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2e8>
 801a514:	429a      	cmp	r2, r3
 801a516:	da14      	bge.n	801a542 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ee>
 801a518:	2502      	movs	r5, #2
 801a51a:	2703      	movs	r7, #3
 801a51c:	f04f 0800 	mov.w	r8, #0
 801a520:	46a9      	mov	r9, r5
 801a522:	f04f 0a01 	mov.w	sl, #1
 801a526:	e70a      	b.n	801a33e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 801a528:	2501      	movs	r5, #1
 801a52a:	2700      	movs	r7, #0
 801a52c:	46a9      	mov	r9, r5
 801a52e:	46b8      	mov	r8, r7
 801a530:	f04f 0a02 	mov.w	sl, #2
 801a534:	e703      	b.n	801a33e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 801a536:	2501      	movs	r5, #1
 801a538:	2702      	movs	r7, #2
 801a53a:	e6fc      	b.n	801a336 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe2>
 801a53c:	2500      	movs	r5, #0
 801a53e:	2701      	movs	r7, #1
 801a540:	e7f4      	b.n	801a52c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2d8>
 801a542:	2702      	movs	r7, #2
 801a544:	2503      	movs	r5, #3
 801a546:	f04f 0900 	mov.w	r9, #0
 801a54a:	46b8      	mov	r8, r7
 801a54c:	e7e9      	b.n	801a522 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ce>
 801a54e:	4613      	mov	r3, r2
 801a550:	e734      	b.n	801a3bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x168>
 801a552:	bf00      	nop
 801a554:	fffd8f01 	.word	0xfffd8f01
 801a558:	00027100 	.word	0x00027100
 801a55c:	0004e1ff 	.word	0x0004e1ff
 801a560:	0004e1fe 	.word	0x0004e1fe
 801a564:	4613      	mov	r3, r2
 801a566:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801a568:	469e      	mov	lr, r3
 801a56a:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
 801a56e:	461f      	mov	r7, r3
 801a570:	910f      	str	r1, [sp, #60]	; 0x3c
 801a572:	f04f 0900 	mov.w	r9, #0
 801a576:	eddd 4a2c 	vldr	s9, [sp, #176]	; 0xb0
 801a57a:	ed9d 7a2b 	vldr	s14, [sp, #172]	; 0xac
 801a57e:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 801a582:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801a586:	eddd 3a29 	vldr	s7, [sp, #164]	; 0xa4
 801a58a:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 801a58e:	ed9d 5a2a 	vldr	s10, [sp, #168]	; 0xa8
 801a592:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 801a596:	ed9d 6a30 	vldr	s12, [sp, #192]	; 0xc0
 801a59a:	e9dd 0a21 	ldrd	r0, sl, [sp, #132]	; 0x84
 801a59e:	e9dd 8124 	ldrd	r8, r1, [sp, #144]	; 0x90
 801a5a2:	2f00      	cmp	r7, #0
 801a5a4:	d147      	bne.n	801a636 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3e2>
 801a5a6:	449c      	add	ip, r3
 801a5a8:	1ad7      	subs	r7, r2, r3
 801a5aa:	f1b9 0f00 	cmp.w	r9, #0
 801a5ae:	d009      	beq.n	801a5c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x370>
 801a5b0:	9021      	str	r0, [sp, #132]	; 0x84
 801a5b2:	ed8d 7a2b 	vstr	s14, [sp, #172]	; 0xac
 801a5b6:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 801a5ba:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801a5be:	9125      	str	r1, [sp, #148]	; 0x94
 801a5c0:	e9cd c726 	strd	ip, r7, [sp, #152]	; 0x98
 801a5c4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a5c6:	f04f 0800 	mov.w	r8, #0
 801a5ca:	eddd 6a1b 	vldr	s13, [sp, #108]	; 0x6c
 801a5ce:	eddd 4a1c 	vldr	s9, [sp, #112]	; 0x70
 801a5d2:	ed9d 7a1e 	vldr	s14, [sp, #120]	; 0x78
 801a5d6:	ed9d 4a1f 	vldr	s8, [sp, #124]	; 0x7c
 801a5da:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 801a5de:	eddd 3a19 	vldr	s7, [sp, #100]	; 0x64
 801a5e2:	9915      	ldr	r1, [sp, #84]	; 0x54
 801a5e4:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 801a5e8:	ed9d 5a1a 	vldr	s10, [sp, #104]	; 0x68
 801a5ec:	eddd 5a1d 	vldr	s11, [sp, #116]	; 0x74
 801a5f0:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 801a5f4:	960f      	str	r6, [sp, #60]	; 0x3c
 801a5f6:	e9dd 0a11 	ldrd	r0, sl, [sp, #68]	; 0x44
 801a5fa:	e9dd c716 	ldrd	ip, r7, [sp, #88]	; 0x58
 801a5fe:	f1be 0f00 	cmp.w	lr, #0
 801a602:	d030      	beq.n	801a666 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x412>
 801a604:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a606:	4450      	add	r0, sl
 801a608:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a60c:	4431      	add	r1, r6
 801a60e:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a612:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a616:	4549      	cmp	r1, r9
 801a618:	db08      	blt.n	801a62c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3d8>
 801a61a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a61e:	3001      	adds	r0, #1
 801a620:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a624:	eba1 0109 	sub.w	r1, r1, r9
 801a628:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a62c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a630:	f04f 0801 	mov.w	r8, #1
 801a634:	e7e3      	b.n	801a5fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3aa>
 801a636:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a638:	4450      	add	r0, sl
 801a63a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a63e:	4431      	add	r1, r6
 801a640:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a644:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a648:	4541      	cmp	r1, r8
 801a64a:	db08      	blt.n	801a65e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x40a>
 801a64c:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a650:	3001      	adds	r0, #1
 801a652:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a656:	eba1 0108 	sub.w	r1, r1, r8
 801a65a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a65e:	3f01      	subs	r7, #1
 801a660:	f04f 0901 	mov.w	r9, #1
 801a664:	e79d      	b.n	801a5a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801a666:	449c      	add	ip, r3
 801a668:	1aff      	subs	r7, r7, r3
 801a66a:	f1b8 0f00 	cmp.w	r8, #0
 801a66e:	d009      	beq.n	801a684 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x430>
 801a670:	9011      	str	r0, [sp, #68]	; 0x44
 801a672:	edcd 6a1b 	vstr	s13, [sp, #108]	; 0x6c
 801a676:	ed8d 7a1e 	vstr	s14, [sp, #120]	; 0x78
 801a67a:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 801a67e:	9115      	str	r1, [sp, #84]	; 0x54
 801a680:	e9cd c716 	strd	ip, r7, [sp, #88]	; 0x58
 801a684:	1ad2      	subs	r2, r2, r3
 801a686:	e69c      	b.n	801a3c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x16e>
 801a688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a68a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	f000 80c3 	beq.w	801a818 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5c4>
 801a692:	ad11      	add	r5, sp, #68	; 0x44
 801a694:	ac31      	add	r4, sp, #196	; 0xc4
 801a696:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 801a698:	6961      	ldr	r1, [r4, #20]
 801a69a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a69e:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 801a6a2:	440b      	add	r3, r1
 801a6a4:	f8bb 1006 	ldrh.w	r1, [fp, #6]
 801a6a8:	4401      	add	r1, r0
 801a6aa:	b209      	sxth	r1, r1
 801a6ac:	428b      	cmp	r3, r1
 801a6ae:	f280 80b6 	bge.w	801a81e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5ca>
 801a6b2:	4283      	cmp	r3, r0
 801a6b4:	da09      	bge.n	801a6ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x476>
 801a6b6:	2a00      	cmp	r2, #0
 801a6b8:	f340 8145 	ble.w	801a946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6f2>
 801a6bc:	1ac3      	subs	r3, r0, r3
 801a6be:	429a      	cmp	r2, r3
 801a6c0:	f2c0 80af 	blt.w	801a822 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5ce>
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	f300 80ad 	bgt.w	801a824 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5d0>
 801a6ca:	4617      	mov	r7, r2
 801a6cc:	2f00      	cmp	r7, #0
 801a6ce:	f340 813a 	ble.w	801a946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6f2>
 801a6d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a6d4:	9b08      	ldr	r3, [sp, #32]
 801a6d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	9206      	str	r2, [sp, #24]
 801a6dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a6de:	9808      	ldr	r0, [sp, #32]
 801a6e0:	9205      	str	r2, [sp, #20]
 801a6e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a6e4:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a6e8:	9a5c      	ldr	r2, [sp, #368]	; 0x170
 801a6ea:	9202      	str	r2, [sp, #8]
 801a6ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a6ee:	e9cd 5200 	strd	r5, r2, [sp]
 801a6f2:	aa41      	add	r2, sp, #260	; 0x104
 801a6f4:	f8d3 803c 	ldr.w	r8, [r3, #60]	; 0x3c
 801a6f8:	4623      	mov	r3, r4
 801a6fa:	47c0      	blx	r8
 801a6fc:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 801a6fe:	6961      	ldr	r1, [r4, #20]
 801a700:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a704:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a708:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801a70c:	440a      	add	r2, r1
 801a70e:	4403      	add	r3, r0
 801a710:	3201      	adds	r2, #1
 801a712:	b21b      	sxth	r3, r3
 801a714:	429a      	cmp	r2, r3
 801a716:	f280 8116 	bge.w	801a946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6f2>
 801a71a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801a71e:	3101      	adds	r1, #1
 801a720:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801a724:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801a728:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a72c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801a730:	6161      	str	r1, [r4, #20]
 801a732:	68a1      	ldr	r1, [r4, #8]
 801a734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a738:	ed94 6a08 	vldr	s12, [r4, #32]
 801a73c:	edd4 6a07 	vldr	s13, [r4, #28]
 801a740:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a744:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a748:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a74c:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a750:	edc4 6a07 	vstr	s13, [r4, #28]
 801a754:	441a      	add	r2, r3
 801a756:	69a3      	ldr	r3, [r4, #24]
 801a758:	3b01      	subs	r3, #1
 801a75a:	6022      	str	r2, [r4, #0]
 801a75c:	61a3      	str	r3, [r4, #24]
 801a75e:	6923      	ldr	r3, [r4, #16]
 801a760:	440b      	add	r3, r1
 801a762:	68e1      	ldr	r1, [r4, #12]
 801a764:	428b      	cmp	r3, r1
 801a766:	6123      	str	r3, [r4, #16]
 801a768:	db15      	blt.n	801a796 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x542>
 801a76a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801a76e:	3201      	adds	r2, #1
 801a770:	1a5b      	subs	r3, r3, r1
 801a772:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a776:	6022      	str	r2, [r4, #0]
 801a778:	6123      	str	r3, [r4, #16]
 801a77a:	edc4 6a07 	vstr	s13, [r4, #28]
 801a77e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801a782:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a786:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a78a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801a78e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a792:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a796:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801a79a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801a79e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801a7a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a7a6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801a7aa:	68a9      	ldr	r1, [r5, #8]
 801a7ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a7b0:	ed95 6a08 	vldr	s12, [r5, #32]
 801a7b4:	edd5 6a07 	vldr	s13, [r5, #28]
 801a7b8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a7bc:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a7c0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a7c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a7c8:	edc5 6a07 	vstr	s13, [r5, #28]
 801a7cc:	441a      	add	r2, r3
 801a7ce:	696b      	ldr	r3, [r5, #20]
 801a7d0:	3301      	adds	r3, #1
 801a7d2:	602a      	str	r2, [r5, #0]
 801a7d4:	616b      	str	r3, [r5, #20]
 801a7d6:	69ab      	ldr	r3, [r5, #24]
 801a7d8:	3b01      	subs	r3, #1
 801a7da:	61ab      	str	r3, [r5, #24]
 801a7dc:	692b      	ldr	r3, [r5, #16]
 801a7de:	440b      	add	r3, r1
 801a7e0:	68e9      	ldr	r1, [r5, #12]
 801a7e2:	428b      	cmp	r3, r1
 801a7e4:	612b      	str	r3, [r5, #16]
 801a7e6:	db15      	blt.n	801a814 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5c0>
 801a7e8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a7ec:	3201      	adds	r2, #1
 801a7ee:	1a5b      	subs	r3, r3, r1
 801a7f0:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a7f4:	602a      	str	r2, [r5, #0]
 801a7f6:	612b      	str	r3, [r5, #16]
 801a7f8:	edc5 6a07 	vstr	s13, [r5, #28]
 801a7fc:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a800:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a804:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a808:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a80c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a810:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a814:	3f01      	subs	r7, #1
 801a816:	e759      	b.n	801a6cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x478>
 801a818:	ad31      	add	r5, sp, #196	; 0xc4
 801a81a:	ac11      	add	r4, sp, #68	; 0x44
 801a81c:	e73b      	b.n	801a696 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x442>
 801a81e:	4613      	mov	r3, r2
 801a820:	e750      	b.n	801a6c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801a822:	4613      	mov	r3, r2
 801a824:	9e33      	ldr	r6, [sp, #204]	; 0xcc
 801a826:	469e      	mov	lr, r3
 801a828:	f8dd c0d8 	ldr.w	ip, [sp, #216]	; 0xd8
 801a82c:	461f      	mov	r7, r3
 801a82e:	ed9d 7a3b 	vldr	s14, [sp, #236]	; 0xec
 801a832:	f04f 0900 	mov.w	r9, #0
 801a836:	eddd 4a3c 	vldr	s9, [sp, #240]	; 0xf0
 801a83a:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 801a83e:	ed9d 4a3f 	vldr	s8, [sp, #252]	; 0xfc
 801a842:	eddd 6a38 	vldr	s13, [sp, #224]	; 0xe0
 801a846:	eddd 3a39 	vldr	s7, [sp, #228]	; 0xe4
 801a84a:	9935      	ldr	r1, [sp, #212]	; 0xd4
 801a84c:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 801a850:	ed9d 5a3a 	vldr	s10, [sp, #232]	; 0xe8
 801a854:	eddd 5a3d 	vldr	s11, [sp, #244]	; 0xf4
 801a858:	ed9d 6a40 	vldr	s12, [sp, #256]	; 0x100
 801a85c:	960c      	str	r6, [sp, #48]	; 0x30
 801a85e:	e9dd 0a31 	ldrd	r0, sl, [sp, #196]	; 0xc4
 801a862:	2f00      	cmp	r7, #0
 801a864:	d146      	bne.n	801a8f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6a0>
 801a866:	449c      	add	ip, r3
 801a868:	1ad7      	subs	r7, r2, r3
 801a86a:	f1b9 0f00 	cmp.w	r9, #0
 801a86e:	d009      	beq.n	801a884 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x630>
 801a870:	9031      	str	r0, [sp, #196]	; 0xc4
 801a872:	9135      	str	r1, [sp, #212]	; 0xd4
 801a874:	edcd 6a38 	vstr	s13, [sp, #224]	; 0xe0
 801a878:	ed8d 7a3b 	vstr	s14, [sp, #236]	; 0xec
 801a87c:	edcd 7a3e 	vstr	s15, [sp, #248]	; 0xf8
 801a880:	e9cd c736 	strd	ip, r7, [sp, #216]	; 0xd8
 801a884:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801a886:	f04f 0800 	mov.w	r8, #0
 801a88a:	eddd 4a1c 	vldr	s9, [sp, #112]	; 0x70
 801a88e:	910c      	str	r1, [sp, #48]	; 0x30
 801a890:	eddd 6a1b 	vldr	s13, [sp, #108]	; 0x6c
 801a894:	ed9d 4a1f 	vldr	s8, [sp, #124]	; 0x7c
 801a898:	ed9d 7a1e 	vldr	s14, [sp, #120]	; 0x78
 801a89c:	eddd 3a19 	vldr	s7, [sp, #100]	; 0x64
 801a8a0:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 801a8a4:	ed9d 5a1a 	vldr	s10, [sp, #104]	; 0x68
 801a8a8:	eddd 5a1d 	vldr	s11, [sp, #116]	; 0x74
 801a8ac:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 801a8b0:	e9dd 0a11 	ldrd	r0, sl, [sp, #68]	; 0x44
 801a8b4:	e9dd c716 	ldrd	ip, r7, [sp, #88]	; 0x58
 801a8b8:	e9dd 9114 	ldrd	r9, r1, [sp, #80]	; 0x50
 801a8bc:	f1be 0f00 	cmp.w	lr, #0
 801a8c0:	d030      	beq.n	801a924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6d0>
 801a8c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a8c4:	4450      	add	r0, sl
 801a8c6:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a8ca:	4431      	add	r1, r6
 801a8cc:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a8d0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a8d4:	4549      	cmp	r1, r9
 801a8d6:	db08      	blt.n	801a8ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x696>
 801a8d8:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a8dc:	3001      	adds	r0, #1
 801a8de:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a8e2:	eba1 0109 	sub.w	r1, r1, r9
 801a8e6:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a8ea:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a8ee:	f04f 0801 	mov.w	r8, #1
 801a8f2:	e7e3      	b.n	801a8bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x668>
 801a8f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a8f6:	4450      	add	r0, sl
 801a8f8:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a8fc:	4431      	add	r1, r6
 801a8fe:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a902:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a906:	4541      	cmp	r1, r8
 801a908:	db08      	blt.n	801a91c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6c8>
 801a90a:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a90e:	3001      	adds	r0, #1
 801a910:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a914:	eba1 0108 	sub.w	r1, r1, r8
 801a918:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a91c:	3f01      	subs	r7, #1
 801a91e:	f04f 0901 	mov.w	r9, #1
 801a922:	e79e      	b.n	801a862 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x60e>
 801a924:	449c      	add	ip, r3
 801a926:	1aff      	subs	r7, r7, r3
 801a928:	f1b8 0f00 	cmp.w	r8, #0
 801a92c:	d009      	beq.n	801a942 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6ee>
 801a92e:	9011      	str	r0, [sp, #68]	; 0x44
 801a930:	edcd 6a1b 	vstr	s13, [sp, #108]	; 0x6c
 801a934:	ed8d 7a1e 	vstr	s14, [sp, #120]	; 0x78
 801a938:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 801a93c:	9115      	str	r1, [sp, #84]	; 0x54
 801a93e:	e9cd c716 	strd	ip, r7, [sp, #88]	; 0x58
 801a942:	1ad2      	subs	r2, r2, r3
 801a944:	e6c1      	b.n	801a6ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x476>
 801a946:	b053      	add	sp, #332	; 0x14c
 801a948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a94c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a94c:	4b01      	ldr	r3, [pc, #4]	; (801a954 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a94e:	2200      	movs	r2, #0
 801a950:	601a      	str	r2, [r3, #0]
 801a952:	4770      	bx	lr
 801a954:	2000b3fc 	.word	0x2000b3fc

0801a958 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801a958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a95a:	1e05      	subs	r5, r0, #0
 801a95c:	f04f 0601 	mov.w	r6, #1
 801a960:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801a964:	bfba      	itte	lt
 801a966:	f04f 37ff 	movlt.w	r7, #4294967295
 801a96a:	426d      	neglt	r5, r5
 801a96c:	2701      	movge	r7, #1
 801a96e:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801a972:	f1be 0f00 	cmp.w	lr, #0
 801a976:	bfbc      	itt	lt
 801a978:	f1ce 0e00 	rsblt	lr, lr, #0
 801a97c:	427f      	neglt	r7, r7
 801a97e:	2c00      	cmp	r4, #0
 801a980:	fa4e f001 	asr.w	r0, lr, r1
 801a984:	fa06 f101 	lsl.w	r1, r6, r1
 801a988:	bfbc      	itt	lt
 801a98a:	4264      	neglt	r4, r4
 801a98c:	427f      	neglt	r7, r7
 801a98e:	3901      	subs	r1, #1
 801a990:	ea01 010e 	and.w	r1, r1, lr
 801a994:	434d      	muls	r5, r1
 801a996:	f8dc 1000 	ldr.w	r1, [ip]
 801a99a:	fb03 1300 	mla	r3, r3, r0, r1
 801a99e:	fb95 f1f4 	sdiv	r1, r5, r4
 801a9a2:	fb04 5511 	mls	r5, r4, r1, r5
 801a9a6:	441d      	add	r5, r3
 801a9a8:	fb95 f3f4 	sdiv	r3, r5, r4
 801a9ac:	4419      	add	r1, r3
 801a9ae:	fb04 5413 	mls	r4, r4, r3, r5
 801a9b2:	fb02 1000 	mla	r0, r2, r0, r1
 801a9b6:	f8cc 4000 	str.w	r4, [ip]
 801a9ba:	4378      	muls	r0, r7
 801a9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801a9c0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9c4:	4c24      	ldr	r4, [pc, #144]	; (801aa58 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801a9c6:	b086      	sub	sp, #24
 801a9c8:	4605      	mov	r5, r0
 801a9ca:	6807      	ldr	r7, [r0, #0]
 801a9cc:	69a3      	ldr	r3, [r4, #24]
 801a9ce:	b92b      	cbnz	r3, 801a9dc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801a9d0:	6840      	ldr	r0, [r0, #4]
 801a9d2:	e9c5 7000 	strd	r7, r0, [r5]
 801a9d6:	b006      	add	sp, #24
 801a9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9dc:	f04f 0802 	mov.w	r8, #2
 801a9e0:	68a2      	ldr	r2, [r4, #8]
 801a9e2:	ae06      	add	r6, sp, #24
 801a9e4:	6820      	ldr	r0, [r4, #0]
 801a9e6:	fb93 f1f8 	sdiv	r1, r3, r8
 801a9ea:	440a      	add	r2, r1
 801a9ec:	69e1      	ldr	r1, [r4, #28]
 801a9ee:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a9f2:	9700      	str	r7, [sp, #0]
 801a9f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a9f6:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801a9fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a9fc:	f7ff ffac 	bl	801a958 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801aa00:	69a3      	ldr	r3, [r4, #24]
 801aa02:	4607      	mov	r7, r0
 801aa04:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801aa06:	9301      	str	r3, [sp, #4]
 801aa08:	686b      	ldr	r3, [r5, #4]
 801aa0a:	6a21      	ldr	r1, [r4, #32]
 801aa0c:	9300      	str	r3, [sp, #0]
 801aa0e:	9602      	str	r6, [sp, #8]
 801aa10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801aa12:	6860      	ldr	r0, [r4, #4]
 801aa14:	f7ff ffa0 	bl	801a958 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801aa18:	69a2      	ldr	r2, [r4, #24]
 801aa1a:	6963      	ldr	r3, [r4, #20]
 801aa1c:	4407      	add	r7, r0
 801aa1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801aa20:	68e0      	ldr	r0, [r4, #12]
 801aa22:	fb92 f8f8 	sdiv	r8, r2, r8
 801aa26:	4443      	add	r3, r8
 801aa28:	9305      	str	r3, [sp, #20]
 801aa2a:	682b      	ldr	r3, [r5, #0]
 801aa2c:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801aa30:	9300      	str	r3, [sp, #0]
 801aa32:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801aa34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801aa36:	f7ff ff8f 	bl	801a958 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801aa3a:	69a3      	ldr	r3, [r4, #24]
 801aa3c:	4680      	mov	r8, r0
 801aa3e:	9602      	str	r6, [sp, #8]
 801aa40:	9301      	str	r3, [sp, #4]
 801aa42:	686b      	ldr	r3, [r5, #4]
 801aa44:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801aa46:	9300      	str	r3, [sp, #0]
 801aa48:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801aa4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801aa4c:	6920      	ldr	r0, [r4, #16]
 801aa4e:	f7ff ff83 	bl	801a958 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801aa52:	4440      	add	r0, r8
 801aa54:	e7bd      	b.n	801a9d2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801aa56:	bf00      	nop
 801aa58:	2000b400 	.word	0x2000b400

0801aa5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801aa5c:	4b07      	ldr	r3, [pc, #28]	; (801aa7c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801aa5e:	b510      	push	{r4, lr}
 801aa60:	781b      	ldrb	r3, [r3, #0]
 801aa62:	2b01      	cmp	r3, #1
 801aa64:	d108      	bne.n	801aa78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801aa66:	4b06      	ldr	r3, [pc, #24]	; (801aa80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801aa68:	880c      	ldrh	r4, [r1, #0]
 801aa6a:	881b      	ldrh	r3, [r3, #0]
 801aa6c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801aa70:	3b01      	subs	r3, #1
 801aa72:	1b1b      	subs	r3, r3, r4
 801aa74:	8003      	strh	r3, [r0, #0]
 801aa76:	800a      	strh	r2, [r1, #0]
 801aa78:	bd10      	pop	{r4, pc}
 801aa7a:	bf00      	nop
 801aa7c:	2000b3cc 	.word	0x2000b3cc
 801aa80:	2000b3d0 	.word	0x2000b3d0

0801aa84 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801aa84:	4b0a      	ldr	r3, [pc, #40]	; (801aab0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801aa86:	b510      	push	{r4, lr}
 801aa88:	781b      	ldrb	r3, [r3, #0]
 801aa8a:	2b01      	cmp	r3, #1
 801aa8c:	d10e      	bne.n	801aaac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801aa8e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801aa92:	8843      	ldrh	r3, [r0, #2]
 801aa94:	f9b0 4000 	ldrsh.w	r4, [r0]
 801aa98:	18ca      	adds	r2, r1, r3
 801aa9a:	4b06      	ldr	r3, [pc, #24]	; (801aab4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801aa9c:	8044      	strh	r4, [r0, #2]
 801aa9e:	881b      	ldrh	r3, [r3, #0]
 801aaa0:	1a9b      	subs	r3, r3, r2
 801aaa2:	8003      	strh	r3, [r0, #0]
 801aaa4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801aaa8:	8081      	strh	r1, [r0, #4]
 801aaaa:	80c3      	strh	r3, [r0, #6]
 801aaac:	bd10      	pop	{r4, pc}
 801aaae:	bf00      	nop
 801aab0:	2000b3cc 	.word	0x2000b3cc
 801aab4:	2000b3c8 	.word	0x2000b3c8

0801aab8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801aab8:	4b07      	ldr	r3, [pc, #28]	; (801aad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801aaba:	b510      	push	{r4, lr}
 801aabc:	781b      	ldrb	r3, [r3, #0]
 801aabe:	2b01      	cmp	r3, #1
 801aac0:	d108      	bne.n	801aad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801aac2:	f9b1 3000 	ldrsh.w	r3, [r1]
 801aac6:	f9b0 4000 	ldrsh.w	r4, [r0]
 801aaca:	8003      	strh	r3, [r0, #0]
 801aacc:	8893      	ldrh	r3, [r2, #4]
 801aace:	3b01      	subs	r3, #1
 801aad0:	1b1b      	subs	r3, r3, r4
 801aad2:	800b      	strh	r3, [r1, #0]
 801aad4:	bd10      	pop	{r4, pc}
 801aad6:	bf00      	nop
 801aad8:	2000b3cc 	.word	0x2000b3cc

0801aadc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801aadc:	4b08      	ldr	r3, [pc, #32]	; (801ab00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801aade:	b513      	push	{r0, r1, r4, lr}
 801aae0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aae4:	2400      	movs	r4, #0
 801aae6:	4b07      	ldr	r3, [pc, #28]	; (801ab04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801aae8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801aaec:	466a      	mov	r2, sp
 801aaee:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aaf2:	9400      	str	r4, [sp, #0]
 801aaf4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801aaf8:	f7ff ffde 	bl	801aab8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801aafc:	b002      	add	sp, #8
 801aafe:	bd10      	pop	{r4, pc}
 801ab00:	2000b3c8 	.word	0x2000b3c8
 801ab04:	2000b3ca 	.word	0x2000b3ca

0801ab08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801ab08:	4b0b      	ldr	r3, [pc, #44]	; (801ab38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801ab0a:	781b      	ldrb	r3, [r3, #0]
 801ab0c:	2b01      	cmp	r3, #1
 801ab0e:	d111      	bne.n	801ab34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801ab10:	680b      	ldr	r3, [r1, #0]
 801ab12:	ed90 7a00 	vldr	s14, [r0]
 801ab16:	6003      	str	r3, [r0, #0]
 801ab18:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801ab1c:	eddf 6a07 	vldr	s13, [pc, #28]	; 801ab3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801ab20:	ee07 3a90 	vmov	s15, r3
 801ab24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ab28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ab2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ab30:	edc1 7a00 	vstr	s15, [r1]
 801ab34:	4770      	bx	lr
 801ab36:	bf00      	nop
 801ab38:	2000b3cc 	.word	0x2000b3cc
 801ab3c:	38d1b717 	.word	0x38d1b717

0801ab40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801ab40:	4b0a      	ldr	r3, [pc, #40]	; (801ab6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801ab42:	460a      	mov	r2, r1
 801ab44:	b510      	push	{r4, lr}
 801ab46:	781b      	ldrb	r3, [r3, #0]
 801ab48:	2b01      	cmp	r3, #1
 801ab4a:	d10d      	bne.n	801ab68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801ab4c:	8881      	ldrh	r1, [r0, #4]
 801ab4e:	8803      	ldrh	r3, [r0, #0]
 801ab50:	440b      	add	r3, r1
 801ab52:	4601      	mov	r1, r0
 801ab54:	3b01      	subs	r3, #1
 801ab56:	f821 3b02 	strh.w	r3, [r1], #2
 801ab5a:	f7ff ffad 	bl	801aab8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801ab5e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ab62:	88c2      	ldrh	r2, [r0, #6]
 801ab64:	80c3      	strh	r3, [r0, #6]
 801ab66:	8082      	strh	r2, [r0, #4]
 801ab68:	bd10      	pop	{r4, pc}
 801ab6a:	bf00      	nop
 801ab6c:	2000b3cc 	.word	0x2000b3cc

0801ab70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801ab70:	4b09      	ldr	r3, [pc, #36]	; (801ab98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801ab72:	b507      	push	{r0, r1, r2, lr}
 801ab74:	2100      	movs	r1, #0
 801ab76:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ab7a:	4b08      	ldr	r3, [pc, #32]	; (801ab9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801ab7c:	9100      	str	r1, [sp, #0]
 801ab7e:	4669      	mov	r1, sp
 801ab80:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ab84:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ab88:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ab8c:	f7ff ffd8 	bl	801ab40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ab90:	b003      	add	sp, #12
 801ab92:	f85d fb04 	ldr.w	pc, [sp], #4
 801ab96:	bf00      	nop
 801ab98:	2000b3c8 	.word	0x2000b3c8
 801ab9c:	2000b3ca 	.word	0x2000b3ca

0801aba0 <_ZN8touchgfx11Application13requestRedrawEv>:
 801aba0:	4b06      	ldr	r3, [pc, #24]	; (801abbc <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801aba2:	2100      	movs	r1, #0
 801aba4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aba8:	4b05      	ldr	r3, [pc, #20]	; (801abc0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801abaa:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801abae:	f9b3 3000 	ldrsh.w	r3, [r3]
 801abb2:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801abb6:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801abba:	4770      	bx	lr
 801abbc:	2000b3c8 	.word	0x2000b3c8
 801abc0:	2000b3ca 	.word	0x2000b3ca

0801abc4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801abc4:	4b03      	ldr	r3, [pc, #12]	; (801abd4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801abc6:	6818      	ldr	r0, [r3, #0]
 801abc8:	b110      	cbz	r0, 801abd0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801abca:	6803      	ldr	r3, [r0, #0]
 801abcc:	699b      	ldr	r3, [r3, #24]
 801abce:	4718      	bx	r3
 801abd0:	4770      	bx	lr
 801abd2:	bf00      	nop
 801abd4:	2000b450 	.word	0x2000b450

0801abd8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801abd8:	4770      	bx	lr
	...

0801abdc <_ZN8touchgfx11Application4drawEv>:
 801abdc:	4b09      	ldr	r3, [pc, #36]	; (801ac04 <_ZN8touchgfx11Application4drawEv+0x28>)
 801abde:	b507      	push	{r0, r1, r2, lr}
 801abe0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801abe4:	2100      	movs	r1, #0
 801abe6:	4b08      	ldr	r3, [pc, #32]	; (801ac08 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801abe8:	9100      	str	r1, [sp, #0]
 801abea:	4669      	mov	r1, sp
 801abec:	f9b3 3000 	ldrsh.w	r3, [r3]
 801abf0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801abf4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801abf8:	6803      	ldr	r3, [r0, #0]
 801abfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801abfc:	4798      	blx	r3
 801abfe:	b003      	add	sp, #12
 801ac00:	f85d fb04 	ldr.w	pc, [sp], #4
 801ac04:	2000b3c8 	.word	0x2000b3c8
 801ac08:	2000b3ca 	.word	0x2000b3ca

0801ac0c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801ac0c:	4b03      	ldr	r3, [pc, #12]	; (801ac1c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801ac0e:	6818      	ldr	r0, [r3, #0]
 801ac10:	b110      	cbz	r0, 801ac18 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801ac12:	6803      	ldr	r3, [r0, #0]
 801ac14:	69db      	ldr	r3, [r3, #28]
 801ac16:	4718      	bx	r3
 801ac18:	4770      	bx	lr
 801ac1a:	bf00      	nop
 801ac1c:	2000b450 	.word	0x2000b450

0801ac20 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801ac20:	4b03      	ldr	r3, [pc, #12]	; (801ac30 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801ac22:	6818      	ldr	r0, [r3, #0]
 801ac24:	b110      	cbz	r0, 801ac2c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801ac26:	6803      	ldr	r3, [r0, #0]
 801ac28:	6a1b      	ldr	r3, [r3, #32]
 801ac2a:	4718      	bx	r3
 801ac2c:	4770      	bx	lr
 801ac2e:	bf00      	nop
 801ac30:	2000b450 	.word	0x2000b450

0801ac34 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801ac34:	4b03      	ldr	r3, [pc, #12]	; (801ac44 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801ac36:	6818      	ldr	r0, [r3, #0]
 801ac38:	b110      	cbz	r0, 801ac40 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801ac3a:	6803      	ldr	r3, [r0, #0]
 801ac3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ac3e:	4718      	bx	r3
 801ac40:	4770      	bx	lr
 801ac42:	bf00      	nop
 801ac44:	2000b450 	.word	0x2000b450

0801ac48 <_ZN8touchgfx11Application15handleTickEventEv>:
 801ac48:	b570      	push	{r4, r5, r6, lr}
 801ac4a:	4d34      	ldr	r5, [pc, #208]	; (801ad1c <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 801ac4c:	4604      	mov	r4, r0
 801ac4e:	6828      	ldr	r0, [r5, #0]
 801ac50:	b140      	cbz	r0, 801ac64 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ac52:	7a03      	ldrb	r3, [r0, #8]
 801ac54:	b933      	cbnz	r3, 801ac64 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ac56:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801ac5a:	6803      	ldr	r3, [r0, #0]
 801ac5c:	689b      	ldr	r3, [r3, #8]
 801ac5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac62:	4718      	bx	r3
 801ac64:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801ac68:	b97b      	cbnz	r3, 801ac8a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ac6a:	b170      	cbz	r0, 801ac8a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ac6c:	7a03      	ldrb	r3, [r0, #8]
 801ac6e:	b163      	cbz	r3, 801ac8a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ac70:	4b2b      	ldr	r3, [pc, #172]	; (801ad20 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801ac72:	6818      	ldr	r0, [r3, #0]
 801ac74:	b110      	cbz	r0, 801ac7c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801ac76:	6803      	ldr	r3, [r0, #0]
 801ac78:	691b      	ldr	r3, [r3, #16]
 801ac7a:	4798      	blx	r3
 801ac7c:	6828      	ldr	r0, [r5, #0]
 801ac7e:	6803      	ldr	r3, [r0, #0]
 801ac80:	68db      	ldr	r3, [r3, #12]
 801ac82:	4798      	blx	r3
 801ac84:	2301      	movs	r3, #1
 801ac86:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801ac8a:	2500      	movs	r5, #0
 801ac8c:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801ac90:	42a8      	cmp	r0, r5
 801ac92:	dd0c      	ble.n	801acae <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801ac94:	1963      	adds	r3, r4, r5
 801ac96:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801ac9a:	b132      	cbz	r2, 801acaa <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801ac9c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801aca0:	4413      	add	r3, r2
 801aca2:	6858      	ldr	r0, [r3, #4]
 801aca4:	6803      	ldr	r3, [r0, #0]
 801aca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aca8:	4798      	blx	r3
 801acaa:	3501      	adds	r5, #1
 801acac:	e7ee      	b.n	801ac8c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801acae:	2300      	movs	r3, #0
 801acb0:	461a      	mov	r2, r3
 801acb2:	4298      	cmp	r0, r3
 801acb4:	d114      	bne.n	801ace0 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801acb6:	1d25      	adds	r5, r4, #4
 801acb8:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801acbc:	1e48      	subs	r0, r1, #1
 801acbe:	b280      	uxth	r0, r0
 801acc0:	4291      	cmp	r1, r2
 801acc2:	dd24      	ble.n	801ad0e <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801acc4:	4288      	cmp	r0, r1
 801acc6:	d2fb      	bcs.n	801acc0 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 801acc8:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801accc:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801acd0:	3304      	adds	r3, #4
 801acd2:	428b      	cmp	r3, r1
 801acd4:	d018      	beq.n	801ad08 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801acd6:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801acda:	f843 6c04 	str.w	r6, [r3, #-4]
 801acde:	e7f8      	b.n	801acd2 <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 801ace0:	18e1      	adds	r1, r4, r3
 801ace2:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801ace6:	b16d      	cbz	r5, 801ad04 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 801ace8:	429a      	cmp	r2, r3
 801acea:	d00a      	beq.n	801ad02 <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 801acec:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801acf0:	4431      	add	r1, r6
 801acf2:	684e      	ldr	r6, [r1, #4]
 801acf4:	b291      	uxth	r1, r2
 801acf6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801acfa:	604e      	str	r6, [r1, #4]
 801acfc:	18a1      	adds	r1, r4, r2
 801acfe:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801ad02:	3201      	adds	r2, #1
 801ad04:	3301      	adds	r3, #1
 801ad06:	e7d4      	b.n	801acb2 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801ad08:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801ad0c:	e7d4      	b.n	801acb8 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801ad0e:	4b04      	ldr	r3, [pc, #16]	; (801ad20 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801ad10:	6818      	ldr	r0, [r3, #0]
 801ad12:	b110      	cbz	r0, 801ad1a <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801ad14:	6803      	ldr	r3, [r0, #0]
 801ad16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad18:	e7a1      	b.n	801ac5e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801ad1a:	bd70      	pop	{r4, r5, r6, pc}
 801ad1c:	2000b454 	.word	0x2000b454
 801ad20:	2000b450 	.word	0x2000b450

0801ad24 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801ad24:	b570      	push	{r4, r5, r6, lr}
 801ad26:	4606      	mov	r6, r0
 801ad28:	460c      	mov	r4, r1
 801ad2a:	b929      	cbnz	r1, 801ad38 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801ad2c:	4b0c      	ldr	r3, [pc, #48]	; (801ad60 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801ad2e:	2165      	movs	r1, #101	; 0x65
 801ad30:	4a0c      	ldr	r2, [pc, #48]	; (801ad64 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801ad32:	480d      	ldr	r0, [pc, #52]	; (801ad68 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801ad34:	f00c f88a 	bl	8026e4c <__assert_func>
 801ad38:	2300      	movs	r3, #0
 801ad3a:	4d0c      	ldr	r5, [pc, #48]	; (801ad6c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801ad3c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801ad40:	6828      	ldr	r0, [r5, #0]
 801ad42:	b110      	cbz	r0, 801ad4a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801ad44:	6803      	ldr	r3, [r0, #0]
 801ad46:	695b      	ldr	r3, [r3, #20]
 801ad48:	4798      	blx	r3
 801ad4a:	602c      	str	r4, [r5, #0]
 801ad4c:	4620      	mov	r0, r4
 801ad4e:	6823      	ldr	r3, [r4, #0]
 801ad50:	68db      	ldr	r3, [r3, #12]
 801ad52:	4798      	blx	r3
 801ad54:	6833      	ldr	r3, [r6, #0]
 801ad56:	4630      	mov	r0, r6
 801ad58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad5e:	4718      	bx	r3
 801ad60:	0802b378 	.word	0x0802b378
 801ad64:	0802b448 	.word	0x0802b448
 801ad68:	0802b382 	.word	0x0802b382
 801ad6c:	2000b450 	.word	0x2000b450

0801ad70 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801ad70:	b510      	push	{r4, lr}
 801ad72:	f9b1 4000 	ldrsh.w	r4, [r1]
 801ad76:	888a      	ldrh	r2, [r1, #4]
 801ad78:	f9b0 3000 	ldrsh.w	r3, [r0]
 801ad7c:	4422      	add	r2, r4
 801ad7e:	b212      	sxth	r2, r2
 801ad80:	4293      	cmp	r3, r2
 801ad82:	da15      	bge.n	801adb0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801ad84:	8882      	ldrh	r2, [r0, #4]
 801ad86:	4413      	add	r3, r2
 801ad88:	b21b      	sxth	r3, r3
 801ad8a:	429c      	cmp	r4, r3
 801ad8c:	da10      	bge.n	801adb0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801ad8e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801ad92:	88c9      	ldrh	r1, [r1, #6]
 801ad94:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801ad98:	4419      	add	r1, r3
 801ad9a:	b209      	sxth	r1, r1
 801ad9c:	428a      	cmp	r2, r1
 801ad9e:	da07      	bge.n	801adb0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801ada0:	88c0      	ldrh	r0, [r0, #6]
 801ada2:	4410      	add	r0, r2
 801ada4:	b200      	sxth	r0, r0
 801ada6:	4283      	cmp	r3, r0
 801ada8:	bfac      	ite	ge
 801adaa:	2000      	movge	r0, #0
 801adac:	2001      	movlt	r0, #1
 801adae:	bd10      	pop	{r4, pc}
 801adb0:	2000      	movs	r0, #0
 801adb2:	e7fc      	b.n	801adae <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801adb4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801adb4:	b570      	push	{r4, r5, r6, lr}
 801adb6:	f9b1 4000 	ldrsh.w	r4, [r1]
 801adba:	f9b0 5000 	ldrsh.w	r5, [r0]
 801adbe:	42ac      	cmp	r4, r5
 801adc0:	db18      	blt.n	801adf4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801adc2:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801adc6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801adca:	429a      	cmp	r2, r3
 801adcc:	db12      	blt.n	801adf4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801adce:	8886      	ldrh	r6, [r0, #4]
 801add0:	4435      	add	r5, r6
 801add2:	888e      	ldrh	r6, [r1, #4]
 801add4:	4434      	add	r4, r6
 801add6:	b22d      	sxth	r5, r5
 801add8:	b224      	sxth	r4, r4
 801adda:	42a5      	cmp	r5, r4
 801addc:	db0a      	blt.n	801adf4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801adde:	88c0      	ldrh	r0, [r0, #6]
 801ade0:	4418      	add	r0, r3
 801ade2:	88cb      	ldrh	r3, [r1, #6]
 801ade4:	441a      	add	r2, r3
 801ade6:	b200      	sxth	r0, r0
 801ade8:	b212      	sxth	r2, r2
 801adea:	4290      	cmp	r0, r2
 801adec:	bfb4      	ite	lt
 801adee:	2000      	movlt	r0, #0
 801adf0:	2001      	movge	r0, #1
 801adf2:	bd70      	pop	{r4, r5, r6, pc}
 801adf4:	2000      	movs	r0, #0
 801adf6:	e7fc      	b.n	801adf2 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801adf8 <_ZN8touchgfx11Application11getInstanceEv>:
 801adf8:	4b01      	ldr	r3, [pc, #4]	; (801ae00 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801adfa:	6818      	ldr	r0, [r3, #0]
 801adfc:	4770      	bx	lr
 801adfe:	bf00      	nop
 801ae00:	2000b460 	.word	0x2000b460

0801ae04 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801ae04:	2300      	movs	r3, #0
 801ae06:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801ae0a:	30a8      	adds	r0, #168	; 0xa8
 801ae0c:	f820 3c24 	strh.w	r3, [r0, #-36]
 801ae10:	f802 3b01 	strb.w	r3, [r2], #1
 801ae14:	4282      	cmp	r2, r0
 801ae16:	d1fb      	bne.n	801ae10 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801ae18:	4770      	bx	lr

0801ae1a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801ae1a:	4603      	mov	r3, r0
 801ae1c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801ae20:	2200      	movs	r2, #0
 801ae22:	801a      	strh	r2, [r3, #0]
 801ae24:	3308      	adds	r3, #8
 801ae26:	f823 2c06 	strh.w	r2, [r3, #-6]
 801ae2a:	f823 2c04 	strh.w	r2, [r3, #-4]
 801ae2e:	f823 2c02 	strh.w	r2, [r3, #-2]
 801ae32:	428b      	cmp	r3, r1
 801ae34:	d1f5      	bne.n	801ae22 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801ae36:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801ae3a:	4770      	bx	lr

0801ae3c <_ZN8touchgfx11ApplicationC1Ev>:
 801ae3c:	b570      	push	{r4, r5, r6, lr}
 801ae3e:	4b1a      	ldr	r3, [pc, #104]	; (801aea8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801ae40:	2500      	movs	r5, #0
 801ae42:	4604      	mov	r4, r0
 801ae44:	30a8      	adds	r0, #168	; 0xa8
 801ae46:	f840 3ca8 	str.w	r3, [r0, #-168]
 801ae4a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801ae4e:	f7ff ffe4 	bl	801ae1a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ae52:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801ae56:	f7ff ffe0 	bl	801ae1a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ae5a:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801ae5e:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801ae62:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801ae66:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801ae6a:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801ae6e:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801ae72:	490e      	ldr	r1, [pc, #56]	; (801aeac <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801ae74:	480e      	ldr	r0, [pc, #56]	; (801aeb0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801ae76:	f00a fac5 	bl	8025404 <CRC_Lock>
 801ae7a:	4e0e      	ldr	r6, [pc, #56]	; (801aeb4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801ae7c:	4b0e      	ldr	r3, [pc, #56]	; (801aeb8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801ae7e:	b158      	cbz	r0, 801ae98 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801ae80:	801d      	strh	r5, [r3, #0]
 801ae82:	2300      	movs	r3, #0
 801ae84:	4a0d      	ldr	r2, [pc, #52]	; (801aebc <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801ae86:	4620      	mov	r0, r4
 801ae88:	6013      	str	r3, [r2, #0]
 801ae8a:	4a0d      	ldr	r2, [pc, #52]	; (801aec0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801ae8c:	6033      	str	r3, [r6, #0]
 801ae8e:	6013      	str	r3, [r2, #0]
 801ae90:	f7ff ffb8 	bl	801ae04 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801ae94:	4620      	mov	r0, r4
 801ae96:	bd70      	pop	{r4, r5, r6, pc}
 801ae98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ae9c:	2002      	movs	r0, #2
 801ae9e:	801a      	strh	r2, [r3, #0]
 801aea0:	6030      	str	r0, [r6, #0]
 801aea2:	f000 ffa5 	bl	801bdf0 <_ZN8touchgfx6Screen4drawEv>
 801aea6:	e7ec      	b.n	801ae82 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801aea8:	0802b40c 	.word	0x0802b40c
 801aeac:	b5e8b5cd 	.word	0xb5e8b5cd
 801aeb0:	f407a5c2 	.word	0xf407a5c2
 801aeb4:	2000b450 	.word	0x2000b450
 801aeb8:	20000040 	.word	0x20000040
 801aebc:	2000b460 	.word	0x2000b460
 801aec0:	2000b454 	.word	0x2000b454

0801aec4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801aec4:	2300      	movs	r3, #0
 801aec6:	8003      	strh	r3, [r0, #0]
 801aec8:	8043      	strh	r3, [r0, #2]
 801aeca:	8083      	strh	r3, [r0, #4]
 801aecc:	80c3      	strh	r3, [r0, #6]
 801aece:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801aed2:	4293      	cmp	r3, r2
 801aed4:	b530      	push	{r4, r5, lr}
 801aed6:	d912      	bls.n	801aefe <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801aed8:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801aedc:	3b01      	subs	r3, #1
 801aede:	6825      	ldr	r5, [r4, #0]
 801aee0:	b29b      	uxth	r3, r3
 801aee2:	6005      	str	r5, [r0, #0]
 801aee4:	4293      	cmp	r3, r2
 801aee6:	6865      	ldr	r5, [r4, #4]
 801aee8:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801aeec:	6045      	str	r5, [r0, #4]
 801aeee:	d906      	bls.n	801aefe <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801aef0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801aef4:	681d      	ldr	r5, [r3, #0]
 801aef6:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801aefa:	685d      	ldr	r5, [r3, #4]
 801aefc:	6065      	str	r5, [r4, #4]
 801aefe:	bd30      	pop	{r4, r5, pc}

0801af00 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801af00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801af02:	466b      	mov	r3, sp
 801af04:	4604      	mov	r4, r0
 801af06:	e883 0006 	stmia.w	r3, {r1, r2}
 801af0a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801af0e:	2a07      	cmp	r2, #7
 801af10:	d906      	bls.n	801af20 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801af12:	4b09      	ldr	r3, [pc, #36]	; (801af38 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801af14:	f240 118f 	movw	r1, #399	; 0x18f
 801af18:	4a08      	ldr	r2, [pc, #32]	; (801af3c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801af1a:	4809      	ldr	r0, [pc, #36]	; (801af40 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801af1c:	f00b ff96 	bl	8026e4c <__assert_func>
 801af20:	1c51      	adds	r1, r2, #1
 801af22:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801af26:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801af2a:	cb03      	ldmia	r3!, {r0, r1}
 801af2c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801af30:	6069      	str	r1, [r5, #4]
 801af32:	b003      	add	sp, #12
 801af34:	bd30      	pop	{r4, r5, pc}
 801af36:	bf00      	nop
 801af38:	0802b3ac 	.word	0x0802b3ac
 801af3c:	0802b48c 	.word	0x0802b48c
 801af40:	0802b3db 	.word	0x0802b3db

0801af44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801af44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af48:	b089      	sub	sp, #36	; 0x24
 801af4a:	4606      	mov	r6, r0
 801af4c:	466c      	mov	r4, sp
 801af4e:	4620      	mov	r0, r4
 801af50:	e884 0006 	stmia.w	r4, {r1, r2}
 801af54:	f7fb fb93 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 801af58:	bbb0      	cbnz	r0, 801afc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801af5a:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801af5e:	b1fd      	cbz	r5, 801afa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801af60:	3d01      	subs	r5, #1
 801af62:	af04      	add	r7, sp, #16
 801af64:	f04f 090a 	mov.w	r9, #10
 801af68:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801af6c:	ab02      	add	r3, sp, #8
 801af6e:	fa1f f885 	uxth.w	r8, r5
 801af72:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801af76:	6851      	ldr	r1, [r2, #4]
 801af78:	c303      	stmia	r3!, {r0, r1}
 801af7a:	4621      	mov	r1, r4
 801af7c:	a802      	add	r0, sp, #8
 801af7e:	f7ff ff19 	bl	801adb4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801af82:	bb08      	cbnz	r0, 801afc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801af84:	a902      	add	r1, sp, #8
 801af86:	4620      	mov	r0, r4
 801af88:	f7ff ff14 	bl	801adb4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801af8c:	b1f8      	cbz	r0, 801afce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801af8e:	4642      	mov	r2, r8
 801af90:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801af94:	a806      	add	r0, sp, #24
 801af96:	f7ff ff95 	bl	801aec4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801af9a:	f115 35ff 	adds.w	r5, r5, #4294967295
 801af9e:	d2e3      	bcs.n	801af68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801afa0:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801afa4:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801afa8:	2b08      	cmp	r3, #8
 801afaa:	d108      	bne.n	801afbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801afac:	4629      	mov	r1, r5
 801afae:	a806      	add	r0, sp, #24
 801afb0:	2207      	movs	r2, #7
 801afb2:	f7ff ff87 	bl	801aec4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801afb6:	a906      	add	r1, sp, #24
 801afb8:	4620      	mov	r0, r4
 801afba:	f7fd f9d9 	bl	8018370 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801afbe:	4628      	mov	r0, r5
 801afc0:	e894 0006 	ldmia.w	r4, {r1, r2}
 801afc4:	f7ff ff9c 	bl	801af00 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801afc8:	b009      	add	sp, #36	; 0x24
 801afca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801afce:	4621      	mov	r1, r4
 801afd0:	a802      	add	r0, sp, #8
 801afd2:	f7ff fecd 	bl	801ad70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801afd6:	b150      	cbz	r0, 801afee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801afd8:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801afdc:	a806      	add	r0, sp, #24
 801afde:	4642      	mov	r2, r8
 801afe0:	f7ff ff70 	bl	801aec4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801afe4:	a902      	add	r1, sp, #8
 801afe6:	4620      	mov	r0, r4
 801afe8:	f7fd f9c2 	bl	8018370 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801afec:	e7d5      	b.n	801af9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801afee:	e894 0003 	ldmia.w	r4, {r0, r1}
 801aff2:	e887 0003 	stmia.w	r7, {r0, r1}
 801aff6:	a902      	add	r1, sp, #8
 801aff8:	4638      	mov	r0, r7
 801affa:	f7fd f9b9 	bl	8018370 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801affe:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b002:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801b006:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801b00a:	fb13 f302 	smulbb	r3, r3, r2
 801b00e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801b012:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801b016:	fb11 f102 	smulbb	r1, r1, r2
 801b01a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801b01e:	fb09 f303 	mul.w	r3, r9, r3
 801b022:	fb12 1100 	smlabb	r1, r2, r0, r1
 801b026:	220b      	movs	r2, #11
 801b028:	434a      	muls	r2, r1
 801b02a:	4293      	cmp	r3, r2
 801b02c:	dab5      	bge.n	801af9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801b02e:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801b032:	a806      	add	r0, sp, #24
 801b034:	4642      	mov	r2, r8
 801b036:	f7ff ff45 	bl	801aec4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b03a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b03e:	e884 0003 	stmia.w	r4, {r0, r1}
 801b042:	e7aa      	b.n	801af9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801b044 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801b044:	4b1d      	ldr	r3, [pc, #116]	; (801b0bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801b046:	b530      	push	{r4, r5, lr}
 801b048:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b04c:	b085      	sub	sp, #20
 801b04e:	4b1c      	ldr	r3, [pc, #112]	; (801b0c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801b050:	460c      	mov	r4, r1
 801b052:	2100      	movs	r1, #0
 801b054:	4605      	mov	r5, r0
 801b056:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b05a:	6820      	ldr	r0, [r4, #0]
 801b05c:	9100      	str	r1, [sp, #0]
 801b05e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b062:	ab02      	add	r3, sp, #8
 801b064:	6861      	ldr	r1, [r4, #4]
 801b066:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b06a:	c303      	stmia	r3!, {r0, r1}
 801b06c:	4669      	mov	r1, sp
 801b06e:	a802      	add	r0, sp, #8
 801b070:	f7fb fac2 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 801b074:	ab02      	add	r3, sp, #8
 801b076:	cb03      	ldmia	r3!, {r0, r1}
 801b078:	4b12      	ldr	r3, [pc, #72]	; (801b0c4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801b07a:	6020      	str	r0, [r4, #0]
 801b07c:	6818      	ldr	r0, [r3, #0]
 801b07e:	6061      	str	r1, [r4, #4]
 801b080:	b138      	cbz	r0, 801b092 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801b082:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801b086:	b133      	cbz	r3, 801b096 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801b088:	6821      	ldr	r1, [r4, #0]
 801b08a:	4628      	mov	r0, r5
 801b08c:	6862      	ldr	r2, [r4, #4]
 801b08e:	f7ff ff59 	bl	801af44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b092:	b005      	add	sp, #20
 801b094:	bd30      	pop	{r4, r5, pc}
 801b096:	6803      	ldr	r3, [r0, #0]
 801b098:	4621      	mov	r1, r4
 801b09a:	689b      	ldr	r3, [r3, #8]
 801b09c:	4798      	blx	r3
 801b09e:	4b0a      	ldr	r3, [pc, #40]	; (801b0c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801b0a0:	6818      	ldr	r0, [r3, #0]
 801b0a2:	b118      	cbz	r0, 801b0ac <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801b0a4:	6803      	ldr	r3, [r0, #0]
 801b0a6:	4621      	mov	r1, r4
 801b0a8:	689b      	ldr	r3, [r3, #8]
 801b0aa:	4798      	blx	r3
 801b0ac:	4b07      	ldr	r3, [pc, #28]	; (801b0cc <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801b0ae:	4621      	mov	r1, r4
 801b0b0:	6818      	ldr	r0, [r3, #0]
 801b0b2:	6803      	ldr	r3, [r0, #0]
 801b0b4:	695b      	ldr	r3, [r3, #20]
 801b0b6:	4798      	blx	r3
 801b0b8:	e7eb      	b.n	801b092 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801b0ba:	bf00      	nop
 801b0bc:	2000b3c8 	.word	0x2000b3c8
 801b0c0:	2000b3ca 	.word	0x2000b3ca
 801b0c4:	2000b450 	.word	0x2000b450
 801b0c8:	2000b44c 	.word	0x2000b44c
 801b0cc:	2000b3d4 	.word	0x2000b3d4

0801b0d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801b0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0d4:	4604      	mov	r4, r0
 801b0d6:	b09b      	sub	sp, #108	; 0x6c
 801b0d8:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801b0dc:	b129      	cbz	r1, 801b0ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801b0de:	2300      	movs	r3, #0
 801b0e0:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801b0e4:	b01b      	add	sp, #108	; 0x6c
 801b0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0ea:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801b0ee:	4630      	mov	r0, r6
 801b0f0:	f7fb fac5 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b0f4:	4605      	mov	r5, r0
 801b0f6:	b940      	cbnz	r0, 801b10a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801b0f8:	4620      	mov	r0, r4
 801b0fa:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b0fe:	f7ff ff21 	bl	801af44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b102:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801b106:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801b10a:	4baf      	ldr	r3, [pc, #700]	; (801b3c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f8>)
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	b33b      	cbz	r3, 801b160 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801b110:	4dae      	ldr	r5, [pc, #696]	; (801b3cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2fc>)
 801b112:	4628      	mov	r0, r5
 801b114:	f7fb fab3 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b118:	4606      	mov	r6, r0
 801b11a:	bb08      	cbnz	r0, 801b160 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801b11c:	4628      	mov	r0, r5
 801b11e:	f7ff fcb1 	bl	801aa84 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b122:	6829      	ldr	r1, [r5, #0]
 801b124:	686a      	ldr	r2, [r5, #4]
 801b126:	4620      	mov	r0, r4
 801b128:	f7ff ff0c 	bl	801af44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b12c:	802e      	strh	r6, [r5, #0]
 801b12e:	806e      	strh	r6, [r5, #2]
 801b130:	80ae      	strh	r6, [r5, #4]
 801b132:	80ee      	strh	r6, [r5, #6]
 801b134:	4fa6      	ldr	r7, [pc, #664]	; (801b3d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x300>)
 801b136:	a809      	add	r0, sp, #36	; 0x24
 801b138:	f7ff fe6f 	bl	801ae1a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b13c:	883d      	ldrh	r5, [r7, #0]
 801b13e:	462e      	mov	r6, r5
 801b140:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b144:	42b3      	cmp	r3, r6
 801b146:	d910      	bls.n	801b16a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801b148:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b14c:	3601      	adds	r6, #1
 801b14e:	a809      	add	r0, sp, #36	; 0x24
 801b150:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801b154:	b2b6      	uxth	r6, r6
 801b156:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801b15a:	f7ff fed1 	bl	801af00 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b15e:	e7ef      	b.n	801b140 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801b160:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b164:	2b00      	cmp	r3, #0
 801b166:	d1e5      	bne.n	801b134 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801b168:	e7bc      	b.n	801b0e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b16a:	462e      	mov	r6, r5
 801b16c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801b170:	42b3      	cmp	r3, r6
 801b172:	d90b      	bls.n	801b18c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801b174:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b178:	3601      	adds	r6, #1
 801b17a:	4620      	mov	r0, r4
 801b17c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801b180:	b2b6      	uxth	r6, r6
 801b182:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801b186:	f7ff fedd 	bl	801af44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b18a:	e7ef      	b.n	801b16c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801b18c:	4e91      	ldr	r6, [pc, #580]	; (801b3d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x304>)
 801b18e:	6833      	ldr	r3, [r6, #0]
 801b190:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b194:	2b01      	cmp	r3, #1
 801b196:	f040 8092 	bne.w	801b2be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ee>
 801b19a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801b19e:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801b1a2:	f04f 0900 	mov.w	r9, #0
 801b1a6:	33aa      	adds	r3, #170	; 0xaa
 801b1a8:	42a8      	cmp	r0, r5
 801b1aa:	f103 0308 	add.w	r3, r3, #8
 801b1ae:	dd0a      	ble.n	801b1c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf6>
 801b1b0:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801b1b4:	3501      	adds	r5, #1
 801b1b6:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801b1ba:	440a      	add	r2, r1
 801b1bc:	b212      	sxth	r2, r2
 801b1be:	4591      	cmp	r9, r2
 801b1c0:	bfb8      	it	lt
 801b1c2:	4691      	movlt	r9, r2
 801b1c4:	e7f0      	b.n	801b1a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd8>
 801b1c6:	4b84      	ldr	r3, [pc, #528]	; (801b3d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x308>)
 801b1c8:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801b3e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x310>
 801b1cc:	881d      	ldrh	r5, [r3, #0]
 801b1ce:	2300      	movs	r3, #0
 801b1d0:	2d0f      	cmp	r5, #15
 801b1d2:	bf8c      	ite	hi
 801b1d4:	08ed      	lsrhi	r5, r5, #3
 801b1d6:	2501      	movls	r5, #1
 801b1d8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801b1dc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b1e0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801b1e4:	6830      	ldr	r0, [r6, #0]
 801b1e6:	440b      	add	r3, r1
 801b1e8:	6802      	ldr	r2, [r0, #0]
 801b1ea:	b21b      	sxth	r3, r3
 801b1ec:	4599      	cmp	r9, r3
 801b1ee:	dd49      	ble.n	801b284 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b4>
 801b1f0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801b1f4:	4798      	blx	r3
 801b1f6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b1fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b1fe:	4413      	add	r3, r2
 801b200:	b21b      	sxth	r3, r3
 801b202:	195a      	adds	r2, r3, r5
 801b204:	4290      	cmp	r0, r2
 801b206:	da07      	bge.n	801b218 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 801b208:	4581      	cmp	r9, r0
 801b20a:	dd05      	ble.n	801b218 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x148>
 801b20c:	4298      	cmp	r0, r3
 801b20e:	da33      	bge.n	801b278 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 801b210:	2b00      	cmp	r3, #0
 801b212:	dd31      	ble.n	801b278 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a8>
 801b214:	4648      	mov	r0, r9
 801b216:	e004      	b.n	801b222 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x152>
 801b218:	4298      	cmp	r0, r3
 801b21a:	dbfb      	blt.n	801b214 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x144>
 801b21c:	4548      	cmp	r0, r9
 801b21e:	bfa8      	it	ge
 801b220:	4648      	movge	r0, r9
 801b222:	f9b8 2000 	ldrsh.w	r2, [r8]
 801b226:	2100      	movs	r1, #0
 801b228:	1ac0      	subs	r0, r0, r3
 801b22a:	f8b7 a000 	ldrh.w	sl, [r7]
 801b22e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b232:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b236:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b23a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b23e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b242:	4553      	cmp	r3, sl
 801b244:	d9ca      	bls.n	801b1dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801b246:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801b24a:	ab07      	add	r3, sp, #28
 801b24c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b250:	6851      	ldr	r1, [r2, #4]
 801b252:	c303      	stmia	r3!, {r0, r1}
 801b254:	a807      	add	r0, sp, #28
 801b256:	a905      	add	r1, sp, #20
 801b258:	f7fb f9ce 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 801b25c:	a807      	add	r0, sp, #28
 801b25e:	f7fb fa0e 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b262:	b920      	cbnz	r0, 801b26e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x19e>
 801b264:	6823      	ldr	r3, [r4, #0]
 801b266:	a907      	add	r1, sp, #28
 801b268:	4620      	mov	r0, r4
 801b26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b26c:	4798      	blx	r3
 801b26e:	f10a 0a01 	add.w	sl, sl, #1
 801b272:	fa1f fa8a 	uxth.w	sl, sl
 801b276:	e7e2      	b.n	801b23e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16e>
 801b278:	6830      	ldr	r0, [r6, #0]
 801b27a:	2101      	movs	r1, #1
 801b27c:	6803      	ldr	r3, [r0, #0]
 801b27e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b280:	4798      	blx	r3
 801b282:	e7ab      	b.n	801b1dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801b284:	69d3      	ldr	r3, [r2, #28]
 801b286:	4798      	blx	r3
 801b288:	4b54      	ldr	r3, [pc, #336]	; (801b3dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>)
 801b28a:	781b      	ldrb	r3, [r3, #0]
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	f43f af29 	beq.w	801b0e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b292:	2300      	movs	r3, #0
 801b294:	883d      	ldrh	r5, [r7, #0]
 801b296:	34ea      	adds	r4, #234	; 0xea
 801b298:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801b29c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801b2a0:	42ab      	cmp	r3, r5
 801b2a2:	f67f af1f 	bls.w	801b0e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b2a6:	ab1a      	add	r3, sp, #104	; 0x68
 801b2a8:	4620      	mov	r0, r4
 801b2aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b2ae:	3501      	adds	r5, #1
 801b2b0:	3b44      	subs	r3, #68	; 0x44
 801b2b2:	b2ad      	uxth	r5, r5
 801b2b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b2b8:	f7ff fe22 	bl	801af00 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b2bc:	e7ee      	b.n	801b29c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1cc>
 801b2be:	2b02      	cmp	r3, #2
 801b2c0:	d16a      	bne.n	801b398 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 801b2c2:	f8df a120 	ldr.w	sl, [pc, #288]	; 801b3e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x314>
 801b2c6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b2ca:	42ab      	cmp	r3, r5
 801b2cc:	d9dc      	bls.n	801b288 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 801b2ce:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b2d2:	ab03      	add	r3, sp, #12
 801b2d4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b2d8:	6851      	ldr	r1, [r2, #4]
 801b2da:	c303      	stmia	r3!, {r0, r1}
 801b2dc:	f89a 3000 	ldrb.w	r3, [sl]
 801b2e0:	2b01      	cmp	r3, #1
 801b2e2:	d102      	bne.n	801b2ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x21a>
 801b2e4:	a803      	add	r0, sp, #12
 801b2e6:	f7ff fc43 	bl	801ab70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b2ea:	a803      	add	r0, sp, #12
 801b2ec:	f7fb f9c7 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b2f0:	2800      	cmp	r0, #0
 801b2f2:	d14a      	bne.n	801b38a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ba>
 801b2f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801b2f8:	f10d 0914 	add.w	r9, sp, #20
 801b2fc:	f10d 081c 	add.w	r8, sp, #28
 801b300:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b304:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b308:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b30c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b310:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b314:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b318:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801b31c:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801b320:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b324:	44dc      	add	ip, fp
 801b326:	6830      	ldr	r0, [r6, #0]
 801b328:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801b32c:	ebac 0c02 	sub.w	ip, ip, r2
 801b330:	f8d0 e000 	ldr.w	lr, [r0]
 801b334:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b338:	fa1f fc8c 	uxth.w	ip, ip
 801b33c:	f8cd c000 	str.w	ip, [sp]
 801b340:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801b344:	47d8      	blx	fp
 801b346:	f89a 3000 	ldrb.w	r3, [sl]
 801b34a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b34e:	2b01      	cmp	r3, #1
 801b350:	d11e      	bne.n	801b390 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c0>
 801b352:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b356:	e888 0003 	stmia.w	r8, {r0, r1}
 801b35a:	4640      	mov	r0, r8
 801b35c:	f7ff fb92 	bl	801aa84 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b360:	6823      	ldr	r3, [r4, #0]
 801b362:	4641      	mov	r1, r8
 801b364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b366:	4620      	mov	r0, r4
 801b368:	4798      	blx	r3
 801b36a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b36e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b372:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801b376:	4413      	add	r3, r2
 801b378:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801b37c:	440a      	add	r2, r1
 801b37e:	b21b      	sxth	r3, r3
 801b380:	b212      	sxth	r2, r2
 801b382:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b386:	4293      	cmp	r3, r2
 801b388:	dbc6      	blt.n	801b318 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x248>
 801b38a:	3501      	adds	r5, #1
 801b38c:	b2ad      	uxth	r5, r5
 801b38e:	e79a      	b.n	801b2c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f6>
 801b390:	6823      	ldr	r3, [r4, #0]
 801b392:	4649      	mov	r1, r9
 801b394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b396:	e7e6      	b.n	801b366 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x296>
 801b398:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b39c:	42ab      	cmp	r3, r5
 801b39e:	f67f af73 	bls.w	801b288 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 801b3a2:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b3a6:	ab07      	add	r3, sp, #28
 801b3a8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b3ac:	6851      	ldr	r1, [r2, #4]
 801b3ae:	c303      	stmia	r3!, {r0, r1}
 801b3b0:	a807      	add	r0, sp, #28
 801b3b2:	f7fb f964 	bl	801667e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b3b6:	b920      	cbnz	r0, 801b3c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f2>
 801b3b8:	6823      	ldr	r3, [r4, #0]
 801b3ba:	a907      	add	r1, sp, #28
 801b3bc:	4620      	mov	r0, r4
 801b3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b3c0:	4798      	blx	r3
 801b3c2:	3501      	adds	r5, #1
 801b3c4:	b2ad      	uxth	r5, r5
 801b3c6:	e7e7      	b.n	801b398 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 801b3c8:	2000b44c 	.word	0x2000b44c
 801b3cc:	2000b458 	.word	0x2000b458
 801b3d0:	20000040 	.word	0x20000040
 801b3d4:	2000b3d4 	.word	0x2000b3d4
 801b3d8:	2000b3ca 	.word	0x2000b3ca
 801b3dc:	2000b3d2 	.word	0x2000b3d2
 801b3e0:	2000b3c8 	.word	0x2000b3c8
 801b3e4:	2000b3cc 	.word	0x2000b3cc

0801b3e8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801b3e8:	4b03      	ldr	r3, [pc, #12]	; (801b3f8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801b3ea:	2200      	movs	r2, #0
 801b3ec:	801a      	strh	r2, [r3, #0]
 801b3ee:	805a      	strh	r2, [r3, #2]
 801b3f0:	809a      	strh	r2, [r3, #4]
 801b3f2:	80da      	strh	r2, [r3, #6]
 801b3f4:	4770      	bx	lr
 801b3f6:	bf00      	nop
 801b3f8:	2000b458 	.word	0x2000b458

0801b3fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b400:	b099      	sub	sp, #100	; 0x64
 801b402:	4607      	mov	r7, r0
 801b404:	4614      	mov	r4, r2
 801b406:	461d      	mov	r5, r3
 801b408:	a802      	add	r0, sp, #8
 801b40a:	468a      	mov	sl, r1
 801b40c:	f000 fe38 	bl	801c080 <_ZN8touchgfx12TextProviderC1Ev>
 801b410:	683b      	ldr	r3, [r7, #0]
 801b412:	4638      	mov	r0, r7
 801b414:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801b418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b41a:	4798      	blx	r3
 801b41c:	462a      	mov	r2, r5
 801b41e:	2500      	movs	r5, #0
 801b420:	4621      	mov	r1, r4
 801b422:	4603      	mov	r3, r0
 801b424:	a802      	add	r0, sp, #8
 801b426:	462c      	mov	r4, r5
 801b428:	46a9      	mov	r9, r5
 801b42a:	46a8      	mov	r8, r5
 801b42c:	f000 fe6d 	bl	801c10a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b430:	2300      	movs	r3, #0
 801b432:	9301      	str	r3, [sp, #4]
 801b434:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b438:	429c      	cmp	r4, r3
 801b43a:	d002      	beq.n	801b442 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801b43c:	455c      	cmp	r4, fp
 801b43e:	bf18      	it	ne
 801b440:	4625      	movne	r5, r4
 801b442:	ab01      	add	r3, sp, #4
 801b444:	463a      	mov	r2, r7
 801b446:	4651      	mov	r1, sl
 801b448:	a802      	add	r0, sp, #8
 801b44a:	f001 f959 	bl	801c700 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b44e:	4604      	mov	r4, r0
 801b450:	b108      	cbz	r0, 801b456 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 801b452:	280a      	cmp	r0, #10
 801b454:	d10a      	bne.n	801b46c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 801b456:	45c1      	cmp	r9, r8
 801b458:	bf38      	it	cc
 801b45a:	46c1      	movcc	r9, r8
 801b45c:	f04f 0800 	mov.w	r8, #0
 801b460:	2c00      	cmp	r4, #0
 801b462:	d1e5      	bne.n	801b430 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801b464:	4648      	mov	r0, r9
 801b466:	b019      	add	sp, #100	; 0x64
 801b468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b46c:	9a01      	ldr	r2, [sp, #4]
 801b46e:	2a00      	cmp	r2, #0
 801b470:	d0de      	beq.n	801b430 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801b472:	7b56      	ldrb	r6, [r2, #13]
 801b474:	4629      	mov	r1, r5
 801b476:	683b      	ldr	r3, [r7, #0]
 801b478:	0076      	lsls	r6, r6, #1
 801b47a:	8894      	ldrh	r4, [r2, #4]
 801b47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b47e:	f406 7080 	and.w	r0, r6, #256	; 0x100
 801b482:	7a96      	ldrb	r6, [r2, #10]
 801b484:	4306      	orrs	r6, r0
 801b486:	4638      	mov	r0, r7
 801b488:	4798      	blx	r3
 801b48a:	4430      	add	r0, r6
 801b48c:	4480      	add	r8, r0
 801b48e:	fa1f f888 	uxth.w	r8, r8
 801b492:	e7e5      	b.n	801b460 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

0801b494 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801b494:	b508      	push	{r3, lr}
 801b496:	6803      	ldr	r3, [r0, #0]
 801b498:	68db      	ldr	r3, [r3, #12]
 801b49a:	4798      	blx	r3
 801b49c:	b128      	cbz	r0, 801b4aa <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801b49e:	7b43      	ldrb	r3, [r0, #13]
 801b4a0:	7a80      	ldrb	r0, [r0, #10]
 801b4a2:	005b      	lsls	r3, r3, #1
 801b4a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b4a8:	4318      	orrs	r0, r3
 801b4aa:	bd08      	pop	{r3, pc}

0801b4ac <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801b4ac:	b40e      	push	{r1, r2, r3}
 801b4ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4b0:	b098      	sub	sp, #96	; 0x60
 801b4b2:	4605      	mov	r5, r0
 801b4b4:	ab1d      	add	r3, sp, #116	; 0x74
 801b4b6:	a802      	add	r0, sp, #8
 801b4b8:	ae18      	add	r6, sp, #96	; 0x60
 801b4ba:	f853 4b04 	ldr.w	r4, [r3], #4
 801b4be:	9300      	str	r3, [sp, #0]
 801b4c0:	f000 fdde 	bl	801c080 <_ZN8touchgfx12TextProviderC1Ev>
 801b4c4:	682b      	ldr	r3, [r5, #0]
 801b4c6:	4628      	mov	r0, r5
 801b4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b4ca:	4798      	blx	r3
 801b4cc:	4621      	mov	r1, r4
 801b4ce:	2400      	movs	r4, #0
 801b4d0:	4603      	mov	r3, r0
 801b4d2:	9a00      	ldr	r2, [sp, #0]
 801b4d4:	a802      	add	r0, sp, #8
 801b4d6:	f000 fe18 	bl	801c10a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b4da:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801b4de:	462a      	mov	r2, r5
 801b4e0:	4633      	mov	r3, r6
 801b4e2:	4621      	mov	r1, r4
 801b4e4:	a802      	add	r0, sp, #8
 801b4e6:	f001 f90b 	bl	801c700 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b4ea:	b300      	cbz	r0, 801b52e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801b4ec:	280a      	cmp	r0, #10
 801b4ee:	d01a      	beq.n	801b526 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801b4f0:	9f01      	ldr	r7, [sp, #4]
 801b4f2:	b1c7      	cbz	r7, 801b526 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801b4f4:	7b78      	ldrb	r0, [r7, #13]
 801b4f6:	7a3b      	ldrb	r3, [r7, #8]
 801b4f8:	00c1      	lsls	r1, r0, #3
 801b4fa:	88aa      	ldrh	r2, [r5, #4]
 801b4fc:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b500:	4319      	orrs	r1, r3
 801b502:	0643      	lsls	r3, r0, #25
 801b504:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801b508:	bf48      	it	mi
 801b50a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801b50e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b512:	bf48      	it	mi
 801b514:	b219      	sxthmi	r1, r3
 801b516:	79fb      	ldrb	r3, [r7, #7]
 801b518:	4303      	orrs	r3, r0
 801b51a:	4413      	add	r3, r2
 801b51c:	1a5b      	subs	r3, r3, r1
 801b51e:	b29b      	uxth	r3, r3
 801b520:	42a3      	cmp	r3, r4
 801b522:	bfc8      	it	gt
 801b524:	b21c      	sxthgt	r4, r3
 801b526:	4633      	mov	r3, r6
 801b528:	462a      	mov	r2, r5
 801b52a:	2100      	movs	r1, #0
 801b52c:	e7da      	b.n	801b4e4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 801b52e:	b2a0      	uxth	r0, r4
 801b530:	b018      	add	sp, #96	; 0x60
 801b532:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b536:	b003      	add	sp, #12
 801b538:	4770      	bx	lr

0801b53a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801b53a:	b40e      	push	{r1, r2, r3}
 801b53c:	b530      	push	{r4, r5, lr}
 801b53e:	b098      	sub	sp, #96	; 0x60
 801b540:	4604      	mov	r4, r0
 801b542:	ab1b      	add	r3, sp, #108	; 0x6c
 801b544:	a802      	add	r0, sp, #8
 801b546:	f853 5b04 	ldr.w	r5, [r3], #4
 801b54a:	9301      	str	r3, [sp, #4]
 801b54c:	f000 fd98 	bl	801c080 <_ZN8touchgfx12TextProviderC1Ev>
 801b550:	6823      	ldr	r3, [r4, #0]
 801b552:	4620      	mov	r0, r4
 801b554:	2401      	movs	r4, #1
 801b556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b558:	4798      	blx	r3
 801b55a:	9a01      	ldr	r2, [sp, #4]
 801b55c:	4603      	mov	r3, r0
 801b55e:	4629      	mov	r1, r5
 801b560:	a802      	add	r0, sp, #8
 801b562:	f000 fdd2 	bl	801c10a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b566:	a802      	add	r0, sp, #8
 801b568:	f001 f9bc 	bl	801c8e4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b56c:	b2a3      	uxth	r3, r4
 801b56e:	b138      	cbz	r0, 801b580 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801b570:	280a      	cmp	r0, #10
 801b572:	a802      	add	r0, sp, #8
 801b574:	bf04      	itt	eq
 801b576:	3301      	addeq	r3, #1
 801b578:	b21c      	sxtheq	r4, r3
 801b57a:	f001 f9b3 	bl	801c8e4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b57e:	e7f5      	b.n	801b56c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801b580:	4618      	mov	r0, r3
 801b582:	b018      	add	sp, #96	; 0x60
 801b584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b588:	b003      	add	sp, #12
 801b58a:	4770      	bx	lr

0801b58c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801b58c:	b40e      	push	{r1, r2, r3}
 801b58e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b590:	b098      	sub	sp, #96	; 0x60
 801b592:	4604      	mov	r4, r0
 801b594:	26ff      	movs	r6, #255	; 0xff
 801b596:	ab1d      	add	r3, sp, #116	; 0x74
 801b598:	a802      	add	r0, sp, #8
 801b59a:	f853 5b04 	ldr.w	r5, [r3], #4
 801b59e:	9300      	str	r3, [sp, #0]
 801b5a0:	f000 fd6e 	bl	801c080 <_ZN8touchgfx12TextProviderC1Ev>
 801b5a4:	6823      	ldr	r3, [r4, #0]
 801b5a6:	4620      	mov	r0, r4
 801b5a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b5aa:	4798      	blx	r3
 801b5ac:	4629      	mov	r1, r5
 801b5ae:	4603      	mov	r3, r0
 801b5b0:	9a00      	ldr	r2, [sp, #0]
 801b5b2:	a802      	add	r0, sp, #8
 801b5b4:	ad18      	add	r5, sp, #96	; 0x60
 801b5b6:	f000 fda8 	bl	801c10a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b5ba:	2100      	movs	r1, #0
 801b5bc:	4622      	mov	r2, r4
 801b5be:	a802      	add	r0, sp, #8
 801b5c0:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801b5c4:	462b      	mov	r3, r5
 801b5c6:	f001 f89b 	bl	801c700 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b5ca:	b1d8      	cbz	r0, 801b604 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801b5cc:	280a      	cmp	r0, #10
 801b5ce:	d012      	beq.n	801b5f6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801b5d0:	9801      	ldr	r0, [sp, #4]
 801b5d2:	b180      	cbz	r0, 801b5f6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801b5d4:	7b47      	ldrb	r7, [r0, #13]
 801b5d6:	7922      	ldrb	r2, [r4, #4]
 801b5d8:	00fb      	lsls	r3, r7, #3
 801b5da:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b5de:	7a03      	ldrb	r3, [r0, #8]
 801b5e0:	430b      	orrs	r3, r1
 801b5e2:	0679      	lsls	r1, r7, #25
 801b5e4:	bf44      	itt	mi
 801b5e6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b5ea:	b21b      	sxthmi	r3, r3
 801b5ec:	1ad3      	subs	r3, r2, r3
 801b5ee:	b2db      	uxtb	r3, r3
 801b5f0:	429e      	cmp	r6, r3
 801b5f2:	bf28      	it	cs
 801b5f4:	461e      	movcs	r6, r3
 801b5f6:	462b      	mov	r3, r5
 801b5f8:	4622      	mov	r2, r4
 801b5fa:	2100      	movs	r1, #0
 801b5fc:	a802      	add	r0, sp, #8
 801b5fe:	f001 f87f 	bl	801c700 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b602:	e7e2      	b.n	801b5ca <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801b604:	4630      	mov	r0, r6
 801b606:	b018      	add	sp, #96	; 0x60
 801b608:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b60c:	b003      	add	sp, #12
 801b60e:	4770      	bx	lr

0801b610 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801b610:	b513      	push	{r0, r1, r4, lr}
 801b612:	1d01      	adds	r1, r0, #4
 801b614:	4603      	mov	r3, r0
 801b616:	466a      	mov	r2, sp
 801b618:	c903      	ldmia	r1, {r0, r1}
 801b61a:	e882 0003 	stmia.w	r2, {r0, r1}
 801b61e:	2100      	movs	r1, #0
 801b620:	4618      	mov	r0, r3
 801b622:	9100      	str	r1, [sp, #0]
 801b624:	6819      	ldr	r1, [r3, #0]
 801b626:	690c      	ldr	r4, [r1, #16]
 801b628:	4611      	mov	r1, r2
 801b62a:	47a0      	blx	r4
 801b62c:	b002      	add	sp, #8
 801b62e:	bd10      	pop	{r4, pc}

0801b630 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801b630:	b538      	push	{r3, r4, r5, lr}
 801b632:	680b      	ldr	r3, [r1, #0]
 801b634:	460c      	mov	r4, r1
 801b636:	4605      	mov	r5, r0
 801b638:	68db      	ldr	r3, [r3, #12]
 801b63a:	4798      	blx	r3
 801b63c:	6823      	ldr	r3, [r4, #0]
 801b63e:	4620      	mov	r0, r4
 801b640:	4629      	mov	r1, r5
 801b642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b644:	4798      	blx	r3
 801b646:	4628      	mov	r0, r5
 801b648:	bd38      	pop	{r3, r4, r5, pc}

0801b64a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801b64a:	b410      	push	{r4}
 801b64c:	880a      	ldrh	r2, [r1, #0]
 801b64e:	8884      	ldrh	r4, [r0, #4]
 801b650:	4422      	add	r2, r4
 801b652:	800a      	strh	r2, [r1, #0]
 801b654:	884a      	ldrh	r2, [r1, #2]
 801b656:	88c4      	ldrh	r4, [r0, #6]
 801b658:	4422      	add	r2, r4
 801b65a:	804a      	strh	r2, [r1, #2]
 801b65c:	6940      	ldr	r0, [r0, #20]
 801b65e:	b120      	cbz	r0, 801b66a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801b660:	6803      	ldr	r3, [r0, #0]
 801b662:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b668:	4718      	bx	r3
 801b66a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b66e:	4770      	bx	lr

0801b670 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801b670:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b672:	460b      	mov	r3, r1
 801b674:	b085      	sub	sp, #20
 801b676:	4604      	mov	r4, r0
 801b678:	b901      	cbnz	r1, 801b67c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801b67a:	b1fa      	cbz	r2, 801b6bc <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801b67c:	1d27      	adds	r7, r4, #4
 801b67e:	466e      	mov	r6, sp
 801b680:	ad02      	add	r5, sp, #8
 801b682:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b686:	e886 0003 	stmia.w	r6, {r0, r1}
 801b68a:	88e1      	ldrh	r1, [r4, #6]
 801b68c:	4620      	mov	r0, r4
 801b68e:	440a      	add	r2, r1
 801b690:	88a1      	ldrh	r1, [r4, #4]
 801b692:	4419      	add	r1, r3
 801b694:	6823      	ldr	r3, [r4, #0]
 801b696:	b212      	sxth	r2, r2
 801b698:	b209      	sxth	r1, r1
 801b69a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b69c:	4798      	blx	r3
 801b69e:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b6a2:	e885 0003 	stmia.w	r5, {r0, r1}
 801b6a6:	6960      	ldr	r0, [r4, #20]
 801b6a8:	b150      	cbz	r0, 801b6c0 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801b6aa:	6803      	ldr	r3, [r0, #0]
 801b6ac:	4631      	mov	r1, r6
 801b6ae:	691b      	ldr	r3, [r3, #16]
 801b6b0:	4798      	blx	r3
 801b6b2:	6960      	ldr	r0, [r4, #20]
 801b6b4:	6803      	ldr	r3, [r0, #0]
 801b6b6:	691b      	ldr	r3, [r3, #16]
 801b6b8:	4629      	mov	r1, r5
 801b6ba:	4798      	blx	r3
 801b6bc:	b005      	add	sp, #20
 801b6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6c0:	f7ff fb9a 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 801b6c4:	6803      	ldr	r3, [r0, #0]
 801b6c6:	4631      	mov	r1, r6
 801b6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b6ca:	4798      	blx	r3
 801b6cc:	f7ff fb94 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 801b6d0:	6803      	ldr	r3, [r0, #0]
 801b6d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b6d4:	e7f0      	b.n	801b6b8 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801b6d6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801b6d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b6d8:	8882      	ldrh	r2, [r0, #4]
 801b6da:	4605      	mov	r5, r0
 801b6dc:	880b      	ldrh	r3, [r1, #0]
 801b6de:	460c      	mov	r4, r1
 801b6e0:	4413      	add	r3, r2
 801b6e2:	800b      	strh	r3, [r1, #0]
 801b6e4:	884b      	ldrh	r3, [r1, #2]
 801b6e6:	88c2      	ldrh	r2, [r0, #6]
 801b6e8:	4413      	add	r3, r2
 801b6ea:	4602      	mov	r2, r0
 801b6ec:	804b      	strh	r3, [r1, #2]
 801b6ee:	466b      	mov	r3, sp
 801b6f0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801b6f4:	6851      	ldr	r1, [r2, #4]
 801b6f6:	c303      	stmia	r3!, {r0, r1}
 801b6f8:	4621      	mov	r1, r4
 801b6fa:	4668      	mov	r0, sp
 801b6fc:	f7fa ff7c 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 801b700:	466b      	mov	r3, sp
 801b702:	cb03      	ldmia	r3!, {r0, r1}
 801b704:	6020      	str	r0, [r4, #0]
 801b706:	6061      	str	r1, [r4, #4]
 801b708:	6968      	ldr	r0, [r5, #20]
 801b70a:	b128      	cbz	r0, 801b718 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801b70c:	6803      	ldr	r3, [r0, #0]
 801b70e:	691b      	ldr	r3, [r3, #16]
 801b710:	4621      	mov	r1, r4
 801b712:	4798      	blx	r3
 801b714:	b003      	add	sp, #12
 801b716:	bd30      	pop	{r4, r5, pc}
 801b718:	f7ff fb6e 	bl	801adf8 <_ZN8touchgfx11Application11getInstanceEv>
 801b71c:	6803      	ldr	r3, [r0, #0]
 801b71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b720:	e7f6      	b.n	801b710 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801b722 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801b722:	b570      	push	{r4, r5, r6, lr}
 801b724:	8882      	ldrh	r2, [r0, #4]
 801b726:	460c      	mov	r4, r1
 801b728:	880b      	ldrh	r3, [r1, #0]
 801b72a:	4605      	mov	r5, r0
 801b72c:	4413      	add	r3, r2
 801b72e:	800b      	strh	r3, [r1, #0]
 801b730:	884b      	ldrh	r3, [r1, #2]
 801b732:	88c2      	ldrh	r2, [r0, #6]
 801b734:	4413      	add	r3, r2
 801b736:	804b      	strh	r3, [r1, #2]
 801b738:	1d01      	adds	r1, r0, #4
 801b73a:	4620      	mov	r0, r4
 801b73c:	f7fa ff5c 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 801b740:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b744:	2b00      	cmp	r3, #0
 801b746:	dd0b      	ble.n	801b760 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b748:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b74c:	2b00      	cmp	r3, #0
 801b74e:	dd07      	ble.n	801b760 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b750:	6968      	ldr	r0, [r5, #20]
 801b752:	b128      	cbz	r0, 801b760 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b754:	6803      	ldr	r3, [r0, #0]
 801b756:	4621      	mov	r1, r4
 801b758:	6a1b      	ldr	r3, [r3, #32]
 801b75a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b75e:	4718      	bx	r3
 801b760:	bd70      	pop	{r4, r5, r6, pc}

0801b762 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801b762:	b510      	push	{r4, lr}
 801b764:	2300      	movs	r3, #0
 801b766:	4604      	mov	r4, r0
 801b768:	4608      	mov	r0, r1
 801b76a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801b76e:	8023      	strh	r3, [r4, #0]
 801b770:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b774:	8063      	strh	r3, [r4, #2]
 801b776:	6803      	ldr	r3, [r0, #0]
 801b778:	80a1      	strh	r1, [r4, #4]
 801b77a:	4621      	mov	r1, r4
 801b77c:	80e2      	strh	r2, [r4, #6]
 801b77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b780:	4798      	blx	r3
 801b782:	4620      	mov	r0, r4
 801b784:	bd10      	pop	{r4, pc}
	...

0801b788 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801b788:	b530      	push	{r4, r5, lr}
 801b78a:	8083      	strh	r3, [r0, #4]
 801b78c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801b790:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801b794:	7183      	strb	r3, [r0, #6]
 801b796:	79c3      	ldrb	r3, [r0, #7]
 801b798:	6101      	str	r1, [r0, #16]
 801b79a:	f365 0306 	bfi	r3, r5, #0, #7
 801b79e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801b7a2:	8282      	strh	r2, [r0, #20]
 801b7a4:	f365 13c7 	bfi	r3, r5, #7, #1
 801b7a8:	71c3      	strb	r3, [r0, #7]
 801b7aa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801b7ae:	7203      	strb	r3, [r0, #8]
 801b7b0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801b7b4:	7243      	strb	r3, [r0, #9]
 801b7b6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b7ba:	8143      	strh	r3, [r0, #10]
 801b7bc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801b7c0:	8183      	strh	r3, [r0, #12]
 801b7c2:	4b01      	ldr	r3, [pc, #4]	; (801b7c8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801b7c4:	6003      	str	r3, [r0, #0]
 801b7c6:	bd30      	pop	{r4, r5, pc}
 801b7c8:	0802b564 	.word	0x0802b564

0801b7cc <_ZNK8touchgfx9ConstFont4findEt>:
 801b7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7ce:	6904      	ldr	r4, [r0, #16]
 801b7d0:	8a82      	ldrh	r2, [r0, #20]
 801b7d2:	88a3      	ldrh	r3, [r4, #4]
 801b7d4:	3a01      	subs	r2, #1
 801b7d6:	1acb      	subs	r3, r1, r3
 801b7d8:	d431      	bmi.n	801b83e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801b7da:	4293      	cmp	r3, r2
 801b7dc:	dd0c      	ble.n	801b7f8 <_ZNK8touchgfx9ConstFont4findEt+0x2c>
 801b7de:	230e      	movs	r3, #14
 801b7e0:	fb03 4302 	mla	r3, r3, r2, r4
 801b7e4:	889b      	ldrh	r3, [r3, #4]
 801b7e6:	1a5b      	subs	r3, r3, r1
 801b7e8:	1ad3      	subs	r3, r2, r3
 801b7ea:	429a      	cmp	r2, r3
 801b7ec:	db27      	blt.n	801b83e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	bfbc      	itt	lt
 801b7f2:	2302      	movlt	r3, #2
 801b7f4:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b7f8:	2500      	movs	r5, #0
 801b7fa:	260e      	movs	r6, #14
 801b7fc:	4295      	cmp	r5, r2
 801b7fe:	dc1e      	bgt.n	801b83e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801b800:	fb06 4003 	mla	r0, r6, r3, r4
 801b804:	8887      	ldrh	r7, [r0, #4]
 801b806:	428f      	cmp	r7, r1
 801b808:	d01a      	beq.n	801b840 <_ZNK8touchgfx9ConstFont4findEt+0x74>
 801b80a:	d90d      	bls.n	801b828 <_ZNK8touchgfx9ConstFont4findEt+0x5c>
 801b80c:	1e5a      	subs	r2, r3, #1
 801b80e:	4295      	cmp	r5, r2
 801b810:	dc15      	bgt.n	801b83e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801b812:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b816:	1a5b      	subs	r3, r3, r1
 801b818:	1ad3      	subs	r3, r2, r3
 801b81a:	429a      	cmp	r2, r3
 801b81c:	db0f      	blt.n	801b83e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801b81e:	429d      	cmp	r5, r3
 801b820:	ddec      	ble.n	801b7fc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b822:	1953      	adds	r3, r2, r5
 801b824:	105b      	asrs	r3, r3, #1
 801b826:	e7e9      	b.n	801b7fc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b828:	1c5d      	adds	r5, r3, #1
 801b82a:	42aa      	cmp	r2, r5
 801b82c:	db07      	blt.n	801b83e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801b82e:	8a43      	ldrh	r3, [r0, #18]
 801b830:	1acb      	subs	r3, r1, r3
 801b832:	442b      	add	r3, r5
 801b834:	429d      	cmp	r5, r3
 801b836:	dc02      	bgt.n	801b83e <_ZNK8touchgfx9ConstFont4findEt+0x72>
 801b838:	429a      	cmp	r2, r3
 801b83a:	dadf      	bge.n	801b7fc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b83c:	e7f1      	b.n	801b822 <_ZNK8touchgfx9ConstFont4findEt+0x56>
 801b83e:	2000      	movs	r0, #0
 801b840:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b842 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b844:	4604      	mov	r4, r0
 801b846:	4617      	mov	r7, r2
 801b848:	461e      	mov	r6, r3
 801b84a:	b911      	cbnz	r1, 801b852 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b84c:	2500      	movs	r5, #0
 801b84e:	4628      	mov	r0, r5
 801b850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b852:	290a      	cmp	r1, #10
 801b854:	d0fa      	beq.n	801b84c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b856:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b85a:	4291      	cmp	r1, r2
 801b85c:	d0f6      	beq.n	801b84c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b85e:	f242 020b 	movw	r2, #8203	; 0x200b
 801b862:	4291      	cmp	r1, r2
 801b864:	d0f2      	beq.n	801b84c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b866:	f7ff ffb1 	bl	801b7cc <_ZNK8touchgfx9ConstFont4findEt>
 801b86a:	4605      	mov	r5, r0
 801b86c:	b950      	cbnz	r0, 801b884 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b86e:	6823      	ldr	r3, [r4, #0]
 801b870:	4620      	mov	r0, r4
 801b872:	691b      	ldr	r3, [r3, #16]
 801b874:	4798      	blx	r3
 801b876:	4601      	mov	r1, r0
 801b878:	4620      	mov	r0, r4
 801b87a:	f7ff ffa7 	bl	801b7cc <_ZNK8touchgfx9ConstFont4findEt>
 801b87e:	4605      	mov	r5, r0
 801b880:	2800      	cmp	r0, #0
 801b882:	d0e3      	beq.n	801b84c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b884:	6823      	ldr	r3, [r4, #0]
 801b886:	4629      	mov	r1, r5
 801b888:	4620      	mov	r0, r4
 801b88a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b88c:	4798      	blx	r3
 801b88e:	6038      	str	r0, [r7, #0]
 801b890:	6823      	ldr	r3, [r4, #0]
 801b892:	4620      	mov	r0, r4
 801b894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b896:	4798      	blx	r3
 801b898:	7030      	strb	r0, [r6, #0]
 801b89a:	e7d8      	b.n	801b84e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b89c <_ZN8touchgfx6memsetEPvhm>:
 801b89c:	4402      	add	r2, r0
 801b89e:	4290      	cmp	r0, r2
 801b8a0:	d002      	beq.n	801b8a8 <_ZN8touchgfx6memsetEPvhm+0xc>
 801b8a2:	f800 1b01 	strb.w	r1, [r0], #1
 801b8a6:	e7fa      	b.n	801b89e <_ZN8touchgfx6memsetEPvhm+0x2>
 801b8a8:	4770      	bx	lr

0801b8aa <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801b8aa:	b538      	push	{r3, r4, r5, lr}
 801b8ac:	4605      	mov	r5, r0
 801b8ae:	f001 fdd1 	bl	801d454 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b8b2:	4604      	mov	r4, r0
 801b8b4:	4628      	mov	r0, r5
 801b8b6:	f001 fd0f 	bl	801d2d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b8ba:	2800      	cmp	r0, #0
 801b8bc:	bf14      	ite	ne
 801b8be:	2002      	movne	r0, #2
 801b8c0:	2000      	moveq	r0, #0
 801b8c2:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801b8c6:	b280      	uxth	r0, r0
 801b8c8:	bd38      	pop	{r3, r4, r5, pc}

0801b8ca <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801b8ca:	b538      	push	{r3, r4, r5, lr}
 801b8cc:	4605      	mov	r5, r0
 801b8ce:	f001 fdc1 	bl	801d454 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b8d2:	4604      	mov	r4, r0
 801b8d4:	4628      	mov	r0, r5
 801b8d6:	f001 fcff 	bl	801d2d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b8da:	2800      	cmp	r0, #0
 801b8dc:	bf14      	ite	ne
 801b8de:	2002      	movne	r0, #2
 801b8e0:	2000      	moveq	r0, #0
 801b8e2:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801b8e6:	f040 0001 	orr.w	r0, r0, #1
 801b8ea:	b280      	uxth	r0, r0
 801b8ec:	bd38      	pop	{r3, r4, r5, pc}

0801b8ee <_ZN8touchgfx3clzEl>:
 801b8ee:	b1e8      	cbz	r0, 801b92c <_ZN8touchgfx3clzEl+0x3e>
 801b8f0:	2800      	cmp	r0, #0
 801b8f2:	bfb8      	it	lt
 801b8f4:	4240      	neglt	r0, r0
 801b8f6:	0c03      	lsrs	r3, r0, #16
 801b8f8:	041b      	lsls	r3, r3, #16
 801b8fa:	b9ab      	cbnz	r3, 801b928 <_ZN8touchgfx3clzEl+0x3a>
 801b8fc:	0400      	lsls	r0, r0, #16
 801b8fe:	2310      	movs	r3, #16
 801b900:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b904:	bf04      	itt	eq
 801b906:	0200      	lsleq	r0, r0, #8
 801b908:	3308      	addeq	r3, #8
 801b90a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b90e:	bf04      	itt	eq
 801b910:	0100      	lsleq	r0, r0, #4
 801b912:	3304      	addeq	r3, #4
 801b914:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b918:	bf04      	itt	eq
 801b91a:	0080      	lsleq	r0, r0, #2
 801b91c:	3302      	addeq	r3, #2
 801b91e:	2800      	cmp	r0, #0
 801b920:	bfa8      	it	ge
 801b922:	3301      	addge	r3, #1
 801b924:	1e58      	subs	r0, r3, #1
 801b926:	4770      	bx	lr
 801b928:	2300      	movs	r3, #0
 801b92a:	e7e9      	b.n	801b900 <_ZN8touchgfx3clzEl+0x12>
 801b92c:	201f      	movs	r0, #31
 801b92e:	4770      	bx	lr

0801b930 <_ZN8touchgfx6muldivElllRl>:
 801b930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b934:	4604      	mov	r4, r0
 801b936:	4698      	mov	r8, r3
 801b938:	2601      	movs	r6, #1
 801b93a:	f7ff ffd8 	bl	801b8ee <_ZN8touchgfx3clzEl>
 801b93e:	2c00      	cmp	r4, #0
 801b940:	fa04 f500 	lsl.w	r5, r4, r0
 801b944:	fa06 f600 	lsl.w	r6, r6, r0
 801b948:	bfba      	itte	lt
 801b94a:	f04f 37ff 	movlt.w	r7, #4294967295
 801b94e:	4264      	neglt	r4, r4
 801b950:	2701      	movge	r7, #1
 801b952:	2900      	cmp	r1, #0
 801b954:	f106 36ff 	add.w	r6, r6, #4294967295
 801b958:	bfbc      	itt	lt
 801b95a:	4249      	neglt	r1, r1
 801b95c:	427f      	neglt	r7, r7
 801b95e:	2a00      	cmp	r2, #0
 801b960:	fa41 fc00 	asr.w	ip, r1, r0
 801b964:	ea01 0106 	and.w	r1, r1, r6
 801b968:	bfb8      	it	lt
 801b96a:	427f      	neglt	r7, r7
 801b96c:	fb04 f401 	mul.w	r4, r4, r1
 801b970:	fb95 f3f2 	sdiv	r3, r5, r2
 801b974:	fb02 5513 	mls	r5, r2, r3, r5
 801b978:	bfb8      	it	lt
 801b97a:	4252      	neglt	r2, r2
 801b97c:	fb94 f0f2 	sdiv	r0, r4, r2
 801b980:	fb02 4410 	mls	r4, r2, r0, r4
 801b984:	fb0c 4405 	mla	r4, ip, r5, r4
 801b988:	fb94 f1f2 	sdiv	r1, r4, r2
 801b98c:	4408      	add	r0, r1
 801b98e:	fb02 4211 	mls	r2, r2, r1, r4
 801b992:	fb0c 0003 	mla	r0, ip, r3, r0
 801b996:	f8c8 2000 	str.w	r2, [r8]
 801b99a:	4378      	muls	r0, r7
 801b99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b9a0 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801b9a0:	2000      	movs	r0, #0
 801b9a2:	4770      	bx	lr

0801b9a4 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801b9a4:	2001      	movs	r0, #1
 801b9a6:	4770      	bx	lr

0801b9a8 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801b9a8:	2002      	movs	r0, #2
 801b9aa:	4770      	bx	lr

0801b9ac <_ZN8touchgfx12GestureEventD1Ev>:
 801b9ac:	4770      	bx	lr

0801b9ae <_ZN8touchgfx9DragEventD1Ev>:
 801b9ae:	4770      	bx	lr

0801b9b0 <_ZN8touchgfx10ClickEventD1Ev>:
 801b9b0:	4770      	bx	lr

0801b9b2 <_ZN8touchgfx10ClickEventD0Ev>:
 801b9b2:	b510      	push	{r4, lr}
 801b9b4:	4604      	mov	r4, r0
 801b9b6:	210c      	movs	r1, #12
 801b9b8:	f00b fa1c 	bl	8026df4 <_ZdlPvj>
 801b9bc:	4620      	mov	r0, r4
 801b9be:	bd10      	pop	{r4, pc}

0801b9c0 <_ZN8touchgfx9DragEventD0Ev>:
 801b9c0:	b510      	push	{r4, lr}
 801b9c2:	4604      	mov	r4, r0
 801b9c4:	2110      	movs	r1, #16
 801b9c6:	f00b fa15 	bl	8026df4 <_ZdlPvj>
 801b9ca:	4620      	mov	r0, r4
 801b9cc:	bd10      	pop	{r4, pc}

0801b9ce <_ZN8touchgfx12GestureEventD0Ev>:
 801b9ce:	b510      	push	{r4, lr}
 801b9d0:	4604      	mov	r4, r0
 801b9d2:	210c      	movs	r1, #12
 801b9d4:	f00b fa0e 	bl	8026df4 <_ZdlPvj>
 801b9d8:	4620      	mov	r0, r4
 801b9da:	bd10      	pop	{r4, pc}

0801b9dc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b9dc:	b530      	push	{r4, r5, lr}
 801b9de:	460d      	mov	r5, r1
 801b9e0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b9e2:	b087      	sub	sp, #28
 801b9e4:	4604      	mov	r4, r0
 801b9e6:	b301      	cbz	r1, 801ba2a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b9e8:	a801      	add	r0, sp, #4
 801b9ea:	f7ff feba 	bl	801b762 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b9ee:	892a      	ldrh	r2, [r5, #8]
 801b9f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b9f4:	7928      	ldrb	r0, [r5, #4]
 801b9f6:	1ad2      	subs	r2, r2, r3
 801b9f8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b9fa:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b9fe:	441a      	add	r2, r3
 801ba00:	896b      	ldrh	r3, [r5, #10]
 801ba02:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801ba06:	f88d 0010 	strb.w	r0, [sp, #16]
 801ba0a:	1b5b      	subs	r3, r3, r5
 801ba0c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801ba0e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ba10:	442b      	add	r3, r5
 801ba12:	4d07      	ldr	r5, [pc, #28]	; (801ba30 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801ba14:	f8ad 1012 	strh.w	r1, [sp, #18]
 801ba18:	a903      	add	r1, sp, #12
 801ba1a:	9503      	str	r5, [sp, #12]
 801ba1c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ba20:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ba24:	6803      	ldr	r3, [r0, #0]
 801ba26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ba28:	4798      	blx	r3
 801ba2a:	b007      	add	sp, #28
 801ba2c:	bd30      	pop	{r4, r5, pc}
 801ba2e:	bf00      	nop
 801ba30:	0802b5e0 	.word	0x0802b5e0

0801ba34 <_ZNK8touchgfx4Rect9intersectEss>:
 801ba34:	b510      	push	{r4, lr}
 801ba36:	f9b0 3000 	ldrsh.w	r3, [r0]
 801ba3a:	428b      	cmp	r3, r1
 801ba3c:	dc10      	bgt.n	801ba60 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801ba3e:	8884      	ldrh	r4, [r0, #4]
 801ba40:	4423      	add	r3, r4
 801ba42:	b21b      	sxth	r3, r3
 801ba44:	4299      	cmp	r1, r3
 801ba46:	da0b      	bge.n	801ba60 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801ba48:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801ba4c:	4293      	cmp	r3, r2
 801ba4e:	dc07      	bgt.n	801ba60 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801ba50:	88c0      	ldrh	r0, [r0, #6]
 801ba52:	4418      	add	r0, r3
 801ba54:	b200      	sxth	r0, r0
 801ba56:	4282      	cmp	r2, r0
 801ba58:	bfac      	ite	ge
 801ba5a:	2000      	movge	r0, #0
 801ba5c:	2001      	movlt	r0, #1
 801ba5e:	bd10      	pop	{r4, pc}
 801ba60:	2000      	movs	r0, #0
 801ba62:	e7fc      	b.n	801ba5e <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801ba64 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801ba64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba66:	460c      	mov	r4, r1
 801ba68:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801ba6a:	b089      	sub	sp, #36	; 0x24
 801ba6c:	4605      	mov	r5, r0
 801ba6e:	2900      	cmp	r1, #0
 801ba70:	d054      	beq.n	801bb1c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801ba72:	4668      	mov	r0, sp
 801ba74:	f7ff fe75 	bl	801b762 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ba78:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801ba7a:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801ba7c:	4668      	mov	r0, sp
 801ba7e:	8922      	ldrh	r2, [r4, #8]
 801ba80:	88e1      	ldrh	r1, [r4, #6]
 801ba82:	443a      	add	r2, r7
 801ba84:	4431      	add	r1, r6
 801ba86:	b212      	sxth	r2, r2
 801ba88:	b209      	sxth	r1, r1
 801ba8a:	f7ff ffd3 	bl	801ba34 <_ZNK8touchgfx4Rect9intersectEss>
 801ba8e:	b1d0      	cbz	r0, 801bac6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801ba90:	89a2      	ldrh	r2, [r4, #12]
 801ba92:	4668      	mov	r0, sp
 801ba94:	8961      	ldrh	r1, [r4, #10]
 801ba96:	443a      	add	r2, r7
 801ba98:	4431      	add	r1, r6
 801ba9a:	b212      	sxth	r2, r2
 801ba9c:	b209      	sxth	r1, r1
 801ba9e:	f7ff ffc9 	bl	801ba34 <_ZNK8touchgfx4Rect9intersectEss>
 801baa2:	4603      	mov	r3, r0
 801baa4:	b978      	cbnz	r0, 801bac6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801baa6:	4a1e      	ldr	r2, [pc, #120]	; (801bb20 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801baa8:	a904      	add	r1, sp, #16
 801baaa:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801baac:	9204      	str	r2, [sp, #16]
 801baae:	2202      	movs	r2, #2
 801bab0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bab4:	f88d 2014 	strb.w	r2, [sp, #20]
 801bab8:	f8ad 3018 	strh.w	r3, [sp, #24]
 801babc:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bac0:	6803      	ldr	r3, [r0, #0]
 801bac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bac4:	4798      	blx	r3
 801bac6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801bac8:	a802      	add	r0, sp, #8
 801baca:	f7ff fe4a 	bl	801b762 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bace:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801bad2:	88e0      	ldrh	r0, [r4, #6]
 801bad4:	8961      	ldrh	r1, [r4, #10]
 801bad6:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801bada:	1a80      	subs	r0, r0, r2
 801badc:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801bae0:	1a89      	subs	r1, r1, r2
 801bae2:	8923      	ldrh	r3, [r4, #8]
 801bae4:	4460      	add	r0, ip
 801bae6:	89a2      	ldrh	r2, [r4, #12]
 801bae8:	4461      	add	r1, ip
 801baea:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801baec:	eba3 030e 	sub.w	r3, r3, lr
 801baf0:	eba2 020e 	sub.w	r2, r2, lr
 801baf4:	f8ad 0016 	strh.w	r0, [sp, #22]
 801baf8:	7927      	ldrb	r7, [r4, #4]
 801bafa:	4433      	add	r3, r6
 801bafc:	4432      	add	r2, r6
 801bafe:	4c09      	ldr	r4, [pc, #36]	; (801bb24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801bb00:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801bb02:	f8ad 101a 	strh.w	r1, [sp, #26]
 801bb06:	a904      	add	r1, sp, #16
 801bb08:	9404      	str	r4, [sp, #16]
 801bb0a:	f88d 7014 	strb.w	r7, [sp, #20]
 801bb0e:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bb12:	f8ad 201c 	strh.w	r2, [sp, #28]
 801bb16:	6803      	ldr	r3, [r0, #0]
 801bb18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bb1a:	4798      	blx	r3
 801bb1c:	b009      	add	sp, #36	; 0x24
 801bb1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb20:	0802b5b8 	.word	0x0802b5b8
 801bb24:	0802b5cc 	.word	0x0802b5cc

0801bb28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801bb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb2c:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801bb30:	b0a1      	sub	sp, #132	; 0x84
 801bb32:	4604      	mov	r4, r0
 801bb34:	460d      	mov	r5, r1
 801bb36:	790b      	ldrb	r3, [r1, #4]
 801bb38:	f1b9 0f00 	cmp.w	r9, #0
 801bb3c:	d00f      	beq.n	801bb5e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	f040 80a2 	bne.w	801bc88 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801bb44:	b021      	add	sp, #132	; 0x84
 801bb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb4a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801bb4e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801bb52:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801bb56:	1d20      	adds	r0, r4, #4
 801bb58:	f7fa fc9c 	bl	8016494 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801bb5c:	e094      	b.n	801bc88 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d1f0      	bne.n	801bb44 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801bb62:	4b5f      	ldr	r3, [pc, #380]	; (801bce0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801bb64:	681b      	ldr	r3, [r3, #0]
 801bb66:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801bb6a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801bb6e:	f1ba 0f03 	cmp.w	sl, #3
 801bb72:	ddea      	ble.n	801bb4a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801bb74:	f1ba 0f0c 	cmp.w	sl, #12
 801bb78:	f04f 0303 	mov.w	r3, #3
 801bb7c:	f04f 0600 	mov.w	r6, #0
 801bb80:	4958      	ldr	r1, [pc, #352]	; (801bce4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801bb82:	bfd8      	it	le
 801bb84:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801bb88:	960a      	str	r6, [sp, #40]	; 0x28
 801bb8a:	bfd8      	it	le
 801bb8c:	fb92 f3f3 	sdivle	r3, r2, r3
 801bb90:	9301      	str	r3, [sp, #4]
 801bb92:	4b55      	ldr	r3, [pc, #340]	; (801bce8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801bb94:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bb98:	4b54      	ldr	r3, [pc, #336]	; (801bcec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801bb9a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801bb9e:	2248      	movs	r2, #72	; 0x48
 801bba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bba4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801bba8:	ab0e      	add	r3, sp, #56	; 0x38
 801bbaa:	4618      	mov	r0, r3
 801bbac:	f00b f9cc 	bl	8026f48 <memcpy>
 801bbb0:	f04f 32ff 	mov.w	r2, #4294967295
 801bbb4:	f8cd a008 	str.w	sl, [sp, #8]
 801bbb8:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801bbbc:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801bbc0:	46b3      	mov	fp, r6
 801bbc2:	fb93 f3f2 	sdiv	r3, r3, r2
 801bbc6:	b29b      	uxth	r3, r3
 801bbc8:	9303      	str	r3, [sp, #12]
 801bbca:	2300      	movs	r3, #0
 801bbcc:	9a03      	ldr	r2, [sp, #12]
 801bbce:	88ef      	ldrh	r7, [r5, #6]
 801bbd0:	a80a      	add	r0, sp, #40	; 0x28
 801bbd2:	9309      	str	r3, [sp, #36]	; 0x24
 801bbd4:	9b07      	ldr	r3, [sp, #28]
 801bbd6:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801bbda:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801bbde:	fb13 f302 	smulbb	r3, r3, r2
 801bbe2:	b29b      	uxth	r3, r3
 801bbe4:	9304      	str	r3, [sp, #16]
 801bbe6:	9b07      	ldr	r3, [sp, #28]
 801bbe8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bbec:	685b      	ldr	r3, [r3, #4]
 801bbee:	fb13 f302 	smulbb	r3, r3, r2
 801bbf2:	b29b      	uxth	r3, r3
 801bbf4:	9305      	str	r3, [sp, #20]
 801bbf6:	9b04      	ldr	r3, [sp, #16]
 801bbf8:	441f      	add	r7, r3
 801bbfa:	9b05      	ldr	r3, [sp, #20]
 801bbfc:	4498      	add	r8, r3
 801bbfe:	b23f      	sxth	r7, r7
 801bc00:	fa0f f888 	sxth.w	r8, r8
 801bc04:	4639      	mov	r1, r7
 801bc06:	4642      	mov	r2, r8
 801bc08:	f7ff ff14 	bl	801ba34 <_ZNK8touchgfx4Rect9intersectEss>
 801bc0c:	b380      	cbz	r0, 801bc70 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801bc0e:	4639      	mov	r1, r7
 801bc10:	ab09      	add	r3, sp, #36	; 0x24
 801bc12:	4642      	mov	r2, r8
 801bc14:	1d20      	adds	r0, r4, #4
 801bc16:	f7fa fc3d 	bl	8016494 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801bc1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bc1c:	b341      	cbz	r1, 801bc70 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801bc1e:	4549      	cmp	r1, r9
 801bc20:	d026      	beq.n	801bc70 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801bc22:	a80c      	add	r0, sp, #48	; 0x30
 801bc24:	f7ff fd9d 	bl	801b762 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bc28:	2002      	movs	r0, #2
 801bc2a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801bc2e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801bc32:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801bc36:	fb92 f2f0 	sdiv	r2, r2, r0
 801bc3a:	440a      	add	r2, r1
 801bc3c:	1a99      	subs	r1, r3, r2
 801bc3e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801bc42:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801bc46:	fb93 f3f0 	sdiv	r3, r3, r0
 801bc4a:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801bc4e:	4403      	add	r3, r0
 801bc50:	1ad3      	subs	r3, r2, r3
 801bc52:	9a06      	ldr	r2, [sp, #24]
 801bc54:	435b      	muls	r3, r3
 801bc56:	fb01 3301 	mla	r3, r1, r1, r3
 801bc5a:	4293      	cmp	r3, r2
 801bc5c:	d208      	bcs.n	801bc70 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801bc5e:	9a04      	ldr	r2, [sp, #16]
 801bc60:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801bc64:	86a2      	strh	r2, [r4, #52]	; 0x34
 801bc66:	9a05      	ldr	r2, [sp, #20]
 801bc68:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801bc6c:	86e2      	strh	r2, [r4, #54]	; 0x36
 801bc6e:	9306      	str	r3, [sp, #24]
 801bc70:	f10b 0b02 	add.w	fp, fp, #2
 801bc74:	f1bb 0f08 	cmp.w	fp, #8
 801bc78:	dda7      	ble.n	801bbca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801bc7a:	9b02      	ldr	r3, [sp, #8]
 801bc7c:	3601      	adds	r6, #1
 801bc7e:	4453      	add	r3, sl
 801bc80:	9302      	str	r3, [sp, #8]
 801bc82:	9b01      	ldr	r3, [sp, #4]
 801bc84:	42b3      	cmp	r3, r6
 801bc86:	d199      	bne.n	801bbbc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801bc88:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801bc8a:	2900      	cmp	r1, #0
 801bc8c:	f43f af5a 	beq.w	801bb44 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801bc90:	a80c      	add	r0, sp, #48	; 0x30
 801bc92:	2600      	movs	r6, #0
 801bc94:	f7ff fd65 	bl	801b762 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bc98:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801bc9c:	88ea      	ldrh	r2, [r5, #6]
 801bc9e:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801bca2:	1ad2      	subs	r2, r2, r3
 801bca4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801bca6:	7929      	ldrb	r1, [r5, #4]
 801bca8:	441a      	add	r2, r3
 801bcaa:	892b      	ldrh	r3, [r5, #8]
 801bcac:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801bcb0:	a90e      	add	r1, sp, #56	; 0x38
 801bcb2:	1a1b      	subs	r3, r3, r0
 801bcb4:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801bcb6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801bcba:	4403      	add	r3, r0
 801bcbc:	480c      	ldr	r0, [pc, #48]	; (801bcf0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801bcbe:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801bcc2:	900e      	str	r0, [sp, #56]	; 0x38
 801bcc4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801bcc6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801bcca:	6803      	ldr	r3, [r0, #0]
 801bccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bcce:	4798      	blx	r3
 801bcd0:	792b      	ldrb	r3, [r5, #4]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	f43f af36 	beq.w	801bb44 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801bcd8:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801bcdc:	e732      	b.n	801bb44 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801bcde:	bf00      	nop
 801bce0:	2000b3d4 	.word	0x2000b3d4
 801bce4:	08028654 	.word	0x08028654
 801bce8:	2000b3c8 	.word	0x2000b3c8
 801bcec:	2000b3ca 	.word	0x2000b3ca
 801bcf0:	0802b5b8 	.word	0x0802b5b8

0801bcf4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801bcf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bcf6:	4604      	mov	r4, r0
 801bcf8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801bcfc:	3201      	adds	r2, #1
 801bcfe:	d112      	bne.n	801bd26 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801bd00:	2500      	movs	r5, #0
 801bd02:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801bd06:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bd0a:	6803      	ldr	r3, [r0, #0]
 801bd0c:	9500      	str	r5, [sp, #0]
 801bd0e:	466d      	mov	r5, sp
 801bd10:	f8ad 1004 	strh.w	r1, [sp, #4]
 801bd14:	f8ad 2006 	strh.w	r2, [sp, #6]
 801bd18:	4629      	mov	r1, r5
 801bd1a:	6a1b      	ldr	r3, [r3, #32]
 801bd1c:	4798      	blx	r3
 801bd1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801bd22:	e884 0003 	stmia.w	r4, {r0, r1}
 801bd26:	4620      	mov	r0, r4
 801bd28:	b003      	add	sp, #12
 801bd2a:	bd30      	pop	{r4, r5, pc}

0801bd2c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801bd2c:	b513      	push	{r0, r1, r4, lr}
 801bd2e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801bd32:	4604      	mov	r4, r0
 801bd34:	3301      	adds	r3, #1
 801bd36:	d109      	bne.n	801bd4c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801bd38:	4601      	mov	r1, r0
 801bd3a:	4668      	mov	r0, sp
 801bd3c:	f7ff fd11 	bl	801b762 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bd40:	f8bd 3000 	ldrh.w	r3, [sp]
 801bd44:	8423      	strh	r3, [r4, #32]
 801bd46:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bd4a:	8463      	strh	r3, [r4, #34]	; 0x22
 801bd4c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801bd50:	b002      	add	sp, #8
 801bd52:	bd10      	pop	{r4, pc}

0801bd54 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801bd54:	b513      	push	{r0, r1, r4, lr}
 801bd56:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801bd5a:	4604      	mov	r4, r0
 801bd5c:	3301      	adds	r3, #1
 801bd5e:	d109      	bne.n	801bd74 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801bd60:	4601      	mov	r1, r0
 801bd62:	4668      	mov	r0, sp
 801bd64:	f7ff fcfd 	bl	801b762 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bd68:	f8bd 3000 	ldrh.w	r3, [sp]
 801bd6c:	8423      	strh	r3, [r4, #32]
 801bd6e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bd72:	8463      	strh	r3, [r4, #34]	; 0x22
 801bd74:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801bd78:	b002      	add	sp, #8
 801bd7a:	bd10      	pop	{r4, pc}

0801bd7c <_ZN8touchgfx6ScreenC1Ev>:
 801bd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd7e:	4605      	mov	r5, r0
 801bd80:	4b17      	ldr	r3, [pc, #92]	; (801bde0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801bd82:	2200      	movs	r2, #0
 801bd84:	4917      	ldr	r1, [pc, #92]	; (801bde4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801bd86:	f845 3b04 	str.w	r3, [r5], #4
 801bd8a:	2301      	movs	r3, #1
 801bd8c:	8102      	strh	r2, [r0, #8]
 801bd8e:	4604      	mov	r4, r0
 801bd90:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801bd94:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801bd98:	4b13      	ldr	r3, [pc, #76]	; (801bde8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801bd9a:	8142      	strh	r2, [r0, #10]
 801bd9c:	f9b3 7000 	ldrsh.w	r7, [r3]
 801bda0:	4b12      	ldr	r3, [pc, #72]	; (801bdec <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801bda2:	8182      	strh	r2, [r0, #12]
 801bda4:	81c2      	strh	r2, [r0, #14]
 801bda6:	8202      	strh	r2, [r0, #16]
 801bda8:	8242      	strh	r2, [r0, #18]
 801bdaa:	8282      	strh	r2, [r0, #20]
 801bdac:	82c2      	strh	r2, [r0, #22]
 801bdae:	6202      	str	r2, [r0, #32]
 801bdb0:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801bdb4:	6342      	str	r2, [r0, #52]	; 0x34
 801bdb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801bdba:	6041      	str	r1, [r0, #4]
 801bdbc:	4611      	mov	r1, r2
 801bdbe:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801bdc2:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801bdc6:	4628      	mov	r0, r5
 801bdc8:	f7f4 fe69 	bl	8010a9e <_ZN8touchgfx8Drawable5setXYEss>
 801bdcc:	4639      	mov	r1, r7
 801bdce:	4628      	mov	r0, r5
 801bdd0:	f7f4 fe83 	bl	8010ada <_ZN8touchgfx8Drawable8setWidthEs>
 801bdd4:	4628      	mov	r0, r5
 801bdd6:	4631      	mov	r1, r6
 801bdd8:	f7f4 fe8e 	bl	8010af8 <_ZN8touchgfx8Drawable9setHeightEs>
 801bddc:	4620      	mov	r0, r4
 801bdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bde0:	0802b5f4 	.word	0x0802b5f4
 801bde4:	0802a060 	.word	0x0802a060
 801bde8:	2000b3c8 	.word	0x2000b3c8
 801bdec:	2000b3ca 	.word	0x2000b3ca

0801bdf0 <_ZN8touchgfx6Screen4drawEv>:
 801bdf0:	4b09      	ldr	r3, [pc, #36]	; (801be18 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801bdf2:	b507      	push	{r0, r1, r2, lr}
 801bdf4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bdf8:	2100      	movs	r1, #0
 801bdfa:	4b08      	ldr	r3, [pc, #32]	; (801be1c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801bdfc:	9100      	str	r1, [sp, #0]
 801bdfe:	4669      	mov	r1, sp
 801be00:	f9b3 3000 	ldrsh.w	r3, [r3]
 801be04:	f8ad 2004 	strh.w	r2, [sp, #4]
 801be08:	f8ad 3006 	strh.w	r3, [sp, #6]
 801be0c:	6803      	ldr	r3, [r0, #0]
 801be0e:	689b      	ldr	r3, [r3, #8]
 801be10:	4798      	blx	r3
 801be12:	b003      	add	sp, #12
 801be14:	f85d fb04 	ldr.w	pc, [sp], #4
 801be18:	2000b3c8 	.word	0x2000b3c8
 801be1c:	2000b3ca 	.word	0x2000b3ca

0801be20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801be20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be24:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801be28:	b089      	sub	sp, #36	; 0x24
 801be2a:	4680      	mov	r8, r0
 801be2c:	460c      	mov	r4, r1
 801be2e:	2b00      	cmp	r3, #0
 801be30:	4615      	mov	r5, r2
 801be32:	dd0e      	ble.n	801be52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801be34:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801be38:	2b00      	cmp	r3, #0
 801be3a:	dd0a      	ble.n	801be52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801be3c:	4628      	mov	r0, r5
 801be3e:	f7ff ff59 	bl	801bcf4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801be42:	4621      	mov	r1, r4
 801be44:	f7fe ff94 	bl	801ad70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801be48:	69eb      	ldr	r3, [r5, #28]
 801be4a:	b928      	cbnz	r0, 801be58 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801be4c:	461d      	mov	r5, r3
 801be4e:	2b00      	cmp	r3, #0
 801be50:	d1f4      	bne.n	801be3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801be52:	b009      	add	sp, #36	; 0x24
 801be54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be58:	ae04      	add	r6, sp, #16
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d051      	beq.n	801bf02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801be5e:	682b      	ldr	r3, [r5, #0]
 801be60:	4629      	mov	r1, r5
 801be62:	a802      	add	r0, sp, #8
 801be64:	68db      	ldr	r3, [r3, #12]
 801be66:	4798      	blx	r3
 801be68:	4628      	mov	r0, r5
 801be6a:	f7ff ff5f 	bl	801bd2c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801be6e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801be72:	4407      	add	r7, r0
 801be74:	4628      	mov	r0, r5
 801be76:	f7ff ff6d 	bl	801bd54 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801be7a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801be7e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801be82:	b23f      	sxth	r7, r7
 801be84:	4418      	add	r0, r3
 801be86:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801be8a:	4621      	mov	r1, r4
 801be8c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801be90:	f8ad 0012 	strh.w	r0, [sp, #18]
 801be94:	4630      	mov	r0, r6
 801be96:	f8ad 3016 	strh.w	r3, [sp, #22]
 801be9a:	f8ad 7010 	strh.w	r7, [sp, #16]
 801be9e:	f7fa fbab 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 801bea2:	4628      	mov	r0, r5
 801bea4:	f7ff ff26 	bl	801bcf4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bea8:	ab06      	add	r3, sp, #24
 801beaa:	4602      	mov	r2, r0
 801beac:	e896 0003 	ldmia.w	r6, {r0, r1}
 801beb0:	e883 0003 	stmia.w	r3, {r0, r1}
 801beb4:	4611      	mov	r1, r2
 801beb6:	4618      	mov	r0, r3
 801beb8:	f7fa fb9e 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 801bebc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801bec0:	f9b4 1000 	ldrsh.w	r1, [r4]
 801bec4:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801bec8:	4299      	cmp	r1, r3
 801beca:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801bece:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801bed2:	d10b      	bne.n	801beec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801bed4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801bed8:	4552      	cmp	r2, sl
 801beda:	d107      	bne.n	801beec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801bedc:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801bee0:	455a      	cmp	r2, fp
 801bee2:	d103      	bne.n	801beec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xcc>
 801bee4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801bee8:	454a      	cmp	r2, r9
 801beea:	d00a      	beq.n	801bf02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801beec:	f1bb 0f00 	cmp.w	fp, #0
 801bef0:	d002      	beq.n	801bef8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>
 801bef2:	f1b9 0f00 	cmp.w	r9, #0
 801bef6:	d12e      	bne.n	801bf56 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x136>
 801bef8:	69ea      	ldr	r2, [r5, #28]
 801befa:	4621      	mov	r1, r4
 801befc:	4640      	mov	r0, r8
 801befe:	f7ff ff8f 	bl	801be20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bf02:	4628      	mov	r0, r5
 801bf04:	f7ff fef6 	bl	801bcf4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bf08:	6861      	ldr	r1, [r4, #4]
 801bf0a:	4602      	mov	r2, r0
 801bf0c:	4633      	mov	r3, r6
 801bf0e:	6820      	ldr	r0, [r4, #0]
 801bf10:	c303      	stmia	r3!, {r0, r1}
 801bf12:	4611      	mov	r1, r2
 801bf14:	4630      	mov	r0, r6
 801bf16:	f7fa fb6f 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 801bf1a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	dd97      	ble.n	801be52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801bf22:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	dd93      	ble.n	801be52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801bf2a:	4628      	mov	r0, r5
 801bf2c:	f7ff fefe 	bl	801bd2c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801bf30:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801bf34:	1a18      	subs	r0, r3, r0
 801bf36:	f8ad 0010 	strh.w	r0, [sp, #16]
 801bf3a:	4628      	mov	r0, r5
 801bf3c:	f7ff ff0a 	bl	801bd54 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801bf40:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801bf44:	4631      	mov	r1, r6
 801bf46:	1a18      	subs	r0, r3, r0
 801bf48:	f8ad 0012 	strh.w	r0, [sp, #18]
 801bf4c:	4628      	mov	r0, r5
 801bf4e:	682b      	ldr	r3, [r5, #0]
 801bf50:	689b      	ldr	r3, [r3, #8]
 801bf52:	4798      	blx	r3
 801bf54:	e77d      	b.n	801be52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801bf56:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801bf5a:	fa1f f08a 	uxth.w	r0, sl
 801bf5e:	4552      	cmp	r2, sl
 801bf60:	9000      	str	r0, [sp, #0]
 801bf62:	da12      	bge.n	801bf8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x16a>
 801bf64:	9301      	str	r3, [sp, #4]
 801bf66:	9b00      	ldr	r3, [sp, #0]
 801bf68:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801bf6c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801bf70:	1a9a      	subs	r2, r3, r2
 801bf72:	f8ad 1010 	strh.w	r1, [sp, #16]
 801bf76:	4631      	mov	r1, r6
 801bf78:	f8ad 0014 	strh.w	r0, [sp, #20]
 801bf7c:	4640      	mov	r0, r8
 801bf7e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801bf82:	69ea      	ldr	r2, [r5, #28]
 801bf84:	f7ff ff4c 	bl	801be20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bf88:	9b01      	ldr	r3, [sp, #4]
 801bf8a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801bf8e:	b29f      	uxth	r7, r3
 801bf90:	429a      	cmp	r2, r3
 801bf92:	da0d      	bge.n	801bfb0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x190>
 801bf94:	f8ad 2010 	strh.w	r2, [sp, #16]
 801bf98:	1aba      	subs	r2, r7, r2
 801bf9a:	f8ad a012 	strh.w	sl, [sp, #18]
 801bf9e:	4631      	mov	r1, r6
 801bfa0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bfa4:	4640      	mov	r0, r8
 801bfa6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801bfaa:	69ea      	ldr	r2, [r5, #28]
 801bfac:	f7ff ff38 	bl	801be20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bfb0:	8822      	ldrh	r2, [r4, #0]
 801bfb2:	445f      	add	r7, fp
 801bfb4:	88a3      	ldrh	r3, [r4, #4]
 801bfb6:	b2bf      	uxth	r7, r7
 801bfb8:	4413      	add	r3, r2
 801bfba:	b23a      	sxth	r2, r7
 801bfbc:	b29b      	uxth	r3, r3
 801bfbe:	b219      	sxth	r1, r3
 801bfc0:	4291      	cmp	r1, r2
 801bfc2:	dd0d      	ble.n	801bfe0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c0>
 801bfc4:	1bdb      	subs	r3, r3, r7
 801bfc6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801bfca:	f8ad a012 	strh.w	sl, [sp, #18]
 801bfce:	4631      	mov	r1, r6
 801bfd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801bfd4:	4640      	mov	r0, r8
 801bfd6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801bfda:	69ea      	ldr	r2, [r5, #28]
 801bfdc:	f7ff ff20 	bl	801be20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bfe0:	88e2      	ldrh	r2, [r4, #6]
 801bfe2:	8863      	ldrh	r3, [r4, #2]
 801bfe4:	4413      	add	r3, r2
 801bfe6:	9a00      	ldr	r2, [sp, #0]
 801bfe8:	444a      	add	r2, r9
 801bfea:	b29b      	uxth	r3, r3
 801bfec:	fa1f f982 	uxth.w	r9, r2
 801bff0:	b219      	sxth	r1, r3
 801bff2:	fa0f f289 	sxth.w	r2, r9
 801bff6:	428a      	cmp	r2, r1
 801bff8:	da83      	bge.n	801bf02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xe2>
 801bffa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801bffe:	eba3 0309 	sub.w	r3, r3, r9
 801c002:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c006:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c00a:	4631      	mov	r1, r6
 801c00c:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c010:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c014:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c018:	69ea      	ldr	r2, [r5, #28]
 801c01a:	e76f      	b.n	801befc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xdc>

0801c01c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801c01c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c01e:	2300      	movs	r3, #0
 801c020:	aa02      	add	r2, sp, #8
 801c022:	4604      	mov	r4, r0
 801c024:	3004      	adds	r0, #4
 801c026:	f842 3d04 	str.w	r3, [r2, #-4]!
 801c02a:	460d      	mov	r5, r1
 801c02c:	f7fa fbbc 	bl	80167a8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801c030:	9a01      	ldr	r2, [sp, #4]
 801c032:	b11a      	cbz	r2, 801c03c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801c034:	4629      	mov	r1, r5
 801c036:	4620      	mov	r0, r4
 801c038:	f7ff fef2 	bl	801be20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c03c:	b003      	add	sp, #12
 801c03e:	bd30      	pop	{r4, r5, pc}

0801c040 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801c040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c042:	4602      	mov	r2, r0
 801c044:	4604      	mov	r4, r0
 801c046:	460d      	mov	r5, r1
 801c048:	466b      	mov	r3, sp
 801c04a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801c04e:	6851      	ldr	r1, [r2, #4]
 801c050:	c303      	stmia	r3!, {r0, r1}
 801c052:	4629      	mov	r1, r5
 801c054:	4668      	mov	r0, sp
 801c056:	f7fa facf 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 801c05a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801c05e:	4669      	mov	r1, sp
 801c060:	b123      	cbz	r3, 801c06c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801c062:	4620      	mov	r0, r4
 801c064:	f7ff ffda 	bl	801c01c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801c068:	b003      	add	sp, #12
 801c06a:	bd30      	pop	{r4, r5, pc}
 801c06c:	1d20      	adds	r0, r4, #4
 801c06e:	f7fa fb62 	bl	8016736 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801c072:	e7f9      	b.n	801c068 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801c074 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801c074:	460b      	mov	r3, r1
 801c076:	680a      	ldr	r2, [r1, #0]
 801c078:	1d01      	adds	r1, r0, #4
 801c07a:	6952      	ldr	r2, [r2, #20]
 801c07c:	4618      	mov	r0, r3
 801c07e:	4710      	bx	r2

0801c080 <_ZN8touchgfx12TextProviderC1Ev>:
 801c080:	2300      	movs	r3, #0
 801c082:	2201      	movs	r2, #1
 801c084:	b510      	push	{r4, lr}
 801c086:	4604      	mov	r4, r0
 801c088:	60c3      	str	r3, [r0, #12]
 801c08a:	7403      	strb	r3, [r0, #16]
 801c08c:	82c3      	strh	r3, [r0, #22]
 801c08e:	8303      	strh	r3, [r0, #24]
 801c090:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801c092:	8603      	strh	r3, [r0, #48]	; 0x30
 801c094:	86c3      	strh	r3, [r0, #54]	; 0x36
 801c096:	8703      	strh	r3, [r0, #56]	; 0x38
 801c098:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c09a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801c09e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801c0a2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801c0a6:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801c0aa:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801c0ae:	e9c0 3300 	strd	r3, r3, [r0]
 801c0b2:	f7f7 fb5d 	bl	8013770 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801c0b6:	4620      	mov	r0, r4
 801c0b8:	bd10      	pop	{r4, pc}

0801c0ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801c0ba:	b530      	push	{r4, r5, lr}
 801c0bc:	2500      	movs	r5, #0
 801c0be:	2401      	movs	r4, #1
 801c0c0:	6843      	ldr	r3, [r0, #4]
 801c0c2:	b913      	cbnz	r3, 801c0ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801c0c4:	6803      	ldr	r3, [r0, #0]
 801c0c6:	b1f3      	cbz	r3, 801c106 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801c0c8:	6043      	str	r3, [r0, #4]
 801c0ca:	7c03      	ldrb	r3, [r0, #16]
 801c0cc:	b143      	cbz	r3, 801c0e0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801c0ce:	68c3      	ldr	r3, [r0, #12]
 801c0d0:	b12b      	cbz	r3, 801c0de <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c0d2:	881a      	ldrh	r2, [r3, #0]
 801c0d4:	b11a      	cbz	r2, 801c0de <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c0d6:	1c9a      	adds	r2, r3, #2
 801c0d8:	60c2      	str	r2, [r0, #12]
 801c0da:	8818      	ldrh	r0, [r3, #0]
 801c0dc:	bd30      	pop	{r4, r5, pc}
 801c0de:	7405      	strb	r5, [r0, #16]
 801c0e0:	6843      	ldr	r3, [r0, #4]
 801c0e2:	8819      	ldrh	r1, [r3, #0]
 801c0e4:	b179      	cbz	r1, 801c106 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801c0e6:	1c9a      	adds	r2, r3, #2
 801c0e8:	2902      	cmp	r1, #2
 801c0ea:	6042      	str	r2, [r0, #4]
 801c0ec:	d1f5      	bne.n	801c0da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801c0ee:	6883      	ldr	r3, [r0, #8]
 801c0f0:	1d1a      	adds	r2, r3, #4
 801c0f2:	6082      	str	r2, [r0, #8]
 801c0f4:	681b      	ldr	r3, [r3, #0]
 801c0f6:	60c3      	str	r3, [r0, #12]
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	d0e1      	beq.n	801c0c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c0fc:	881b      	ldrh	r3, [r3, #0]
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d0de      	beq.n	801c0c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c102:	7404      	strb	r4, [r0, #16]
 801c104:	e7dc      	b.n	801c0c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c106:	2000      	movs	r0, #0
 801c108:	e7e8      	b.n	801c0dc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801c10a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801c10a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c10c:	2300      	movs	r3, #0
 801c10e:	6082      	str	r2, [r0, #8]
 801c110:	6001      	str	r1, [r0, #0]
 801c112:	6043      	str	r3, [r0, #4]
 801c114:	60c3      	str	r3, [r0, #12]
 801c116:	7403      	strb	r3, [r0, #16]
 801c118:	8603      	strh	r3, [r0, #48]	; 0x30
 801c11a:	8303      	strh	r3, [r0, #24]
 801c11c:	8703      	strh	r3, [r0, #56]	; 0x38
 801c11e:	b410      	push	{r4}
 801c120:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c124:	f7f7 bb24 	b.w	8013770 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801c128 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801c128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c12a:	4605      	mov	r5, r0
 801c12c:	4608      	mov	r0, r1
 801c12e:	b1f1      	cbz	r1, 801c16e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801c130:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801c134:	460b      	mov	r3, r1
 801c136:	f101 0708 	add.w	r7, r1, #8
 801c13a:	4622      	mov	r2, r4
 801c13c:	6818      	ldr	r0, [r3, #0]
 801c13e:	3308      	adds	r3, #8
 801c140:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c144:	4626      	mov	r6, r4
 801c146:	42bb      	cmp	r3, r7
 801c148:	c603      	stmia	r6!, {r0, r1}
 801c14a:	4634      	mov	r4, r6
 801c14c:	d1f6      	bne.n	801c13c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801c14e:	6818      	ldr	r0, [r3, #0]
 801c150:	6030      	str	r0, [r6, #0]
 801c152:	4610      	mov	r0, r2
 801c154:	889b      	ldrh	r3, [r3, #4]
 801c156:	80b3      	strh	r3, [r6, #4]
 801c158:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801c15c:	015b      	lsls	r3, r3, #5
 801c15e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c162:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801c166:	430b      	orrs	r3, r1
 801c168:	425b      	negs	r3, r3
 801c16a:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801c16e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c170 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801c170:	b538      	push	{r3, r4, r5, lr}
 801c172:	460c      	mov	r4, r1
 801c174:	6811      	ldr	r1, [r2, #0]
 801c176:	4610      	mov	r0, r2
 801c178:	68cd      	ldr	r5, [r1, #12]
 801c17a:	4619      	mov	r1, r3
 801c17c:	47a8      	blx	r5
 801c17e:	2800      	cmp	r0, #0
 801c180:	bf08      	it	eq
 801c182:	4620      	moveq	r0, r4
 801c184:	bd38      	pop	{r3, r4, r5, pc}
	...

0801c188 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801c188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c18a:	4604      	mov	r4, r0
 801c18c:	4615      	mov	r5, r2
 801c18e:	4608      	mov	r0, r1
 801c190:	b93a      	cbnz	r2, 801c1a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801c192:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801c196:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801c19a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801c19e:	4628      	mov	r0, r5
 801c1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c1a2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801c1a6:	8893      	ldrh	r3, [r2, #4]
 801c1a8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801c1ac:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c1b0:	79ee      	ldrb	r6, [r5, #7]
 801c1b2:	4316      	orrs	r6, r2
 801c1b4:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801c1b8:	189a      	adds	r2, r3, r2
 801c1ba:	b2b7      	uxth	r7, r6
 801c1bc:	b291      	uxth	r1, r2
 801c1be:	291d      	cmp	r1, #29
 801c1c0:	f200 8084 	bhi.w	801c2cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801c1c4:	2201      	movs	r2, #1
 801c1c6:	10f6      	asrs	r6, r6, #3
 801c1c8:	408a      	lsls	r2, r1
 801c1ca:	4978      	ldr	r1, [pc, #480]	; (801c3ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801c1cc:	420a      	tst	r2, r1
 801c1ce:	d12e      	bne.n	801c22e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801c1d0:	f412 7f60 	tst.w	r2, #896	; 0x380
 801c1d4:	d07a      	beq.n	801c2cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801c1d6:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801c1da:	462b      	mov	r3, r5
 801c1dc:	f105 0e08 	add.w	lr, r5, #8
 801c1e0:	4615      	mov	r5, r2
 801c1e2:	6818      	ldr	r0, [r3, #0]
 801c1e4:	3308      	adds	r3, #8
 801c1e6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c1ea:	4694      	mov	ip, r2
 801c1ec:	4573      	cmp	r3, lr
 801c1ee:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c1f2:	4662      	mov	r2, ip
 801c1f4:	d1f5      	bne.n	801c1e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801c1f6:	6818      	ldr	r0, [r3, #0]
 801c1f8:	f8cc 0000 	str.w	r0, [ip]
 801c1fc:	889b      	ldrh	r3, [r3, #4]
 801c1fe:	f8ac 3004 	strh.w	r3, [ip, #4]
 801c202:	b2b3      	uxth	r3, r6
 801c204:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801c208:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 801c20c:	1aca      	subs	r2, r1, r3
 801c20e:	1bcf      	subs	r7, r1, r7
 801c210:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801c214:	b292      	uxth	r2, r2
 801c216:	1afb      	subs	r3, r7, r3
 801c218:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 801c21c:	10d2      	asrs	r2, r2, #3
 801c21e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801c222:	4302      	orrs	r2, r0
 801c224:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 801c228:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801c22c:	e7b7      	b.n	801c19e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c22e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c230:	b92b      	cbnz	r3, 801c23e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801c232:	4b5f      	ldr	r3, [pc, #380]	; (801c3b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801c234:	21c0      	movs	r1, #192	; 0xc0
 801c236:	4a5f      	ldr	r2, [pc, #380]	; (801c3b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801c238:	485f      	ldr	r0, [pc, #380]	; (801c3b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801c23a:	f00a fe07 	bl	8026e4c <__assert_func>
 801c23e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801c240:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c244:	8b59      	ldrh	r1, [r3, #26]
 801c246:	f640 6333 	movw	r3, #3635	; 0xe33
 801c24a:	4299      	cmp	r1, r3
 801c24c:	d110      	bne.n	801c270 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801c24e:	6803      	ldr	r3, [r0, #0]
 801c250:	68db      	ldr	r3, [r3, #12]
 801c252:	4798      	blx	r3
 801c254:	7b41      	ldrb	r1, [r0, #13]
 801c256:	00cb      	lsls	r3, r1, #3
 801c258:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c25c:	7a03      	ldrb	r3, [r0, #8]
 801c25e:	0648      	lsls	r0, r1, #25
 801c260:	ea43 0302 	orr.w	r3, r3, r2
 801c264:	bf44      	itt	mi
 801c266:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c26a:	b21b      	sxthmi	r3, r3
 801c26c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c270:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801c274:	462a      	mov	r2, r5
 801c276:	f105 0c08 	add.w	ip, r5, #8
 801c27a:	443b      	add	r3, r7
 801c27c:	4433      	add	r3, r6
 801c27e:	f104 0640 	add.w	r6, r4, #64	; 0x40
 801c282:	b29b      	uxth	r3, r3
 801c284:	4635      	mov	r5, r6
 801c286:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c28a:	6810      	ldr	r0, [r2, #0]
 801c28c:	3208      	adds	r2, #8
 801c28e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801c292:	4637      	mov	r7, r6
 801c294:	4562      	cmp	r2, ip
 801c296:	c703      	stmia	r7!, {r0, r1}
 801c298:	463e      	mov	r6, r7
 801c29a:	d1f6      	bne.n	801c28a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801c29c:	6810      	ldr	r0, [r2, #0]
 801c29e:	6038      	str	r0, [r7, #0]
 801c2a0:	8892      	ldrh	r2, [r2, #4]
 801c2a2:	80ba      	strh	r2, [r7, #4]
 801c2a4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801c2a8:	10db      	asrs	r3, r3, #3
 801c2aa:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801c2ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c2b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c2b6:	4313      	orrs	r3, r2
 801c2b8:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801c2bc:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c2c0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801c2c4:	1a9b      	subs	r3, r3, r2
 801c2c6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801c2ca:	e768      	b.n	801c19e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c2cc:	f023 0204 	bic.w	r2, r3, #4
 801c2d0:	f640 611b 	movw	r1, #3611	; 0xe1b
 801c2d4:	428a      	cmp	r2, r1
 801c2d6:	d003      	beq.n	801c2e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801c2d8:	f640 621d 	movw	r2, #3613	; 0xe1d
 801c2dc:	4293      	cmp	r3, r2
 801c2de:	d120      	bne.n	801c322 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801c2e0:	3b01      	subs	r3, #1
 801c2e2:	4602      	mov	r2, r0
 801c2e4:	4629      	mov	r1, r5
 801c2e6:	4620      	mov	r0, r4
 801c2e8:	b29b      	uxth	r3, r3
 801c2ea:	f7ff ff41 	bl	801c170 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c2ee:	7b41      	ldrb	r1, [r0, #13]
 801c2f0:	00cb      	lsls	r3, r1, #3
 801c2f2:	0649      	lsls	r1, r1, #25
 801c2f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c2f8:	7a03      	ldrb	r3, [r0, #8]
 801c2fa:	ea43 0302 	orr.w	r3, r3, r2
 801c2fe:	bf44      	itt	mi
 801c300:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c304:	b21b      	sxthmi	r3, r3
 801c306:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c30a:	7b6b      	ldrb	r3, [r5, #13]
 801c30c:	7aaa      	ldrb	r2, [r5, #10]
 801c30e:	005b      	lsls	r3, r3, #1
 801c310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c314:	4313      	orrs	r3, r2
 801c316:	115a      	asrs	r2, r3, #5
 801c318:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801c31c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c320:	e035      	b.n	801c38e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801c322:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801c326:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801c32a:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801c32e:	7a2a      	ldrb	r2, [r5, #8]
 801c330:	ea42 0201 	orr.w	r2, r2, r1
 801c334:	f640 6109 	movw	r1, #3593	; 0xe09
 801c338:	bf1c      	itt	ne
 801c33a:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801c33e:	b212      	sxthne	r2, r2
 801c340:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801c344:	f023 0210 	bic.w	r2, r3, #16
 801c348:	428a      	cmp	r2, r1
 801c34a:	d003      	beq.n	801c354 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801c34c:	f640 6213 	movw	r2, #3603	; 0xe13
 801c350:	4293      	cmp	r3, r2
 801c352:	d129      	bne.n	801c3a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801c354:	7b6e      	ldrb	r6, [r5, #13]
 801c356:	4629      	mov	r1, r5
 801c358:	0076      	lsls	r6, r6, #1
 801c35a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c35e:	7aae      	ldrb	r6, [r5, #10]
 801c360:	4316      	orrs	r6, r2
 801c362:	f640 6213 	movw	r2, #3603	; 0xe13
 801c366:	4293      	cmp	r3, r2
 801c368:	4602      	mov	r2, r0
 801c36a:	4620      	mov	r0, r4
 801c36c:	bf16      	itet	ne
 801c36e:	f103 33ff 	addne.w	r3, r3, #4294967295
 801c372:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801c376:	b29b      	uxthne	r3, r3
 801c378:	f7ff fefa 	bl	801c170 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c37c:	7b43      	ldrb	r3, [r0, #13]
 801c37e:	7a82      	ldrb	r2, [r0, #10]
 801c380:	005b      	lsls	r3, r3, #1
 801c382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c386:	4313      	orrs	r3, r2
 801c388:	1af6      	subs	r6, r6, r3
 801c38a:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 801c38e:	7b69      	ldrb	r1, [r5, #13]
 801c390:	00cb      	lsls	r3, r1, #3
 801c392:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c396:	7a2b      	ldrb	r3, [r5, #8]
 801c398:	4313      	orrs	r3, r2
 801c39a:	064a      	lsls	r2, r1, #25
 801c39c:	bf44      	itt	mi
 801c39e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c3a2:	b21b      	sxthmi	r3, r3
 801c3a4:	1bdb      	subs	r3, r3, r7
 801c3a6:	e73f      	b.n	801c228 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801c3a8:	2300      	movs	r3, #0
 801c3aa:	e7b7      	b.n	801c31c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801c3ac:	3fc00079 	.word	0x3fc00079
 801c3b0:	0802b620 	.word	0x0802b620
 801c3b4:	0802b892 	.word	0x0802b892
 801c3b8:	0802b629 	.word	0x0802b629

0801c3bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801c3bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c3c0:	4604      	mov	r4, r0
 801c3c2:	b942      	cbnz	r2, 801c3d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801c3c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c3c8:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801c3cc:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801c3d0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c3d4:	e046      	b.n	801c464 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801c3d6:	7b51      	ldrb	r1, [r2, #13]
 801c3d8:	8893      	ldrh	r3, [r2, #4]
 801c3da:	010f      	lsls	r7, r1, #4
 801c3dc:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c3e0:	79d7      	ldrb	r7, [r2, #7]
 801c3e2:	4307      	orrs	r7, r0
 801c3e4:	2f04      	cmp	r7, #4
 801c3e6:	b2bd      	uxth	r5, r7
 801c3e8:	bfcc      	ite	gt
 801c3ea:	08bf      	lsrgt	r7, r7, #2
 801c3ec:	2701      	movle	r7, #1
 801c3ee:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801c3f2:	f200 80ab 	bhi.w	801c54c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801c3f6:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801c3fa:	4283      	cmp	r3, r0
 801c3fc:	d216      	bcs.n	801c42c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c3fe:	f240 605b 	movw	r0, #1627	; 0x65b
 801c402:	4283      	cmp	r3, r0
 801c404:	d859      	bhi.n	801c4ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801c406:	f240 6057 	movw	r0, #1623	; 0x657
 801c40a:	4283      	cmp	r3, r0
 801c40c:	d20e      	bcs.n	801c42c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c40e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c412:	d24a      	bcs.n	801c4aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801c414:	f240 604e 	movw	r0, #1614	; 0x64e
 801c418:	4283      	cmp	r3, r0
 801c41a:	d207      	bcs.n	801c42c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c41c:	f240 601a 	movw	r0, #1562	; 0x61a
 801c420:	4283      	cmp	r3, r0
 801c422:	d02a      	beq.n	801c47a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c424:	d821      	bhi.n	801c46a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801c426:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801c42a:	d35b      	bcc.n	801c4e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c42c:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 801c430:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c434:	f040 80d0 	bne.w	801c5d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c438:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 801c43c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c440:	f040 80ca 	bne.w	801c5d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c444:	00cb      	lsls	r3, r1, #3
 801c446:	0649      	lsls	r1, r1, #25
 801c448:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c44c:	7a13      	ldrb	r3, [r2, #8]
 801c44e:	ea43 0300 	orr.w	r3, r3, r0
 801c452:	bf44      	itt	mi
 801c454:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c458:	b21b      	sxthmi	r3, r3
 801c45a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c45e:	1b5d      	subs	r5, r3, r5
 801c460:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c464:	4610      	mov	r0, r2
 801c466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c46a:	f240 604b 	movw	r0, #1611	; 0x64b
 801c46e:	4283      	cmp	r3, r0
 801c470:	d338      	bcc.n	801c4e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c472:	f240 604c 	movw	r0, #1612	; 0x64c
 801c476:	4283      	cmp	r3, r0
 801c478:	d9d8      	bls.n	801c42c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c47a:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 801c47e:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 801c482:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c486:	f040 80f2 	bne.w	801c66e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801c48a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c48e:	f040 80ee 	bne.w	801c66e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801c492:	00cb      	lsls	r3, r1, #3
 801c494:	064e      	lsls	r6, r1, #25
 801c496:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c49a:	7a13      	ldrb	r3, [r2, #8]
 801c49c:	ea43 0300 	orr.w	r3, r3, r0
 801c4a0:	bf44      	itt	mi
 801c4a2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c4a6:	b21b      	sxthmi	r3, r3
 801c4a8:	e7d9      	b.n	801c45e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801c4aa:	f240 6054 	movw	r0, #1620	; 0x654
 801c4ae:	4283      	cmp	r3, r0
 801c4b0:	d8e3      	bhi.n	801c47a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c4b2:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c4b6:	d9e0      	bls.n	801c47a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c4b8:	e7b8      	b.n	801c42c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c4ba:	f240 6074 	movw	r0, #1652	; 0x674
 801c4be:	4283      	cmp	r3, r0
 801c4c0:	d0b4      	beq.n	801c42c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c4c2:	d82d      	bhi.n	801c520 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801c4c4:	f240 605e 	movw	r0, #1630	; 0x65e
 801c4c8:	4283      	cmp	r3, r0
 801c4ca:	d804      	bhi.n	801c4d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801c4cc:	f240 605d 	movw	r0, #1629	; 0x65d
 801c4d0:	4283      	cmp	r3, r0
 801c4d2:	d3d2      	bcc.n	801c47a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c4d4:	e7aa      	b.n	801c42c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c4d6:	f240 605f 	movw	r0, #1631	; 0x65f
 801c4da:	4283      	cmp	r3, r0
 801c4dc:	d0cd      	beq.n	801c47a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c4de:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801c4e2:	d0a3      	beq.n	801c42c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c4e4:	00cb      	lsls	r3, r1, #3
 801c4e6:	0649      	lsls	r1, r1, #25
 801c4e8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c4ec:	7a13      	ldrb	r3, [r2, #8]
 801c4ee:	ea43 0300 	orr.w	r3, r3, r0
 801c4f2:	bf44      	itt	mi
 801c4f4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c4f8:	b21b      	sxthmi	r3, r3
 801c4fa:	1b5d      	subs	r5, r3, r5
 801c4fc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c500:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c504:	7b53      	ldrb	r3, [r2, #13]
 801c506:	015b      	lsls	r3, r3, #5
 801c508:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c50c:	7993      	ldrb	r3, [r2, #6]
 801c50e:	430b      	orrs	r3, r1
 801c510:	2105      	movs	r1, #5
 801c512:	005b      	lsls	r3, r3, #1
 801c514:	fb93 f3f1 	sdiv	r3, r3, r1
 801c518:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801c51c:	440b      	add	r3, r1
 801c51e:	e757      	b.n	801c3d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801c520:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801c524:	4283      	cmp	r3, r0
 801c526:	d809      	bhi.n	801c53c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801c528:	f240 60df 	movw	r0, #1759	; 0x6df
 801c52c:	4283      	cmp	r3, r0
 801c52e:	f4bf af7d 	bcs.w	801c42c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c532:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801c536:	2b05      	cmp	r3, #5
 801c538:	d8d4      	bhi.n	801c4e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c53a:	e777      	b.n	801c42c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c53c:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801c540:	4283      	cmp	r3, r0
 801c542:	d09a      	beq.n	801c47a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c544:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801c548:	4283      	cmp	r3, r0
 801c54a:	e7ca      	b.n	801c4e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801c54c:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801c550:	d22b      	bcs.n	801c5aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801c552:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801c556:	4283      	cmp	r3, r0
 801c558:	d28f      	bcs.n	801c47a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c55a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c55e:	4283      	cmp	r3, r0
 801c560:	d816      	bhi.n	801c590 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801c562:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801c566:	4283      	cmp	r3, r0
 801c568:	f4bf af60 	bcs.w	801c42c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c56c:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801c570:	4283      	cmp	r3, r0
 801c572:	d80a      	bhi.n	801c58a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801c574:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801c578:	4283      	cmp	r3, r0
 801c57a:	f4bf af57 	bcs.w	801c42c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c57e:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801c582:	4283      	cmp	r3, r0
 801c584:	f43f af79 	beq.w	801c47a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c588:	e7ac      	b.n	801c4e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c58a:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801c58e:	e7f8      	b.n	801c582 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801c590:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801c594:	4283      	cmp	r3, r0
 801c596:	d802      	bhi.n	801c59e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801c598:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c59c:	e798      	b.n	801c4d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801c59e:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801c5a2:	4283      	cmp	r3, r0
 801c5a4:	f47f af42 	bne.w	801c42c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c5a8:	e767      	b.n	801c47a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c5aa:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801c5ae:	4283      	cmp	r3, r0
 801c5b0:	f43f af63 	beq.w	801c47a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c5b4:	d802      	bhi.n	801c5bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801c5b6:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801c5ba:	e7f2      	b.n	801c5a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801c5bc:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801c5c0:	4283      	cmp	r3, r0
 801c5c2:	d805      	bhi.n	801c5d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801c5c4:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801c5c8:	4283      	cmp	r3, r0
 801c5ca:	f4ff af2f 	bcc.w	801c42c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c5ce:	e754      	b.n	801c47a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c5d0:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801c5d4:	4283      	cmp	r3, r0
 801c5d6:	e7af      	b.n	801c538 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801c5d8:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801c5dc:	4617      	mov	r7, r2
 801c5de:	f102 0808 	add.w	r8, r2, #8
 801c5e2:	4666      	mov	r6, ip
 801c5e4:	6838      	ldr	r0, [r7, #0]
 801c5e6:	3708      	adds	r7, #8
 801c5e8:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801c5ec:	46e6      	mov	lr, ip
 801c5ee:	4547      	cmp	r7, r8
 801c5f0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801c5f4:	46f4      	mov	ip, lr
 801c5f6:	d1f5      	bne.n	801c5e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801c5f8:	6838      	ldr	r0, [r7, #0]
 801c5fa:	f8ce 0000 	str.w	r0, [lr]
 801c5fe:	88b9      	ldrh	r1, [r7, #4]
 801c600:	f8ae 1004 	strh.w	r1, [lr, #4]
 801c604:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801c608:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c60c:	d009      	beq.n	801c622 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801c60e:	7b51      	ldrb	r1, [r2, #13]
 801c610:	7992      	ldrb	r2, [r2, #6]
 801c612:	0149      	lsls	r1, r1, #5
 801c614:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c618:	4311      	orrs	r1, r2
 801c61a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c61e:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801c622:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c626:	d00d      	beq.n	801c644 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801c628:	442b      	add	r3, r5
 801c62a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801c62e:	b29b      	uxth	r3, r3
 801c630:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c634:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801c638:	10db      	asrs	r3, r3, #3
 801c63a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c63e:	4313      	orrs	r3, r2
 801c640:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c644:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801c648:	00cb      	lsls	r3, r1, #3
 801c64a:	064f      	lsls	r7, r1, #25
 801c64c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c650:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c654:	ea43 0302 	orr.w	r3, r3, r2
 801c658:	bf44      	itt	mi
 801c65a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c65e:	b21b      	sxthmi	r3, r3
 801c660:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c664:	1b5d      	subs	r5, r3, r5
 801c666:	4632      	mov	r2, r6
 801c668:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c66c:	e6fa      	b.n	801c464 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801c66e:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 801c672:	4694      	mov	ip, r2
 801c674:	f102 0908 	add.w	r9, r2, #8
 801c678:	4676      	mov	r6, lr
 801c67a:	f8dc 0000 	ldr.w	r0, [ip]
 801c67e:	f10c 0c08 	add.w	ip, ip, #8
 801c682:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801c686:	46f0      	mov	r8, lr
 801c688:	45cc      	cmp	ip, r9
 801c68a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801c68e:	46c6      	mov	lr, r8
 801c690:	d1f3      	bne.n	801c67a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801c692:	f8dc 0000 	ldr.w	r0, [ip]
 801c696:	f8c8 0000 	str.w	r0, [r8]
 801c69a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801c69e:	f8a8 1004 	strh.w	r1, [r8, #4]
 801c6a2:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801c6a6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c6aa:	d009      	beq.n	801c6c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801c6ac:	7b51      	ldrb	r1, [r2, #13]
 801c6ae:	7992      	ldrb	r2, [r2, #6]
 801c6b0:	0149      	lsls	r1, r1, #5
 801c6b2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c6b6:	4311      	orrs	r1, r2
 801c6b8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c6bc:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801c6c0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c6c4:	d00d      	beq.n	801c6e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801c6c6:	1bdb      	subs	r3, r3, r7
 801c6c8:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801c6cc:	b29b      	uxth	r3, r3
 801c6ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c6d2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801c6d6:	10db      	asrs	r3, r3, #3
 801c6d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c6dc:	4313      	orrs	r3, r2
 801c6de:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c6e2:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801c6e6:	00cb      	lsls	r3, r1, #3
 801c6e8:	0648      	lsls	r0, r1, #25
 801c6ea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c6ee:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c6f2:	ea43 0302 	orr.w	r3, r3, r2
 801c6f6:	bf44      	itt	mi
 801c6f8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c6fc:	b21b      	sxthmi	r3, r3
 801c6fe:	e7b1      	b.n	801c664 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801c700 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801c700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c704:	461d      	mov	r5, r3
 801c706:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801c708:	4604      	mov	r4, r0
 801c70a:	4617      	mov	r7, r2
 801c70c:	b92b      	cbnz	r3, 801c71a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801c70e:	4b23      	ldr	r3, [pc, #140]	; (801c79c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x9c>)
 801c710:	21c0      	movs	r1, #192	; 0xc0
 801c712:	4a23      	ldr	r2, [pc, #140]	; (801c7a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa0>)
 801c714:	4823      	ldr	r0, [pc, #140]	; (801c7a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801c716:	f00a fb99 	bl	8026e4c <__assert_func>
 801c71a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c71c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c720:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c724:	f7f6 ff80 	bl	8013628 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c728:	683b      	ldr	r3, [r7, #0]
 801c72a:	4601      	mov	r1, r0
 801c72c:	4606      	mov	r6, r0
 801c72e:	4638      	mov	r0, r7
 801c730:	68db      	ldr	r3, [r3, #12]
 801c732:	4798      	blx	r3
 801c734:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c738:	4602      	mov	r2, r0
 801c73a:	6028      	str	r0, [r5, #0]
 801c73c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c740:	d215      	bcs.n	801c76e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801c742:	4643      	mov	r3, r8
 801c744:	4639      	mov	r1, r7
 801c746:	4620      	mov	r0, r4
 801c748:	f7ff fe38 	bl	801c3bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c74c:	6028      	str	r0, [r5, #0]
 801c74e:	682b      	ldr	r3, [r5, #0]
 801c750:	b143      	cbz	r3, 801c764 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801c752:	7b5a      	ldrb	r2, [r3, #13]
 801c754:	7a9b      	ldrb	r3, [r3, #10]
 801c756:	0052      	lsls	r2, r2, #1
 801c758:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c75c:	4313      	orrs	r3, r2
 801c75e:	bf0c      	ite	eq
 801c760:	2301      	moveq	r3, #1
 801c762:	2300      	movne	r3, #0
 801c764:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c768:	4630      	mov	r0, r6
 801c76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c76e:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 801c772:	b29b      	uxth	r3, r3
 801c774:	2b7f      	cmp	r3, #127	; 0x7f
 801c776:	d804      	bhi.n	801c782 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x82>
 801c778:	4639      	mov	r1, r7
 801c77a:	4620      	mov	r0, r4
 801c77c:	f7ff fd04 	bl	801c188 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c780:	e7e4      	b.n	801c74c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801c782:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c786:	2b00      	cmp	r3, #0
 801c788:	d0e1      	beq.n	801c74e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801c78a:	f640 1302 	movw	r3, #2306	; 0x902
 801c78e:	429e      	cmp	r6, r3
 801c790:	d1dd      	bne.n	801c74e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801c792:	4601      	mov	r1, r0
 801c794:	4620      	mov	r0, r4
 801c796:	f7ff fcc7 	bl	801c128 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c79a:	e7d7      	b.n	801c74c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801c79c:	0802b620 	.word	0x0802b620
 801c7a0:	0802b892 	.word	0x0802b892
 801c7a4:	0802b629 	.word	0x0802b629

0801c7a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801c7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c7ac:	461d      	mov	r5, r3
 801c7ae:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801c7b0:	4604      	mov	r4, r0
 801c7b2:	4617      	mov	r7, r2
 801c7b4:	b92b      	cbnz	r3, 801c7c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801c7b6:	4b25      	ldr	r3, [pc, #148]	; (801c84c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa4>)
 801c7b8:	21c0      	movs	r1, #192	; 0xc0
 801c7ba:	4a25      	ldr	r2, [pc, #148]	; (801c850 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801c7bc:	4825      	ldr	r0, [pc, #148]	; (801c854 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801c7be:	f00a fb45 	bl	8026e4c <__assert_func>
 801c7c2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c7c4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c7c8:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c7cc:	f7f6 ff2c 	bl	8013628 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c7d0:	683b      	ldr	r3, [r7, #0]
 801c7d2:	4601      	mov	r1, r0
 801c7d4:	4606      	mov	r6, r0
 801c7d6:	4638      	mov	r0, r7
 801c7d8:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801c7dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c7e0:	47c8      	blx	r9
 801c7e2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c7e6:	4602      	mov	r2, r0
 801c7e8:	6028      	str	r0, [r5, #0]
 801c7ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c7ee:	d215      	bcs.n	801c81c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801c7f0:	4643      	mov	r3, r8
 801c7f2:	4639      	mov	r1, r7
 801c7f4:	4620      	mov	r0, r4
 801c7f6:	f7ff fde1 	bl	801c3bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c7fa:	6028      	str	r0, [r5, #0]
 801c7fc:	682b      	ldr	r3, [r5, #0]
 801c7fe:	b143      	cbz	r3, 801c812 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801c800:	7b5a      	ldrb	r2, [r3, #13]
 801c802:	7a9b      	ldrb	r3, [r3, #10]
 801c804:	0052      	lsls	r2, r2, #1
 801c806:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c80a:	4313      	orrs	r3, r2
 801c80c:	bf0c      	ite	eq
 801c80e:	2301      	moveq	r3, #1
 801c810:	2300      	movne	r3, #0
 801c812:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c816:	4630      	mov	r0, r6
 801c818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c81c:	f5a6 6360 	sub.w	r3, r6, #3584	; 0xe00
 801c820:	b29b      	uxth	r3, r3
 801c822:	2b7f      	cmp	r3, #127	; 0x7f
 801c824:	d804      	bhi.n	801c830 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x88>
 801c826:	4639      	mov	r1, r7
 801c828:	4620      	mov	r0, r4
 801c82a:	f7ff fcad 	bl	801c188 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c82e:	e7e4      	b.n	801c7fa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 801c830:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c834:	2b00      	cmp	r3, #0
 801c836:	d0e1      	beq.n	801c7fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801c838:	f640 1302 	movw	r3, #2306	; 0x902
 801c83c:	429e      	cmp	r6, r3
 801c83e:	d1dd      	bne.n	801c7fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801c840:	4601      	mov	r1, r0
 801c842:	4620      	mov	r0, r4
 801c844:	f7ff fc70 	bl	801c128 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c848:	e7d7      	b.n	801c7fa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x52>
 801c84a:	bf00      	nop
 801c84c:	0802b620 	.word	0x0802b620
 801c850:	0802b892 	.word	0x0802b892
 801c854:	0802b629 	.word	0x0802b629

0801c858 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c858:	b510      	push	{r4, lr}
 801c85a:	4604      	mov	r4, r0
 801c85c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801c85e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c860:	b9d9      	cbnz	r1, 801c89a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801c862:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c864:	2b0a      	cmp	r3, #10
 801c866:	d036      	beq.n	801c8d6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801c868:	4620      	mov	r0, r4
 801c86a:	f7ff fc26 	bl	801c0ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c86e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c870:	2b09      	cmp	r3, #9
 801c872:	d906      	bls.n	801c882 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801c874:	4b18      	ldr	r3, [pc, #96]	; (801c8d8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801c876:	f44f 7182 	mov.w	r1, #260	; 0x104
 801c87a:	4a18      	ldr	r2, [pc, #96]	; (801c8dc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801c87c:	4818      	ldr	r0, [pc, #96]	; (801c8e0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801c87e:	f00a fae5 	bl	8026e4c <__assert_func>
 801c882:	1c5a      	adds	r2, r3, #1
 801c884:	8622      	strh	r2, [r4, #48]	; 0x30
 801c886:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801c888:	4413      	add	r3, r2
 801c88a:	b29b      	uxth	r3, r3
 801c88c:	2b09      	cmp	r3, #9
 801c88e:	bf88      	it	hi
 801c890:	3b0a      	subhi	r3, #10
 801c892:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c896:	8358      	strh	r0, [r3, #26]
 801c898:	e7e3      	b.n	801c862 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801c89a:	2b0a      	cmp	r3, #10
 801c89c:	d01b      	beq.n	801c8d6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801c89e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c8a0:	3901      	subs	r1, #1
 801c8a2:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801c8a6:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801c8a8:	8721      	strh	r1, [r4, #56]	; 0x38
 801c8aa:	1c51      	adds	r1, r2, #1
 801c8ac:	b289      	uxth	r1, r1
 801c8ae:	2901      	cmp	r1, #1
 801c8b0:	bf8a      	itet	hi
 801c8b2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c8b6:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801c8b8:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801c8ba:	2b09      	cmp	r3, #9
 801c8bc:	d8da      	bhi.n	801c874 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801c8be:	1c5a      	adds	r2, r3, #1
 801c8c0:	8622      	strh	r2, [r4, #48]	; 0x30
 801c8c2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801c8c4:	4413      	add	r3, r2
 801c8c6:	b29b      	uxth	r3, r3
 801c8c8:	2b09      	cmp	r3, #9
 801c8ca:	bf88      	it	hi
 801c8cc:	3b0a      	subhi	r3, #10
 801c8ce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c8d2:	8358      	strh	r0, [r3, #26]
 801c8d4:	e7c2      	b.n	801c85c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801c8d6:	bd10      	pop	{r4, pc}
 801c8d8:	0802b655 	.word	0x0802b655
 801c8dc:	0802b9e8 	.word	0x0802b9e8
 801c8e0:	0802b629 	.word	0x0802b629

0801c8e4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c8e4:	b538      	push	{r3, r4, r5, lr}
 801c8e6:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801c8e8:	4604      	mov	r4, r0
 801c8ea:	b92a      	cbnz	r2, 801c8f8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801c8ec:	4b13      	ldr	r3, [pc, #76]	; (801c93c <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801c8ee:	21d5      	movs	r1, #213	; 0xd5
 801c8f0:	4a13      	ldr	r2, [pc, #76]	; (801c940 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801c8f2:	4814      	ldr	r0, [pc, #80]	; (801c944 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801c8f4:	f00a faaa 	bl	8026e4c <__assert_func>
 801c8f8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c8fa:	3a01      	subs	r2, #1
 801c8fc:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801c900:	8b4d      	ldrh	r5, [r1, #26]
 801c902:	8602      	strh	r2, [r0, #48]	; 0x30
 801c904:	1c5a      	adds	r2, r3, #1
 801c906:	b292      	uxth	r2, r2
 801c908:	2a09      	cmp	r2, #9
 801c90a:	bf8a      	itet	hi
 801c90c:	3b09      	subhi	r3, #9
 801c90e:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801c910:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801c912:	f7ff ffa1 	bl	801c858 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c916:	8b23      	ldrh	r3, [r4, #24]
 801c918:	2b01      	cmp	r3, #1
 801c91a:	bf9c      	itt	ls
 801c91c:	3301      	addls	r3, #1
 801c91e:	8323      	strhls	r3, [r4, #24]
 801c920:	8ae3      	ldrh	r3, [r4, #22]
 801c922:	b90b      	cbnz	r3, 801c928 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801c924:	2302      	movs	r3, #2
 801c926:	82e3      	strh	r3, [r4, #22]
 801c928:	8ae3      	ldrh	r3, [r4, #22]
 801c92a:	4628      	mov	r0, r5
 801c92c:	3b01      	subs	r3, #1
 801c92e:	b29b      	uxth	r3, r3
 801c930:	82e3      	strh	r3, [r4, #22]
 801c932:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c936:	8265      	strh	r5, [r4, #18]
 801c938:	bd38      	pop	{r3, r4, r5, pc}
 801c93a:	bf00      	nop
 801c93c:	0802b620 	.word	0x0802b620
 801c940:	0802b93d 	.word	0x0802b93d
 801c944:	0802b629 	.word	0x0802b629

0801c948 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c948:	428a      	cmp	r2, r1
 801c94a:	b538      	push	{r3, r4, r5, lr}
 801c94c:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801c94e:	d90c      	bls.n	801c96a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801c950:	b92c      	cbnz	r4, 801c95e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801c952:	4b1c      	ldr	r3, [pc, #112]	; (801c9c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801c954:	21e1      	movs	r1, #225	; 0xe1
 801c956:	4a1c      	ldr	r2, [pc, #112]	; (801c9c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801c958:	481c      	ldr	r0, [pc, #112]	; (801c9cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801c95a:	f00a fa77 	bl	8026e4c <__assert_func>
 801c95e:	3c01      	subs	r4, #1
 801c960:	4b1b      	ldr	r3, [pc, #108]	; (801c9d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801c962:	4a1c      	ldr	r2, [pc, #112]	; (801c9d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801c964:	21c5      	movs	r1, #197	; 0xc5
 801c966:	8604      	strh	r4, [r0, #48]	; 0x30
 801c968:	e7f6      	b.n	801c958 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c96a:	428c      	cmp	r4, r1
 801c96c:	d203      	bcs.n	801c976 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801c96e:	4b1a      	ldr	r3, [pc, #104]	; (801c9d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801c970:	21cb      	movs	r1, #203	; 0xcb
 801c972:	4a1a      	ldr	r2, [pc, #104]	; (801c9dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801c974:	e7f0      	b.n	801c958 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c976:	1a64      	subs	r4, r4, r1
 801c978:	250a      	movs	r5, #10
 801c97a:	8604      	strh	r4, [r0, #48]	; 0x30
 801c97c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801c97e:	4421      	add	r1, r4
 801c980:	b289      	uxth	r1, r1
 801c982:	2909      	cmp	r1, #9
 801c984:	bf88      	it	hi
 801c986:	390a      	subhi	r1, #10
 801c988:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801c98a:	b1ba      	cbz	r2, 801c9bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801c98c:	3a01      	subs	r2, #1
 801c98e:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801c990:	b292      	uxth	r2, r2
 801c992:	2909      	cmp	r1, #9
 801c994:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801c998:	d903      	bls.n	801c9a2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801c99a:	4b11      	ldr	r3, [pc, #68]	; (801c9e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801c99c:	21e6      	movs	r1, #230	; 0xe6
 801c99e:	4a11      	ldr	r2, [pc, #68]	; (801c9e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801c9a0:	e7da      	b.n	801c958 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c9a2:	3101      	adds	r1, #1
 801c9a4:	8601      	strh	r1, [r0, #48]	; 0x30
 801c9a6:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801c9a8:	b901      	cbnz	r1, 801c9ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801c9aa:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801c9ac:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801c9ae:	3901      	subs	r1, #1
 801c9b0:	b289      	uxth	r1, r1
 801c9b2:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801c9b4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c9b8:	834c      	strh	r4, [r1, #26]
 801c9ba:	e7e6      	b.n	801c98a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801c9bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c9c0:	f7ff bf4a 	b.w	801c858 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c9c4:	0802b620 	.word	0x0802b620
 801c9c8:	0802b716 	.word	0x0802b716
 801c9cc:	0802b629 	.word	0x0802b629
 801c9d0:	0802b661 	.word	0x0802b661
 801c9d4:	0802b7c0 	.word	0x0802b7c0
 801c9d8:	0802b66f 	.word	0x0802b66f
 801c9dc:	0802ba97 	.word	0x0802ba97
 801c9e0:	0802b67b 	.word	0x0802b67b
 801c9e4:	0802b68e 	.word	0x0802b68e

0801c9e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c9e8:	3a01      	subs	r2, #1
 801c9ea:	b570      	push	{r4, r5, r6, lr}
 801c9ec:	b292      	uxth	r2, r2
 801c9ee:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801c9f2:	42b2      	cmp	r2, r6
 801c9f4:	d019      	beq.n	801ca2a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801c9f6:	8b04      	ldrh	r4, [r0, #24]
 801c9f8:	f831 5b02 	ldrh.w	r5, [r1], #2
 801c9fc:	4294      	cmp	r4, r2
 801c9fe:	d805      	bhi.n	801ca0c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801ca00:	4b19      	ldr	r3, [pc, #100]	; (801ca68 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801ca02:	4a1a      	ldr	r2, [pc, #104]	; (801ca6c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801ca04:	21c5      	movs	r1, #197	; 0xc5
 801ca06:	481a      	ldr	r0, [pc, #104]	; (801ca70 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801ca08:	f00a fa20 	bl	8026e4c <__assert_func>
 801ca0c:	8ac4      	ldrh	r4, [r0, #22]
 801ca0e:	4414      	add	r4, r2
 801ca10:	3a01      	subs	r2, #1
 801ca12:	b2a4      	uxth	r4, r4
 801ca14:	b292      	uxth	r2, r2
 801ca16:	2c01      	cmp	r4, #1
 801ca18:	bf88      	it	hi
 801ca1a:	3c02      	subhi	r4, #2
 801ca1c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ca20:	8a64      	ldrh	r4, [r4, #18]
 801ca22:	42ac      	cmp	r4, r5
 801ca24:	d0e5      	beq.n	801c9f2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801ca26:	2000      	movs	r0, #0
 801ca28:	bd70      	pop	{r4, r5, r6, pc}
 801ca2a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ca2e:	2400      	movs	r4, #0
 801ca30:	4413      	add	r3, r2
 801ca32:	b2a2      	uxth	r2, r4
 801ca34:	429a      	cmp	r2, r3
 801ca36:	da14      	bge.n	801ca62 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801ca38:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801ca3a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801ca3e:	4296      	cmp	r6, r2
 801ca40:	d802      	bhi.n	801ca48 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801ca42:	4b09      	ldr	r3, [pc, #36]	; (801ca68 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801ca44:	4a0b      	ldr	r2, [pc, #44]	; (801ca74 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801ca46:	e7dd      	b.n	801ca04 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801ca48:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801ca4a:	3401      	adds	r4, #1
 801ca4c:	4432      	add	r2, r6
 801ca4e:	b292      	uxth	r2, r2
 801ca50:	2a09      	cmp	r2, #9
 801ca52:	bf88      	it	hi
 801ca54:	3a0a      	subhi	r2, #10
 801ca56:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801ca5a:	8b52      	ldrh	r2, [r2, #26]
 801ca5c:	42aa      	cmp	r2, r5
 801ca5e:	d0e8      	beq.n	801ca32 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801ca60:	e7e1      	b.n	801ca26 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801ca62:	2001      	movs	r0, #1
 801ca64:	e7e0      	b.n	801ca28 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801ca66:	bf00      	nop
 801ca68:	0802b661 	.word	0x0802b661
 801ca6c:	0802bb1b 	.word	0x0802bb1b
 801ca70:	0802b629 	.word	0x0802b629
 801ca74:	0802b7c0 	.word	0x0802b7c0

0801ca78 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801ca78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca7c:	4605      	mov	r5, r0
 801ca7e:	4616      	mov	r6, r2
 801ca80:	1c8c      	adds	r4, r1, #2
 801ca82:	8809      	ldrh	r1, [r1, #0]
 801ca84:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801ca88:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801ca8c:	42b3      	cmp	r3, r6
 801ca8e:	d124      	bne.n	801cada <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801ca90:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801ca94:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801ca98:	f001 070f 	and.w	r7, r1, #15
 801ca9c:	4652      	mov	r2, sl
 801ca9e:	f8cd 8000 	str.w	r8, [sp]
 801caa2:	464b      	mov	r3, r9
 801caa4:	4621      	mov	r1, r4
 801caa6:	4628      	mov	r0, r5
 801caa8:	f7ff ff9e 	bl	801c9e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801caac:	4683      	mov	fp, r0
 801caae:	b168      	cbz	r0, 801cacc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801cab0:	eb0a 0109 	add.w	r1, sl, r9
 801cab4:	463a      	mov	r2, r7
 801cab6:	4628      	mov	r0, r5
 801cab8:	4441      	add	r1, r8
 801caba:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801cabe:	4649      	mov	r1, r9
 801cac0:	f7ff ff42 	bl	801c948 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801cac4:	4658      	mov	r0, fp
 801cac6:	b003      	add	sp, #12
 801cac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cacc:	eb07 010a 	add.w	r1, r7, sl
 801cad0:	4449      	add	r1, r9
 801cad2:	4441      	add	r1, r8
 801cad4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801cad8:	e7d2      	b.n	801ca80 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801cada:	f04f 0b00 	mov.w	fp, #0
 801cade:	e7f1      	b.n	801cac4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801cae0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801cae0:	b570      	push	{r4, r5, r6, lr}
 801cae2:	8810      	ldrh	r0, [r2, #0]
 801cae4:	4298      	cmp	r0, r3
 801cae6:	d817      	bhi.n	801cb18 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cae8:	1e48      	subs	r0, r1, #1
 801caea:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801caee:	4298      	cmp	r0, r3
 801caf0:	d312      	bcc.n	801cb18 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801caf2:	2400      	movs	r4, #0
 801caf4:	428c      	cmp	r4, r1
 801caf6:	d20f      	bcs.n	801cb18 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801caf8:	1860      	adds	r0, r4, r1
 801cafa:	1040      	asrs	r0, r0, #1
 801cafc:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801cb00:	0085      	lsls	r5, r0, #2
 801cb02:	42b3      	cmp	r3, r6
 801cb04:	d902      	bls.n	801cb0c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801cb06:	3001      	adds	r0, #1
 801cb08:	b284      	uxth	r4, r0
 801cb0a:	e7f3      	b.n	801caf4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801cb0c:	d201      	bcs.n	801cb12 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801cb0e:	b281      	uxth	r1, r0
 801cb10:	e7f0      	b.n	801caf4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801cb12:	442a      	add	r2, r5
 801cb14:	8850      	ldrh	r0, [r2, #2]
 801cb16:	bd70      	pop	{r4, r5, r6, pc}
 801cb18:	2000      	movs	r0, #0
 801cb1a:	e7fc      	b.n	801cb16 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801cb1c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801cb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb20:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801cb22:	4604      	mov	r4, r0
 801cb24:	260b      	movs	r6, #11
 801cb26:	886f      	ldrh	r7, [r5, #2]
 801cb28:	087f      	lsrs	r7, r7, #1
 801cb2a:	3e01      	subs	r6, #1
 801cb2c:	d01b      	beq.n	801cb66 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801cb2e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801cb30:	b92b      	cbnz	r3, 801cb3e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801cb32:	4b0e      	ldr	r3, [pc, #56]	; (801cb6c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801cb34:	21c0      	movs	r1, #192	; 0xc0
 801cb36:	4a0e      	ldr	r2, [pc, #56]	; (801cb70 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801cb38:	480e      	ldr	r0, [pc, #56]	; (801cb74 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801cb3a:	f00a f987 	bl	8026e4c <__assert_func>
 801cb3e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801cb40:	462a      	mov	r2, r5
 801cb42:	4639      	mov	r1, r7
 801cb44:	4620      	mov	r0, r4
 801cb46:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cb4a:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801cb4e:	4643      	mov	r3, r8
 801cb50:	f7ff ffc6 	bl	801cae0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801cb54:	b138      	cbz	r0, 801cb66 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801cb56:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801cb5a:	4642      	mov	r2, r8
 801cb5c:	4620      	mov	r0, r4
 801cb5e:	f7ff ff8b 	bl	801ca78 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801cb62:	2800      	cmp	r0, #0
 801cb64:	d1e1      	bne.n	801cb2a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801cb66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb6a:	bf00      	nop
 801cb6c:	0802b620 	.word	0x0802b620
 801cb70:	0802b892 	.word	0x0802b892
 801cb74:	0802b629 	.word	0x0802b629

0801cb78 <_ZN8touchgfx8ceil28_4El>:
 801cb78:	f110 030f 	adds.w	r3, r0, #15
 801cb7c:	d401      	bmi.n	801cb82 <_ZN8touchgfx8ceil28_4El+0xa>
 801cb7e:	1118      	asrs	r0, r3, #4
 801cb80:	4770      	bx	lr
 801cb82:	2210      	movs	r2, #16
 801cb84:	f1c0 0001 	rsb	r0, r0, #1
 801cb88:	fb93 f3f2 	sdiv	r3, r3, r2
 801cb8c:	f010 000f 	ands.w	r0, r0, #15
 801cb90:	bf18      	it	ne
 801cb92:	2001      	movne	r0, #1
 801cb94:	1a18      	subs	r0, r3, r0
 801cb96:	4770      	bx	lr

0801cb98 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801cb98:	2900      	cmp	r1, #0
 801cb9a:	b538      	push	{r3, r4, r5, lr}
 801cb9c:	dc05      	bgt.n	801cbaa <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801cb9e:	4b0f      	ldr	r3, [pc, #60]	; (801cbdc <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801cba0:	21fa      	movs	r1, #250	; 0xfa
 801cba2:	4a0f      	ldr	r2, [pc, #60]	; (801cbe0 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801cba4:	480f      	ldr	r0, [pc, #60]	; (801cbe4 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801cba6:	f00a f951 	bl	8026e4c <__assert_func>
 801cbaa:	2800      	cmp	r0, #0
 801cbac:	db06      	blt.n	801cbbc <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801cbae:	fb90 f4f1 	sdiv	r4, r0, r1
 801cbb2:	fb01 0114 	mls	r1, r1, r4, r0
 801cbb6:	6014      	str	r4, [r2, #0]
 801cbb8:	6019      	str	r1, [r3, #0]
 801cbba:	bd38      	pop	{r3, r4, r5, pc}
 801cbbc:	4240      	negs	r0, r0
 801cbbe:	fb90 f4f1 	sdiv	r4, r0, r1
 801cbc2:	4265      	negs	r5, r4
 801cbc4:	fb01 0014 	mls	r0, r1, r4, r0
 801cbc8:	6015      	str	r5, [r2, #0]
 801cbca:	6018      	str	r0, [r3, #0]
 801cbcc:	2800      	cmp	r0, #0
 801cbce:	d0f4      	beq.n	801cbba <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801cbd0:	6810      	ldr	r0, [r2, #0]
 801cbd2:	3801      	subs	r0, #1
 801cbd4:	6010      	str	r0, [r2, #0]
 801cbd6:	6818      	ldr	r0, [r3, #0]
 801cbd8:	1a09      	subs	r1, r1, r0
 801cbda:	e7ed      	b.n	801cbb8 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801cbdc:	0802bbec 	.word	0x0802bbec
 801cbe0:	0802bc2b 	.word	0x0802bc2b
 801cbe4:	0802bbfc 	.word	0x0802bbfc

0801cbe8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801cbe8:	b570      	push	{r4, r5, r6, lr}
 801cbea:	694a      	ldr	r2, [r1, #20]
 801cbec:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801cbee:	684b      	ldr	r3, [r1, #4]
 801cbf0:	1b54      	subs	r4, r2, r5
 801cbf2:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801cbf4:	f000 8106 	beq.w	801ce04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801cbf8:	1b9b      	subs	r3, r3, r6
 801cbfa:	d003      	beq.n	801cc04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801cbfc:	4363      	muls	r3, r4
 801cbfe:	2210      	movs	r2, #16
 801cc00:	fb93 f3f2 	sdiv	r3, r3, r2
 801cc04:	680c      	ldr	r4, [r1, #0]
 801cc06:	698a      	ldr	r2, [r1, #24]
 801cc08:	1b65      	subs	r5, r4, r5
 801cc0a:	f000 80fd 	beq.w	801ce08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801cc0e:	1b92      	subs	r2, r2, r6
 801cc10:	d003      	beq.n	801cc1a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801cc12:	436a      	muls	r2, r5
 801cc14:	2410      	movs	r4, #16
 801cc16:	fb92 f2f4 	sdiv	r2, r2, r4
 801cc1a:	1a9b      	subs	r3, r3, r2
 801cc1c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801ce44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801cc20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cc24:	460a      	mov	r2, r1
 801cc26:	ee07 3a90 	vmov	s15, r3
 801cc2a:	f100 040c 	add.w	r4, r0, #12
 801cc2e:	4603      	mov	r3, r0
 801cc30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cc34:	ee67 7a84 	vmul.f32	s15, s15, s8
 801cc38:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801cc3c:	eeb1 6a43 	vneg.f32	s12, s6
 801cc40:	edd2 7a02 	vldr	s15, [r2, #8]
 801cc44:	3214      	adds	r2, #20
 801cc46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801cc4a:	ece3 6a01 	vstmia	r3!, {s13}
 801cc4e:	429c      	cmp	r4, r3
 801cc50:	ed52 7a02 	vldr	s15, [r2, #-8]
 801cc54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cc58:	edc3 7a02 	vstr	s15, [r3, #8]
 801cc5c:	ed52 7a01 	vldr	s15, [r2, #-4]
 801cc60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cc64:	edc3 7a05 	vstr	s15, [r3, #20]
 801cc68:	d1ea      	bne.n	801cc40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801cc6a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801cc6c:	698b      	ldr	r3, [r1, #24]
 801cc6e:	edd0 4a02 	vldr	s9, [r0, #8]
 801cc72:	1a9b      	subs	r3, r3, r2
 801cc74:	edd0 3a00 	vldr	s7, [r0]
 801cc78:	edd0 6a01 	vldr	s13, [r0, #4]
 801cc7c:	ee07 3a90 	vmov	s15, r3
 801cc80:	684b      	ldr	r3, [r1, #4]
 801cc82:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801cc86:	ed90 5a05 	vldr	s10, [r0, #20]
 801cc8a:	1a9b      	subs	r3, r3, r2
 801cc8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cc90:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801cc94:	ed90 2a03 	vldr	s4, [r0, #12]
 801cc98:	ee07 3a10 	vmov	s14, r3
 801cc9c:	edd0 5a04 	vldr	s11, [r0, #16]
 801cca0:	ee67 7a84 	vmul.f32	s15, s15, s8
 801cca4:	ed90 1a07 	vldr	s2, [r0, #28]
 801cca8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ccac:	edd0 2a06 	vldr	s5, [r0, #24]
 801ccb0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801ccb4:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801ccb8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ccbc:	ee32 5a45 	vsub.f32	s10, s4, s10
 801ccc0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ccc4:	ee67 7a83 	vmul.f32	s15, s15, s6
 801ccc8:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801cccc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801ccce:	694a      	ldr	r2, [r1, #20]
 801ccd0:	1b13      	subs	r3, r2, r4
 801ccd2:	ee07 3a10 	vmov	s14, r3
 801ccd6:	680b      	ldr	r3, [r1, #0]
 801ccd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ccdc:	1b1b      	subs	r3, r3, r4
 801ccde:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cce2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801cce6:	ee07 3a10 	vmov	s14, r3
 801ccea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ccee:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ccf2:	eee6 4a87 	vfma.f32	s9, s13, s14
 801ccf6:	ee64 4a86 	vmul.f32	s9, s9, s12
 801ccfa:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801ccfe:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801cd00:	698b      	ldr	r3, [r1, #24]
 801cd02:	1a9b      	subs	r3, r3, r2
 801cd04:	ee06 3a90 	vmov	s13, r3
 801cd08:	684b      	ldr	r3, [r1, #4]
 801cd0a:	1a9b      	subs	r3, r3, r2
 801cd0c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801cd10:	ee07 3a10 	vmov	s14, r3
 801cd14:	ee66 6a84 	vmul.f32	s13, s13, s8
 801cd18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cd1c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801cd20:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cd24:	eee5 6a87 	vfma.f32	s13, s11, s14
 801cd28:	ee66 6a83 	vmul.f32	s13, s13, s6
 801cd2c:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801cd30:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801cd32:	694a      	ldr	r2, [r1, #20]
 801cd34:	1b13      	subs	r3, r2, r4
 801cd36:	ee07 3a10 	vmov	s14, r3
 801cd3a:	680b      	ldr	r3, [r1, #0]
 801cd3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cd40:	1b1b      	subs	r3, r3, r4
 801cd42:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cd46:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801cd4a:	ee07 3a10 	vmov	s14, r3
 801cd4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cd52:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cd56:	eea5 5a87 	vfma.f32	s10, s11, s14
 801cd5a:	edd0 5a08 	vldr	s11, [r0, #32]
 801cd5e:	ee31 1a65 	vsub.f32	s2, s2, s11
 801cd62:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801cd66:	ee25 5a06 	vmul.f32	s10, s10, s12
 801cd6a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801cd6e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801cd70:	698b      	ldr	r3, [r1, #24]
 801cd72:	1a9b      	subs	r3, r3, r2
 801cd74:	ee07 3a10 	vmov	s14, r3
 801cd78:	684b      	ldr	r3, [r1, #4]
 801cd7a:	1a9b      	subs	r3, r3, r2
 801cd7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cd80:	ee01 3a90 	vmov	s3, r3
 801cd84:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cd88:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801cd8c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801cd90:	ee61 1a84 	vmul.f32	s3, s3, s8
 801cd94:	eea1 7a21 	vfma.f32	s14, s2, s3
 801cd98:	ee27 7a03 	vmul.f32	s14, s14, s6
 801cd9c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801cda0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801cda2:	694a      	ldr	r2, [r1, #20]
 801cda4:	1b13      	subs	r3, r2, r4
 801cda6:	ee03 3a10 	vmov	s6, r3
 801cdaa:	680b      	ldr	r3, [r1, #0]
 801cdac:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801cdb0:	1b1b      	subs	r3, r3, r4
 801cdb2:	ee23 3a04 	vmul.f32	s6, s6, s8
 801cdb6:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801cdba:	ee03 3a10 	vmov	s6, r3
 801cdbe:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801cdc2:	ee23 4a04 	vmul.f32	s8, s6, s8
 801cdc6:	eee1 5a04 	vfma.f32	s11, s2, s8
 801cdca:	ee25 6a86 	vmul.f32	s12, s11, s12
 801cdce:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801cdd2:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801cdd6:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801cdda:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801cdde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cde2:	dd13      	ble.n	801ce0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801cde4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801cde8:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801cdec:	63c3      	str	r3, [r0, #60]	; 0x3c
 801cdee:	eee3 7a87 	vfma.f32	s15, s7, s14
 801cdf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cdf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdfa:	dd15      	ble.n	801ce28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801cdfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ce00:	6403      	str	r3, [r0, #64]	; 0x40
 801ce02:	bd70      	pop	{r4, r5, r6, pc}
 801ce04:	4623      	mov	r3, r4
 801ce06:	e6fd      	b.n	801cc04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ce08:	462a      	mov	r2, r5
 801ce0a:	e706      	b.n	801cc1a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ce0c:	d502      	bpl.n	801ce14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801ce0e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ce12:	e7e9      	b.n	801cde8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801ce14:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801ce18:	eea3 2a85 	vfma.f32	s4, s7, s10
 801ce1c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801ce20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce24:	dade      	bge.n	801cde4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801ce26:	e7f2      	b.n	801ce0e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801ce28:	d502      	bpl.n	801ce30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801ce2a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ce2e:	e7e7      	b.n	801ce00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801ce30:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801ce34:	eee3 4a86 	vfma.f32	s9, s7, s12
 801ce38:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801ce3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce40:	dadc      	bge.n	801cdfc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801ce42:	e7f2      	b.n	801ce2a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801ce44:	3d800000 	.word	0x3d800000

0801ce48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801ce48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce4c:	f04f 0814 	mov.w	r8, #20
 801ce50:	4604      	mov	r4, r0
 801ce52:	4617      	mov	r7, r2
 801ce54:	460d      	mov	r5, r1
 801ce56:	fb08 f903 	mul.w	r9, r8, r3
 801ce5a:	461e      	mov	r6, r3
 801ce5c:	eb02 0a09 	add.w	sl, r2, r9
 801ce60:	f8da 0004 	ldr.w	r0, [sl, #4]
 801ce64:	f7ff fe88 	bl	801cb78 <_ZN8touchgfx8ceil28_4El>
 801ce68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ce6a:	6160      	str	r0, [r4, #20]
 801ce6c:	fb08 f803 	mul.w	r8, r8, r3
 801ce70:	9001      	str	r0, [sp, #4]
 801ce72:	eb07 0b08 	add.w	fp, r7, r8
 801ce76:	f8db 0004 	ldr.w	r0, [fp, #4]
 801ce7a:	f7ff fe7d 	bl	801cb78 <_ZN8touchgfx8ceil28_4El>
 801ce7e:	9a01      	ldr	r2, [sp, #4]
 801ce80:	1a80      	subs	r0, r0, r2
 801ce82:	61a0      	str	r0, [r4, #24]
 801ce84:	2800      	cmp	r0, #0
 801ce86:	f000 8088 	beq.w	801cf9a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801ce8a:	f857 3009 	ldr.w	r3, [r7, r9]
 801ce8e:	f857 c008 	ldr.w	ip, [r7, r8]
 801ce92:	f8db 0004 	ldr.w	r0, [fp, #4]
 801ce96:	ebac 0c03 	sub.w	ip, ip, r3
 801ce9a:	f8da 1004 	ldr.w	r1, [sl, #4]
 801ce9e:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801cea2:	1a40      	subs	r0, r0, r1
 801cea4:	fb0b f202 	mul.w	r2, fp, r2
 801cea8:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801ceac:	fb0c 2211 	mls	r2, ip, r1, r2
 801ceb0:	4641      	mov	r1, r8
 801ceb2:	fb00 2003 	mla	r0, r0, r3, r2
 801ceb6:	f104 0310 	add.w	r3, r4, #16
 801ceba:	4622      	mov	r2, r4
 801cebc:	3801      	subs	r0, #1
 801cebe:	4440      	add	r0, r8
 801cec0:	f7ff fe6a 	bl	801cb98 <_ZN8touchgfx11floorDivModEllRlS0_>
 801cec4:	f104 0308 	add.w	r3, r4, #8
 801cec8:	1d22      	adds	r2, r4, #4
 801ceca:	4641      	mov	r1, r8
 801cecc:	4658      	mov	r0, fp
 801cece:	f7ff fe63 	bl	801cb98 <_ZN8touchgfx11floorDivModEllRlS0_>
 801ced2:	f8c4 800c 	str.w	r8, [r4, #12]
 801ced6:	6962      	ldr	r2, [r4, #20]
 801ced8:	f8da 3004 	ldr.w	r3, [sl, #4]
 801cedc:	eddf 6a31 	vldr	s13, [pc, #196]	; 801cfa4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801cee0:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801cee4:	6822      	ldr	r2, [r4, #0]
 801cee6:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801ceea:	ee07 3a10 	vmov	s14, r3
 801ceee:	f857 3009 	ldr.w	r3, [r7, r9]
 801cef2:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801cef6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cefa:	ee07 3a90 	vmov	s15, r3
 801cefe:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801cf02:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cf06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cf0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cf0e:	edd3 6a00 	vldr	s13, [r3]
 801cf12:	eee6 6a07 	vfma.f32	s13, s12, s14
 801cf16:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801cf1a:	eee6 6a27 	vfma.f32	s13, s12, s15
 801cf1e:	edc4 6a07 	vstr	s13, [r4, #28]
 801cf22:	edd4 6a01 	vldr	s13, [r4, #4]
 801cf26:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801cf2a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801cf2e:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801cf32:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801cf36:	ed84 6a08 	vstr	s12, [r4, #32]
 801cf3a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801cf3c:	6262      	str	r2, [r4, #36]	; 0x24
 801cf3e:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801cf42:	ed93 6a03 	vldr	s12, [r3, #12]
 801cf46:	eea5 6a87 	vfma.f32	s12, s11, s14
 801cf4a:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801cf4e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801cf52:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801cf56:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801cf5a:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801cf5e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801cf62:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801cf66:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801cf68:	6322      	str	r2, [r4, #48]	; 0x30
 801cf6a:	ed93 6a06 	vldr	s12, [r3, #24]
 801cf6e:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801cf72:	eea5 6a87 	vfma.f32	s12, s11, s14
 801cf76:	eeb0 7a46 	vmov.f32	s14, s12
 801cf7a:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801cf7e:	eea6 7a27 	vfma.f32	s14, s12, s15
 801cf82:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801cf86:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801cf8a:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801cf8e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801cf92:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801cf96:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801cf98:	63e3      	str	r3, [r4, #60]	; 0x3c
 801cf9a:	4620      	mov	r0, r4
 801cf9c:	b003      	add	sp, #12
 801cf9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfa2:	bf00      	nop
 801cfa4:	3d800000 	.word	0x3d800000

0801cfa8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801cfa8:	4b01      	ldr	r3, [pc, #4]	; (801cfb0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801cfaa:	6018      	str	r0, [r3, #0]
 801cfac:	4770      	bx	lr
 801cfae:	bf00      	nop
 801cfb0:	2000b474 	.word	0x2000b474

0801cfb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801cfb4:	4b07      	ldr	r3, [pc, #28]	; (801cfd4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801cfb6:	881a      	ldrh	r2, [r3, #0]
 801cfb8:	4282      	cmp	r2, r0
 801cfba:	d809      	bhi.n	801cfd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801cfbc:	4b06      	ldr	r3, [pc, #24]	; (801cfd8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801cfbe:	881b      	ldrh	r3, [r3, #0]
 801cfc0:	4413      	add	r3, r2
 801cfc2:	4298      	cmp	r0, r3
 801cfc4:	da04      	bge.n	801cfd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801cfc6:	4b05      	ldr	r3, [pc, #20]	; (801cfdc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801cfc8:	681b      	ldr	r3, [r3, #0]
 801cfca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801cfce:	4770      	bx	lr
 801cfd0:	2000      	movs	r0, #0
 801cfd2:	4770      	bx	lr
 801cfd4:	2000b494 	.word	0x2000b494
 801cfd8:	2000b498 	.word	0x2000b498
 801cfdc:	2000b478 	.word	0x2000b478

0801cfe0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801cfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cfe4:	4d28      	ldr	r5, [pc, #160]	; (801d088 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801cfe6:	682b      	ldr	r3, [r5, #0]
 801cfe8:	2b00      	cmp	r3, #0
 801cfea:	d04a      	beq.n	801d082 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801cfec:	4a27      	ldr	r2, [pc, #156]	; (801d08c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801cfee:	4e28      	ldr	r6, [pc, #160]	; (801d090 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801cff0:	8810      	ldrh	r0, [r2, #0]
 801cff2:	f8b6 8000 	ldrh.w	r8, [r6]
 801cff6:	4c27      	ldr	r4, [pc, #156]	; (801d094 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801cff8:	4440      	add	r0, r8
 801cffa:	4f27      	ldr	r7, [pc, #156]	; (801d098 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801cffc:	1c41      	adds	r1, r0, #1
 801cffe:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801d002:	f021 0101 	bic.w	r1, r1, #1
 801d006:	eb03 020e 	add.w	r2, r3, lr
 801d00a:	0409      	lsls	r1, r1, #16
 801d00c:	6022      	str	r2, [r4, #0]
 801d00e:	0c09      	lsrs	r1, r1, #16
 801d010:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801d014:	eb0e 010c 	add.w	r1, lr, ip
 801d018:	185a      	adds	r2, r3, r1
 801d01a:	603a      	str	r2, [r7, #0]
 801d01c:	220e      	movs	r2, #14
 801d01e:	fb02 f208 	mul.w	r2, r2, r8
 801d022:	3203      	adds	r2, #3
 801d024:	f022 0203 	bic.w	r2, r2, #3
 801d028:	4411      	add	r1, r2
 801d02a:	440b      	add	r3, r1
 801d02c:	491b      	ldr	r1, [pc, #108]	; (801d09c <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801d02e:	600b      	str	r3, [r1, #0]
 801d030:	2300      	movs	r3, #0
 801d032:	491b      	ldr	r1, [pc, #108]	; (801d0a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801d034:	800b      	strh	r3, [r1, #0]
 801d036:	491b      	ldr	r1, [pc, #108]	; (801d0a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801d038:	6809      	ldr	r1, [r1, #0]
 801d03a:	eba1 010e 	sub.w	r1, r1, lr
 801d03e:	eba1 010c 	sub.w	r1, r1, ip
 801d042:	469c      	mov	ip, r3
 801d044:	1a8a      	subs	r2, r1, r2
 801d046:	4918      	ldr	r1, [pc, #96]	; (801d0a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801d048:	600a      	str	r2, [r1, #0]
 801d04a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d04e:	4a17      	ldr	r2, [pc, #92]	; (801d0ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801d050:	8013      	strh	r3, [r2, #0]
 801d052:	4283      	cmp	r3, r0
 801d054:	d10d      	bne.n	801d072 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801d056:	8835      	ldrh	r5, [r6, #0]
 801d058:	2300      	movs	r3, #0
 801d05a:	6838      	ldr	r0, [r7, #0]
 801d05c:	240e      	movs	r4, #14
 801d05e:	429d      	cmp	r5, r3
 801d060:	d90f      	bls.n	801d082 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801d062:	fb04 0203 	mla	r2, r4, r3, r0
 801d066:	3301      	adds	r3, #1
 801d068:	7b11      	ldrb	r1, [r2, #12]
 801d06a:	f36f 1145 	bfc	r1, #5, #1
 801d06e:	7311      	strb	r1, [r2, #12]
 801d070:	e7f5      	b.n	801d05e <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801d072:	682a      	ldr	r2, [r5, #0]
 801d074:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801d078:	6822      	ldr	r2, [r4, #0]
 801d07a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801d07e:	3301      	adds	r3, #1
 801d080:	e7e7      	b.n	801d052 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801d082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d086:	bf00      	nop
 801d088:	2000b478 	.word	0x2000b478
 801d08c:	2000b494 	.word	0x2000b494
 801d090:	2000b498 	.word	0x2000b498
 801d094:	2000b48c 	.word	0x2000b48c
 801d098:	2000b47c 	.word	0x2000b47c
 801d09c:	2000b484 	.word	0x2000b484
 801d0a0:	2000b496 	.word	0x2000b496
 801d0a4:	2000b480 	.word	0x2000b480
 801d0a8:	2000b490 	.word	0x2000b490
 801d0ac:	2000b488 	.word	0x2000b488

0801d0b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801d0b0:	4b10      	ldr	r3, [pc, #64]	; (801d0f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801d0b2:	b510      	push	{r4, lr}
 801d0b4:	681b      	ldr	r3, [r3, #0]
 801d0b6:	b9db      	cbnz	r3, 801d0f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801d0b8:	b1d1      	cbz	r1, 801d0f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801d0ba:	4b0f      	ldr	r3, [pc, #60]	; (801d0f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801d0bc:	240e      	movs	r4, #14
 801d0be:	801a      	strh	r2, [r3, #0]
 801d0c0:	b292      	uxth	r2, r2
 801d0c2:	4b0e      	ldr	r3, [pc, #56]	; (801d0fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801d0c4:	881b      	ldrh	r3, [r3, #0]
 801d0c6:	4413      	add	r3, r2
 801d0c8:	4362      	muls	r2, r4
 801d0ca:	2406      	movs	r4, #6
 801d0cc:	fb04 2203 	mla	r2, r4, r3, r2
 801d0d0:	428a      	cmp	r2, r1
 801d0d2:	d305      	bcc.n	801d0e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801d0d4:	4b0a      	ldr	r3, [pc, #40]	; (801d100 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801d0d6:	2137      	movs	r1, #55	; 0x37
 801d0d8:	4a0a      	ldr	r2, [pc, #40]	; (801d104 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801d0da:	480b      	ldr	r0, [pc, #44]	; (801d108 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801d0dc:	f009 feb6 	bl	8026e4c <__assert_func>
 801d0e0:	4b0a      	ldr	r3, [pc, #40]	; (801d10c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801d0e2:	6019      	str	r1, [r3, #0]
 801d0e4:	4b0a      	ldr	r3, [pc, #40]	; (801d110 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801d0e6:	6018      	str	r0, [r3, #0]
 801d0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d0ec:	f7ff bf78 	b.w	801cfe0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801d0f0:	bd10      	pop	{r4, pc}
 801d0f2:	bf00      	nop
 801d0f4:	2000b484 	.word	0x2000b484
 801d0f8:	2000b498 	.word	0x2000b498
 801d0fc:	2000b494 	.word	0x2000b494
 801d100:	0802bcc9 	.word	0x0802bcc9
 801d104:	0802bd22 	.word	0x0802bd22
 801d108:	0802bca4 	.word	0x0802bca4
 801d10c:	2000b480 	.word	0x2000b480
 801d110:	2000b478 	.word	0x2000b478

0801d114 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801d114:	b470      	push	{r4, r5, r6}
 801d116:	4c07      	ldr	r4, [pc, #28]	; (801d134 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801d118:	4605      	mov	r5, r0
 801d11a:	4610      	mov	r0, r2
 801d11c:	9a03      	ldr	r2, [sp, #12]
 801d11e:	6826      	ldr	r6, [r4, #0]
 801d120:	b936      	cbnz	r6, 801d130 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801d122:	6025      	str	r5, [r4, #0]
 801d124:	4c04      	ldr	r4, [pc, #16]	; (801d138 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801d126:	8021      	strh	r1, [r4, #0]
 801d128:	4619      	mov	r1, r3
 801d12a:	bc70      	pop	{r4, r5, r6}
 801d12c:	f7ff bfc0 	b.w	801d0b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801d130:	bc70      	pop	{r4, r5, r6}
 801d132:	4770      	bx	lr
 801d134:	2000b49c 	.word	0x2000b49c
 801d138:	2000b494 	.word	0x2000b494

0801d13c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801d13c:	b508      	push	{r3, lr}
 801d13e:	4b14      	ldr	r3, [pc, #80]	; (801d190 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801d140:	6819      	ldr	r1, [r3, #0]
 801d142:	b931      	cbnz	r1, 801d152 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801d144:	4b13      	ldr	r3, [pc, #76]	; (801d194 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801d146:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 801d14a:	4a13      	ldr	r2, [pc, #76]	; (801d198 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801d14c:	4813      	ldr	r0, [pc, #76]	; (801d19c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801d14e:	f009 fe7d 	bl	8026e4c <__assert_func>
 801d152:	4a13      	ldr	r2, [pc, #76]	; (801d1a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801d154:	8803      	ldrh	r3, [r0, #0]
 801d156:	8812      	ldrh	r2, [r2, #0]
 801d158:	4293      	cmp	r3, r2
 801d15a:	d204      	bcs.n	801d166 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801d15c:	2214      	movs	r2, #20
 801d15e:	fb02 1303 	mla	r3, r2, r3, r1
 801d162:	8918      	ldrh	r0, [r3, #8]
 801d164:	bd08      	pop	{r3, pc}
 801d166:	490f      	ldr	r1, [pc, #60]	; (801d1a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801d168:	8809      	ldrh	r1, [r1, #0]
 801d16a:	4411      	add	r1, r2
 801d16c:	428b      	cmp	r3, r1
 801d16e:	da06      	bge.n	801d17e <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801d170:	1a9b      	subs	r3, r3, r2
 801d172:	4a0d      	ldr	r2, [pc, #52]	; (801d1a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801d174:	210e      	movs	r1, #14
 801d176:	6812      	ldr	r2, [r2, #0]
 801d178:	fb01 2303 	mla	r3, r1, r3, r2
 801d17c:	e7f1      	b.n	801d162 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801d17e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d182:	4293      	cmp	r3, r2
 801d184:	bf0a      	itet	eq
 801d186:	4b09      	ldreq	r3, [pc, #36]	; (801d1ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801d188:	2000      	movne	r0, #0
 801d18a:	8818      	ldrheq	r0, [r3, #0]
 801d18c:	e7ea      	b.n	801d164 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801d18e:	bf00      	nop
 801d190:	2000b49c 	.word	0x2000b49c
 801d194:	0802b004 	.word	0x0802b004
 801d198:	0802bdcf 	.word	0x0802bdcf
 801d19c:	0802bca4 	.word	0x0802bca4
 801d1a0:	2000b494 	.word	0x2000b494
 801d1a4:	2000b498 	.word	0x2000b498
 801d1a8:	2000b47c 	.word	0x2000b47c
 801d1ac:	2000b3c8 	.word	0x2000b3c8

0801d1b0 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801d1b0:	b508      	push	{r3, lr}
 801d1b2:	4b14      	ldr	r3, [pc, #80]	; (801d204 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801d1b4:	6819      	ldr	r1, [r3, #0]
 801d1b6:	b931      	cbnz	r1, 801d1c6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801d1b8:	4b13      	ldr	r3, [pc, #76]	; (801d208 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801d1ba:	f44f 7143 	mov.w	r1, #780	; 0x30c
 801d1be:	4a13      	ldr	r2, [pc, #76]	; (801d20c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801d1c0:	4813      	ldr	r0, [pc, #76]	; (801d210 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801d1c2:	f009 fe43 	bl	8026e4c <__assert_func>
 801d1c6:	4a13      	ldr	r2, [pc, #76]	; (801d214 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801d1c8:	8803      	ldrh	r3, [r0, #0]
 801d1ca:	8812      	ldrh	r2, [r2, #0]
 801d1cc:	4293      	cmp	r3, r2
 801d1ce:	d204      	bcs.n	801d1da <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801d1d0:	2214      	movs	r2, #20
 801d1d2:	fb02 1303 	mla	r3, r2, r3, r1
 801d1d6:	8958      	ldrh	r0, [r3, #10]
 801d1d8:	bd08      	pop	{r3, pc}
 801d1da:	490f      	ldr	r1, [pc, #60]	; (801d218 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801d1dc:	8809      	ldrh	r1, [r1, #0]
 801d1de:	4411      	add	r1, r2
 801d1e0:	428b      	cmp	r3, r1
 801d1e2:	da06      	bge.n	801d1f2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801d1e4:	1a9b      	subs	r3, r3, r2
 801d1e6:	4a0d      	ldr	r2, [pc, #52]	; (801d21c <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801d1e8:	210e      	movs	r1, #14
 801d1ea:	6812      	ldr	r2, [r2, #0]
 801d1ec:	fb01 2303 	mla	r3, r1, r3, r2
 801d1f0:	e7f1      	b.n	801d1d6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801d1f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d1f6:	4293      	cmp	r3, r2
 801d1f8:	bf0a      	itet	eq
 801d1fa:	4b09      	ldreq	r3, [pc, #36]	; (801d220 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801d1fc:	2000      	movne	r0, #0
 801d1fe:	8818      	ldrheq	r0, [r3, #0]
 801d200:	e7ea      	b.n	801d1d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801d202:	bf00      	nop
 801d204:	2000b49c 	.word	0x2000b49c
 801d208:	0802b004 	.word	0x0802b004
 801d20c:	0802bdfb 	.word	0x0802bdfb
 801d210:	0802bca4 	.word	0x0802bca4
 801d214:	2000b494 	.word	0x2000b494
 801d218:	2000b498 	.word	0x2000b498
 801d21c:	2000b47c 	.word	0x2000b47c
 801d220:	2000b3ca 	.word	0x2000b3ca

0801d224 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801d224:	4b23      	ldr	r3, [pc, #140]	; (801d2b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801d226:	b510      	push	{r4, lr}
 801d228:	681c      	ldr	r4, [r3, #0]
 801d22a:	b934      	cbnz	r4, 801d23a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801d22c:	4b22      	ldr	r3, [pc, #136]	; (801d2b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801d22e:	f44f 7148 	mov.w	r1, #800	; 0x320
 801d232:	4a22      	ldr	r2, [pc, #136]	; (801d2bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801d234:	4822      	ldr	r0, [pc, #136]	; (801d2c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801d236:	f009 fe09 	bl	8026e4c <__assert_func>
 801d23a:	4a22      	ldr	r2, [pc, #136]	; (801d2c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801d23c:	880b      	ldrh	r3, [r1, #0]
 801d23e:	8812      	ldrh	r2, [r2, #0]
 801d240:	4293      	cmp	r3, r2
 801d242:	d211      	bcs.n	801d268 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801d244:	2214      	movs	r2, #20
 801d246:	fb02 4303 	mla	r3, r2, r3, r4
 801d24a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801d24e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801d252:	8a1a      	ldrh	r2, [r3, #16]
 801d254:	8a5b      	ldrh	r3, [r3, #18]
 801d256:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d25a:	8004      	strh	r4, [r0, #0]
 801d25c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d260:	8041      	strh	r1, [r0, #2]
 801d262:	8082      	strh	r2, [r0, #4]
 801d264:	80c3      	strh	r3, [r0, #6]
 801d266:	e00e      	b.n	801d286 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801d268:	4917      	ldr	r1, [pc, #92]	; (801d2c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801d26a:	8809      	ldrh	r1, [r1, #0]
 801d26c:	4411      	add	r1, r2
 801d26e:	428b      	cmp	r3, r1
 801d270:	da0a      	bge.n	801d288 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801d272:	1a9b      	subs	r3, r3, r2
 801d274:	4a15      	ldr	r2, [pc, #84]	; (801d2cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801d276:	210e      	movs	r1, #14
 801d278:	6812      	ldr	r2, [r2, #0]
 801d27a:	fb01 2303 	mla	r3, r1, r3, r2
 801d27e:	681a      	ldr	r2, [r3, #0]
 801d280:	6002      	str	r2, [r0, #0]
 801d282:	685a      	ldr	r2, [r3, #4]
 801d284:	6042      	str	r2, [r0, #4]
 801d286:	bd10      	pop	{r4, pc}
 801d288:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d28c:	4293      	cmp	r3, r2
 801d28e:	d10b      	bne.n	801d2a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801d290:	4b0f      	ldr	r3, [pc, #60]	; (801d2d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801d292:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d296:	4b0f      	ldr	r3, [pc, #60]	; (801d2d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801d298:	8081      	strh	r1, [r0, #4]
 801d29a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d29e:	2300      	movs	r3, #0
 801d2a0:	80c2      	strh	r2, [r0, #6]
 801d2a2:	8003      	strh	r3, [r0, #0]
 801d2a4:	8043      	strh	r3, [r0, #2]
 801d2a6:	e7ee      	b.n	801d286 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801d2a8:	2300      	movs	r3, #0
 801d2aa:	8003      	strh	r3, [r0, #0]
 801d2ac:	8043      	strh	r3, [r0, #2]
 801d2ae:	8083      	strh	r3, [r0, #4]
 801d2b0:	e7d8      	b.n	801d264 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801d2b2:	bf00      	nop
 801d2b4:	2000b49c 	.word	0x2000b49c
 801d2b8:	0802b004 	.word	0x0802b004
 801d2bc:	0802bd68 	.word	0x0802bd68
 801d2c0:	0802bca4 	.word	0x0802bca4
 801d2c4:	2000b494 	.word	0x2000b494
 801d2c8:	2000b498 	.word	0x2000b498
 801d2cc:	2000b47c 	.word	0x2000b47c
 801d2d0:	2000b3c8 	.word	0x2000b3c8
 801d2d4:	2000b3ca 	.word	0x2000b3ca

0801d2d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801d2d8:	4b18      	ldr	r3, [pc, #96]	; (801d33c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	b34b      	cbz	r3, 801d332 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801d2de:	4a18      	ldr	r2, [pc, #96]	; (801d340 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801d2e0:	8800      	ldrh	r0, [r0, #0]
 801d2e2:	8812      	ldrh	r2, [r2, #0]
 801d2e4:	4290      	cmp	r0, r2
 801d2e6:	d211      	bcs.n	801d30c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801d2e8:	2214      	movs	r2, #20
 801d2ea:	fb02 3300 	mla	r3, r2, r0, r3
 801d2ee:	8a1a      	ldrh	r2, [r3, #16]
 801d2f0:	8919      	ldrh	r1, [r3, #8]
 801d2f2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d2f6:	428a      	cmp	r2, r1
 801d2f8:	db1d      	blt.n	801d336 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801d2fa:	8a58      	ldrh	r0, [r3, #18]
 801d2fc:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801d300:	895b      	ldrh	r3, [r3, #10]
 801d302:	4298      	cmp	r0, r3
 801d304:	bfac      	ite	ge
 801d306:	2000      	movge	r0, #0
 801d308:	2001      	movlt	r0, #1
 801d30a:	4770      	bx	lr
 801d30c:	4b0d      	ldr	r3, [pc, #52]	; (801d344 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801d30e:	881b      	ldrh	r3, [r3, #0]
 801d310:	4413      	add	r3, r2
 801d312:	4298      	cmp	r0, r3
 801d314:	da0d      	bge.n	801d332 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801d316:	4b0c      	ldr	r3, [pc, #48]	; (801d348 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801d318:	1a80      	subs	r0, r0, r2
 801d31a:	220e      	movs	r2, #14
 801d31c:	681b      	ldr	r3, [r3, #0]
 801d31e:	fb02 3300 	mla	r3, r2, r0, r3
 801d322:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801d326:	891a      	ldrh	r2, [r3, #8]
 801d328:	4291      	cmp	r1, r2
 801d32a:	db04      	blt.n	801d336 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801d32c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801d330:	e7e6      	b.n	801d300 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801d332:	2000      	movs	r0, #0
 801d334:	4770      	bx	lr
 801d336:	2001      	movs	r0, #1
 801d338:	4770      	bx	lr
 801d33a:	bf00      	nop
 801d33c:	2000b49c 	.word	0x2000b49c
 801d340:	2000b494 	.word	0x2000b494
 801d344:	2000b498 	.word	0x2000b498
 801d348:	2000b47c 	.word	0x2000b47c

0801d34c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801d34c:	b508      	push	{r3, lr}
 801d34e:	4b12      	ldr	r3, [pc, #72]	; (801d398 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801d350:	6819      	ldr	r1, [r3, #0]
 801d352:	b931      	cbnz	r1, 801d362 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801d354:	4b11      	ldr	r3, [pc, #68]	; (801d39c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d356:	f44f 7151 	mov.w	r1, #836	; 0x344
 801d35a:	4a11      	ldr	r2, [pc, #68]	; (801d3a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801d35c:	4811      	ldr	r0, [pc, #68]	; (801d3a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801d35e:	f009 fd75 	bl	8026e4c <__assert_func>
 801d362:	8803      	ldrh	r3, [r0, #0]
 801d364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d368:	4293      	cmp	r3, r2
 801d36a:	d012      	beq.n	801d392 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801d36c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d370:	4293      	cmp	r3, r2
 801d372:	d103      	bne.n	801d37c <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801d374:	4b0c      	ldr	r3, [pc, #48]	; (801d3a8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801d376:	681b      	ldr	r3, [r3, #0]
 801d378:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801d37a:	bd08      	pop	{r3, pc}
 801d37c:	4a0b      	ldr	r2, [pc, #44]	; (801d3ac <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801d37e:	6812      	ldr	r2, [r2, #0]
 801d380:	b11a      	cbz	r2, 801d38a <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801d382:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d386:	2800      	cmp	r0, #0
 801d388:	d1f7      	bne.n	801d37a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801d38a:	2214      	movs	r2, #20
 801d38c:	4353      	muls	r3, r2
 801d38e:	58c8      	ldr	r0, [r1, r3]
 801d390:	e7f3      	b.n	801d37a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801d392:	2000      	movs	r0, #0
 801d394:	e7f1      	b.n	801d37a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801d396:	bf00      	nop
 801d398:	2000b49c 	.word	0x2000b49c
 801d39c:	0802b004 	.word	0x0802b004
 801d3a0:	0802bd9e 	.word	0x0802bd9e
 801d3a4:	0802bca4 	.word	0x0802bca4
 801d3a8:	2000b3d4 	.word	0x2000b3d4
 801d3ac:	2000b478 	.word	0x2000b478

0801d3b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801d3b0:	8802      	ldrh	r2, [r0, #0]
 801d3b2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801d3b6:	429a      	cmp	r2, r3
 801d3b8:	d840      	bhi.n	801d43c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801d3ba:	4b21      	ldr	r3, [pc, #132]	; (801d440 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801d3bc:	881b      	ldrh	r3, [r3, #0]
 801d3be:	429a      	cmp	r2, r3
 801d3c0:	d220      	bcs.n	801d404 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801d3c2:	4b20      	ldr	r3, [pc, #128]	; (801d444 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801d3c4:	6819      	ldr	r1, [r3, #0]
 801d3c6:	2314      	movs	r3, #20
 801d3c8:	fb03 1302 	mla	r3, r3, r2, r1
 801d3cc:	6858      	ldr	r0, [r3, #4]
 801d3ce:	2800      	cmp	r0, #0
 801d3d0:	d035      	beq.n	801d43e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d3d2:	491d      	ldr	r1, [pc, #116]	; (801d448 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801d3d4:	6809      	ldr	r1, [r1, #0]
 801d3d6:	2900      	cmp	r1, #0
 801d3d8:	d031      	beq.n	801d43e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d3da:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d3de:	b371      	cbz	r1, 801d43e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d3e0:	895a      	ldrh	r2, [r3, #10]
 801d3e2:	8918      	ldrh	r0, [r3, #8]
 801d3e4:	4350      	muls	r0, r2
 801d3e6:	7c5a      	ldrb	r2, [r3, #17]
 801d3e8:	7cdb      	ldrb	r3, [r3, #19]
 801d3ea:	0952      	lsrs	r2, r2, #5
 801d3ec:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801d3f0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801d3f4:	2b0b      	cmp	r3, #11
 801d3f6:	bf18      	it	ne
 801d3f8:	0040      	lslne	r0, r0, #1
 801d3fa:	3003      	adds	r0, #3
 801d3fc:	f020 0003 	bic.w	r0, r0, #3
 801d400:	4408      	add	r0, r1
 801d402:	4770      	bx	lr
 801d404:	4911      	ldr	r1, [pc, #68]	; (801d44c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d406:	8809      	ldrh	r1, [r1, #0]
 801d408:	4419      	add	r1, r3
 801d40a:	428a      	cmp	r2, r1
 801d40c:	da16      	bge.n	801d43c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801d40e:	4910      	ldr	r1, [pc, #64]	; (801d450 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801d410:	1ad3      	subs	r3, r2, r3
 801d412:	200e      	movs	r0, #14
 801d414:	6809      	ldr	r1, [r1, #0]
 801d416:	fb00 1303 	mla	r3, r0, r3, r1
 801d41a:	7b19      	ldrb	r1, [r3, #12]
 801d41c:	f001 011f 	and.w	r1, r1, #31
 801d420:	290b      	cmp	r1, #11
 801d422:	d10b      	bne.n	801d43c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801d424:	8919      	ldrh	r1, [r3, #8]
 801d426:	8958      	ldrh	r0, [r3, #10]
 801d428:	4b07      	ldr	r3, [pc, #28]	; (801d448 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801d42a:	4348      	muls	r0, r1
 801d42c:	6819      	ldr	r1, [r3, #0]
 801d42e:	3003      	adds	r0, #3
 801d430:	f020 0303 	bic.w	r3, r0, #3
 801d434:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801d438:	4418      	add	r0, r3
 801d43a:	4770      	bx	lr
 801d43c:	2000      	movs	r0, #0
 801d43e:	4770      	bx	lr
 801d440:	2000b494 	.word	0x2000b494
 801d444:	2000b49c 	.word	0x2000b49c
 801d448:	2000b478 	.word	0x2000b478
 801d44c:	2000b498 	.word	0x2000b498
 801d450:	2000b47c 	.word	0x2000b47c

0801d454 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801d454:	4b19      	ldr	r3, [pc, #100]	; (801d4bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801d456:	6819      	ldr	r1, [r3, #0]
 801d458:	8803      	ldrh	r3, [r0, #0]
 801d45a:	b1e9      	cbz	r1, 801d498 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801d45c:	4a18      	ldr	r2, [pc, #96]	; (801d4c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801d45e:	8812      	ldrh	r2, [r2, #0]
 801d460:	429a      	cmp	r2, r3
 801d462:	d90a      	bls.n	801d47a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801d464:	2214      	movs	r2, #20
 801d466:	fb02 1303 	mla	r3, r2, r3, r1
 801d46a:	7c58      	ldrb	r0, [r3, #17]
 801d46c:	0942      	lsrs	r2, r0, #5
 801d46e:	7cd8      	ldrb	r0, [r3, #19]
 801d470:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801d474:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801d478:	4770      	bx	lr
 801d47a:	4912      	ldr	r1, [pc, #72]	; (801d4c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801d47c:	8809      	ldrh	r1, [r1, #0]
 801d47e:	4411      	add	r1, r2
 801d480:	428b      	cmp	r3, r1
 801d482:	da09      	bge.n	801d498 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801d484:	1a9b      	subs	r3, r3, r2
 801d486:	4a10      	ldr	r2, [pc, #64]	; (801d4c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801d488:	210e      	movs	r1, #14
 801d48a:	6812      	ldr	r2, [r2, #0]
 801d48c:	fb01 2303 	mla	r3, r1, r3, r2
 801d490:	7b18      	ldrb	r0, [r3, #12]
 801d492:	f000 001f 	and.w	r0, r0, #31
 801d496:	4770      	bx	lr
 801d498:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d49c:	4293      	cmp	r3, r2
 801d49e:	d10a      	bne.n	801d4b6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801d4a0:	4b0a      	ldr	r3, [pc, #40]	; (801d4cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801d4a2:	681b      	ldr	r3, [r3, #0]
 801d4a4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801d4a8:	b10a      	cbz	r2, 801d4ae <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801d4aa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801d4ac:	b900      	cbnz	r0, 801d4b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801d4ae:	6898      	ldr	r0, [r3, #8]
 801d4b0:	6803      	ldr	r3, [r0, #0]
 801d4b2:	6a1b      	ldr	r3, [r3, #32]
 801d4b4:	4718      	bx	r3
 801d4b6:	2000      	movs	r0, #0
 801d4b8:	4770      	bx	lr
 801d4ba:	bf00      	nop
 801d4bc:	2000b49c 	.word	0x2000b49c
 801d4c0:	2000b494 	.word	0x2000b494
 801d4c4:	2000b498 	.word	0x2000b498
 801d4c8:	2000b47c 	.word	0x2000b47c
 801d4cc:	2000b3d4 	.word	0x2000b3d4

0801d4d0 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801d4d0:	2018      	movs	r0, #24
 801d4d2:	4770      	bx	lr

0801d4d4 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801d4d4:	2001      	movs	r0, #1
 801d4d6:	4770      	bx	lr

0801d4d8 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801d4d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801d4dc:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801d4e0:	4770      	bx	lr

0801d4e2 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801d4e2:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801d4e6:	4770      	bx	lr

0801d4e8 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801d4e8:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801d4ec:	4770      	bx	lr

0801d4ee <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801d4ee:	b2c8      	uxtb	r0, r1
 801d4f0:	4770      	bx	lr

0801d4f2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d4f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4f6:	b085      	sub	sp, #20
 801d4f8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801d4fa:	9203      	str	r2, [sp, #12]
 801d4fc:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d500:	6878      	ldr	r0, [r7, #4]
 801d502:	9201      	str	r2, [sp, #4]
 801d504:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801d506:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801d50a:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801d50e:	fa1f fc84 	uxth.w	ip, r4
 801d512:	43e4      	mvns	r4, r4
 801d514:	9100      	str	r1, [sp, #0]
 801d516:	b2e4      	uxtb	r4, r4
 801d518:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801d51c:	fb00 2505 	mla	r5, r0, r5, r2
 801d520:	683a      	ldr	r2, [r7, #0]
 801d522:	6877      	ldr	r7, [r6, #4]
 801d524:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d528:	3704      	adds	r7, #4
 801d52a:	4415      	add	r5, r2
 801d52c:	6832      	ldr	r2, [r6, #0]
 801d52e:	9202      	str	r2, [sp, #8]
 801d530:	9a00      	ldr	r2, [sp, #0]
 801d532:	2a00      	cmp	r2, #0
 801d534:	dc03      	bgt.n	801d53e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801d536:	9a03      	ldr	r2, [sp, #12]
 801d538:	2a00      	cmp	r2, #0
 801d53a:	f340 8116 	ble.w	801d76a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801d53e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d540:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d544:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d546:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d54a:	2b00      	cmp	r3, #0
 801d54c:	dd0f      	ble.n	801d56e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d54e:	1406      	asrs	r6, r0, #16
 801d550:	d406      	bmi.n	801d560 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d552:	4546      	cmp	r6, r8
 801d554:	da04      	bge.n	801d560 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d556:	1416      	asrs	r6, r2, #16
 801d558:	d402      	bmi.n	801d560 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d55a:	9901      	ldr	r1, [sp, #4]
 801d55c:	428e      	cmp	r6, r1
 801d55e:	db07      	blt.n	801d570 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801d560:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d562:	3b01      	subs	r3, #1
 801d564:	3503      	adds	r5, #3
 801d566:	4408      	add	r0, r1
 801d568:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d56a:	440a      	add	r2, r1
 801d56c:	e7ed      	b.n	801d54a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801d56e:	d011      	beq.n	801d594 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801d570:	1e5e      	subs	r6, r3, #1
 801d572:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d574:	fb01 0e06 	mla	lr, r1, r6, r0
 801d578:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801d57c:	d548      	bpl.n	801d610 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801d57e:	4699      	mov	r9, r3
 801d580:	462e      	mov	r6, r5
 801d582:	f1b9 0f00 	cmp.w	r9, #0
 801d586:	f300 809e 	bgt.w	801d6c6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801d58a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d58e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d592:	441d      	add	r5, r3
 801d594:	9b00      	ldr	r3, [sp, #0]
 801d596:	2b00      	cmp	r3, #0
 801d598:	f340 80e7 	ble.w	801d76a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801d59c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d5a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d5a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d5a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d5aa:	eef0 6a62 	vmov.f32	s13, s5
 801d5ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d5b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d5b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d5ba:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801d5be:	eef0 6a43 	vmov.f32	s13, s6
 801d5c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d5c6:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801d5ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d5ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d5d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d5d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d5da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d5de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d5e2:	ee12 2a90 	vmov	r2, s5
 801d5e6:	eef0 2a47 	vmov.f32	s5, s14
 801d5ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5ee:	ee13 2a10 	vmov	r2, s6
 801d5f2:	9311      	str	r3, [sp, #68]	; 0x44
 801d5f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d5f6:	eeb0 3a67 	vmov.f32	s6, s15
 801d5fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5fe:	9312      	str	r3, [sp, #72]	; 0x48
 801d600:	9b00      	ldr	r3, [sp, #0]
 801d602:	9a03      	ldr	r2, [sp, #12]
 801d604:	3b01      	subs	r3, #1
 801d606:	9300      	str	r3, [sp, #0]
 801d608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d60a:	bf08      	it	eq
 801d60c:	4613      	moveq	r3, r2
 801d60e:	e78f      	b.n	801d530 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801d610:	45c6      	cmp	lr, r8
 801d612:	dab4      	bge.n	801d57e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801d614:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d616:	fb01 2606 	mla	r6, r1, r6, r2
 801d61a:	1436      	asrs	r6, r6, #16
 801d61c:	d4af      	bmi.n	801d57e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801d61e:	9901      	ldr	r1, [sp, #4]
 801d620:	428e      	cmp	r6, r1
 801d622:	daac      	bge.n	801d57e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801d624:	1cee      	adds	r6, r5, #3
 801d626:	4699      	mov	r9, r3
 801d628:	f1b9 0f00 	cmp.w	r9, #0
 801d62c:	f106 0603 	add.w	r6, r6, #3
 801d630:	ddab      	ble.n	801d58a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801d632:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801d636:	9902      	ldr	r1, [sp, #8]
 801d638:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801d63c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801d640:	fb08 1e0e 	mla	lr, r8, lr, r1
 801d644:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d646:	fb1b fb04 	smulbb	fp, fp, r4
 801d64a:	f109 39ff 	add.w	r9, r9, #4294967295
 801d64e:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801d652:	4408      	add	r0, r1
 801d654:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d656:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d65a:	440a      	add	r2, r1
 801d65c:	eb07 0a0e 	add.w	sl, r7, lr
 801d660:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d664:	fb0e be0c 	mla	lr, lr, ip, fp
 801d668:	fa1f fe8e 	uxth.w	lr, lr
 801d66c:	f10e 0b01 	add.w	fp, lr, #1
 801d670:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d674:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801d678:	fb1b fb04 	smulbb	fp, fp, r4
 801d67c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d680:	f806 ec06 	strb.w	lr, [r6, #-6]
 801d684:	f89a e001 	ldrb.w	lr, [sl, #1]
 801d688:	fb0e be0c 	mla	lr, lr, ip, fp
 801d68c:	fa1f fe8e 	uxth.w	lr, lr
 801d690:	f10e 0b01 	add.w	fp, lr, #1
 801d694:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d698:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d69c:	f806 ec05 	strb.w	lr, [r6, #-5]
 801d6a0:	f89a e002 	ldrb.w	lr, [sl, #2]
 801d6a4:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801d6a8:	fb1a fa04 	smulbb	sl, sl, r4
 801d6ac:	fb0e ae0c 	mla	lr, lr, ip, sl
 801d6b0:	fa1f fe8e 	uxth.w	lr, lr
 801d6b4:	f10e 0a01 	add.w	sl, lr, #1
 801d6b8:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801d6bc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d6c0:	f806 ec04 	strb.w	lr, [r6, #-4]
 801d6c4:	e7b0      	b.n	801d628 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801d6c6:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801d6ca:	d446      	bmi.n	801d75a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801d6cc:	45c2      	cmp	sl, r8
 801d6ce:	da44      	bge.n	801d75a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801d6d0:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801d6d4:	d441      	bmi.n	801d75a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801d6d6:	9901      	ldr	r1, [sp, #4]
 801d6d8:	458e      	cmp	lr, r1
 801d6da:	da3e      	bge.n	801d75a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801d6dc:	9902      	ldr	r1, [sp, #8]
 801d6de:	f896 b000 	ldrb.w	fp, [r6]
 801d6e2:	fb08 1e0e 	mla	lr, r8, lr, r1
 801d6e6:	fb1b fb04 	smulbb	fp, fp, r4
 801d6ea:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801d6ee:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d6f2:	eb07 0a0e 	add.w	sl, r7, lr
 801d6f6:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d6fa:	fb0e be0c 	mla	lr, lr, ip, fp
 801d6fe:	fa1f fe8e 	uxth.w	lr, lr
 801d702:	f10e 0b01 	add.w	fp, lr, #1
 801d706:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d70a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801d70e:	fb1b fb04 	smulbb	fp, fp, r4
 801d712:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d716:	f886 e000 	strb.w	lr, [r6]
 801d71a:	f89a e001 	ldrb.w	lr, [sl, #1]
 801d71e:	fb0e be0c 	mla	lr, lr, ip, fp
 801d722:	fa1f fe8e 	uxth.w	lr, lr
 801d726:	f10e 0b01 	add.w	fp, lr, #1
 801d72a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d72e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d732:	f886 e001 	strb.w	lr, [r6, #1]
 801d736:	f89a e002 	ldrb.w	lr, [sl, #2]
 801d73a:	f896 a002 	ldrb.w	sl, [r6, #2]
 801d73e:	fb1a fa04 	smulbb	sl, sl, r4
 801d742:	fb0e ae0c 	mla	lr, lr, ip, sl
 801d746:	fa1f fe8e 	uxth.w	lr, lr
 801d74a:	f10e 0a01 	add.w	sl, lr, #1
 801d74e:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801d752:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d756:	f886 e002 	strb.w	lr, [r6, #2]
 801d75a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d75c:	3603      	adds	r6, #3
 801d75e:	f109 39ff 	add.w	r9, r9, #4294967295
 801d762:	4408      	add	r0, r1
 801d764:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d766:	440a      	add	r2, r1
 801d768:	e70b      	b.n	801d582 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801d76a:	b005      	add	sp, #20
 801d76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d770 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d774:	b085      	sub	sp, #20
 801d776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d77a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d77c:	9203      	str	r2, [sp, #12]
 801d77e:	6870      	ldr	r0, [r6, #4]
 801d780:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801d782:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801d786:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801d78a:	9101      	str	r1, [sp, #4]
 801d78c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d790:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801d794:	fb00 2404 	mla	r4, r0, r4, r2
 801d798:	6832      	ldr	r2, [r6, #0]
 801d79a:	686e      	ldr	r6, [r5, #4]
 801d79c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d7a0:	3604      	adds	r6, #4
 801d7a2:	4414      	add	r4, r2
 801d7a4:	682a      	ldr	r2, [r5, #0]
 801d7a6:	9202      	str	r2, [sp, #8]
 801d7a8:	9a01      	ldr	r2, [sp, #4]
 801d7aa:	2a00      	cmp	r2, #0
 801d7ac:	dc03      	bgt.n	801d7b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801d7ae:	9a03      	ldr	r2, [sp, #12]
 801d7b0:	2a00      	cmp	r2, #0
 801d7b2:	f340 80b2 	ble.w	801d91a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801d7b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d7b8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d7bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d7be:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d7c2:	2b00      	cmp	r3, #0
 801d7c4:	dd0c      	ble.n	801d7e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801d7c6:	1405      	asrs	r5, r0, #16
 801d7c8:	d405      	bmi.n	801d7d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801d7ca:	4575      	cmp	r5, lr
 801d7cc:	da03      	bge.n	801d7d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801d7ce:	1415      	asrs	r5, r2, #16
 801d7d0:	d401      	bmi.n	801d7d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801d7d2:	4545      	cmp	r5, r8
 801d7d4:	db05      	blt.n	801d7e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801d7d6:	4460      	add	r0, ip
 801d7d8:	443a      	add	r2, r7
 801d7da:	3b01      	subs	r3, #1
 801d7dc:	3403      	adds	r4, #3
 801d7de:	e7f0      	b.n	801d7c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801d7e0:	d03d      	beq.n	801d85e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801d7e2:	1e5d      	subs	r5, r3, #1
 801d7e4:	fb0c 0905 	mla	r9, ip, r5, r0
 801d7e8:	ea5f 4929 	movs.w	r9, r9, asr #16
 801d7ec:	d42c      	bmi.n	801d848 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d7ee:	45f1      	cmp	r9, lr
 801d7f0:	da2a      	bge.n	801d848 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d7f2:	fb07 2505 	mla	r5, r7, r5, r2
 801d7f6:	142d      	asrs	r5, r5, #16
 801d7f8:	d426      	bmi.n	801d848 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d7fa:	4545      	cmp	r5, r8
 801d7fc:	da24      	bge.n	801d848 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d7fe:	1ce5      	adds	r5, r4, #3
 801d800:	469a      	mov	sl, r3
 801d802:	f1ba 0f00 	cmp.w	sl, #0
 801d806:	f105 0503 	add.w	r5, r5, #3
 801d80a:	dd23      	ble.n	801d854 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801d80c:	ea4f 4922 	mov.w	r9, r2, asr #16
 801d810:	9902      	ldr	r1, [sp, #8]
 801d812:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801d816:	443a      	add	r2, r7
 801d818:	fb0e 1909 	mla	r9, lr, r9, r1
 801d81c:	4460      	add	r0, ip
 801d81e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d822:	f819 900b 	ldrb.w	r9, [r9, fp]
 801d826:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d82a:	eb06 0b09 	add.w	fp, r6, r9
 801d82e:	f816 9009 	ldrb.w	r9, [r6, r9]
 801d832:	f805 9c06 	strb.w	r9, [r5, #-6]
 801d836:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801d83a:	f805 9c05 	strb.w	r9, [r5, #-5]
 801d83e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801d842:	f805 9c04 	strb.w	r9, [r5, #-4]
 801d846:	e7dc      	b.n	801d802 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801d848:	2500      	movs	r5, #0
 801d84a:	eba3 0905 	sub.w	r9, r3, r5
 801d84e:	f1b9 0f00 	cmp.w	r9, #0
 801d852:	dc3c      	bgt.n	801d8ce <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801d854:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d858:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d85c:	441c      	add	r4, r3
 801d85e:	9b01      	ldr	r3, [sp, #4]
 801d860:	2b00      	cmp	r3, #0
 801d862:	dd5a      	ble.n	801d91a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801d864:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d86a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d86e:	eeb0 6a62 	vmov.f32	s12, s5
 801d872:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d876:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d87a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d87e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d882:	eeb0 6a43 	vmov.f32	s12, s6
 801d886:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d88a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d88e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d892:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d896:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d89a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d89e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d8a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d8a6:	ee12 2a90 	vmov	r2, s5
 801d8aa:	eef0 2a47 	vmov.f32	s5, s14
 801d8ae:	fb92 fcf3 	sdiv	ip, r2, r3
 801d8b2:	ee13 2a10 	vmov	r2, s6
 801d8b6:	eeb0 3a67 	vmov.f32	s6, s15
 801d8ba:	fb92 f7f3 	sdiv	r7, r2, r3
 801d8be:	9b01      	ldr	r3, [sp, #4]
 801d8c0:	9a03      	ldr	r2, [sp, #12]
 801d8c2:	3b01      	subs	r3, #1
 801d8c4:	9301      	str	r3, [sp, #4]
 801d8c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d8c8:	bf08      	it	eq
 801d8ca:	4613      	moveq	r3, r2
 801d8cc:	e76c      	b.n	801d7a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801d8ce:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801d8d2:	d41e      	bmi.n	801d912 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801d8d4:	45f2      	cmp	sl, lr
 801d8d6:	da1c      	bge.n	801d912 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801d8d8:	ea5f 4922 	movs.w	r9, r2, asr #16
 801d8dc:	d419      	bmi.n	801d912 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801d8de:	45c1      	cmp	r9, r8
 801d8e0:	da17      	bge.n	801d912 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801d8e2:	9902      	ldr	r1, [sp, #8]
 801d8e4:	fb0e 1909 	mla	r9, lr, r9, r1
 801d8e8:	f819 900a 	ldrb.w	r9, [r9, sl]
 801d8ec:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d8f0:	f816 b009 	ldrb.w	fp, [r6, r9]
 801d8f4:	eb06 0a09 	add.w	sl, r6, r9
 801d8f8:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801d8fc:	f804 b009 	strb.w	fp, [r4, r9]
 801d900:	44a1      	add	r9, r4
 801d902:	f89a b001 	ldrb.w	fp, [sl, #1]
 801d906:	f889 b001 	strb.w	fp, [r9, #1]
 801d90a:	f89a a002 	ldrb.w	sl, [sl, #2]
 801d90e:	f889 a002 	strb.w	sl, [r9, #2]
 801d912:	4460      	add	r0, ip
 801d914:	443a      	add	r2, r7
 801d916:	3501      	adds	r5, #1
 801d918:	e797      	b.n	801d84a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801d91a:	b005      	add	sp, #20
 801d91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d920 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d924:	b087      	sub	sp, #28
 801d926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d92a:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801d92c:	9204      	str	r2, [sp, #16]
 801d92e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801d932:	6870      	ldr	r0, [r6, #4]
 801d934:	9205      	str	r2, [sp, #20]
 801d936:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801d938:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801d93c:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801d940:	9101      	str	r1, [sp, #4]
 801d942:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d946:	fb00 2505 	mla	r5, r0, r5, r2
 801d94a:	6832      	ldr	r2, [r6, #0]
 801d94c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d950:	4415      	add	r5, r2
 801d952:	6822      	ldr	r2, [r4, #0]
 801d954:	9202      	str	r2, [sp, #8]
 801d956:	6862      	ldr	r2, [r4, #4]
 801d958:	3204      	adds	r2, #4
 801d95a:	9203      	str	r2, [sp, #12]
 801d95c:	9a01      	ldr	r2, [sp, #4]
 801d95e:	2a00      	cmp	r2, #0
 801d960:	dc03      	bgt.n	801d96a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801d962:	9a04      	ldr	r2, [sp, #16]
 801d964:	2a00      	cmp	r2, #0
 801d966:	f340 8124 	ble.w	801dbb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d96a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d96c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d970:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d972:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d976:	2b00      	cmp	r3, #0
 801d978:	dd0e      	ble.n	801d998 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801d97a:	1422      	asrs	r2, r4, #16
 801d97c:	d405      	bmi.n	801d98a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801d97e:	4572      	cmp	r2, lr
 801d980:	da03      	bge.n	801d98a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801d982:	1402      	asrs	r2, r0, #16
 801d984:	d401      	bmi.n	801d98a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801d986:	4542      	cmp	r2, r8
 801d988:	db07      	blt.n	801d99a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801d98a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d98c:	3b01      	subs	r3, #1
 801d98e:	3503      	adds	r5, #3
 801d990:	4414      	add	r4, r2
 801d992:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d994:	4410      	add	r0, r2
 801d996:	e7ee      	b.n	801d976 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801d998:	d010      	beq.n	801d9bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801d99a:	1e5a      	subs	r2, r3, #1
 801d99c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d99e:	fb06 4602 	mla	r6, r6, r2, r4
 801d9a2:	1436      	asrs	r6, r6, #16
 801d9a4:	d546      	bpl.n	801da34 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801d9a6:	4699      	mov	r9, r3
 801d9a8:	462f      	mov	r7, r5
 801d9aa:	f1b9 0f00 	cmp.w	r9, #0
 801d9ae:	f300 80a5 	bgt.w	801dafc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801d9b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d9b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d9ba:	441d      	add	r5, r3
 801d9bc:	9b01      	ldr	r3, [sp, #4]
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	f340 80f7 	ble.w	801dbb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d9c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d9c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d9ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d9ce:	eeb0 6a62 	vmov.f32	s12, s5
 801d9d2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d9d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d9da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d9de:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d9e2:	eeb0 6a43 	vmov.f32	s12, s6
 801d9e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d9ea:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d9ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d9f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d9f6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d9fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d9fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801da02:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801da06:	ee12 2a90 	vmov	r2, s5
 801da0a:	eef0 2a47 	vmov.f32	s5, s14
 801da0e:	fb92 f3f3 	sdiv	r3, r2, r3
 801da12:	ee13 2a10 	vmov	r2, s6
 801da16:	9313      	str	r3, [sp, #76]	; 0x4c
 801da18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801da1a:	eeb0 3a67 	vmov.f32	s6, s15
 801da1e:	fb92 f3f3 	sdiv	r3, r2, r3
 801da22:	9314      	str	r3, [sp, #80]	; 0x50
 801da24:	9b01      	ldr	r3, [sp, #4]
 801da26:	9a04      	ldr	r2, [sp, #16]
 801da28:	3b01      	subs	r3, #1
 801da2a:	9301      	str	r3, [sp, #4]
 801da2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801da2e:	bf08      	it	eq
 801da30:	4613      	moveq	r3, r2
 801da32:	e793      	b.n	801d95c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801da34:	4576      	cmp	r6, lr
 801da36:	dab6      	bge.n	801d9a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801da38:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801da3a:	fb06 0202 	mla	r2, r6, r2, r0
 801da3e:	1412      	asrs	r2, r2, #16
 801da40:	d4b1      	bmi.n	801d9a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801da42:	4542      	cmp	r2, r8
 801da44:	daaf      	bge.n	801d9a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801da46:	1cef      	adds	r7, r5, #3
 801da48:	4699      	mov	r9, r3
 801da4a:	f1b9 0f00 	cmp.w	r9, #0
 801da4e:	ddb0      	ble.n	801d9b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801da50:	9902      	ldr	r1, [sp, #8]
 801da52:	1402      	asrs	r2, r0, #16
 801da54:	1426      	asrs	r6, r4, #16
 801da56:	fb0e 1202 	mla	r2, lr, r2, r1
 801da5a:	9903      	ldr	r1, [sp, #12]
 801da5c:	5d92      	ldrb	r2, [r2, r6]
 801da5e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801da62:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801da66:	d041      	beq.n	801daec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801da68:	9a05      	ldr	r2, [sp, #20]
 801da6a:	fa5f fb86 	uxtb.w	fp, r6
 801da6e:	fb02 fc0c 	mul.w	ip, r2, ip
 801da72:	f10c 0201 	add.w	r2, ip, #1
 801da76:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801da7a:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801da7e:	1212      	asrs	r2, r2, #8
 801da80:	fa1f fa82 	uxth.w	sl, r2
 801da84:	43d2      	mvns	r2, r2
 801da86:	fb1b fb0a 	smulbb	fp, fp, sl
 801da8a:	b2d2      	uxtb	r2, r2
 801da8c:	fb0c bc02 	mla	ip, ip, r2, fp
 801da90:	fa1f fc8c 	uxth.w	ip, ip
 801da94:	f10c 0b01 	add.w	fp, ip, #1
 801da98:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801da9c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801daa0:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801daa4:	fb1b fb0a 	smulbb	fp, fp, sl
 801daa8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801daac:	fb16 fa0a 	smulbb	sl, r6, sl
 801dab0:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801dab4:	f807 cc03 	strb.w	ip, [r7, #-3]
 801dab8:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801dabc:	fb06 aa02 	mla	sl, r6, r2, sl
 801dac0:	fb0c bc02 	mla	ip, ip, r2, fp
 801dac4:	fa1f fa8a 	uxth.w	sl, sl
 801dac8:	fa1f fc8c 	uxth.w	ip, ip
 801dacc:	f10a 0601 	add.w	r6, sl, #1
 801dad0:	f10c 0b01 	add.w	fp, ip, #1
 801dad4:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801dad8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801dadc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dae0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dae4:	f807 ac01 	strb.w	sl, [r7, #-1]
 801dae8:	f807 cc02 	strb.w	ip, [r7, #-2]
 801daec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801daee:	3703      	adds	r7, #3
 801daf0:	f109 39ff 	add.w	r9, r9, #4294967295
 801daf4:	4414      	add	r4, r2
 801daf6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801daf8:	4410      	add	r0, r2
 801dafa:	e7a6      	b.n	801da4a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801dafc:	1426      	asrs	r6, r4, #16
 801dafe:	d450      	bmi.n	801dba2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801db00:	4576      	cmp	r6, lr
 801db02:	da4e      	bge.n	801dba2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801db04:	1402      	asrs	r2, r0, #16
 801db06:	d44c      	bmi.n	801dba2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801db08:	4542      	cmp	r2, r8
 801db0a:	da4a      	bge.n	801dba2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801db0c:	9902      	ldr	r1, [sp, #8]
 801db0e:	fb0e 1202 	mla	r2, lr, r2, r1
 801db12:	9903      	ldr	r1, [sp, #12]
 801db14:	5d92      	ldrb	r2, [r2, r6]
 801db16:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801db1a:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801db1e:	d040      	beq.n	801dba2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801db20:	9a05      	ldr	r2, [sp, #20]
 801db22:	fa5f fb86 	uxtb.w	fp, r6
 801db26:	fb02 fc0c 	mul.w	ip, r2, ip
 801db2a:	f10c 0201 	add.w	r2, ip, #1
 801db2e:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801db32:	f897 c000 	ldrb.w	ip, [r7]
 801db36:	1212      	asrs	r2, r2, #8
 801db38:	fa1f fa82 	uxth.w	sl, r2
 801db3c:	43d2      	mvns	r2, r2
 801db3e:	fb1b fb0a 	smulbb	fp, fp, sl
 801db42:	b2d2      	uxtb	r2, r2
 801db44:	fb0c bc02 	mla	ip, ip, r2, fp
 801db48:	fa1f fc8c 	uxth.w	ip, ip
 801db4c:	f10c 0b01 	add.w	fp, ip, #1
 801db50:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801db54:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801db58:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801db5c:	fb1b fb0a 	smulbb	fp, fp, sl
 801db60:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801db64:	fb16 fa0a 	smulbb	sl, r6, sl
 801db68:	78be      	ldrb	r6, [r7, #2]
 801db6a:	f887 c000 	strb.w	ip, [r7]
 801db6e:	f897 c001 	ldrb.w	ip, [r7, #1]
 801db72:	fb06 aa02 	mla	sl, r6, r2, sl
 801db76:	fb0c bc02 	mla	ip, ip, r2, fp
 801db7a:	fa1f fa8a 	uxth.w	sl, sl
 801db7e:	fa1f fc8c 	uxth.w	ip, ip
 801db82:	f10a 0601 	add.w	r6, sl, #1
 801db86:	f10c 0b01 	add.w	fp, ip, #1
 801db8a:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801db8e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801db92:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801db96:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801db9a:	f887 a002 	strb.w	sl, [r7, #2]
 801db9e:	f887 c001 	strb.w	ip, [r7, #1]
 801dba2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dba4:	3703      	adds	r7, #3
 801dba6:	f109 39ff 	add.w	r9, r9, #4294967295
 801dbaa:	4414      	add	r4, r2
 801dbac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dbae:	4410      	add	r0, r2
 801dbb0:	e6fb      	b.n	801d9aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801dbb2:	b007      	add	sp, #28
 801dbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dbb8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801dbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbbc:	b085      	sub	sp, #20
 801dbbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dbc2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801dbc4:	9203      	str	r2, [sp, #12]
 801dbc6:	6870      	ldr	r0, [r6, #4]
 801dbc8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801dbca:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801dbce:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801dbd2:	9100      	str	r1, [sp, #0]
 801dbd4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801dbd8:	fb00 2404 	mla	r4, r0, r4, r2
 801dbdc:	6832      	ldr	r2, [r6, #0]
 801dbde:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dbe2:	4414      	add	r4, r2
 801dbe4:	682a      	ldr	r2, [r5, #0]
 801dbe6:	9201      	str	r2, [sp, #4]
 801dbe8:	686a      	ldr	r2, [r5, #4]
 801dbea:	3204      	adds	r2, #4
 801dbec:	9202      	str	r2, [sp, #8]
 801dbee:	9a00      	ldr	r2, [sp, #0]
 801dbf0:	2a00      	cmp	r2, #0
 801dbf2:	dc03      	bgt.n	801dbfc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801dbf4:	9a03      	ldr	r2, [sp, #12]
 801dbf6:	2a00      	cmp	r2, #0
 801dbf8:	f340 8131 	ble.w	801de5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801dbfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dbfe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801dc02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dc04:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801dc08:	2b00      	cmp	r3, #0
 801dc0a:	dd0e      	ble.n	801dc2a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801dc0c:	1405      	asrs	r5, r0, #16
 801dc0e:	d405      	bmi.n	801dc1c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801dc10:	4575      	cmp	r5, lr
 801dc12:	da03      	bge.n	801dc1c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801dc14:	1415      	asrs	r5, r2, #16
 801dc16:	d401      	bmi.n	801dc1c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801dc18:	4545      	cmp	r5, r8
 801dc1a:	db07      	blt.n	801dc2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801dc1c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801dc1e:	3b01      	subs	r3, #1
 801dc20:	3403      	adds	r4, #3
 801dc22:	4428      	add	r0, r5
 801dc24:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801dc26:	442a      	add	r2, r5
 801dc28:	e7ee      	b.n	801dc08 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801dc2a:	d06f      	beq.n	801dd0c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801dc2c:	1e5d      	subs	r5, r3, #1
 801dc2e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801dc30:	fb06 0605 	mla	r6, r6, r5, r0
 801dc34:	1436      	asrs	r6, r6, #16
 801dc36:	d460      	bmi.n	801dcfa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801dc38:	4576      	cmp	r6, lr
 801dc3a:	da5e      	bge.n	801dcfa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801dc3c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801dc3e:	fb06 2505 	mla	r5, r6, r5, r2
 801dc42:	142d      	asrs	r5, r5, #16
 801dc44:	d459      	bmi.n	801dcfa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801dc46:	4545      	cmp	r5, r8
 801dc48:	da57      	bge.n	801dcfa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801dc4a:	1ce5      	adds	r5, r4, #3
 801dc4c:	469a      	mov	sl, r3
 801dc4e:	f1ba 0f00 	cmp.w	sl, #0
 801dc52:	dd56      	ble.n	801dd02 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801dc54:	9901      	ldr	r1, [sp, #4]
 801dc56:	1416      	asrs	r6, r2, #16
 801dc58:	1407      	asrs	r7, r0, #16
 801dc5a:	fb0e 1606 	mla	r6, lr, r6, r1
 801dc5e:	9902      	ldr	r1, [sp, #8]
 801dc60:	5df6      	ldrb	r6, [r6, r7]
 801dc62:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801dc66:	0e37      	lsrs	r7, r6, #24
 801dc68:	2fff      	cmp	r7, #255	; 0xff
 801dc6a:	f000 80ef 	beq.w	801de4c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801dc6e:	fa5f fc87 	uxtb.w	ip, r7
 801dc72:	b3d7      	cbz	r7, 801dcea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801dc74:	fa1f f78c 	uxth.w	r7, ip
 801dc78:	ea6f 0c0c 	mvn.w	ip, ip
 801dc7c:	fa5f fb86 	uxtb.w	fp, r6
 801dc80:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801dc84:	fa5f fc8c 	uxtb.w	ip, ip
 801dc88:	fb1b fb07 	smulbb	fp, fp, r7
 801dc8c:	fb09 b90c 	mla	r9, r9, ip, fp
 801dc90:	fa1f f989 	uxth.w	r9, r9
 801dc94:	f109 0b01 	add.w	fp, r9, #1
 801dc98:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dc9c:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801dca0:	fb1b fb0c 	smulbb	fp, fp, ip
 801dca4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dca8:	f805 9c03 	strb.w	r9, [r5, #-3]
 801dcac:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801dcb0:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801dcb4:	fb09 b907 	mla	r9, r9, r7, fp
 801dcb8:	fa1f f989 	uxth.w	r9, r9
 801dcbc:	f109 0b01 	add.w	fp, r9, #1
 801dcc0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dcc4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dcc8:	f805 9c02 	strb.w	r9, [r5, #-2]
 801dccc:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801dcd0:	fb19 fc0c 	smulbb	ip, r9, ip
 801dcd4:	fb06 c607 	mla	r6, r6, r7, ip
 801dcd8:	b2b6      	uxth	r6, r6
 801dcda:	f106 0c01 	add.w	ip, r6, #1
 801dcde:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801dce2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dce6:	f805 cc01 	strb.w	ip, [r5, #-1]
 801dcea:	9911      	ldr	r1, [sp, #68]	; 0x44
 801dcec:	3503      	adds	r5, #3
 801dcee:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dcf2:	4408      	add	r0, r1
 801dcf4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dcf6:	440a      	add	r2, r1
 801dcf8:	e7a9      	b.n	801dc4e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801dcfa:	2600      	movs	r6, #0
 801dcfc:	1b9d      	subs	r5, r3, r6
 801dcfe:	2d00      	cmp	r5, #0
 801dd00:	dc40      	bgt.n	801dd84 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801dd02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dd06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd0a:	441c      	add	r4, r3
 801dd0c:	9b00      	ldr	r3, [sp, #0]
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	f340 80a5 	ble.w	801de5e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801dd14:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd1a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd1e:	eeb0 6a62 	vmov.f32	s12, s5
 801dd22:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dd26:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dd2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd2e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801dd32:	eeb0 6a43 	vmov.f32	s12, s6
 801dd36:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd3a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801dd3e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dd42:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dd46:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dd4a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dd4e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dd52:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dd56:	ee12 2a90 	vmov	r2, s5
 801dd5a:	eef0 2a47 	vmov.f32	s5, s14
 801dd5e:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd62:	ee13 2a10 	vmov	r2, s6
 801dd66:	9311      	str	r3, [sp, #68]	; 0x44
 801dd68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd6a:	eeb0 3a67 	vmov.f32	s6, s15
 801dd6e:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd72:	9312      	str	r3, [sp, #72]	; 0x48
 801dd74:	9b00      	ldr	r3, [sp, #0]
 801dd76:	9a03      	ldr	r2, [sp, #12]
 801dd78:	3b01      	subs	r3, #1
 801dd7a:	9300      	str	r3, [sp, #0]
 801dd7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd7e:	bf08      	it	eq
 801dd80:	4613      	moveq	r3, r2
 801dd82:	e734      	b.n	801dbee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801dd84:	1407      	asrs	r7, r0, #16
 801dd86:	d450      	bmi.n	801de2a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801dd88:	4577      	cmp	r7, lr
 801dd8a:	da4e      	bge.n	801de2a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801dd8c:	1415      	asrs	r5, r2, #16
 801dd8e:	d44c      	bmi.n	801de2a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801dd90:	4545      	cmp	r5, r8
 801dd92:	da4a      	bge.n	801de2a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801dd94:	9901      	ldr	r1, [sp, #4]
 801dd96:	fb0e 1505 	mla	r5, lr, r5, r1
 801dd9a:	9902      	ldr	r1, [sp, #8]
 801dd9c:	5ded      	ldrb	r5, [r5, r7]
 801dd9e:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801dda2:	0e2f      	lsrs	r7, r5, #24
 801dda4:	2fff      	cmp	r7, #255	; 0xff
 801dda6:	d046      	beq.n	801de36 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801dda8:	fa5f f987 	uxtb.w	r9, r7
 801ddac:	b3ef      	cbz	r7, 801de2a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801ddae:	fa1f fc89 	uxth.w	ip, r9
 801ddb2:	ea6f 0909 	mvn.w	r9, r9
 801ddb6:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801ddba:	fa5f fb85 	uxtb.w	fp, r5
 801ddbe:	f814 a007 	ldrb.w	sl, [r4, r7]
 801ddc2:	fa5f f989 	uxtb.w	r9, r9
 801ddc6:	fb1b fb0c 	smulbb	fp, fp, ip
 801ddca:	fb0a ba09 	mla	sl, sl, r9, fp
 801ddce:	fa1f fa8a 	uxth.w	sl, sl
 801ddd2:	f10a 0b01 	add.w	fp, sl, #1
 801ddd6:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801ddda:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ddde:	f804 a007 	strb.w	sl, [r4, r7]
 801dde2:	4427      	add	r7, r4
 801dde4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801dde8:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801ddec:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ddf0:	fb1b fb09 	smulbb	fp, fp, r9
 801ddf4:	fb0a ba0c 	mla	sl, sl, ip, fp
 801ddf8:	fa1f fa8a 	uxth.w	sl, sl
 801ddfc:	f10a 0b01 	add.w	fp, sl, #1
 801de00:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801de04:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801de08:	f887 a001 	strb.w	sl, [r7, #1]
 801de0c:	f897 a002 	ldrb.w	sl, [r7, #2]
 801de10:	fb1a f909 	smulbb	r9, sl, r9
 801de14:	fb05 950c 	mla	r5, r5, ip, r9
 801de18:	b2ad      	uxth	r5, r5
 801de1a:	f105 0901 	add.w	r9, r5, #1
 801de1e:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801de22:	ea4f 2929 	mov.w	r9, r9, asr #8
 801de26:	f887 9002 	strb.w	r9, [r7, #2]
 801de2a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801de2c:	3601      	adds	r6, #1
 801de2e:	4408      	add	r0, r1
 801de30:	9912      	ldr	r1, [sp, #72]	; 0x48
 801de32:	440a      	add	r2, r1
 801de34:	e762      	b.n	801dcfc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801de36:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801de3a:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801de3e:	55e5      	strb	r5, [r4, r7]
 801de40:	4427      	add	r7, r4
 801de42:	0c2d      	lsrs	r5, r5, #16
 801de44:	f887 c001 	strb.w	ip, [r7, #1]
 801de48:	70bd      	strb	r5, [r7, #2]
 801de4a:	e7ee      	b.n	801de2a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801de4c:	0a37      	lsrs	r7, r6, #8
 801de4e:	f805 6c03 	strb.w	r6, [r5, #-3]
 801de52:	0c36      	lsrs	r6, r6, #16
 801de54:	f805 7c02 	strb.w	r7, [r5, #-2]
 801de58:	f805 6c01 	strb.w	r6, [r5, #-1]
 801de5c:	e745      	b.n	801dcea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801de5e:	b005      	add	sp, #20
 801de60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801de64 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801de64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de68:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801de6a:	9201      	str	r2, [sp, #4]
 801de6c:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801de70:	6870      	ldr	r0, [r6, #4]
 801de72:	9200      	str	r2, [sp, #0]
 801de74:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801de78:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801de7c:	fa1f fc85 	uxth.w	ip, r5
 801de80:	43ed      	mvns	r5, r5
 801de82:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801de86:	b2ed      	uxtb	r5, r5
 801de88:	fb00 2404 	mla	r4, r0, r4, r2
 801de8c:	6832      	ldr	r2, [r6, #0]
 801de8e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801de92:	4414      	add	r4, r2
 801de94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801de96:	f8d2 8000 	ldr.w	r8, [r2]
 801de9a:	2900      	cmp	r1, #0
 801de9c:	dc03      	bgt.n	801dea6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801de9e:	9a01      	ldr	r2, [sp, #4]
 801dea0:	2a00      	cmp	r2, #0
 801dea2:	f340 8104 	ble.w	801e0ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801dea6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dea8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801deac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801deae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801deb2:	2b00      	cmp	r3, #0
 801deb4:	dd0f      	ble.n	801ded6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801deb6:	1406      	asrs	r6, r0, #16
 801deb8:	d406      	bmi.n	801dec8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801deba:	4576      	cmp	r6, lr
 801debc:	da04      	bge.n	801dec8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801debe:	1416      	asrs	r6, r2, #16
 801dec0:	d402      	bmi.n	801dec8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801dec2:	9f00      	ldr	r7, [sp, #0]
 801dec4:	42be      	cmp	r6, r7
 801dec6:	db07      	blt.n	801ded8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801dec8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801deca:	3b01      	subs	r3, #1
 801decc:	3403      	adds	r4, #3
 801dece:	4430      	add	r0, r6
 801ded0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801ded2:	4432      	add	r2, r6
 801ded4:	e7ed      	b.n	801deb2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801ded6:	d05f      	beq.n	801df98 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801ded8:	1e5e      	subs	r6, r3, #1
 801deda:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801dedc:	fb07 0706 	mla	r7, r7, r6, r0
 801dee0:	143f      	asrs	r7, r7, #16
 801dee2:	d450      	bmi.n	801df86 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801dee4:	4577      	cmp	r7, lr
 801dee6:	da4e      	bge.n	801df86 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801dee8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801deea:	fb07 2606 	mla	r6, r7, r6, r2
 801deee:	1436      	asrs	r6, r6, #16
 801def0:	d449      	bmi.n	801df86 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801def2:	9f00      	ldr	r7, [sp, #0]
 801def4:	42be      	cmp	r6, r7
 801def6:	da46      	bge.n	801df86 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801def8:	1ce6      	adds	r6, r4, #3
 801defa:	4699      	mov	r9, r3
 801defc:	f1b9 0f00 	cmp.w	r9, #0
 801df00:	f106 0603 	add.w	r6, r6, #3
 801df04:	dd43      	ble.n	801df8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801df06:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801df0a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801df0e:	1417      	asrs	r7, r2, #16
 801df10:	f109 39ff 	add.w	r9, r9, #4294967295
 801df14:	fb1b fb05 	smulbb	fp, fp, r5
 801df18:	fb0e a707 	mla	r7, lr, r7, sl
 801df1c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801df20:	eb08 0a07 	add.w	sl, r8, r7
 801df24:	f818 7007 	ldrb.w	r7, [r8, r7]
 801df28:	fb07 b70c 	mla	r7, r7, ip, fp
 801df2c:	b2bf      	uxth	r7, r7
 801df2e:	f107 0b01 	add.w	fp, r7, #1
 801df32:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801df36:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801df3a:	fb1b fb05 	smulbb	fp, fp, r5
 801df3e:	123f      	asrs	r7, r7, #8
 801df40:	f806 7c06 	strb.w	r7, [r6, #-6]
 801df44:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801df48:	fb07 b70c 	mla	r7, r7, ip, fp
 801df4c:	b2bf      	uxth	r7, r7
 801df4e:	f107 0b01 	add.w	fp, r7, #1
 801df52:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801df56:	123f      	asrs	r7, r7, #8
 801df58:	f806 7c05 	strb.w	r7, [r6, #-5]
 801df5c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801df60:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801df64:	fb1a fa05 	smulbb	sl, sl, r5
 801df68:	fb07 a70c 	mla	r7, r7, ip, sl
 801df6c:	b2bf      	uxth	r7, r7
 801df6e:	f107 0a01 	add.w	sl, r7, #1
 801df72:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801df76:	123f      	asrs	r7, r7, #8
 801df78:	f806 7c04 	strb.w	r7, [r6, #-4]
 801df7c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801df7e:	4438      	add	r0, r7
 801df80:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801df82:	443a      	add	r2, r7
 801df84:	e7ba      	b.n	801defc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801df86:	2700      	movs	r7, #0
 801df88:	1bde      	subs	r6, r3, r7
 801df8a:	2e00      	cmp	r6, #0
 801df8c:	dc3f      	bgt.n	801e00e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801df8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801df92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df96:	441c      	add	r4, r3
 801df98:	2900      	cmp	r1, #0
 801df9a:	f340 8088 	ble.w	801e0ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801df9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dfa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dfa4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dfa8:	3901      	subs	r1, #1
 801dfaa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dfae:	eef0 6a62 	vmov.f32	s13, s5
 801dfb2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dfb6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dfba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dfbe:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801dfc2:	eef0 6a43 	vmov.f32	s13, s6
 801dfc6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dfca:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801dfce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dfd2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dfd6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dfda:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dfde:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dfe2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dfe6:	ee12 2a90 	vmov	r2, s5
 801dfea:	eef0 2a47 	vmov.f32	s5, s14
 801dfee:	fb92 f3f3 	sdiv	r3, r2, r3
 801dff2:	ee13 2a10 	vmov	r2, s6
 801dff6:	930f      	str	r3, [sp, #60]	; 0x3c
 801dff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dffa:	eeb0 3a67 	vmov.f32	s6, s15
 801dffe:	fb92 f3f3 	sdiv	r3, r2, r3
 801e002:	9a01      	ldr	r2, [sp, #4]
 801e004:	9310      	str	r3, [sp, #64]	; 0x40
 801e006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e008:	bf08      	it	eq
 801e00a:	4613      	moveq	r3, r2
 801e00c:	e745      	b.n	801de9a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801e00e:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801e012:	d446      	bmi.n	801e0a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801e014:	45f2      	cmp	sl, lr
 801e016:	da44      	bge.n	801e0a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801e018:	ea5f 4922 	movs.w	r9, r2, asr #16
 801e01c:	d441      	bmi.n	801e0a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801e01e:	9e00      	ldr	r6, [sp, #0]
 801e020:	45b1      	cmp	r9, r6
 801e022:	da3e      	bge.n	801e0a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801e024:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801e028:	fb0e a909 	mla	r9, lr, r9, sl
 801e02c:	f814 b006 	ldrb.w	fp, [r4, r6]
 801e030:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e034:	fb1b fb05 	smulbb	fp, fp, r5
 801e038:	eb08 0a09 	add.w	sl, r8, r9
 801e03c:	f818 9009 	ldrb.w	r9, [r8, r9]
 801e040:	fb09 b90c 	mla	r9, r9, ip, fp
 801e044:	fa1f f989 	uxth.w	r9, r9
 801e048:	f109 0b01 	add.w	fp, r9, #1
 801e04c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e050:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e054:	f804 9006 	strb.w	r9, [r4, r6]
 801e058:	4426      	add	r6, r4
 801e05a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801e05e:	f896 b001 	ldrb.w	fp, [r6, #1]
 801e062:	fb1b fb05 	smulbb	fp, fp, r5
 801e066:	fb09 b90c 	mla	r9, r9, ip, fp
 801e06a:	fa1f f989 	uxth.w	r9, r9
 801e06e:	f109 0b01 	add.w	fp, r9, #1
 801e072:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e076:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e07a:	f886 9001 	strb.w	r9, [r6, #1]
 801e07e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801e082:	f896 a002 	ldrb.w	sl, [r6, #2]
 801e086:	fb1a fa05 	smulbb	sl, sl, r5
 801e08a:	fb09 a90c 	mla	r9, r9, ip, sl
 801e08e:	fa1f f989 	uxth.w	r9, r9
 801e092:	f109 0a01 	add.w	sl, r9, #1
 801e096:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801e09a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e09e:	f886 9002 	strb.w	r9, [r6, #2]
 801e0a2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e0a4:	3701      	adds	r7, #1
 801e0a6:	4430      	add	r0, r6
 801e0a8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801e0aa:	4432      	add	r2, r6
 801e0ac:	e76c      	b.n	801df88 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801e0ae:	b003      	add	sp, #12
 801e0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e0b4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e0b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0b8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e0ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e0be:	9201      	str	r2, [sp, #4]
 801e0c0:	6868      	ldr	r0, [r5, #4]
 801e0c2:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801e0c6:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801e0ca:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801e0ce:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801e0d2:	fb00 2404 	mla	r4, r0, r4, r2
 801e0d6:	682a      	ldr	r2, [r5, #0]
 801e0d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e0dc:	4414      	add	r4, r2
 801e0de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e0e0:	f8d2 9000 	ldr.w	r9, [r2]
 801e0e4:	2900      	cmp	r1, #0
 801e0e6:	dc03      	bgt.n	801e0f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801e0e8:	9a01      	ldr	r2, [sp, #4]
 801e0ea:	2a00      	cmp	r2, #0
 801e0ec:	f340 80a8 	ble.w	801e240 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801e0f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e0f2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e0f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e0f8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e0fc:	2b00      	cmp	r3, #0
 801e0fe:	dd0c      	ble.n	801e11a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801e100:	1405      	asrs	r5, r0, #16
 801e102:	d405      	bmi.n	801e110 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801e104:	4565      	cmp	r5, ip
 801e106:	da03      	bge.n	801e110 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801e108:	1415      	asrs	r5, r2, #16
 801e10a:	d401      	bmi.n	801e110 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801e10c:	4575      	cmp	r5, lr
 801e10e:	db05      	blt.n	801e11c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801e110:	4438      	add	r0, r7
 801e112:	4432      	add	r2, r6
 801e114:	3b01      	subs	r3, #1
 801e116:	3403      	adds	r4, #3
 801e118:	e7f0      	b.n	801e0fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801e11a:	d03a      	beq.n	801e192 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801e11c:	1e5d      	subs	r5, r3, #1
 801e11e:	fb07 0805 	mla	r8, r7, r5, r0
 801e122:	ea5f 4828 	movs.w	r8, r8, asr #16
 801e126:	d429      	bmi.n	801e17c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e128:	45e0      	cmp	r8, ip
 801e12a:	da27      	bge.n	801e17c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e12c:	fb06 2505 	mla	r5, r6, r5, r2
 801e130:	142d      	asrs	r5, r5, #16
 801e132:	d423      	bmi.n	801e17c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e134:	4575      	cmp	r5, lr
 801e136:	da21      	bge.n	801e17c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e138:	f104 0803 	add.w	r8, r4, #3
 801e13c:	469a      	mov	sl, r3
 801e13e:	f1ba 0f00 	cmp.w	sl, #0
 801e142:	f108 0803 	add.w	r8, r8, #3
 801e146:	dd1f      	ble.n	801e188 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801e148:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801e14c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e150:	1415      	asrs	r5, r2, #16
 801e152:	4438      	add	r0, r7
 801e154:	4432      	add	r2, r6
 801e156:	fb0c b505 	mla	r5, ip, r5, fp
 801e15a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e15e:	eb09 0b05 	add.w	fp, r9, r5
 801e162:	f819 5005 	ldrb.w	r5, [r9, r5]
 801e166:	f808 5c06 	strb.w	r5, [r8, #-6]
 801e16a:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801e16e:	f808 5c05 	strb.w	r5, [r8, #-5]
 801e172:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801e176:	f808 5c04 	strb.w	r5, [r8, #-4]
 801e17a:	e7e0      	b.n	801e13e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801e17c:	2500      	movs	r5, #0
 801e17e:	eba3 0805 	sub.w	r8, r3, r5
 801e182:	f1b8 0f00 	cmp.w	r8, #0
 801e186:	dc38      	bgt.n	801e1fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801e188:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e18c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e190:	441c      	add	r4, r3
 801e192:	2900      	cmp	r1, #0
 801e194:	dd54      	ble.n	801e240 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801e196:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e19a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e19c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e1a0:	3901      	subs	r1, #1
 801e1a2:	eeb0 6a62 	vmov.f32	s12, s5
 801e1a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e1aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e1ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e1b2:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801e1b6:	eeb0 6a43 	vmov.f32	s12, s6
 801e1ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e1be:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801e1c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e1c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e1ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e1ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e1d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e1d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e1da:	ee12 2a90 	vmov	r2, s5
 801e1de:	eef0 2a47 	vmov.f32	s5, s14
 801e1e2:	fb92 f7f3 	sdiv	r7, r2, r3
 801e1e6:	ee13 2a10 	vmov	r2, s6
 801e1ea:	eeb0 3a67 	vmov.f32	s6, s15
 801e1ee:	fb92 f6f3 	sdiv	r6, r2, r3
 801e1f2:	9a01      	ldr	r2, [sp, #4]
 801e1f4:	bf08      	it	eq
 801e1f6:	4613      	moveq	r3, r2
 801e1f8:	e774      	b.n	801e0e4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801e1fa:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801e1fe:	d41b      	bmi.n	801e238 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801e200:	45e2      	cmp	sl, ip
 801e202:	da19      	bge.n	801e238 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801e204:	ea5f 4822 	movs.w	r8, r2, asr #16
 801e208:	d416      	bmi.n	801e238 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801e20a:	45f0      	cmp	r8, lr
 801e20c:	da14      	bge.n	801e238 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801e20e:	fb0c a808 	mla	r8, ip, r8, sl
 801e212:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e216:	f819 b008 	ldrb.w	fp, [r9, r8]
 801e21a:	eb09 0a08 	add.w	sl, r9, r8
 801e21e:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801e222:	f804 b008 	strb.w	fp, [r4, r8]
 801e226:	44a0      	add	r8, r4
 801e228:	f89a b001 	ldrb.w	fp, [sl, #1]
 801e22c:	f888 b001 	strb.w	fp, [r8, #1]
 801e230:	f89a a002 	ldrb.w	sl, [sl, #2]
 801e234:	f888 a002 	strb.w	sl, [r8, #2]
 801e238:	4438      	add	r0, r7
 801e23a:	4432      	add	r2, r6
 801e23c:	3501      	adds	r5, #1
 801e23e:	e79e      	b.n	801e17e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801e240:	b003      	add	sp, #12
 801e242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e246 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e246:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e24a:	b085      	sub	sp, #20
 801e24c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e250:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e252:	9202      	str	r2, [sp, #8]
 801e254:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e258:	6860      	ldr	r0, [r4, #4]
 801e25a:	9203      	str	r2, [sp, #12]
 801e25c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801e260:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801e264:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801e268:	fb00 2505 	mla	r5, r0, r5, r2
 801e26c:	6822      	ldr	r2, [r4, #0]
 801e26e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e272:	4415      	add	r5, r2
 801e274:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e276:	6812      	ldr	r2, [r2, #0]
 801e278:	9201      	str	r2, [sp, #4]
 801e27a:	2900      	cmp	r1, #0
 801e27c:	dc03      	bgt.n	801e286 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801e27e:	9a02      	ldr	r2, [sp, #8]
 801e280:	2a00      	cmp	r2, #0
 801e282:	f340 811c 	ble.w	801e4be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801e286:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e288:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e28c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e28e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e292:	2b00      	cmp	r3, #0
 801e294:	dd0e      	ble.n	801e2b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e296:	1422      	asrs	r2, r4, #16
 801e298:	d405      	bmi.n	801e2a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801e29a:	4572      	cmp	r2, lr
 801e29c:	da03      	bge.n	801e2a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801e29e:	1402      	asrs	r2, r0, #16
 801e2a0:	d401      	bmi.n	801e2a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801e2a2:	4542      	cmp	r2, r8
 801e2a4:	db07      	blt.n	801e2b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801e2a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e2a8:	3b01      	subs	r3, #1
 801e2aa:	3503      	adds	r5, #3
 801e2ac:	4414      	add	r4, r2
 801e2ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e2b0:	4410      	add	r0, r2
 801e2b2:	e7ee      	b.n	801e292 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801e2b4:	d072      	beq.n	801e39c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801e2b6:	1e5a      	subs	r2, r3, #1
 801e2b8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e2ba:	fb06 4602 	mla	r6, r6, r2, r4
 801e2be:	1436      	asrs	r6, r6, #16
 801e2c0:	d461      	bmi.n	801e386 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801e2c2:	4576      	cmp	r6, lr
 801e2c4:	da5f      	bge.n	801e386 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801e2c6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e2c8:	fb06 0202 	mla	r2, r6, r2, r0
 801e2cc:	1412      	asrs	r2, r2, #16
 801e2ce:	d45a      	bmi.n	801e386 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801e2d0:	4542      	cmp	r2, r8
 801e2d2:	da58      	bge.n	801e386 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801e2d4:	1cef      	adds	r7, r5, #3
 801e2d6:	4699      	mov	r9, r3
 801e2d8:	f1b9 0f00 	cmp.w	r9, #0
 801e2dc:	dd59      	ble.n	801e392 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801e2de:	1426      	asrs	r6, r4, #16
 801e2e0:	1402      	asrs	r2, r0, #16
 801e2e2:	fb0e 6202 	mla	r2, lr, r2, r6
 801e2e6:	9e01      	ldr	r6, [sp, #4]
 801e2e8:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801e2ec:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801e2f0:	d041      	beq.n	801e376 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801e2f2:	9a03      	ldr	r2, [sp, #12]
 801e2f4:	fa5f fb86 	uxtb.w	fp, r6
 801e2f8:	fb02 fc0c 	mul.w	ip, r2, ip
 801e2fc:	f10c 0201 	add.w	r2, ip, #1
 801e300:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801e304:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801e308:	1212      	asrs	r2, r2, #8
 801e30a:	fa1f fa82 	uxth.w	sl, r2
 801e30e:	43d2      	mvns	r2, r2
 801e310:	fb1b fb0a 	smulbb	fp, fp, sl
 801e314:	b2d2      	uxtb	r2, r2
 801e316:	fb0c bc02 	mla	ip, ip, r2, fp
 801e31a:	fa1f fc8c 	uxth.w	ip, ip
 801e31e:	f10c 0b01 	add.w	fp, ip, #1
 801e322:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e326:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801e32a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801e32e:	fb1b fb0a 	smulbb	fp, fp, sl
 801e332:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e336:	fb16 fa0a 	smulbb	sl, r6, sl
 801e33a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801e33e:	f807 cc03 	strb.w	ip, [r7, #-3]
 801e342:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801e346:	fb06 aa02 	mla	sl, r6, r2, sl
 801e34a:	fb0c bc02 	mla	ip, ip, r2, fp
 801e34e:	fa1f fa8a 	uxth.w	sl, sl
 801e352:	fa1f fc8c 	uxth.w	ip, ip
 801e356:	f10a 0601 	add.w	r6, sl, #1
 801e35a:	f10c 0b01 	add.w	fp, ip, #1
 801e35e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801e362:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e366:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e36a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e36e:	f807 ac01 	strb.w	sl, [r7, #-1]
 801e372:	f807 cc02 	strb.w	ip, [r7, #-2]
 801e376:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e378:	3703      	adds	r7, #3
 801e37a:	f109 39ff 	add.w	r9, r9, #4294967295
 801e37e:	4414      	add	r4, r2
 801e380:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e382:	4410      	add	r0, r2
 801e384:	e7a8      	b.n	801e2d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801e386:	f04f 0c00 	mov.w	ip, #0
 801e38a:	eba3 020c 	sub.w	r2, r3, ip
 801e38e:	2a00      	cmp	r2, #0
 801e390:	dc3d      	bgt.n	801e40e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801e392:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e396:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e39a:	441d      	add	r5, r3
 801e39c:	2900      	cmp	r1, #0
 801e39e:	f340 808e 	ble.w	801e4be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801e3a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e3a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e3a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e3ac:	3901      	subs	r1, #1
 801e3ae:	eeb0 6a62 	vmov.f32	s12, s5
 801e3b2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e3b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e3ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e3be:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e3c2:	eeb0 6a43 	vmov.f32	s12, s6
 801e3c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e3ca:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e3ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e3d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e3d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e3da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e3de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e3e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e3e6:	ee12 2a90 	vmov	r2, s5
 801e3ea:	eef0 2a47 	vmov.f32	s5, s14
 801e3ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801e3f2:	ee13 2a10 	vmov	r2, s6
 801e3f6:	9311      	str	r3, [sp, #68]	; 0x44
 801e3f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e3fa:	eeb0 3a67 	vmov.f32	s6, s15
 801e3fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801e402:	9a02      	ldr	r2, [sp, #8]
 801e404:	9312      	str	r3, [sp, #72]	; 0x48
 801e406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e408:	bf08      	it	eq
 801e40a:	4613      	moveq	r3, r2
 801e40c:	e735      	b.n	801e27a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801e40e:	1426      	asrs	r6, r4, #16
 801e410:	d44e      	bmi.n	801e4b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801e412:	4576      	cmp	r6, lr
 801e414:	da4c      	bge.n	801e4b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801e416:	1402      	asrs	r2, r0, #16
 801e418:	d44a      	bmi.n	801e4b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801e41a:	4542      	cmp	r2, r8
 801e41c:	da48      	bge.n	801e4b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801e41e:	fb0e 6202 	mla	r2, lr, r2, r6
 801e422:	9e01      	ldr	r6, [sp, #4]
 801e424:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801e428:	0e3a      	lsrs	r2, r7, #24
 801e42a:	d041      	beq.n	801e4b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801e42c:	9e03      	ldr	r6, [sp, #12]
 801e42e:	fa5f fb87 	uxtb.w	fp, r7
 801e432:	4372      	muls	r2, r6
 801e434:	1c56      	adds	r6, r2, #1
 801e436:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e43a:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801e43e:	1212      	asrs	r2, r2, #8
 801e440:	f815 9006 	ldrb.w	r9, [r5, r6]
 801e444:	fa1f fa82 	uxth.w	sl, r2
 801e448:	43d2      	mvns	r2, r2
 801e44a:	fb1b fb0a 	smulbb	fp, fp, sl
 801e44e:	b2d2      	uxtb	r2, r2
 801e450:	fb09 b902 	mla	r9, r9, r2, fp
 801e454:	fa1f f989 	uxth.w	r9, r9
 801e458:	f109 0b01 	add.w	fp, r9, #1
 801e45c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e460:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e464:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e468:	fb1b fb0a 	smulbb	fp, fp, sl
 801e46c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e470:	fb17 fa0a 	smulbb	sl, r7, sl
 801e474:	f805 9006 	strb.w	r9, [r5, r6]
 801e478:	442e      	add	r6, r5
 801e47a:	78b7      	ldrb	r7, [r6, #2]
 801e47c:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e480:	fb07 aa02 	mla	sl, r7, r2, sl
 801e484:	fb09 b902 	mla	r9, r9, r2, fp
 801e488:	fa1f fa8a 	uxth.w	sl, sl
 801e48c:	fa1f f989 	uxth.w	r9, r9
 801e490:	f10a 0701 	add.w	r7, sl, #1
 801e494:	f109 0b01 	add.w	fp, r9, #1
 801e498:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e49c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e4a0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e4a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e4a8:	f886 a002 	strb.w	sl, [r6, #2]
 801e4ac:	f886 9001 	strb.w	r9, [r6, #1]
 801e4b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e4b2:	f10c 0c01 	add.w	ip, ip, #1
 801e4b6:	4414      	add	r4, r2
 801e4b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e4ba:	4410      	add	r0, r2
 801e4bc:	e765      	b.n	801e38a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801e4be:	b005      	add	sp, #20
 801e4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e4c4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4c8:	b085      	sub	sp, #20
 801e4ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e4ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e4d0:	9203      	str	r2, [sp, #12]
 801e4d2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801e4d6:	6860      	ldr	r0, [r4, #4]
 801e4d8:	9201      	str	r2, [sp, #4]
 801e4da:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801e4de:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801e4e2:	fb00 2505 	mla	r5, r0, r5, r2
 801e4e6:	6822      	ldr	r2, [r4, #0]
 801e4e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e4ec:	4415      	add	r5, r2
 801e4ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e4f0:	6812      	ldr	r2, [r2, #0]
 801e4f2:	9202      	str	r2, [sp, #8]
 801e4f4:	2900      	cmp	r1, #0
 801e4f6:	dc03      	bgt.n	801e500 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801e4f8:	9a03      	ldr	r2, [sp, #12]
 801e4fa:	2a00      	cmp	r2, #0
 801e4fc:	f340 8122 	ble.w	801e744 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801e500:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e502:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e506:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e508:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e50c:	2b00      	cmp	r3, #0
 801e50e:	dd0f      	ble.n	801e530 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801e510:	1422      	asrs	r2, r4, #16
 801e512:	d406      	bmi.n	801e522 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801e514:	4572      	cmp	r2, lr
 801e516:	da04      	bge.n	801e522 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801e518:	1402      	asrs	r2, r0, #16
 801e51a:	d402      	bmi.n	801e522 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801e51c:	9e01      	ldr	r6, [sp, #4]
 801e51e:	42b2      	cmp	r2, r6
 801e520:	db07      	blt.n	801e532 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e522:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e524:	3b01      	subs	r3, #1
 801e526:	3503      	adds	r5, #3
 801e528:	4414      	add	r4, r2
 801e52a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e52c:	4410      	add	r0, r2
 801e52e:	e7ed      	b.n	801e50c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801e530:	d06e      	beq.n	801e610 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801e532:	1e5a      	subs	r2, r3, #1
 801e534:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e536:	fb06 4602 	mla	r6, r6, r2, r4
 801e53a:	1436      	asrs	r6, r6, #16
 801e53c:	d45d      	bmi.n	801e5fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801e53e:	4576      	cmp	r6, lr
 801e540:	da5b      	bge.n	801e5fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801e542:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e544:	fb06 0202 	mla	r2, r6, r2, r0
 801e548:	1412      	asrs	r2, r2, #16
 801e54a:	d456      	bmi.n	801e5fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801e54c:	9e01      	ldr	r6, [sp, #4]
 801e54e:	42b2      	cmp	r2, r6
 801e550:	da53      	bge.n	801e5fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801e552:	1cee      	adds	r6, r5, #3
 801e554:	469a      	mov	sl, r3
 801e556:	f1ba 0f00 	cmp.w	sl, #0
 801e55a:	dd54      	ble.n	801e606 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e55c:	1427      	asrs	r7, r4, #16
 801e55e:	1402      	asrs	r2, r0, #16
 801e560:	fb0e 7202 	mla	r2, lr, r2, r7
 801e564:	9f02      	ldr	r7, [sp, #8]
 801e566:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801e56a:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801e56e:	d03c      	beq.n	801e5ea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801e570:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e574:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801e578:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801e57c:	fa5f f28c 	uxtb.w	r2, ip
 801e580:	b2ff      	uxtb	r7, r7
 801e582:	f000 80d8 	beq.w	801e736 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801e586:	fa1f f882 	uxth.w	r8, r2
 801e58a:	43d2      	mvns	r2, r2
 801e58c:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801e590:	fb17 f708 	smulbb	r7, r7, r8
 801e594:	b2d2      	uxtb	r2, r2
 801e596:	fb19 f908 	smulbb	r9, r9, r8
 801e59a:	fb0c 7702 	mla	r7, ip, r2, r7
 801e59e:	fb1b f808 	smulbb	r8, fp, r8
 801e5a2:	b2bf      	uxth	r7, r7
 801e5a4:	f107 0c01 	add.w	ip, r7, #1
 801e5a8:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801e5ac:	123f      	asrs	r7, r7, #8
 801e5ae:	f806 7c03 	strb.w	r7, [r6, #-3]
 801e5b2:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801e5b6:	fb07 9902 	mla	r9, r7, r2, r9
 801e5ba:	fa1f f989 	uxth.w	r9, r9
 801e5be:	f109 0701 	add.w	r7, r9, #1
 801e5c2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801e5c6:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801e5ca:	fb07 8802 	mla	r8, r7, r2, r8
 801e5ce:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e5d2:	fa1f f888 	uxth.w	r8, r8
 801e5d6:	f806 9c02 	strb.w	r9, [r6, #-2]
 801e5da:	f108 0201 	add.w	r2, r8, #1
 801e5de:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e5e2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e5e6:	f806 8c01 	strb.w	r8, [r6, #-1]
 801e5ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e5ec:	3603      	adds	r6, #3
 801e5ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e5f2:	4414      	add	r4, r2
 801e5f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e5f6:	4410      	add	r0, r2
 801e5f8:	e7ad      	b.n	801e556 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801e5fa:	f04f 0c00 	mov.w	ip, #0
 801e5fe:	eba3 020c 	sub.w	r2, r3, ip
 801e602:	2a00      	cmp	r2, #0
 801e604:	dc3d      	bgt.n	801e682 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801e606:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e60a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e60e:	441d      	add	r5, r3
 801e610:	2900      	cmp	r1, #0
 801e612:	f340 8097 	ble.w	801e744 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801e616:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e61a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e61c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e620:	3901      	subs	r1, #1
 801e622:	eeb0 6a62 	vmov.f32	s12, s5
 801e626:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e62a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e62e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e632:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e636:	eeb0 6a43 	vmov.f32	s12, s6
 801e63a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e63e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e642:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e646:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e64a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e64e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e652:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e656:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e65a:	ee12 2a90 	vmov	r2, s5
 801e65e:	eef0 2a47 	vmov.f32	s5, s14
 801e662:	fb92 f3f3 	sdiv	r3, r2, r3
 801e666:	ee13 2a10 	vmov	r2, s6
 801e66a:	9311      	str	r3, [sp, #68]	; 0x44
 801e66c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e66e:	eeb0 3a67 	vmov.f32	s6, s15
 801e672:	fb92 f3f3 	sdiv	r3, r2, r3
 801e676:	9a03      	ldr	r2, [sp, #12]
 801e678:	9312      	str	r3, [sp, #72]	; 0x48
 801e67a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e67c:	bf08      	it	eq
 801e67e:	4613      	moveq	r3, r2
 801e680:	e738      	b.n	801e4f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801e682:	1426      	asrs	r6, r4, #16
 801e684:	d448      	bmi.n	801e718 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e686:	4576      	cmp	r6, lr
 801e688:	da46      	bge.n	801e718 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e68a:	1402      	asrs	r2, r0, #16
 801e68c:	d444      	bmi.n	801e718 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e68e:	9f01      	ldr	r7, [sp, #4]
 801e690:	42ba      	cmp	r2, r7
 801e692:	da41      	bge.n	801e718 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e694:	fb0e 6202 	mla	r2, lr, r2, r6
 801e698:	9e02      	ldr	r6, [sp, #8]
 801e69a:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801e69e:	0e3a      	lsrs	r2, r7, #24
 801e6a0:	d03a      	beq.n	801e718 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e6a2:	2aff      	cmp	r2, #255	; 0xff
 801e6a4:	b2d6      	uxtb	r6, r2
 801e6a6:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801e6aa:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801e6ae:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801e6b2:	b2ff      	uxtb	r7, r7
 801e6b4:	d037      	beq.n	801e726 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801e6b6:	fa1f f986 	uxth.w	r9, r6
 801e6ba:	4462      	add	r2, ip
 801e6bc:	43f6      	mvns	r6, r6
 801e6be:	f815 8002 	ldrb.w	r8, [r5, r2]
 801e6c2:	fb17 f709 	smulbb	r7, r7, r9
 801e6c6:	fb1a fa09 	smulbb	sl, sl, r9
 801e6ca:	b2f6      	uxtb	r6, r6
 801e6cc:	fb1b f909 	smulbb	r9, fp, r9
 801e6d0:	fb08 7706 	mla	r7, r8, r6, r7
 801e6d4:	b2bf      	uxth	r7, r7
 801e6d6:	f107 0801 	add.w	r8, r7, #1
 801e6da:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801e6de:	123f      	asrs	r7, r7, #8
 801e6e0:	54af      	strb	r7, [r5, r2]
 801e6e2:	442a      	add	r2, r5
 801e6e4:	7857      	ldrb	r7, [r2, #1]
 801e6e6:	fb07 aa06 	mla	sl, r7, r6, sl
 801e6ea:	fa1f fa8a 	uxth.w	sl, sl
 801e6ee:	f10a 0701 	add.w	r7, sl, #1
 801e6f2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e6f6:	7897      	ldrb	r7, [r2, #2]
 801e6f8:	fb07 9906 	mla	r9, r7, r6, r9
 801e6fc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e700:	fa1f f989 	uxth.w	r9, r9
 801e704:	f882 a001 	strb.w	sl, [r2, #1]
 801e708:	f109 0601 	add.w	r6, r9, #1
 801e70c:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801e710:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e714:	f882 9002 	strb.w	r9, [r2, #2]
 801e718:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e71a:	f10c 0c01 	add.w	ip, ip, #1
 801e71e:	4414      	add	r4, r2
 801e720:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e722:	4410      	add	r0, r2
 801e724:	e76b      	b.n	801e5fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801e726:	4462      	add	r2, ip
 801e728:	54af      	strb	r7, [r5, r2]
 801e72a:	442a      	add	r2, r5
 801e72c:	f882 a001 	strb.w	sl, [r2, #1]
 801e730:	f882 b002 	strb.w	fp, [r2, #2]
 801e734:	e7f0      	b.n	801e718 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e736:	f806 7c03 	strb.w	r7, [r6, #-3]
 801e73a:	f806 9c02 	strb.w	r9, [r6, #-2]
 801e73e:	f806 bc01 	strb.w	fp, [r6, #-1]
 801e742:	e752      	b.n	801e5ea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801e744:	b005      	add	sp, #20
 801e746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e74c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e750:	b087      	sub	sp, #28
 801e752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e756:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e758:	9204      	str	r2, [sp, #16]
 801e75a:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801e75e:	6860      	ldr	r0, [r4, #4]
 801e760:	9205      	str	r2, [sp, #20]
 801e762:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801e766:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801e76a:	9101      	str	r1, [sp, #4]
 801e76c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801e770:	fb00 2505 	mla	r5, r0, r5, r2
 801e774:	6822      	ldr	r2, [r4, #0]
 801e776:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e77a:	4415      	add	r5, r2
 801e77c:	f10e 0201 	add.w	r2, lr, #1
 801e780:	f022 0201 	bic.w	r2, r2, #1
 801e784:	9202      	str	r2, [sp, #8]
 801e786:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e788:	6812      	ldr	r2, [r2, #0]
 801e78a:	9203      	str	r2, [sp, #12]
 801e78c:	9a01      	ldr	r2, [sp, #4]
 801e78e:	2a00      	cmp	r2, #0
 801e790:	dc03      	bgt.n	801e79a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801e792:	9a04      	ldr	r2, [sp, #16]
 801e794:	2a00      	cmp	r2, #0
 801e796:	f340 8132 	ble.w	801e9fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801e79a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e79c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e7a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e7a2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e7a6:	2b00      	cmp	r3, #0
 801e7a8:	dd0e      	ble.n	801e7c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801e7aa:	1422      	asrs	r2, r4, #16
 801e7ac:	d405      	bmi.n	801e7ba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e7ae:	4596      	cmp	lr, r2
 801e7b0:	dd03      	ble.n	801e7ba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e7b2:	1402      	asrs	r2, r0, #16
 801e7b4:	d401      	bmi.n	801e7ba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e7b6:	4542      	cmp	r2, r8
 801e7b8:	db07      	blt.n	801e7ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801e7ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e7bc:	3b01      	subs	r3, #1
 801e7be:	3503      	adds	r5, #3
 801e7c0:	4414      	add	r4, r2
 801e7c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e7c4:	4410      	add	r0, r2
 801e7c6:	e7ee      	b.n	801e7a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801e7c8:	d010      	beq.n	801e7ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801e7ca:	1e5a      	subs	r2, r3, #1
 801e7cc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e7ce:	fb06 4602 	mla	r6, r6, r2, r4
 801e7d2:	1436      	asrs	r6, r6, #16
 801e7d4:	d546      	bpl.n	801e864 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801e7d6:	4699      	mov	r9, r3
 801e7d8:	462e      	mov	r6, r5
 801e7da:	f1b9 0f00 	cmp.w	r9, #0
 801e7de:	f300 80ac 	bgt.w	801e93a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801e7e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e7e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e7ea:	441d      	add	r5, r3
 801e7ec:	9b01      	ldr	r3, [sp, #4]
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	f340 8105 	ble.w	801e9fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801e7f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e7f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e7fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e7fe:	eeb0 6a62 	vmov.f32	s12, s5
 801e802:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e806:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e80a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e80e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e812:	eeb0 6a43 	vmov.f32	s12, s6
 801e816:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e81a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e81e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e822:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e826:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e82a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e82e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e832:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e836:	ee12 2a90 	vmov	r2, s5
 801e83a:	eef0 2a47 	vmov.f32	s5, s14
 801e83e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e842:	ee13 2a10 	vmov	r2, s6
 801e846:	9313      	str	r3, [sp, #76]	; 0x4c
 801e848:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e84a:	eeb0 3a67 	vmov.f32	s6, s15
 801e84e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e852:	9314      	str	r3, [sp, #80]	; 0x50
 801e854:	9b01      	ldr	r3, [sp, #4]
 801e856:	9a04      	ldr	r2, [sp, #16]
 801e858:	3b01      	subs	r3, #1
 801e85a:	9301      	str	r3, [sp, #4]
 801e85c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e85e:	bf08      	it	eq
 801e860:	4613      	moveq	r3, r2
 801e862:	e793      	b.n	801e78c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801e864:	45b6      	cmp	lr, r6
 801e866:	ddb6      	ble.n	801e7d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801e868:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e86a:	fb06 0202 	mla	r2, r6, r2, r0
 801e86e:	1412      	asrs	r2, r2, #16
 801e870:	d4b1      	bmi.n	801e7d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801e872:	4542      	cmp	r2, r8
 801e874:	daaf      	bge.n	801e7d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801e876:	1cee      	adds	r6, r5, #3
 801e878:	4699      	mov	r9, r3
 801e87a:	f1b9 0f00 	cmp.w	r9, #0
 801e87e:	ddb0      	ble.n	801e7e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801e880:	1422      	asrs	r2, r4, #16
 801e882:	9902      	ldr	r1, [sp, #8]
 801e884:	1407      	asrs	r7, r0, #16
 801e886:	fb01 2707 	mla	r7, r1, r7, r2
 801e88a:	9903      	ldr	r1, [sp, #12]
 801e88c:	087a      	lsrs	r2, r7, #1
 801e88e:	5c8a      	ldrb	r2, [r1, r2]
 801e890:	07f9      	lsls	r1, r7, #31
 801e892:	bf54      	ite	pl
 801e894:	f002 020f 	andpl.w	r2, r2, #15
 801e898:	1112      	asrmi	r2, r2, #4
 801e89a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e89e:	b2d2      	uxtb	r2, r2
 801e8a0:	2a00      	cmp	r2, #0
 801e8a2:	d042      	beq.n	801e92a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801e8a4:	4957      	ldr	r1, [pc, #348]	; (801ea04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801e8a6:	680f      	ldr	r7, [r1, #0]
 801e8a8:	9905      	ldr	r1, [sp, #20]
 801e8aa:	fa5f fb87 	uxtb.w	fp, r7
 801e8ae:	434a      	muls	r2, r1
 801e8b0:	f102 0c01 	add.w	ip, r2, #1
 801e8b4:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801e8b8:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801e8bc:	1212      	asrs	r2, r2, #8
 801e8be:	fa1f fa82 	uxth.w	sl, r2
 801e8c2:	43d2      	mvns	r2, r2
 801e8c4:	fb1b fb0a 	smulbb	fp, fp, sl
 801e8c8:	b2d2      	uxtb	r2, r2
 801e8ca:	fb0c bc02 	mla	ip, ip, r2, fp
 801e8ce:	fa1f fc8c 	uxth.w	ip, ip
 801e8d2:	f10c 0b01 	add.w	fp, ip, #1
 801e8d6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e8da:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e8de:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e8e2:	fb1b fb0a 	smulbb	fp, fp, sl
 801e8e6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e8ea:	fb17 fa0a 	smulbb	sl, r7, sl
 801e8ee:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801e8f2:	f806 cc03 	strb.w	ip, [r6, #-3]
 801e8f6:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801e8fa:	fb07 aa02 	mla	sl, r7, r2, sl
 801e8fe:	fb0c bc02 	mla	ip, ip, r2, fp
 801e902:	fa1f fa8a 	uxth.w	sl, sl
 801e906:	fa1f fc8c 	uxth.w	ip, ip
 801e90a:	f10a 0701 	add.w	r7, sl, #1
 801e90e:	f10c 0b01 	add.w	fp, ip, #1
 801e912:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e916:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e91a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e91e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e922:	f806 ac01 	strb.w	sl, [r6, #-1]
 801e926:	f806 cc02 	strb.w	ip, [r6, #-2]
 801e92a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e92c:	3603      	adds	r6, #3
 801e92e:	f109 39ff 	add.w	r9, r9, #4294967295
 801e932:	4414      	add	r4, r2
 801e934:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e936:	4410      	add	r0, r2
 801e938:	e79f      	b.n	801e87a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801e93a:	1422      	asrs	r2, r4, #16
 801e93c:	d457      	bmi.n	801e9ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e93e:	4596      	cmp	lr, r2
 801e940:	dd55      	ble.n	801e9ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e942:	1407      	asrs	r7, r0, #16
 801e944:	d453      	bmi.n	801e9ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e946:	4547      	cmp	r7, r8
 801e948:	da51      	bge.n	801e9ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e94a:	9902      	ldr	r1, [sp, #8]
 801e94c:	fb07 2701 	mla	r7, r7, r1, r2
 801e950:	9903      	ldr	r1, [sp, #12]
 801e952:	087a      	lsrs	r2, r7, #1
 801e954:	07ff      	lsls	r7, r7, #31
 801e956:	5c8a      	ldrb	r2, [r1, r2]
 801e958:	bf54      	ite	pl
 801e95a:	f002 020f 	andpl.w	r2, r2, #15
 801e95e:	1112      	asrmi	r2, r2, #4
 801e960:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e964:	b2d2      	uxtb	r2, r2
 801e966:	2a00      	cmp	r2, #0
 801e968:	d041      	beq.n	801e9ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e96a:	4926      	ldr	r1, [pc, #152]	; (801ea04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801e96c:	680f      	ldr	r7, [r1, #0]
 801e96e:	9905      	ldr	r1, [sp, #20]
 801e970:	fa5f fb87 	uxtb.w	fp, r7
 801e974:	434a      	muls	r2, r1
 801e976:	f102 0c01 	add.w	ip, r2, #1
 801e97a:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801e97e:	f896 c000 	ldrb.w	ip, [r6]
 801e982:	1212      	asrs	r2, r2, #8
 801e984:	fa1f fa82 	uxth.w	sl, r2
 801e988:	43d2      	mvns	r2, r2
 801e98a:	fb1b fb0a 	smulbb	fp, fp, sl
 801e98e:	b2d2      	uxtb	r2, r2
 801e990:	fb0c bc02 	mla	ip, ip, r2, fp
 801e994:	fa1f fc8c 	uxth.w	ip, ip
 801e998:	f10c 0b01 	add.w	fp, ip, #1
 801e99c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e9a0:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e9a4:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e9a8:	fb1b fb0a 	smulbb	fp, fp, sl
 801e9ac:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e9b0:	fb17 fa0a 	smulbb	sl, r7, sl
 801e9b4:	78b7      	ldrb	r7, [r6, #2]
 801e9b6:	f886 c000 	strb.w	ip, [r6]
 801e9ba:	f896 c001 	ldrb.w	ip, [r6, #1]
 801e9be:	fb07 aa02 	mla	sl, r7, r2, sl
 801e9c2:	fb0c bc02 	mla	ip, ip, r2, fp
 801e9c6:	fa1f fa8a 	uxth.w	sl, sl
 801e9ca:	fa1f fc8c 	uxth.w	ip, ip
 801e9ce:	f10a 0701 	add.w	r7, sl, #1
 801e9d2:	f10c 0b01 	add.w	fp, ip, #1
 801e9d6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e9da:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e9de:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e9e2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e9e6:	f886 a002 	strb.w	sl, [r6, #2]
 801e9ea:	f886 c001 	strb.w	ip, [r6, #1]
 801e9ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e9f0:	3603      	adds	r6, #3
 801e9f2:	f109 39ff 	add.w	r9, r9, #4294967295
 801e9f6:	4414      	add	r4, r2
 801e9f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e9fa:	4410      	add	r0, r2
 801e9fc:	e6ed      	b.n	801e7da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801e9fe:	b007      	add	sp, #28
 801ea00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea04:	2000b3fc 	.word	0x2000b3fc

0801ea08 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ea08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea0c:	b087      	sub	sp, #28
 801ea0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ea12:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ea14:	9205      	str	r2, [sp, #20]
 801ea16:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801ea1a:	6860      	ldr	r0, [r4, #4]
 801ea1c:	9202      	str	r2, [sp, #8]
 801ea1e:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801ea22:	9101      	str	r1, [sp, #4]
 801ea24:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801ea28:	fb00 2606 	mla	r6, r0, r6, r2
 801ea2c:	6822      	ldr	r2, [r4, #0]
 801ea2e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ea32:	4416      	add	r6, r2
 801ea34:	f108 0201 	add.w	r2, r8, #1
 801ea38:	f022 0201 	bic.w	r2, r2, #1
 801ea3c:	9203      	str	r2, [sp, #12]
 801ea3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ea40:	6812      	ldr	r2, [r2, #0]
 801ea42:	9204      	str	r2, [sp, #16]
 801ea44:	9a01      	ldr	r2, [sp, #4]
 801ea46:	2a00      	cmp	r2, #0
 801ea48:	dc03      	bgt.n	801ea52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801ea4a:	9a05      	ldr	r2, [sp, #20]
 801ea4c:	2a00      	cmp	r2, #0
 801ea4e:	f340 813a 	ble.w	801ecc6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801ea52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ea54:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801ea58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ea5a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ea5e:	2b00      	cmp	r3, #0
 801ea60:	dd0f      	ble.n	801ea82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801ea62:	142a      	asrs	r2, r5, #16
 801ea64:	d406      	bmi.n	801ea74 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801ea66:	4590      	cmp	r8, r2
 801ea68:	dd04      	ble.n	801ea74 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801ea6a:	1422      	asrs	r2, r4, #16
 801ea6c:	d402      	bmi.n	801ea74 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801ea6e:	9802      	ldr	r0, [sp, #8]
 801ea70:	4282      	cmp	r2, r0
 801ea72:	db07      	blt.n	801ea84 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801ea74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ea76:	3b01      	subs	r3, #1
 801ea78:	3603      	adds	r6, #3
 801ea7a:	4415      	add	r5, r2
 801ea7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ea7e:	4414      	add	r4, r2
 801ea80:	e7ed      	b.n	801ea5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801ea82:	d073      	beq.n	801eb6c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801ea84:	1e5a      	subs	r2, r3, #1
 801ea86:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ea88:	fb00 5002 	mla	r0, r0, r2, r5
 801ea8c:	1400      	asrs	r0, r0, #16
 801ea8e:	d464      	bmi.n	801eb5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801ea90:	4580      	cmp	r8, r0
 801ea92:	dd62      	ble.n	801eb5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801ea94:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ea96:	fb00 4202 	mla	r2, r0, r2, r4
 801ea9a:	1412      	asrs	r2, r2, #16
 801ea9c:	d45d      	bmi.n	801eb5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801ea9e:	9802      	ldr	r0, [sp, #8]
 801eaa0:	4282      	cmp	r2, r0
 801eaa2:	da5a      	bge.n	801eb5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801eaa4:	1cf0      	adds	r0, r6, #3
 801eaa6:	469a      	mov	sl, r3
 801eaa8:	f1ba 0f00 	cmp.w	sl, #0
 801eaac:	dd59      	ble.n	801eb62 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801eaae:	142a      	asrs	r2, r5, #16
 801eab0:	9903      	ldr	r1, [sp, #12]
 801eab2:	1427      	asrs	r7, r4, #16
 801eab4:	fb01 2707 	mla	r7, r1, r7, r2
 801eab8:	9904      	ldr	r1, [sp, #16]
 801eaba:	087a      	lsrs	r2, r7, #1
 801eabc:	5c8a      	ldrb	r2, [r1, r2]
 801eabe:	07f9      	lsls	r1, r7, #31
 801eac0:	bf54      	ite	pl
 801eac2:	f002 020f 	andpl.w	r2, r2, #15
 801eac6:	1112      	asrmi	r2, r2, #4
 801eac8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801eacc:	b2d2      	uxtb	r2, r2
 801eace:	2a00      	cmp	r2, #0
 801ead0:	d03b      	beq.n	801eb4a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801ead2:	497e      	ldr	r1, [pc, #504]	; (801eccc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801ead4:	2aff      	cmp	r2, #255	; 0xff
 801ead6:	680f      	ldr	r7, [r1, #0]
 801ead8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801eadc:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801eae0:	b2ff      	uxtb	r7, r7
 801eae2:	f000 80e9 	beq.w	801ecb8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801eae6:	fa1f fe82 	uxth.w	lr, r2
 801eaea:	43d2      	mvns	r2, r2
 801eaec:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801eaf0:	fb17 f70e 	smulbb	r7, r7, lr
 801eaf4:	b2d2      	uxtb	r2, r2
 801eaf6:	fb19 f90e 	smulbb	r9, r9, lr
 801eafa:	fb0c 7702 	mla	r7, ip, r2, r7
 801eafe:	fb1b fe0e 	smulbb	lr, fp, lr
 801eb02:	b2bf      	uxth	r7, r7
 801eb04:	f107 0c01 	add.w	ip, r7, #1
 801eb08:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801eb0c:	123f      	asrs	r7, r7, #8
 801eb0e:	f800 7c03 	strb.w	r7, [r0, #-3]
 801eb12:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801eb16:	fb07 9902 	mla	r9, r7, r2, r9
 801eb1a:	fa1f f989 	uxth.w	r9, r9
 801eb1e:	f109 0701 	add.w	r7, r9, #1
 801eb22:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801eb26:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801eb2a:	fb07 ee02 	mla	lr, r7, r2, lr
 801eb2e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eb32:	fa1f fe8e 	uxth.w	lr, lr
 801eb36:	f800 9c02 	strb.w	r9, [r0, #-2]
 801eb3a:	f10e 0201 	add.w	r2, lr, #1
 801eb3e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801eb42:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801eb46:	f800 ec01 	strb.w	lr, [r0, #-1]
 801eb4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801eb4c:	3003      	adds	r0, #3
 801eb4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eb52:	4415      	add	r5, r2
 801eb54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eb56:	4414      	add	r4, r2
 801eb58:	e7a6      	b.n	801eaa8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801eb5a:	2700      	movs	r7, #0
 801eb5c:	1bda      	subs	r2, r3, r7
 801eb5e:	2a00      	cmp	r2, #0
 801eb60:	dc40      	bgt.n	801ebe4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801eb62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb6a:	441e      	add	r6, r3
 801eb6c:	9b01      	ldr	r3, [sp, #4]
 801eb6e:	2b00      	cmp	r3, #0
 801eb70:	f340 80a9 	ble.w	801ecc6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801eb74:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eb7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb7e:	eeb0 6a62 	vmov.f32	s12, s5
 801eb82:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eb86:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb8e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801eb92:	eeb0 6a43 	vmov.f32	s12, s6
 801eb96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb9a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801eb9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eba2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eba6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ebaa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ebae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ebb2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ebb6:	ee12 2a90 	vmov	r2, s5
 801ebba:	eef0 2a47 	vmov.f32	s5, s14
 801ebbe:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebc2:	ee13 2a10 	vmov	r2, s6
 801ebc6:	9313      	str	r3, [sp, #76]	; 0x4c
 801ebc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ebca:	eeb0 3a67 	vmov.f32	s6, s15
 801ebce:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebd2:	9314      	str	r3, [sp, #80]	; 0x50
 801ebd4:	9b01      	ldr	r3, [sp, #4]
 801ebd6:	9a05      	ldr	r2, [sp, #20]
 801ebd8:	3b01      	subs	r3, #1
 801ebda:	9301      	str	r3, [sp, #4]
 801ebdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ebde:	bf08      	it	eq
 801ebe0:	4613      	moveq	r3, r2
 801ebe2:	e72f      	b.n	801ea44 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801ebe4:	142a      	asrs	r2, r5, #16
 801ebe6:	d458      	bmi.n	801ec9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ebe8:	4590      	cmp	r8, r2
 801ebea:	dd56      	ble.n	801ec9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ebec:	1420      	asrs	r0, r4, #16
 801ebee:	d454      	bmi.n	801ec9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ebf0:	9902      	ldr	r1, [sp, #8]
 801ebf2:	4288      	cmp	r0, r1
 801ebf4:	da51      	bge.n	801ec9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ebf6:	9903      	ldr	r1, [sp, #12]
 801ebf8:	fb00 2001 	mla	r0, r0, r1, r2
 801ebfc:	9904      	ldr	r1, [sp, #16]
 801ebfe:	0842      	lsrs	r2, r0, #1
 801ec00:	07c0      	lsls	r0, r0, #31
 801ec02:	5c8a      	ldrb	r2, [r1, r2]
 801ec04:	bf54      	ite	pl
 801ec06:	f002 020f 	andpl.w	r2, r2, #15
 801ec0a:	1112      	asrmi	r2, r2, #4
 801ec0c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ec10:	b2d2      	uxtb	r2, r2
 801ec12:	2a00      	cmp	r2, #0
 801ec14:	d041      	beq.n	801ec9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ec16:	492d      	ldr	r1, [pc, #180]	; (801eccc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801ec18:	2aff      	cmp	r2, #255	; 0xff
 801ec1a:	6808      	ldr	r0, [r1, #0]
 801ec1c:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801ec20:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ec24:	fa5f fc80 	uxtb.w	ip, r0
 801ec28:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801ec2c:	d03b      	beq.n	801eca6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801ec2e:	fa1f f982 	uxth.w	r9, r2
 801ec32:	4438      	add	r0, r7
 801ec34:	43d2      	mvns	r2, r2
 801ec36:	f816 e000 	ldrb.w	lr, [r6, r0]
 801ec3a:	fb1c fc09 	smulbb	ip, ip, r9
 801ec3e:	fb1a fa09 	smulbb	sl, sl, r9
 801ec42:	b2d2      	uxtb	r2, r2
 801ec44:	fb1b f909 	smulbb	r9, fp, r9
 801ec48:	fb0e cc02 	mla	ip, lr, r2, ip
 801ec4c:	fa1f fc8c 	uxth.w	ip, ip
 801ec50:	f10c 0e01 	add.w	lr, ip, #1
 801ec54:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801ec58:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ec5c:	f806 c000 	strb.w	ip, [r6, r0]
 801ec60:	4430      	add	r0, r6
 801ec62:	f890 c001 	ldrb.w	ip, [r0, #1]
 801ec66:	fb0c aa02 	mla	sl, ip, r2, sl
 801ec6a:	fa1f fa8a 	uxth.w	sl, sl
 801ec6e:	f10a 0c01 	add.w	ip, sl, #1
 801ec72:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ec76:	f890 c002 	ldrb.w	ip, [r0, #2]
 801ec7a:	fb0c 9902 	mla	r9, ip, r2, r9
 801ec7e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ec82:	fa1f f989 	uxth.w	r9, r9
 801ec86:	f880 a001 	strb.w	sl, [r0, #1]
 801ec8a:	f109 0201 	add.w	r2, r9, #1
 801ec8e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801ec92:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ec96:	f880 9002 	strb.w	r9, [r0, #2]
 801ec9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ec9c:	3701      	adds	r7, #1
 801ec9e:	4415      	add	r5, r2
 801eca0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eca2:	4414      	add	r4, r2
 801eca4:	e75a      	b.n	801eb5c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801eca6:	4438      	add	r0, r7
 801eca8:	f806 c000 	strb.w	ip, [r6, r0]
 801ecac:	4430      	add	r0, r6
 801ecae:	f880 a001 	strb.w	sl, [r0, #1]
 801ecb2:	f880 b002 	strb.w	fp, [r0, #2]
 801ecb6:	e7f0      	b.n	801ec9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ecb8:	f800 7c03 	strb.w	r7, [r0, #-3]
 801ecbc:	f800 9c02 	strb.w	r9, [r0, #-2]
 801ecc0:	f800 bc01 	strb.w	fp, [r0, #-1]
 801ecc4:	e741      	b.n	801eb4a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801ecc6:	b007      	add	sp, #28
 801ecc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eccc:	2000b3fc 	.word	0x2000b3fc

0801ecd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801ecd0:	4770      	bx	lr

0801ecd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801ecd2:	4770      	bx	lr

0801ecd4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801ecd4:	4770      	bx	lr

0801ecd6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801ecd6:	4770      	bx	lr

0801ecd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ecd8:	4770      	bx	lr

0801ecda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ecda:	4770      	bx	lr

0801ecdc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801ecdc:	4770      	bx	lr

0801ecde <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ecde:	4770      	bx	lr

0801ece0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ece0:	4770      	bx	lr

0801ece2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801ece2:	4770      	bx	lr

0801ece4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ece4:	4770      	bx	lr

0801ece6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801ece6:	4770      	bx	lr

0801ece8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ece8:	4770      	bx	lr

0801ecea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ecea:	4770      	bx	lr

0801ecec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801ecec:	4770      	bx	lr

0801ecee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ecee:	4770      	bx	lr

0801ecf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ecf0:	4770      	bx	lr

0801ecf2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801ecf2:	4770      	bx	lr

0801ecf4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ecf4:	4770      	bx	lr

0801ecf6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801ecf6:	4770      	bx	lr

0801ecf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ecf8:	2bff      	cmp	r3, #255	; 0xff
 801ecfa:	b508      	push	{r3, lr}
 801ecfc:	d04f      	beq.n	801ed9e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801ecfe:	2a2c      	cmp	r2, #44	; 0x2c
 801ed00:	d032      	beq.n	801ed68 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801ed02:	d80f      	bhi.n	801ed24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801ed04:	2a08      	cmp	r2, #8
 801ed06:	d046      	beq.n	801ed96 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ed08:	d805      	bhi.n	801ed16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801ed0a:	2a04      	cmp	r2, #4
 801ed0c:	d041      	beq.n	801ed92 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ed0e:	2a05      	cmp	r2, #5
 801ed10:	d03d      	beq.n	801ed8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801ed12:	2000      	movs	r0, #0
 801ed14:	e027      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed16:	2a0a      	cmp	r2, #10
 801ed18:	d03d      	beq.n	801ed96 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ed1a:	d301      	bcc.n	801ed20 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801ed1c:	2a0b      	cmp	r2, #11
 801ed1e:	d1f8      	bne.n	801ed12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ed20:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801ed22:	e020      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed24:	2a30      	cmp	r2, #48	; 0x30
 801ed26:	d038      	beq.n	801ed9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ed28:	d808      	bhi.n	801ed3c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801ed2a:	2a2e      	cmp	r2, #46	; 0x2e
 801ed2c:	684b      	ldr	r3, [r1, #4]
 801ed2e:	d029      	beq.n	801ed84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801ed30:	d90b      	bls.n	801ed4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801ed32:	781b      	ldrb	r3, [r3, #0]
 801ed34:	2b00      	cmp	r3, #0
 801ed36:	d1ec      	bne.n	801ed12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ed38:	6a00      	ldr	r0, [r0, #32]
 801ed3a:	e014      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed3c:	2a32      	cmp	r2, #50	; 0x32
 801ed3e:	d02c      	beq.n	801ed9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ed40:	d301      	bcc.n	801ed46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801ed42:	2a33      	cmp	r2, #51	; 0x33
 801ed44:	d1e5      	bne.n	801ed12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ed46:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801ed48:	e00d      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed4a:	781b      	ldrb	r3, [r3, #0]
 801ed4c:	2b01      	cmp	r3, #1
 801ed4e:	d009      	beq.n	801ed64 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801ed50:	d3f2      	bcc.n	801ed38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801ed52:	2b02      	cmp	r3, #2
 801ed54:	d1dd      	bne.n	801ed12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ed56:	4b39      	ldr	r3, [pc, #228]	; (801ee3c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ed58:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 801ed5c:	4a38      	ldr	r2, [pc, #224]	; (801ee40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ed5e:	4839      	ldr	r0, [pc, #228]	; (801ee44 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801ed60:	f008 f874 	bl	8026e4c <__assert_func>
 801ed64:	6900      	ldr	r0, [r0, #16]
 801ed66:	bd08      	pop	{r3, pc}
 801ed68:	684b      	ldr	r3, [r1, #4]
 801ed6a:	781b      	ldrb	r3, [r3, #0]
 801ed6c:	2b01      	cmp	r3, #1
 801ed6e:	d007      	beq.n	801ed80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801ed70:	d30b      	bcc.n	801ed8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801ed72:	2b02      	cmp	r3, #2
 801ed74:	d1cd      	bne.n	801ed12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ed76:	4b31      	ldr	r3, [pc, #196]	; (801ee3c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ed78:	f44f 6181 	mov.w	r1, #1032	; 0x408
 801ed7c:	4a30      	ldr	r2, [pc, #192]	; (801ee40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ed7e:	e7ee      	b.n	801ed5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ed80:	6880      	ldr	r0, [r0, #8]
 801ed82:	e7f0      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed84:	781b      	ldrb	r3, [r3, #0]
 801ed86:	2b00      	cmp	r3, #0
 801ed88:	d1c3      	bne.n	801ed12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ed8a:	6980      	ldr	r0, [r0, #24]
 801ed8c:	e7eb      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed8e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801ed90:	e7e9      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed92:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801ed94:	e7e7      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed96:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801ed98:	e7e5      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed9a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801ed9c:	e7e3      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed9e:	2a2c      	cmp	r2, #44	; 0x2c
 801eda0:	d030      	beq.n	801ee04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801eda2:	d80f      	bhi.n	801edc4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801eda4:	2a08      	cmp	r2, #8
 801eda6:	d044      	beq.n	801ee32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801eda8:	d805      	bhi.n	801edb6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801edaa:	2a04      	cmp	r2, #4
 801edac:	d03f      	beq.n	801ee2e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801edae:	2a05      	cmp	r2, #5
 801edb0:	d1af      	bne.n	801ed12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801edb2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801edb4:	e7d7      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801edb6:	2a0a      	cmp	r2, #10
 801edb8:	d03b      	beq.n	801ee32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801edba:	d301      	bcc.n	801edc0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801edbc:	2a0b      	cmp	r2, #11
 801edbe:	d1a8      	bne.n	801ed12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801edc0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801edc2:	e7d0      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801edc4:	2a30      	cmp	r2, #48	; 0x30
 801edc6:	d036      	beq.n	801ee36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801edc8:	d808      	bhi.n	801eddc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801edca:	2a2e      	cmp	r2, #46	; 0x2e
 801edcc:	684b      	ldr	r3, [r1, #4]
 801edce:	d028      	beq.n	801ee22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801edd0:	d90b      	bls.n	801edea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801edd2:	781b      	ldrb	r3, [r3, #0]
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	d19c      	bne.n	801ed12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801edd8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801edda:	e7c4      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801eddc:	2a32      	cmp	r2, #50	; 0x32
 801edde:	d02a      	beq.n	801ee36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ede0:	d301      	bcc.n	801ede6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801ede2:	2a33      	cmp	r2, #51	; 0x33
 801ede4:	d195      	bne.n	801ed12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ede6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801ede8:	e7bd      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801edea:	781b      	ldrb	r3, [r3, #0]
 801edec:	2b01      	cmp	r3, #1
 801edee:	d007      	beq.n	801ee00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801edf0:	d3f2      	bcc.n	801edd8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801edf2:	2b02      	cmp	r3, #2
 801edf4:	d18d      	bne.n	801ed12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801edf6:	4b11      	ldr	r3, [pc, #68]	; (801ee3c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801edf8:	f240 4139 	movw	r1, #1081	; 0x439
 801edfc:	4a10      	ldr	r2, [pc, #64]	; (801ee40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801edfe:	e7ae      	b.n	801ed5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ee00:	6940      	ldr	r0, [r0, #20]
 801ee02:	e7b0      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ee04:	684b      	ldr	r3, [r1, #4]
 801ee06:	781b      	ldrb	r3, [r3, #0]
 801ee08:	2b01      	cmp	r3, #1
 801ee0a:	d008      	beq.n	801ee1e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801ee0c:	d30d      	bcc.n	801ee2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801ee0e:	2b02      	cmp	r3, #2
 801ee10:	f47f af7f 	bne.w	801ed12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ee14:	4b09      	ldr	r3, [pc, #36]	; (801ee3c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ee16:	f240 4145 	movw	r1, #1093	; 0x445
 801ee1a:	4a09      	ldr	r2, [pc, #36]	; (801ee40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ee1c:	e79f      	b.n	801ed5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ee1e:	68c0      	ldr	r0, [r0, #12]
 801ee20:	e7a1      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ee22:	781b      	ldrb	r3, [r3, #0]
 801ee24:	2b00      	cmp	r3, #0
 801ee26:	f47f af74 	bne.w	801ed12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ee2a:	69c0      	ldr	r0, [r0, #28]
 801ee2c:	e79b      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ee2e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801ee30:	e799      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ee32:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801ee34:	e797      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ee36:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801ee38:	e795      	b.n	801ed66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ee3a:	bf00      	nop
 801ee3c:	0802bfdf 	.word	0x0802bfdf
 801ee40:	0802c78f 	.word	0x0802c78f
 801ee44:	0802c02b 	.word	0x0802c02b

0801ee48 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801ee48:	b508      	push	{r3, lr}
 801ee4a:	4b06      	ldr	r3, [pc, #24]	; (801ee64 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801ee4c:	8818      	ldrh	r0, [r3, #0]
 801ee4e:	b928      	cbnz	r0, 801ee5c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801ee50:	4b05      	ldr	r3, [pc, #20]	; (801ee68 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801ee52:	2155      	movs	r1, #85	; 0x55
 801ee54:	4a05      	ldr	r2, [pc, #20]	; (801ee6c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801ee56:	4806      	ldr	r0, [pc, #24]	; (801ee70 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801ee58:	f007 fff8 	bl	8026e4c <__assert_func>
 801ee5c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ee60:	b280      	uxth	r0, r0
 801ee62:	bd08      	pop	{r3, pc}
 801ee64:	2000b3ce 	.word	0x2000b3ce
 801ee68:	0802c278 	.word	0x0802c278
 801ee6c:	0802c754 	.word	0x0802c754
 801ee70:	0802c2ba 	.word	0x0802c2ba

0801ee74 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801ee74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee78:	4616      	mov	r6, r2
 801ee7a:	b087      	sub	sp, #28
 801ee7c:	461f      	mov	r7, r3
 801ee7e:	b34b      	cbz	r3, 801eed4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801ee80:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801ee84:	2b00      	cmp	r3, #0
 801ee86:	dd25      	ble.n	801eed4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801ee88:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801ee8c:	2b00      	cmp	r3, #0
 801ee8e:	dd21      	ble.n	801eed4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801ee90:	6808      	ldr	r0, [r1, #0]
 801ee92:	ab04      	add	r3, sp, #16
 801ee94:	6849      	ldr	r1, [r1, #4]
 801ee96:	4c5a      	ldr	r4, [pc, #360]	; (801f000 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801ee98:	c303      	stmia	r3!, {r0, r1}
 801ee9a:	a804      	add	r0, sp, #16
 801ee9c:	f7fb fe68 	bl	801ab70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eea0:	6820      	ldr	r0, [r4, #0]
 801eea2:	6803      	ldr	r3, [r0, #0]
 801eea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eea6:	4798      	blx	r3
 801eea8:	2fff      	cmp	r7, #255	; 0xff
 801eeaa:	4623      	mov	r3, r4
 801eeac:	d015      	beq.n	801eeda <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801eeae:	f010 0f08 	tst.w	r0, #8
 801eeb2:	d015      	beq.n	801eee0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801eeb4:	6818      	ldr	r0, [r3, #0]
 801eeb6:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801eeba:	6801      	ldr	r1, [r0, #0]
 801eebc:	9401      	str	r4, [sp, #4]
 801eebe:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801eec2:	9702      	str	r7, [sp, #8]
 801eec4:	9400      	str	r4, [sp, #0]
 801eec6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801eeca:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801eecc:	4631      	mov	r1, r6
 801eece:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801eed2:	47a0      	blx	r4
 801eed4:	b007      	add	sp, #28
 801eed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eeda:	f010 0f02 	tst.w	r0, #2
 801eede:	e7e8      	b.n	801eeb2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3e>
 801eee0:	6818      	ldr	r0, [r3, #0]
 801eee2:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801eee6:	6803      	ldr	r3, [r0, #0]
 801eee8:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801eeec:	6a1b      	ldr	r3, [r3, #32]
 801eeee:	4798      	blx	r3
 801eef0:	4944      	ldr	r1, [pc, #272]	; (801f004 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>)
 801eef2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801eef6:	2fff      	cmp	r7, #255	; 0xff
 801eef8:	f8b1 c000 	ldrh.w	ip, [r1]
 801eefc:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801ef00:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ef04:	4688      	mov	r8, r1
 801ef06:	fb0c 2303 	mla	r3, ip, r3, r2
 801ef0a:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801ef0e:	b2f2      	uxtb	r2, r6
 801ef10:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801ef14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef18:	4418      	add	r0, r3
 801ef1a:	d112      	bne.n	801ef42 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xce>
 801ef1c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ef20:	2100      	movs	r1, #0
 801ef22:	42a9      	cmp	r1, r5
 801ef24:	da66      	bge.n	801eff4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801ef26:	4603      	mov	r3, r0
 801ef28:	2700      	movs	r7, #0
 801ef2a:	42a7      	cmp	r7, r4
 801ef2c:	f103 0303 	add.w	r3, r3, #3
 801ef30:	da57      	bge.n	801efe2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 801ef32:	f803 2c03 	strb.w	r2, [r3, #-3]
 801ef36:	3701      	adds	r7, #1
 801ef38:	f803 ec02 	strb.w	lr, [r3, #-2]
 801ef3c:	f803 cc01 	strb.w	ip, [r3, #-1]
 801ef40:	e7f3      	b.n	801ef2a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801ef42:	b2bb      	uxth	r3, r7
 801ef44:	f04f 0800 	mov.w	r8, #0
 801ef48:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ef4c:	fb0c fc03 	mul.w	ip, ip, r3
 801ef50:	fb0e fe03 	mul.w	lr, lr, r3
 801ef54:	435a      	muls	r2, r3
 801ef56:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801ef5a:	460f      	mov	r7, r1
 801ef5c:	b29b      	uxth	r3, r3
 801ef5e:	45a8      	cmp	r8, r5
 801ef60:	da48      	bge.n	801eff4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801ef62:	4601      	mov	r1, r0
 801ef64:	f04f 0a00 	mov.w	sl, #0
 801ef68:	45a2      	cmp	sl, r4
 801ef6a:	f101 0103 	add.w	r1, r1, #3
 801ef6e:	da2f      	bge.n	801efd0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>
 801ef70:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801ef74:	f10a 0a01 	add.w	sl, sl, #1
 801ef78:	fb19 f903 	smulbb	r9, r9, r3
 801ef7c:	4491      	add	r9, r2
 801ef7e:	fa1f f989 	uxth.w	r9, r9
 801ef82:	f109 0b01 	add.w	fp, r9, #1
 801ef86:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ef8a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ef8e:	f801 9c03 	strb.w	r9, [r1, #-3]
 801ef92:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801ef96:	fb19 f903 	smulbb	r9, r9, r3
 801ef9a:	44f1      	add	r9, lr
 801ef9c:	fa1f f989 	uxth.w	r9, r9
 801efa0:	f109 0b01 	add.w	fp, r9, #1
 801efa4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801efa8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801efac:	f801 9c02 	strb.w	r9, [r1, #-2]
 801efb0:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801efb4:	fb19 f903 	smulbb	r9, r9, r3
 801efb8:	44e1      	add	r9, ip
 801efba:	fa1f f989 	uxth.w	r9, r9
 801efbe:	f109 0b01 	add.w	fp, r9, #1
 801efc2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801efc6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801efca:	f801 9c01 	strb.w	r9, [r1, #-1]
 801efce:	e7cb      	b.n	801ef68 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf4>
 801efd0:	8839      	ldrh	r1, [r7, #0]
 801efd2:	f108 0801 	add.w	r8, r8, #1
 801efd6:	1b09      	subs	r1, r1, r4
 801efd8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801efdc:	4431      	add	r1, r6
 801efde:	4408      	add	r0, r1
 801efe0:	e7bd      	b.n	801ef5e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xea>
 801efe2:	f8b8 3000 	ldrh.w	r3, [r8]
 801efe6:	3101      	adds	r1, #1
 801efe8:	1b1b      	subs	r3, r3, r4
 801efea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801efee:	4433      	add	r3, r6
 801eff0:	4418      	add	r0, r3
 801eff2:	e796      	b.n	801ef22 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xae>
 801eff4:	4b02      	ldr	r3, [pc, #8]	; (801f000 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801eff6:	6818      	ldr	r0, [r3, #0]
 801eff8:	6803      	ldr	r3, [r0, #0]
 801effa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801effc:	4798      	blx	r3
 801effe:	e769      	b.n	801eed4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801f000:	2000b3d4 	.word	0x2000b3d4
 801f004:	2000b3ce 	.word	0x2000b3ce

0801f008 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801f008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f00c:	b08d      	sub	sp, #52	; 0x34
 801f00e:	460c      	mov	r4, r1
 801f010:	4617      	mov	r7, r2
 801f012:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801f016:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801f01a:	2e00      	cmp	r6, #0
 801f01c:	d04a      	beq.n	801f0b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801f01e:	6810      	ldr	r0, [r2, #0]
 801f020:	ad08      	add	r5, sp, #32
 801f022:	6851      	ldr	r1, [r2, #4]
 801f024:	c503      	stmia	r5!, {r0, r1}
 801f026:	6818      	ldr	r0, [r3, #0]
 801f028:	ad0a      	add	r5, sp, #40	; 0x28
 801f02a:	6859      	ldr	r1, [r3, #4]
 801f02c:	c503      	stmia	r5!, {r0, r1}
 801f02e:	a808      	add	r0, sp, #32
 801f030:	f7fb fd9e 	bl	801ab70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f034:	4639      	mov	r1, r7
 801f036:	a80a      	add	r0, sp, #40	; 0x28
 801f038:	4f59      	ldr	r7, [pc, #356]	; (801f1a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801f03a:	f7fb fd81 	bl	801ab40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f03e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801f042:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801f046:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801f04a:	6838      	ldr	r0, [r7, #0]
 801f04c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f050:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801f054:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801f058:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f05c:	440c      	add	r4, r1
 801f05e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801f062:	440a      	add	r2, r1
 801f064:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801f068:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801f06c:	4413      	add	r3, r2
 801f06e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801f072:	6803      	ldr	r3, [r0, #0]
 801f074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f076:	4798      	blx	r3
 801f078:	2eff      	cmp	r6, #255	; 0xff
 801f07a:	f000 8089 	beq.w	801f190 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801f07e:	0743      	lsls	r3, r0, #29
 801f080:	d405      	bmi.n	801f08e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801f082:	f1b9 0f00 	cmp.w	r9, #0
 801f086:	d018      	beq.n	801f0ba <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801f088:	f010 0f10 	tst.w	r0, #16
 801f08c:	d015      	beq.n	801f0ba <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801f08e:	6838      	ldr	r0, [r7, #0]
 801f090:	b2ad      	uxth	r5, r5
 801f092:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f096:	6801      	ldr	r1, [r0, #0]
 801f098:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f09c:	9500      	str	r5, [sp, #0]
 801f09e:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801f0a2:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801f0a6:	9602      	str	r6, [sp, #8]
 801f0a8:	fa1f f688 	uxth.w	r6, r8
 801f0ac:	9601      	str	r6, [sp, #4]
 801f0ae:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801f0b0:	4621      	mov	r1, r4
 801f0b2:	47a8      	blx	r5
 801f0b4:	b00d      	add	sp, #52	; 0x34
 801f0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0ba:	6838      	ldr	r0, [r7, #0]
 801f0bc:	6803      	ldr	r3, [r0, #0]
 801f0be:	6a1b      	ldr	r3, [r3, #32]
 801f0c0:	4798      	blx	r3
 801f0c2:	4a38      	ldr	r2, [pc, #224]	; (801f1a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801f0c4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801f0c8:	2eff      	cmp	r6, #255	; 0xff
 801f0ca:	8813      	ldrh	r3, [r2, #0]
 801f0cc:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801f0d0:	fb0c 1303 	mla	r3, ip, r3, r1
 801f0d4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801f0d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f0dc:	4418      	add	r0, r3
 801f0de:	d032      	beq.n	801f146 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801f0e0:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801f0e4:	f04f 0c00 	mov.w	ip, #0
 801f0e8:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801f0ec:	9306      	str	r3, [sp, #24]
 801f0ee:	45c4      	cmp	ip, r8
 801f0f0:	da49      	bge.n	801f186 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801f0f2:	4686      	mov	lr, r0
 801f0f4:	46a1      	mov	r9, r4
 801f0f6:	eba9 0304 	sub.w	r3, r9, r4
 801f0fa:	428b      	cmp	r3, r1
 801f0fc:	da13      	bge.n	801f126 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801f0fe:	f819 3b01 	ldrb.w	r3, [r9], #1
 801f102:	f89e b000 	ldrb.w	fp, [lr]
 801f106:	9307      	str	r3, [sp, #28]
 801f108:	9b06      	ldr	r3, [sp, #24]
 801f10a:	fb1b fb03 	smulbb	fp, fp, r3
 801f10e:	9b07      	ldr	r3, [sp, #28]
 801f110:	fb03 b306 	mla	r3, r3, r6, fp
 801f114:	b29b      	uxth	r3, r3
 801f116:	f103 0b01 	add.w	fp, r3, #1
 801f11a:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801f11e:	121b      	asrs	r3, r3, #8
 801f120:	f80e 3b01 	strb.w	r3, [lr], #1
 801f124:	e7e7      	b.n	801f0f6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801f126:	8813      	ldrh	r3, [r2, #0]
 801f128:	f10c 0c01 	add.w	ip, ip, #1
 801f12c:	1b5b      	subs	r3, r3, r5
 801f12e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f132:	4453      	add	r3, sl
 801f134:	4418      	add	r0, r3
 801f136:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801f13a:	1b5b      	subs	r3, r3, r5
 801f13c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f140:	4453      	add	r3, sl
 801f142:	441c      	add	r4, r3
 801f144:	e7d3      	b.n	801f0ee <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801f146:	2600      	movs	r6, #0
 801f148:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801f14c:	4546      	cmp	r6, r8
 801f14e:	da1a      	bge.n	801f186 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801f150:	f100 3eff 	add.w	lr, r0, #4294967295
 801f154:	4623      	mov	r3, r4
 801f156:	eba3 0904 	sub.w	r9, r3, r4
 801f15a:	4589      	cmp	r9, r1
 801f15c:	da04      	bge.n	801f168 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801f15e:	f813 9b01 	ldrb.w	r9, [r3], #1
 801f162:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801f166:	e7f6      	b.n	801f156 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801f168:	8813      	ldrh	r3, [r2, #0]
 801f16a:	3601      	adds	r6, #1
 801f16c:	1b5b      	subs	r3, r3, r5
 801f16e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f172:	4463      	add	r3, ip
 801f174:	4418      	add	r0, r3
 801f176:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801f17a:	1b5b      	subs	r3, r3, r5
 801f17c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f180:	4463      	add	r3, ip
 801f182:	441c      	add	r4, r3
 801f184:	e7e2      	b.n	801f14c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801f186:	6838      	ldr	r0, [r7, #0]
 801f188:	6803      	ldr	r3, [r0, #0]
 801f18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f18c:	4798      	blx	r3
 801f18e:	e791      	b.n	801f0b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801f190:	f1b9 0f00 	cmp.w	r9, #0
 801f194:	f47f af78 	bne.w	801f088 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801f198:	f010 0f01 	tst.w	r0, #1
 801f19c:	e776      	b.n	801f08c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801f19e:	bf00      	nop
 801f1a0:	2000b3d4 	.word	0x2000b3d4
 801f1a4:	2000b3ce 	.word	0x2000b3ce

0801f1a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f1a8:	b510      	push	{r4, lr}
 801f1aa:	4604      	mov	r4, r0
 801f1ac:	2104      	movs	r1, #4
 801f1ae:	f007 fe21 	bl	8026df4 <_ZdlPvj>
 801f1b2:	4620      	mov	r0, r4
 801f1b4:	bd10      	pop	{r4, pc}

0801f1b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f1b6:	b510      	push	{r4, lr}
 801f1b8:	4604      	mov	r4, r0
 801f1ba:	2104      	movs	r1, #4
 801f1bc:	f007 fe1a 	bl	8026df4 <_ZdlPvj>
 801f1c0:	4620      	mov	r0, r4
 801f1c2:	bd10      	pop	{r4, pc}

0801f1c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f1c4:	b510      	push	{r4, lr}
 801f1c6:	4604      	mov	r4, r0
 801f1c8:	2104      	movs	r1, #4
 801f1ca:	f007 fe13 	bl	8026df4 <_ZdlPvj>
 801f1ce:	4620      	mov	r0, r4
 801f1d0:	bd10      	pop	{r4, pc}

0801f1d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f1d2:	b510      	push	{r4, lr}
 801f1d4:	4604      	mov	r4, r0
 801f1d6:	2104      	movs	r1, #4
 801f1d8:	f007 fe0c 	bl	8026df4 <_ZdlPvj>
 801f1dc:	4620      	mov	r0, r4
 801f1de:	bd10      	pop	{r4, pc}

0801f1e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f1e0:	b510      	push	{r4, lr}
 801f1e2:	4604      	mov	r4, r0
 801f1e4:	2104      	movs	r1, #4
 801f1e6:	f007 fe05 	bl	8026df4 <_ZdlPvj>
 801f1ea:	4620      	mov	r0, r4
 801f1ec:	bd10      	pop	{r4, pc}

0801f1ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f1ee:	b510      	push	{r4, lr}
 801f1f0:	4604      	mov	r4, r0
 801f1f2:	2104      	movs	r1, #4
 801f1f4:	f007 fdfe 	bl	8026df4 <_ZdlPvj>
 801f1f8:	4620      	mov	r0, r4
 801f1fa:	bd10      	pop	{r4, pc}

0801f1fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f1fc:	b510      	push	{r4, lr}
 801f1fe:	4604      	mov	r4, r0
 801f200:	2104      	movs	r1, #4
 801f202:	f007 fdf7 	bl	8026df4 <_ZdlPvj>
 801f206:	4620      	mov	r0, r4
 801f208:	bd10      	pop	{r4, pc}

0801f20a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f20a:	b510      	push	{r4, lr}
 801f20c:	4604      	mov	r4, r0
 801f20e:	2104      	movs	r1, #4
 801f210:	f007 fdf0 	bl	8026df4 <_ZdlPvj>
 801f214:	4620      	mov	r0, r4
 801f216:	bd10      	pop	{r4, pc}

0801f218 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f218:	b510      	push	{r4, lr}
 801f21a:	4604      	mov	r4, r0
 801f21c:	2104      	movs	r1, #4
 801f21e:	f007 fde9 	bl	8026df4 <_ZdlPvj>
 801f222:	4620      	mov	r0, r4
 801f224:	bd10      	pop	{r4, pc}

0801f226 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f226:	b510      	push	{r4, lr}
 801f228:	4604      	mov	r4, r0
 801f22a:	2104      	movs	r1, #4
 801f22c:	f007 fde2 	bl	8026df4 <_ZdlPvj>
 801f230:	4620      	mov	r0, r4
 801f232:	bd10      	pop	{r4, pc}

0801f234 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f234:	b510      	push	{r4, lr}
 801f236:	4604      	mov	r4, r0
 801f238:	2104      	movs	r1, #4
 801f23a:	f007 fddb 	bl	8026df4 <_ZdlPvj>
 801f23e:	4620      	mov	r0, r4
 801f240:	bd10      	pop	{r4, pc}

0801f242 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f242:	b510      	push	{r4, lr}
 801f244:	4604      	mov	r4, r0
 801f246:	2104      	movs	r1, #4
 801f248:	f007 fdd4 	bl	8026df4 <_ZdlPvj>
 801f24c:	4620      	mov	r0, r4
 801f24e:	bd10      	pop	{r4, pc}

0801f250 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f250:	b510      	push	{r4, lr}
 801f252:	4604      	mov	r4, r0
 801f254:	2104      	movs	r1, #4
 801f256:	f007 fdcd 	bl	8026df4 <_ZdlPvj>
 801f25a:	4620      	mov	r0, r4
 801f25c:	bd10      	pop	{r4, pc}

0801f25e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f25e:	b510      	push	{r4, lr}
 801f260:	4604      	mov	r4, r0
 801f262:	2104      	movs	r1, #4
 801f264:	f007 fdc6 	bl	8026df4 <_ZdlPvj>
 801f268:	4620      	mov	r0, r4
 801f26a:	bd10      	pop	{r4, pc}

0801f26c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f26c:	b510      	push	{r4, lr}
 801f26e:	4604      	mov	r4, r0
 801f270:	2104      	movs	r1, #4
 801f272:	f007 fdbf 	bl	8026df4 <_ZdlPvj>
 801f276:	4620      	mov	r0, r4
 801f278:	bd10      	pop	{r4, pc}

0801f27a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f27a:	b510      	push	{r4, lr}
 801f27c:	4604      	mov	r4, r0
 801f27e:	2104      	movs	r1, #4
 801f280:	f007 fdb8 	bl	8026df4 <_ZdlPvj>
 801f284:	4620      	mov	r0, r4
 801f286:	bd10      	pop	{r4, pc}

0801f288 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801f288:	b510      	push	{r4, lr}
 801f28a:	4604      	mov	r4, r0
 801f28c:	2104      	movs	r1, #4
 801f28e:	f007 fdb1 	bl	8026df4 <_ZdlPvj>
 801f292:	4620      	mov	r0, r4
 801f294:	bd10      	pop	{r4, pc}

0801f296 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801f296:	b510      	push	{r4, lr}
 801f298:	4604      	mov	r4, r0
 801f29a:	2104      	movs	r1, #4
 801f29c:	f007 fdaa 	bl	8026df4 <_ZdlPvj>
 801f2a0:	4620      	mov	r0, r4
 801f2a2:	bd10      	pop	{r4, pc}

0801f2a4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801f2a4:	b510      	push	{r4, lr}
 801f2a6:	4604      	mov	r4, r0
 801f2a8:	2104      	movs	r1, #4
 801f2aa:	f007 fda3 	bl	8026df4 <_ZdlPvj>
 801f2ae:	4620      	mov	r0, r4
 801f2b0:	bd10      	pop	{r4, pc}

0801f2b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801f2b2:	b510      	push	{r4, lr}
 801f2b4:	4604      	mov	r4, r0
 801f2b6:	2104      	movs	r1, #4
 801f2b8:	f007 fd9c 	bl	8026df4 <_ZdlPvj>
 801f2bc:	4620      	mov	r0, r4
 801f2be:	bd10      	pop	{r4, pc}

0801f2c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801f2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2c4:	4d9e      	ldr	r5, [pc, #632]	; (801f540 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801f2c6:	4690      	mov	r8, r2
 801f2c8:	b08f      	sub	sp, #60	; 0x3c
 801f2ca:	4604      	mov	r4, r0
 801f2cc:	682a      	ldr	r2, [r5, #0]
 801f2ce:	4689      	mov	r9, r1
 801f2d0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801f2d4:	2a02      	cmp	r2, #2
 801f2d6:	d106      	bne.n	801f2e6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801f2d8:	4b9a      	ldr	r3, [pc, #616]	; (801f544 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801f2da:	f240 11ef 	movw	r1, #495	; 0x1ef
 801f2de:	4a9a      	ldr	r2, [pc, #616]	; (801f548 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801f2e0:	489a      	ldr	r0, [pc, #616]	; (801f54c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801f2e2:	f007 fdb3 	bl	8026e4c <__assert_func>
 801f2e6:	ae0e      	add	r6, sp, #56	; 0x38
 801f2e8:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801f2ec:	4630      	mov	r0, r6
 801f2ee:	f7fe f8b1 	bl	801d454 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f2f2:	6823      	ldr	r3, [r4, #0]
 801f2f4:	4607      	mov	r7, r0
 801f2f6:	4620      	mov	r0, r4
 801f2f8:	6a1b      	ldr	r3, [r3, #32]
 801f2fa:	4798      	blx	r3
 801f2fc:	4287      	cmp	r7, r0
 801f2fe:	d004      	beq.n	801f30a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801f300:	4b93      	ldr	r3, [pc, #588]	; (801f550 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801f302:	f240 11f1 	movw	r1, #497	; 0x1f1
 801f306:	4a90      	ldr	r2, [pc, #576]	; (801f548 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801f308:	e7ea      	b.n	801f2e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f30a:	4630      	mov	r0, r6
 801f30c:	f7fe f81e 	bl	801d34c <_ZNK8touchgfx6Bitmap7getDataEv>
 801f310:	4607      	mov	r7, r0
 801f312:	b920      	cbnz	r0, 801f31e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801f314:	4b8f      	ldr	r3, [pc, #572]	; (801f554 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801f316:	f240 11f3 	movw	r1, #499	; 0x1f3
 801f31a:	4a8b      	ldr	r2, [pc, #556]	; (801f548 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801f31c:	e7e0      	b.n	801f2e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f31e:	f8d8 0000 	ldr.w	r0, [r8]
 801f322:	ab06      	add	r3, sp, #24
 801f324:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f328:	f9b8 a000 	ldrsh.w	sl, [r8]
 801f32c:	c303      	stmia	r3!, {r0, r1}
 801f32e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f332:	ab08      	add	r3, sp, #32
 801f334:	f8d9 0000 	ldr.w	r0, [r9]
 801f338:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801f33c:	c303      	stmia	r3!, {r0, r1}
 801f33e:	4630      	mov	r0, r6
 801f340:	f7fd fefc 	bl	801d13c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f344:	4680      	mov	r8, r0
 801f346:	4630      	mov	r0, r6
 801f348:	4e83      	ldr	r6, [pc, #524]	; (801f558 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801f34a:	f7fd ff31 	bl	801d1b0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f34e:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801f352:	f10d 0920 	add.w	r9, sp, #32
 801f356:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801f35a:	a806      	add	r0, sp, #24
 801f35c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801f360:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801f364:	f7fb fc04 	bl	801ab70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f368:	4648      	mov	r0, r9
 801f36a:	f7fb fc01 	bl	801ab70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f36e:	a80a      	add	r0, sp, #40	; 0x28
 801f370:	f7fb fbfe 	bl	801ab70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f374:	4b79      	ldr	r3, [pc, #484]	; (801f55c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801f376:	2100      	movs	r1, #0
 801f378:	f9b6 2000 	ldrsh.w	r2, [r6]
 801f37c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f380:	4648      	mov	r0, r9
 801f382:	910c      	str	r1, [sp, #48]	; 0x30
 801f384:	a90c      	add	r1, sp, #48	; 0x30
 801f386:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801f38a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801f38e:	f7f7 f933 	bl	80165f8 <_ZN8touchgfx4RectaNERKS0_>
 801f392:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801f396:	9602      	str	r6, [sp, #8]
 801f398:	f1bc 0f00 	cmp.w	ip, #0
 801f39c:	f340 80a4 	ble.w	801f4e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f3a0:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801f3a4:	2e00      	cmp	r6, #0
 801f3a6:	f340 809f 	ble.w	801f4e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f3aa:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801f3ae:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801f3b2:	4288      	cmp	r0, r1
 801f3b4:	db36      	blt.n	801f424 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801f3b6:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801f3ba:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801f3be:	429a      	cmp	r2, r3
 801f3c0:	db30      	blt.n	801f424 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801f3c2:	4460      	add	r0, ip
 801f3c4:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801f3c8:	4461      	add	r1, ip
 801f3ca:	b200      	sxth	r0, r0
 801f3cc:	b209      	sxth	r1, r1
 801f3ce:	4288      	cmp	r0, r1
 801f3d0:	dc28      	bgt.n	801f424 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801f3d2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801f3d6:	4432      	add	r2, r6
 801f3d8:	440b      	add	r3, r1
 801f3da:	b212      	sxth	r2, r2
 801f3dc:	b21b      	sxth	r3, r3
 801f3de:	429a      	cmp	r2, r3
 801f3e0:	dc20      	bgt.n	801f424 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801f3e2:	6823      	ldr	r3, [r4, #0]
 801f3e4:	4620      	mov	r0, r4
 801f3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3e8:	4798      	blx	r3
 801f3ea:	4682      	mov	sl, r0
 801f3ec:	6828      	ldr	r0, [r5, #0]
 801f3ee:	6803      	ldr	r3, [r0, #0]
 801f3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f3f2:	4798      	blx	r3
 801f3f4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801f3f8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801f3fc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801f400:	9303      	str	r3, [sp, #12]
 801f402:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801f406:	1a9b      	subs	r3, r3, r2
 801f408:	b29b      	uxth	r3, r3
 801f40a:	b21c      	sxth	r4, r3
 801f40c:	2c00      	cmp	r4, #0
 801f40e:	dc0e      	bgt.n	801f42e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801f410:	b134      	cbz	r4, 801f420 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801f412:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f416:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801f41a:	4413      	add	r3, r2
 801f41c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801f420:	463c      	mov	r4, r7
 801f422:	e00b      	b.n	801f43c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801f424:	4b4e      	ldr	r3, [pc, #312]	; (801f560 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801f426:	f240 2101 	movw	r1, #513	; 0x201
 801f42a:	4a47      	ldr	r2, [pc, #284]	; (801f548 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801f42c:	e758      	b.n	801f2e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f42e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f432:	ebab 0303 	sub.w	r3, fp, r3
 801f436:	443c      	add	r4, r7
 801f438:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801f43c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801f440:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801f444:	1a9b      	subs	r3, r3, r2
 801f446:	b29b      	uxth	r3, r3
 801f448:	b219      	sxth	r1, r3
 801f44a:	2900      	cmp	r1, #0
 801f44c:	dd50      	ble.n	801f4f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801f44e:	9a03      	ldr	r2, [sp, #12]
 801f450:	fb02 4401 	mla	r4, r2, r1, r4
 801f454:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801f458:	1ad3      	subs	r3, r2, r3
 801f45a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801f45e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801f462:	f1bc 0f00 	cmp.w	ip, #0
 801f466:	dd3f      	ble.n	801f4e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f468:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801f46c:	2e00      	cmp	r6, #0
 801f46e:	dd3b      	ble.n	801f4e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f470:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801f474:	2203      	movs	r2, #3
 801f476:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801f47a:	fb0a f801 	mul.w	r8, sl, r1
 801f47e:	fb13 8802 	smlabb	r8, r3, r2, r8
 801f482:	9a02      	ldr	r2, [sp, #8]
 801f484:	4480      	add	r8, r0
 801f486:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801f48a:	8812      	ldrh	r2, [r2, #0]
 801f48c:	4584      	cmp	ip, r0
 801f48e:	eba2 0303 	sub.w	r3, r2, r3
 801f492:	bfa8      	it	ge
 801f494:	4684      	movge	ip, r0
 801f496:	459c      	cmp	ip, r3
 801f498:	bfa8      	it	ge
 801f49a:	469c      	movge	ip, r3
 801f49c:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801f4a0:	429e      	cmp	r6, r3
 801f4a2:	bfa8      	it	ge
 801f4a4:	461e      	movge	r6, r3
 801f4a6:	4b2d      	ldr	r3, [pc, #180]	; (801f55c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801f4a8:	881b      	ldrh	r3, [r3, #0]
 801f4aa:	1a59      	subs	r1, r3, r1
 801f4ac:	4633      	mov	r3, r6
 801f4ae:	428e      	cmp	r6, r1
 801f4b0:	bfa8      	it	ge
 801f4b2:	460b      	movge	r3, r1
 801f4b4:	4562      	cmp	r2, ip
 801f4b6:	9302      	str	r3, [sp, #8]
 801f4b8:	d12d      	bne.n	801f516 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801f4ba:	455a      	cmp	r2, fp
 801f4bc:	d12b      	bne.n	801f516 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801f4be:	6828      	ldr	r0, [r5, #0]
 801f4c0:	6803      	ldr	r3, [r0, #0]
 801f4c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f4c4:	4798      	blx	r3
 801f4c6:	07c3      	lsls	r3, r0, #31
 801f4c8:	d51b      	bpl.n	801f502 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801f4ca:	6828      	ldr	r0, [r5, #0]
 801f4cc:	9b02      	ldr	r3, [sp, #8]
 801f4ce:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801f4d2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801f4d6:	6803      	ldr	r3, [r0, #0]
 801f4d8:	f8cd b000 	str.w	fp, [sp]
 801f4dc:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801f4de:	4623      	mov	r3, r4
 801f4e0:	e899 0006 	ldmia.w	r9, {r1, r2}
 801f4e4:	47a8      	blx	r5
 801f4e6:	4607      	mov	r7, r0
 801f4e8:	4638      	mov	r0, r7
 801f4ea:	b00f      	add	sp, #60	; 0x3c
 801f4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4f0:	bf1f      	itttt	ne
 801f4f2:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801f4f6:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801f4fa:	189b      	addne	r3, r3, r2
 801f4fc:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801f500:	e7ad      	b.n	801f45e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801f502:	6828      	ldr	r0, [r5, #0]
 801f504:	4642      	mov	r2, r8
 801f506:	4621      	mov	r1, r4
 801f508:	6803      	ldr	r3, [r0, #0]
 801f50a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801f50c:	9b02      	ldr	r3, [sp, #8]
 801f50e:	fb03 f30a 	mul.w	r3, r3, sl
 801f512:	47a8      	blx	r5
 801f514:	e7e8      	b.n	801f4e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f516:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801f51a:	f04f 0900 	mov.w	r9, #0
 801f51e:	9b02      	ldr	r3, [sp, #8]
 801f520:	454b      	cmp	r3, r9
 801f522:	dde1      	ble.n	801f4e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f524:	6828      	ldr	r0, [r5, #0]
 801f526:	4642      	mov	r2, r8
 801f528:	4621      	mov	r1, r4
 801f52a:	44d0      	add	r8, sl
 801f52c:	6803      	ldr	r3, [r0, #0]
 801f52e:	f109 0901 	add.w	r9, r9, #1
 801f532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f534:	461e      	mov	r6, r3
 801f536:	465b      	mov	r3, fp
 801f538:	47b0      	blx	r6
 801f53a:	9b03      	ldr	r3, [sp, #12]
 801f53c:	441c      	add	r4, r3
 801f53e:	e7ee      	b.n	801f51e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801f540:	2000b3d4 	.word	0x2000b3d4
 801f544:	0802c05d 	.word	0x0802c05d
 801f548:	0802c839 	.word	0x0802c839
 801f54c:	0802c02b 	.word	0x0802c02b
 801f550:	0802c10f 	.word	0x0802c10f
 801f554:	0802c164 	.word	0x0802c164
 801f558:	2000b3ce 	.word	0x2000b3ce
 801f55c:	2000b3d0 	.word	0x2000b3d0
 801f560:	0802c1a2 	.word	0x0802c1a2

0801f564 <_ZN8touchgfx8LCD24bppC1Ev>:
 801f564:	4a0b      	ldr	r2, [pc, #44]	; (801f594 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801f566:	6002      	str	r2, [r0, #0]
 801f568:	2200      	movs	r2, #0
 801f56a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801f56e:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801f572:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801f576:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801f57a:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801f57e:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801f582:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801f586:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801f58a:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801f58e:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801f592:	4770      	bx	lr
 801f594:	0802c488 	.word	0x0802c488

0801f598 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801f598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f59c:	b093      	sub	sp, #76	; 0x4c
 801f59e:	880c      	ldrh	r4, [r1, #0]
 801f5a0:	4605      	mov	r5, r0
 801f5a2:	460f      	mov	r7, r1
 801f5a4:	4691      	mov	r9, r2
 801f5a6:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801f5aa:	b12c      	cbz	r4, 801f5b8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801f5ac:	4b71      	ldr	r3, [pc, #452]	; (801f774 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801f5ae:	2168      	movs	r1, #104	; 0x68
 801f5b0:	4a71      	ldr	r2, [pc, #452]	; (801f778 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801f5b2:	4872      	ldr	r0, [pc, #456]	; (801f77c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801f5b4:	f007 fc4a 	bl	8026e4c <__assert_func>
 801f5b8:	6810      	ldr	r0, [r2, #0]
 801f5ba:	ae0e      	add	r6, sp, #56	; 0x38
 801f5bc:	6851      	ldr	r1, [r2, #4]
 801f5be:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801f784 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801f5c2:	c603      	stmia	r6!, {r0, r1}
 801f5c4:	6818      	ldr	r0, [r3, #0]
 801f5c6:	ae10      	add	r6, sp, #64	; 0x40
 801f5c8:	6859      	ldr	r1, [r3, #4]
 801f5ca:	c603      	stmia	r6!, {r0, r1}
 801f5cc:	a80e      	add	r0, sp, #56	; 0x38
 801f5ce:	f7fb facf 	bl	801ab70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f5d2:	4649      	mov	r1, r9
 801f5d4:	a810      	add	r0, sp, #64	; 0x40
 801f5d6:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801f780 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801f5da:	f7fb fab1 	bl	801ab40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f5de:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801f5e2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801f5e6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801f5ea:	f8d9 0000 	ldr.w	r0, [r9]
 801f5ee:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f5f2:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801f5f6:	440d      	add	r5, r1
 801f5f8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801f5fc:	440a      	add	r2, r1
 801f5fe:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801f602:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801f606:	4413      	add	r3, r2
 801f608:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801f60c:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801f610:	930b      	str	r3, [sp, #44]	; 0x2c
 801f612:	6803      	ldr	r3, [r0, #0]
 801f614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f618:	4798      	blx	r3
 801f61a:	2801      	cmp	r0, #1
 801f61c:	d11e      	bne.n	801f65c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801f61e:	220b      	movs	r2, #11
 801f620:	9008      	str	r0, [sp, #32]
 801f622:	b2b6      	uxth	r6, r6
 801f624:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801f628:	9207      	str	r2, [sp, #28]
 801f62a:	4629      	mov	r1, r5
 801f62c:	f8ba 2000 	ldrh.w	r2, [sl]
 801f630:	f8cd 8010 	str.w	r8, [sp, #16]
 801f634:	9601      	str	r6, [sp, #4]
 801f636:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801f63a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801f63e:	9203      	str	r2, [sp, #12]
 801f640:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801f644:	9202      	str	r2, [sp, #8]
 801f646:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801f64a:	9200      	str	r2, [sp, #0]
 801f64c:	463a      	mov	r2, r7
 801f64e:	f8d9 0000 	ldr.w	r0, [r9]
 801f652:	f7f7 fc1f 	bl	8016e94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801f656:	b013      	add	sp, #76	; 0x4c
 801f658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f65c:	f8d9 0000 	ldr.w	r0, [r9]
 801f660:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801f664:	6803      	ldr	r3, [r0, #0]
 801f666:	6a1b      	ldr	r3, [r3, #32]
 801f668:	4798      	blx	r3
 801f66a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801f66e:	f8ba 3000 	ldrh.w	r3, [sl]
 801f672:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801f676:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801f67a:	fb01 2303 	mla	r3, r1, r3, r2
 801f67e:	4621      	mov	r1, r4
 801f680:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f684:	4418      	add	r0, r3
 801f686:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801f68a:	930c      	str	r3, [sp, #48]	; 0x30
 801f68c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f68e:	4299      	cmp	r1, r3
 801f690:	da6a      	bge.n	801f768 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801f692:	1cc2      	adds	r2, r0, #3
 801f694:	46aa      	mov	sl, r5
 801f696:	ebaa 0305 	sub.w	r3, sl, r5
 801f69a:	429e      	cmp	r6, r3
 801f69c:	dd55      	ble.n	801f74a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801f69e:	2404      	movs	r4, #4
 801f6a0:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801f6a4:	fb14 4303 	smlabb	r3, r4, r3, r4
 801f6a8:	eb07 0e03 	add.w	lr, r7, r3
 801f6ac:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801f6b0:	b184      	cbz	r4, 801f6d4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801f6b2:	2cff      	cmp	r4, #255	; 0xff
 801f6b4:	f817 b003 	ldrb.w	fp, [r7, r3]
 801f6b8:	d10e      	bne.n	801f6d8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801f6ba:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f6be:	d10b      	bne.n	801f6d8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801f6c0:	f802 bc03 	strb.w	fp, [r2, #-3]
 801f6c4:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801f6c8:	f802 3c02 	strb.w	r3, [r2, #-2]
 801f6cc:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801f6d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f6d4:	3203      	adds	r2, #3
 801f6d6:	e7de      	b.n	801f696 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801f6d8:	fb08 f404 	mul.w	r4, r8, r4
 801f6dc:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801f6e0:	1c63      	adds	r3, r4, #1
 801f6e2:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801f6e6:	121b      	asrs	r3, r3, #8
 801f6e8:	b29c      	uxth	r4, r3
 801f6ea:	43db      	mvns	r3, r3
 801f6ec:	fb1b fb04 	smulbb	fp, fp, r4
 801f6f0:	b2db      	uxtb	r3, r3
 801f6f2:	fb0c bc03 	mla	ip, ip, r3, fp
 801f6f6:	fa1f fc8c 	uxth.w	ip, ip
 801f6fa:	f10c 0b01 	add.w	fp, ip, #1
 801f6fe:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f702:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801f706:	fb1b fb03 	smulbb	fp, fp, r3
 801f70a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f70e:	f802 cc03 	strb.w	ip, [r2, #-3]
 801f712:	f89e c001 	ldrb.w	ip, [lr, #1]
 801f716:	fb0c bc04 	mla	ip, ip, r4, fp
 801f71a:	fa1f fc8c 	uxth.w	ip, ip
 801f71e:	f10c 0b01 	add.w	fp, ip, #1
 801f722:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f726:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f72a:	f802 cc02 	strb.w	ip, [r2, #-2]
 801f72e:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801f732:	f89e e002 	ldrb.w	lr, [lr, #2]
 801f736:	fb1c f303 	smulbb	r3, ip, r3
 801f73a:	fb0e 3304 	mla	r3, lr, r4, r3
 801f73e:	b29b      	uxth	r3, r3
 801f740:	1c5c      	adds	r4, r3, #1
 801f742:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f746:	121b      	asrs	r3, r3, #8
 801f748:	e7c2      	b.n	801f6d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801f74a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f74c:	3101      	adds	r1, #1
 801f74e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f750:	881b      	ldrh	r3, [r3, #0]
 801f752:	1b9b      	subs	r3, r3, r6
 801f754:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f758:	4413      	add	r3, r2
 801f75a:	4418      	add	r0, r3
 801f75c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801f760:	1b9b      	subs	r3, r3, r6
 801f762:	444b      	add	r3, r9
 801f764:	441d      	add	r5, r3
 801f766:	e791      	b.n	801f68c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801f768:	4b05      	ldr	r3, [pc, #20]	; (801f780 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801f76a:	6818      	ldr	r0, [r3, #0]
 801f76c:	6803      	ldr	r3, [r0, #0]
 801f76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f770:	4798      	blx	r3
 801f772:	e770      	b.n	801f656 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801f774:	0802bf8f 	.word	0x0802bf8f
 801f778:	0802c65b 	.word	0x0802c65b
 801f77c:	0802c02b 	.word	0x0802c02b
 801f780:	2000b3d4 	.word	0x2000b3d4
 801f784:	2000b3ce 	.word	0x2000b3ce

0801f788 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801f788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f78c:	4614      	mov	r4, r2
 801f78e:	880a      	ldrh	r2, [r1, #0]
 801f790:	b091      	sub	sp, #68	; 0x44
 801f792:	4680      	mov	r8, r0
 801f794:	2a01      	cmp	r2, #1
 801f796:	460e      	mov	r6, r1
 801f798:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801f79c:	d005      	beq.n	801f7aa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801f79e:	4b6d      	ldr	r3, [pc, #436]	; (801f954 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801f7a0:	21b6      	movs	r1, #182	; 0xb6
 801f7a2:	4a6d      	ldr	r2, [pc, #436]	; (801f958 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801f7a4:	486d      	ldr	r0, [pc, #436]	; (801f95c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801f7a6:	f007 fb51 	bl	8026e4c <__assert_func>
 801f7aa:	6820      	ldr	r0, [r4, #0]
 801f7ac:	ad0c      	add	r5, sp, #48	; 0x30
 801f7ae:	6861      	ldr	r1, [r4, #4]
 801f7b0:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801f960 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801f7b4:	c503      	stmia	r5!, {r0, r1}
 801f7b6:	6818      	ldr	r0, [r3, #0]
 801f7b8:	ad0e      	add	r5, sp, #56	; 0x38
 801f7ba:	6859      	ldr	r1, [r3, #4]
 801f7bc:	c503      	stmia	r5!, {r0, r1}
 801f7be:	a80c      	add	r0, sp, #48	; 0x30
 801f7c0:	f7fb f9d6 	bl	801ab70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f7c4:	4621      	mov	r1, r4
 801f7c6:	a80e      	add	r0, sp, #56	; 0x38
 801f7c8:	f7fb f9ba 	bl	801ab40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f7cc:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801f7d0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801f7d4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801f7d8:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801f7dc:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f7e0:	eb08 0401 	add.w	r4, r8, r1
 801f7e4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801f7e8:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801f964 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801f7ec:	440a      	add	r2, r1
 801f7ee:	f8d8 0000 	ldr.w	r0, [r8]
 801f7f2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f7f6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801f7fa:	4413      	add	r3, r2
 801f7fc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f800:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801f804:	930a      	str	r3, [sp, #40]	; 0x28
 801f806:	6803      	ldr	r3, [r0, #0]
 801f808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f80c:	4798      	blx	r3
 801f80e:	2801      	cmp	r0, #1
 801f810:	d11e      	bne.n	801f850 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801f812:	220b      	movs	r2, #11
 801f814:	9008      	str	r0, [sp, #32]
 801f816:	b2ad      	uxth	r5, r5
 801f818:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801f81c:	9207      	str	r2, [sp, #28]
 801f81e:	4621      	mov	r1, r4
 801f820:	f8b9 2000 	ldrh.w	r2, [r9]
 801f824:	9501      	str	r5, [sp, #4]
 801f826:	9206      	str	r2, [sp, #24]
 801f828:	2200      	movs	r2, #0
 801f82a:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801f82e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801f832:	9203      	str	r2, [sp, #12]
 801f834:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f838:	9202      	str	r2, [sp, #8]
 801f83a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801f83e:	9200      	str	r2, [sp, #0]
 801f840:	4632      	mov	r2, r6
 801f842:	f8d8 0000 	ldr.w	r0, [r8]
 801f846:	f7f7 fb25 	bl	8016e94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801f84a:	b011      	add	sp, #68	; 0x44
 801f84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f850:	f8d8 0000 	ldr.w	r0, [r8]
 801f854:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801f858:	6803      	ldr	r3, [r0, #0]
 801f85a:	6a1b      	ldr	r3, [r3, #32]
 801f85c:	4798      	blx	r3
 801f85e:	f8b9 3000 	ldrh.w	r3, [r9]
 801f862:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801f866:	f04f 0e00 	mov.w	lr, #0
 801f86a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801f86e:	fa1f f987 	uxth.w	r9, r7
 801f872:	fb01 2303 	mla	r3, r1, r3, r2
 801f876:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801f87a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f87e:	b289      	uxth	r1, r1
 801f880:	4418      	add	r0, r3
 801f882:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801f886:	930b      	str	r3, [sp, #44]	; 0x2c
 801f888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f88a:	459e      	cmp	lr, r3
 801f88c:	da5c      	bge.n	801f948 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801f88e:	1cc3      	adds	r3, r0, #3
 801f890:	46a2      	mov	sl, r4
 801f892:	ebaa 0204 	sub.w	r2, sl, r4
 801f896:	4295      	cmp	r5, r2
 801f898:	dd46      	ble.n	801f928 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801f89a:	f04f 0c03 	mov.w	ip, #3
 801f89e:	f04f 0b04 	mov.w	fp, #4
 801f8a2:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801f8a6:	2fff      	cmp	r7, #255	; 0xff
 801f8a8:	fb1c b202 	smlabb	r2, ip, r2, fp
 801f8ac:	eb06 0c02 	add.w	ip, r6, r2
 801f8b0:	f816 b002 	ldrb.w	fp, [r6, r2]
 801f8b4:	d02f      	beq.n	801f916 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801f8b6:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801f8ba:	fb12 f201 	smulbb	r2, r2, r1
 801f8be:	fb0b 2209 	mla	r2, fp, r9, r2
 801f8c2:	b292      	uxth	r2, r2
 801f8c4:	f102 0b01 	add.w	fp, r2, #1
 801f8c8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801f8cc:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801f8d0:	fb1b fb01 	smulbb	fp, fp, r1
 801f8d4:	1212      	asrs	r2, r2, #8
 801f8d6:	f803 2c03 	strb.w	r2, [r3, #-3]
 801f8da:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f8de:	fb02 b209 	mla	r2, r2, r9, fp
 801f8e2:	b292      	uxth	r2, r2
 801f8e4:	f102 0b01 	add.w	fp, r2, #1
 801f8e8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801f8ec:	1212      	asrs	r2, r2, #8
 801f8ee:	f803 2c02 	strb.w	r2, [r3, #-2]
 801f8f2:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801f8f6:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801f8fa:	fb1c fc01 	smulbb	ip, ip, r1
 801f8fe:	fb02 c209 	mla	r2, r2, r9, ip
 801f902:	b292      	uxth	r2, r2
 801f904:	f102 0c01 	add.w	ip, r2, #1
 801f908:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f90c:	1212      	asrs	r2, r2, #8
 801f90e:	f803 2c01 	strb.w	r2, [r3, #-1]
 801f912:	3303      	adds	r3, #3
 801f914:	e7bd      	b.n	801f892 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801f916:	f803 bc03 	strb.w	fp, [r3, #-3]
 801f91a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f91e:	f803 2c02 	strb.w	r2, [r3, #-2]
 801f922:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801f926:	e7f2      	b.n	801f90e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801f928:	4b0d      	ldr	r3, [pc, #52]	; (801f960 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801f92a:	f10e 0e01 	add.w	lr, lr, #1
 801f92e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f930:	881b      	ldrh	r3, [r3, #0]
 801f932:	1b5b      	subs	r3, r3, r5
 801f934:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f938:	4413      	add	r3, r2
 801f93a:	4418      	add	r0, r3
 801f93c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801f940:	1b5b      	subs	r3, r3, r5
 801f942:	4443      	add	r3, r8
 801f944:	441c      	add	r4, r3
 801f946:	e79f      	b.n	801f888 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801f948:	4b06      	ldr	r3, [pc, #24]	; (801f964 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801f94a:	6818      	ldr	r0, [r3, #0]
 801f94c:	6803      	ldr	r3, [r0, #0]
 801f94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f950:	4798      	blx	r3
 801f952:	e77a      	b.n	801f84a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801f954:	0802be73 	.word	0x0802be73
 801f958:	0802c54e 	.word	0x0802c54e
 801f95c:	0802c02b 	.word	0x0802c02b
 801f960:	2000b3ce 	.word	0x2000b3ce
 801f964:	2000b3d4 	.word	0x2000b3d4

0801f968 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801f968:	b570      	push	{r4, r5, r6, lr}
 801f96a:	780d      	ldrb	r5, [r1, #0]
 801f96c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801f970:	2d01      	cmp	r5, #1
 801f972:	d00d      	beq.n	801f990 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801f974:	d307      	bcc.n	801f986 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801f976:	2d02      	cmp	r5, #2
 801f978:	d10f      	bne.n	801f99a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801f97a:	4b08      	ldr	r3, [pc, #32]	; (801f99c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801f97c:	215b      	movs	r1, #91	; 0x5b
 801f97e:	4a08      	ldr	r2, [pc, #32]	; (801f9a0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801f980:	4808      	ldr	r0, [pc, #32]	; (801f9a4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801f982:	f007 fa63 	bl	8026e4c <__assert_func>
 801f986:	9404      	str	r4, [sp, #16]
 801f988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f98c:	f7ff be04 	b.w	801f598 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801f990:	9404      	str	r4, [sp, #16]
 801f992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f996:	f7ff bef7 	b.w	801f788 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801f99a:	bd70      	pop	{r4, r5, r6, pc}
 801f99c:	0802be28 	.word	0x0802be28
 801f9a0:	0802c4cc 	.word	0x0802c4cc
 801f9a4:	0802c02b 	.word	0x0802c02b

0801f9a8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801f9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9ac:	4605      	mov	r5, r0
 801f9ae:	b08f      	sub	sp, #60	; 0x3c
 801f9b0:	460c      	mov	r4, r1
 801f9b2:	461f      	mov	r7, r3
 801f9b4:	2b00      	cmp	r3, #0
 801f9b6:	d04e      	beq.n	801fa56 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 801f9b8:	6808      	ldr	r0, [r1, #0]
 801f9ba:	ab0a      	add	r3, sp, #40	; 0x28
 801f9bc:	6849      	ldr	r1, [r1, #4]
 801f9be:	4e81      	ldr	r6, [pc, #516]	; (801fbc4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 801f9c0:	c303      	stmia	r3!, {r0, r1}
 801f9c2:	6810      	ldr	r0, [r2, #0]
 801f9c4:	ab0c      	add	r3, sp, #48	; 0x30
 801f9c6:	6851      	ldr	r1, [r2, #4]
 801f9c8:	c303      	stmia	r3!, {r0, r1}
 801f9ca:	a80a      	add	r0, sp, #40	; 0x28
 801f9cc:	f7fb f8d0 	bl	801ab70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f9d0:	4621      	mov	r1, r4
 801f9d2:	a80c      	add	r0, sp, #48	; 0x30
 801f9d4:	f7fb f8b4 	bl	801ab40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f9d8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801f9dc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801f9e0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801f9e4:	6830      	ldr	r0, [r6, #0]
 801f9e6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f9ea:	f9bd 4034 	ldrsh.w	r4, [sp, #52]	; 0x34
 801f9ee:	f9bd 8036 	ldrsh.w	r8, [sp, #54]	; 0x36
 801f9f2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801f9f6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801f9fa:	440a      	add	r2, r1
 801f9fc:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801fa00:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801fa04:	4413      	add	r3, r2
 801fa06:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801fa0a:	6803      	ldr	r3, [r0, #0]
 801fa0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fa0e:	4798      	blx	r3
 801fa10:	2fff      	cmp	r7, #255	; 0xff
 801fa12:	4633      	mov	r3, r6
 801fa14:	4e6c      	ldr	r6, [pc, #432]	; (801fbc8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 801fa16:	d021      	beq.n	801fa5c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801fa18:	f010 0f04 	tst.w	r0, #4
 801fa1c:	6818      	ldr	r0, [r3, #0]
 801fa1e:	d020      	beq.n	801fa62 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 801fa20:	2100      	movs	r1, #0
 801fa22:	f04f 0e01 	mov.w	lr, #1
 801fa26:	f8d0 c000 	ldr.w	ip, [r0]
 801fa2a:	b2a4      	uxth	r4, r4
 801fa2c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801fa30:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801fa34:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 801fa38:	8836      	ldrh	r6, [r6, #0]
 801fa3a:	9703      	str	r7, [sp, #12]
 801fa3c:	9400      	str	r4, [sp, #0]
 801fa3e:	e9cd 1604 	strd	r1, r6, [sp, #16]
 801fa42:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801fa46:	9102      	str	r1, [sp, #8]
 801fa48:	fa1f f188 	uxth.w	r1, r8
 801fa4c:	9101      	str	r1, [sp, #4]
 801fa4e:	4629      	mov	r1, r5
 801fa50:	f8dc 4034 	ldr.w	r4, [ip, #52]	; 0x34
 801fa54:	47a0      	blx	r4
 801fa56:	b00f      	add	sp, #60	; 0x3c
 801fa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa5c:	f010 0f01 	tst.w	r0, #1
 801fa60:	e7dc      	b.n	801fa1c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x74>
 801fa62:	6803      	ldr	r3, [r0, #0]
 801fa64:	6a1b      	ldr	r3, [r3, #32]
 801fa66:	4798      	blx	r3
 801fa68:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801fa6c:	8833      	ldrh	r3, [r6, #0]
 801fa6e:	2fff      	cmp	r7, #255	; 0xff
 801fa70:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801fa74:	fb01 2303 	mla	r3, r1, r3, r2
 801fa78:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 801fa7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa80:	4418      	add	r0, r3
 801fa82:	d128      	bne.n	801fad6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x12e>
 801fa84:	0051      	lsls	r1, r2, #1
 801fa86:	2700      	movs	r7, #0
 801fa88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa8c:	4547      	cmp	r7, r8
 801fa8e:	f280 8092 	bge.w	801fbb6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 801fa92:	4684      	mov	ip, r0
 801fa94:	f04f 0e00 	mov.w	lr, #0
 801fa98:	45a6      	cmp	lr, r4
 801fa9a:	f10c 0c03 	add.w	ip, ip, #3
 801fa9e:	da7c      	bge.n	801fb9a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1f2>
 801faa0:	f835 901e 	ldrh.w	r9, [r5, lr, lsl #1]
 801faa4:	f10e 0e01 	add.w	lr, lr, #1
 801faa8:	ea4f 2a29 	mov.w	sl, r9, asr #8
 801faac:	f3c9 0b82 	ubfx	fp, r9, #2, #3
 801fab0:	ea4f 03e9 	mov.w	r3, r9, asr #3
 801fab4:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801fab8:	ea4b 09c9 	orr.w	r9, fp, r9, lsl #3
 801fabc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801fac0:	ea4a 1a5a 	orr.w	sl, sl, sl, lsr #5
 801fac4:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801fac8:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 801facc:	f80c ac01 	strb.w	sl, [ip, #-1]
 801fad0:	f80c 3c02 	strb.w	r3, [ip, #-2]
 801fad4:	e7e0      	b.n	801fa98 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xf0>
 801fad6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 801fada:	ea6f 0c07 	mvn.w	ip, r7
 801fade:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 801fae2:	f04f 0900 	mov.w	r9, #0
 801fae6:	9309      	str	r3, [sp, #36]	; 0x24
 801fae8:	fa5f fc8c 	uxtb.w	ip, ip
 801faec:	b2bb      	uxth	r3, r7
 801faee:	45c1      	cmp	r9, r8
 801faf0:	da61      	bge.n	801fbb6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 801faf2:	4601      	mov	r1, r0
 801faf4:	f04f 0e00 	mov.w	lr, #0
 801faf8:	45a6      	cmp	lr, r4
 801fafa:	f101 0103 	add.w	r1, r1, #3
 801fafe:	da3b      	bge.n	801fb78 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d0>
 801fb00:	f835 201e 	ldrh.w	r2, [r5, lr, lsl #1]
 801fb04:	f10e 0e01 	add.w	lr, lr, #1
 801fb08:	f3c2 0b82 	ubfx	fp, r2, #2, #3
 801fb0c:	1216      	asrs	r6, r2, #8
 801fb0e:	10d7      	asrs	r7, r2, #3
 801fb10:	ea4b 02c2 	orr.w	r2, fp, r2, lsl #3
 801fb14:	f811 bc03 	ldrb.w	fp, [r1, #-3]
 801fb18:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fb1c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fb20:	fb1b fb0c 	smulbb	fp, fp, ip
 801fb24:	b2d2      	uxtb	r2, r2
 801fb26:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801fb2a:	fb02 b203 	mla	r2, r2, r3, fp
 801fb2e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801fb32:	fb17 f703 	smulbb	r7, r7, r3
 801fb36:	fb16 f603 	smulbb	r6, r6, r3
 801fb3a:	b292      	uxth	r2, r2
 801fb3c:	f102 0b01 	add.w	fp, r2, #1
 801fb40:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801fb44:	1212      	asrs	r2, r2, #8
 801fb46:	f801 2c03 	strb.w	r2, [r1, #-3]
 801fb4a:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 801fb4e:	fb02 770c 	mla	r7, r2, ip, r7
 801fb52:	b2bf      	uxth	r7, r7
 801fb54:	1c7a      	adds	r2, r7, #1
 801fb56:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801fb5a:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 801fb5e:	fb02 660c 	mla	r6, r2, ip, r6
 801fb62:	123f      	asrs	r7, r7, #8
 801fb64:	b2b6      	uxth	r6, r6
 801fb66:	f801 7c02 	strb.w	r7, [r1, #-2]
 801fb6a:	1c72      	adds	r2, r6, #1
 801fb6c:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801fb70:	1236      	asrs	r6, r6, #8
 801fb72:	f801 6c01 	strb.w	r6, [r1, #-1]
 801fb76:	e7bf      	b.n	801faf8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x150>
 801fb78:	4a13      	ldr	r2, [pc, #76]	; (801fbc8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 801fb7a:	f109 0901 	add.w	r9, r9, #1
 801fb7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fb80:	8812      	ldrh	r2, [r2, #0]
 801fb82:	1b12      	subs	r2, r2, r4
 801fb84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb88:	440a      	add	r2, r1
 801fb8a:	4410      	add	r0, r2
 801fb8c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801fb90:	1b12      	subs	r2, r2, r4
 801fb92:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 801fb96:	4415      	add	r5, r2
 801fb98:	e7a9      	b.n	801faee <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x146>
 801fb9a:	8833      	ldrh	r3, [r6, #0]
 801fb9c:	3701      	adds	r7, #1
 801fb9e:	1b1b      	subs	r3, r3, r4
 801fba0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fba4:	4413      	add	r3, r2
 801fba6:	4418      	add	r0, r3
 801fba8:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801fbac:	1b1b      	subs	r3, r3, r4
 801fbae:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801fbb2:	441d      	add	r5, r3
 801fbb4:	e76a      	b.n	801fa8c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xe4>
 801fbb6:	4b03      	ldr	r3, [pc, #12]	; (801fbc4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 801fbb8:	6818      	ldr	r0, [r3, #0]
 801fbba:	6803      	ldr	r3, [r0, #0]
 801fbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fbbe:	4798      	blx	r3
 801fbc0:	e749      	b.n	801fa56 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 801fbc2:	bf00      	nop
 801fbc4:	2000b3d4 	.word	0x2000b3d4
 801fbc8:	2000b3ce 	.word	0x2000b3ce

0801fbcc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801fbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbd0:	b08b      	sub	sp, #44	; 0x2c
 801fbd2:	460c      	mov	r4, r1
 801fbd4:	4680      	mov	r8, r0
 801fbd6:	469a      	mov	sl, r3
 801fbd8:	6808      	ldr	r0, [r1, #0]
 801fbda:	ab06      	add	r3, sp, #24
 801fbdc:	6849      	ldr	r1, [r1, #4]
 801fbde:	c303      	stmia	r3!, {r0, r1}
 801fbe0:	6810      	ldr	r0, [r2, #0]
 801fbe2:	ab08      	add	r3, sp, #32
 801fbe4:	6851      	ldr	r1, [r2, #4]
 801fbe6:	c303      	stmia	r3!, {r0, r1}
 801fbe8:	a806      	add	r0, sp, #24
 801fbea:	f7fa ffc1 	bl	801ab70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fbee:	4621      	mov	r1, r4
 801fbf0:	a808      	add	r0, sp, #32
 801fbf2:	4c61      	ldr	r4, [pc, #388]	; (801fd78 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801fbf4:	f7fa ffa4 	bl	801ab40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fbf8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801fbfc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801fc00:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801fc04:	6820      	ldr	r0, [r4, #0]
 801fc06:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fc0a:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801fc0e:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801fc12:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801fc16:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801fc1a:	440a      	add	r2, r1
 801fc1c:	f8ad 2020 	strh.w	r2, [sp, #32]
 801fc20:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801fc24:	4413      	add	r3, r2
 801fc26:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801fc2a:	6803      	ldr	r3, [r0, #0]
 801fc2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fc2e:	4798      	blx	r3
 801fc30:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801fc34:	d118      	bne.n	801fc68 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801fc36:	f010 0f20 	tst.w	r0, #32
 801fc3a:	6820      	ldr	r0, [r4, #0]
 801fc3c:	d017      	beq.n	801fc6e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801fc3e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801fc42:	b2bf      	uxth	r7, r7
 801fc44:	6801      	ldr	r1, [r0, #0]
 801fc46:	9402      	str	r4, [sp, #8]
 801fc48:	fa1f f489 	uxth.w	r4, r9
 801fc4c:	f8cd a00c 	str.w	sl, [sp, #12]
 801fc50:	9401      	str	r4, [sp, #4]
 801fc52:	9700      	str	r7, [sp, #0]
 801fc54:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801fc58:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801fc5a:	4641      	mov	r1, r8
 801fc5c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fc60:	47a0      	blx	r4
 801fc62:	b00b      	add	sp, #44	; 0x2c
 801fc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc68:	f010 0f40 	tst.w	r0, #64	; 0x40
 801fc6c:	e7e5      	b.n	801fc3a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801fc6e:	6803      	ldr	r3, [r0, #0]
 801fc70:	6a1b      	ldr	r3, [r3, #32]
 801fc72:	4798      	blx	r3
 801fc74:	4b41      	ldr	r3, [pc, #260]	; (801fd7c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801fc76:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801fc7a:	f04f 0c00 	mov.w	ip, #0
 801fc7e:	881a      	ldrh	r2, [r3, #0]
 801fc80:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801fc84:	fb04 1202 	mla	r2, r4, r2, r1
 801fc88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fc8c:	4410      	add	r0, r2
 801fc8e:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801fc92:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801fc96:	0092      	lsls	r2, r2, #2
 801fc98:	9105      	str	r1, [sp, #20]
 801fc9a:	9204      	str	r2, [sp, #16]
 801fc9c:	45cc      	cmp	ip, r9
 801fc9e:	da65      	bge.n	801fd6c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801fca0:	1cc4      	adds	r4, r0, #3
 801fca2:	f108 0504 	add.w	r5, r8, #4
 801fca6:	f04f 0e00 	mov.w	lr, #0
 801fcaa:	45be      	cmp	lr, r7
 801fcac:	da4d      	bge.n	801fd4a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801fcae:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801fcb2:	b181      	cbz	r1, 801fcd6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801fcb4:	29ff      	cmp	r1, #255	; 0xff
 801fcb6:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801fcba:	d111      	bne.n	801fce0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801fcbc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801fcc0:	d10e      	bne.n	801fce0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801fcc2:	f804 bc03 	strb.w	fp, [r4, #-3]
 801fcc6:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801fcca:	f804 2c02 	strb.w	r2, [r4, #-2]
 801fcce:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801fcd2:	f804 2c01 	strb.w	r2, [r4, #-1]
 801fcd6:	f10e 0e01 	add.w	lr, lr, #1
 801fcda:	3403      	adds	r4, #3
 801fcdc:	3504      	adds	r5, #4
 801fcde:	e7e4      	b.n	801fcaa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801fce0:	fb0a f101 	mul.w	r1, sl, r1
 801fce4:	1c4a      	adds	r2, r1, #1
 801fce6:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801fcea:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801fcee:	1212      	asrs	r2, r2, #8
 801fcf0:	b296      	uxth	r6, r2
 801fcf2:	43d2      	mvns	r2, r2
 801fcf4:	fb1b fb06 	smulbb	fp, fp, r6
 801fcf8:	b2d2      	uxtb	r2, r2
 801fcfa:	fb01 b102 	mla	r1, r1, r2, fp
 801fcfe:	b289      	uxth	r1, r1
 801fd00:	f101 0b01 	add.w	fp, r1, #1
 801fd04:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801fd08:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801fd0c:	fb1b fb02 	smulbb	fp, fp, r2
 801fd10:	1209      	asrs	r1, r1, #8
 801fd12:	f804 1c03 	strb.w	r1, [r4, #-3]
 801fd16:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801fd1a:	fb01 b106 	mla	r1, r1, r6, fp
 801fd1e:	b289      	uxth	r1, r1
 801fd20:	f101 0b01 	add.w	fp, r1, #1
 801fd24:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801fd28:	1209      	asrs	r1, r1, #8
 801fd2a:	f804 1c02 	strb.w	r1, [r4, #-2]
 801fd2e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801fd32:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801fd36:	fb11 f202 	smulbb	r2, r1, r2
 801fd3a:	fb0b 2206 	mla	r2, fp, r6, r2
 801fd3e:	b292      	uxth	r2, r2
 801fd40:	1c56      	adds	r6, r2, #1
 801fd42:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801fd46:	1212      	asrs	r2, r2, #8
 801fd48:	e7c3      	b.n	801fcd2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801fd4a:	881a      	ldrh	r2, [r3, #0]
 801fd4c:	f10c 0c01 	add.w	ip, ip, #1
 801fd50:	9905      	ldr	r1, [sp, #20]
 801fd52:	1bd2      	subs	r2, r2, r7
 801fd54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fd58:	440a      	add	r2, r1
 801fd5a:	9904      	ldr	r1, [sp, #16]
 801fd5c:	4410      	add	r0, r2
 801fd5e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801fd62:	1bd2      	subs	r2, r2, r7
 801fd64:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801fd68:	4490      	add	r8, r2
 801fd6a:	e797      	b.n	801fc9c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801fd6c:	4b02      	ldr	r3, [pc, #8]	; (801fd78 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801fd6e:	6818      	ldr	r0, [r3, #0]
 801fd70:	6803      	ldr	r3, [r0, #0]
 801fd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fd74:	4798      	blx	r3
 801fd76:	e774      	b.n	801fc62 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801fd78:	2000b3d4 	.word	0x2000b3d4
 801fd7c:	2000b3ce 	.word	0x2000b3ce

0801fd80 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801fd80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fd84:	b085      	sub	sp, #20
 801fd86:	4606      	mov	r6, r0
 801fd88:	460c      	mov	r4, r1
 801fd8a:	4691      	mov	r9, r2
 801fd8c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801fd90:	4698      	mov	r8, r3
 801fd92:	b3a5      	cbz	r5, 801fdfe <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801fd94:	4608      	mov	r0, r1
 801fd96:	f7fd f9d1 	bl	801d13c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801fd9a:	4607      	mov	r7, r0
 801fd9c:	4620      	mov	r0, r4
 801fd9e:	f7fd fa07 	bl	801d1b0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801fda2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801fda6:	4620      	mov	r0, r4
 801fda8:	f8ad 9008 	strh.w	r9, [sp, #8]
 801fdac:	f8ad 800a 	strh.w	r8, [sp, #10]
 801fdb0:	f8ad 700c 	strh.w	r7, [sp, #12]
 801fdb4:	f7fd fb4e 	bl	801d454 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801fdb8:	b1a0      	cbz	r0, 801fde4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801fdba:	4620      	mov	r0, r4
 801fdbc:	f7fd fb4a 	bl	801d454 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801fdc0:	2801      	cmp	r0, #1
 801fdc2:	d00f      	beq.n	801fde4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801fdc4:	4620      	mov	r0, r4
 801fdc6:	f7fd fb45 	bl	801d454 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801fdca:	2802      	cmp	r0, #2
 801fdcc:	d00a      	beq.n	801fde4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801fdce:	4620      	mov	r0, r4
 801fdd0:	f7fd fb40 	bl	801d454 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801fdd4:	280b      	cmp	r0, #11
 801fdd6:	d005      	beq.n	801fde4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801fdd8:	4b21      	ldr	r3, [pc, #132]	; (801fe60 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe0>)
 801fdda:	213f      	movs	r1, #63	; 0x3f
 801fddc:	4a21      	ldr	r2, [pc, #132]	; (801fe64 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe4>)
 801fdde:	4822      	ldr	r0, [pc, #136]	; (801fe68 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe8>)
 801fde0:	f007 f834 	bl	8026e4c <__assert_func>
 801fde4:	4620      	mov	r0, r4
 801fde6:	f7fd fb35 	bl	801d454 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801fdea:	2802      	cmp	r0, #2
 801fdec:	4620      	mov	r0, r4
 801fdee:	d109      	bne.n	801fe04 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>
 801fdf0:	f7fd faac 	bl	801d34c <_ZNK8touchgfx6Bitmap7getDataEv>
 801fdf4:	462b      	mov	r3, r5
 801fdf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fdf8:	a902      	add	r1, sp, #8
 801fdfa:	f7ff fee7 	bl	801fbcc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801fdfe:	b005      	add	sp, #20
 801fe00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fe04:	f7fd fb26 	bl	801d454 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801fe08:	280b      	cmp	r0, #11
 801fe0a:	4620      	mov	r0, r4
 801fe0c:	d10d      	bne.n	801fe2a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801fe0e:	f7fd fa9d 	bl	801d34c <_ZNK8touchgfx6Bitmap7getDataEv>
 801fe12:	4606      	mov	r6, r0
 801fe14:	4620      	mov	r0, r4
 801fe16:	f7fd facb 	bl	801d3b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801fe1a:	9500      	str	r5, [sp, #0]
 801fe1c:	4601      	mov	r1, r0
 801fe1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fe20:	aa02      	add	r2, sp, #8
 801fe22:	4630      	mov	r0, r6
 801fe24:	f7ff fda0 	bl	801f968 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801fe28:	e7e9      	b.n	801fdfe <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801fe2a:	f7fd fb13 	bl	801d454 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801fe2e:	b940      	cbnz	r0, 801fe42 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc2>
 801fe30:	4620      	mov	r0, r4
 801fe32:	f7fd fa8b 	bl	801d34c <_ZNK8touchgfx6Bitmap7getDataEv>
 801fe36:	462b      	mov	r3, r5
 801fe38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fe3a:	a902      	add	r1, sp, #8
 801fe3c:	f7ff fdb4 	bl	801f9a8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801fe40:	e7dd      	b.n	801fdfe <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801fe42:	6833      	ldr	r3, [r6, #0]
 801fe44:	4620      	mov	r0, r4
 801fe46:	68df      	ldr	r7, [r3, #12]
 801fe48:	f7fd fa80 	bl	801d34c <_ZNK8touchgfx6Bitmap7getDataEv>
 801fe4c:	2300      	movs	r3, #0
 801fe4e:	4601      	mov	r1, r0
 801fe50:	aa02      	add	r2, sp, #8
 801fe52:	4630      	mov	r0, r6
 801fe54:	e9cd 5300 	strd	r5, r3, [sp]
 801fe58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fe5a:	47b8      	blx	r7
 801fe5c:	e7cf      	b.n	801fdfe <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801fe5e:	bf00      	nop
 801fe60:	0802bec1 	.word	0x0802bec1
 801fe64:	0802c5d7 	.word	0x0802c5d7
 801fe68:	0802c02b 	.word	0x0802c02b

0801fe6c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801fe6c:	b570      	push	{r4, r5, r6, lr}
 801fe6e:	9d04      	ldr	r5, [sp, #16]
 801fe70:	460c      	mov	r4, r1
 801fe72:	4619      	mov	r1, r3
 801fe74:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801fe78:	2a0c      	cmp	r2, #12
 801fe7a:	d826      	bhi.n	801feca <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801fe7c:	e8df f002 	tbb	[pc, r2]
 801fe80:	200e1407 	.word	0x200e1407
 801fe84:	20202020 	.word	0x20202020
 801fe88:	20202020 	.word	0x20202020
 801fe8c:	20          	.byte	0x20
 801fe8d:	00          	.byte	0x00
 801fe8e:	4b0f      	ldr	r3, [pc, #60]	; (801fecc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801fe90:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 801fe94:	4a0e      	ldr	r2, [pc, #56]	; (801fed0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801fe96:	480f      	ldr	r0, [pc, #60]	; (801fed4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801fe98:	f006 ffd8 	bl	8026e4c <__assert_func>
 801fe9c:	462a      	mov	r2, r5
 801fe9e:	4620      	mov	r0, r4
 801fea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fea4:	f7ff be92 	b.w	801fbcc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801fea8:	6802      	ldr	r2, [r0, #0]
 801feaa:	2600      	movs	r6, #0
 801feac:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801feb0:	68d6      	ldr	r6, [r2, #12]
 801feb2:	462b      	mov	r3, r5
 801feb4:	460a      	mov	r2, r1
 801feb6:	4621      	mov	r1, r4
 801feb8:	46b4      	mov	ip, r6
 801feba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801febe:	4760      	bx	ip
 801fec0:	4b05      	ldr	r3, [pc, #20]	; (801fed8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801fec2:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 801fec6:	4a02      	ldr	r2, [pc, #8]	; (801fed0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801fec8:	e7e5      	b.n	801fe96 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801feca:	bd70      	pop	{r4, r5, r6, pc}
 801fecc:	0802c202 	.word	0x0802c202
 801fed0:	0802c8bf 	.word	0x0802c8bf
 801fed4:	0802c02b 	.word	0x0802c02b
 801fed8:	0802c243 	.word	0x0802c243

0801fedc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801fedc:	b158      	cbz	r0, 801fef6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801fede:	2902      	cmp	r1, #2
 801fee0:	d00f      	beq.n	801ff02 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801fee2:	2903      	cmp	r1, #3
 801fee4:	d010      	beq.n	801ff08 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801fee6:	2901      	cmp	r1, #1
 801fee8:	d101      	bne.n	801feee <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801feea:	2001      	movs	r0, #1
 801feec:	4770      	bx	lr
 801feee:	4b08      	ldr	r3, [pc, #32]	; (801ff10 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801fef0:	8819      	ldrh	r1, [r3, #0]
 801fef2:	4248      	negs	r0, r1
 801fef4:	4770      	bx	lr
 801fef6:	2902      	cmp	r1, #2
 801fef8:	d006      	beq.n	801ff08 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801fefa:	2903      	cmp	r1, #3
 801fefc:	d0f7      	beq.n	801feee <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801fefe:	2901      	cmp	r1, #1
 801ff00:	d1f3      	bne.n	801feea <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801ff02:	4b03      	ldr	r3, [pc, #12]	; (801ff10 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801ff04:	8818      	ldrh	r0, [r3, #0]
 801ff06:	4770      	bx	lr
 801ff08:	f04f 30ff 	mov.w	r0, #4294967295
 801ff0c:	4770      	bx	lr
 801ff0e:	bf00      	nop
 801ff10:	2000b3ce 	.word	0x2000b3ce

0801ff14 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801ff14:	b170      	cbz	r0, 801ff34 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801ff16:	2902      	cmp	r1, #2
 801ff18:	d012      	beq.n	801ff40 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801ff1a:	2903      	cmp	r1, #3
 801ff1c:	d006      	beq.n	801ff2c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801ff1e:	2901      	cmp	r1, #1
 801ff20:	d001      	beq.n	801ff26 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801ff22:	2001      	movs	r0, #1
 801ff24:	4770      	bx	lr
 801ff26:	4b08      	ldr	r3, [pc, #32]	; (801ff48 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801ff28:	8818      	ldrh	r0, [r3, #0]
 801ff2a:	4770      	bx	lr
 801ff2c:	4b06      	ldr	r3, [pc, #24]	; (801ff48 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801ff2e:	8818      	ldrh	r0, [r3, #0]
 801ff30:	4240      	negs	r0, r0
 801ff32:	4770      	bx	lr
 801ff34:	2902      	cmp	r1, #2
 801ff36:	d0f9      	beq.n	801ff2c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801ff38:	2903      	cmp	r1, #3
 801ff3a:	d0f2      	beq.n	801ff22 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801ff3c:	2901      	cmp	r1, #1
 801ff3e:	d1f2      	bne.n	801ff26 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801ff40:	f04f 30ff 	mov.w	r0, #4294967295
 801ff44:	4770      	bx	lr
 801ff46:	bf00      	nop
 801ff48:	2000b3ce 	.word	0x2000b3ce

0801ff4c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801ff4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff50:	b097      	sub	sp, #92	; 0x5c
 801ff52:	910b      	str	r1, [sp, #44]	; 0x2c
 801ff54:	a912      	add	r1, sp, #72	; 0x48
 801ff56:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801ff5a:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801ff5e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801ff62:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801ff66:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801ff6a:	e881 000c 	stmia.w	r1, {r2, r3}
 801ff6e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801ff72:	9308      	str	r3, [sp, #32]
 801ff74:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801ff78:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801ff7c:	9310      	str	r3, [sp, #64]	; 0x40
 801ff7e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801ff82:	798d      	ldrb	r5, [r1, #6]
 801ff84:	930c      	str	r3, [sp, #48]	; 0x30
 801ff86:	7b4b      	ldrb	r3, [r1, #13]
 801ff88:	0158      	lsls	r0, r3, #5
 801ff8a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801ff8e:	4328      	orrs	r0, r5
 801ff90:	9007      	str	r0, [sp, #28]
 801ff92:	f000 8184 	beq.w	802029e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801ff96:	011b      	lsls	r3, r3, #4
 801ff98:	79c8      	ldrb	r0, [r1, #7]
 801ff9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ff9e:	4303      	orrs	r3, r0
 801ffa0:	9309      	str	r3, [sp, #36]	; 0x24
 801ffa2:	f000 817c 	beq.w	802029e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801ffa6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801ffaa:	b29b      	uxth	r3, r3
 801ffac:	2f00      	cmp	r7, #0
 801ffae:	f000 8122 	beq.w	80201f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 801ffb2:	1aff      	subs	r7, r7, r3
 801ffb4:	b2bf      	uxth	r7, r7
 801ffb6:	043b      	lsls	r3, r7, #16
 801ffb8:	d502      	bpl.n	801ffc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ffba:	1bf6      	subs	r6, r6, r7
 801ffbc:	2700      	movs	r7, #0
 801ffbe:	b236      	sxth	r6, r6
 801ffc0:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ffc4:	a812      	add	r0, sp, #72	; 0x48
 801ffc6:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801ffca:	428e      	cmp	r6, r1
 801ffcc:	b28b      	uxth	r3, r1
 801ffce:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801ffd2:	bfbf      	itttt	lt
 801ffd4:	18ff      	addlt	r7, r7, r3
 801ffd6:	1bbe      	sublt	r6, r7, r6
 801ffd8:	b2b7      	uxthlt	r7, r6
 801ffda:	460e      	movlt	r6, r1
 801ffdc:	8891      	ldrh	r1, [r2, #4]
 801ffde:	440b      	add	r3, r1
 801ffe0:	4631      	mov	r1, r6
 801ffe2:	b21b      	sxth	r3, r3
 801ffe4:	930f      	str	r3, [sp, #60]	; 0x3c
 801ffe6:	88d3      	ldrh	r3, [r2, #6]
 801ffe8:	9a08      	ldr	r2, [sp, #32]
 801ffea:	449a      	add	sl, r3
 801ffec:	fa0f f38a 	sxth.w	r3, sl
 801fff0:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 801fff4:	930e      	str	r3, [sp, #56]	; 0x38
 801fff6:	4bb2      	ldr	r3, [pc, #712]	; (80202c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 801fff8:	f893 b000 	ldrb.w	fp, [r3]
 801fffc:	f10b 3cff 	add.w	ip, fp, #4294967295
 8020000:	f1dc 0300 	rsbs	r3, ip, #0
 8020004:	eb43 030c 	adc.w	r3, r3, ip
 8020008:	930d      	str	r3, [sp, #52]	; 0x34
 802000a:	464b      	mov	r3, r9
 802000c:	f7fa f8f2 	bl	801a1f4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8020010:	4631      	mov	r1, r6
 8020012:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8020016:	464b      	mov	r3, r9
 8020018:	9a08      	ldr	r2, [sp, #32]
 802001a:	a812      	add	r0, sp, #72	; 0x48
 802001c:	f7fa f902 	bl	801a224 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8020020:	a916      	add	r1, sp, #88	; 0x58
 8020022:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8020026:	a815      	add	r0, sp, #84	; 0x54
 8020028:	f7fa fd58 	bl	801aadc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802002c:	f1b9 0f00 	cmp.w	r9, #0
 8020030:	f040 80e4 	bne.w	80201fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b0>
 8020034:	f1bb 0f01 	cmp.w	fp, #1
 8020038:	f040 80e8 	bne.w	802020c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c0>
 802003c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802003e:	2b00      	cmp	r3, #0
 8020040:	f040 8132 	bne.w	80202a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 8020044:	4b9f      	ldr	r3, [pc, #636]	; (80202c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8020046:	6818      	ldr	r0, [r3, #0]
 8020048:	6803      	ldr	r3, [r0, #0]
 802004a:	6a1b      	ldr	r3, [r3, #32]
 802004c:	4798      	blx	r3
 802004e:	4a9e      	ldr	r2, [pc, #632]	; (80202c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8020050:	f1b8 0f01 	cmp.w	r8, #1
 8020054:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8020058:	8811      	ldrh	r1, [r2, #0]
 802005a:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 802005e:	fb01 2303 	mla	r3, r1, r3, r2
 8020062:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020066:	4403      	add	r3, r0
 8020068:	9309      	str	r3, [sp, #36]	; 0x24
 802006a:	f04f 0301 	mov.w	r3, #1
 802006e:	fa03 f308 	lsl.w	r3, r3, r8
 8020072:	f103 33ff 	add.w	r3, r3, #4294967295
 8020076:	b2db      	uxtb	r3, r3
 8020078:	9311      	str	r3, [sp, #68]	; 0x44
 802007a:	f000 8117 	beq.w	80202ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 802007e:	f1b8 0f02 	cmp.w	r8, #2
 8020082:	f000 8115 	beq.w	80202b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x364>
 8020086:	f1b8 0f04 	cmp.w	r8, #4
 802008a:	bf14      	ite	ne
 802008c:	2301      	movne	r3, #1
 802008e:	2311      	moveq	r3, #17
 8020090:	930a      	str	r3, [sp, #40]	; 0x28
 8020092:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020094:	b153      	cbz	r3, 80200ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 8020096:	2508      	movs	r5, #8
 8020098:	9a07      	ldr	r2, [sp, #28]
 802009a:	fb95 f3f8 	sdiv	r3, r5, r8
 802009e:	1e5d      	subs	r5, r3, #1
 80200a0:	4415      	add	r5, r2
 80200a2:	fb95 f5f3 	sdiv	r5, r5, r3
 80200a6:	fb15 f503 	smulbb	r5, r5, r3
 80200aa:	b2ad      	uxth	r5, r5
 80200ac:	b907      	cbnz	r7, 80200b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x164>
 80200ae:	b174      	cbz	r4, 80200ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x182>
 80200b0:	fb15 7304 	smlabb	r3, r5, r4, r7
 80200b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80200b6:	ebaa 0a04 	sub.w	sl, sl, r4
 80200ba:	fb13 f308 	smulbb	r3, r3, r8
 80200be:	fa1f fa8a 	uxth.w	sl, sl
 80200c2:	b29b      	uxth	r3, r3
 80200c4:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80200c8:	f003 0407 	and.w	r4, r3, #7
 80200cc:	9226      	str	r2, [sp, #152]	; 0x98
 80200ce:	4649      	mov	r1, r9
 80200d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80200d2:	f7ff ff03 	bl	801fedc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 80200d6:	4649      	mov	r1, r9
 80200d8:	4683      	mov	fp, r0
 80200da:	980d      	ldr	r0, [sp, #52]	; 0x34
 80200dc:	f7ff ff1a 	bl	801ff14 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 80200e0:	9a08      	ldr	r2, [sp, #32]
 80200e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80200e4:	1bf6      	subs	r6, r6, r7
 80200e6:	1a9b      	subs	r3, r3, r2
 80200e8:	459a      	cmp	sl, r3
 80200ea:	bfa8      	it	ge
 80200ec:	469a      	movge	sl, r3
 80200ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80200f0:	1b9e      	subs	r6, r3, r6
 80200f2:	9b07      	ldr	r3, [sp, #28]
 80200f4:	429e      	cmp	r6, r3
 80200f6:	bfd4      	ite	le
 80200f8:	ebc7 0706 	rsble	r7, r7, r6
 80200fc:	ebc7 0703 	rsbgt	r7, r7, r3
 8020100:	1bed      	subs	r5, r5, r7
 8020102:	fb0b 0017 	mls	r0, fp, r7, r0
 8020106:	fb08 f305 	mul.w	r3, r8, r5
 802010a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802010e:	9308      	str	r3, [sp, #32]
 8020110:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020112:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8020116:	930d      	str	r3, [sp, #52]	; 0x34
 8020118:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802011a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802011e:	930e      	str	r3, [sp, #56]	; 0x38
 8020120:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020122:	b2de      	uxtb	r6, r3
 8020124:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020126:	781a      	ldrb	r2, [r3, #0]
 8020128:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 802012c:	ea27 7be7 	bic.w	fp, r7, r7, asr #31
 8020130:	4122      	asrs	r2, r4
 8020132:	9307      	str	r3, [sp, #28]
 8020134:	fb03 0b0b 	mla	fp, r3, fp, r0
 8020138:	b2d2      	uxtb	r2, r2
 802013a:	f1ba 0f00 	cmp.w	sl, #0
 802013e:	f340 80d8 	ble.w	80202f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a6>
 8020142:	46be      	mov	lr, r7
 8020144:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020146:	f1be 0f00 	cmp.w	lr, #0
 802014a:	f340 80bf 	ble.w	80202cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 802014e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020150:	4013      	ands	r3, r2
 8020152:	d03e      	beq.n	80201d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 8020154:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020156:	fb13 f300 	smulbb	r3, r3, r0
 802015a:	2bfe      	cmp	r3, #254	; 0xfe
 802015c:	dd03      	ble.n	8020166 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x21a>
 802015e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020160:	28ff      	cmp	r0, #255	; 0xff
 8020162:	f000 80a7 	beq.w	80202b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x368>
 8020166:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020168:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802016a:	fb10 f303 	smulbb	r3, r0, r3
 802016e:	b29b      	uxth	r3, r3
 8020170:	1c58      	adds	r0, r3, #1
 8020172:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020176:	7808      	ldrb	r0, [r1, #0]
 8020178:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802017c:	fa1f fc83 	uxth.w	ip, r3
 8020180:	43db      	mvns	r3, r3
 8020182:	fb16 f90c 	smulbb	r9, r6, ip
 8020186:	b2db      	uxtb	r3, r3
 8020188:	fb00 9003 	mla	r0, r0, r3, r9
 802018c:	b280      	uxth	r0, r0
 802018e:	f100 0901 	add.w	r9, r0, #1
 8020192:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8020196:	fb15 f90c 	smulbb	r9, r5, ip
 802019a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802019c:	1200      	asrs	r0, r0, #8
 802019e:	fb15 fc0c 	smulbb	ip, r5, ip
 80201a2:	7008      	strb	r0, [r1, #0]
 80201a4:	7848      	ldrb	r0, [r1, #1]
 80201a6:	fb00 9003 	mla	r0, r0, r3, r9
 80201aa:	b280      	uxth	r0, r0
 80201ac:	f100 0901 	add.w	r9, r0, #1
 80201b0:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80201b4:	1200      	asrs	r0, r0, #8
 80201b6:	7048      	strb	r0, [r1, #1]
 80201b8:	7888      	ldrb	r0, [r1, #2]
 80201ba:	fb00 cc03 	mla	ip, r0, r3, ip
 80201be:	fa1f fc8c 	uxth.w	ip, ip
 80201c2:	f10c 0301 	add.w	r3, ip, #1
 80201c6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80201ca:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80201ce:	f881 c002 	strb.w	ip, [r1, #2]
 80201d2:	4444      	add	r4, r8
 80201d4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80201d8:	b2a4      	uxth	r4, r4
 80201da:	2c07      	cmp	r4, #7
 80201dc:	bf89      	itett	hi
 80201de:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80201e0:	fa42 f208 	asrls.w	r2, r2, r8
 80201e4:	2400      	movhi	r4, #0
 80201e6:	785a      	ldrbhi	r2, [r3, #1]
 80201e8:	bf8a      	itet	hi
 80201ea:	3301      	addhi	r3, #1
 80201ec:	b2d2      	uxtbls	r2, r2
 80201ee:	9326      	strhi	r3, [sp, #152]	; 0x98
 80201f0:	9b07      	ldr	r3, [sp, #28]
 80201f2:	4419      	add	r1, r3
 80201f4:	e7a7      	b.n	8020146 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 80201f6:	441e      	add	r6, r3
 80201f8:	b236      	sxth	r6, r6
 80201fa:	e6e1      	b.n	801ffc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80201fc:	f1b9 0f01 	cmp.w	r9, #1
 8020200:	f47f af1c 	bne.w	802003c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020204:	f1bb 0f01 	cmp.w	fp, #1
 8020208:	f47f af18 	bne.w	802003c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802020c:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 80202c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8020210:	f8db 0000 	ldr.w	r0, [fp]
 8020214:	6803      	ldr	r3, [r0, #0]
 8020216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020218:	4798      	blx	r3
 802021a:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 802021e:	465a      	mov	r2, fp
 8020220:	d006      	beq.n	8020230 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 8020222:	f1b8 0f04 	cmp.w	r8, #4
 8020226:	d13d      	bne.n	80202a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x358>
 8020228:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802022a:	3300      	adds	r3, #0
 802022c:	bf18      	it	ne
 802022e:	2301      	movne	r3, #1
 8020230:	05c0      	lsls	r0, r0, #23
 8020232:	d567      	bpl.n	8020304 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 8020234:	f1b8 0f08 	cmp.w	r8, #8
 8020238:	d164      	bne.n	8020304 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 802023a:	2b00      	cmp	r3, #0
 802023c:	bf0c      	ite	eq
 802023e:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8020242:	2180      	movne	r1, #128	; 0x80
 8020244:	2f00      	cmp	r7, #0
 8020246:	f47f aef9 	bne.w	802003c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802024a:	2c00      	cmp	r4, #0
 802024c:	f47f aef6 	bne.w	802003c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8020250:	9b07      	ldr	r3, [sp, #28]
 8020252:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020254:	18f3      	adds	r3, r6, r3
 8020256:	4283      	cmp	r3, r0
 8020258:	f73f aef0 	bgt.w	802003c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802025c:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
 8020260:	4403      	add	r3, r0
 8020262:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020264:	4283      	cmp	r3, r0
 8020266:	f73f aee9 	bgt.w	802003c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802026a:	f1b8 0f08 	cmp.w	r8, #8
 802026e:	6810      	ldr	r0, [r2, #0]
 8020270:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8020274:	bf18      	it	ne
 8020276:	3501      	addne	r5, #1
 8020278:	6804      	ldr	r4, [r0, #0]
 802027a:	9105      	str	r1, [sp, #20]
 802027c:	bf18      	it	ne
 802027e:	f025 0501 	bicne.w	r5, r5, #1
 8020282:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020284:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8020288:	bf18      	it	ne
 802028a:	b2ad      	uxthne	r5, r5
 802028c:	9104      	str	r1, [sp, #16]
 802028e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020290:	e9cd 5a00 	strd	r5, sl, [sp]
 8020294:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8020298:	9926      	ldr	r1, [sp, #152]	; 0x98
 802029a:	6c24      	ldr	r4, [r4, #64]	; 0x40
 802029c:	47a0      	blx	r4
 802029e:	b017      	add	sp, #92	; 0x5c
 80202a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202a4:	2300      	movs	r3, #0
 80202a6:	e7c3      	b.n	8020230 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 80202a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80202aa:	e6d0      	b.n	802004e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 80202ac:	23ff      	movs	r3, #255	; 0xff
 80202ae:	e6ef      	b.n	8020090 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 80202b0:	2355      	movs	r3, #85	; 0x55
 80202b2:	e6ed      	b.n	8020090 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 80202b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80202b6:	700e      	strb	r6, [r1, #0]
 80202b8:	704b      	strb	r3, [r1, #1]
 80202ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80202bc:	708b      	strb	r3, [r1, #2]
 80202be:	e788      	b.n	80201d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 80202c0:	2000b3cc 	.word	0x2000b3cc
 80202c4:	2000b3d4 	.word	0x2000b3d4
 80202c8:	2000b3ce 	.word	0x2000b3ce
 80202cc:	9b08      	ldr	r3, [sp, #32]
 80202ce:	b153      	cbz	r3, 80202e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 80202d0:	441c      	add	r4, r3
 80202d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80202d4:	b2a4      	uxth	r4, r4
 80202d6:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80202da:	f004 0407 	and.w	r4, r4, #7
 80202de:	781a      	ldrb	r2, [r3, #0]
 80202e0:	9326      	str	r3, [sp, #152]	; 0x98
 80202e2:	4122      	asrs	r2, r4
 80202e4:	b2d2      	uxtb	r2, r2
 80202e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80202ec:	445b      	add	r3, fp
 80202ee:	9309      	str	r3, [sp, #36]	; 0x24
 80202f0:	e723      	b.n	802013a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 80202f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80202f4:	2b00      	cmp	r3, #0
 80202f6:	d1d2      	bne.n	802029e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 80202f8:	4b05      	ldr	r3, [pc, #20]	; (8020310 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c4>)
 80202fa:	6818      	ldr	r0, [r3, #0]
 80202fc:	6803      	ldr	r3, [r0, #0]
 80202fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020300:	4798      	blx	r3
 8020302:	e7cc      	b.n	802029e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8020304:	2b00      	cmp	r3, #0
 8020306:	f43f ae99 	beq.w	802003c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802030a:	2180      	movs	r1, #128	; 0x80
 802030c:	e79a      	b.n	8020244 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 802030e:	bf00      	nop
 8020310:	2000b3d4 	.word	0x2000b3d4

08020314 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8020314:	b538      	push	{r3, r4, r5, lr}
 8020316:	4c15      	ldr	r4, [pc, #84]	; (802036c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8020318:	4605      	mov	r5, r0
 802031a:	7823      	ldrb	r3, [r4, #0]
 802031c:	f3bf 8f5b 	dmb	ish
 8020320:	07da      	lsls	r2, r3, #31
 8020322:	d40b      	bmi.n	802033c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020324:	4620      	mov	r0, r4
 8020326:	f006 fd67 	bl	8026df8 <__cxa_guard_acquire>
 802032a:	b138      	cbz	r0, 802033c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802032c:	4620      	mov	r0, r4
 802032e:	f006 fd6f 	bl	8026e10 <__cxa_guard_release>
 8020332:	4a0f      	ldr	r2, [pc, #60]	; (8020370 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020334:	490f      	ldr	r1, [pc, #60]	; (8020374 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8020336:	4810      	ldr	r0, [pc, #64]	; (8020378 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020338:	f006 fd54 	bl	8026de4 <__aeabi_atexit>
 802033c:	4c0f      	ldr	r4, [pc, #60]	; (802037c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802033e:	7823      	ldrb	r3, [r4, #0]
 8020340:	f3bf 8f5b 	dmb	ish
 8020344:	07db      	lsls	r3, r3, #31
 8020346:	d40b      	bmi.n	8020360 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020348:	4620      	mov	r0, r4
 802034a:	f006 fd55 	bl	8026df8 <__cxa_guard_acquire>
 802034e:	b138      	cbz	r0, 8020360 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020350:	4620      	mov	r0, r4
 8020352:	f006 fd5d 	bl	8026e10 <__cxa_guard_release>
 8020356:	4a06      	ldr	r2, [pc, #24]	; (8020370 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020358:	4909      	ldr	r1, [pc, #36]	; (8020380 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802035a:	480a      	ldr	r0, [pc, #40]	; (8020384 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802035c:	f006 fd42 	bl	8026de4 <__aeabi_atexit>
 8020360:	4b05      	ldr	r3, [pc, #20]	; (8020378 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020362:	612b      	str	r3, [r5, #16]
 8020364:	4b07      	ldr	r3, [pc, #28]	; (8020384 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020366:	616b      	str	r3, [r5, #20]
 8020368:	bd38      	pop	{r3, r4, r5, pc}
 802036a:	bf00      	nop
 802036c:	2000b4e0 	.word	0x2000b4e0
 8020370:	20000000 	.word	0x20000000
 8020374:	0801ecf3 	.word	0x0801ecf3
 8020378:	20000084 	.word	0x20000084
 802037c:	2000b4e4 	.word	0x2000b4e4
 8020380:	0801ecf1 	.word	0x0801ecf1
 8020384:	20000088 	.word	0x20000088

08020388 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8020388:	b538      	push	{r3, r4, r5, lr}
 802038a:	4c15      	ldr	r4, [pc, #84]	; (80203e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 802038c:	4605      	mov	r5, r0
 802038e:	7823      	ldrb	r3, [r4, #0]
 8020390:	f3bf 8f5b 	dmb	ish
 8020394:	07da      	lsls	r2, r3, #31
 8020396:	d40b      	bmi.n	80203b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020398:	4620      	mov	r0, r4
 802039a:	f006 fd2d 	bl	8026df8 <__cxa_guard_acquire>
 802039e:	b138      	cbz	r0, 80203b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80203a0:	4620      	mov	r0, r4
 80203a2:	f006 fd35 	bl	8026e10 <__cxa_guard_release>
 80203a6:	4a0f      	ldr	r2, [pc, #60]	; (80203e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80203a8:	490f      	ldr	r1, [pc, #60]	; (80203e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80203aa:	4810      	ldr	r0, [pc, #64]	; (80203ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80203ac:	f006 fd1a 	bl	8026de4 <__aeabi_atexit>
 80203b0:	4c0f      	ldr	r4, [pc, #60]	; (80203f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80203b2:	7823      	ldrb	r3, [r4, #0]
 80203b4:	f3bf 8f5b 	dmb	ish
 80203b8:	07db      	lsls	r3, r3, #31
 80203ba:	d40b      	bmi.n	80203d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80203bc:	4620      	mov	r0, r4
 80203be:	f006 fd1b 	bl	8026df8 <__cxa_guard_acquire>
 80203c2:	b138      	cbz	r0, 80203d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80203c4:	4620      	mov	r0, r4
 80203c6:	f006 fd23 	bl	8026e10 <__cxa_guard_release>
 80203ca:	4a06      	ldr	r2, [pc, #24]	; (80203e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80203cc:	4909      	ldr	r1, [pc, #36]	; (80203f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80203ce:	480a      	ldr	r0, [pc, #40]	; (80203f8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80203d0:	f006 fd08 	bl	8026de4 <__aeabi_atexit>
 80203d4:	4b05      	ldr	r3, [pc, #20]	; (80203ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80203d6:	60ab      	str	r3, [r5, #8]
 80203d8:	4b07      	ldr	r3, [pc, #28]	; (80203f8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80203da:	60eb      	str	r3, [r5, #12]
 80203dc:	bd38      	pop	{r3, r4, r5, pc}
 80203de:	bf00      	nop
 80203e0:	2000b4c0 	.word	0x2000b4c0
 80203e4:	20000000 	.word	0x20000000
 80203e8:	0801ecf7 	.word	0x0801ecf7
 80203ec:	20000064 	.word	0x20000064
 80203f0:	2000b4c4 	.word	0x2000b4c4
 80203f4:	0801ecf5 	.word	0x0801ecf5
 80203f8:	20000068 	.word	0x20000068

080203fc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80203fc:	b510      	push	{r4, lr}
 80203fe:	4604      	mov	r4, r0
 8020400:	f7ff ff88 	bl	8020314 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8020404:	4620      	mov	r0, r4
 8020406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802040a:	f7ff bfbd 	b.w	8020388 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08020410 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8020410:	b538      	push	{r3, r4, r5, lr}
 8020412:	4c15      	ldr	r4, [pc, #84]	; (8020468 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8020414:	4605      	mov	r5, r0
 8020416:	7823      	ldrb	r3, [r4, #0]
 8020418:	f3bf 8f5b 	dmb	ish
 802041c:	07da      	lsls	r2, r3, #31
 802041e:	d40b      	bmi.n	8020438 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8020420:	4620      	mov	r0, r4
 8020422:	f006 fce9 	bl	8026df8 <__cxa_guard_acquire>
 8020426:	b138      	cbz	r0, 8020438 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8020428:	4620      	mov	r0, r4
 802042a:	f006 fcf1 	bl	8026e10 <__cxa_guard_release>
 802042e:	4a0f      	ldr	r2, [pc, #60]	; (802046c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8020430:	490f      	ldr	r1, [pc, #60]	; (8020470 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8020432:	4810      	ldr	r0, [pc, #64]	; (8020474 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8020434:	f006 fcd6 	bl	8026de4 <__aeabi_atexit>
 8020438:	4c0f      	ldr	r4, [pc, #60]	; (8020478 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 802043a:	7823      	ldrb	r3, [r4, #0]
 802043c:	f3bf 8f5b 	dmb	ish
 8020440:	07db      	lsls	r3, r3, #31
 8020442:	d40b      	bmi.n	802045c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8020444:	4620      	mov	r0, r4
 8020446:	f006 fcd7 	bl	8026df8 <__cxa_guard_acquire>
 802044a:	b138      	cbz	r0, 802045c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802044c:	4620      	mov	r0, r4
 802044e:	f006 fcdf 	bl	8026e10 <__cxa_guard_release>
 8020452:	4a06      	ldr	r2, [pc, #24]	; (802046c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8020454:	4909      	ldr	r1, [pc, #36]	; (802047c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8020456:	480a      	ldr	r0, [pc, #40]	; (8020480 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8020458:	f006 fcc4 	bl	8026de4 <__aeabi_atexit>
 802045c:	4b05      	ldr	r3, [pc, #20]	; (8020474 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802045e:	622b      	str	r3, [r5, #32]
 8020460:	4b07      	ldr	r3, [pc, #28]	; (8020480 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8020462:	626b      	str	r3, [r5, #36]	; 0x24
 8020464:	bd38      	pop	{r3, r4, r5, pc}
 8020466:	bf00      	nop
 8020468:	2000b4e8 	.word	0x2000b4e8
 802046c:	20000000 	.word	0x20000000
 8020470:	0801eceb 	.word	0x0801eceb
 8020474:	2000008c 	.word	0x2000008c
 8020478:	2000b4ec 	.word	0x2000b4ec
 802047c:	0801ece9 	.word	0x0801ece9
 8020480:	20000090 	.word	0x20000090

08020484 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8020484:	b538      	push	{r3, r4, r5, lr}
 8020486:	4c15      	ldr	r4, [pc, #84]	; (80204dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8020488:	4605      	mov	r5, r0
 802048a:	7823      	ldrb	r3, [r4, #0]
 802048c:	f3bf 8f5b 	dmb	ish
 8020490:	07da      	lsls	r2, r3, #31
 8020492:	d40b      	bmi.n	80204ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020494:	4620      	mov	r0, r4
 8020496:	f006 fcaf 	bl	8026df8 <__cxa_guard_acquire>
 802049a:	b138      	cbz	r0, 80204ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 802049c:	4620      	mov	r0, r4
 802049e:	f006 fcb7 	bl	8026e10 <__cxa_guard_release>
 80204a2:	4a0f      	ldr	r2, [pc, #60]	; (80204e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80204a4:	490f      	ldr	r1, [pc, #60]	; (80204e4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80204a6:	4810      	ldr	r0, [pc, #64]	; (80204e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80204a8:	f006 fc9c 	bl	8026de4 <__aeabi_atexit>
 80204ac:	4c0f      	ldr	r4, [pc, #60]	; (80204ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80204ae:	7823      	ldrb	r3, [r4, #0]
 80204b0:	f3bf 8f5b 	dmb	ish
 80204b4:	07db      	lsls	r3, r3, #31
 80204b6:	d40b      	bmi.n	80204d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80204b8:	4620      	mov	r0, r4
 80204ba:	f006 fc9d 	bl	8026df8 <__cxa_guard_acquire>
 80204be:	b138      	cbz	r0, 80204d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80204c0:	4620      	mov	r0, r4
 80204c2:	f006 fca5 	bl	8026e10 <__cxa_guard_release>
 80204c6:	4a06      	ldr	r2, [pc, #24]	; (80204e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80204c8:	4909      	ldr	r1, [pc, #36]	; (80204f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80204ca:	480a      	ldr	r0, [pc, #40]	; (80204f4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80204cc:	f006 fc8a 	bl	8026de4 <__aeabi_atexit>
 80204d0:	4b05      	ldr	r3, [pc, #20]	; (80204e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80204d2:	61ab      	str	r3, [r5, #24]
 80204d4:	4b07      	ldr	r3, [pc, #28]	; (80204f4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80204d6:	61eb      	str	r3, [r5, #28]
 80204d8:	bd38      	pop	{r3, r4, r5, pc}
 80204da:	bf00      	nop
 80204dc:	2000b4c8 	.word	0x2000b4c8
 80204e0:	20000000 	.word	0x20000000
 80204e4:	0801ecef 	.word	0x0801ecef
 80204e8:	2000006c 	.word	0x2000006c
 80204ec:	2000b4cc 	.word	0x2000b4cc
 80204f0:	0801eced 	.word	0x0801eced
 80204f4:	20000070 	.word	0x20000070

080204f8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80204f8:	b510      	push	{r4, lr}
 80204fa:	4604      	mov	r4, r0
 80204fc:	f7ff ff88 	bl	8020410 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8020500:	4620      	mov	r0, r4
 8020502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020506:	f7ff bfbd 	b.w	8020484 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0802050c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 802050c:	b538      	push	{r3, r4, r5, lr}
 802050e:	4c15      	ldr	r4, [pc, #84]	; (8020564 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8020510:	4605      	mov	r5, r0
 8020512:	7823      	ldrb	r3, [r4, #0]
 8020514:	f3bf 8f5b 	dmb	ish
 8020518:	07da      	lsls	r2, r3, #31
 802051a:	d40b      	bmi.n	8020534 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 802051c:	4620      	mov	r0, r4
 802051e:	f006 fc6b 	bl	8026df8 <__cxa_guard_acquire>
 8020522:	b138      	cbz	r0, 8020534 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8020524:	4620      	mov	r0, r4
 8020526:	f006 fc73 	bl	8026e10 <__cxa_guard_release>
 802052a:	4a0f      	ldr	r2, [pc, #60]	; (8020568 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 802052c:	490f      	ldr	r1, [pc, #60]	; (802056c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 802052e:	4810      	ldr	r0, [pc, #64]	; (8020570 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8020530:	f006 fc58 	bl	8026de4 <__aeabi_atexit>
 8020534:	4c0f      	ldr	r4, [pc, #60]	; (8020574 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8020536:	7823      	ldrb	r3, [r4, #0]
 8020538:	f3bf 8f5b 	dmb	ish
 802053c:	07db      	lsls	r3, r3, #31
 802053e:	d40b      	bmi.n	8020558 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8020540:	4620      	mov	r0, r4
 8020542:	f006 fc59 	bl	8026df8 <__cxa_guard_acquire>
 8020546:	b138      	cbz	r0, 8020558 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8020548:	4620      	mov	r0, r4
 802054a:	f006 fc61 	bl	8026e10 <__cxa_guard_release>
 802054e:	4a06      	ldr	r2, [pc, #24]	; (8020568 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8020550:	4909      	ldr	r1, [pc, #36]	; (8020578 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8020552:	480a      	ldr	r0, [pc, #40]	; (802057c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8020554:	f006 fc46 	bl	8026de4 <__aeabi_atexit>
 8020558:	4b05      	ldr	r3, [pc, #20]	; (8020570 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 802055a:	632b      	str	r3, [r5, #48]	; 0x30
 802055c:	4b07      	ldr	r3, [pc, #28]	; (802057c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802055e:	636b      	str	r3, [r5, #52]	; 0x34
 8020560:	bd38      	pop	{r3, r4, r5, pc}
 8020562:	bf00      	nop
 8020564:	2000b4d0 	.word	0x2000b4d0
 8020568:	20000000 	.word	0x20000000
 802056c:	0801ece3 	.word	0x0801ece3
 8020570:	20000074 	.word	0x20000074
 8020574:	2000b4d4 	.word	0x2000b4d4
 8020578:	0801ece1 	.word	0x0801ece1
 802057c:	20000078 	.word	0x20000078

08020580 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8020580:	b538      	push	{r3, r4, r5, lr}
 8020582:	4c15      	ldr	r4, [pc, #84]	; (80205d8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8020584:	4605      	mov	r5, r0
 8020586:	7823      	ldrb	r3, [r4, #0]
 8020588:	f3bf 8f5b 	dmb	ish
 802058c:	07da      	lsls	r2, r3, #31
 802058e:	d40b      	bmi.n	80205a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8020590:	4620      	mov	r0, r4
 8020592:	f006 fc31 	bl	8026df8 <__cxa_guard_acquire>
 8020596:	b138      	cbz	r0, 80205a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8020598:	4620      	mov	r0, r4
 802059a:	f006 fc39 	bl	8026e10 <__cxa_guard_release>
 802059e:	4a0f      	ldr	r2, [pc, #60]	; (80205dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80205a0:	490f      	ldr	r1, [pc, #60]	; (80205e0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 80205a2:	4810      	ldr	r0, [pc, #64]	; (80205e4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80205a4:	f006 fc1e 	bl	8026de4 <__aeabi_atexit>
 80205a8:	4c0f      	ldr	r4, [pc, #60]	; (80205e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 80205aa:	7823      	ldrb	r3, [r4, #0]
 80205ac:	f3bf 8f5b 	dmb	ish
 80205b0:	07db      	lsls	r3, r3, #31
 80205b2:	d40b      	bmi.n	80205cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80205b4:	4620      	mov	r0, r4
 80205b6:	f006 fc1f 	bl	8026df8 <__cxa_guard_acquire>
 80205ba:	b138      	cbz	r0, 80205cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80205bc:	4620      	mov	r0, r4
 80205be:	f006 fc27 	bl	8026e10 <__cxa_guard_release>
 80205c2:	4a06      	ldr	r2, [pc, #24]	; (80205dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80205c4:	4909      	ldr	r1, [pc, #36]	; (80205ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 80205c6:	480a      	ldr	r0, [pc, #40]	; (80205f0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80205c8:	f006 fc0c 	bl	8026de4 <__aeabi_atexit>
 80205cc:	4b05      	ldr	r3, [pc, #20]	; (80205e4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80205ce:	62ab      	str	r3, [r5, #40]	; 0x28
 80205d0:	4b07      	ldr	r3, [pc, #28]	; (80205f0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80205d2:	62eb      	str	r3, [r5, #44]	; 0x2c
 80205d4:	bd38      	pop	{r3, r4, r5, pc}
 80205d6:	bf00      	nop
 80205d8:	2000b4a8 	.word	0x2000b4a8
 80205dc:	20000000 	.word	0x20000000
 80205e0:	0801ece7 	.word	0x0801ece7
 80205e4:	2000004c 	.word	0x2000004c
 80205e8:	2000b4ac 	.word	0x2000b4ac
 80205ec:	0801ece5 	.word	0x0801ece5
 80205f0:	20000050 	.word	0x20000050

080205f4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80205f4:	b510      	push	{r4, lr}
 80205f6:	4604      	mov	r4, r0
 80205f8:	f7ff ff88 	bl	802050c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80205fc:	4620      	mov	r0, r4
 80205fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020602:	f7ff bfbd 	b.w	8020580 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08020608 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8020608:	b538      	push	{r3, r4, r5, lr}
 802060a:	4c15      	ldr	r4, [pc, #84]	; (8020660 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 802060c:	4605      	mov	r5, r0
 802060e:	7823      	ldrb	r3, [r4, #0]
 8020610:	f3bf 8f5b 	dmb	ish
 8020614:	07da      	lsls	r2, r3, #31
 8020616:	d40b      	bmi.n	8020630 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8020618:	4620      	mov	r0, r4
 802061a:	f006 fbed 	bl	8026df8 <__cxa_guard_acquire>
 802061e:	b138      	cbz	r0, 8020630 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8020620:	4620      	mov	r0, r4
 8020622:	f006 fbf5 	bl	8026e10 <__cxa_guard_release>
 8020626:	4a0f      	ldr	r2, [pc, #60]	; (8020664 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8020628:	490f      	ldr	r1, [pc, #60]	; (8020668 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 802062a:	4810      	ldr	r0, [pc, #64]	; (802066c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802062c:	f006 fbda 	bl	8026de4 <__aeabi_atexit>
 8020630:	4c0f      	ldr	r4, [pc, #60]	; (8020670 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8020632:	7823      	ldrb	r3, [r4, #0]
 8020634:	f3bf 8f5b 	dmb	ish
 8020638:	07db      	lsls	r3, r3, #31
 802063a:	d40b      	bmi.n	8020654 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 802063c:	4620      	mov	r0, r4
 802063e:	f006 fbdb 	bl	8026df8 <__cxa_guard_acquire>
 8020642:	b138      	cbz	r0, 8020654 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8020644:	4620      	mov	r0, r4
 8020646:	f006 fbe3 	bl	8026e10 <__cxa_guard_release>
 802064a:	4a06      	ldr	r2, [pc, #24]	; (8020664 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 802064c:	4909      	ldr	r1, [pc, #36]	; (8020674 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802064e:	480a      	ldr	r0, [pc, #40]	; (8020678 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8020650:	f006 fbc8 	bl	8026de4 <__aeabi_atexit>
 8020654:	4b05      	ldr	r3, [pc, #20]	; (802066c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8020656:	642b      	str	r3, [r5, #64]	; 0x40
 8020658:	4b07      	ldr	r3, [pc, #28]	; (8020678 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802065a:	646b      	str	r3, [r5, #68]	; 0x44
 802065c:	bd38      	pop	{r3, r4, r5, pc}
 802065e:	bf00      	nop
 8020660:	2000b4d8 	.word	0x2000b4d8
 8020664:	20000000 	.word	0x20000000
 8020668:	0801ecdb 	.word	0x0801ecdb
 802066c:	2000007c 	.word	0x2000007c
 8020670:	2000b4dc 	.word	0x2000b4dc
 8020674:	0801ecd9 	.word	0x0801ecd9
 8020678:	20000080 	.word	0x20000080

0802067c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 802067c:	b538      	push	{r3, r4, r5, lr}
 802067e:	4c15      	ldr	r4, [pc, #84]	; (80206d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8020680:	4605      	mov	r5, r0
 8020682:	7823      	ldrb	r3, [r4, #0]
 8020684:	f3bf 8f5b 	dmb	ish
 8020688:	07da      	lsls	r2, r3, #31
 802068a:	d40b      	bmi.n	80206a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802068c:	4620      	mov	r0, r4
 802068e:	f006 fbb3 	bl	8026df8 <__cxa_guard_acquire>
 8020692:	b138      	cbz	r0, 80206a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8020694:	4620      	mov	r0, r4
 8020696:	f006 fbbb 	bl	8026e10 <__cxa_guard_release>
 802069a:	4a0f      	ldr	r2, [pc, #60]	; (80206d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802069c:	490f      	ldr	r1, [pc, #60]	; (80206dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802069e:	4810      	ldr	r0, [pc, #64]	; (80206e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80206a0:	f006 fba0 	bl	8026de4 <__aeabi_atexit>
 80206a4:	4c0f      	ldr	r4, [pc, #60]	; (80206e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80206a6:	7823      	ldrb	r3, [r4, #0]
 80206a8:	f3bf 8f5b 	dmb	ish
 80206ac:	07db      	lsls	r3, r3, #31
 80206ae:	d40b      	bmi.n	80206c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80206b0:	4620      	mov	r0, r4
 80206b2:	f006 fba1 	bl	8026df8 <__cxa_guard_acquire>
 80206b6:	b138      	cbz	r0, 80206c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80206b8:	4620      	mov	r0, r4
 80206ba:	f006 fba9 	bl	8026e10 <__cxa_guard_release>
 80206be:	4a06      	ldr	r2, [pc, #24]	; (80206d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80206c0:	4909      	ldr	r1, [pc, #36]	; (80206e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80206c2:	480a      	ldr	r0, [pc, #40]	; (80206ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80206c4:	f006 fb8e 	bl	8026de4 <__aeabi_atexit>
 80206c8:	4b05      	ldr	r3, [pc, #20]	; (80206e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80206ca:	63ab      	str	r3, [r5, #56]	; 0x38
 80206cc:	4b07      	ldr	r3, [pc, #28]	; (80206ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80206ce:	63eb      	str	r3, [r5, #60]	; 0x3c
 80206d0:	bd38      	pop	{r3, r4, r5, pc}
 80206d2:	bf00      	nop
 80206d4:	2000b4b8 	.word	0x2000b4b8
 80206d8:	20000000 	.word	0x20000000
 80206dc:	0801ecdf 	.word	0x0801ecdf
 80206e0:	2000005c 	.word	0x2000005c
 80206e4:	2000b4bc 	.word	0x2000b4bc
 80206e8:	0801ecdd 	.word	0x0801ecdd
 80206ec:	20000060 	.word	0x20000060

080206f0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80206f0:	b510      	push	{r4, lr}
 80206f2:	4604      	mov	r4, r0
 80206f4:	f7ff ff88 	bl	8020608 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80206f8:	4620      	mov	r0, r4
 80206fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80206fe:	f7ff bfbd 	b.w	802067c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08020704 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8020704:	b538      	push	{r3, r4, r5, lr}
 8020706:	4c15      	ldr	r4, [pc, #84]	; (802075c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8020708:	4605      	mov	r5, r0
 802070a:	7823      	ldrb	r3, [r4, #0]
 802070c:	f3bf 8f5b 	dmb	ish
 8020710:	07da      	lsls	r2, r3, #31
 8020712:	d40b      	bmi.n	802072c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8020714:	4620      	mov	r0, r4
 8020716:	f006 fb6f 	bl	8026df8 <__cxa_guard_acquire>
 802071a:	b138      	cbz	r0, 802072c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802071c:	4620      	mov	r0, r4
 802071e:	f006 fb77 	bl	8026e10 <__cxa_guard_release>
 8020722:	4a0f      	ldr	r2, [pc, #60]	; (8020760 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8020724:	490f      	ldr	r1, [pc, #60]	; (8020764 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8020726:	4810      	ldr	r0, [pc, #64]	; (8020768 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8020728:	f006 fb5c 	bl	8026de4 <__aeabi_atexit>
 802072c:	4c0f      	ldr	r4, [pc, #60]	; (802076c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802072e:	7823      	ldrb	r3, [r4, #0]
 8020730:	f3bf 8f5b 	dmb	ish
 8020734:	07db      	lsls	r3, r3, #31
 8020736:	d40b      	bmi.n	8020750 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8020738:	4620      	mov	r0, r4
 802073a:	f006 fb5d 	bl	8026df8 <__cxa_guard_acquire>
 802073e:	b138      	cbz	r0, 8020750 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8020740:	4620      	mov	r0, r4
 8020742:	f006 fb65 	bl	8026e10 <__cxa_guard_release>
 8020746:	4a06      	ldr	r2, [pc, #24]	; (8020760 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8020748:	4909      	ldr	r1, [pc, #36]	; (8020770 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802074a:	480a      	ldr	r0, [pc, #40]	; (8020774 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802074c:	f006 fb4a 	bl	8026de4 <__aeabi_atexit>
 8020750:	4b05      	ldr	r3, [pc, #20]	; (8020768 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8020752:	652b      	str	r3, [r5, #80]	; 0x50
 8020754:	4b07      	ldr	r3, [pc, #28]	; (8020774 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8020756:	656b      	str	r3, [r5, #84]	; 0x54
 8020758:	bd38      	pop	{r3, r4, r5, pc}
 802075a:	bf00      	nop
 802075c:	2000b4b0 	.word	0x2000b4b0
 8020760:	20000000 	.word	0x20000000
 8020764:	0801ecd3 	.word	0x0801ecd3
 8020768:	20000054 	.word	0x20000054
 802076c:	2000b4b4 	.word	0x2000b4b4
 8020770:	0801ecd1 	.word	0x0801ecd1
 8020774:	20000058 	.word	0x20000058

08020778 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8020778:	b538      	push	{r3, r4, r5, lr}
 802077a:	4c15      	ldr	r4, [pc, #84]	; (80207d0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 802077c:	4605      	mov	r5, r0
 802077e:	7823      	ldrb	r3, [r4, #0]
 8020780:	f3bf 8f5b 	dmb	ish
 8020784:	07da      	lsls	r2, r3, #31
 8020786:	d40b      	bmi.n	80207a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8020788:	4620      	mov	r0, r4
 802078a:	f006 fb35 	bl	8026df8 <__cxa_guard_acquire>
 802078e:	b138      	cbz	r0, 80207a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8020790:	4620      	mov	r0, r4
 8020792:	f006 fb3d 	bl	8026e10 <__cxa_guard_release>
 8020796:	4a0f      	ldr	r2, [pc, #60]	; (80207d4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8020798:	490f      	ldr	r1, [pc, #60]	; (80207d8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802079a:	4810      	ldr	r0, [pc, #64]	; (80207dc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802079c:	f006 fb22 	bl	8026de4 <__aeabi_atexit>
 80207a0:	4c0f      	ldr	r4, [pc, #60]	; (80207e0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80207a2:	7823      	ldrb	r3, [r4, #0]
 80207a4:	f3bf 8f5b 	dmb	ish
 80207a8:	07db      	lsls	r3, r3, #31
 80207aa:	d40b      	bmi.n	80207c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80207ac:	4620      	mov	r0, r4
 80207ae:	f006 fb23 	bl	8026df8 <__cxa_guard_acquire>
 80207b2:	b138      	cbz	r0, 80207c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80207b4:	4620      	mov	r0, r4
 80207b6:	f006 fb2b 	bl	8026e10 <__cxa_guard_release>
 80207ba:	4a06      	ldr	r2, [pc, #24]	; (80207d4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80207bc:	4909      	ldr	r1, [pc, #36]	; (80207e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80207be:	480a      	ldr	r0, [pc, #40]	; (80207e8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80207c0:	f006 fb10 	bl	8026de4 <__aeabi_atexit>
 80207c4:	4b05      	ldr	r3, [pc, #20]	; (80207dc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80207c6:	64ab      	str	r3, [r5, #72]	; 0x48
 80207c8:	4b07      	ldr	r3, [pc, #28]	; (80207e8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80207ca:	64eb      	str	r3, [r5, #76]	; 0x4c
 80207cc:	bd38      	pop	{r3, r4, r5, pc}
 80207ce:	bf00      	nop
 80207d0:	2000b4a0 	.word	0x2000b4a0
 80207d4:	20000000 	.word	0x20000000
 80207d8:	0801ecd7 	.word	0x0801ecd7
 80207dc:	20000044 	.word	0x20000044
 80207e0:	2000b4a4 	.word	0x2000b4a4
 80207e4:	0801ecd5 	.word	0x0801ecd5
 80207e8:	20000048 	.word	0x20000048

080207ec <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80207ec:	b510      	push	{r4, lr}
 80207ee:	4604      	mov	r4, r0
 80207f0:	f7ff ff88 	bl	8020704 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80207f4:	4620      	mov	r0, r4
 80207f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80207fa:	f7ff bfbd 	b.w	8020778 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080207fe <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80207fe:	b510      	push	{r4, lr}
 8020800:	4604      	mov	r4, r0
 8020802:	f7ff fff3 	bl	80207ec <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8020806:	4620      	mov	r0, r4
 8020808:	f7ff ff72 	bl	80206f0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 802080c:	4620      	mov	r0, r4
 802080e:	f7ff fe73 	bl	80204f8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8020812:	4620      	mov	r0, r4
 8020814:	f7ff fdf2 	bl	80203fc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8020818:	4620      	mov	r0, r4
 802081a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802081e:	f7ff bee9 	b.w	80205f4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08020824 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8020824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020828:	b087      	sub	sp, #28
 802082a:	7888      	ldrb	r0, [r1, #2]
 802082c:	4616      	mov	r6, r2
 802082e:	9001      	str	r0, [sp, #4]
 8020830:	7848      	ldrb	r0, [r1, #1]
 8020832:	9100      	str	r1, [sp, #0]
 8020834:	9002      	str	r0, [sp, #8]
 8020836:	7808      	ldrb	r0, [r1, #0]
 8020838:	9901      	ldr	r1, [sp, #4]
 802083a:	9003      	str	r0, [sp, #12]
 802083c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8020840:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8020844:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8020848:	9902      	ldr	r1, [sp, #8]
 802084a:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 802084e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8020852:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8020856:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 802085a:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 802085e:	9005      	str	r0, [sp, #20]
 8020860:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8020864:	fb05 ca0e 	mla	sl, r5, lr, ip
 8020868:	2d00      	cmp	r5, #0
 802086a:	eb06 080a 	add.w	r8, r6, sl
 802086e:	db4a      	blt.n	8020906 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8020870:	45a9      	cmp	r9, r5
 8020872:	dd48      	ble.n	8020906 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8020874:	f1bc 0f00 	cmp.w	ip, #0
 8020878:	db43      	blt.n	8020902 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 802087a:	45e6      	cmp	lr, ip
 802087c:	dd41      	ble.n	8020902 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 802087e:	f816 600a 	ldrb.w	r6, [r6, sl]
 8020882:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020886:	441e      	add	r6, r3
 8020888:	f11c 0001 	adds.w	r0, ip, #1
 802088c:	d43e      	bmi.n	802090c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 802088e:	4586      	cmp	lr, r0
 8020890:	dd3c      	ble.n	802090c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8020892:	2a00      	cmp	r2, #0
 8020894:	d03a      	beq.n	802090c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8020896:	f898 0001 	ldrb.w	r0, [r8, #1]
 802089a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802089e:	4418      	add	r0, r3
 80208a0:	3501      	adds	r5, #1
 80208a2:	d437      	bmi.n	8020914 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 80208a4:	45a9      	cmp	r9, r5
 80208a6:	dd35      	ble.n	8020914 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 80208a8:	b3a4      	cbz	r4, 8020914 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 80208aa:	f1bc 0f00 	cmp.w	ip, #0
 80208ae:	db2f      	blt.n	8020910 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 80208b0:	45e6      	cmp	lr, ip
 80208b2:	dd2d      	ble.n	8020910 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 80208b4:	f818 500e 	ldrb.w	r5, [r8, lr]
 80208b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80208bc:	441d      	add	r5, r3
 80208be:	f11c 0c01 	adds.w	ip, ip, #1
 80208c2:	d42a      	bmi.n	802091a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 80208c4:	45e6      	cmp	lr, ip
 80208c6:	dd28      	ble.n	802091a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 80208c8:	b33a      	cbz	r2, 802091a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 80208ca:	44c6      	add	lr, r8
 80208cc:	f89e c001 	ldrb.w	ip, [lr, #1]
 80208d0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80208d4:	4463      	add	r3, ip
 80208d6:	ea6f 0c07 	mvn.w	ip, r7
 80208da:	2a0f      	cmp	r2, #15
 80208dc:	f896 a000 	ldrb.w	sl, [r6]
 80208e0:	fa5f fc8c 	uxtb.w	ip, ip
 80208e4:	f890 b000 	ldrb.w	fp, [r0]
 80208e8:	f895 9000 	ldrb.w	r9, [r5]
 80208ec:	7819      	ldrb	r1, [r3, #0]
 80208ee:	d801      	bhi.n	80208f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 80208f0:	2c0f      	cmp	r4, #15
 80208f2:	d914      	bls.n	802091e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 80208f4:	4b40      	ldr	r3, [pc, #256]	; (80209f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 80208f6:	f240 11a5 	movw	r1, #421	; 0x1a5
 80208fa:	4a40      	ldr	r2, [pc, #256]	; (80209fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 80208fc:	4840      	ldr	r0, [pc, #256]	; (8020a00 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 80208fe:	f006 faa5 	bl	8026e4c <__assert_func>
 8020902:	ae05      	add	r6, sp, #20
 8020904:	e7c0      	b.n	8020888 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 8020906:	a805      	add	r0, sp, #20
 8020908:	4606      	mov	r6, r0
 802090a:	e7c9      	b.n	80208a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 802090c:	a805      	add	r0, sp, #20
 802090e:	e7c7      	b.n	80208a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 8020910:	ad05      	add	r5, sp, #20
 8020912:	e7d4      	b.n	80208be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 8020914:	ab05      	add	r3, sp, #20
 8020916:	461d      	mov	r5, r3
 8020918:	e7dd      	b.n	80208d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 802091a:	ab05      	add	r3, sp, #20
 802091c:	e7db      	b.n	80208d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 802091e:	b292      	uxth	r2, r2
 8020920:	b2a4      	uxth	r4, r4
 8020922:	fa1f fc8c 	uxth.w	ip, ip
 8020926:	fb02 f804 	mul.w	r8, r2, r4
 802092a:	0112      	lsls	r2, r2, #4
 802092c:	b2bf      	uxth	r7, r7
 802092e:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8020932:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8020936:	eba2 0208 	sub.w	r2, r2, r8
 802093a:	b2a4      	uxth	r4, r4
 802093c:	b292      	uxth	r2, r2
 802093e:	ebae 0e04 	sub.w	lr, lr, r4
 8020942:	fb02 fb0b 	mul.w	fp, r2, fp
 8020946:	fa1f fe8e 	uxth.w	lr, lr
 802094a:	fb0e ba0a 	mla	sl, lr, sl, fp
 802094e:	fb04 aa09 	mla	sl, r4, r9, sl
 8020952:	fb08 aa01 	mla	sl, r8, r1, sl
 8020956:	9903      	ldr	r1, [sp, #12]
 8020958:	fb11 f90c 	smulbb	r9, r1, ip
 802095c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8020960:	9900      	ldr	r1, [sp, #0]
 8020962:	fb0a 9a07 	mla	sl, sl, r7, r9
 8020966:	fa1f fa8a 	uxth.w	sl, sl
 802096a:	f10a 0901 	add.w	r9, sl, #1
 802096e:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8020972:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020976:	f881 a000 	strb.w	sl, [r1]
 802097a:	f890 a001 	ldrb.w	sl, [r0, #1]
 802097e:	f896 9001 	ldrb.w	r9, [r6, #1]
 8020982:	fb02 fa0a 	mul.w	sl, r2, sl
 8020986:	9902      	ldr	r1, [sp, #8]
 8020988:	fb0e aa09 	mla	sl, lr, r9, sl
 802098c:	f895 9001 	ldrb.w	r9, [r5, #1]
 8020990:	fb04 aa09 	mla	sl, r4, r9, sl
 8020994:	f893 9001 	ldrb.w	r9, [r3, #1]
 8020998:	fb08 a909 	mla	r9, r8, r9, sl
 802099c:	fb11 fa0c 	smulbb	sl, r1, ip
 80209a0:	9900      	ldr	r1, [sp, #0]
 80209a2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80209a6:	fb09 a907 	mla	r9, r9, r7, sl
 80209aa:	fa1f f989 	uxth.w	r9, r9
 80209ae:	f109 0a01 	add.w	sl, r9, #1
 80209b2:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80209b6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80209ba:	f881 9001 	strb.w	r9, [r1, #1]
 80209be:	7880      	ldrb	r0, [r0, #2]
 80209c0:	78b6      	ldrb	r6, [r6, #2]
 80209c2:	4342      	muls	r2, r0
 80209c4:	78a8      	ldrb	r0, [r5, #2]
 80209c6:	789b      	ldrb	r3, [r3, #2]
 80209c8:	fb0e 2206 	mla	r2, lr, r6, r2
 80209cc:	fb04 2400 	mla	r4, r4, r0, r2
 80209d0:	fb08 4803 	mla	r8, r8, r3, r4
 80209d4:	9b01      	ldr	r3, [sp, #4]
 80209d6:	fb13 fc0c 	smulbb	ip, r3, ip
 80209da:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80209de:	fb08 c707 	mla	r7, r8, r7, ip
 80209e2:	b2bf      	uxth	r7, r7
 80209e4:	f107 0c01 	add.w	ip, r7, #1
 80209e8:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80209ec:	123f      	asrs	r7, r7, #8
 80209ee:	708f      	strb	r7, [r1, #2]
 80209f0:	b007      	add	sp, #28
 80209f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209f6:	bf00      	nop
 80209f8:	0802c1f1 	.word	0x0802c1f1
 80209fc:	0802c6e6 	.word	0x0802c6e6
 8020a00:	0802c2ba 	.word	0x0802c2ba

08020a04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a08:	ed2d 8b08 	vpush	{d8-d11}
 8020a0c:	b095      	sub	sp, #84	; 0x54
 8020a0e:	eeb0 aa40 	vmov.f32	s20, s0
 8020a12:	eef0 9a60 	vmov.f32	s19, s1
 8020a16:	930a      	str	r3, [sp, #40]	; 0x28
 8020a18:	eeb0 9a41 	vmov.f32	s18, s2
 8020a1c:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8020a20:	eeb0 8a62 	vmov.f32	s16, s5
 8020a24:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8020a26:	eef0 8a43 	vmov.f32	s17, s6
 8020a2a:	930c      	str	r3, [sp, #48]	; 0x30
 8020a2c:	eef0 ba44 	vmov.f32	s23, s8
 8020a30:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8020a34:	eeb0 ba64 	vmov.f32	s22, s9
 8020a38:	9013      	str	r0, [sp, #76]	; 0x4c
 8020a3a:	eef0 aa45 	vmov.f32	s21, s10
 8020a3e:	9310      	str	r3, [sp, #64]	; 0x40
 8020a40:	6860      	ldr	r0, [r4, #4]
 8020a42:	910f      	str	r1, [sp, #60]	; 0x3c
 8020a44:	9212      	str	r2, [sp, #72]	; 0x48
 8020a46:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020a48:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8020a4c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8020a50:	fb00 1303 	mla	r3, r0, r3, r1
 8020a54:	6821      	ldr	r1, [r4, #0]
 8020a56:	6854      	ldr	r4, [r2, #4]
 8020a58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a5c:	18cb      	adds	r3, r1, r3
 8020a5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020a60:	6813      	ldr	r3, [r2, #0]
 8020a62:	930e      	str	r3, [sp, #56]	; 0x38
 8020a64:	1d23      	adds	r3, r4, #4
 8020a66:	9309      	str	r3, [sp, #36]	; 0x24
 8020a68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020a6a:	43db      	mvns	r3, r3
 8020a6c:	b2db      	uxtb	r3, r3
 8020a6e:	930d      	str	r3, [sp, #52]	; 0x34
 8020a70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020a72:	2b00      	cmp	r3, #0
 8020a74:	dc03      	bgt.n	8020a7e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8020a76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020a78:	2b00      	cmp	r3, #0
 8020a7a:	f340 823c 	ble.w	8020ef6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8020a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020a80:	2b00      	cmp	r3, #0
 8020a82:	f340 8115 	ble.w	8020cb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8020a86:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020a88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020a8a:	1412      	asrs	r2, r2, #16
 8020a8c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020a90:	d431      	bmi.n	8020af6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020a92:	1c51      	adds	r1, r2, #1
 8020a94:	428d      	cmp	r5, r1
 8020a96:	dd31      	ble.n	8020afc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020a98:	2b00      	cmp	r3, #0
 8020a9a:	db2f      	blt.n	8020afc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020a9c:	1c59      	adds	r1, r3, #1
 8020a9e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020aa0:	4288      	cmp	r0, r1
 8020aa2:	dd2b      	ble.n	8020afc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020aa6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020aa8:	3b01      	subs	r3, #1
 8020aaa:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8020aac:	fb02 1203 	mla	r2, r2, r3, r1
 8020ab0:	1412      	asrs	r2, r2, #16
 8020ab2:	d42d      	bmi.n	8020b10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8020ab4:	3201      	adds	r2, #1
 8020ab6:	4295      	cmp	r5, r2
 8020ab8:	dd2a      	ble.n	8020b10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8020aba:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020abc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020abe:	fb02 1303 	mla	r3, r2, r3, r1
 8020ac2:	141b      	asrs	r3, r3, #16
 8020ac4:	d424      	bmi.n	8020b10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8020ac6:	3301      	adds	r3, #1
 8020ac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020aca:	429a      	cmp	r2, r3
 8020acc:	dd20      	ble.n	8020b10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8020ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ad0:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8020ad4:	f103 0c03 	add.w	ip, r3, #3
 8020ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ada:	9311      	str	r3, [sp, #68]	; 0x44
 8020adc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020ade:	2b00      	cmp	r3, #0
 8020ae0:	f300 814f 	bgt.w	8020d82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 8020ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ae6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020ae8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020aec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020af0:	441a      	add	r2, r3
 8020af2:	920b      	str	r2, [sp, #44]	; 0x2c
 8020af4:	e0de      	b.n	8020cb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8020af6:	1c51      	adds	r1, r2, #1
 8020af8:	f040 80cb 	bne.w	8020c92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8020afc:	42aa      	cmp	r2, r5
 8020afe:	f280 80c8 	bge.w	8020c92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8020b02:	1c5f      	adds	r7, r3, #1
 8020b04:	f2c0 80c5 	blt.w	8020c92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8020b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020b0a:	4293      	cmp	r3, r2
 8020b0c:	f280 80c1 	bge.w	8020c92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8020b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b12:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020b14:	9311      	str	r3, [sp, #68]	; 0x44
 8020b16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020b18:	2b00      	cmp	r3, #0
 8020b1a:	dde3      	ble.n	8020ae4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8020b1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020b1e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8020b20:	141a      	asrs	r2, r3, #16
 8020b22:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020b24:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020b26:	1400      	asrs	r0, r0, #16
 8020b28:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8020b2c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020b30:	f100 810e 	bmi.w	8020d50 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8020b34:	1c46      	adds	r6, r0, #1
 8020b36:	42b5      	cmp	r5, r6
 8020b38:	f340 810c 	ble.w	8020d54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8020b3c:	2a00      	cmp	r2, #0
 8020b3e:	f2c0 8109 	blt.w	8020d54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8020b42:	1c56      	adds	r6, r2, #1
 8020b44:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020b46:	42b4      	cmp	r4, r6
 8020b48:	f340 8104 	ble.w	8020d54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8020b4c:	fb02 0005 	mla	r0, r2, r5, r0
 8020b50:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020b52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020b54:	f814 e000 	ldrb.w	lr, [r4, r0]
 8020b58:	4402      	add	r2, r0
 8020b5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020b5c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020b60:	eb00 080e 	add.w	r8, r0, lr
 8020b64:	2b00      	cmp	r3, #0
 8020b66:	f000 80e4 	beq.w	8020d32 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 8020b6a:	f892 c001 	ldrb.w	ip, [r2, #1]
 8020b6e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020b72:	4484      	add	ip, r0
 8020b74:	2900      	cmp	r1, #0
 8020b76:	f000 80e5 	beq.w	8020d44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 8020b7a:	1950      	adds	r0, r2, r5
 8020b7c:	5d52      	ldrb	r2, [r2, r5]
 8020b7e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020b80:	7840      	ldrb	r0, [r0, #1]
 8020b82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020b86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020b8a:	4422      	add	r2, r4
 8020b8c:	4420      	add	r0, r4
 8020b8e:	b29b      	uxth	r3, r3
 8020b90:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020b92:	b289      	uxth	r1, r1
 8020b94:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 8020b98:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8020b9c:	fb03 fa01 	mul.w	sl, r3, r1
 8020ba0:	011b      	lsls	r3, r3, #4
 8020ba2:	f89c e000 	ldrb.w	lr, [ip]
 8020ba6:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8020baa:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8020bae:	eba3 030a 	sub.w	r3, r3, sl
 8020bb2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020bb4:	b289      	uxth	r1, r1
 8020bb6:	b29b      	uxth	r3, r3
 8020bb8:	eba9 0901 	sub.w	r9, r9, r1
 8020bbc:	fb03 fe0e 	mul.w	lr, r3, lr
 8020bc0:	fa1f f989 	uxth.w	r9, r9
 8020bc4:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020bc8:	f892 b000 	ldrb.w	fp, [r2]
 8020bcc:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020bd0:	f890 b000 	ldrb.w	fp, [r0]
 8020bd4:	fb0a ee0b 	mla	lr, sl, fp, lr
 8020bd8:	f897 b000 	ldrb.w	fp, [r7]
 8020bdc:	fb1b fb04 	smulbb	fp, fp, r4
 8020be0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8020be4:	fb0e be06 	mla	lr, lr, r6, fp
 8020be8:	fa1f fe8e 	uxth.w	lr, lr
 8020bec:	f10e 0b01 	add.w	fp, lr, #1
 8020bf0:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 8020bf4:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8020bf8:	f887 b000 	strb.w	fp, [r7]
 8020bfc:	f89c e001 	ldrb.w	lr, [ip, #1]
 8020c00:	f898 b001 	ldrb.w	fp, [r8, #1]
 8020c04:	fb03 fe0e 	mul.w	lr, r3, lr
 8020c08:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020c0c:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020c10:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020c14:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020c18:	fb0a ee0b 	mla	lr, sl, fp, lr
 8020c1c:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020c20:	fb1b fb04 	smulbb	fp, fp, r4
 8020c24:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8020c28:	fb0e be06 	mla	lr, lr, r6, fp
 8020c2c:	fa1f fe8e 	uxth.w	lr, lr
 8020c30:	f10e 0b01 	add.w	fp, lr, #1
 8020c34:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8020c38:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020c3c:	f887 e001 	strb.w	lr, [r7, #1]
 8020c40:	f89c c002 	ldrb.w	ip, [ip, #2]
 8020c44:	f898 e002 	ldrb.w	lr, [r8, #2]
 8020c48:	fb03 f30c 	mul.w	r3, r3, ip
 8020c4c:	fb09 330e 	mla	r3, r9, lr, r3
 8020c50:	f892 e002 	ldrb.w	lr, [r2, #2]
 8020c54:	7882      	ldrb	r2, [r0, #2]
 8020c56:	fb01 310e 	mla	r1, r1, lr, r3
 8020c5a:	fb0a 1a02 	mla	sl, sl, r2, r1
 8020c5e:	78b9      	ldrb	r1, [r7, #2]
 8020c60:	fb11 f104 	smulbb	r1, r1, r4
 8020c64:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8020c68:	fb0a 1606 	mla	r6, sl, r6, r1
 8020c6c:	b2b6      	uxth	r6, r6
 8020c6e:	1c73      	adds	r3, r6, #1
 8020c70:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8020c74:	1236      	asrs	r6, r6, #8
 8020c76:	70be      	strb	r6, [r7, #2]
 8020c78:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020c7a:	3703      	adds	r7, #3
 8020c7c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020c7e:	4413      	add	r3, r2
 8020c80:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020c82:	9327      	str	r3, [sp, #156]	; 0x9c
 8020c84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c86:	4413      	add	r3, r2
 8020c88:	9328      	str	r3, [sp, #160]	; 0xa0
 8020c8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020c8c:	3b01      	subs	r3, #1
 8020c8e:	9311      	str	r3, [sp, #68]	; 0x44
 8020c90:	e741      	b.n	8020b16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 8020c92:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020c94:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020c96:	4413      	add	r3, r2
 8020c98:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020c9a:	9327      	str	r3, [sp, #156]	; 0x9c
 8020c9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c9e:	4413      	add	r3, r2
 8020ca0:	9328      	str	r3, [sp, #160]	; 0xa0
 8020ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ca4:	3b01      	subs	r3, #1
 8020ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8020ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020caa:	3303      	adds	r3, #3
 8020cac:	930b      	str	r3, [sp, #44]	; 0x2c
 8020cae:	e6e6      	b.n	8020a7e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8020cb0:	f47f aef8 	bne.w	8020aa4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8020cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020cb6:	2b00      	cmp	r3, #0
 8020cb8:	f340 811d 	ble.w	8020ef6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8020cbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020cc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020cc2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020cc6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020cca:	eef0 6a48 	vmov.f32	s13, s16
 8020cce:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020cd2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020cd6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020cda:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8020cde:	eef0 6a68 	vmov.f32	s13, s17
 8020ce2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ce6:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8020cea:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020cee:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020cf2:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020cf6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020cfa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020cfe:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020d02:	ee18 2a10 	vmov	r2, s16
 8020d06:	eeb0 8a47 	vmov.f32	s16, s14
 8020d0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d0e:	ee18 2a90 	vmov	r2, s17
 8020d12:	9329      	str	r3, [sp, #164]	; 0xa4
 8020d14:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020d16:	eef0 8a67 	vmov.f32	s17, s15
 8020d1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d1e:	932a      	str	r3, [sp, #168]	; 0xa8
 8020d20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020d22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020d24:	3b01      	subs	r3, #1
 8020d26:	930f      	str	r3, [sp, #60]	; 0x3c
 8020d28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020d2a:	bf08      	it	eq
 8020d2c:	4613      	moveq	r3, r2
 8020d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8020d30:	e69e      	b.n	8020a70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8020d32:	b151      	cbz	r1, 8020d4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8020d34:	5d52      	ldrb	r2, [r2, r5]
 8020d36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020d38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020d3c:	4402      	add	r2, r0
 8020d3e:	4640      	mov	r0, r8
 8020d40:	46c4      	mov	ip, r8
 8020d42:	e724      	b.n	8020b8e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8020d44:	4640      	mov	r0, r8
 8020d46:	4642      	mov	r2, r8
 8020d48:	e721      	b.n	8020b8e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8020d4a:	4640      	mov	r0, r8
 8020d4c:	4642      	mov	r2, r8
 8020d4e:	e7f7      	b.n	8020d40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 8020d50:	1c46      	adds	r6, r0, #1
 8020d52:	d191      	bne.n	8020c78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020d54:	4285      	cmp	r5, r0
 8020d56:	dd8f      	ble.n	8020c78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020d58:	1c54      	adds	r4, r2, #1
 8020d5a:	db8d      	blt.n	8020c78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020d5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020d5e:	4294      	cmp	r4, r2
 8020d60:	dd8a      	ble.n	8020c78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020d62:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020d64:	9002      	str	r0, [sp, #8]
 8020d66:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020d68:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8020d6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020d6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020d70:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020d74:	e9cd 5300 	strd	r5, r3, [sp]
 8020d78:	4639      	mov	r1, r7
 8020d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d7c:	f7ff fd52 	bl	8020824 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8020d80:	e77a      	b.n	8020c78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020d82:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020d84:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020d86:	1410      	asrs	r0, r2, #16
 8020d88:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020d8c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020d8e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020d90:	1412      	asrs	r2, r2, #16
 8020d92:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020d96:	fb05 2000 	mla	r0, r5, r0, r2
 8020d9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020d9c:	f814 8000 	ldrb.w	r8, [r4, r0]
 8020da0:	4402      	add	r2, r0
 8020da2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020da4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020da8:	eb00 0708 	add.w	r7, r0, r8
 8020dac:	2b00      	cmp	r3, #0
 8020dae:	f000 8093 	beq.w	8020ed8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8020db2:	7856      	ldrb	r6, [r2, #1]
 8020db4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020db8:	4406      	add	r6, r0
 8020dba:	2900      	cmp	r1, #0
 8020dbc:	f000 8095 	beq.w	8020eea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8020dc0:	1950      	adds	r0, r2, r5
 8020dc2:	5d52      	ldrb	r2, [r2, r5]
 8020dc4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020dc6:	7840      	ldrb	r0, [r0, #1]
 8020dc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020dcc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020dd0:	4422      	add	r2, r4
 8020dd2:	4420      	add	r0, r4
 8020dd4:	b29b      	uxth	r3, r3
 8020dd6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020dd8:	b289      	uxth	r1, r1
 8020dda:	f10c 0c03 	add.w	ip, ip, #3
 8020dde:	f814 b008 	ldrb.w	fp, [r4, r8]
 8020de2:	fb03 f901 	mul.w	r9, r3, r1
 8020de6:	011b      	lsls	r3, r3, #4
 8020de8:	f896 8000 	ldrb.w	r8, [r6]
 8020dec:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020df0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020df4:	eba3 0309 	sub.w	r3, r3, r9
 8020df8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020dfa:	b289      	uxth	r1, r1
 8020dfc:	b29b      	uxth	r3, r3
 8020dfe:	ebae 0e01 	sub.w	lr, lr, r1
 8020e02:	fb03 f808 	mul.w	r8, r3, r8
 8020e06:	fa1f fe8e 	uxth.w	lr, lr
 8020e0a:	fb0e 880b 	mla	r8, lr, fp, r8
 8020e0e:	f892 b000 	ldrb.w	fp, [r2]
 8020e12:	fb01 880b 	mla	r8, r1, fp, r8
 8020e16:	f890 b000 	ldrb.w	fp, [r0]
 8020e1a:	fb09 880b 	mla	r8, r9, fp, r8
 8020e1e:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 8020e22:	fb1b fb04 	smulbb	fp, fp, r4
 8020e26:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8020e2a:	fb08 b80a 	mla	r8, r8, sl, fp
 8020e2e:	fa1f f888 	uxth.w	r8, r8
 8020e32:	f108 0b01 	add.w	fp, r8, #1
 8020e36:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020e3a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020e3e:	f80c 8c06 	strb.w	r8, [ip, #-6]
 8020e42:	f896 8001 	ldrb.w	r8, [r6, #1]
 8020e46:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020e4a:	fb03 f808 	mul.w	r8, r3, r8
 8020e4e:	fb0e 880b 	mla	r8, lr, fp, r8
 8020e52:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020e56:	fb01 880b 	mla	r8, r1, fp, r8
 8020e5a:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020e5e:	fb09 880b 	mla	r8, r9, fp, r8
 8020e62:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 8020e66:	fb1b fb04 	smulbb	fp, fp, r4
 8020e6a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8020e6e:	fb08 b80a 	mla	r8, r8, sl, fp
 8020e72:	fa1f f888 	uxth.w	r8, r8
 8020e76:	f108 0b01 	add.w	fp, r8, #1
 8020e7a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020e7e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020e82:	f80c 8c05 	strb.w	r8, [ip, #-5]
 8020e86:	78b6      	ldrb	r6, [r6, #2]
 8020e88:	78bf      	ldrb	r7, [r7, #2]
 8020e8a:	4373      	muls	r3, r6
 8020e8c:	7896      	ldrb	r6, [r2, #2]
 8020e8e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020e90:	fb0e 3307 	mla	r3, lr, r7, r3
 8020e94:	fb01 3306 	mla	r3, r1, r6, r3
 8020e98:	7886      	ldrb	r6, [r0, #2]
 8020e9a:	fb09 3906 	mla	r9, r9, r6, r3
 8020e9e:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 8020ea2:	fb13 f304 	smulbb	r3, r3, r4
 8020ea6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8020eaa:	fb09 390a 	mla	r9, r9, sl, r3
 8020eae:	fa1f f989 	uxth.w	r9, r9
 8020eb2:	f109 0301 	add.w	r3, r9, #1
 8020eb6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8020eba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020ebc:	4413      	add	r3, r2
 8020ebe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020ec0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020ec4:	9327      	str	r3, [sp, #156]	; 0x9c
 8020ec6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020ec8:	f80c 9c04 	strb.w	r9, [ip, #-4]
 8020ecc:	4413      	add	r3, r2
 8020ece:	9328      	str	r3, [sp, #160]	; 0xa0
 8020ed0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020ed2:	3b01      	subs	r3, #1
 8020ed4:	9311      	str	r3, [sp, #68]	; 0x44
 8020ed6:	e601      	b.n	8020adc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8020ed8:	b151      	cbz	r1, 8020ef0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 8020eda:	5d52      	ldrb	r2, [r2, r5]
 8020edc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020ede:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020ee2:	4402      	add	r2, r0
 8020ee4:	4638      	mov	r0, r7
 8020ee6:	463e      	mov	r6, r7
 8020ee8:	e774      	b.n	8020dd4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8020eea:	4638      	mov	r0, r7
 8020eec:	463a      	mov	r2, r7
 8020eee:	e771      	b.n	8020dd4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8020ef0:	4638      	mov	r0, r7
 8020ef2:	463a      	mov	r2, r7
 8020ef4:	e7f7      	b.n	8020ee6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8020ef6:	b015      	add	sp, #84	; 0x54
 8020ef8:	ecbd 8b08 	vpop	{d8-d11}
 8020efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020f00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8020f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f04:	780d      	ldrb	r5, [r1, #0]
 8020f06:	f891 9002 	ldrb.w	r9, [r1, #2]
 8020f0a:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 8020f0e:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8020f12:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8020f16:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8020f1a:	f891 9001 	ldrb.w	r9, [r1, #1]
 8020f1e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8020f22:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8020f26:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8020f2a:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8020f2e:	9501      	str	r5, [sp, #4]
 8020f30:	fb06 470c 	mla	r7, r6, ip, r4
 8020f34:	2e00      	cmp	r6, #0
 8020f36:	eb02 0e07 	add.w	lr, r2, r7
 8020f3a:	db46      	blt.n	8020fca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8020f3c:	45b0      	cmp	r8, r6
 8020f3e:	dd44      	ble.n	8020fca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8020f40:	2c00      	cmp	r4, #0
 8020f42:	db40      	blt.n	8020fc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8020f44:	45a4      	cmp	ip, r4
 8020f46:	dd3e      	ble.n	8020fc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8020f48:	5dd7      	ldrb	r7, [r2, r7]
 8020f4a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020f4e:	441f      	add	r7, r3
 8020f50:	1c62      	adds	r2, r4, #1
 8020f52:	d43d      	bmi.n	8020fd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8020f54:	4594      	cmp	ip, r2
 8020f56:	dd3b      	ble.n	8020fd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8020f58:	f1ba 0f00 	cmp.w	sl, #0
 8020f5c:	d038      	beq.n	8020fd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8020f5e:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8020f62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020f66:	441d      	add	r5, r3
 8020f68:	3601      	adds	r6, #1
 8020f6a:	d435      	bmi.n	8020fd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8020f6c:	45b0      	cmp	r8, r6
 8020f6e:	dd33      	ble.n	8020fd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8020f70:	b390      	cbz	r0, 8020fd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8020f72:	2c00      	cmp	r4, #0
 8020f74:	db2e      	blt.n	8020fd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 8020f76:	45a4      	cmp	ip, r4
 8020f78:	dd2c      	ble.n	8020fd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 8020f7a:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8020f7e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020f82:	441e      	add	r6, r3
 8020f84:	1c62      	adds	r2, r4, #1
 8020f86:	d42a      	bmi.n	8020fde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8020f88:	4594      	cmp	ip, r2
 8020f8a:	dd28      	ble.n	8020fde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8020f8c:	f1ba 0f00 	cmp.w	sl, #0
 8020f90:	d025      	beq.n	8020fde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8020f92:	44f4      	add	ip, lr
 8020f94:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020f98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020f9c:	4413      	add	r3, r2
 8020f9e:	f1ba 0f0f 	cmp.w	sl, #15
 8020fa2:	f897 8000 	ldrb.w	r8, [r7]
 8020fa6:	f895 9000 	ldrb.w	r9, [r5]
 8020faa:	f896 e000 	ldrb.w	lr, [r6]
 8020fae:	f893 c000 	ldrb.w	ip, [r3]
 8020fb2:	d801      	bhi.n	8020fb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 8020fb4:	280f      	cmp	r0, #15
 8020fb6:	d914      	bls.n	8020fe2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 8020fb8:	4b29      	ldr	r3, [pc, #164]	; (8021060 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 8020fba:	f240 11a5 	movw	r1, #421	; 0x1a5
 8020fbe:	4a29      	ldr	r2, [pc, #164]	; (8021064 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8020fc0:	4829      	ldr	r0, [pc, #164]	; (8021068 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 8020fc2:	f005 ff43 	bl	8026e4c <__assert_func>
 8020fc6:	af01      	add	r7, sp, #4
 8020fc8:	e7c2      	b.n	8020f50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8020fca:	ad01      	add	r5, sp, #4
 8020fcc:	462f      	mov	r7, r5
 8020fce:	e7cb      	b.n	8020f68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8020fd0:	ad01      	add	r5, sp, #4
 8020fd2:	e7c9      	b.n	8020f68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8020fd4:	ae01      	add	r6, sp, #4
 8020fd6:	e7d5      	b.n	8020f84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 8020fd8:	ab01      	add	r3, sp, #4
 8020fda:	461e      	mov	r6, r3
 8020fdc:	e7df      	b.n	8020f9e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 8020fde:	ab01      	add	r3, sp, #4
 8020fe0:	e7dd      	b.n	8020f9e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 8020fe2:	fa1f f48a 	uxth.w	r4, sl
 8020fe6:	b280      	uxth	r0, r0
 8020fe8:	fb04 fa00 	mul.w	sl, r4, r0
 8020fec:	0124      	lsls	r4, r4, #4
 8020fee:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8020ff2:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8020ff6:	b282      	uxth	r2, r0
 8020ff8:	eba4 000a 	sub.w	r0, r4, sl
 8020ffc:	ebab 0b02 	sub.w	fp, fp, r2
 8021000:	b280      	uxth	r0, r0
 8021002:	fa1f fb8b 	uxth.w	fp, fp
 8021006:	fb00 f909 	mul.w	r9, r0, r9
 802100a:	fb0b 9808 	mla	r8, fp, r8, r9
 802100e:	fb02 8e0e 	mla	lr, r2, lr, r8
 8021012:	fb0a ec0c 	mla	ip, sl, ip, lr
 8021016:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802101a:	f881 c000 	strb.w	ip, [r1]
 802101e:	786c      	ldrb	r4, [r5, #1]
 8021020:	f897 c001 	ldrb.w	ip, [r7, #1]
 8021024:	4344      	muls	r4, r0
 8021026:	fb0b 4c0c 	mla	ip, fp, ip, r4
 802102a:	7874      	ldrb	r4, [r6, #1]
 802102c:	fb02 cc04 	mla	ip, r2, r4, ip
 8021030:	785c      	ldrb	r4, [r3, #1]
 8021032:	fb0a c404 	mla	r4, sl, r4, ip
 8021036:	1224      	asrs	r4, r4, #8
 8021038:	704c      	strb	r4, [r1, #1]
 802103a:	78ad      	ldrb	r5, [r5, #2]
 802103c:	78bc      	ldrb	r4, [r7, #2]
 802103e:	4368      	muls	r0, r5
 8021040:	fb0b 0b04 	mla	fp, fp, r4, r0
 8021044:	78b0      	ldrb	r0, [r6, #2]
 8021046:	fb02 b000 	mla	r0, r2, r0, fp
 802104a:	789a      	ldrb	r2, [r3, #2]
 802104c:	fb0a 0a02 	mla	sl, sl, r2, r0
 8021050:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021054:	f881 a002 	strb.w	sl, [r1, #2]
 8021058:	b003      	add	sp, #12
 802105a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802105e:	bf00      	nop
 8021060:	0802c1f1 	.word	0x0802c1f1
 8021064:	0802c6e6 	.word	0x0802c6e6
 8021068:	0802c2ba 	.word	0x0802c2ba

0802106c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802106c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021070:	ed2d 8b0a 	vpush	{d8-d12}
 8021074:	b08f      	sub	sp, #60	; 0x3c
 8021076:	eeb0 aa40 	vmov.f32	s20, s0
 802107a:	eef0 9a60 	vmov.f32	s19, s1
 802107e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8021080:	eeb0 9a41 	vmov.f32	s18, s2
 8021084:	9307      	str	r3, [sp, #28]
 8021086:	eeb0 8a62 	vmov.f32	s16, s5
 802108a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 802108e:	eef0 8a43 	vmov.f32	s17, s6
 8021092:	900d      	str	r0, [sp, #52]	; 0x34
 8021094:	eeb0 ca44 	vmov.f32	s24, s8
 8021098:	6860      	ldr	r0, [r4, #4]
 802109a:	eef0 ba64 	vmov.f32	s23, s9
 802109e:	9309      	str	r3, [sp, #36]	; 0x24
 80210a0:	eeb0 ba45 	vmov.f32	s22, s10
 80210a4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80210a8:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 80210ac:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 80210b0:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 80210b4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80210b6:	fb00 1303 	mla	r3, r0, r3, r1
 80210ba:	6821      	ldr	r1, [r4, #0]
 80210bc:	6854      	ldr	r4, [r2, #4]
 80210be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80210c2:	3404      	adds	r4, #4
 80210c4:	18cb      	adds	r3, r1, r3
 80210c6:	9308      	str	r3, [sp, #32]
 80210c8:	6813      	ldr	r3, [r2, #0]
 80210ca:	930a      	str	r3, [sp, #40]	; 0x28
 80210cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80210ce:	2b00      	cmp	r3, #0
 80210d0:	dc03      	bgt.n	80210da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80210d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80210d4:	2b00      	cmp	r3, #0
 80210d6:	f340 81d2 	ble.w	802147e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 80210da:	9b07      	ldr	r3, [sp, #28]
 80210dc:	2b00      	cmp	r3, #0
 80210de:	f340 80e3 	ble.w	80212a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 80210e2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80210e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80210e6:	1412      	asrs	r2, r2, #16
 80210e8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80210ec:	d42f      	bmi.n	802114e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80210ee:	1c51      	adds	r1, r2, #1
 80210f0:	428d      	cmp	r5, r1
 80210f2:	dd2f      	ble.n	8021154 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80210f4:	2b00      	cmp	r3, #0
 80210f6:	db2d      	blt.n	8021154 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80210f8:	1c59      	adds	r1, r3, #1
 80210fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80210fc:	4288      	cmp	r0, r1
 80210fe:	dd29      	ble.n	8021154 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8021100:	9b07      	ldr	r3, [sp, #28]
 8021102:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021104:	3b01      	subs	r3, #1
 8021106:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8021108:	fb02 1203 	mla	r2, r2, r3, r1
 802110c:	1412      	asrs	r2, r2, #16
 802110e:	d42b      	bmi.n	8021168 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021110:	3201      	adds	r2, #1
 8021112:	4295      	cmp	r5, r2
 8021114:	dd28      	ble.n	8021168 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021116:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021118:	9924      	ldr	r1, [sp, #144]	; 0x90
 802111a:	fb02 1303 	mla	r3, r2, r3, r1
 802111e:	141b      	asrs	r3, r3, #16
 8021120:	d422      	bmi.n	8021168 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021122:	3301      	adds	r3, #1
 8021124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021126:	429a      	cmp	r2, r3
 8021128:	dd1e      	ble.n	8021168 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802112a:	9b08      	ldr	r3, [sp, #32]
 802112c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021130:	f103 0803 	add.w	r8, r3, #3
 8021134:	f1ba 0f00 	cmp.w	sl, #0
 8021138:	f300 8119 	bgt.w	802136e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 802113c:	9b07      	ldr	r3, [sp, #28]
 802113e:	9a08      	ldr	r2, [sp, #32]
 8021140:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021144:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021148:	441a      	add	r2, r3
 802114a:	9208      	str	r2, [sp, #32]
 802114c:	e0ae      	b.n	80212ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 802114e:	1c51      	adds	r1, r2, #1
 8021150:	f040 809b 	bne.w	802128a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8021154:	42aa      	cmp	r2, r5
 8021156:	f280 8098 	bge.w	802128a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 802115a:	1c5a      	adds	r2, r3, #1
 802115c:	f2c0 8095 	blt.w	802128a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8021160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021162:	4293      	cmp	r3, r2
 8021164:	f280 8091 	bge.w	802128a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8021168:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 802116c:	f1bb 0f00 	cmp.w	fp, #0
 8021170:	dde4      	ble.n	802113c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8021172:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021174:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021176:	141a      	asrs	r2, r3, #16
 8021178:	9924      	ldr	r1, [sp, #144]	; 0x90
 802117a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802117c:	1400      	asrs	r0, r0, #16
 802117e:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8021182:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8021186:	f100 80dc 	bmi.w	8021342 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 802118a:	1c47      	adds	r7, r0, #1
 802118c:	42bd      	cmp	r5, r7
 802118e:	f340 80da 	ble.w	8021346 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8021192:	2a00      	cmp	r2, #0
 8021194:	f2c0 80d7 	blt.w	8021346 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8021198:	f102 0c01 	add.w	ip, r2, #1
 802119c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802119e:	4567      	cmp	r7, ip
 80211a0:	f340 80d1 	ble.w	8021346 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 80211a4:	fb02 0005 	mla	r0, r2, r5, r0
 80211a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80211aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80211ac:	f817 8000 	ldrb.w	r8, [r7, r0]
 80211b0:	4402      	add	r2, r0
 80211b2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80211b6:	eb04 0c08 	add.w	ip, r4, r8
 80211ba:	2b00      	cmp	r3, #0
 80211bc:	f000 80b3 	beq.w	8021326 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 80211c0:	7857      	ldrb	r7, [r2, #1]
 80211c2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80211c6:	4427      	add	r7, r4
 80211c8:	2900      	cmp	r1, #0
 80211ca:	f000 80b4 	beq.w	8021336 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 80211ce:	1950      	adds	r0, r2, r5
 80211d0:	5d52      	ldrb	r2, [r2, r5]
 80211d2:	7840      	ldrb	r0, [r0, #1]
 80211d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80211d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80211dc:	4422      	add	r2, r4
 80211de:	4420      	add	r0, r4
 80211e0:	b29b      	uxth	r3, r3
 80211e2:	f814 a008 	ldrb.w	sl, [r4, r8]
 80211e6:	b289      	uxth	r1, r1
 80211e8:	f897 8000 	ldrb.w	r8, [r7]
 80211ec:	fb03 f901 	mul.w	r9, r3, r1
 80211f0:	011b      	lsls	r3, r3, #4
 80211f2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80211f6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80211fa:	eba3 0309 	sub.w	r3, r3, r9
 80211fe:	b289      	uxth	r1, r1
 8021200:	b29b      	uxth	r3, r3
 8021202:	ebae 0e01 	sub.w	lr, lr, r1
 8021206:	fb03 f808 	mul.w	r8, r3, r8
 802120a:	fa1f fe8e 	uxth.w	lr, lr
 802120e:	fb0e 880a 	mla	r8, lr, sl, r8
 8021212:	f892 a000 	ldrb.w	sl, [r2]
 8021216:	fb01 880a 	mla	r8, r1, sl, r8
 802121a:	f890 a000 	ldrb.w	sl, [r0]
 802121e:	fb09 880a 	mla	r8, r9, sl, r8
 8021222:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021226:	f886 8000 	strb.w	r8, [r6]
 802122a:	f897 8001 	ldrb.w	r8, [r7, #1]
 802122e:	f89c a001 	ldrb.w	sl, [ip, #1]
 8021232:	fb03 f808 	mul.w	r8, r3, r8
 8021236:	fb0e 880a 	mla	r8, lr, sl, r8
 802123a:	f892 a001 	ldrb.w	sl, [r2, #1]
 802123e:	fb01 880a 	mla	r8, r1, sl, r8
 8021242:	f890 a001 	ldrb.w	sl, [r0, #1]
 8021246:	fb09 880a 	mla	r8, r9, sl, r8
 802124a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802124e:	f886 8001 	strb.w	r8, [r6, #1]
 8021252:	78bf      	ldrb	r7, [r7, #2]
 8021254:	f89c c002 	ldrb.w	ip, [ip, #2]
 8021258:	437b      	muls	r3, r7
 802125a:	7892      	ldrb	r2, [r2, #2]
 802125c:	fb0e 330c 	mla	r3, lr, ip, r3
 8021260:	fb01 3102 	mla	r1, r1, r2, r3
 8021264:	7882      	ldrb	r2, [r0, #2]
 8021266:	fb09 1902 	mla	r9, r9, r2, r1
 802126a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802126e:	f886 9002 	strb.w	r9, [r6, #2]
 8021272:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021274:	3603      	adds	r6, #3
 8021276:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021278:	f10b 3bff 	add.w	fp, fp, #4294967295
 802127c:	4413      	add	r3, r2
 802127e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021280:	9323      	str	r3, [sp, #140]	; 0x8c
 8021282:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021284:	4413      	add	r3, r2
 8021286:	9324      	str	r3, [sp, #144]	; 0x90
 8021288:	e770      	b.n	802116c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 802128a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802128c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802128e:	4413      	add	r3, r2
 8021290:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021292:	9323      	str	r3, [sp, #140]	; 0x8c
 8021294:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021296:	4413      	add	r3, r2
 8021298:	9324      	str	r3, [sp, #144]	; 0x90
 802129a:	9b07      	ldr	r3, [sp, #28]
 802129c:	3b01      	subs	r3, #1
 802129e:	9307      	str	r3, [sp, #28]
 80212a0:	9b08      	ldr	r3, [sp, #32]
 80212a2:	3303      	adds	r3, #3
 80212a4:	9308      	str	r3, [sp, #32]
 80212a6:	e718      	b.n	80210da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80212a8:	f47f af2a 	bne.w	8021100 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80212ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80212ae:	2b00      	cmp	r3, #0
 80212b0:	f340 80e5 	ble.w	802147e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 80212b4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80212b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80212ba:	ee79 9aab 	vadd.f32	s19, s19, s23
 80212be:	eef0 6a48 	vmov.f32	s13, s16
 80212c2:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80212c6:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80212ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80212ce:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80212d2:	eef0 6a68 	vmov.f32	s13, s17
 80212d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80212da:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 80212de:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80212e2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80212e6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80212ea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80212ee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80212f2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80212f6:	ee18 2a10 	vmov	r2, s16
 80212fa:	eeb0 8a47 	vmov.f32	s16, s14
 80212fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8021302:	ee18 2a90 	vmov	r2, s17
 8021306:	9325      	str	r3, [sp, #148]	; 0x94
 8021308:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802130a:	eef0 8a67 	vmov.f32	s17, s15
 802130e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021312:	9326      	str	r3, [sp, #152]	; 0x98
 8021314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021316:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021318:	3b01      	subs	r3, #1
 802131a:	930b      	str	r3, [sp, #44]	; 0x2c
 802131c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802131e:	bf08      	it	eq
 8021320:	4613      	moveq	r3, r2
 8021322:	9307      	str	r3, [sp, #28]
 8021324:	e6d2      	b.n	80210cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8021326:	b149      	cbz	r1, 802133c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8021328:	5d52      	ldrb	r2, [r2, r5]
 802132a:	4660      	mov	r0, ip
 802132c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021330:	4422      	add	r2, r4
 8021332:	4667      	mov	r7, ip
 8021334:	e754      	b.n	80211e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8021336:	4660      	mov	r0, ip
 8021338:	4662      	mov	r2, ip
 802133a:	e751      	b.n	80211e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 802133c:	4660      	mov	r0, ip
 802133e:	4662      	mov	r2, ip
 8021340:	e7f7      	b.n	8021332 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8021342:	1c47      	adds	r7, r0, #1
 8021344:	d195      	bne.n	8021272 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8021346:	4285      	cmp	r5, r0
 8021348:	dd93      	ble.n	8021272 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 802134a:	1c57      	adds	r7, r2, #1
 802134c:	db91      	blt.n	8021272 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 802134e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021350:	4297      	cmp	r7, r2
 8021352:	dd8e      	ble.n	8021272 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8021354:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8021358:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802135c:	e9cd 5700 	strd	r5, r7, [sp]
 8021360:	4623      	mov	r3, r4
 8021362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021364:	4631      	mov	r1, r6
 8021366:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021368:	f7ff fdca 	bl	8020f00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 802136c:	e781      	b.n	8021272 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 802136e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021370:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8021372:	1410      	asrs	r0, r2, #16
 8021374:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021378:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802137a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802137c:	1412      	asrs	r2, r2, #16
 802137e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8021382:	fb05 2000 	mla	r0, r5, r0, r2
 8021386:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021388:	f816 e000 	ldrb.w	lr, [r6, r0]
 802138c:	4402      	add	r2, r0
 802138e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021392:	eb04 070e 	add.w	r7, r4, lr
 8021396:	2b00      	cmp	r3, #0
 8021398:	d063      	beq.n	8021462 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 802139a:	7856      	ldrb	r6, [r2, #1]
 802139c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80213a0:	4426      	add	r6, r4
 80213a2:	2900      	cmp	r1, #0
 80213a4:	d065      	beq.n	8021472 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 80213a6:	1950      	adds	r0, r2, r5
 80213a8:	5d52      	ldrb	r2, [r2, r5]
 80213aa:	7840      	ldrb	r0, [r0, #1]
 80213ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80213b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80213b4:	4422      	add	r2, r4
 80213b6:	4420      	add	r0, r4
 80213b8:	b29b      	uxth	r3, r3
 80213ba:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80213be:	b289      	uxth	r1, r1
 80213c0:	f896 e000 	ldrb.w	lr, [r6]
 80213c4:	f108 0803 	add.w	r8, r8, #3
 80213c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80213cc:	fb03 f901 	mul.w	r9, r3, r1
 80213d0:	011b      	lsls	r3, r3, #4
 80213d2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80213d6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80213da:	eba3 0309 	sub.w	r3, r3, r9
 80213de:	b289      	uxth	r1, r1
 80213e0:	b29b      	uxth	r3, r3
 80213e2:	ebac 0c01 	sub.w	ip, ip, r1
 80213e6:	fb03 fe0e 	mul.w	lr, r3, lr
 80213ea:	fa1f fc8c 	uxth.w	ip, ip
 80213ee:	fb0c ee0b 	mla	lr, ip, fp, lr
 80213f2:	f892 b000 	ldrb.w	fp, [r2]
 80213f6:	fb01 ee0b 	mla	lr, r1, fp, lr
 80213fa:	f890 b000 	ldrb.w	fp, [r0]
 80213fe:	fb09 ee0b 	mla	lr, r9, fp, lr
 8021402:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021406:	f808 ec06 	strb.w	lr, [r8, #-6]
 802140a:	f896 e001 	ldrb.w	lr, [r6, #1]
 802140e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8021412:	fb03 fe0e 	mul.w	lr, r3, lr
 8021416:	fb0c ee0b 	mla	lr, ip, fp, lr
 802141a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802141e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021422:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021426:	fb09 ee0b 	mla	lr, r9, fp, lr
 802142a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802142e:	f808 ec05 	strb.w	lr, [r8, #-5]
 8021432:	78b6      	ldrb	r6, [r6, #2]
 8021434:	78bf      	ldrb	r7, [r7, #2]
 8021436:	4373      	muls	r3, r6
 8021438:	7896      	ldrb	r6, [r2, #2]
 802143a:	7882      	ldrb	r2, [r0, #2]
 802143c:	fb0c 3307 	mla	r3, ip, r7, r3
 8021440:	fb01 3306 	mla	r3, r1, r6, r3
 8021444:	fb09 3902 	mla	r9, r9, r2, r3
 8021448:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802144a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802144c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021450:	4413      	add	r3, r2
 8021452:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021454:	f808 9c04 	strb.w	r9, [r8, #-4]
 8021458:	9323      	str	r3, [sp, #140]	; 0x8c
 802145a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802145c:	4413      	add	r3, r2
 802145e:	9324      	str	r3, [sp, #144]	; 0x90
 8021460:	e668      	b.n	8021134 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8021462:	b149      	cbz	r1, 8021478 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 8021464:	5d52      	ldrb	r2, [r2, r5]
 8021466:	4638      	mov	r0, r7
 8021468:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802146c:	4422      	add	r2, r4
 802146e:	463e      	mov	r6, r7
 8021470:	e7a2      	b.n	80213b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8021472:	4638      	mov	r0, r7
 8021474:	463a      	mov	r2, r7
 8021476:	e79f      	b.n	80213b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8021478:	4638      	mov	r0, r7
 802147a:	463a      	mov	r2, r7
 802147c:	e7f7      	b.n	802146e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 802147e:	b00f      	add	sp, #60	; 0x3c
 8021480:	ecbd 8b0a 	vpop	{d8-d12}
 8021484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021488 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8021488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802148c:	b087      	sub	sp, #28
 802148e:	7888      	ldrb	r0, [r1, #2]
 8021490:	9002      	str	r0, [sp, #8]
 8021492:	7848      	ldrb	r0, [r1, #1]
 8021494:	9e02      	ldr	r6, [sp, #8]
 8021496:	9003      	str	r0, [sp, #12]
 8021498:	7808      	ldrb	r0, [r1, #0]
 802149a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 802149e:	9004      	str	r0, [sp, #16]
 80214a0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80214a4:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 80214a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80214ac:	9e03      	ldr	r6, [sp, #12]
 80214ae:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 80214b2:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 80214b6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 80214ba:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 80214be:	fb04 7508 	mla	r5, r4, r8, r7
 80214c2:	2c00      	cmp	r4, #0
 80214c4:	eb02 0905 	add.w	r9, r2, r5
 80214c8:	db45      	blt.n	8021556 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 80214ca:	45a2      	cmp	sl, r4
 80214cc:	dd43      	ble.n	8021556 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 80214ce:	2f00      	cmp	r7, #0
 80214d0:	db3f      	blt.n	8021552 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 80214d2:	45b8      	cmp	r8, r7
 80214d4:	dd3d      	ble.n	8021552 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 80214d6:	5d52      	ldrb	r2, [r2, r5]
 80214d8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80214dc:	1c7a      	adds	r2, r7, #1
 80214de:	d43d      	bmi.n	802155c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 80214e0:	4590      	cmp	r8, r2
 80214e2:	dd3b      	ble.n	802155c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 80214e4:	f1bc 0f00 	cmp.w	ip, #0
 80214e8:	d038      	beq.n	802155c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 80214ea:	f899 2001 	ldrb.w	r2, [r9, #1]
 80214ee:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80214f2:	3401      	adds	r4, #1
 80214f4:	d436      	bmi.n	8021564 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 80214f6:	45a2      	cmp	sl, r4
 80214f8:	dd34      	ble.n	8021564 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 80214fa:	f1be 0f00 	cmp.w	lr, #0
 80214fe:	d031      	beq.n	8021564 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8021500:	2f00      	cmp	r7, #0
 8021502:	db2d      	blt.n	8021560 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8021504:	45b8      	cmp	r8, r7
 8021506:	dd2b      	ble.n	8021560 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8021508:	f819 2008 	ldrb.w	r2, [r9, r8]
 802150c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8021510:	3701      	adds	r7, #1
 8021512:	d409      	bmi.n	8021528 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8021514:	45b8      	cmp	r8, r7
 8021516:	dd07      	ble.n	8021528 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8021518:	f1bc 0f00 	cmp.w	ip, #0
 802151c:	d004      	beq.n	8021528 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 802151e:	44c8      	add	r8, r9
 8021520:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021524:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021528:	f1bc 0f0f 	cmp.w	ip, #15
 802152c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8021530:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8021534:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021538:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802153c:	d802      	bhi.n	8021544 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 802153e:	f1be 0f0f 	cmp.w	lr, #15
 8021542:	d911      	bls.n	8021568 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 8021544:	4b77      	ldr	r3, [pc, #476]	; (8021724 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 8021546:	f240 11a5 	movw	r1, #421	; 0x1a5
 802154a:	4a77      	ldr	r2, [pc, #476]	; (8021728 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 802154c:	4877      	ldr	r0, [pc, #476]	; (802172c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 802154e:	f005 fc7d 	bl	8026e4c <__assert_func>
 8021552:	4606      	mov	r6, r0
 8021554:	e7c2      	b.n	80214dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 8021556:	4605      	mov	r5, r0
 8021558:	4606      	mov	r6, r0
 802155a:	e7ca      	b.n	80214f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 802155c:	4605      	mov	r5, r0
 802155e:	e7c8      	b.n	80214f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8021560:	4604      	mov	r4, r0
 8021562:	e7d5      	b.n	8021510 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8021564:	4604      	mov	r4, r0
 8021566:	e7df      	b.n	8021528 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8021568:	fa1f fc8c 	uxth.w	ip, ip
 802156c:	fa1f f28e 	uxth.w	r2, lr
 8021570:	fb02 fe0c 	mul.w	lr, r2, ip
 8021574:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8021578:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 802157c:	ebac 070e 	sub.w	r7, ip, lr
 8021580:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8021584:	b292      	uxth	r2, r2
 8021586:	b2bf      	uxth	r7, r7
 8021588:	1a9b      	subs	r3, r3, r2
 802158a:	fb07 fc0a 	mul.w	ip, r7, sl
 802158e:	b29b      	uxth	r3, r3
 8021590:	fb03 cc0b 	mla	ip, r3, fp, ip
 8021594:	9301      	str	r3, [sp, #4]
 8021596:	fb02 cc09 	mla	ip, r2, r9, ip
 802159a:	fb0e cc08 	mla	ip, lr, r8, ip
 802159e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80215a2:	9305      	str	r3, [sp, #20]
 80215a4:	2b00      	cmp	r3, #0
 80215a6:	f000 80b9 	beq.w	802171c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 80215aa:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80215ae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80215b2:	fb0b fc0c 	mul.w	ip, fp, ip
 80215b6:	fb0b f606 	mul.w	r6, fp, r6
 80215ba:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80215be:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80215c2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80215c6:	44dc      	add	ip, fp
 80215c8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80215cc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80215d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80215d4:	fb0a fb0b 	mul.w	fp, sl, fp
 80215d8:	fb0a fa05 	mul.w	sl, sl, r5
 80215dc:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80215e0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80215e4:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 80215e8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80215ec:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80215f0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80215f4:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 80215f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80215fc:	0a36      	lsrs	r6, r6, #8
 80215fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021602:	44dc      	add	ip, fp
 8021604:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021608:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802160c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021610:	fb09 fb0b 	mul.w	fp, r9, fp
 8021614:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021618:	fb09 f904 	mul.w	r9, r9, r4
 802161c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021620:	ea4f 251b 	mov.w	r5, fp, lsr #8
 8021624:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021628:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802162c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021630:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021634:	fb0c fc07 	mul.w	ip, ip, r7
 8021638:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802163c:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 8021640:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021644:	445d      	add	r5, fp
 8021646:	fb08 f404 	mul.w	r4, r8, r4
 802164a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802164e:	fb08 f800 	mul.w	r8, r8, r0
 8021652:	0a2d      	lsrs	r5, r5, #8
 8021654:	0a20      	lsrs	r0, r4, #8
 8021656:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802165a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802165e:	fb07 f70a 	mul.w	r7, r7, sl
 8021662:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021666:	4404      	add	r4, r0
 8021668:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802166c:	0a24      	lsrs	r4, r4, #8
 802166e:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8021672:	9801      	ldr	r0, [sp, #4]
 8021674:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021678:	fb03 cc00 	mla	ip, r3, r0, ip
 802167c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021680:	fb00 7606 	mla	r6, r0, r6, r7
 8021684:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8021688:	fb04 cc0e 	mla	ip, r4, lr, ip
 802168c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021690:	b280      	uxth	r0, r0
 8021692:	9c04      	ldr	r4, [sp, #16]
 8021694:	fb05 cc02 	mla	ip, r5, r2, ip
 8021698:	fb0e 6e08 	mla	lr, lr, r8, r6
 802169c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80216a0:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80216a4:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 80216a8:	fb02 ec0c 	mla	ip, r2, ip, lr
 80216ac:	9a05      	ldr	r2, [sp, #20]
 80216ae:	4342      	muls	r2, r0
 80216b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80216b4:	1c53      	adds	r3, r2, #1
 80216b6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80216ba:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80216be:	ea45 0c0c 	orr.w	ip, r5, ip
 80216c2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80216c6:	fa5f f28c 	uxtb.w	r2, ip
 80216ca:	b2db      	uxtb	r3, r3
 80216cc:	fb14 f403 	smulbb	r4, r4, r3
 80216d0:	fb02 4200 	mla	r2, r2, r0, r4
 80216d4:	b292      	uxth	r2, r2
 80216d6:	1c54      	adds	r4, r2, #1
 80216d8:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80216dc:	9c03      	ldr	r4, [sp, #12]
 80216de:	fb14 f403 	smulbb	r4, r4, r3
 80216e2:	1212      	asrs	r2, r2, #8
 80216e4:	700a      	strb	r2, [r1, #0]
 80216e6:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80216ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80216ee:	fb02 4200 	mla	r2, r2, r0, r4
 80216f2:	b292      	uxth	r2, r2
 80216f4:	1c54      	adds	r4, r2, #1
 80216f6:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80216fa:	1212      	asrs	r2, r2, #8
 80216fc:	704a      	strb	r2, [r1, #1]
 80216fe:	9a02      	ldr	r2, [sp, #8]
 8021700:	fb12 f303 	smulbb	r3, r2, r3
 8021704:	fb0c 3c00 	mla	ip, ip, r0, r3
 8021708:	fa1f fc8c 	uxth.w	ip, ip
 802170c:	f10c 0301 	add.w	r3, ip, #1
 8021710:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021714:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021718:	f881 c002 	strb.w	ip, [r1, #2]
 802171c:	b007      	add	sp, #28
 802171e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021722:	bf00      	nop
 8021724:	0802c1f1 	.word	0x0802c1f1
 8021728:	0802c6e6 	.word	0x0802c6e6
 802172c:	0802c2ba 	.word	0x0802c2ba

08021730 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021734:	ed2d 8b08 	vpush	{d8-d11}
 8021738:	b09b      	sub	sp, #108	; 0x6c
 802173a:	eeb0 aa40 	vmov.f32	s20, s0
 802173e:	eef0 9a60 	vmov.f32	s19, s1
 8021742:	930a      	str	r3, [sp, #40]	; 0x28
 8021744:	eeb0 9a41 	vmov.f32	s18, s2
 8021748:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 802174c:	eeb0 8a62 	vmov.f32	s16, s5
 8021750:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8021752:	eef0 8a43 	vmov.f32	s17, s6
 8021756:	9312      	str	r3, [sp, #72]	; 0x48
 8021758:	eef0 ba44 	vmov.f32	s23, s8
 802175c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8021760:	eeb0 ba64 	vmov.f32	s22, s9
 8021764:	9019      	str	r0, [sp, #100]	; 0x64
 8021766:	eef0 aa45 	vmov.f32	s21, s10
 802176a:	9114      	str	r1, [sp, #80]	; 0x50
 802176c:	9317      	str	r3, [sp, #92]	; 0x5c
 802176e:	6868      	ldr	r0, [r5, #4]
 8021770:	9218      	str	r2, [sp, #96]	; 0x60
 8021772:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8021774:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8021778:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802177c:	fb00 1303 	mla	r3, r0, r3, r1
 8021780:	6829      	ldr	r1, [r5, #0]
 8021782:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021786:	18cb      	adds	r3, r1, r3
 8021788:	930d      	str	r3, [sp, #52]	; 0x34
 802178a:	6813      	ldr	r3, [r2, #0]
 802178c:	9313      	str	r3, [sp, #76]	; 0x4c
 802178e:	6853      	ldr	r3, [r2, #4]
 8021790:	3304      	adds	r3, #4
 8021792:	9309      	str	r3, [sp, #36]	; 0x24
 8021794:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021796:	2b00      	cmp	r3, #0
 8021798:	dc03      	bgt.n	80217a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802179a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802179c:	2b00      	cmp	r3, #0
 802179e:	f340 8352 	ble.w	8021e46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 80217a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217a4:	2b00      	cmp	r3, #0
 80217a6:	f340 81a2 	ble.w	8021aee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 80217aa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80217ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80217ae:	1412      	asrs	r2, r2, #16
 80217b0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80217b4:	d431      	bmi.n	802181a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80217b6:	1c51      	adds	r1, r2, #1
 80217b8:	428c      	cmp	r4, r1
 80217ba:	dd31      	ble.n	8021820 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 80217bc:	2b00      	cmp	r3, #0
 80217be:	db2f      	blt.n	8021820 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 80217c0:	1c59      	adds	r1, r3, #1
 80217c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80217c4:	4288      	cmp	r0, r1
 80217c6:	dd2b      	ble.n	8021820 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 80217c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217ca:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80217cc:	3b01      	subs	r3, #1
 80217ce:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80217d0:	fb02 1203 	mla	r2, r2, r3, r1
 80217d4:	1412      	asrs	r2, r2, #16
 80217d6:	d42d      	bmi.n	8021834 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80217d8:	3201      	adds	r2, #1
 80217da:	4294      	cmp	r4, r2
 80217dc:	dd2a      	ble.n	8021834 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80217de:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80217e0:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80217e2:	fb02 1303 	mla	r3, r2, r3, r1
 80217e6:	141b      	asrs	r3, r3, #16
 80217e8:	d424      	bmi.n	8021834 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80217ea:	3301      	adds	r3, #1
 80217ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80217ee:	429a      	cmp	r2, r3
 80217f0:	dd20      	ble.n	8021834 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80217f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80217f4:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 80217f8:	f103 0e03 	add.w	lr, r3, #3
 80217fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217fe:	9315      	str	r3, [sp, #84]	; 0x54
 8021800:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021802:	2b00      	cmp	r3, #0
 8021804:	f300 81de 	bgt.w	8021bc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 8021808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802180a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802180c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021810:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021814:	441a      	add	r2, r3
 8021816:	920d      	str	r2, [sp, #52]	; 0x34
 8021818:	e16b      	b.n	8021af2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 802181a:	1c51      	adds	r1, r2, #1
 802181c:	f040 8158 	bne.w	8021ad0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8021820:	42a2      	cmp	r2, r4
 8021822:	f280 8155 	bge.w	8021ad0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8021826:	1c5a      	adds	r2, r3, #1
 8021828:	f2c0 8152 	blt.w	8021ad0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 802182c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802182e:	4293      	cmp	r3, r2
 8021830:	f280 814e 	bge.w	8021ad0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8021834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021836:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021838:	9316      	str	r3, [sp, #88]	; 0x58
 802183a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 802183e:	9315      	str	r3, [sp, #84]	; 0x54
 8021840:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021842:	2b00      	cmp	r3, #0
 8021844:	dde0      	ble.n	8021808 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8021846:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021848:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802184a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802184e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8021850:	141b      	asrs	r3, r3, #16
 8021852:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021856:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021858:	1412      	asrs	r2, r2, #16
 802185a:	f100 819a 	bmi.w	8021b92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 802185e:	1c55      	adds	r5, r2, #1
 8021860:	42ac      	cmp	r4, r5
 8021862:	f340 8198 	ble.w	8021b96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8021866:	2b00      	cmp	r3, #0
 8021868:	f2c0 8195 	blt.w	8021b96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802186c:	1c5d      	adds	r5, r3, #1
 802186e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8021870:	42af      	cmp	r7, r5
 8021872:	f340 8190 	ble.w	8021b96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8021876:	fb03 2304 	mla	r3, r3, r4, r2
 802187a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802187c:	18d5      	adds	r5, r2, r3
 802187e:	5cd3      	ldrb	r3, [r2, r3]
 8021880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021886:	0e1f      	lsrs	r7, r3, #24
 8021888:	2800      	cmp	r0, #0
 802188a:	f000 8171 	beq.w	8021b70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802188e:	f895 c001 	ldrb.w	ip, [r5, #1]
 8021892:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8021896:	920e      	str	r2, [sp, #56]	; 0x38
 8021898:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802189c:	2900      	cmp	r1, #0
 802189e:	f000 8172 	beq.w	8021b86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 80218a2:	eb05 0c04 	add.w	ip, r5, r4
 80218a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80218a8:	5d2d      	ldrb	r5, [r5, r4]
 80218aa:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 80218ae:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80218b2:	950b      	str	r5, [sp, #44]	; 0x2c
 80218b4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80218b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80218ba:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80218be:	0e15      	lsrs	r5, r2, #24
 80218c0:	920f      	str	r2, [sp, #60]	; 0x3c
 80218c2:	b280      	uxth	r0, r0
 80218c4:	b289      	uxth	r1, r1
 80218c6:	fb00 fa01 	mul.w	sl, r0, r1
 80218ca:	0100      	lsls	r0, r0, #4
 80218cc:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 80218d0:	eba0 080a 	sub.w	r8, r0, sl
 80218d4:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 80218d8:	b289      	uxth	r1, r1
 80218da:	fa1f f888 	uxth.w	r8, r8
 80218de:	1a52      	subs	r2, r2, r1
 80218e0:	fb08 f00e 	mul.w	r0, r8, lr
 80218e4:	b292      	uxth	r2, r2
 80218e6:	fb02 0007 	mla	r0, r2, r7, r0
 80218ea:	fb01 0009 	mla	r0, r1, r9, r0
 80218ee:	fb0a 0005 	mla	r0, sl, r5, r0
 80218f2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80218f6:	2800      	cmp	r0, #0
 80218f8:	f000 80dd 	beq.w	8021ab6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80218fc:	2fff      	cmp	r7, #255	; 0xff
 80218fe:	d01a      	beq.n	8021936 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8021900:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021904:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021908:	fb07 fc0c 	mul.w	ip, r7, ip
 802190c:	435f      	muls	r7, r3
 802190e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021912:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021916:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 802191a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802191e:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8021922:	4463      	add	r3, ip
 8021924:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021928:	0a1b      	lsrs	r3, r3, #8
 802192a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802192e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021932:	ea43 030b 	orr.w	r3, r3, fp
 8021936:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802193a:	d01e      	beq.n	802197a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 802193c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802193e:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8021942:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021946:	fb0e fb0b 	mul.w	fp, lr, fp
 802194a:	fb0e fe07 	mul.w	lr, lr, r7
 802194e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8021952:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021956:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802195a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802195e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8021962:	44dc      	add	ip, fp
 8021964:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021968:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802196c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021970:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021974:	ea4c 070e 	orr.w	r7, ip, lr
 8021978:	970e      	str	r7, [sp, #56]	; 0x38
 802197a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802197e:	d01e      	beq.n	80219be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8021980:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021982:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8021986:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802198a:	fb09 fe0e 	mul.w	lr, r9, lr
 802198e:	fb09 f907 	mul.w	r9, r9, r7
 8021992:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021996:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802199a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 802199e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219a2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80219a6:	44f4      	add	ip, lr
 80219a8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80219ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219b0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80219b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219b8:	ea4c 0709 	orr.w	r7, ip, r9
 80219bc:	970b      	str	r7, [sp, #44]	; 0x2c
 80219be:	2dff      	cmp	r5, #255	; 0xff
 80219c0:	d01c      	beq.n	80219fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 80219c2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80219c4:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80219c8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80219cc:	fb05 fe0e 	mul.w	lr, r5, lr
 80219d0:	437d      	muls	r5, r7
 80219d2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80219d6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80219da:	f505 7780 	add.w	r7, r5, #256	; 0x100
 80219de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219e2:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80219e6:	44f4      	add	ip, lr
 80219e8:	0a2d      	lsrs	r5, r5, #8
 80219ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219ee:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80219f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80219f6:	ea4c 0505 	orr.w	r5, ip, r5
 80219fa:	950f      	str	r5, [sp, #60]	; 0x3c
 80219fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80219fe:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021a02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021a06:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021a0a:	fb08 f505 	mul.w	r5, r8, r5
 8021a0e:	fb02 5507 	mla	r5, r2, r7, r5
 8021a12:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021a14:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021a18:	fb01 5507 	mla	r5, r1, r7, r5
 8021a1c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021a1e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021a22:	fb0a 5507 	mla	r5, sl, r7, r5
 8021a26:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021a28:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021a2c:	0a2d      	lsrs	r5, r5, #8
 8021a2e:	fb08 f807 	mul.w	r8, r8, r7
 8021a32:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021a36:	fb02 8303 	mla	r3, r2, r3, r8
 8021a3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021a3c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021a40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021a42:	fb01 330c 	mla	r3, r1, ip, r3
 8021a46:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8021a4a:	fb0a 3a01 	mla	sl, sl, r1, r3
 8021a4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021a50:	9915      	ldr	r1, [sp, #84]	; 0x54
 8021a52:	4343      	muls	r3, r0
 8021a54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021a58:	1c58      	adds	r0, r3, #1
 8021a5a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021a5e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021a62:	ea45 050a 	orr.w	r5, r5, sl
 8021a66:	7833      	ldrb	r3, [r6, #0]
 8021a68:	b2ea      	uxtb	r2, r5
 8021a6a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021a6e:	fb12 f201 	smulbb	r2, r2, r1
 8021a72:	b2c0      	uxtb	r0, r0
 8021a74:	fb03 2300 	mla	r3, r3, r0, r2
 8021a78:	b29b      	uxth	r3, r3
 8021a7a:	1c5a      	adds	r2, r3, #1
 8021a7c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021a80:	7872      	ldrb	r2, [r6, #1]
 8021a82:	fb12 f200 	smulbb	r2, r2, r0
 8021a86:	121b      	asrs	r3, r3, #8
 8021a88:	7033      	strb	r3, [r6, #0]
 8021a8a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021a8e:	0c2d      	lsrs	r5, r5, #16
 8021a90:	fb03 2301 	mla	r3, r3, r1, r2
 8021a94:	b29b      	uxth	r3, r3
 8021a96:	1c5a      	adds	r2, r3, #1
 8021a98:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021a9c:	121b      	asrs	r3, r3, #8
 8021a9e:	7073      	strb	r3, [r6, #1]
 8021aa0:	78b3      	ldrb	r3, [r6, #2]
 8021aa2:	fb13 f000 	smulbb	r0, r3, r0
 8021aa6:	fb05 0501 	mla	r5, r5, r1, r0
 8021aaa:	b2ad      	uxth	r5, r5
 8021aac:	1c6b      	adds	r3, r5, #1
 8021aae:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021ab2:	122d      	asrs	r5, r5, #8
 8021ab4:	70b5      	strb	r5, [r6, #2]
 8021ab6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021ab8:	3603      	adds	r6, #3
 8021aba:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021abc:	4413      	add	r3, r2
 8021abe:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8021ac0:	932d      	str	r3, [sp, #180]	; 0xb4
 8021ac2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021ac4:	4413      	add	r3, r2
 8021ac6:	932e      	str	r3, [sp, #184]	; 0xb8
 8021ac8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021aca:	3b01      	subs	r3, #1
 8021acc:	9316      	str	r3, [sp, #88]	; 0x58
 8021ace:	e6b7      	b.n	8021840 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8021ad0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021ad2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021ad4:	4413      	add	r3, r2
 8021ad6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8021ad8:	932d      	str	r3, [sp, #180]	; 0xb4
 8021ada:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021adc:	4413      	add	r3, r2
 8021ade:	932e      	str	r3, [sp, #184]	; 0xb8
 8021ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ae2:	3b01      	subs	r3, #1
 8021ae4:	930a      	str	r3, [sp, #40]	; 0x28
 8021ae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021ae8:	3303      	adds	r3, #3
 8021aea:	930d      	str	r3, [sp, #52]	; 0x34
 8021aec:	e659      	b.n	80217a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8021aee:	f47f ae6b 	bne.w	80217c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8021af2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021af4:	2b00      	cmp	r3, #0
 8021af6:	f340 81a6 	ble.w	8021e46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8021afa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021afe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021b00:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021b04:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021b08:	eef0 6a48 	vmov.f32	s13, s16
 8021b0c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021b10:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021b14:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b18:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8021b1c:	eef0 6a68 	vmov.f32	s13, s17
 8021b20:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b24:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8021b28:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021b2c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021b30:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021b34:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021b38:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021b3c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021b40:	ee18 2a10 	vmov	r2, s16
 8021b44:	eeb0 8a47 	vmov.f32	s16, s14
 8021b48:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b4c:	ee18 2a90 	vmov	r2, s17
 8021b50:	932f      	str	r3, [sp, #188]	; 0xbc
 8021b52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021b54:	eef0 8a67 	vmov.f32	s17, s15
 8021b58:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b5c:	9330      	str	r3, [sp, #192]	; 0xc0
 8021b5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021b60:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021b62:	3b01      	subs	r3, #1
 8021b64:	9314      	str	r3, [sp, #80]	; 0x50
 8021b66:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021b68:	bf08      	it	eq
 8021b6a:	4613      	moveq	r3, r2
 8021b6c:	930a      	str	r3, [sp, #40]	; 0x28
 8021b6e:	e611      	b.n	8021794 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8021b70:	b161      	cbz	r1, 8021b8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 8021b72:	5d2a      	ldrb	r2, [r5, r4]
 8021b74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021b76:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021b7a:	25ff      	movs	r5, #255	; 0xff
 8021b7c:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8021b80:	920b      	str	r2, [sp, #44]	; 0x2c
 8021b82:	46ae      	mov	lr, r5
 8021b84:	e69d      	b.n	80218c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8021b86:	25ff      	movs	r5, #255	; 0xff
 8021b88:	46a9      	mov	r9, r5
 8021b8a:	e69a      	b.n	80218c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8021b8c:	25ff      	movs	r5, #255	; 0xff
 8021b8e:	46a9      	mov	r9, r5
 8021b90:	e7f7      	b.n	8021b82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 8021b92:	1c57      	adds	r7, r2, #1
 8021b94:	d18f      	bne.n	8021ab6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8021b96:	4294      	cmp	r4, r2
 8021b98:	dd8d      	ble.n	8021ab6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8021b9a:	1c5d      	adds	r5, r3, #1
 8021b9c:	db8b      	blt.n	8021ab6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8021b9e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021ba0:	429d      	cmp	r5, r3
 8021ba2:	dd88      	ble.n	8021ab6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8021ba4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8021ba6:	9202      	str	r2, [sp, #8]
 8021ba8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021baa:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8021bae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021bb0:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021bb2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8021bb6:	e9cd 4300 	strd	r4, r3, [sp]
 8021bba:	4631      	mov	r1, r6
 8021bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021bbe:	f7ff fc63 	bl	8021488 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8021bc2:	e778      	b.n	8021ab6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8021bc4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021bc6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021bc8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8021bcc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021bce:	1412      	asrs	r2, r2, #16
 8021bd0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8021bd4:	141b      	asrs	r3, r3, #16
 8021bd6:	fb04 2303 	mla	r3, r4, r3, r2
 8021bda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021bdc:	18d5      	adds	r5, r2, r3
 8021bde:	5cd3      	ldrb	r3, [r2, r3]
 8021be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021be6:	0e1e      	lsrs	r6, r3, #24
 8021be8:	2900      	cmp	r1, #0
 8021bea:	f000 811b 	beq.w	8021e24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 8021bee:	786a      	ldrb	r2, [r5, #1]
 8021bf0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021bf2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8021bf6:	9210      	str	r2, [sp, #64]	; 0x40
 8021bf8:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8021bfc:	2800      	cmp	r0, #0
 8021bfe:	f000 811c 	beq.w	8021e3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 8021c02:	192a      	adds	r2, r5, r4
 8021c04:	5d2d      	ldrb	r5, [r5, r4]
 8021c06:	7852      	ldrb	r2, [r2, #1]
 8021c08:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8021c0c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8021c10:	950c      	str	r5, [sp, #48]	; 0x30
 8021c12:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8021c16:	0e15      	lsrs	r5, r2, #24
 8021c18:	9211      	str	r2, [sp, #68]	; 0x44
 8021c1a:	b289      	uxth	r1, r1
 8021c1c:	b280      	uxth	r0, r0
 8021c1e:	fb01 fa00 	mul.w	sl, r1, r0
 8021c22:	0109      	lsls	r1, r1, #4
 8021c24:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021c28:	eba1 080a 	sub.w	r8, r1, sl
 8021c2c:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8021c30:	b280      	uxth	r0, r0
 8021c32:	fa1f f888 	uxth.w	r8, r8
 8021c36:	1a12      	subs	r2, r2, r0
 8021c38:	fb08 f10c 	mul.w	r1, r8, ip
 8021c3c:	b292      	uxth	r2, r2
 8021c3e:	fb02 1106 	mla	r1, r2, r6, r1
 8021c42:	fb00 1109 	mla	r1, r0, r9, r1
 8021c46:	fb0a 1105 	mla	r1, sl, r5, r1
 8021c4a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021c4e:	2900      	cmp	r1, #0
 8021c50:	f000 80da 	beq.w	8021e08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 8021c54:	2eff      	cmp	r6, #255	; 0xff
 8021c56:	d016      	beq.n	8021c86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 8021c58:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021c5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c60:	4377      	muls	r7, r6
 8021c62:	435e      	muls	r6, r3
 8021c64:	0a3b      	lsrs	r3, r7, #8
 8021c66:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021c6a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021c6e:	443b      	add	r3, r7
 8021c70:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021c74:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8021c78:	0a1b      	lsrs	r3, r3, #8
 8021c7a:	0a3f      	lsrs	r7, r7, #8
 8021c7c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021c80:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021c84:	433b      	orrs	r3, r7
 8021c86:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021c8a:	d01d      	beq.n	8021cc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 8021c8c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021c8e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021c90:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021c94:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021c98:	fb0c f606 	mul.w	r6, ip, r6
 8021c9c:	fb0c fc07 	mul.w	ip, ip, r7
 8021ca0:	0a37      	lsrs	r7, r6, #8
 8021ca2:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021ca6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021caa:	4437      	add	r7, r6
 8021cac:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8021cb0:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8021cb4:	0a3f      	lsrs	r7, r7, #8
 8021cb6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021cba:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021cbe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021cc2:	ea47 060c 	orr.w	r6, r7, ip
 8021cc6:	9610      	str	r6, [sp, #64]	; 0x40
 8021cc8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021ccc:	d01d      	beq.n	8021d0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8021cce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021cd0:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8021cd4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021cd8:	fb09 fc0c 	mul.w	ip, r9, ip
 8021cdc:	fb09 f906 	mul.w	r9, r9, r6
 8021ce0:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8021ce4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021ce8:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8021cec:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021cf0:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8021cf4:	4467      	add	r7, ip
 8021cf6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021cfa:	0a3f      	lsrs	r7, r7, #8
 8021cfc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021d00:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021d04:	ea47 0609 	orr.w	r6, r7, r9
 8021d08:	960c      	str	r6, [sp, #48]	; 0x30
 8021d0a:	2dff      	cmp	r5, #255	; 0xff
 8021d0c:	d01a      	beq.n	8021d44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 8021d0e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8021d10:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8021d14:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021d18:	fb05 fc0c 	mul.w	ip, r5, ip
 8021d1c:	4375      	muls	r5, r6
 8021d1e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8021d22:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021d26:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8021d2a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021d2e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8021d32:	4467      	add	r7, ip
 8021d34:	0a2d      	lsrs	r5, r5, #8
 8021d36:	0a3f      	lsrs	r7, r7, #8
 8021d38:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021d3c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021d40:	433d      	orrs	r5, r7
 8021d42:	9511      	str	r5, [sp, #68]	; 0x44
 8021d44:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021d46:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8021d4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021d4e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021d52:	fb08 f505 	mul.w	r5, r8, r5
 8021d56:	fb02 5506 	mla	r5, r2, r6, r5
 8021d5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021d5c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021d60:	fb00 5506 	mla	r5, r0, r6, r5
 8021d64:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8021d66:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021d6a:	fb0a 5506 	mla	r5, sl, r6, r5
 8021d6e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021d70:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021d74:	0a2d      	lsrs	r5, r5, #8
 8021d76:	fb08 f806 	mul.w	r8, r8, r6
 8021d7a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021d7e:	fb02 8303 	mla	r3, r2, r3, r8
 8021d82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021d84:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8021d88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021d8a:	fb00 3307 	mla	r3, r0, r7, r3
 8021d8e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021d92:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8021d96:	fb01 f30b 	mul.w	r3, r1, fp
 8021d9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021d9e:	1c59      	adds	r1, r3, #1
 8021da0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021da4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021da8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021dac:	ea45 050c 	orr.w	r5, r5, ip
 8021db0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021db4:	b2ea      	uxtb	r2, r5
 8021db6:	b2c9      	uxtb	r1, r1
 8021db8:	fb12 f20b 	smulbb	r2, r2, fp
 8021dbc:	fb03 2301 	mla	r3, r3, r1, r2
 8021dc0:	b29b      	uxth	r3, r3
 8021dc2:	1c5a      	adds	r2, r3, #1
 8021dc4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021dc8:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021dcc:	fb12 f201 	smulbb	r2, r2, r1
 8021dd0:	121b      	asrs	r3, r3, #8
 8021dd2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021dd6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021dda:	0c2d      	lsrs	r5, r5, #16
 8021ddc:	fb03 230b 	mla	r3, r3, fp, r2
 8021de0:	b29b      	uxth	r3, r3
 8021de2:	1c5a      	adds	r2, r3, #1
 8021de4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021de8:	121b      	asrs	r3, r3, #8
 8021dea:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021dee:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021df2:	fb13 f101 	smulbb	r1, r3, r1
 8021df6:	fb05 150b 	mla	r5, r5, fp, r1
 8021dfa:	b2ad      	uxth	r5, r5
 8021dfc:	1c69      	adds	r1, r5, #1
 8021dfe:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021e02:	122d      	asrs	r5, r5, #8
 8021e04:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8021e08:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021e0a:	f10e 0e03 	add.w	lr, lr, #3
 8021e0e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021e10:	4413      	add	r3, r2
 8021e12:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8021e14:	932d      	str	r3, [sp, #180]	; 0xb4
 8021e16:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021e18:	4413      	add	r3, r2
 8021e1a:	932e      	str	r3, [sp, #184]	; 0xb8
 8021e1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021e1e:	3b01      	subs	r3, #1
 8021e20:	9315      	str	r3, [sp, #84]	; 0x54
 8021e22:	e4ed      	b.n	8021800 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8021e24:	b160      	cbz	r0, 8021e40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 8021e26:	5d2a      	ldrb	r2, [r5, r4]
 8021e28:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021e2a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021e2e:	25ff      	movs	r5, #255	; 0xff
 8021e30:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8021e34:	920c      	str	r2, [sp, #48]	; 0x30
 8021e36:	46ac      	mov	ip, r5
 8021e38:	e6ef      	b.n	8021c1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8021e3a:	25ff      	movs	r5, #255	; 0xff
 8021e3c:	46a9      	mov	r9, r5
 8021e3e:	e6ec      	b.n	8021c1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8021e40:	25ff      	movs	r5, #255	; 0xff
 8021e42:	46a9      	mov	r9, r5
 8021e44:	e7f7      	b.n	8021e36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 8021e46:	b01b      	add	sp, #108	; 0x6c
 8021e48:	ecbd 8b08 	vpop	{d8-d11}
 8021e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021e50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8021e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e54:	b085      	sub	sp, #20
 8021e56:	7888      	ldrb	r0, [r1, #2]
 8021e58:	4692      	mov	sl, r2
 8021e5a:	4698      	mov	r8, r3
 8021e5c:	9000      	str	r0, [sp, #0]
 8021e5e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8021e62:	7848      	ldrb	r0, [r1, #1]
 8021e64:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8021e68:	9001      	str	r0, [sp, #4]
 8021e6a:	7808      	ldrb	r0, [r1, #0]
 8021e6c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8021e70:	9002      	str	r0, [sp, #8]
 8021e72:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021e76:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8021e7a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8021e7e:	fb04 560c 	mla	r6, r4, ip, r5
 8021e82:	2c00      	cmp	r4, #0
 8021e84:	eb02 0e06 	add.w	lr, r2, r6
 8021e88:	9a00      	ldr	r2, [sp, #0]
 8021e8a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021e8e:	9a01      	ldr	r2, [sp, #4]
 8021e90:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021e94:	db3e      	blt.n	8021f14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8021e96:	45a1      	cmp	r9, r4
 8021e98:	dd3c      	ble.n	8021f14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8021e9a:	2d00      	cmp	r5, #0
 8021e9c:	db38      	blt.n	8021f10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8021e9e:	45ac      	cmp	ip, r5
 8021ea0:	dd36      	ble.n	8021f10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8021ea2:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8021ea6:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8021eaa:	1c6e      	adds	r6, r5, #1
 8021eac:	d435      	bmi.n	8021f1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8021eae:	45b4      	cmp	ip, r6
 8021eb0:	dd33      	ble.n	8021f1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8021eb2:	b393      	cbz	r3, 8021f1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8021eb4:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8021eb8:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8021ebc:	3401      	adds	r4, #1
 8021ebe:	d430      	bmi.n	8021f22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8021ec0:	45a1      	cmp	r9, r4
 8021ec2:	dd2e      	ble.n	8021f22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8021ec4:	b36f      	cbz	r7, 8021f22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8021ec6:	2d00      	cmp	r5, #0
 8021ec8:	db29      	blt.n	8021f1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8021eca:	45ac      	cmp	ip, r5
 8021ecc:	dd27      	ble.n	8021f1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8021ece:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8021ed2:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8021ed6:	3501      	adds	r5, #1
 8021ed8:	d407      	bmi.n	8021eea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8021eda:	45ac      	cmp	ip, r5
 8021edc:	dd05      	ble.n	8021eea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8021ede:	b123      	cbz	r3, 8021eea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8021ee0:	44f4      	add	ip, lr
 8021ee2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8021ee6:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8021eea:	2b0f      	cmp	r3, #15
 8021eec:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021ef0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021ef4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021ef8:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021efc:	d801      	bhi.n	8021f02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8021efe:	2f0f      	cmp	r7, #15
 8021f00:	d911      	bls.n	8021f26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 8021f02:	4b76      	ldr	r3, [pc, #472]	; (80220dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8021f04:	f240 11a5 	movw	r1, #421	; 0x1a5
 8021f08:	4a75      	ldr	r2, [pc, #468]	; (80220e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8021f0a:	4876      	ldr	r0, [pc, #472]	; (80220e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8021f0c:	f004 ff9e 	bl	8026e4c <__assert_func>
 8021f10:	4602      	mov	r2, r0
 8021f12:	e7ca      	b.n	8021eaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 8021f14:	4606      	mov	r6, r0
 8021f16:	4602      	mov	r2, r0
 8021f18:	e7d0      	b.n	8021ebc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8021f1a:	4606      	mov	r6, r0
 8021f1c:	e7ce      	b.n	8021ebc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8021f1e:	4604      	mov	r4, r0
 8021f20:	e7d9      	b.n	8021ed6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 8021f22:	4604      	mov	r4, r0
 8021f24:	e7e1      	b.n	8021eea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8021f26:	b29b      	uxth	r3, r3
 8021f28:	b2bf      	uxth	r7, r7
 8021f2a:	fb07 fe03 	mul.w	lr, r7, r3
 8021f2e:	011b      	lsls	r3, r3, #4
 8021f30:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021f34:	eba3 0c0e 	sub.w	ip, r3, lr
 8021f38:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021f3c:	b2bf      	uxth	r7, r7
 8021f3e:	fa1f fc8c 	uxth.w	ip, ip
 8021f42:	1bed      	subs	r5, r5, r7
 8021f44:	fb0c f30a 	mul.w	r3, ip, sl
 8021f48:	b2ad      	uxth	r5, r5
 8021f4a:	fb05 330b 	mla	r3, r5, fp, r3
 8021f4e:	fb07 3309 	mla	r3, r7, r9, r3
 8021f52:	fb0e 3308 	mla	r3, lr, r8, r3
 8021f56:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021f5a:	9303      	str	r3, [sp, #12]
 8021f5c:	2b00      	cmp	r3, #0
 8021f5e:	f000 80b9 	beq.w	80220d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 8021f62:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021f66:	d018      	beq.n	8021f9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 8021f68:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021f6c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021f70:	fb0b f303 	mul.w	r3, fp, r3
 8021f74:	fb0b fb02 	mul.w	fp, fp, r2
 8021f78:	0a1a      	lsrs	r2, r3, #8
 8021f7a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021f7e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021f82:	441a      	add	r2, r3
 8021f84:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021f88:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021f8c:	0a12      	lsrs	r2, r2, #8
 8021f8e:	0a1b      	lsrs	r3, r3, #8
 8021f90:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021f94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f98:	431a      	orrs	r2, r3
 8021f9a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021f9e:	d019      	beq.n	8021fd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8021fa0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021fa4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021fa8:	fb0a fb0b 	mul.w	fp, sl, fp
 8021fac:	fb0a fa06 	mul.w	sl, sl, r6
 8021fb0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021fb4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021fb8:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021fbc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021fc0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021fc4:	445e      	add	r6, fp
 8021fc6:	0a1b      	lsrs	r3, r3, #8
 8021fc8:	0a36      	lsrs	r6, r6, #8
 8021fca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021fce:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021fd2:	431e      	orrs	r6, r3
 8021fd4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021fd8:	d019      	beq.n	802200e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 8021fda:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021fde:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021fe2:	fb09 fa0a 	mul.w	sl, r9, sl
 8021fe6:	fb09 f904 	mul.w	r9, r9, r4
 8021fea:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021fee:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021ff2:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021ff6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021ffa:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021ffe:	4454      	add	r4, sl
 8022000:	0a1b      	lsrs	r3, r3, #8
 8022002:	0a24      	lsrs	r4, r4, #8
 8022004:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022008:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802200c:	431c      	orrs	r4, r3
 802200e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022012:	d019      	beq.n	8022048 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 8022014:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8022018:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802201c:	fb08 f909 	mul.w	r9, r8, r9
 8022020:	fb08 f800 	mul.w	r8, r8, r0
 8022024:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8022028:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802202c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8022030:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022034:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8022038:	4448      	add	r0, r9
 802203a:	0a1b      	lsrs	r3, r3, #8
 802203c:	0a00      	lsrs	r0, r0, #8
 802203e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022042:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022046:	4318      	orrs	r0, r3
 8022048:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802204c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022050:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022054:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022058:	fb0c f808 	mul.w	r8, ip, r8
 802205c:	fb0c f606 	mul.w	r6, ip, r6
 8022060:	fb05 8803 	mla	r8, r5, r3, r8
 8022064:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8022068:	fb05 6202 	mla	r2, r5, r2, r6
 802206c:	fb07 8803 	mla	r8, r7, r3, r8
 8022070:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8022074:	fb0e 8303 	mla	r3, lr, r3, r8
 8022078:	0a1b      	lsrs	r3, r3, #8
 802207a:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802207e:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8022082:	9c02      	ldr	r4, [sp, #8]
 8022084:	fb07 2703 	mla	r7, r7, r3, r2
 8022088:	9a03      	ldr	r2, [sp, #12]
 802208a:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 802208e:	43d2      	mvns	r2, r2
 8022090:	fb0e 7303 	mla	r3, lr, r3, r7
 8022094:	b2d2      	uxtb	r2, r2
 8022096:	0a1b      	lsrs	r3, r3, #8
 8022098:	4354      	muls	r4, r2
 802209a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802209e:	1c60      	adds	r0, r4, #1
 80220a0:	ea48 0303 	orr.w	r3, r8, r3
 80220a4:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80220a8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80220ac:	7008      	strb	r0, [r1, #0]
 80220ae:	9801      	ldr	r0, [sp, #4]
 80220b0:	4350      	muls	r0, r2
 80220b2:	1c44      	adds	r4, r0, #1
 80220b4:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 80220b8:	0a18      	lsrs	r0, r3, #8
 80220ba:	0c1b      	lsrs	r3, r3, #16
 80220bc:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80220c0:	7048      	strb	r0, [r1, #1]
 80220c2:	9800      	ldr	r0, [sp, #0]
 80220c4:	4350      	muls	r0, r2
 80220c6:	4602      	mov	r2, r0
 80220c8:	3001      	adds	r0, #1
 80220ca:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80220ce:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80220d2:	708b      	strb	r3, [r1, #2]
 80220d4:	b005      	add	sp, #20
 80220d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220da:	bf00      	nop
 80220dc:	0802c1f1 	.word	0x0802c1f1
 80220e0:	0802c6e6 	.word	0x0802c6e6
 80220e4:	0802c2ba 	.word	0x0802c2ba

080220e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80220e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220ec:	ed2d 8b08 	vpush	{d8-d11}
 80220f0:	b097      	sub	sp, #92	; 0x5c
 80220f2:	eeb0 aa40 	vmov.f32	s20, s0
 80220f6:	eef0 9a60 	vmov.f32	s19, s1
 80220fa:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80220fc:	eeb0 9a41 	vmov.f32	s18, s2
 8022100:	9308      	str	r3, [sp, #32]
 8022102:	eeb0 8a62 	vmov.f32	s16, s5
 8022106:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802210a:	eef0 8a43 	vmov.f32	s17, s6
 802210e:	9015      	str	r0, [sp, #84]	; 0x54
 8022110:	eef0 ba44 	vmov.f32	s23, s8
 8022114:	6868      	ldr	r0, [r5, #4]
 8022116:	eeb0 ba64 	vmov.f32	s22, s9
 802211a:	9112      	str	r1, [sp, #72]	; 0x48
 802211c:	eef0 aa45 	vmov.f32	s21, s10
 8022120:	9310      	str	r3, [sp, #64]	; 0x40
 8022122:	9214      	str	r2, [sp, #80]	; 0x50
 8022124:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8022126:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 802212a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802212e:	fb00 1303 	mla	r3, r0, r3, r1
 8022132:	6829      	ldr	r1, [r5, #0]
 8022134:	6855      	ldr	r5, [r2, #4]
 8022136:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802213a:	3504      	adds	r5, #4
 802213c:	18cb      	adds	r3, r1, r3
 802213e:	930b      	str	r3, [sp, #44]	; 0x2c
 8022140:	6813      	ldr	r3, [r2, #0]
 8022142:	9311      	str	r3, [sp, #68]	; 0x44
 8022144:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022146:	2b00      	cmp	r3, #0
 8022148:	dc03      	bgt.n	8022152 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802214a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802214c:	2b00      	cmp	r3, #0
 802214e:	f340 8333 	ble.w	80227b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8022152:	9b08      	ldr	r3, [sp, #32]
 8022154:	2b00      	cmp	r3, #0
 8022156:	f340 8190 	ble.w	802247a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802215a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802215c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802215e:	1412      	asrs	r2, r2, #16
 8022160:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022164:	d42f      	bmi.n	80221c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022166:	1c51      	adds	r1, r2, #1
 8022168:	428c      	cmp	r4, r1
 802216a:	dd2f      	ble.n	80221cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802216c:	2b00      	cmp	r3, #0
 802216e:	db2d      	blt.n	80221cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8022170:	1c59      	adds	r1, r3, #1
 8022172:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022174:	4288      	cmp	r0, r1
 8022176:	dd29      	ble.n	80221cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8022178:	9b08      	ldr	r3, [sp, #32]
 802217a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802217c:	3b01      	subs	r3, #1
 802217e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022180:	fb02 1203 	mla	r2, r2, r3, r1
 8022184:	1412      	asrs	r2, r2, #16
 8022186:	d42b      	bmi.n	80221e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8022188:	3201      	adds	r2, #1
 802218a:	4294      	cmp	r4, r2
 802218c:	dd28      	ble.n	80221e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802218e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022190:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8022192:	fb02 1303 	mla	r3, r2, r3, r1
 8022196:	141b      	asrs	r3, r3, #16
 8022198:	d422      	bmi.n	80221e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802219a:	3301      	adds	r3, #1
 802219c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802219e:	429a      	cmp	r2, r3
 80221a0:	dd1e      	ble.n	80221e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80221a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80221a4:	f103 0803 	add.w	r8, r3, #3
 80221a8:	9b08      	ldr	r3, [sp, #32]
 80221aa:	9307      	str	r3, [sp, #28]
 80221ac:	9b07      	ldr	r3, [sp, #28]
 80221ae:	2b00      	cmp	r3, #0
 80221b0:	f300 81ca 	bgt.w	8022548 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 80221b4:	9b08      	ldr	r3, [sp, #32]
 80221b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80221b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80221bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80221c0:	441a      	add	r2, r3
 80221c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80221c4:	e15b      	b.n	802247e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 80221c6:	1c51      	adds	r1, r2, #1
 80221c8:	f040 8148 	bne.w	802245c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80221cc:	42a2      	cmp	r2, r4
 80221ce:	f280 8145 	bge.w	802245c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80221d2:	1c5a      	adds	r2, r3, #1
 80221d4:	f2c0 8142 	blt.w	802245c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80221d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80221da:	4293      	cmp	r3, r2
 80221dc:	f280 813e 	bge.w	802245c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80221e0:	9b08      	ldr	r3, [sp, #32]
 80221e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80221e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80221e6:	9307      	str	r3, [sp, #28]
 80221e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80221ea:	2b00      	cmp	r3, #0
 80221ec:	dde2      	ble.n	80221b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80221ee:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80221f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80221f2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80221f6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80221f8:	141b      	asrs	r3, r3, #16
 80221fa:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80221fe:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022200:	1412      	asrs	r2, r2, #16
 8022202:	f100 818b 	bmi.w	802251c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8022206:	1c56      	adds	r6, r2, #1
 8022208:	42b4      	cmp	r4, r6
 802220a:	f340 8189 	ble.w	8022520 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 802220e:	2b00      	cmp	r3, #0
 8022210:	f2c0 8186 	blt.w	8022520 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8022214:	1c5e      	adds	r6, r3, #1
 8022216:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022218:	42b7      	cmp	r7, r6
 802221a:	f340 8181 	ble.w	8022520 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 802221e:	fb03 2304 	mla	r3, r3, r4, r2
 8022222:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022224:	18d6      	adds	r6, r2, r3
 8022226:	5cd3      	ldrb	r3, [r2, r3]
 8022228:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802222c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022230:	2900      	cmp	r1, #0
 8022232:	f000 8163 	beq.w	80224fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8022236:	7872      	ldrb	r2, [r6, #1]
 8022238:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802223c:	920c      	str	r2, [sp, #48]	; 0x30
 802223e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022242:	2800      	cmp	r0, #0
 8022244:	f000 8164 	beq.w	8022510 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8022248:	1932      	adds	r2, r6, r4
 802224a:	5d36      	ldrb	r6, [r6, r4]
 802224c:	7852      	ldrb	r2, [r2, #1]
 802224e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8022252:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022256:	9609      	str	r6, [sp, #36]	; 0x24
 8022258:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802225c:	0e16      	lsrs	r6, r2, #24
 802225e:	920d      	str	r2, [sp, #52]	; 0x34
 8022260:	b289      	uxth	r1, r1
 8022262:	b280      	uxth	r0, r0
 8022264:	fb01 fb00 	mul.w	fp, r1, r0
 8022268:	0109      	lsls	r1, r1, #4
 802226a:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 802226e:	eba1 090b 	sub.w	r9, r1, fp
 8022272:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8022276:	b280      	uxth	r0, r0
 8022278:	fa1f f989 	uxth.w	r9, r9
 802227c:	1a12      	subs	r2, r2, r0
 802227e:	fb09 f108 	mul.w	r1, r9, r8
 8022282:	b292      	uxth	r2, r2
 8022284:	fb02 110c 	mla	r1, r2, ip, r1
 8022288:	fb00 110a 	mla	r1, r0, sl, r1
 802228c:	fb0b 1106 	mla	r1, fp, r6, r1
 8022290:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022294:	2900      	cmp	r1, #0
 8022296:	f000 80d2 	beq.w	802243e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 802229a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802229e:	d01b      	beq.n	80222d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 80222a0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80222a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80222a8:	fb0c fe0e 	mul.w	lr, ip, lr
 80222ac:	fb0c fc03 	mul.w	ip, ip, r3
 80222b0:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80222b4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80222b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80222bc:	4473      	add	r3, lr
 80222be:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80222c2:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80222c6:	0a1b      	lsrs	r3, r3, #8
 80222c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80222cc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80222d0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80222d4:	ea43 030e 	orr.w	r3, r3, lr
 80222d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80222dc:	d01e      	beq.n	802231c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 80222de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80222e0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80222e4:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80222e8:	fb08 fc0c 	mul.w	ip, r8, ip
 80222ec:	fb08 f80e 	mul.w	r8, r8, lr
 80222f0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80222f4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80222f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80222fc:	44e6      	add	lr, ip
 80222fe:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8022302:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8022306:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802230a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802230e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022312:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022316:	ea4e 0708 	orr.w	r7, lr, r8
 802231a:	970c      	str	r7, [sp, #48]	; 0x30
 802231c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022320:	d01e      	beq.n	8022360 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8022322:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022324:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8022328:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802232c:	fb0a f808 	mul.w	r8, sl, r8
 8022330:	fb0a fa0c 	mul.w	sl, sl, ip
 8022334:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8022338:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802233c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022340:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022344:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022348:	44c6      	add	lr, r8
 802234a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802234e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022352:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022356:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802235a:	ea4e 070a 	orr.w	r7, lr, sl
 802235e:	9709      	str	r7, [sp, #36]	; 0x24
 8022360:	2eff      	cmp	r6, #255	; 0xff
 8022362:	d01d      	beq.n	80223a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8022364:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022366:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802236a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802236e:	fb06 f808 	mul.w	r8, r6, r8
 8022372:	fb06 f60c 	mul.w	r6, r6, ip
 8022376:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802237a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802237e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8022382:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022386:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802238a:	44c6      	add	lr, r8
 802238c:	0a36      	lsrs	r6, r6, #8
 802238e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022392:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022396:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802239a:	ea4e 0606 	orr.w	r6, lr, r6
 802239e:	960d      	str	r6, [sp, #52]	; 0x34
 80223a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80223a2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80223a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80223a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80223ac:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80223b0:	43c9      	mvns	r1, r1
 80223b2:	fb09 f606 	mul.w	r6, r9, r6
 80223b6:	b2c9      	uxtb	r1, r1
 80223b8:	fb02 660c 	mla	r6, r2, ip, r6
 80223bc:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80223c0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80223c2:	fb00 660c 	mla	r6, r0, ip, r6
 80223c6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80223ca:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80223cc:	fb0b 660c 	mla	r6, fp, ip, r6
 80223d0:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80223d4:	fb09 f90c 	mul.w	r9, r9, ip
 80223d8:	0a36      	lsrs	r6, r6, #8
 80223da:	fb02 9303 	mla	r3, r2, r3, r9
 80223de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80223e0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80223e4:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80223e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80223ea:	fb00 330e 	mla	r3, r0, lr, r3
 80223ee:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80223f2:	fb0b 3b00 	mla	fp, fp, r0, r3
 80223f6:	9b07      	ldr	r3, [sp, #28]
 80223f8:	781b      	ldrb	r3, [r3, #0]
 80223fa:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80223fe:	fb03 f201 	mul.w	r2, r3, r1
 8022402:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022406:	1c53      	adds	r3, r2, #1
 8022408:	ea46 060b 	orr.w	r6, r6, fp
 802240c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022410:	9a07      	ldr	r2, [sp, #28]
 8022412:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8022416:	7013      	strb	r3, [r2, #0]
 8022418:	7853      	ldrb	r3, [r2, #1]
 802241a:	434b      	muls	r3, r1
 802241c:	1c5a      	adds	r2, r3, #1
 802241e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022422:	0a33      	lsrs	r3, r6, #8
 8022424:	0c36      	lsrs	r6, r6, #16
 8022426:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802242a:	9a07      	ldr	r2, [sp, #28]
 802242c:	7053      	strb	r3, [r2, #1]
 802242e:	7893      	ldrb	r3, [r2, #2]
 8022430:	4359      	muls	r1, r3
 8022432:	1c4b      	adds	r3, r1, #1
 8022434:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022438:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 802243c:	7096      	strb	r6, [r2, #2]
 802243e:	9b07      	ldr	r3, [sp, #28]
 8022440:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022442:	3303      	adds	r3, #3
 8022444:	9307      	str	r3, [sp, #28]
 8022446:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022448:	4413      	add	r3, r2
 802244a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802244c:	9329      	str	r3, [sp, #164]	; 0xa4
 802244e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022450:	4413      	add	r3, r2
 8022452:	932a      	str	r3, [sp, #168]	; 0xa8
 8022454:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022456:	3b01      	subs	r3, #1
 8022458:	9313      	str	r3, [sp, #76]	; 0x4c
 802245a:	e6c5      	b.n	80221e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 802245c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802245e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022460:	4413      	add	r3, r2
 8022462:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022464:	9329      	str	r3, [sp, #164]	; 0xa4
 8022466:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022468:	4413      	add	r3, r2
 802246a:	932a      	str	r3, [sp, #168]	; 0xa8
 802246c:	9b08      	ldr	r3, [sp, #32]
 802246e:	3b01      	subs	r3, #1
 8022470:	9308      	str	r3, [sp, #32]
 8022472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022474:	3303      	adds	r3, #3
 8022476:	930b      	str	r3, [sp, #44]	; 0x2c
 8022478:	e66b      	b.n	8022152 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802247a:	f47f ae7d 	bne.w	8022178 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 802247e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022480:	2b00      	cmp	r3, #0
 8022482:	f340 8199 	ble.w	80227b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8022486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802248a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802248c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022490:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022494:	eef0 6a48 	vmov.f32	s13, s16
 8022498:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802249c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80224a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80224a4:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80224a8:	eef0 6a68 	vmov.f32	s13, s17
 80224ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80224b0:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 80224b4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80224b8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80224bc:	ee37 8a48 	vsub.f32	s16, s14, s16
 80224c0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80224c4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80224c8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80224cc:	ee18 2a10 	vmov	r2, s16
 80224d0:	eeb0 8a47 	vmov.f32	s16, s14
 80224d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80224d8:	ee18 2a90 	vmov	r2, s17
 80224dc:	932b      	str	r3, [sp, #172]	; 0xac
 80224de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80224e0:	eef0 8a67 	vmov.f32	s17, s15
 80224e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80224e8:	932c      	str	r3, [sp, #176]	; 0xb0
 80224ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80224ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80224ee:	3b01      	subs	r3, #1
 80224f0:	9312      	str	r3, [sp, #72]	; 0x48
 80224f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80224f4:	bf08      	it	eq
 80224f6:	4613      	moveq	r3, r2
 80224f8:	9308      	str	r3, [sp, #32]
 80224fa:	e623      	b.n	8022144 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80224fc:	b158      	cbz	r0, 8022516 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80224fe:	5d32      	ldrb	r2, [r6, r4]
 8022500:	26ff      	movs	r6, #255	; 0xff
 8022502:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022506:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802250a:	9209      	str	r2, [sp, #36]	; 0x24
 802250c:	46b0      	mov	r8, r6
 802250e:	e6a7      	b.n	8022260 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8022510:	26ff      	movs	r6, #255	; 0xff
 8022512:	46b2      	mov	sl, r6
 8022514:	e6a4      	b.n	8022260 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8022516:	26ff      	movs	r6, #255	; 0xff
 8022518:	46b2      	mov	sl, r6
 802251a:	e7f7      	b.n	802250c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 802251c:	1c57      	adds	r7, r2, #1
 802251e:	d18e      	bne.n	802243e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8022520:	4294      	cmp	r4, r2
 8022522:	dd8c      	ble.n	802243e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8022524:	1c5e      	adds	r6, r3, #1
 8022526:	db8a      	blt.n	802243e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8022528:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802252a:	429e      	cmp	r6, r3
 802252c:	dd87      	ble.n	802243e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 802252e:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8022532:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022536:	e9cd 4600 	strd	r4, r6, [sp]
 802253a:	462b      	mov	r3, r5
 802253c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802253e:	9907      	ldr	r1, [sp, #28]
 8022540:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022542:	f7ff fc85 	bl	8021e50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8022546:	e77a      	b.n	802243e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8022548:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802254a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802254c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022550:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022552:	1409      	asrs	r1, r1, #16
 8022554:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8022558:	141b      	asrs	r3, r3, #16
 802255a:	fb04 1303 	mla	r3, r4, r3, r1
 802255e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022560:	18ce      	adds	r6, r1, r3
 8022562:	5ccb      	ldrb	r3, [r1, r3]
 8022564:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8022568:	0e1f      	lsrs	r7, r3, #24
 802256a:	2a00      	cmp	r2, #0
 802256c:	f000 8114 	beq.w	8022798 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8022570:	7871      	ldrb	r1, [r6, #1]
 8022572:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8022576:	910e      	str	r1, [sp, #56]	; 0x38
 8022578:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802257c:	2800      	cmp	r0, #0
 802257e:	f000 8115 	beq.w	80227ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8022582:	1931      	adds	r1, r6, r4
 8022584:	5d36      	ldrb	r6, [r6, r4]
 8022586:	7849      	ldrb	r1, [r1, #1]
 8022588:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 802258c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8022590:	960a      	str	r6, [sp, #40]	; 0x28
 8022592:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022596:	0e0e      	lsrs	r6, r1, #24
 8022598:	910f      	str	r1, [sp, #60]	; 0x3c
 802259a:	b292      	uxth	r2, r2
 802259c:	b280      	uxth	r0, r0
 802259e:	fb02 fb00 	mul.w	fp, r2, r0
 80225a2:	0112      	lsls	r2, r2, #4
 80225a4:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80225a8:	eba2 090b 	sub.w	r9, r2, fp
 80225ac:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80225b0:	b280      	uxth	r0, r0
 80225b2:	fa1f f989 	uxth.w	r9, r9
 80225b6:	1a09      	subs	r1, r1, r0
 80225b8:	fb09 f20e 	mul.w	r2, r9, lr
 80225bc:	b289      	uxth	r1, r1
 80225be:	fb01 2207 	mla	r2, r1, r7, r2
 80225c2:	fb00 220a 	mla	r2, r0, sl, r2
 80225c6:	fb0b 2206 	mla	r2, fp, r6, r2
 80225ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80225ce:	9213      	str	r2, [sp, #76]	; 0x4c
 80225d0:	2a00      	cmp	r2, #0
 80225d2:	f000 80d4 	beq.w	802277e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 80225d6:	2fff      	cmp	r7, #255	; 0xff
 80225d8:	d01a      	beq.n	8022610 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 80225da:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80225de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80225e2:	fb07 fc0c 	mul.w	ip, r7, ip
 80225e6:	435f      	muls	r7, r3
 80225e8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80225ec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80225f0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80225f4:	4463      	add	r3, ip
 80225f6:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80225fa:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80225fe:	0a1b      	lsrs	r3, r3, #8
 8022600:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022604:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022608:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802260c:	ea43 030c 	orr.w	r3, r3, ip
 8022610:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022614:	d01f      	beq.n	8022656 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8022616:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022618:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802261a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802261e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022622:	fb0e f707 	mul.w	r7, lr, r7
 8022626:	fb0e fe0c 	mul.w	lr, lr, ip
 802262a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802262e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022632:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022636:	44bc      	add	ip, r7
 8022638:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802263c:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022640:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022644:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022648:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802264c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022650:	ea4c 020e 	orr.w	r2, ip, lr
 8022654:	920e      	str	r2, [sp, #56]	; 0x38
 8022656:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802265a:	d01e      	beq.n	802269a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 802265c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802265e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8022662:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022666:	fb0a fe0e 	mul.w	lr, sl, lr
 802266a:	fb0a fa07 	mul.w	sl, sl, r7
 802266e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022672:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022676:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802267a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802267e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022682:	44f4      	add	ip, lr
 8022684:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022688:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802268c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022690:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022694:	ea4c 020a 	orr.w	r2, ip, sl
 8022698:	920a      	str	r2, [sp, #40]	; 0x28
 802269a:	2eff      	cmp	r6, #255	; 0xff
 802269c:	d01c      	beq.n	80226d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 802269e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80226a0:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80226a4:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80226a8:	fb06 fe0e 	mul.w	lr, r6, lr
 80226ac:	437e      	muls	r6, r7
 80226ae:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80226b2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80226b6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80226ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80226be:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80226c2:	44f4      	add	ip, lr
 80226c4:	0a36      	lsrs	r6, r6, #8
 80226c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80226ca:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80226ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80226d2:	ea4c 0206 	orr.w	r2, ip, r6
 80226d6:	920f      	str	r2, [sp, #60]	; 0x3c
 80226d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80226da:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80226de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80226e2:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 80226e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80226e8:	fb09 f606 	mul.w	r6, r9, r6
 80226ec:	fb01 6607 	mla	r6, r1, r7, r6
 80226f0:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80226f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80226f6:	fb00 6607 	mla	r6, r0, r7, r6
 80226fa:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80226fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022700:	fb0b 6607 	mla	r6, fp, r7, r6
 8022704:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802270a:	fb09 f907 	mul.w	r9, r9, r7
 802270e:	0a36      	lsrs	r6, r6, #8
 8022710:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022714:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022716:	fb01 9303 	mla	r3, r1, r3, r9
 802271a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802271e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8022722:	fb00 330c 	mla	r3, r0, ip, r3
 8022726:	fb0b 3e0e 	mla	lr, fp, lr, r3
 802272a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802272c:	43da      	mvns	r2, r3
 802272e:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8022732:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022736:	b2d2      	uxtb	r2, r2
 8022738:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802273c:	fb03 f102 	mul.w	r1, r3, r2
 8022740:	ea46 060e 	orr.w	r6, r6, lr
 8022744:	1c4b      	adds	r3, r1, #1
 8022746:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802274a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 802274e:	f808 3c03 	strb.w	r3, [r8, #-3]
 8022752:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8022756:	4353      	muls	r3, r2
 8022758:	1c59      	adds	r1, r3, #1
 802275a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802275e:	0a33      	lsrs	r3, r6, #8
 8022760:	0c36      	lsrs	r6, r6, #16
 8022762:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022766:	f808 3c02 	strb.w	r3, [r8, #-2]
 802276a:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 802276e:	435a      	muls	r2, r3
 8022770:	1c53      	adds	r3, r2, #1
 8022772:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022776:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802277a:	f808 6c01 	strb.w	r6, [r8, #-1]
 802277e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022780:	f108 0803 	add.w	r8, r8, #3
 8022784:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022786:	4413      	add	r3, r2
 8022788:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802278a:	9329      	str	r3, [sp, #164]	; 0xa4
 802278c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802278e:	4413      	add	r3, r2
 8022790:	932a      	str	r3, [sp, #168]	; 0xa8
 8022792:	9b07      	ldr	r3, [sp, #28]
 8022794:	3b01      	subs	r3, #1
 8022796:	e508      	b.n	80221aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8022798:	b158      	cbz	r0, 80227b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 802279a:	5d31      	ldrb	r1, [r6, r4]
 802279c:	26ff      	movs	r6, #255	; 0xff
 802279e:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80227a2:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80227a6:	910a      	str	r1, [sp, #40]	; 0x28
 80227a8:	46b6      	mov	lr, r6
 80227aa:	e6f6      	b.n	802259a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 80227ac:	26ff      	movs	r6, #255	; 0xff
 80227ae:	46b2      	mov	sl, r6
 80227b0:	e6f3      	b.n	802259a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 80227b2:	26ff      	movs	r6, #255	; 0xff
 80227b4:	46b2      	mov	sl, r6
 80227b6:	e7f7      	b.n	80227a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 80227b8:	b017      	add	sp, #92	; 0x5c
 80227ba:	ecbd 8b08 	vpop	{d8-d11}
 80227be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080227c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80227c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227c8:	b08d      	sub	sp, #52	; 0x34
 80227ca:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 80227ce:	9103      	str	r1, [sp, #12]
 80227d0:	fb07 5803 	mla	r8, r7, r3, r5
 80227d4:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80227d8:	9803      	ldr	r0, [sp, #12]
 80227da:	2f00      	cmp	r7, #0
 80227dc:	910b      	str	r1, [sp, #44]	; 0x2c
 80227de:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80227e2:	9903      	ldr	r1, [sp, #12]
 80227e4:	9c03      	ldr	r4, [sp, #12]
 80227e6:	eb02 0608 	add.w	r6, r2, r8
 80227ea:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80227ee:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 80227f2:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80227f6:	7809      	ldrb	r1, [r1, #0]
 80227f8:	7840      	ldrb	r0, [r0, #1]
 80227fa:	78a4      	ldrb	r4, [r4, #2]
 80227fc:	db51      	blt.n	80228a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80227fe:	45be      	cmp	lr, r7
 8022800:	dd4f      	ble.n	80228a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8022802:	2d00      	cmp	r5, #0
 8022804:	db49      	blt.n	802289a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8022806:	42ab      	cmp	r3, r5
 8022808:	dd47      	ble.n	802289a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 802280a:	f812 2008 	ldrb.w	r2, [r2, r8]
 802280e:	9204      	str	r2, [sp, #16]
 8022810:	7872      	ldrb	r2, [r6, #1]
 8022812:	9205      	str	r2, [sp, #20]
 8022814:	78b2      	ldrb	r2, [r6, #2]
 8022816:	9206      	str	r2, [sp, #24]
 8022818:	1c6a      	adds	r2, r5, #1
 802281a:	d449      	bmi.n	80228b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 802281c:	4293      	cmp	r3, r2
 802281e:	dd47      	ble.n	80228b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8022820:	f1bc 0f00 	cmp.w	ip, #0
 8022824:	d044      	beq.n	80228b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8022826:	7972      	ldrb	r2, [r6, #5]
 8022828:	f896 b003 	ldrb.w	fp, [r6, #3]
 802282c:	f896 a004 	ldrb.w	sl, [r6, #4]
 8022830:	9201      	str	r2, [sp, #4]
 8022832:	3701      	adds	r7, #1
 8022834:	d444      	bmi.n	80228c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8022836:	45be      	cmp	lr, r7
 8022838:	dd42      	ble.n	80228c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 802283a:	f1b9 0f00 	cmp.w	r9, #0
 802283e:	f000 80c1 	beq.w	80229c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8022842:	2d00      	cmp	r5, #0
 8022844:	db38      	blt.n	80228b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8022846:	42ab      	cmp	r3, r5
 8022848:	dd36      	ble.n	80228b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 802284a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802284e:	f816 8002 	ldrb.w	r8, [r6, r2]
 8022852:	2203      	movs	r2, #3
 8022854:	fb03 6702 	mla	r7, r3, r2, r6
 8022858:	fb03 6202 	mla	r2, r3, r2, r6
 802285c:	787f      	ldrb	r7, [r7, #1]
 802285e:	f892 e002 	ldrb.w	lr, [r2, #2]
 8022862:	9702      	str	r7, [sp, #8]
 8022864:	3501      	adds	r5, #1
 8022866:	d432      	bmi.n	80228ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8022868:	42ab      	cmp	r3, r5
 802286a:	dd30      	ble.n	80228ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 802286c:	f1bc 0f00 	cmp.w	ip, #0
 8022870:	d031      	beq.n	80228d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8022872:	2703      	movs	r7, #3
 8022874:	fb13 7207 	smlabb	r2, r3, r7, r7
 8022878:	5cb5      	ldrb	r5, [r6, r2]
 802287a:	fb03 6207 	mla	r2, r3, r7, r6
 802287e:	fb03 6307 	mla	r3, r3, r7, r6
 8022882:	7912      	ldrb	r2, [r2, #4]
 8022884:	795e      	ldrb	r6, [r3, #5]
 8022886:	f1bc 0f0f 	cmp.w	ip, #15
 802288a:	d927      	bls.n	80228dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 802288c:	4b53      	ldr	r3, [pc, #332]	; (80229dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 802288e:	f240 11a5 	movw	r1, #421	; 0x1a5
 8022892:	4a53      	ldr	r2, [pc, #332]	; (80229e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8022894:	4853      	ldr	r0, [pc, #332]	; (80229e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8022896:	f004 fad9 	bl	8026e4c <__assert_func>
 802289a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802289e:	9104      	str	r1, [sp, #16]
 80228a0:	e7ba      	b.n	8022818 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 80228a2:	9401      	str	r4, [sp, #4]
 80228a4:	4682      	mov	sl, r0
 80228a6:	468b      	mov	fp, r1
 80228a8:	9104      	str	r1, [sp, #16]
 80228aa:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80228ae:	e7c0      	b.n	8022832 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80228b0:	9401      	str	r4, [sp, #4]
 80228b2:	4682      	mov	sl, r0
 80228b4:	468b      	mov	fp, r1
 80228b6:	e7bc      	b.n	8022832 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80228b8:	46a6      	mov	lr, r4
 80228ba:	9002      	str	r0, [sp, #8]
 80228bc:	4688      	mov	r8, r1
 80228be:	e7d1      	b.n	8022864 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 80228c0:	4626      	mov	r6, r4
 80228c2:	4602      	mov	r2, r0
 80228c4:	460d      	mov	r5, r1
 80228c6:	46a6      	mov	lr, r4
 80228c8:	9002      	str	r0, [sp, #8]
 80228ca:	4688      	mov	r8, r1
 80228cc:	e7db      	b.n	8022886 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80228ce:	4626      	mov	r6, r4
 80228d0:	4602      	mov	r2, r0
 80228d2:	460d      	mov	r5, r1
 80228d4:	e7d7      	b.n	8022886 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80228d6:	4626      	mov	r6, r4
 80228d8:	4602      	mov	r2, r0
 80228da:	460d      	mov	r5, r1
 80228dc:	f1b9 0f0f 	cmp.w	r9, #15
 80228e0:	d8d4      	bhi.n	802288c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80228e2:	fa1f f38c 	uxth.w	r3, ip
 80228e6:	fa1f fc89 	uxth.w	ip, r9
 80228ea:	fb03 f70c 	mul.w	r7, r3, ip
 80228ee:	011b      	lsls	r3, r3, #4
 80228f0:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80228f4:	9707      	str	r7, [sp, #28]
 80228f6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80228fa:	fa1f fc8c 	uxth.w	ip, ip
 80228fe:	eba7 070c 	sub.w	r7, r7, ip
 8022902:	b2bf      	uxth	r7, r7
 8022904:	9709      	str	r7, [sp, #36]	; 0x24
 8022906:	9f07      	ldr	r7, [sp, #28]
 8022908:	1bdb      	subs	r3, r3, r7
 802290a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 802290e:	b29b      	uxth	r3, r3
 8022910:	9708      	str	r7, [sp, #32]
 8022912:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022914:	930a      	str	r3, [sp, #40]	; 0x28
 8022916:	ea6f 0907 	mvn.w	r9, r7
 802291a:	fb03 fb0b 	mul.w	fp, r3, fp
 802291e:	9f04      	ldr	r7, [sp, #16]
 8022920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022922:	fa5f f989 	uxtb.w	r9, r9
 8022926:	fb03 bb07 	mla	fp, r3, r7, fp
 802292a:	9f07      	ldr	r7, [sp, #28]
 802292c:	fb11 f109 	smulbb	r1, r1, r9
 8022930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022932:	fb0c b808 	mla	r8, ip, r8, fp
 8022936:	fb10 f009 	smulbb	r0, r0, r9
 802293a:	fb14 f409 	smulbb	r4, r4, r9
 802293e:	fb07 8805 	mla	r8, r7, r5, r8
 8022942:	9d08      	ldr	r5, [sp, #32]
 8022944:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022946:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802294a:	fb08 1805 	mla	r8, r8, r5, r1
 802294e:	9d05      	ldr	r5, [sp, #20]
 8022950:	fa1f f888 	uxth.w	r8, r8
 8022954:	f108 0101 	add.w	r1, r8, #1
 8022958:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 802295c:	9903      	ldr	r1, [sp, #12]
 802295e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022962:	f881 8000 	strb.w	r8, [r1]
 8022966:	fb03 f10a 	mul.w	r1, r3, sl
 802296a:	fb07 1105 	mla	r1, r7, r5, r1
 802296e:	9d02      	ldr	r5, [sp, #8]
 8022970:	fb0c 1105 	mla	r1, ip, r5, r1
 8022974:	9d07      	ldr	r5, [sp, #28]
 8022976:	fb05 1102 	mla	r1, r5, r2, r1
 802297a:	9a08      	ldr	r2, [sp, #32]
 802297c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022980:	fb01 0102 	mla	r1, r1, r2, r0
 8022984:	9a03      	ldr	r2, [sp, #12]
 8022986:	b289      	uxth	r1, r1
 8022988:	1c48      	adds	r0, r1, #1
 802298a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802298e:	1209      	asrs	r1, r1, #8
 8022990:	7051      	strb	r1, [r2, #1]
 8022992:	9a01      	ldr	r2, [sp, #4]
 8022994:	4353      	muls	r3, r2
 8022996:	9a06      	ldr	r2, [sp, #24]
 8022998:	fb07 3702 	mla	r7, r7, r2, r3
 802299c:	9b08      	ldr	r3, [sp, #32]
 802299e:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80229a2:	fb05 c606 	mla	r6, r5, r6, ip
 80229a6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80229aa:	fb06 4603 	mla	r6, r6, r3, r4
 80229ae:	9b03      	ldr	r3, [sp, #12]
 80229b0:	b2b6      	uxth	r6, r6
 80229b2:	f106 0e01 	add.w	lr, r6, #1
 80229b6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80229ba:	1236      	asrs	r6, r6, #8
 80229bc:	709e      	strb	r6, [r3, #2]
 80229be:	b00d      	add	sp, #52	; 0x34
 80229c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229c4:	f1bc 0f0f 	cmp.w	ip, #15
 80229c8:	f63f af60 	bhi.w	802288c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80229cc:	4626      	mov	r6, r4
 80229ce:	4602      	mov	r2, r0
 80229d0:	460d      	mov	r5, r1
 80229d2:	46a6      	mov	lr, r4
 80229d4:	9002      	str	r0, [sp, #8]
 80229d6:	4688      	mov	r8, r1
 80229d8:	e783      	b.n	80228e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 80229da:	bf00      	nop
 80229dc:	0802c1f1 	.word	0x0802c1f1
 80229e0:	0802c6e6 	.word	0x0802c6e6
 80229e4:	0802c2ba 	.word	0x0802c2ba

080229e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80229e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229ec:	ed2d 8b08 	vpush	{d8-d11}
 80229f0:	b0a1      	sub	sp, #132	; 0x84
 80229f2:	eeb0 aa40 	vmov.f32	s20, s0
 80229f6:	eef0 9a60 	vmov.f32	s19, s1
 80229fa:	9307      	str	r3, [sp, #28]
 80229fc:	eeb0 9a41 	vmov.f32	s18, s2
 8022a00:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8022a04:	eeb0 8a62 	vmov.f32	s16, s5
 8022a08:	9210      	str	r2, [sp, #64]	; 0x40
 8022a0a:	eef0 8a43 	vmov.f32	s17, s6
 8022a0e:	9308      	str	r3, [sp, #32]
 8022a10:	eef0 ba44 	vmov.f32	s23, s8
 8022a14:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 8022a18:	eeb0 ba64 	vmov.f32	s22, s9
 8022a1c:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8022a1e:	eef0 aa45 	vmov.f32	s21, s10
 8022a22:	930a      	str	r3, [sp, #40]	; 0x28
 8022a24:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8022a28:	901f      	str	r0, [sp, #124]	; 0x7c
 8022a2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8022a2c:	6850      	ldr	r0, [r2, #4]
 8022a2e:	910e      	str	r1, [sp, #56]	; 0x38
 8022a30:	6812      	ldr	r2, [r2, #0]
 8022a32:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 8022a36:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 8022a3a:	fb00 1303 	mla	r3, r0, r3, r1
 8022a3e:	9908      	ldr	r1, [sp, #32]
 8022a40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022a44:	18d3      	adds	r3, r2, r3
 8022a46:	2203      	movs	r2, #3
 8022a48:	9309      	str	r3, [sp, #36]	; 0x24
 8022a4a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8022a4c:	681b      	ldr	r3, [r3, #0]
 8022a4e:	930c      	str	r3, [sp, #48]	; 0x30
 8022a50:	f06f 0304 	mvn.w	r3, #4
 8022a54:	fb11 3302 	smlabb	r3, r1, r2, r3
 8022a58:	930d      	str	r3, [sp, #52]	; 0x34
 8022a5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022a5c:	43db      	mvns	r3, r3
 8022a5e:	b2db      	uxtb	r3, r3
 8022a60:	930b      	str	r3, [sp, #44]	; 0x2c
 8022a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022a64:	2b00      	cmp	r3, #0
 8022a66:	dc03      	bgt.n	8022a70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8022a68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022a6a:	2b00      	cmp	r3, #0
 8022a6c:	f340 81df 	ble.w	8022e2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8022a70:	9b07      	ldr	r3, [sp, #28]
 8022a72:	2b00      	cmp	r3, #0
 8022a74:	f340 80f2 	ble.w	8022c5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8022a78:	ea5f 4228 	movs.w	r2, r8, asr #16
 8022a7c:	ea4f 432b 	mov.w	r3, fp, asr #16
 8022a80:	d430      	bmi.n	8022ae4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022a82:	1c51      	adds	r1, r2, #1
 8022a84:	9808      	ldr	r0, [sp, #32]
 8022a86:	4281      	cmp	r1, r0
 8022a88:	da2f      	bge.n	8022aea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8022a8a:	2b00      	cmp	r3, #0
 8022a8c:	db2d      	blt.n	8022aea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8022a8e:	1c59      	adds	r1, r3, #1
 8022a90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022a92:	4288      	cmp	r0, r1
 8022a94:	dd29      	ble.n	8022aea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8022a96:	9b07      	ldr	r3, [sp, #28]
 8022a98:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8022a9a:	3b01      	subs	r3, #1
 8022a9c:	fb02 8203 	mla	r2, r2, r3, r8
 8022aa0:	1412      	asrs	r2, r2, #16
 8022aa2:	d42d      	bmi.n	8022b00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8022aa4:	3201      	adds	r2, #1
 8022aa6:	9908      	ldr	r1, [sp, #32]
 8022aa8:	4291      	cmp	r1, r2
 8022aaa:	dd29      	ble.n	8022b00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8022aac:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8022aae:	fb02 b303 	mla	r3, r2, r3, fp
 8022ab2:	141b      	asrs	r3, r3, #16
 8022ab4:	d424      	bmi.n	8022b00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8022ab6:	3301      	adds	r3, #1
 8022ab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022aba:	429a      	cmp	r2, r3
 8022abc:	dd20      	ble.n	8022b00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8022abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ac0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8022ac4:	1cde      	adds	r6, r3, #3
 8022ac6:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 8022aca:	f1bc 0f00 	cmp.w	ip, #0
 8022ace:	f300 811f 	bgt.w	8022d10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8022ad2:	9b07      	ldr	r3, [sp, #28]
 8022ad4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ada:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022ade:	4423      	add	r3, r4
 8022ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8022ae2:	e0bd      	b.n	8022c60 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8022ae4:	1c57      	adds	r7, r2, #1
 8022ae6:	f040 80ae 	bne.w	8022c46 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8022aea:	9908      	ldr	r1, [sp, #32]
 8022aec:	428a      	cmp	r2, r1
 8022aee:	f280 80aa 	bge.w	8022c46 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8022af2:	1c5e      	adds	r6, r3, #1
 8022af4:	f2c0 80a7 	blt.w	8022c46 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8022af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022afa:	4293      	cmp	r3, r2
 8022afc:	f280 80a3 	bge.w	8022c46 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8022b00:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8022b04:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8022b06:	f1ba 0f00 	cmp.w	sl, #0
 8022b0a:	dde2      	ble.n	8022ad2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8022b0c:	ea5f 4028 	movs.w	r0, r8, asr #16
 8022b10:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8022b14:	ea4f 412b 	mov.w	r1, fp, asr #16
 8022b18:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8022b1c:	f100 80df 	bmi.w	8022cde <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8022b20:	1c45      	adds	r5, r0, #1
 8022b22:	9f08      	ldr	r7, [sp, #32]
 8022b24:	42af      	cmp	r7, r5
 8022b26:	f340 80dc 	ble.w	8022ce2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8022b2a:	2900      	cmp	r1, #0
 8022b2c:	f2c0 80d9 	blt.w	8022ce2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8022b30:	1c4d      	adds	r5, r1, #1
 8022b32:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022b34:	42af      	cmp	r7, r5
 8022b36:	f340 80d4 	ble.w	8022ce2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8022b3a:	9d08      	ldr	r5, [sp, #32]
 8022b3c:	fb05 0101 	mla	r1, r5, r1, r0
 8022b40:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022b42:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022b46:	1845      	adds	r5, r0, r1
 8022b48:	5c40      	ldrb	r0, [r0, r1]
 8022b4a:	792f      	ldrb	r7, [r5, #4]
 8022b4c:	7869      	ldrb	r1, [r5, #1]
 8022b4e:	9711      	str	r7, [sp, #68]	; 0x44
 8022b50:	796f      	ldrb	r7, [r5, #5]
 8022b52:	f895 e002 	ldrb.w	lr, [r5, #2]
 8022b56:	f895 9003 	ldrb.w	r9, [r5, #3]
 8022b5a:	9712      	str	r7, [sp, #72]	; 0x48
 8022b5c:	b17a      	cbz	r2, 8022b7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8022b5e:	3505      	adds	r5, #5
 8022b60:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022b62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022b64:	19ef      	adds	r7, r5, r7
 8022b66:	5d2d      	ldrb	r5, [r5, r4]
 8022b68:	787c      	ldrb	r4, [r7, #1]
 8022b6a:	9513      	str	r5, [sp, #76]	; 0x4c
 8022b6c:	9415      	str	r4, [sp, #84]	; 0x54
 8022b6e:	78bc      	ldrb	r4, [r7, #2]
 8022b70:	9417      	str	r4, [sp, #92]	; 0x5c
 8022b72:	78fc      	ldrb	r4, [r7, #3]
 8022b74:	9414      	str	r4, [sp, #80]	; 0x50
 8022b76:	793c      	ldrb	r4, [r7, #4]
 8022b78:	9416      	str	r4, [sp, #88]	; 0x58
 8022b7a:	797c      	ldrb	r4, [r7, #5]
 8022b7c:	9418      	str	r4, [sp, #96]	; 0x60
 8022b7e:	b29b      	uxth	r3, r3
 8022b80:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022b82:	b292      	uxth	r2, r2
 8022b84:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8022b88:	fb03 f702 	mul.w	r7, r3, r2
 8022b8c:	011b      	lsls	r3, r3, #4
 8022b8e:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8022b92:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8022b96:	1bdb      	subs	r3, r3, r7
 8022b98:	b292      	uxth	r2, r2
 8022b9a:	b29b      	uxth	r3, r3
 8022b9c:	ebac 0c02 	sub.w	ip, ip, r2
 8022ba0:	fb03 f909 	mul.w	r9, r3, r9
 8022ba4:	fa1f fc8c 	uxth.w	ip, ip
 8022ba8:	fb0c 9000 	mla	r0, ip, r0, r9
 8022bac:	f896 9000 	ldrb.w	r9, [r6]
 8022bb0:	fb02 0004 	mla	r0, r2, r4, r0
 8022bb4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022bb6:	fb07 0004 	mla	r0, r7, r4, r0
 8022bba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022bbc:	fb19 f904 	smulbb	r9, r9, r4
 8022bc0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022bc4:	fb00 9005 	mla	r0, r0, r5, r9
 8022bc8:	b280      	uxth	r0, r0
 8022bca:	f100 0901 	add.w	r9, r0, #1
 8022bce:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8022bd2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022bd4:	4358      	muls	r0, r3
 8022bd6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022bda:	fb0c 0101 	mla	r1, ip, r1, r0
 8022bde:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022be0:	f886 9000 	strb.w	r9, [r6]
 8022be4:	fb02 1100 	mla	r1, r2, r0, r1
 8022be8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8022bea:	fb07 1100 	mla	r1, r7, r0, r1
 8022bee:	7870      	ldrb	r0, [r6, #1]
 8022bf0:	fb10 f004 	smulbb	r0, r0, r4
 8022bf4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022bf8:	fb01 0105 	mla	r1, r1, r5, r0
 8022bfc:	b289      	uxth	r1, r1
 8022bfe:	1c48      	adds	r0, r1, #1
 8022c00:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8022c04:	1209      	asrs	r1, r1, #8
 8022c06:	7071      	strb	r1, [r6, #1]
 8022c08:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022c0a:	434b      	muls	r3, r1
 8022c0c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8022c0e:	fb0c 330e 	mla	r3, ip, lr, r3
 8022c12:	fb02 3201 	mla	r2, r2, r1, r3
 8022c16:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022c18:	fb07 2703 	mla	r7, r7, r3, r2
 8022c1c:	78b2      	ldrb	r2, [r6, #2]
 8022c1e:	fb12 f204 	smulbb	r2, r2, r4
 8022c22:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8022c26:	fb07 2505 	mla	r5, r7, r5, r2
 8022c2a:	b2ad      	uxth	r5, r5
 8022c2c:	1c6f      	adds	r7, r5, #1
 8022c2e:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8022c32:	122d      	asrs	r5, r5, #8
 8022c34:	70b5      	strb	r5, [r6, #2]
 8022c36:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8022c38:	3603      	adds	r6, #3
 8022c3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022c3e:	4498      	add	r8, r3
 8022c40:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022c42:	449b      	add	fp, r3
 8022c44:	e75f      	b.n	8022b06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8022c46:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8022c48:	4498      	add	r8, r3
 8022c4a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022c4c:	449b      	add	fp, r3
 8022c4e:	9b07      	ldr	r3, [sp, #28]
 8022c50:	3b01      	subs	r3, #1
 8022c52:	9307      	str	r3, [sp, #28]
 8022c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022c56:	3303      	adds	r3, #3
 8022c58:	9309      	str	r3, [sp, #36]	; 0x24
 8022c5a:	e709      	b.n	8022a70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8022c5c:	f47f af1b 	bne.w	8022a96 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8022c60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022c62:	2b00      	cmp	r3, #0
 8022c64:	f340 80e3 	ble.w	8022e2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8022c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022c6c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022c6e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022c72:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022c76:	eef0 6a48 	vmov.f32	s13, s16
 8022c7a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022c7e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022c82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c86:	ee16 8a90 	vmov	r8, s13
 8022c8a:	eef0 6a68 	vmov.f32	s13, s17
 8022c8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c92:	ee16 ba90 	vmov	fp, s13
 8022c96:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022c9a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022c9e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022ca2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022ca6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022caa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022cae:	ee18 2a10 	vmov	r2, s16
 8022cb2:	eeb0 8a47 	vmov.f32	s16, s14
 8022cb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022cba:	ee18 2a90 	vmov	r2, s17
 8022cbe:	9335      	str	r3, [sp, #212]	; 0xd4
 8022cc0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022cc2:	eef0 8a67 	vmov.f32	s17, s15
 8022cc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022cca:	9336      	str	r3, [sp, #216]	; 0xd8
 8022ccc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022cce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022cd0:	3b01      	subs	r3, #1
 8022cd2:	930e      	str	r3, [sp, #56]	; 0x38
 8022cd4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022cd6:	bf08      	it	eq
 8022cd8:	4613      	moveq	r3, r2
 8022cda:	9307      	str	r3, [sp, #28]
 8022cdc:	e6c1      	b.n	8022a62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8022cde:	1c45      	adds	r5, r0, #1
 8022ce0:	d1a9      	bne.n	8022c36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8022ce2:	9c08      	ldr	r4, [sp, #32]
 8022ce4:	42a0      	cmp	r0, r4
 8022ce6:	daa6      	bge.n	8022c36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8022ce8:	1c4c      	adds	r4, r1, #1
 8022cea:	dba4      	blt.n	8022c36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8022cec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022cee:	428c      	cmp	r4, r1
 8022cf0:	dda1      	ble.n	8022c36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8022cf2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022cf4:	9001      	str	r0, [sp, #4]
 8022cf6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022cf8:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8022cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022cfe:	4631      	mov	r1, r6
 8022d00:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8022d04:	9300      	str	r3, [sp, #0]
 8022d06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022d08:	9b08      	ldr	r3, [sp, #32]
 8022d0a:	f7ff fd5b 	bl	80227c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8022d0e:	e792      	b.n	8022c36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8022d10:	ea4f 4228 	mov.w	r2, r8, asr #16
 8022d14:	9c08      	ldr	r4, [sp, #32]
 8022d16:	ea4f 402b 	mov.w	r0, fp, asr #16
 8022d1a:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8022d1e:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8022d22:	fb04 2000 	mla	r0, r4, r0, r2
 8022d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022d28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022d2a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022d2e:	4402      	add	r2, r0
 8022d30:	5c25      	ldrb	r5, [r4, r0]
 8022d32:	7894      	ldrb	r4, [r2, #2]
 8022d34:	7850      	ldrb	r0, [r2, #1]
 8022d36:	9411      	str	r4, [sp, #68]	; 0x44
 8022d38:	7954      	ldrb	r4, [r2, #5]
 8022d3a:	f892 a003 	ldrb.w	sl, [r2, #3]
 8022d3e:	f892 9004 	ldrb.w	r9, [r2, #4]
 8022d42:	9412      	str	r4, [sp, #72]	; 0x48
 8022d44:	b171      	cbz	r1, 8022d64 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022d46:	3205      	adds	r2, #5
 8022d48:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022d4a:	1917      	adds	r7, r2, r4
 8022d4c:	5d12      	ldrb	r2, [r2, r4]
 8022d4e:	9219      	str	r2, [sp, #100]	; 0x64
 8022d50:	787a      	ldrb	r2, [r7, #1]
 8022d52:	921b      	str	r2, [sp, #108]	; 0x6c
 8022d54:	78ba      	ldrb	r2, [r7, #2]
 8022d56:	921d      	str	r2, [sp, #116]	; 0x74
 8022d58:	78fa      	ldrb	r2, [r7, #3]
 8022d5a:	921a      	str	r2, [sp, #104]	; 0x68
 8022d5c:	793a      	ldrb	r2, [r7, #4]
 8022d5e:	921c      	str	r2, [sp, #112]	; 0x70
 8022d60:	797a      	ldrb	r2, [r7, #5]
 8022d62:	921e      	str	r2, [sp, #120]	; 0x78
 8022d64:	b29b      	uxth	r3, r3
 8022d66:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8022d68:	b289      	uxth	r1, r1
 8022d6a:	3603      	adds	r6, #3
 8022d6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022d70:	fb03 f201 	mul.w	r2, r3, r1
 8022d74:	011b      	lsls	r3, r3, #4
 8022d76:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 8022d7a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8022d7e:	1a9b      	subs	r3, r3, r2
 8022d80:	b289      	uxth	r1, r1
 8022d82:	b29b      	uxth	r3, r3
 8022d84:	1a7f      	subs	r7, r7, r1
 8022d86:	fb03 fa0a 	mul.w	sl, r3, sl
 8022d8a:	b2bf      	uxth	r7, r7
 8022d8c:	fb03 f909 	mul.w	r9, r3, r9
 8022d90:	fb07 a505 	mla	r5, r7, r5, sl
 8022d94:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8022d98:	fb07 9000 	mla	r0, r7, r0, r9
 8022d9c:	fb01 5504 	mla	r5, r1, r4, r5
 8022da0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8022da2:	fb02 5504 	mla	r5, r2, r4, r5
 8022da6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022da8:	fb1a fa04 	smulbb	sl, sl, r4
 8022dac:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022db0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8022db2:	fb05 a50e 	mla	r5, r5, lr, sl
 8022db6:	fb01 0004 	mla	r0, r1, r4, r0
 8022dba:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8022dbc:	b2ad      	uxth	r5, r5
 8022dbe:	fb02 0004 	mla	r0, r2, r4, r0
 8022dc2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022dc4:	f105 0a01 	add.w	sl, r5, #1
 8022dc8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022dcc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8022dd0:	122d      	asrs	r5, r5, #8
 8022dd2:	f806 5c06 	strb.w	r5, [r6, #-6]
 8022dd6:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 8022dda:	fb15 f504 	smulbb	r5, r5, r4
 8022dde:	fb00 500e 	mla	r0, r0, lr, r5
 8022de2:	b280      	uxth	r0, r0
 8022de4:	1c45      	adds	r5, r0, #1
 8022de6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022dea:	1200      	asrs	r0, r0, #8
 8022dec:	f806 0c05 	strb.w	r0, [r6, #-5]
 8022df0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022df2:	4343      	muls	r3, r0
 8022df4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022df6:	fb07 3300 	mla	r3, r7, r0, r3
 8022dfa:	981d      	ldr	r0, [sp, #116]	; 0x74
 8022dfc:	fb01 3100 	mla	r1, r1, r0, r3
 8022e00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022e02:	fb02 1203 	mla	r2, r2, r3, r1
 8022e06:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 8022e0a:	fb11 f104 	smulbb	r1, r1, r4
 8022e0e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022e12:	fb02 120e 	mla	r2, r2, lr, r1
 8022e16:	b292      	uxth	r2, r2
 8022e18:	1c53      	adds	r3, r2, #1
 8022e1a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022e1e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8022e20:	1212      	asrs	r2, r2, #8
 8022e22:	4498      	add	r8, r3
 8022e24:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022e26:	f806 2c04 	strb.w	r2, [r6, #-4]
 8022e2a:	449b      	add	fp, r3
 8022e2c:	e64d      	b.n	8022aca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8022e2e:	b021      	add	sp, #132	; 0x84
 8022e30:	ecbd 8b08 	vpop	{d8-d11}
 8022e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022e38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8022e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e3c:	b085      	sub	sp, #20
 8022e3e:	784d      	ldrb	r5, [r1, #1]
 8022e40:	788e      	ldrb	r6, [r1, #2]
 8022e42:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8022e46:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8022e4a:	9403      	str	r4, [sp, #12]
 8022e4c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8022e50:	780c      	ldrb	r4, [r1, #0]
 8022e52:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8022e56:	fb07 ce03 	mla	lr, r7, r3, ip
 8022e5a:	2f00      	cmp	r7, #0
 8022e5c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022e60:	eb02 0b0e 	add.w	fp, r2, lr
 8022e64:	db56      	blt.n	8022f14 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8022e66:	45b9      	cmp	r9, r7
 8022e68:	dd54      	ble.n	8022f14 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8022e6a:	f1bc 0f00 	cmp.w	ip, #0
 8022e6e:	db4d      	blt.n	8022f0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8022e70:	4563      	cmp	r3, ip
 8022e72:	dd4b      	ble.n	8022f0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8022e74:	f812 200e 	ldrb.w	r2, [r2, lr]
 8022e78:	9200      	str	r2, [sp, #0]
 8022e7a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8022e7e:	9201      	str	r2, [sp, #4]
 8022e80:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8022e84:	9202      	str	r2, [sp, #8]
 8022e86:	f11c 0201 	adds.w	r2, ip, #1
 8022e8a:	d44a      	bmi.n	8022f22 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022e8c:	4293      	cmp	r3, r2
 8022e8e:	dd48      	ble.n	8022f22 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022e90:	2800      	cmp	r0, #0
 8022e92:	d046      	beq.n	8022f22 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022e94:	f89b e003 	ldrb.w	lr, [fp, #3]
 8022e98:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8022e9c:	f89b a005 	ldrb.w	sl, [fp, #5]
 8022ea0:	3701      	adds	r7, #1
 8022ea2:	d446      	bmi.n	8022f32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8022ea4:	45b9      	cmp	r9, r7
 8022ea6:	dd44      	ble.n	8022f32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8022ea8:	9a03      	ldr	r2, [sp, #12]
 8022eaa:	2a00      	cmp	r2, #0
 8022eac:	d045      	beq.n	8022f3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8022eae:	f1bc 0f00 	cmp.w	ip, #0
 8022eb2:	db3a      	blt.n	8022f2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8022eb4:	4563      	cmp	r3, ip
 8022eb6:	dd38      	ble.n	8022f2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8022eb8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8022ebc:	f04f 0903 	mov.w	r9, #3
 8022ec0:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8022ec4:	fb03 b209 	mla	r2, r3, r9, fp
 8022ec8:	fb03 b909 	mla	r9, r3, r9, fp
 8022ecc:	7852      	ldrb	r2, [r2, #1]
 8022ece:	f899 9002 	ldrb.w	r9, [r9, #2]
 8022ed2:	f11c 0c01 	adds.w	ip, ip, #1
 8022ed6:	d40d      	bmi.n	8022ef4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8022ed8:	4563      	cmp	r3, ip
 8022eda:	dd0b      	ble.n	8022ef4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8022edc:	b160      	cbz	r0, 8022ef8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8022ede:	2603      	movs	r6, #3
 8022ee0:	fb13 6406 	smlabb	r4, r3, r6, r6
 8022ee4:	fb03 b506 	mla	r5, r3, r6, fp
 8022ee8:	fb03 b306 	mla	r3, r3, r6, fp
 8022eec:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8022ef0:	792d      	ldrb	r5, [r5, #4]
 8022ef2:	795e      	ldrb	r6, [r3, #5]
 8022ef4:	280f      	cmp	r0, #15
 8022ef6:	d802      	bhi.n	8022efe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8022ef8:	9b03      	ldr	r3, [sp, #12]
 8022efa:	2b0f      	cmp	r3, #15
 8022efc:	d922      	bls.n	8022f44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8022efe:	4b2f      	ldr	r3, [pc, #188]	; (8022fbc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8022f00:	f240 11a5 	movw	r1, #421	; 0x1a5
 8022f04:	4a2e      	ldr	r2, [pc, #184]	; (8022fc0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8022f06:	482f      	ldr	r0, [pc, #188]	; (8022fc4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8022f08:	f003 ffa0 	bl	8026e4c <__assert_func>
 8022f0c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8022f10:	9400      	str	r4, [sp, #0]
 8022f12:	e7b8      	b.n	8022e86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8022f14:	46b2      	mov	sl, r6
 8022f16:	46a8      	mov	r8, r5
 8022f18:	46a6      	mov	lr, r4
 8022f1a:	9400      	str	r4, [sp, #0]
 8022f1c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8022f20:	e7be      	b.n	8022ea0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8022f22:	46b2      	mov	sl, r6
 8022f24:	46a8      	mov	r8, r5
 8022f26:	46a6      	mov	lr, r4
 8022f28:	e7ba      	b.n	8022ea0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8022f2a:	46b1      	mov	r9, r6
 8022f2c:	462a      	mov	r2, r5
 8022f2e:	4627      	mov	r7, r4
 8022f30:	e7cf      	b.n	8022ed2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8022f32:	46b1      	mov	r9, r6
 8022f34:	462a      	mov	r2, r5
 8022f36:	4627      	mov	r7, r4
 8022f38:	e7dc      	b.n	8022ef4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8022f3a:	280f      	cmp	r0, #15
 8022f3c:	d8df      	bhi.n	8022efe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8022f3e:	46b1      	mov	r9, r6
 8022f40:	462a      	mov	r2, r5
 8022f42:	4627      	mov	r7, r4
 8022f44:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8022f48:	b280      	uxth	r0, r0
 8022f4a:	fb00 f30b 	mul.w	r3, r0, fp
 8022f4e:	0100      	lsls	r0, r0, #4
 8022f50:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8022f54:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8022f58:	1ac0      	subs	r0, r0, r3
 8022f5a:	fa1f fb8b 	uxth.w	fp, fp
 8022f5e:	b280      	uxth	r0, r0
 8022f60:	ebac 0c0b 	sub.w	ip, ip, fp
 8022f64:	9003      	str	r0, [sp, #12]
 8022f66:	fa1f fc8c 	uxth.w	ip, ip
 8022f6a:	fb00 fe0e 	mul.w	lr, r0, lr
 8022f6e:	9800      	ldr	r0, [sp, #0]
 8022f70:	fb0c ee00 	mla	lr, ip, r0, lr
 8022f74:	9803      	ldr	r0, [sp, #12]
 8022f76:	fb00 f808 	mul.w	r8, r0, r8
 8022f7a:	9801      	ldr	r0, [sp, #4]
 8022f7c:	fb0b ee07 	mla	lr, fp, r7, lr
 8022f80:	fb0c 8800 	mla	r8, ip, r0, r8
 8022f84:	fb03 ee04 	mla	lr, r3, r4, lr
 8022f88:	fb0b 8202 	mla	r2, fp, r2, r8
 8022f8c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022f90:	fb03 2505 	mla	r5, r3, r5, r2
 8022f94:	9a03      	ldr	r2, [sp, #12]
 8022f96:	f881 e000 	strb.w	lr, [r1]
 8022f9a:	fb02 f00a 	mul.w	r0, r2, sl
 8022f9e:	9a02      	ldr	r2, [sp, #8]
 8022fa0:	122d      	asrs	r5, r5, #8
 8022fa2:	fb0c 0c02 	mla	ip, ip, r2, r0
 8022fa6:	704d      	strb	r5, [r1, #1]
 8022fa8:	fb0b c909 	mla	r9, fp, r9, ip
 8022fac:	fb03 9606 	mla	r6, r3, r6, r9
 8022fb0:	1236      	asrs	r6, r6, #8
 8022fb2:	708e      	strb	r6, [r1, #2]
 8022fb4:	b005      	add	sp, #20
 8022fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fba:	bf00      	nop
 8022fbc:	0802c1f1 	.word	0x0802c1f1
 8022fc0:	0802c6e6 	.word	0x0802c6e6
 8022fc4:	0802c2ba 	.word	0x0802c2ba

08022fc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fcc:	ed2d 8b0a 	vpush	{d8-d12}
 8022fd0:	b09d      	sub	sp, #116	; 0x74
 8022fd2:	eeb0 aa40 	vmov.f32	s20, s0
 8022fd6:	eef0 9a60 	vmov.f32	s19, s1
 8022fda:	9306      	str	r3, [sp, #24]
 8022fdc:	eeb0 9a41 	vmov.f32	s18, s2
 8022fe0:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8022fe4:	eeb0 8a62 	vmov.f32	s16, s5
 8022fe8:	901b      	str	r0, [sp, #108]	; 0x6c
 8022fea:	eef0 8a43 	vmov.f32	s17, s6
 8022fee:	9307      	str	r3, [sp, #28]
 8022ff0:	eeb0 ca44 	vmov.f32	s24, s8
 8022ff4:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8022ff8:	eef0 ba64 	vmov.f32	s23, s9
 8022ffc:	eeb0 ba45 	vmov.f32	s22, s10
 8023000:	9309      	str	r3, [sp, #36]	; 0x24
 8023002:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8023006:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 802300a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802300c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8023010:	6850      	ldr	r0, [r2, #4]
 8023012:	6812      	ldr	r2, [r2, #0]
 8023014:	fb00 1303 	mla	r3, r0, r3, r1
 8023018:	9907      	ldr	r1, [sp, #28]
 802301a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802301e:	18d3      	adds	r3, r2, r3
 8023020:	2203      	movs	r2, #3
 8023022:	9308      	str	r3, [sp, #32]
 8023024:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8023026:	681b      	ldr	r3, [r3, #0]
 8023028:	930a      	str	r3, [sp, #40]	; 0x28
 802302a:	f06f 0304 	mvn.w	r3, #4
 802302e:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8023032:	fb11 3302 	smlabb	r3, r1, r2, r3
 8023036:	930b      	str	r3, [sp, #44]	; 0x2c
 8023038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802303a:	2b00      	cmp	r3, #0
 802303c:	dc03      	bgt.n	8023046 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 802303e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023040:	2b00      	cmp	r3, #0
 8023042:	f340 8193 	ble.w	802336c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8023046:	9b06      	ldr	r3, [sp, #24]
 8023048:	2b00      	cmp	r3, #0
 802304a:	f340 80d0 	ble.w	80231ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 802304e:	1432      	asrs	r2, r6, #16
 8023050:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023054:	d42f      	bmi.n	80230b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8023056:	1c51      	adds	r1, r2, #1
 8023058:	9807      	ldr	r0, [sp, #28]
 802305a:	4281      	cmp	r1, r0
 802305c:	da2e      	bge.n	80230bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802305e:	2b00      	cmp	r3, #0
 8023060:	db2c      	blt.n	80230bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8023062:	1c59      	adds	r1, r3, #1
 8023064:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023066:	4288      	cmp	r0, r1
 8023068:	dd28      	ble.n	80230bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802306a:	9b06      	ldr	r3, [sp, #24]
 802306c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 802306e:	3b01      	subs	r3, #1
 8023070:	fb02 6203 	mla	r2, r2, r3, r6
 8023074:	1412      	asrs	r2, r2, #16
 8023076:	d42c      	bmi.n	80230d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8023078:	3201      	adds	r2, #1
 802307a:	9907      	ldr	r1, [sp, #28]
 802307c:	4291      	cmp	r1, r2
 802307e:	dd28      	ble.n	80230d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8023080:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8023082:	fb02 5303 	mla	r3, r2, r3, r5
 8023086:	141b      	asrs	r3, r3, #16
 8023088:	d423      	bmi.n	80230d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802308a:	3301      	adds	r3, #1
 802308c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802308e:	429a      	cmp	r2, r3
 8023090:	dd1f      	ble.n	80230d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8023092:	9b08      	ldr	r3, [sp, #32]
 8023094:	f8dd e018 	ldr.w	lr, [sp, #24]
 8023098:	f103 0c03 	add.w	ip, r3, #3
 802309c:	f1be 0f00 	cmp.w	lr, #0
 80230a0:	f300 80fa 	bgt.w	8023298 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80230a4:	9b06      	ldr	r3, [sp, #24]
 80230a6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80230aa:	9b08      	ldr	r3, [sp, #32]
 80230ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80230b0:	4423      	add	r3, r4
 80230b2:	9308      	str	r3, [sp, #32]
 80230b4:	e09d      	b.n	80231f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 80230b6:	1c51      	adds	r1, r2, #1
 80230b8:	f040 808e 	bne.w	80231d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80230bc:	9907      	ldr	r1, [sp, #28]
 80230be:	428a      	cmp	r2, r1
 80230c0:	f280 808a 	bge.w	80231d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80230c4:	1c5f      	adds	r7, r3, #1
 80230c6:	f2c0 8087 	blt.w	80231d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80230ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80230cc:	4293      	cmp	r3, r2
 80230ce:	f280 8083 	bge.w	80231d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80230d2:	9f06      	ldr	r7, [sp, #24]
 80230d4:	f8dd a020 	ldr.w	sl, [sp, #32]
 80230d8:	2f00      	cmp	r7, #0
 80230da:	dde3      	ble.n	80230a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 80230dc:	1432      	asrs	r2, r6, #16
 80230de:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80230e2:	ea4f 4325 	mov.w	r3, r5, asr #16
 80230e6:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 80230ea:	f100 80bf 	bmi.w	802326c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 80230ee:	1c50      	adds	r0, r2, #1
 80230f0:	9c07      	ldr	r4, [sp, #28]
 80230f2:	4284      	cmp	r4, r0
 80230f4:	f340 80bc 	ble.w	8023270 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80230f8:	2b00      	cmp	r3, #0
 80230fa:	f2c0 80b9 	blt.w	8023270 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80230fe:	1c58      	adds	r0, r3, #1
 8023100:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023102:	4284      	cmp	r4, r0
 8023104:	f340 80b4 	ble.w	8023270 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8023108:	9807      	ldr	r0, [sp, #28]
 802310a:	fb00 2303 	mla	r3, r0, r3, r2
 802310e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023110:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023112:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023116:	441a      	add	r2, r3
 8023118:	f810 c003 	ldrb.w	ip, [r0, r3]
 802311c:	7953      	ldrb	r3, [r2, #5]
 802311e:	7850      	ldrb	r0, [r2, #1]
 8023120:	f892 e002 	ldrb.w	lr, [r2, #2]
 8023124:	f892 9003 	ldrb.w	r9, [r2, #3]
 8023128:	f892 8004 	ldrb.w	r8, [r2, #4]
 802312c:	930e      	str	r3, [sp, #56]	; 0x38
 802312e:	f1bb 0f00 	cmp.w	fp, #0
 8023132:	d00f      	beq.n	8023154 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8023134:	3205      	adds	r2, #5
 8023136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023138:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802313a:	18d3      	adds	r3, r2, r3
 802313c:	5d12      	ldrb	r2, [r2, r4]
 802313e:	920f      	str	r2, [sp, #60]	; 0x3c
 8023140:	785a      	ldrb	r2, [r3, #1]
 8023142:	9211      	str	r2, [sp, #68]	; 0x44
 8023144:	789a      	ldrb	r2, [r3, #2]
 8023146:	9213      	str	r2, [sp, #76]	; 0x4c
 8023148:	78da      	ldrb	r2, [r3, #3]
 802314a:	9210      	str	r2, [sp, #64]	; 0x40
 802314c:	791a      	ldrb	r2, [r3, #4]
 802314e:	795b      	ldrb	r3, [r3, #5]
 8023150:	9212      	str	r2, [sp, #72]	; 0x48
 8023152:	9314      	str	r3, [sp, #80]	; 0x50
 8023154:	b28b      	uxth	r3, r1
 8023156:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023158:	fa1f f28b 	uxth.w	r2, fp
 802315c:	fb03 fb02 	mul.w	fp, r3, r2
 8023160:	011b      	lsls	r3, r3, #4
 8023162:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8023166:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 802316a:	eba3 030b 	sub.w	r3, r3, fp
 802316e:	b292      	uxth	r2, r2
 8023170:	b29b      	uxth	r3, r3
 8023172:	1a89      	subs	r1, r1, r2
 8023174:	fb03 f808 	mul.w	r8, r3, r8
 8023178:	b289      	uxth	r1, r1
 802317a:	fb03 f909 	mul.w	r9, r3, r9
 802317e:	fb01 8800 	mla	r8, r1, r0, r8
 8023182:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023184:	fb01 990c 	mla	r9, r1, ip, r9
 8023188:	fb02 8800 	mla	r8, r2, r0, r8
 802318c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802318e:	fb02 9904 	mla	r9, r2, r4, r9
 8023192:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023194:	fb0b 8800 	mla	r8, fp, r0, r8
 8023198:	980e      	ldr	r0, [sp, #56]	; 0x38
 802319a:	fb0b 9904 	mla	r9, fp, r4, r9
 802319e:	4343      	muls	r3, r0
 80231a0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80231a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80231a8:	fb01 330e 	mla	r3, r1, lr, r3
 80231ac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80231ae:	f88a 9000 	strb.w	r9, [sl]
 80231b2:	fb02 3201 	mla	r2, r2, r1, r3
 80231b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80231b8:	f88a 8001 	strb.w	r8, [sl, #1]
 80231bc:	fb0b 2b03 	mla	fp, fp, r3, r2
 80231c0:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80231c4:	f88a b002 	strb.w	fp, [sl, #2]
 80231c8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80231ca:	f10a 0a03 	add.w	sl, sl, #3
 80231ce:	3f01      	subs	r7, #1
 80231d0:	441e      	add	r6, r3
 80231d2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80231d4:	441d      	add	r5, r3
 80231d6:	e77f      	b.n	80230d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 80231d8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80231da:	441e      	add	r6, r3
 80231dc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80231de:	441d      	add	r5, r3
 80231e0:	9b06      	ldr	r3, [sp, #24]
 80231e2:	3b01      	subs	r3, #1
 80231e4:	9306      	str	r3, [sp, #24]
 80231e6:	9b08      	ldr	r3, [sp, #32]
 80231e8:	3303      	adds	r3, #3
 80231ea:	9308      	str	r3, [sp, #32]
 80231ec:	e72b      	b.n	8023046 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80231ee:	f47f af3c 	bne.w	802306a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 80231f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80231f4:	2b00      	cmp	r3, #0
 80231f6:	f340 80b9 	ble.w	802336c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80231fa:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80231fe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023200:	ee79 9aab 	vadd.f32	s19, s19, s23
 8023204:	eef0 6a48 	vmov.f32	s13, s16
 8023208:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802320c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8023210:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023214:	ee16 6a90 	vmov	r6, s13
 8023218:	eef0 6a68 	vmov.f32	s13, s17
 802321c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023220:	ee16 5a90 	vmov	r5, s13
 8023224:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023228:	ee69 7a27 	vmul.f32	s15, s18, s15
 802322c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023230:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023234:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023238:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802323c:	ee18 2a10 	vmov	r2, s16
 8023240:	eeb0 8a47 	vmov.f32	s16, s14
 8023244:	fb92 f3f3 	sdiv	r3, r2, r3
 8023248:	ee18 2a90 	vmov	r2, s17
 802324c:	9333      	str	r3, [sp, #204]	; 0xcc
 802324e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023250:	eef0 8a67 	vmov.f32	s17, s15
 8023254:	fb92 f3f3 	sdiv	r3, r2, r3
 8023258:	9334      	str	r3, [sp, #208]	; 0xd0
 802325a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802325c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802325e:	3b01      	subs	r3, #1
 8023260:	930c      	str	r3, [sp, #48]	; 0x30
 8023262:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023264:	bf08      	it	eq
 8023266:	4613      	moveq	r3, r2
 8023268:	9306      	str	r3, [sp, #24]
 802326a:	e6e5      	b.n	8023038 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802326c:	1c54      	adds	r4, r2, #1
 802326e:	d1ab      	bne.n	80231c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8023270:	9807      	ldr	r0, [sp, #28]
 8023272:	4282      	cmp	r2, r0
 8023274:	daa8      	bge.n	80231c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8023276:	1c58      	adds	r0, r3, #1
 8023278:	dba6      	blt.n	80231c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 802327a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802327c:	4298      	cmp	r0, r3
 802327e:	dda3      	ble.n	80231c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8023280:	9000      	str	r0, [sp, #0]
 8023282:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023284:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8023288:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 802328c:	9b07      	ldr	r3, [sp, #28]
 802328e:	4651      	mov	r1, sl
 8023290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023292:	f7ff fdd1 	bl	8022e38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8023296:	e797      	b.n	80231c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8023298:	1431      	asrs	r1, r6, #16
 802329a:	9c07      	ldr	r4, [sp, #28]
 802329c:	1428      	asrs	r0, r5, #16
 802329e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80232a2:	f3c6 3303 	ubfx	r3, r6, #12, #4
 80232a6:	fb04 1000 	mla	r0, r4, r0, r1
 80232aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80232ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80232ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80232b2:	4401      	add	r1, r0
 80232b4:	5c20      	ldrb	r0, [r4, r0]
 80232b6:	f891 8002 	ldrb.w	r8, [r1, #2]
 80232ba:	900e      	str	r0, [sp, #56]	; 0x38
 80232bc:	f891 a003 	ldrb.w	sl, [r1, #3]
 80232c0:	7848      	ldrb	r0, [r1, #1]
 80232c2:	f891 9004 	ldrb.w	r9, [r1, #4]
 80232c6:	f891 b005 	ldrb.w	fp, [r1, #5]
 80232ca:	b172      	cbz	r2, 80232ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 80232cc:	3105      	adds	r1, #5
 80232ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80232d0:	190f      	adds	r7, r1, r4
 80232d2:	5d09      	ldrb	r1, [r1, r4]
 80232d4:	9115      	str	r1, [sp, #84]	; 0x54
 80232d6:	7879      	ldrb	r1, [r7, #1]
 80232d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80232da:	78b9      	ldrb	r1, [r7, #2]
 80232dc:	9119      	str	r1, [sp, #100]	; 0x64
 80232de:	78f9      	ldrb	r1, [r7, #3]
 80232e0:	9116      	str	r1, [sp, #88]	; 0x58
 80232e2:	7939      	ldrb	r1, [r7, #4]
 80232e4:	9118      	str	r1, [sp, #96]	; 0x60
 80232e6:	7979      	ldrb	r1, [r7, #5]
 80232e8:	911a      	str	r1, [sp, #104]	; 0x68
 80232ea:	b29b      	uxth	r3, r3
 80232ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80232ee:	b292      	uxth	r2, r2
 80232f0:	f10c 0c03 	add.w	ip, ip, #3
 80232f4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80232f8:	fb03 f102 	mul.w	r1, r3, r2
 80232fc:	011b      	lsls	r3, r3, #4
 80232fe:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8023302:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8023306:	1a5b      	subs	r3, r3, r1
 8023308:	b292      	uxth	r2, r2
 802330a:	b29b      	uxth	r3, r3
 802330c:	1abf      	subs	r7, r7, r2
 802330e:	fb03 f909 	mul.w	r9, r3, r9
 8023312:	b2bf      	uxth	r7, r7
 8023314:	fb03 fa0a 	mul.w	sl, r3, sl
 8023318:	fb03 f30b 	mul.w	r3, r3, fp
 802331c:	fb07 9900 	mla	r9, r7, r0, r9
 8023320:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8023322:	fb07 aa04 	mla	sl, r7, r4, sl
 8023326:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023328:	fb02 9900 	mla	r9, r2, r0, r9
 802332c:	9818      	ldr	r0, [sp, #96]	; 0x60
 802332e:	fb07 3308 	mla	r3, r7, r8, r3
 8023332:	fb01 9900 	mla	r9, r1, r0, r9
 8023336:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023338:	fb02 aa04 	mla	sl, r2, r4, sl
 802333c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802333e:	fb02 3200 	mla	r2, r2, r0, r3
 8023342:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023344:	fb01 aa04 	mla	sl, r1, r4, sl
 8023348:	ea4f 2929 	mov.w	r9, r9, asr #8
 802334c:	fb01 2103 	mla	r1, r1, r3, r2
 8023350:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8023352:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023356:	f80c 9c05 	strb.w	r9, [ip, #-5]
 802335a:	1209      	asrs	r1, r1, #8
 802335c:	441e      	add	r6, r3
 802335e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023360:	f80c ac06 	strb.w	sl, [ip, #-6]
 8023364:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8023368:	441d      	add	r5, r3
 802336a:	e697      	b.n	802309c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 802336c:	b01d      	add	sp, #116	; 0x74
 802336e:	ecbd 8b0a 	vpop	{d8-d12}
 8023372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023378 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8023378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802337c:	b085      	sub	sp, #20
 802337e:	7888      	ldrb	r0, [r1, #2]
 8023380:	4691      	mov	r9, r2
 8023382:	9000      	str	r0, [sp, #0]
 8023384:	7848      	ldrb	r0, [r1, #1]
 8023386:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802338a:	9001      	str	r0, [sp, #4]
 802338c:	7808      	ldrb	r0, [r1, #0]
 802338e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8023392:	9002      	str	r0, [sp, #8]
 8023394:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8023398:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802339c:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 80233a0:	fb04 c603 	mla	r6, r4, r3, ip
 80233a4:	2c00      	cmp	r4, #0
 80233a6:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80233aa:	9a00      	ldr	r2, [sp, #0]
 80233ac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80233b0:	9a01      	ldr	r2, [sp, #4]
 80233b2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80233b6:	db3a      	blt.n	802342e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80233b8:	45a0      	cmp	r8, r4
 80233ba:	dd38      	ble.n	802342e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80233bc:	f1bc 0f00 	cmp.w	ip, #0
 80233c0:	db33      	blt.n	802342a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80233c2:	4563      	cmp	r3, ip
 80233c4:	dd31      	ble.n	802342a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80233c6:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80233ca:	f11c 0601 	adds.w	r6, ip, #1
 80233ce:	d431      	bmi.n	8023434 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80233d0:	42b3      	cmp	r3, r6
 80233d2:	dd2f      	ble.n	8023434 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80233d4:	b375      	cbz	r5, 8023434 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80233d6:	f8de 6004 	ldr.w	r6, [lr, #4]
 80233da:	3401      	adds	r4, #1
 80233dc:	d42e      	bmi.n	802343c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80233de:	45a0      	cmp	r8, r4
 80233e0:	dd2c      	ble.n	802343c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80233e2:	b35f      	cbz	r7, 802343c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80233e4:	f1bc 0f00 	cmp.w	ip, #0
 80233e8:	db26      	blt.n	8023438 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 80233ea:	4563      	cmp	r3, ip
 80233ec:	dd24      	ble.n	8023438 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 80233ee:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 80233f2:	f11c 0c01 	adds.w	ip, ip, #1
 80233f6:	d405      	bmi.n	8023404 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80233f8:	4563      	cmp	r3, ip
 80233fa:	dd03      	ble.n	8023404 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80233fc:	b115      	cbz	r5, 8023404 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80233fe:	3301      	adds	r3, #1
 8023400:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8023404:	2d0f      	cmp	r5, #15
 8023406:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802340a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802340e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023412:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8023416:	d801      	bhi.n	802341c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8023418:	2f0f      	cmp	r7, #15
 802341a:	d911      	bls.n	8023440 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 802341c:	4b80      	ldr	r3, [pc, #512]	; (8023620 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 802341e:	f240 11a5 	movw	r1, #421	; 0x1a5
 8023422:	4a80      	ldr	r2, [pc, #512]	; (8023624 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8023424:	4880      	ldr	r0, [pc, #512]	; (8023628 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8023426:	f003 fd11 	bl	8026e4c <__assert_func>
 802342a:	4602      	mov	r2, r0
 802342c:	e7cd      	b.n	80233ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 802342e:	4606      	mov	r6, r0
 8023430:	4602      	mov	r2, r0
 8023432:	e7d2      	b.n	80233da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8023434:	4606      	mov	r6, r0
 8023436:	e7d0      	b.n	80233da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8023438:	4604      	mov	r4, r0
 802343a:	e7da      	b.n	80233f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 802343c:	4604      	mov	r4, r0
 802343e:	e7e1      	b.n	8023404 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8023440:	b2ab      	uxth	r3, r5
 8023442:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8023446:	b2bf      	uxth	r7, r7
 8023448:	fb03 fe07 	mul.w	lr, r3, r7
 802344c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8023450:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023454:	eba3 0c0e 	sub.w	ip, r3, lr
 8023458:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802345c:	b2bf      	uxth	r7, r7
 802345e:	fa1f fc8c 	uxth.w	ip, ip
 8023462:	eba5 0507 	sub.w	r5, r5, r7
 8023466:	fb0c f30a 	mul.w	r3, ip, sl
 802346a:	b2ad      	uxth	r5, r5
 802346c:	fb05 330b 	mla	r3, r5, fp, r3
 8023470:	fb07 3309 	mla	r3, r7, r9, r3
 8023474:	fb0e 3308 	mla	r3, lr, r8, r3
 8023478:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802347c:	9303      	str	r3, [sp, #12]
 802347e:	d018      	beq.n	80234b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8023480:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023484:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023488:	fb0b f303 	mul.w	r3, fp, r3
 802348c:	fb0b fb02 	mul.w	fp, fp, r2
 8023490:	0a1a      	lsrs	r2, r3, #8
 8023492:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8023496:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802349a:	441a      	add	r2, r3
 802349c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80234a0:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80234a4:	0a12      	lsrs	r2, r2, #8
 80234a6:	0a1b      	lsrs	r3, r3, #8
 80234a8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80234ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80234b0:	431a      	orrs	r2, r3
 80234b2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80234b6:	d019      	beq.n	80234ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 80234b8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80234bc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80234c0:	fb0a fb0b 	mul.w	fp, sl, fp
 80234c4:	fb0a fa06 	mul.w	sl, sl, r6
 80234c8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80234cc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80234d0:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80234d4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80234d8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80234dc:	445e      	add	r6, fp
 80234de:	0a1b      	lsrs	r3, r3, #8
 80234e0:	0a36      	lsrs	r6, r6, #8
 80234e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80234e6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80234ea:	431e      	orrs	r6, r3
 80234ec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80234f0:	d019      	beq.n	8023526 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 80234f2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80234f6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80234fa:	fb09 fa0a 	mul.w	sl, r9, sl
 80234fe:	fb09 f904 	mul.w	r9, r9, r4
 8023502:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8023506:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802350a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802350e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023512:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8023516:	4454      	add	r4, sl
 8023518:	0a1b      	lsrs	r3, r3, #8
 802351a:	0a24      	lsrs	r4, r4, #8
 802351c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023520:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023524:	431c      	orrs	r4, r3
 8023526:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802352a:	d019      	beq.n	8023560 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 802352c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8023530:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023534:	fb08 f909 	mul.w	r9, r8, r9
 8023538:	fb08 f800 	mul.w	r8, r8, r0
 802353c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8023540:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8023544:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8023548:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802354c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8023550:	4448      	add	r0, r9
 8023552:	0a1b      	lsrs	r3, r3, #8
 8023554:	0a00      	lsrs	r0, r0, #8
 8023556:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802355a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802355e:	4318      	orrs	r0, r3
 8023560:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8023564:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023568:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802356c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023570:	fb0c f808 	mul.w	r8, ip, r8
 8023574:	fb0c f606 	mul.w	r6, ip, r6
 8023578:	fb05 8803 	mla	r8, r5, r3, r8
 802357c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8023580:	fb05 6202 	mla	r2, r5, r2, r6
 8023584:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023588:	fb07 8803 	mla	r8, r7, r3, r8
 802358c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8023590:	fb07 2704 	mla	r7, r7, r4, r2
 8023594:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023598:	fb0e 8303 	mla	r3, lr, r3, r8
 802359c:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 80235a0:	fb0e 7e00 	mla	lr, lr, r0, r7
 80235a4:	9803      	ldr	r0, [sp, #12]
 80235a6:	b292      	uxth	r2, r2
 80235a8:	9c02      	ldr	r4, [sp, #8]
 80235aa:	0a1b      	lsrs	r3, r3, #8
 80235ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80235b0:	4350      	muls	r0, r2
 80235b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80235b6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80235ba:	ea43 0e0e 	orr.w	lr, r3, lr
 80235be:	1c43      	adds	r3, r0, #1
 80235c0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80235c4:	fa5f f08e 	uxtb.w	r0, lr
 80235c8:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80235cc:	b2db      	uxtb	r3, r3
 80235ce:	fb14 f403 	smulbb	r4, r4, r3
 80235d2:	fb00 4002 	mla	r0, r0, r2, r4
 80235d6:	b280      	uxth	r0, r0
 80235d8:	1c44      	adds	r4, r0, #1
 80235da:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80235de:	9c01      	ldr	r4, [sp, #4]
 80235e0:	fb14 f403 	smulbb	r4, r4, r3
 80235e4:	1200      	asrs	r0, r0, #8
 80235e6:	7008      	strb	r0, [r1, #0]
 80235e8:	f3ce 2007 	ubfx	r0, lr, #8, #8
 80235ec:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80235f0:	fb00 4002 	mla	r0, r0, r2, r4
 80235f4:	b280      	uxth	r0, r0
 80235f6:	1c44      	adds	r4, r0, #1
 80235f8:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80235fc:	1200      	asrs	r0, r0, #8
 80235fe:	7048      	strb	r0, [r1, #1]
 8023600:	9800      	ldr	r0, [sp, #0]
 8023602:	fb10 f303 	smulbb	r3, r0, r3
 8023606:	fb0e 3202 	mla	r2, lr, r2, r3
 802360a:	b292      	uxth	r2, r2
 802360c:	f102 0e01 	add.w	lr, r2, #1
 8023610:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8023614:	1212      	asrs	r2, r2, #8
 8023616:	708a      	strb	r2, [r1, #2]
 8023618:	b005      	add	sp, #20
 802361a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802361e:	bf00      	nop
 8023620:	0802c1f1 	.word	0x0802c1f1
 8023624:	0802c6e6 	.word	0x0802c6e6
 8023628:	0802c2ba 	.word	0x0802c2ba

0802362c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802362c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023630:	ed2d 8b08 	vpush	{d8-d11}
 8023634:	b099      	sub	sp, #100	; 0x64
 8023636:	eeb0 aa40 	vmov.f32	s20, s0
 802363a:	eef0 9a60 	vmov.f32	s19, s1
 802363e:	9306      	str	r3, [sp, #24]
 8023640:	eeb0 9a41 	vmov.f32	s18, s2
 8023644:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8023648:	eeb0 8a62 	vmov.f32	s16, s5
 802364c:	9216      	str	r2, [sp, #88]	; 0x58
 802364e:	eef0 8a43 	vmov.f32	s17, s6
 8023652:	9307      	str	r3, [sp, #28]
 8023654:	eef0 ba44 	vmov.f32	s23, s8
 8023658:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 802365c:	eeb0 ba64 	vmov.f32	s22, s9
 8023660:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023662:	eef0 aa45 	vmov.f32	s21, s10
 8023666:	9310      	str	r3, [sp, #64]	; 0x40
 8023668:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 802366c:	9017      	str	r0, [sp, #92]	; 0x5c
 802366e:	9112      	str	r1, [sp, #72]	; 0x48
 8023670:	6850      	ldr	r0, [r2, #4]
 8023672:	9315      	str	r3, [sp, #84]	; 0x54
 8023674:	6812      	ldr	r2, [r2, #0]
 8023676:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8023678:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802367c:	fb00 1303 	mla	r3, r0, r3, r1
 8023680:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023684:	18d3      	adds	r3, r2, r3
 8023686:	930a      	str	r3, [sp, #40]	; 0x28
 8023688:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802368a:	681b      	ldr	r3, [r3, #0]
 802368c:	9311      	str	r3, [sp, #68]	; 0x44
 802368e:	9b07      	ldr	r3, [sp, #28]
 8023690:	009b      	lsls	r3, r3, #2
 8023692:	930e      	str	r3, [sp, #56]	; 0x38
 8023694:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023696:	2b00      	cmp	r3, #0
 8023698:	dc03      	bgt.n	80236a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802369a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802369c:	2b00      	cmp	r3, #0
 802369e:	f340 833b 	ble.w	8023d18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 80236a2:	9b06      	ldr	r3, [sp, #24]
 80236a4:	2b00      	cmp	r3, #0
 80236a6:	f340 8197 	ble.w	80239d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 80236aa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80236ac:	1423      	asrs	r3, r4, #16
 80236ae:	1412      	asrs	r2, r2, #16
 80236b0:	d432      	bmi.n	8023718 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 80236b2:	1c51      	adds	r1, r2, #1
 80236b4:	9807      	ldr	r0, [sp, #28]
 80236b6:	4288      	cmp	r0, r1
 80236b8:	dd31      	ble.n	802371e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80236ba:	2b00      	cmp	r3, #0
 80236bc:	db2f      	blt.n	802371e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80236be:	1c59      	adds	r1, r3, #1
 80236c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80236c2:	4288      	cmp	r0, r1
 80236c4:	dd2b      	ble.n	802371e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80236c6:	9b06      	ldr	r3, [sp, #24]
 80236c8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80236ca:	3b01      	subs	r3, #1
 80236cc:	992b      	ldr	r1, [sp, #172]	; 0xac
 80236ce:	fb02 1203 	mla	r2, r2, r3, r1
 80236d2:	1412      	asrs	r2, r2, #16
 80236d4:	d42e      	bmi.n	8023734 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80236d6:	3201      	adds	r2, #1
 80236d8:	9907      	ldr	r1, [sp, #28]
 80236da:	4291      	cmp	r1, r2
 80236dc:	dd2a      	ble.n	8023734 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80236de:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80236e0:	fb02 4303 	mla	r3, r2, r3, r4
 80236e4:	141b      	asrs	r3, r3, #16
 80236e6:	d425      	bmi.n	8023734 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80236e8:	3301      	adds	r3, #1
 80236ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80236ec:	429a      	cmp	r2, r3
 80236ee:	dd21      	ble.n	8023734 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80236f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80236f2:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 80236f6:	f103 0e03 	add.w	lr, r3, #3
 80236fa:	9b06      	ldr	r3, [sp, #24]
 80236fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80236fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023700:	2b00      	cmp	r3, #0
 8023702:	f300 81d2 	bgt.w	8023aaa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8023706:	9b06      	ldr	r3, [sp, #24]
 8023708:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802370c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802370e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023712:	4423      	add	r3, r4
 8023714:	930a      	str	r3, [sp, #40]	; 0x28
 8023716:	e161      	b.n	80239dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8023718:	1c51      	adds	r1, r2, #1
 802371a:	f040 8150 	bne.w	80239be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802371e:	9907      	ldr	r1, [sp, #28]
 8023720:	428a      	cmp	r2, r1
 8023722:	f280 814c 	bge.w	80239be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8023726:	1c5a      	adds	r2, r3, #1
 8023728:	f2c0 8149 	blt.w	80239be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802372c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802372e:	4293      	cmp	r3, r2
 8023730:	f280 8145 	bge.w	80239be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8023734:	9b06      	ldr	r3, [sp, #24]
 8023736:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8023738:	9314      	str	r3, [sp, #80]	; 0x50
 802373a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 802373e:	9313      	str	r3, [sp, #76]	; 0x4c
 8023740:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023742:	2b00      	cmp	r3, #0
 8023744:	dddf      	ble.n	8023706 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8023746:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023748:	1423      	asrs	r3, r4, #16
 802374a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802374e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8023752:	1412      	asrs	r2, r2, #16
 8023754:	f100 8190 	bmi.w	8023a78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8023758:	1c55      	adds	r5, r2, #1
 802375a:	9f07      	ldr	r7, [sp, #28]
 802375c:	42af      	cmp	r7, r5
 802375e:	f340 818d 	ble.w	8023a7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8023762:	2b00      	cmp	r3, #0
 8023764:	f2c0 818a 	blt.w	8023a7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8023768:	1c5d      	adds	r5, r3, #1
 802376a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802376c:	42af      	cmp	r7, r5
 802376e:	f340 8185 	ble.w	8023a7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8023772:	9d07      	ldr	r5, [sp, #28]
 8023774:	fb03 2305 	mla	r3, r3, r5, r2
 8023778:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802377a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802377e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023782:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023786:	2800      	cmp	r0, #0
 8023788:	f000 8167 	beq.w	8023a5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802378c:	686a      	ldr	r2, [r5, #4]
 802378e:	920b      	str	r2, [sp, #44]	; 0x2c
 8023790:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023794:	2900      	cmp	r1, #0
 8023796:	f000 8169 	beq.w	8023a6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802379a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802379c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802379e:	18aa      	adds	r2, r5, r2
 80237a0:	59ed      	ldr	r5, [r5, r7]
 80237a2:	6852      	ldr	r2, [r2, #4]
 80237a4:	9508      	str	r5, [sp, #32]
 80237a6:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 80237aa:	0e15      	lsrs	r5, r2, #24
 80237ac:	920c      	str	r2, [sp, #48]	; 0x30
 80237ae:	b280      	uxth	r0, r0
 80237b0:	b289      	uxth	r1, r1
 80237b2:	fb00 fb01 	mul.w	fp, r0, r1
 80237b6:	0100      	lsls	r0, r0, #4
 80237b8:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 80237bc:	eba0 090b 	sub.w	r9, r0, fp
 80237c0:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 80237c4:	b289      	uxth	r1, r1
 80237c6:	fa1f f989 	uxth.w	r9, r9
 80237ca:	1a52      	subs	r2, r2, r1
 80237cc:	fb09 f008 	mul.w	r0, r9, r8
 80237d0:	b292      	uxth	r2, r2
 80237d2:	fb02 000c 	mla	r0, r2, ip, r0
 80237d6:	fb01 000a 	mla	r0, r1, sl, r0
 80237da:	fb0b 0005 	mla	r0, fp, r5, r0
 80237de:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80237e2:	2800      	cmp	r0, #0
 80237e4:	f000 80e0 	beq.w	80239a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80237e8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80237ec:	d01b      	beq.n	8023826 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 80237ee:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80237f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80237f6:	fb0c fe0e 	mul.w	lr, ip, lr
 80237fa:	fb0c fc03 	mul.w	ip, ip, r3
 80237fe:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8023802:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023806:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802380a:	4473      	add	r3, lr
 802380c:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8023810:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8023814:	0a1b      	lsrs	r3, r3, #8
 8023816:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802381a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802381e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023822:	ea43 030e 	orr.w	r3, r3, lr
 8023826:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802382a:	d01e      	beq.n	802386a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 802382c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802382e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8023832:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8023836:	fb08 fc0c 	mul.w	ip, r8, ip
 802383a:	fb08 f80e 	mul.w	r8, r8, lr
 802383e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023842:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023846:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802384a:	44e6      	add	lr, ip
 802384c:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8023850:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8023854:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023858:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802385c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023860:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023864:	ea4e 0708 	orr.w	r7, lr, r8
 8023868:	970b      	str	r7, [sp, #44]	; 0x2c
 802386a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802386e:	d01e      	beq.n	80238ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023870:	9f08      	ldr	r7, [sp, #32]
 8023872:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8023876:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802387a:	fb0a f808 	mul.w	r8, sl, r8
 802387e:	fb0a fa0c 	mul.w	sl, sl, ip
 8023882:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8023886:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802388a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802388e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023892:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023896:	44c6      	add	lr, r8
 8023898:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802389c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80238a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80238a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80238a8:	ea4e 070a 	orr.w	r7, lr, sl
 80238ac:	9708      	str	r7, [sp, #32]
 80238ae:	2dff      	cmp	r5, #255	; 0xff
 80238b0:	d01d      	beq.n	80238ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 80238b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80238b4:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80238b8:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80238bc:	fb05 f808 	mul.w	r8, r5, r8
 80238c0:	fb05 f50c 	mul.w	r5, r5, ip
 80238c4:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80238c8:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80238cc:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80238d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80238d4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80238d8:	44c6      	add	lr, r8
 80238da:	0a2d      	lsrs	r5, r5, #8
 80238dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80238e0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80238e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80238e8:	ea4e 0505 	orr.w	r5, lr, r5
 80238ec:	950c      	str	r5, [sp, #48]	; 0x30
 80238ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80238f0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80238f4:	9f08      	ldr	r7, [sp, #32]
 80238f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80238fa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80238fe:	fb09 f505 	mul.w	r5, r9, r5
 8023902:	fb02 550c 	mla	r5, r2, ip, r5
 8023906:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802390a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802390c:	fb01 550c 	mla	r5, r1, ip, r5
 8023910:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8023914:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023916:	fb0b 550c 	mla	r5, fp, ip, r5
 802391a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802391e:	fb09 f90c 	mul.w	r9, r9, ip
 8023922:	0a2d      	lsrs	r5, r5, #8
 8023924:	fb02 9303 	mla	r3, r2, r3, r9
 8023928:	9a08      	ldr	r2, [sp, #32]
 802392a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802392e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8023932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023934:	fb01 330e 	mla	r3, r1, lr, r3
 8023938:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802393c:	fb0b 3b01 	mla	fp, fp, r1, r3
 8023940:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023942:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8023944:	4343      	muls	r3, r0
 8023946:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802394a:	1c58      	adds	r0, r3, #1
 802394c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023950:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023954:	ea45 050b 	orr.w	r5, r5, fp
 8023958:	7833      	ldrb	r3, [r6, #0]
 802395a:	b2ea      	uxtb	r2, r5
 802395c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023960:	fb12 f201 	smulbb	r2, r2, r1
 8023964:	b2c0      	uxtb	r0, r0
 8023966:	fb03 2300 	mla	r3, r3, r0, r2
 802396a:	b29b      	uxth	r3, r3
 802396c:	1c5a      	adds	r2, r3, #1
 802396e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023972:	7872      	ldrb	r2, [r6, #1]
 8023974:	fb12 f200 	smulbb	r2, r2, r0
 8023978:	121b      	asrs	r3, r3, #8
 802397a:	7033      	strb	r3, [r6, #0]
 802397c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8023980:	0c2d      	lsrs	r5, r5, #16
 8023982:	fb03 2301 	mla	r3, r3, r1, r2
 8023986:	b29b      	uxth	r3, r3
 8023988:	1c5a      	adds	r2, r3, #1
 802398a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802398e:	121b      	asrs	r3, r3, #8
 8023990:	7073      	strb	r3, [r6, #1]
 8023992:	78b3      	ldrb	r3, [r6, #2]
 8023994:	fb13 f000 	smulbb	r0, r3, r0
 8023998:	fb05 0501 	mla	r5, r5, r1, r0
 802399c:	b2ad      	uxth	r5, r5
 802399e:	1c6b      	adds	r3, r5, #1
 80239a0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80239a4:	122d      	asrs	r5, r5, #8
 80239a6:	70b5      	strb	r5, [r6, #2]
 80239a8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80239aa:	3603      	adds	r6, #3
 80239ac:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80239ae:	4413      	add	r3, r2
 80239b0:	932b      	str	r3, [sp, #172]	; 0xac
 80239b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80239b4:	441c      	add	r4, r3
 80239b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80239b8:	3b01      	subs	r3, #1
 80239ba:	9314      	str	r3, [sp, #80]	; 0x50
 80239bc:	e6c0      	b.n	8023740 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 80239be:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80239c0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80239c2:	4413      	add	r3, r2
 80239c4:	932b      	str	r3, [sp, #172]	; 0xac
 80239c6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80239c8:	441c      	add	r4, r3
 80239ca:	9b06      	ldr	r3, [sp, #24]
 80239cc:	3b01      	subs	r3, #1
 80239ce:	9306      	str	r3, [sp, #24]
 80239d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80239d2:	3303      	adds	r3, #3
 80239d4:	930a      	str	r3, [sp, #40]	; 0x28
 80239d6:	e664      	b.n	80236a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80239d8:	f47f ae75 	bne.w	80236c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 80239dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80239de:	2b00      	cmp	r3, #0
 80239e0:	f340 819a 	ble.w	8023d18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 80239e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80239e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80239ea:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80239ee:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80239f2:	eef0 6a48 	vmov.f32	s13, s16
 80239f6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80239fa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80239fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a02:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8023a06:	eef0 6a68 	vmov.f32	s13, s17
 8023a0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a0e:	ee16 4a90 	vmov	r4, s13
 8023a12:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023a16:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023a1a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023a1e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023a22:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023a26:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023a2a:	ee18 2a10 	vmov	r2, s16
 8023a2e:	eeb0 8a47 	vmov.f32	s16, s14
 8023a32:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a36:	ee18 2a90 	vmov	r2, s17
 8023a3a:	932d      	str	r3, [sp, #180]	; 0xb4
 8023a3c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023a3e:	eef0 8a67 	vmov.f32	s17, s15
 8023a42:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a46:	932e      	str	r3, [sp, #184]	; 0xb8
 8023a48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023a4a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023a4c:	3b01      	subs	r3, #1
 8023a4e:	9312      	str	r3, [sp, #72]	; 0x48
 8023a50:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023a52:	bf08      	it	eq
 8023a54:	4613      	moveq	r3, r2
 8023a56:	9306      	str	r3, [sp, #24]
 8023a58:	e61c      	b.n	8023694 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8023a5a:	b151      	cbz	r1, 8023a72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8023a5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023a5e:	58aa      	ldr	r2, [r5, r2]
 8023a60:	25ff      	movs	r5, #255	; 0xff
 8023a62:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8023a66:	9208      	str	r2, [sp, #32]
 8023a68:	46a8      	mov	r8, r5
 8023a6a:	e6a0      	b.n	80237ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8023a6c:	25ff      	movs	r5, #255	; 0xff
 8023a6e:	46aa      	mov	sl, r5
 8023a70:	e69d      	b.n	80237ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8023a72:	25ff      	movs	r5, #255	; 0xff
 8023a74:	46aa      	mov	sl, r5
 8023a76:	e7f7      	b.n	8023a68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8023a78:	1c57      	adds	r7, r2, #1
 8023a7a:	d195      	bne.n	80239a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023a7c:	9d07      	ldr	r5, [sp, #28]
 8023a7e:	4295      	cmp	r5, r2
 8023a80:	dd92      	ble.n	80239a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023a82:	1c5d      	adds	r5, r3, #1
 8023a84:	db90      	blt.n	80239a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023a86:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023a88:	429d      	cmp	r5, r3
 8023a8a:	dd8d      	ble.n	80239a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023a8c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023a8e:	9201      	str	r2, [sp, #4]
 8023a90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023a92:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8023a96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023a98:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8023a9a:	9300      	str	r3, [sp, #0]
 8023a9c:	9b07      	ldr	r3, [sp, #28]
 8023a9e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8023aa2:	4631      	mov	r1, r6
 8023aa4:	f7ff fc68 	bl	8023378 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8023aa8:	e77e      	b.n	80239a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023aaa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023aac:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023ab0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023ab2:	9d07      	ldr	r5, [sp, #28]
 8023ab4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8023ab8:	1412      	asrs	r2, r2, #16
 8023aba:	1423      	asrs	r3, r4, #16
 8023abc:	fb05 2303 	mla	r3, r5, r3, r2
 8023ac0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023ac2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8023ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023aca:	0e1e      	lsrs	r6, r3, #24
 8023acc:	2900      	cmp	r1, #0
 8023ace:	f000 8114 	beq.w	8023cfa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8023ad2:	686a      	ldr	r2, [r5, #4]
 8023ad4:	920d      	str	r2, [sp, #52]	; 0x34
 8023ad6:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8023ada:	2800      	cmp	r0, #0
 8023adc:	f000 8116 	beq.w	8023d0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8023ae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023ae2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8023ae4:	18aa      	adds	r2, r5, r2
 8023ae6:	59ed      	ldr	r5, [r5, r7]
 8023ae8:	6852      	ldr	r2, [r2, #4]
 8023aea:	9509      	str	r5, [sp, #36]	; 0x24
 8023aec:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8023af0:	0e15      	lsrs	r5, r2, #24
 8023af2:	920f      	str	r2, [sp, #60]	; 0x3c
 8023af4:	b289      	uxth	r1, r1
 8023af6:	b280      	uxth	r0, r0
 8023af8:	fb01 fa00 	mul.w	sl, r1, r0
 8023afc:	0109      	lsls	r1, r1, #4
 8023afe:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023b02:	eba1 080a 	sub.w	r8, r1, sl
 8023b06:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8023b0a:	b280      	uxth	r0, r0
 8023b0c:	fa1f f888 	uxth.w	r8, r8
 8023b10:	1a12      	subs	r2, r2, r0
 8023b12:	fb08 f10c 	mul.w	r1, r8, ip
 8023b16:	b292      	uxth	r2, r2
 8023b18:	fb02 1106 	mla	r1, r2, r6, r1
 8023b1c:	fb00 1109 	mla	r1, r0, r9, r1
 8023b20:	fb0a 1105 	mla	r1, sl, r5, r1
 8023b24:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023b28:	2900      	cmp	r1, #0
 8023b2a:	f000 80da 	beq.w	8023ce2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8023b2e:	2eff      	cmp	r6, #255	; 0xff
 8023b30:	d016      	beq.n	8023b60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8023b32:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8023b36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023b3a:	4377      	muls	r7, r6
 8023b3c:	435e      	muls	r6, r3
 8023b3e:	0a3b      	lsrs	r3, r7, #8
 8023b40:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023b44:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023b48:	443b      	add	r3, r7
 8023b4a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023b4e:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8023b52:	0a1b      	lsrs	r3, r3, #8
 8023b54:	0a3f      	lsrs	r7, r7, #8
 8023b56:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023b5a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023b5e:	433b      	orrs	r3, r7
 8023b60:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023b64:	d01d      	beq.n	8023ba2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 8023b66:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8023b68:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023b6a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023b6e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023b72:	fb0c f606 	mul.w	r6, ip, r6
 8023b76:	fb0c fc07 	mul.w	ip, ip, r7
 8023b7a:	0a37      	lsrs	r7, r6, #8
 8023b7c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8023b80:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023b84:	4437      	add	r7, r6
 8023b86:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8023b8a:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8023b8e:	0a3f      	lsrs	r7, r7, #8
 8023b90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023b94:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023b98:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023b9c:	ea47 060c 	orr.w	r6, r7, ip
 8023ba0:	960d      	str	r6, [sp, #52]	; 0x34
 8023ba2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023ba6:	d01d      	beq.n	8023be4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8023ba8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8023baa:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8023bae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023bb2:	fb09 fc0c 	mul.w	ip, r9, ip
 8023bb6:	fb09 f906 	mul.w	r9, r9, r6
 8023bba:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8023bbe:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023bc2:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8023bc6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023bca:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8023bce:	4467      	add	r7, ip
 8023bd0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023bd4:	0a3f      	lsrs	r7, r7, #8
 8023bd6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023bda:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023bde:	ea47 0609 	orr.w	r6, r7, r9
 8023be2:	9609      	str	r6, [sp, #36]	; 0x24
 8023be4:	2dff      	cmp	r5, #255	; 0xff
 8023be6:	d01a      	beq.n	8023c1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8023be8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023bea:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8023bee:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023bf2:	fb05 fc0c 	mul.w	ip, r5, ip
 8023bf6:	4375      	muls	r5, r6
 8023bf8:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8023bfc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023c00:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8023c04:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023c08:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8023c0c:	4467      	add	r7, ip
 8023c0e:	0a2d      	lsrs	r5, r5, #8
 8023c10:	0a3f      	lsrs	r7, r7, #8
 8023c12:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023c16:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023c1a:	433d      	orrs	r5, r7
 8023c1c:	950f      	str	r5, [sp, #60]	; 0x3c
 8023c1e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023c20:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8023c24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c28:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023c2c:	fb08 f505 	mul.w	r5, r8, r5
 8023c30:	fb02 5506 	mla	r5, r2, r6, r5
 8023c34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8023c36:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023c3a:	fb00 5506 	mla	r5, r0, r6, r5
 8023c3e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023c40:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023c44:	fb0a 5506 	mla	r5, sl, r6, r5
 8023c48:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8023c4a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023c4e:	0a2d      	lsrs	r5, r5, #8
 8023c50:	fb08 f806 	mul.w	r8, r8, r6
 8023c54:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023c58:	fb02 8303 	mla	r3, r2, r3, r8
 8023c5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023c5e:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023c62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023c64:	fb00 3307 	mla	r3, r0, r7, r3
 8023c68:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023c6c:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8023c70:	fb01 f30b 	mul.w	r3, r1, fp
 8023c74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c78:	1c59      	adds	r1, r3, #1
 8023c7a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023c7e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023c82:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8023c86:	ea45 050c 	orr.w	r5, r5, ip
 8023c8a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023c8e:	b2ea      	uxtb	r2, r5
 8023c90:	b2c9      	uxtb	r1, r1
 8023c92:	fb12 f20b 	smulbb	r2, r2, fp
 8023c96:	fb03 2301 	mla	r3, r3, r1, r2
 8023c9a:	b29b      	uxth	r3, r3
 8023c9c:	1c5a      	adds	r2, r3, #1
 8023c9e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023ca2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023ca6:	fb12 f201 	smulbb	r2, r2, r1
 8023caa:	121b      	asrs	r3, r3, #8
 8023cac:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8023cb0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8023cb4:	0c2d      	lsrs	r5, r5, #16
 8023cb6:	fb03 230b 	mla	r3, r3, fp, r2
 8023cba:	b29b      	uxth	r3, r3
 8023cbc:	1c5a      	adds	r2, r3, #1
 8023cbe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023cc2:	121b      	asrs	r3, r3, #8
 8023cc4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8023cc8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8023ccc:	fb13 f101 	smulbb	r1, r3, r1
 8023cd0:	fb05 150b 	mla	r5, r5, fp, r1
 8023cd4:	b2ad      	uxth	r5, r5
 8023cd6:	1c69      	adds	r1, r5, #1
 8023cd8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8023cdc:	122d      	asrs	r5, r5, #8
 8023cde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8023ce2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023ce4:	f10e 0e03 	add.w	lr, lr, #3
 8023ce8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023cea:	4413      	add	r3, r2
 8023cec:	932b      	str	r3, [sp, #172]	; 0xac
 8023cee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023cf0:	441c      	add	r4, r3
 8023cf2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023cf4:	3b01      	subs	r3, #1
 8023cf6:	9313      	str	r3, [sp, #76]	; 0x4c
 8023cf8:	e501      	b.n	80236fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8023cfa:	b150      	cbz	r0, 8023d12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8023cfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023cfe:	58aa      	ldr	r2, [r5, r2]
 8023d00:	25ff      	movs	r5, #255	; 0xff
 8023d02:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8023d06:	9209      	str	r2, [sp, #36]	; 0x24
 8023d08:	46ac      	mov	ip, r5
 8023d0a:	e6f3      	b.n	8023af4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8023d0c:	25ff      	movs	r5, #255	; 0xff
 8023d0e:	46a9      	mov	r9, r5
 8023d10:	e6f0      	b.n	8023af4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8023d12:	25ff      	movs	r5, #255	; 0xff
 8023d14:	46a9      	mov	r9, r5
 8023d16:	e7f7      	b.n	8023d08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8023d18:	b019      	add	sp, #100	; 0x64
 8023d1a:	ecbd 8b08 	vpop	{d8-d11}
 8023d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023d24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8023d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d28:	b085      	sub	sp, #20
 8023d2a:	7888      	ldrb	r0, [r1, #2]
 8023d2c:	4691      	mov	r9, r2
 8023d2e:	9000      	str	r0, [sp, #0]
 8023d30:	7848      	ldrb	r0, [r1, #1]
 8023d32:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8023d36:	9001      	str	r0, [sp, #4]
 8023d38:	7808      	ldrb	r0, [r1, #0]
 8023d3a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8023d3e:	9002      	str	r0, [sp, #8]
 8023d40:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8023d44:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8023d48:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8023d4c:	fb04 c603 	mla	r6, r4, r3, ip
 8023d50:	2c00      	cmp	r4, #0
 8023d52:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8023d56:	9a00      	ldr	r2, [sp, #0]
 8023d58:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8023d5c:	9a01      	ldr	r2, [sp, #4]
 8023d5e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8023d62:	db3a      	blt.n	8023dda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8023d64:	45a0      	cmp	r8, r4
 8023d66:	dd38      	ble.n	8023dda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8023d68:	f1bc 0f00 	cmp.w	ip, #0
 8023d6c:	db33      	blt.n	8023dd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8023d6e:	4563      	cmp	r3, ip
 8023d70:	dd31      	ble.n	8023dd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8023d72:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8023d76:	f11c 0601 	adds.w	r6, ip, #1
 8023d7a:	d431      	bmi.n	8023de0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8023d7c:	42b3      	cmp	r3, r6
 8023d7e:	dd2f      	ble.n	8023de0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8023d80:	b375      	cbz	r5, 8023de0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8023d82:	f8de 6004 	ldr.w	r6, [lr, #4]
 8023d86:	3401      	adds	r4, #1
 8023d88:	d42e      	bmi.n	8023de8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8023d8a:	45a0      	cmp	r8, r4
 8023d8c:	dd2c      	ble.n	8023de8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8023d8e:	b35f      	cbz	r7, 8023de8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8023d90:	f1bc 0f00 	cmp.w	ip, #0
 8023d94:	db26      	blt.n	8023de4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8023d96:	4563      	cmp	r3, ip
 8023d98:	dd24      	ble.n	8023de4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8023d9a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8023d9e:	f11c 0c01 	adds.w	ip, ip, #1
 8023da2:	d405      	bmi.n	8023db0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8023da4:	4563      	cmp	r3, ip
 8023da6:	dd03      	ble.n	8023db0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8023da8:	b115      	cbz	r5, 8023db0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8023daa:	3301      	adds	r3, #1
 8023dac:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8023db0:	2d0f      	cmp	r5, #15
 8023db2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8023db6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023dba:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023dbe:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8023dc2:	d801      	bhi.n	8023dc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8023dc4:	2f0f      	cmp	r7, #15
 8023dc6:	d911      	bls.n	8023dec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8023dc8:	4b77      	ldr	r3, [pc, #476]	; (8023fa8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8023dca:	f240 11a5 	movw	r1, #421	; 0x1a5
 8023dce:	4a77      	ldr	r2, [pc, #476]	; (8023fac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8023dd0:	4877      	ldr	r0, [pc, #476]	; (8023fb0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8023dd2:	f003 f83b 	bl	8026e4c <__assert_func>
 8023dd6:	4602      	mov	r2, r0
 8023dd8:	e7cd      	b.n	8023d76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8023dda:	4606      	mov	r6, r0
 8023ddc:	4602      	mov	r2, r0
 8023dde:	e7d2      	b.n	8023d86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8023de0:	4606      	mov	r6, r0
 8023de2:	e7d0      	b.n	8023d86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8023de4:	4604      	mov	r4, r0
 8023de6:	e7da      	b.n	8023d9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8023de8:	4604      	mov	r4, r0
 8023dea:	e7e1      	b.n	8023db0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8023dec:	b2ab      	uxth	r3, r5
 8023dee:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8023df2:	b2bf      	uxth	r7, r7
 8023df4:	fb03 fe07 	mul.w	lr, r3, r7
 8023df8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8023dfc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023e00:	eba3 0c0e 	sub.w	ip, r3, lr
 8023e04:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8023e08:	b2bf      	uxth	r7, r7
 8023e0a:	fa1f fc8c 	uxth.w	ip, ip
 8023e0e:	eba5 0507 	sub.w	r5, r5, r7
 8023e12:	fb0c f30a 	mul.w	r3, ip, sl
 8023e16:	b2ad      	uxth	r5, r5
 8023e18:	fb05 330b 	mla	r3, r5, fp, r3
 8023e1c:	fb07 3309 	mla	r3, r7, r9, r3
 8023e20:	fb0e 3308 	mla	r3, lr, r8, r3
 8023e24:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023e28:	9303      	str	r3, [sp, #12]
 8023e2a:	d018      	beq.n	8023e5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8023e2c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023e30:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023e34:	fb0b f303 	mul.w	r3, fp, r3
 8023e38:	fb0b fb02 	mul.w	fp, fp, r2
 8023e3c:	0a1a      	lsrs	r2, r3, #8
 8023e3e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8023e42:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023e46:	441a      	add	r2, r3
 8023e48:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8023e4c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8023e50:	0a12      	lsrs	r2, r2, #8
 8023e52:	0a1b      	lsrs	r3, r3, #8
 8023e54:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023e58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023e5c:	431a      	orrs	r2, r3
 8023e5e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023e62:	d019      	beq.n	8023e98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8023e64:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8023e68:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023e6c:	fb0a fb0b 	mul.w	fp, sl, fp
 8023e70:	fb0a fa06 	mul.w	sl, sl, r6
 8023e74:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8023e78:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023e7c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8023e80:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023e84:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8023e88:	445e      	add	r6, fp
 8023e8a:	0a1b      	lsrs	r3, r3, #8
 8023e8c:	0a36      	lsrs	r6, r6, #8
 8023e8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023e92:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023e96:	431e      	orrs	r6, r3
 8023e98:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023e9c:	d019      	beq.n	8023ed2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8023e9e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8023ea2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023ea6:	fb09 fa0a 	mul.w	sl, r9, sl
 8023eaa:	fb09 f904 	mul.w	r9, r9, r4
 8023eae:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8023eb2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023eb6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8023eba:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023ebe:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8023ec2:	4454      	add	r4, sl
 8023ec4:	0a1b      	lsrs	r3, r3, #8
 8023ec6:	0a24      	lsrs	r4, r4, #8
 8023ec8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023ecc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023ed0:	431c      	orrs	r4, r3
 8023ed2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023ed6:	d019      	beq.n	8023f0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8023ed8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8023edc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023ee0:	fb08 f909 	mul.w	r9, r8, r9
 8023ee4:	fb08 f800 	mul.w	r8, r8, r0
 8023ee8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8023eec:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8023ef0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8023ef4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023ef8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8023efc:	4448      	add	r0, r9
 8023efe:	0a1b      	lsrs	r3, r3, #8
 8023f00:	0a00      	lsrs	r0, r0, #8
 8023f02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023f06:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023f0a:	4318      	orrs	r0, r3
 8023f0c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8023f10:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023f14:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023f18:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023f1c:	fb0c f808 	mul.w	r8, ip, r8
 8023f20:	fb0c f606 	mul.w	r6, ip, r6
 8023f24:	fb05 8803 	mla	r8, r5, r3, r8
 8023f28:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8023f2c:	fb05 6202 	mla	r2, r5, r2, r6
 8023f30:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023f34:	fb07 8803 	mla	r8, r7, r3, r8
 8023f38:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8023f3c:	fb07 2704 	mla	r7, r7, r4, r2
 8023f40:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023f44:	fb0e 8303 	mla	r3, lr, r3, r8
 8023f48:	fb0e 7e00 	mla	lr, lr, r0, r7
 8023f4c:	9802      	ldr	r0, [sp, #8]
 8023f4e:	0a1b      	lsrs	r3, r3, #8
 8023f50:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023f54:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023f58:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023f5c:	ea43 0e0e 	orr.w	lr, r3, lr
 8023f60:	9b03      	ldr	r3, [sp, #12]
 8023f62:	43db      	mvns	r3, r3
 8023f64:	b2db      	uxtb	r3, r3
 8023f66:	4358      	muls	r0, r3
 8023f68:	1c42      	adds	r2, r0, #1
 8023f6a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023f6e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8023f72:	700a      	strb	r2, [r1, #0]
 8023f74:	9a01      	ldr	r2, [sp, #4]
 8023f76:	435a      	muls	r2, r3
 8023f78:	1c50      	adds	r0, r2, #1
 8023f7a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023f7e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8023f82:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8023f86:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023f8a:	704a      	strb	r2, [r1, #1]
 8023f8c:	9a00      	ldr	r2, [sp, #0]
 8023f8e:	435a      	muls	r2, r3
 8023f90:	4613      	mov	r3, r2
 8023f92:	3201      	adds	r2, #1
 8023f94:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023f98:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8023f9c:	f881 e002 	strb.w	lr, [r1, #2]
 8023fa0:	b005      	add	sp, #20
 8023fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fa6:	bf00      	nop
 8023fa8:	0802c1f1 	.word	0x0802c1f1
 8023fac:	0802c6e6 	.word	0x0802c6e6
 8023fb0:	0802c2ba 	.word	0x0802c2ba

08023fb4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fb8:	ed2d 8b08 	vpush	{d8-d11}
 8023fbc:	b097      	sub	sp, #92	; 0x5c
 8023fbe:	eeb0 aa40 	vmov.f32	s20, s0
 8023fc2:	eef0 9a60 	vmov.f32	s19, s1
 8023fc6:	9306      	str	r3, [sp, #24]
 8023fc8:	eeb0 9a41 	vmov.f32	s18, s2
 8023fcc:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8023fd0:	eeb0 8a62 	vmov.f32	s16, s5
 8023fd4:	9214      	str	r2, [sp, #80]	; 0x50
 8023fd6:	eef0 8a43 	vmov.f32	s17, s6
 8023fda:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023fdc:	eef0 ba44 	vmov.f32	s23, s8
 8023fe0:	9307      	str	r3, [sp, #28]
 8023fe2:	eeb0 ba64 	vmov.f32	s22, s9
 8023fe6:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8023fea:	eef0 aa45 	vmov.f32	s21, s10
 8023fee:	9015      	str	r0, [sp, #84]	; 0x54
 8023ff0:	9112      	str	r1, [sp, #72]	; 0x48
 8023ff2:	6850      	ldr	r0, [r2, #4]
 8023ff4:	9310      	str	r3, [sp, #64]	; 0x40
 8023ff6:	6812      	ldr	r2, [r2, #0]
 8023ff8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8023ffa:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8023ffe:	fb00 1303 	mla	r3, r0, r3, r1
 8024002:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024006:	18d3      	adds	r3, r2, r3
 8024008:	930a      	str	r3, [sp, #40]	; 0x28
 802400a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802400c:	681b      	ldr	r3, [r3, #0]
 802400e:	9311      	str	r3, [sp, #68]	; 0x44
 8024010:	9b07      	ldr	r3, [sp, #28]
 8024012:	009b      	lsls	r3, r3, #2
 8024014:	930e      	str	r3, [sp, #56]	; 0x38
 8024016:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024018:	2b00      	cmp	r3, #0
 802401a:	dc03      	bgt.n	8024024 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802401c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802401e:	2b00      	cmp	r3, #0
 8024020:	f340 832e 	ble.w	8024680 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8024024:	9b06      	ldr	r3, [sp, #24]
 8024026:	2b00      	cmp	r3, #0
 8024028:	f340 8186 	ble.w	8024338 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 802402c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802402e:	1423      	asrs	r3, r4, #16
 8024030:	1412      	asrs	r2, r2, #16
 8024032:	d42f      	bmi.n	8024094 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8024034:	1c51      	adds	r1, r2, #1
 8024036:	9807      	ldr	r0, [sp, #28]
 8024038:	4288      	cmp	r0, r1
 802403a:	dd2e      	ble.n	802409a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802403c:	2b00      	cmp	r3, #0
 802403e:	db2c      	blt.n	802409a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8024040:	1c59      	adds	r1, r3, #1
 8024042:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024044:	4288      	cmp	r0, r1
 8024046:	dd28      	ble.n	802409a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8024048:	9b06      	ldr	r3, [sp, #24]
 802404a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802404c:	3b01      	subs	r3, #1
 802404e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8024050:	fb02 1203 	mla	r2, r2, r3, r1
 8024054:	1412      	asrs	r2, r2, #16
 8024056:	d42b      	bmi.n	80240b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024058:	3201      	adds	r2, #1
 802405a:	9907      	ldr	r1, [sp, #28]
 802405c:	4291      	cmp	r1, r2
 802405e:	dd27      	ble.n	80240b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024060:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8024062:	fb02 4303 	mla	r3, r2, r3, r4
 8024066:	141b      	asrs	r3, r3, #16
 8024068:	d422      	bmi.n	80240b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802406a:	3301      	adds	r3, #1
 802406c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802406e:	429a      	cmp	r2, r3
 8024070:	dd1e      	ble.n	80240b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024074:	f8dd b018 	ldr.w	fp, [sp, #24]
 8024078:	1cdd      	adds	r5, r3, #3
 802407a:	f1bb 0f00 	cmp.w	fp, #0
 802407e:	f300 81c4 	bgt.w	802440a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8024082:	9b06      	ldr	r3, [sp, #24]
 8024084:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802408a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802408e:	4423      	add	r3, r4
 8024090:	930a      	str	r3, [sp, #40]	; 0x28
 8024092:	e153      	b.n	802433c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8024094:	1c51      	adds	r1, r2, #1
 8024096:	f040 8142 	bne.w	802431e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802409a:	9907      	ldr	r1, [sp, #28]
 802409c:	428a      	cmp	r2, r1
 802409e:	f280 813e 	bge.w	802431e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80240a2:	1c5a      	adds	r2, r3, #1
 80240a4:	f2c0 813b 	blt.w	802431e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80240a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80240aa:	4293      	cmp	r3, r2
 80240ac:	f280 8137 	bge.w	802431e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80240b0:	9b06      	ldr	r3, [sp, #24]
 80240b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80240b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80240b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80240b8:	2b00      	cmp	r3, #0
 80240ba:	dde2      	ble.n	8024082 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 80240bc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80240be:	1423      	asrs	r3, r4, #16
 80240c0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80240c2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80240c6:	1409      	asrs	r1, r1, #16
 80240c8:	f3c2 3203 	ubfx	r2, r2, #12, #4
 80240cc:	f100 8187 	bmi.w	80243de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 80240d0:	1c4e      	adds	r6, r1, #1
 80240d2:	9f07      	ldr	r7, [sp, #28]
 80240d4:	42b7      	cmp	r7, r6
 80240d6:	f340 8184 	ble.w	80243e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80240da:	2b00      	cmp	r3, #0
 80240dc:	f2c0 8181 	blt.w	80243e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80240e0:	1c5e      	adds	r6, r3, #1
 80240e2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80240e4:	42b7      	cmp	r7, r6
 80240e6:	f340 817c 	ble.w	80243e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80240ea:	9e07      	ldr	r6, [sp, #28]
 80240ec:	fb03 1306 	mla	r3, r3, r6, r1
 80240f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80240f2:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80240f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80240fa:	0e1f      	lsrs	r7, r3, #24
 80240fc:	2a00      	cmp	r2, #0
 80240fe:	f000 815c 	beq.w	80243ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8024102:	6871      	ldr	r1, [r6, #4]
 8024104:	910b      	str	r1, [sp, #44]	; 0x2c
 8024106:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802410a:	2800      	cmp	r0, #0
 802410c:	f000 815e 	beq.w	80243cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8024110:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024112:	eb06 0c01 	add.w	ip, r6, r1
 8024116:	5876      	ldr	r6, [r6, r1]
 8024118:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802411c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8024120:	9608      	str	r6, [sp, #32]
 8024122:	0e0e      	lsrs	r6, r1, #24
 8024124:	910c      	str	r1, [sp, #48]	; 0x30
 8024126:	b292      	uxth	r2, r2
 8024128:	b280      	uxth	r0, r0
 802412a:	fb02 fa00 	mul.w	sl, r2, r0
 802412e:	0112      	lsls	r2, r2, #4
 8024130:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8024134:	eba2 080a 	sub.w	r8, r2, sl
 8024138:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802413c:	b280      	uxth	r0, r0
 802413e:	fa1f f888 	uxth.w	r8, r8
 8024142:	1a09      	subs	r1, r1, r0
 8024144:	fb08 f20e 	mul.w	r2, r8, lr
 8024148:	b289      	uxth	r1, r1
 802414a:	fb01 2207 	mla	r2, r1, r7, r2
 802414e:	fb00 2209 	mla	r2, r0, r9, r2
 8024152:	fb0a 2206 	mla	r2, sl, r6, r2
 8024156:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802415a:	2a00      	cmp	r2, #0
 802415c:	f000 80d4 	beq.w	8024308 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8024160:	2fff      	cmp	r7, #255	; 0xff
 8024162:	d01a      	beq.n	802419a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8024164:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024168:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802416c:	fb07 fc0c 	mul.w	ip, r7, ip
 8024170:	435f      	muls	r7, r3
 8024172:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8024176:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802417a:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 802417e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024182:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8024186:	4463      	add	r3, ip
 8024188:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802418c:	0a1b      	lsrs	r3, r3, #8
 802418e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024192:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024196:	ea43 030b 	orr.w	r3, r3, fp
 802419a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802419e:	d01e      	beq.n	80241de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 80241a0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80241a2:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 80241a6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80241aa:	fb0e fb0b 	mul.w	fp, lr, fp
 80241ae:	fb0e fe07 	mul.w	lr, lr, r7
 80241b2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80241b6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80241ba:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80241be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80241c2:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80241c6:	44dc      	add	ip, fp
 80241c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80241cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80241d0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80241d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80241d8:	ea4c 070e 	orr.w	r7, ip, lr
 80241dc:	970b      	str	r7, [sp, #44]	; 0x2c
 80241de:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80241e2:	d01e      	beq.n	8024222 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80241e4:	9f08      	ldr	r7, [sp, #32]
 80241e6:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80241ea:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80241ee:	fb09 fe0e 	mul.w	lr, r9, lr
 80241f2:	fb09 f907 	mul.w	r9, r9, r7
 80241f6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80241fa:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80241fe:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8024202:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024206:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802420a:	44f4      	add	ip, lr
 802420c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024210:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024214:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024218:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802421c:	ea4c 0709 	orr.w	r7, ip, r9
 8024220:	9708      	str	r7, [sp, #32]
 8024222:	2eff      	cmp	r6, #255	; 0xff
 8024224:	d01c      	beq.n	8024260 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8024226:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024228:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802422c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024230:	fb06 fe0e 	mul.w	lr, r6, lr
 8024234:	437e      	muls	r6, r7
 8024236:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802423a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802423e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8024242:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024246:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802424a:	44f4      	add	ip, lr
 802424c:	0a36      	lsrs	r6, r6, #8
 802424e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024252:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024256:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802425a:	ea4c 0606 	orr.w	r6, ip, r6
 802425e:	960c      	str	r6, [sp, #48]	; 0x30
 8024260:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8024262:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8024266:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802426a:	2aff      	cmp	r2, #255	; 0xff
 802426c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024270:	fb08 f606 	mul.w	r6, r8, r6
 8024274:	fb01 6607 	mla	r6, r1, r7, r6
 8024278:	9f08      	ldr	r7, [sp, #32]
 802427a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802427e:	fb00 6607 	mla	r6, r0, r7, r6
 8024282:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024284:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024288:	fb0a 6607 	mla	r6, sl, r7, r6
 802428c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802428e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024292:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8024296:	fb08 f807 	mul.w	r8, r8, r7
 802429a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802429e:	fb01 8303 	mla	r3, r1, r3, r8
 80242a2:	9908      	ldr	r1, [sp, #32]
 80242a4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80242a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80242aa:	fb00 330c 	mla	r3, r0, ip, r3
 80242ae:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80242b2:	fb0a 3a00 	mla	sl, sl, r0, r3
 80242b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80242ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80242be:	ea46 060a 	orr.w	r6, r6, sl
 80242c2:	b2f0      	uxtb	r0, r6
 80242c4:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80242c8:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80242cc:	f000 8084 	beq.w	80243d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 80242d0:	43d2      	mvns	r2, r2
 80242d2:	782b      	ldrb	r3, [r5, #0]
 80242d4:	b2d2      	uxtb	r2, r2
 80242d6:	fb03 f702 	mul.w	r7, r3, r2
 80242da:	1c7b      	adds	r3, r7, #1
 80242dc:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80242e0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80242e4:	702b      	strb	r3, [r5, #0]
 80242e6:	786b      	ldrb	r3, [r5, #1]
 80242e8:	fb03 f002 	mul.w	r0, r3, r2
 80242ec:	1c43      	adds	r3, r0, #1
 80242ee:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80242f2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80242f6:	706b      	strb	r3, [r5, #1]
 80242f8:	78ab      	ldrb	r3, [r5, #2]
 80242fa:	4353      	muls	r3, r2
 80242fc:	1c5a      	adds	r2, r3, #1
 80242fe:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024302:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8024306:	70ae      	strb	r6, [r5, #2]
 8024308:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802430a:	3503      	adds	r5, #3
 802430c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802430e:	4413      	add	r3, r2
 8024310:	9329      	str	r3, [sp, #164]	; 0xa4
 8024312:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024314:	441c      	add	r4, r3
 8024316:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024318:	3b01      	subs	r3, #1
 802431a:	9313      	str	r3, [sp, #76]	; 0x4c
 802431c:	e6cb      	b.n	80240b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802431e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024320:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024322:	4413      	add	r3, r2
 8024324:	9329      	str	r3, [sp, #164]	; 0xa4
 8024326:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024328:	441c      	add	r4, r3
 802432a:	9b06      	ldr	r3, [sp, #24]
 802432c:	3b01      	subs	r3, #1
 802432e:	9306      	str	r3, [sp, #24]
 8024330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024332:	3303      	adds	r3, #3
 8024334:	930a      	str	r3, [sp, #40]	; 0x28
 8024336:	e675      	b.n	8024024 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8024338:	f47f ae86 	bne.w	8024048 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802433c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802433e:	2b00      	cmp	r3, #0
 8024340:	f340 819e 	ble.w	8024680 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8024344:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024348:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802434a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802434e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024352:	eef0 6a48 	vmov.f32	s13, s16
 8024356:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802435a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802435e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024362:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8024366:	eef0 6a68 	vmov.f32	s13, s17
 802436a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802436e:	ee16 4a90 	vmov	r4, s13
 8024372:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024376:	ee69 7a27 	vmul.f32	s15, s18, s15
 802437a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802437e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024382:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024386:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802438a:	ee18 2a10 	vmov	r2, s16
 802438e:	eeb0 8a47 	vmov.f32	s16, s14
 8024392:	fb92 f3f3 	sdiv	r3, r2, r3
 8024396:	ee18 2a90 	vmov	r2, s17
 802439a:	932b      	str	r3, [sp, #172]	; 0xac
 802439c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802439e:	eef0 8a67 	vmov.f32	s17, s15
 80243a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80243a6:	932c      	str	r3, [sp, #176]	; 0xb0
 80243a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80243aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80243ac:	3b01      	subs	r3, #1
 80243ae:	9312      	str	r3, [sp, #72]	; 0x48
 80243b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80243b2:	bf08      	it	eq
 80243b4:	4613      	moveq	r3, r2
 80243b6:	9306      	str	r3, [sp, #24]
 80243b8:	e62d      	b.n	8024016 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 80243ba:	b150      	cbz	r0, 80243d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 80243bc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80243be:	5871      	ldr	r1, [r6, r1]
 80243c0:	26ff      	movs	r6, #255	; 0xff
 80243c2:	ea4f 6911 	mov.w	r9, r1, lsr #24
 80243c6:	9108      	str	r1, [sp, #32]
 80243c8:	46b6      	mov	lr, r6
 80243ca:	e6ac      	b.n	8024126 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80243cc:	26ff      	movs	r6, #255	; 0xff
 80243ce:	46b1      	mov	r9, r6
 80243d0:	e6a9      	b.n	8024126 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80243d2:	26ff      	movs	r6, #255	; 0xff
 80243d4:	46b1      	mov	r9, r6
 80243d6:	e7f7      	b.n	80243c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 80243d8:	7028      	strb	r0, [r5, #0]
 80243da:	7069      	strb	r1, [r5, #1]
 80243dc:	e793      	b.n	8024306 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 80243de:	1c4f      	adds	r7, r1, #1
 80243e0:	d192      	bne.n	8024308 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80243e2:	9e07      	ldr	r6, [sp, #28]
 80243e4:	428e      	cmp	r6, r1
 80243e6:	dd8f      	ble.n	8024308 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80243e8:	1c5e      	adds	r6, r3, #1
 80243ea:	db8d      	blt.n	8024308 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80243ec:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80243ee:	429e      	cmp	r6, r3
 80243f0:	dd8a      	ble.n	8024308 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80243f2:	9600      	str	r6, [sp, #0]
 80243f4:	e9cd 2003 	strd	r2, r0, [sp, #12]
 80243f8:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80243fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80243fe:	4629      	mov	r1, r5
 8024400:	9b07      	ldr	r3, [sp, #28]
 8024402:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024404:	f7ff fc8e 	bl	8023d24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8024408:	e77e      	b.n	8024308 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802440a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802440c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024410:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8024412:	9e07      	ldr	r6, [sp, #28]
 8024414:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024418:	1409      	asrs	r1, r1, #16
 802441a:	1423      	asrs	r3, r4, #16
 802441c:	fb06 1303 	mla	r3, r6, r3, r1
 8024420:	9911      	ldr	r1, [sp, #68]	; 0x44
 8024422:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8024426:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802442a:	0e1f      	lsrs	r7, r3, #24
 802442c:	2a00      	cmp	r2, #0
 802442e:	f000 8113 	beq.w	8024658 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8024432:	6871      	ldr	r1, [r6, #4]
 8024434:	910d      	str	r1, [sp, #52]	; 0x34
 8024436:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802443a:	2800      	cmp	r0, #0
 802443c:	f000 8115 	beq.w	802466a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8024440:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024442:	eb06 0c01 	add.w	ip, r6, r1
 8024446:	5876      	ldr	r6, [r6, r1]
 8024448:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802444c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8024450:	9609      	str	r6, [sp, #36]	; 0x24
 8024452:	0e0e      	lsrs	r6, r1, #24
 8024454:	910f      	str	r1, [sp, #60]	; 0x3c
 8024456:	b292      	uxth	r2, r2
 8024458:	b280      	uxth	r0, r0
 802445a:	fb02 fa00 	mul.w	sl, r2, r0
 802445e:	0112      	lsls	r2, r2, #4
 8024460:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8024464:	eba2 080a 	sub.w	r8, r2, sl
 8024468:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802446c:	b280      	uxth	r0, r0
 802446e:	fa1f f888 	uxth.w	r8, r8
 8024472:	1a09      	subs	r1, r1, r0
 8024474:	fb08 f20e 	mul.w	r2, r8, lr
 8024478:	b289      	uxth	r1, r1
 802447a:	fb01 2207 	mla	r2, r1, r7, r2
 802447e:	fb00 2209 	mla	r2, r0, r9, r2
 8024482:	fb0a 2206 	mla	r2, sl, r6, r2
 8024486:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802448a:	2a00      	cmp	r2, #0
 802448c:	f000 80da 	beq.w	8024644 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8024490:	2fff      	cmp	r7, #255	; 0xff
 8024492:	d01a      	beq.n	80244ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8024494:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024498:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802449c:	fb07 fc0c 	mul.w	ip, r7, ip
 80244a0:	435f      	muls	r7, r3
 80244a2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80244a6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80244aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80244ae:	4463      	add	r3, ip
 80244b0:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80244b4:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80244b8:	0a1b      	lsrs	r3, r3, #8
 80244ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80244be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80244c2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80244c6:	ea43 030c 	orr.w	r3, r3, ip
 80244ca:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80244ce:	d021      	beq.n	8024514 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 80244d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80244d2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80244d6:	fb0e f707 	mul.w	r7, lr, r7
 80244da:	9713      	str	r7, [sp, #76]	; 0x4c
 80244dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80244de:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80244e2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80244e4:	fb0e fe0c 	mul.w	lr, lr, ip
 80244e8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80244ec:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80244f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80244f4:	44bc      	add	ip, r7
 80244f6:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80244fa:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80244fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024502:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024506:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802450a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802450e:	ea4c 070e 	orr.w	r7, ip, lr
 8024512:	970d      	str	r7, [sp, #52]	; 0x34
 8024514:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024518:	d01e      	beq.n	8024558 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 802451a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802451c:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8024520:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024524:	fb09 fe0e 	mul.w	lr, r9, lr
 8024528:	fb09 f907 	mul.w	r9, r9, r7
 802452c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8024530:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024534:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8024538:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802453c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8024540:	44f4      	add	ip, lr
 8024542:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024546:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802454a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802454e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024552:	ea4c 0709 	orr.w	r7, ip, r9
 8024556:	9709      	str	r7, [sp, #36]	; 0x24
 8024558:	2eff      	cmp	r6, #255	; 0xff
 802455a:	d01c      	beq.n	8024596 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 802455c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802455e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8024562:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024566:	fb06 fe0e 	mul.w	lr, r6, lr
 802456a:	437e      	muls	r6, r7
 802456c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8024570:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024574:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8024578:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802457c:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8024580:	44f4      	add	ip, lr
 8024582:	0a36      	lsrs	r6, r6, #8
 8024584:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024588:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802458c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024590:	ea4c 0606 	orr.w	r6, ip, r6
 8024594:	960f      	str	r6, [sp, #60]	; 0x3c
 8024596:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8024598:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802459c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80245a0:	2aff      	cmp	r2, #255	; 0xff
 80245a2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80245a6:	fb08 f606 	mul.w	r6, r8, r6
 80245aa:	fb01 6607 	mla	r6, r1, r7, r6
 80245ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80245b0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80245b4:	fb00 6607 	mla	r6, r0, r7, r6
 80245b8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80245ba:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80245be:	fb0a 6607 	mla	r6, sl, r7, r6
 80245c2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80245c4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80245c8:	ea4f 2616 	mov.w	r6, r6, lsr #8
 80245cc:	fb08 f807 	mul.w	r8, r8, r7
 80245d0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80245d4:	fb01 8303 	mla	r3, r1, r3, r8
 80245d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80245da:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80245de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80245e0:	fb00 330c 	mla	r3, r0, ip, r3
 80245e4:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80245e8:	fb0a 3e0e 	mla	lr, sl, lr, r3
 80245ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80245f0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80245f4:	ea46 060e 	orr.w	r6, r6, lr
 80245f8:	b2f0      	uxtb	r0, r6
 80245fa:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80245fe:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8024602:	d038      	beq.n	8024676 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8024604:	43d2      	mvns	r2, r2
 8024606:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 802460a:	b2d2      	uxtb	r2, r2
 802460c:	4357      	muls	r7, r2
 802460e:	1c7b      	adds	r3, r7, #1
 8024610:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8024614:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024618:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 802461c:	4350      	muls	r0, r2
 802461e:	f805 3c03 	strb.w	r3, [r5, #-3]
 8024622:	1c43      	adds	r3, r0, #1
 8024624:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024628:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802462c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8024630:	4353      	muls	r3, r2
 8024632:	f805 1c02 	strb.w	r1, [r5, #-2]
 8024636:	1c5a      	adds	r2, r3, #1
 8024638:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802463c:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8024640:	f805 6c01 	strb.w	r6, [r5, #-1]
 8024644:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024646:	3503      	adds	r5, #3
 8024648:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802464a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802464e:	4413      	add	r3, r2
 8024650:	9329      	str	r3, [sp, #164]	; 0xa4
 8024652:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024654:	441c      	add	r4, r3
 8024656:	e510      	b.n	802407a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8024658:	b150      	cbz	r0, 8024670 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 802465a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802465c:	5871      	ldr	r1, [r6, r1]
 802465e:	26ff      	movs	r6, #255	; 0xff
 8024660:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8024664:	9109      	str	r1, [sp, #36]	; 0x24
 8024666:	46b6      	mov	lr, r6
 8024668:	e6f5      	b.n	8024456 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802466a:	26ff      	movs	r6, #255	; 0xff
 802466c:	46b1      	mov	r9, r6
 802466e:	e6f2      	b.n	8024456 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8024670:	26ff      	movs	r6, #255	; 0xff
 8024672:	46b1      	mov	r9, r6
 8024674:	e7f7      	b.n	8024666 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8024676:	f805 0c03 	strb.w	r0, [r5, #-3]
 802467a:	f805 1c02 	strb.w	r1, [r5, #-2]
 802467e:	e7df      	b.n	8024640 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8024680:	b017      	add	sp, #92	; 0x5c
 8024682:	ecbd 8b08 	vpop	{d8-d11}
 8024686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802468c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 802468c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024690:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8024694:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8024698:	2800      	cmp	r0, #0
 802469a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802469e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80246a2:	fb0c 0e03 	mla	lr, ip, r3, r0
 80246a6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80246aa:	db6b      	blt.n	8024784 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80246ac:	4580      	cmp	r8, r0
 80246ae:	dd69      	ble.n	8024784 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80246b0:	f1bc 0f00 	cmp.w	ip, #0
 80246b4:	db66      	blt.n	8024784 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80246b6:	45e1      	cmp	r9, ip
 80246b8:	dd64      	ble.n	8024784 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80246ba:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80246be:	f01e 0f01 	tst.w	lr, #1
 80246c2:	5d16      	ldrb	r6, [r2, r4]
 80246c4:	bf0c      	ite	eq
 80246c6:	f006 060f 	andeq.w	r6, r6, #15
 80246ca:	1136      	asrne	r6, r6, #4
 80246cc:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80246d0:	b2f6      	uxtb	r6, r6
 80246d2:	f110 0a01 	adds.w	sl, r0, #1
 80246d6:	d457      	bmi.n	8024788 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80246d8:	45d0      	cmp	r8, sl
 80246da:	dd55      	ble.n	8024788 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80246dc:	f1bc 0f00 	cmp.w	ip, #0
 80246e0:	db52      	blt.n	8024788 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80246e2:	45e1      	cmp	r9, ip
 80246e4:	dd50      	ble.n	8024788 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80246e6:	2f00      	cmp	r7, #0
 80246e8:	f000 80ac 	beq.w	8024844 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 80246ec:	f10e 0b01 	add.w	fp, lr, #1
 80246f0:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80246f4:	f01b 0f01 	tst.w	fp, #1
 80246f8:	5d14      	ldrb	r4, [r2, r4]
 80246fa:	bf0c      	ite	eq
 80246fc:	f004 040f 	andeq.w	r4, r4, #15
 8024700:	1124      	asrne	r4, r4, #4
 8024702:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024706:	b2e4      	uxtb	r4, r4
 8024708:	2d00      	cmp	r5, #0
 802470a:	f000 8096 	beq.w	802483a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 802470e:	2800      	cmp	r0, #0
 8024710:	f10c 0c01 	add.w	ip, ip, #1
 8024714:	db3c      	blt.n	8024790 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8024716:	4580      	cmp	r8, r0
 8024718:	dd3a      	ble.n	8024790 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802471a:	f1bc 0f00 	cmp.w	ip, #0
 802471e:	db37      	blt.n	8024790 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8024720:	45e1      	cmp	r9, ip
 8024722:	dd35      	ble.n	8024790 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8024724:	eb03 0b0e 	add.w	fp, r3, lr
 8024728:	ea4f 005b 	mov.w	r0, fp, lsr #1
 802472c:	f01b 0f01 	tst.w	fp, #1
 8024730:	5c10      	ldrb	r0, [r2, r0]
 8024732:	bf0c      	ite	eq
 8024734:	f000 000f 	andeq.w	r0, r0, #15
 8024738:	1100      	asrne	r0, r0, #4
 802473a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802473e:	b2c0      	uxtb	r0, r0
 8024740:	f1ba 0f00 	cmp.w	sl, #0
 8024744:	db26      	blt.n	8024794 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8024746:	45d0      	cmp	r8, sl
 8024748:	dd24      	ble.n	8024794 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802474a:	f1bc 0f00 	cmp.w	ip, #0
 802474e:	db21      	blt.n	8024794 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8024750:	45e1      	cmp	r9, ip
 8024752:	dd1f      	ble.n	8024794 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8024754:	b307      	cbz	r7, 8024798 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8024756:	3301      	adds	r3, #1
 8024758:	449e      	add	lr, r3
 802475a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802475e:	f01e 0f01 	tst.w	lr, #1
 8024762:	5cd3      	ldrb	r3, [r2, r3]
 8024764:	bf0c      	ite	eq
 8024766:	f003 030f 	andeq.w	r3, r3, #15
 802476a:	111b      	asrne	r3, r3, #4
 802476c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024770:	b2db      	uxtb	r3, r3
 8024772:	2f0f      	cmp	r7, #15
 8024774:	d911      	bls.n	802479a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8024776:	4b35      	ldr	r3, [pc, #212]	; (802484c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8024778:	f240 11a5 	movw	r1, #421	; 0x1a5
 802477c:	4a34      	ldr	r2, [pc, #208]	; (8024850 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 802477e:	4835      	ldr	r0, [pc, #212]	; (8024854 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8024780:	f002 fb64 	bl	8026e4c <__assert_func>
 8024784:	2600      	movs	r6, #0
 8024786:	e7a4      	b.n	80246d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8024788:	2400      	movs	r4, #0
 802478a:	e7bd      	b.n	8024708 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 802478c:	463c      	mov	r4, r7
 802478e:	e7be      	b.n	802470e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8024790:	2000      	movs	r0, #0
 8024792:	e7d5      	b.n	8024740 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8024794:	2300      	movs	r3, #0
 8024796:	e7ec      	b.n	8024772 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8024798:	463b      	mov	r3, r7
 802479a:	2d0f      	cmp	r5, #15
 802479c:	d8eb      	bhi.n	8024776 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802479e:	b2bf      	uxth	r7, r7
 80247a0:	b2ad      	uxth	r5, r5
 80247a2:	fb07 f205 	mul.w	r2, r7, r5
 80247a6:	013f      	lsls	r7, r7, #4
 80247a8:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80247ac:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80247b0:	1abf      	subs	r7, r7, r2
 80247b2:	b2ad      	uxth	r5, r5
 80247b4:	b2bf      	uxth	r7, r7
 80247b6:	ebac 0c05 	sub.w	ip, ip, r5
 80247ba:	437c      	muls	r4, r7
 80247bc:	fa1f fc8c 	uxth.w	ip, ip
 80247c0:	fb06 440c 	mla	r4, r6, ip, r4
 80247c4:	fb05 4400 	mla	r4, r5, r0, r4
 80247c8:	fb02 4203 	mla	r2, r2, r3, r4
 80247cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80247d0:	b38a      	cbz	r2, 8024836 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 80247d2:	4b21      	ldr	r3, [pc, #132]	; (8024858 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 80247d4:	681c      	ldr	r4, [r3, #0]
 80247d6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80247da:	b2e5      	uxtb	r5, r4
 80247dc:	4353      	muls	r3, r2
 80247de:	1c5a      	adds	r2, r3, #1
 80247e0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80247e4:	1212      	asrs	r2, r2, #8
 80247e6:	b290      	uxth	r0, r2
 80247e8:	43d2      	mvns	r2, r2
 80247ea:	fb15 f500 	smulbb	r5, r5, r0
 80247ee:	b2d3      	uxtb	r3, r2
 80247f0:	780a      	ldrb	r2, [r1, #0]
 80247f2:	fb02 5203 	mla	r2, r2, r3, r5
 80247f6:	b292      	uxth	r2, r2
 80247f8:	1c55      	adds	r5, r2, #1
 80247fa:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80247fe:	784d      	ldrb	r5, [r1, #1]
 8024800:	fb15 f503 	smulbb	r5, r5, r3
 8024804:	1212      	asrs	r2, r2, #8
 8024806:	700a      	strb	r2, [r1, #0]
 8024808:	f3c4 2207 	ubfx	r2, r4, #8, #8
 802480c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8024810:	fb02 5200 	mla	r2, r2, r0, r5
 8024814:	b292      	uxth	r2, r2
 8024816:	1c55      	adds	r5, r2, #1
 8024818:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802481c:	1212      	asrs	r2, r2, #8
 802481e:	704a      	strb	r2, [r1, #1]
 8024820:	788a      	ldrb	r2, [r1, #2]
 8024822:	fb12 f303 	smulbb	r3, r2, r3
 8024826:	fb04 3300 	mla	r3, r4, r0, r3
 802482a:	b29b      	uxth	r3, r3
 802482c:	1c5a      	adds	r2, r3, #1
 802482e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024832:	121b      	asrs	r3, r3, #8
 8024834:	708b      	strb	r3, [r1, #2]
 8024836:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802483a:	2f0f      	cmp	r7, #15
 802483c:	d89b      	bhi.n	8024776 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802483e:	462b      	mov	r3, r5
 8024840:	4628      	mov	r0, r5
 8024842:	e7ac      	b.n	802479e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8024844:	2d00      	cmp	r5, #0
 8024846:	d1a1      	bne.n	802478c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8024848:	462c      	mov	r4, r5
 802484a:	e7f8      	b.n	802483e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 802484c:	0802c1f1 	.word	0x0802c1f1
 8024850:	0802c6e6 	.word	0x0802c6e6
 8024854:	0802c2ba 	.word	0x0802c2ba
 8024858:	2000b3fc 	.word	0x2000b3fc

0802485c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802485c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024860:	ed2d 8b08 	vpush	{d8-d11}
 8024864:	b097      	sub	sp, #92	; 0x5c
 8024866:	eeb0 aa40 	vmov.f32	s20, s0
 802486a:	eef0 9a60 	vmov.f32	s19, s1
 802486e:	9308      	str	r3, [sp, #32]
 8024870:	eeb0 9a41 	vmov.f32	s18, s2
 8024874:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8024878:	eeb0 8a62 	vmov.f32	s16, s5
 802487c:	9214      	str	r2, [sp, #80]	; 0x50
 802487e:	eef0 8a43 	vmov.f32	s17, s6
 8024882:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024884:	eef0 ba44 	vmov.f32	s23, s8
 8024888:	9309      	str	r3, [sp, #36]	; 0x24
 802488a:	eeb0 ba64 	vmov.f32	s22, s9
 802488e:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8024892:	eef0 aa45 	vmov.f32	s21, s10
 8024896:	9015      	str	r0, [sp, #84]	; 0x54
 8024898:	910c      	str	r1, [sp, #48]	; 0x30
 802489a:	930e      	str	r3, [sp, #56]	; 0x38
 802489c:	6850      	ldr	r0, [r2, #4]
 802489e:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 80248a2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80248a6:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 80248aa:	fb00 1803 	mla	r8, r0, r3, r1
 80248ae:	6813      	ldr	r3, [r2, #0]
 80248b0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80248b4:	4498      	add	r8, r3
 80248b6:	f10b 0301 	add.w	r3, fp, #1
 80248ba:	f023 0301 	bic.w	r3, r3, #1
 80248be:	930f      	str	r3, [sp, #60]	; 0x3c
 80248c0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80248c2:	681f      	ldr	r7, [r3, #0]
 80248c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80248c6:	2b00      	cmp	r3, #0
 80248c8:	dc03      	bgt.n	80248d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80248ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80248cc:	2b00      	cmp	r3, #0
 80248ce:	f340 8238 	ble.w	8024d42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80248d2:	9b08      	ldr	r3, [sp, #32]
 80248d4:	2b00      	cmp	r3, #0
 80248d6:	f340 810c 	ble.w	8024af2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 80248da:	142a      	asrs	r2, r5, #16
 80248dc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80248e0:	d42c      	bmi.n	802493c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80248e2:	1c51      	adds	r1, r2, #1
 80248e4:	458b      	cmp	fp, r1
 80248e6:	dd2c      	ble.n	8024942 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80248e8:	2b00      	cmp	r3, #0
 80248ea:	db2a      	blt.n	8024942 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80248ec:	1c59      	adds	r1, r3, #1
 80248ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80248f0:	4288      	cmp	r0, r1
 80248f2:	dd26      	ble.n	8024942 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80248f4:	9b08      	ldr	r3, [sp, #32]
 80248f6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80248f8:	3b01      	subs	r3, #1
 80248fa:	fb02 5203 	mla	r2, r2, r3, r5
 80248fe:	1412      	asrs	r2, r2, #16
 8024900:	d429      	bmi.n	8024956 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8024902:	3201      	adds	r2, #1
 8024904:	4593      	cmp	fp, r2
 8024906:	dd26      	ble.n	8024956 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8024908:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802490a:	fb02 6303 	mla	r3, r2, r3, r6
 802490e:	141b      	asrs	r3, r3, #16
 8024910:	d421      	bmi.n	8024956 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8024912:	3301      	adds	r3, #1
 8024914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024916:	429a      	cmp	r2, r3
 8024918:	dd1d      	ble.n	8024956 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802491a:	f108 0e03 	add.w	lr, r8, #3
 802491e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8024922:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8024926:	f1b9 0f00 	cmp.w	r9, #0
 802492a:	f300 814f 	bgt.w	8024bcc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 802492e:	9b08      	ldr	r3, [sp, #32]
 8024930:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024934:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024938:	44a0      	add	r8, r4
 802493a:	e0dc      	b.n	8024af6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 802493c:	1c51      	adds	r1, r2, #1
 802493e:	f040 80ce 	bne.w	8024ade <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8024942:	4593      	cmp	fp, r2
 8024944:	f340 80cb 	ble.w	8024ade <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8024948:	1c5a      	adds	r2, r3, #1
 802494a:	f2c0 80c8 	blt.w	8024ade <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802494e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024950:	4293      	cmp	r3, r2
 8024952:	f280 80c4 	bge.w	8024ade <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8024956:	9b08      	ldr	r3, [sp, #32]
 8024958:	46c1      	mov	r9, r8
 802495a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 802495e:	930d      	str	r3, [sp, #52]	; 0x34
 8024960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024962:	2b00      	cmp	r3, #0
 8024964:	dde3      	ble.n	802492e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8024966:	1428      	asrs	r0, r5, #16
 8024968:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802496c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024970:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024974:	f100 8111 	bmi.w	8024b9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8024978:	f100 0c01 	add.w	ip, r0, #1
 802497c:	45e3      	cmp	fp, ip
 802497e:	f340 810e 	ble.w	8024b9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8024982:	2b00      	cmp	r3, #0
 8024984:	f2c0 810b 	blt.w	8024b9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8024988:	f103 0c01 	add.w	ip, r3, #1
 802498c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802498e:	4564      	cmp	r4, ip
 8024990:	f340 8105 	ble.w	8024b9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8024994:	fb03 030a 	mla	r3, r3, sl, r0
 8024998:	0858      	lsrs	r0, r3, #1
 802499a:	07dc      	lsls	r4, r3, #31
 802499c:	5c38      	ldrb	r0, [r7, r0]
 802499e:	bf54      	ite	pl
 80249a0:	f000 000f 	andpl.w	r0, r0, #15
 80249a4:	1100      	asrmi	r0, r0, #4
 80249a6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80249aa:	b2c0      	uxtb	r0, r0
 80249ac:	2a00      	cmp	r2, #0
 80249ae:	f000 80e1 	beq.w	8024b74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 80249b2:	f103 0e01 	add.w	lr, r3, #1
 80249b6:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80249ba:	f01e 0f01 	tst.w	lr, #1
 80249be:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80249c2:	bf0c      	ite	eq
 80249c4:	f00c 0c0f 	andeq.w	ip, ip, #15
 80249c8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80249cc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80249d0:	fa5f f48c 	uxtb.w	r4, ip
 80249d4:	9410      	str	r4, [sp, #64]	; 0x40
 80249d6:	b1f9      	cbz	r1, 8024a18 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80249d8:	4453      	add	r3, sl
 80249da:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80249de:	07dc      	lsls	r4, r3, #31
 80249e0:	f103 0301 	add.w	r3, r3, #1
 80249e4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80249e8:	bf54      	ite	pl
 80249ea:	f00c 0c0f 	andpl.w	ip, ip, #15
 80249ee:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80249f2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80249f6:	fa5f f48c 	uxtb.w	r4, ip
 80249fa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80249fe:	940a      	str	r4, [sp, #40]	; 0x28
 8024a00:	07dc      	lsls	r4, r3, #31
 8024a02:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024a06:	bf54      	ite	pl
 8024a08:	f00c 030f 	andpl.w	r3, ip, #15
 8024a0c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8024a10:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024a14:	b2db      	uxtb	r3, r3
 8024a16:	9311      	str	r3, [sp, #68]	; 0x44
 8024a18:	b292      	uxth	r2, r2
 8024a1a:	b289      	uxth	r1, r1
 8024a1c:	0113      	lsls	r3, r2, #4
 8024a1e:	fb02 fc01 	mul.w	ip, r2, r1
 8024a22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024a24:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024a28:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8024a2c:	eba3 030c 	sub.w	r3, r3, ip
 8024a30:	b289      	uxth	r1, r1
 8024a32:	b29b      	uxth	r3, r3
 8024a34:	ebae 0e01 	sub.w	lr, lr, r1
 8024a38:	4353      	muls	r3, r2
 8024a3a:	fa1f fe8e 	uxth.w	lr, lr
 8024a3e:	fb00 320e 	mla	r2, r0, lr, r3
 8024a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a44:	fb01 2203 	mla	r2, r1, r3, r2
 8024a48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024a4a:	fb0c 2203 	mla	r2, ip, r3, r2
 8024a4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024a52:	2a00      	cmp	r2, #0
 8024a54:	d039      	beq.n	8024aca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024a56:	4bbd      	ldr	r3, [pc, #756]	; (8024d4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8024a58:	6819      	ldr	r1, [r3, #0]
 8024a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024a5c:	fa5f fc81 	uxtb.w	ip, r1
 8024a60:	435a      	muls	r2, r3
 8024a62:	1c53      	adds	r3, r2, #1
 8024a64:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024a68:	1212      	asrs	r2, r2, #8
 8024a6a:	b290      	uxth	r0, r2
 8024a6c:	43d2      	mvns	r2, r2
 8024a6e:	fb1c fc00 	smulbb	ip, ip, r0
 8024a72:	b2d3      	uxtb	r3, r2
 8024a74:	f899 2000 	ldrb.w	r2, [r9]
 8024a78:	fb02 c203 	mla	r2, r2, r3, ip
 8024a7c:	b292      	uxth	r2, r2
 8024a7e:	f102 0c01 	add.w	ip, r2, #1
 8024a82:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024a86:	f899 c001 	ldrb.w	ip, [r9, #1]
 8024a8a:	fb1c fc03 	smulbb	ip, ip, r3
 8024a8e:	1212      	asrs	r2, r2, #8
 8024a90:	f889 2000 	strb.w	r2, [r9]
 8024a94:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8024a98:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8024a9c:	fb02 c200 	mla	r2, r2, r0, ip
 8024aa0:	b292      	uxth	r2, r2
 8024aa2:	f102 0c01 	add.w	ip, r2, #1
 8024aa6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024aaa:	1212      	asrs	r2, r2, #8
 8024aac:	f889 2001 	strb.w	r2, [r9, #1]
 8024ab0:	f899 2002 	ldrb.w	r2, [r9, #2]
 8024ab4:	fb12 f303 	smulbb	r3, r2, r3
 8024ab8:	fb01 3300 	mla	r3, r1, r0, r3
 8024abc:	b29b      	uxth	r3, r3
 8024abe:	1c5a      	adds	r2, r3, #1
 8024ac0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024ac4:	121b      	asrs	r3, r3, #8
 8024ac6:	f889 3002 	strb.w	r3, [r9, #2]
 8024aca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024acc:	f109 0903 	add.w	r9, r9, #3
 8024ad0:	441d      	add	r5, r3
 8024ad2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024ad4:	441e      	add	r6, r3
 8024ad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024ad8:	3b01      	subs	r3, #1
 8024ada:	930d      	str	r3, [sp, #52]	; 0x34
 8024adc:	e740      	b.n	8024960 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8024ade:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024ae0:	f108 0803 	add.w	r8, r8, #3
 8024ae4:	441d      	add	r5, r3
 8024ae6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024ae8:	441e      	add	r6, r3
 8024aea:	9b08      	ldr	r3, [sp, #32]
 8024aec:	3b01      	subs	r3, #1
 8024aee:	9308      	str	r3, [sp, #32]
 8024af0:	e6ef      	b.n	80248d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8024af2:	f47f aeff 	bne.w	80248f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8024af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024af8:	2b00      	cmp	r3, #0
 8024afa:	f340 8122 	ble.w	8024d42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8024afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024b02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024b04:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024b08:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024b0c:	eef0 6a48 	vmov.f32	s13, s16
 8024b10:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024b14:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024b18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b1c:	ee16 5a90 	vmov	r5, s13
 8024b20:	eef0 6a68 	vmov.f32	s13, s17
 8024b24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b28:	ee16 6a90 	vmov	r6, s13
 8024b2c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024b30:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024b34:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024b38:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024b3c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024b40:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024b44:	ee18 2a10 	vmov	r2, s16
 8024b48:	eeb0 8a47 	vmov.f32	s16, s14
 8024b4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b50:	ee18 2a90 	vmov	r2, s17
 8024b54:	932b      	str	r3, [sp, #172]	; 0xac
 8024b56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024b58:	eef0 8a67 	vmov.f32	s17, s15
 8024b5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b60:	932c      	str	r3, [sp, #176]	; 0xb0
 8024b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024b64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024b66:	3b01      	subs	r3, #1
 8024b68:	930c      	str	r3, [sp, #48]	; 0x30
 8024b6a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024b6c:	bf08      	it	eq
 8024b6e:	4613      	moveq	r3, r2
 8024b70:	9308      	str	r3, [sp, #32]
 8024b72:	e6a7      	b.n	80248c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8024b74:	2900      	cmp	r1, #0
 8024b76:	f43f af4f 	beq.w	8024a18 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8024b7a:	4453      	add	r3, sl
 8024b7c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024b80:	07db      	lsls	r3, r3, #31
 8024b82:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024b86:	bf54      	ite	pl
 8024b88:	f00c 030f 	andpl.w	r3, ip, #15
 8024b8c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8024b90:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024b94:	b2db      	uxtb	r3, r3
 8024b96:	930a      	str	r3, [sp, #40]	; 0x28
 8024b98:	e73e      	b.n	8024a18 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8024b9a:	1c44      	adds	r4, r0, #1
 8024b9c:	d195      	bne.n	8024aca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024b9e:	4583      	cmp	fp, r0
 8024ba0:	dd93      	ble.n	8024aca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024ba2:	1c5c      	adds	r4, r3, #1
 8024ba4:	db91      	blt.n	8024aca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024ba6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024ba8:	429c      	cmp	r4, r3
 8024baa:	dd8e      	ble.n	8024aca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024bac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024bae:	9002      	str	r0, [sp, #8]
 8024bb0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024bb2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8024bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024bb8:	463a      	mov	r2, r7
 8024bba:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024bbe:	e9cd b300 	strd	fp, r3, [sp]
 8024bc2:	4649      	mov	r1, r9
 8024bc4:	4653      	mov	r3, sl
 8024bc6:	f7ff fd61 	bl	802468c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8024bca:	e77e      	b.n	8024aca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024bcc:	142a      	asrs	r2, r5, #16
 8024bce:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024bd2:	1433      	asrs	r3, r6, #16
 8024bd4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024bd8:	fb0a 2303 	mla	r3, sl, r3, r2
 8024bdc:	085a      	lsrs	r2, r3, #1
 8024bde:	07dc      	lsls	r4, r3, #31
 8024be0:	5cba      	ldrb	r2, [r7, r2]
 8024be2:	bf54      	ite	pl
 8024be4:	f002 020f 	andpl.w	r2, r2, #15
 8024be8:	1112      	asrmi	r2, r2, #4
 8024bea:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024bee:	b2d2      	uxtb	r2, r2
 8024bf0:	2900      	cmp	r1, #0
 8024bf2:	f000 8093 	beq.w	8024d1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 8024bf6:	1c5c      	adds	r4, r3, #1
 8024bf8:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8024bfc:	07e4      	lsls	r4, r4, #31
 8024bfe:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024c02:	bf54      	ite	pl
 8024c04:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024c08:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024c0c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024c10:	fa5f f48c 	uxtb.w	r4, ip
 8024c14:	9412      	str	r4, [sp, #72]	; 0x48
 8024c16:	b300      	cbz	r0, 8024c5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8024c18:	4453      	add	r3, sl
 8024c1a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024c1e:	07dc      	lsls	r4, r3, #31
 8024c20:	f103 0301 	add.w	r3, r3, #1
 8024c24:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024c28:	bf54      	ite	pl
 8024c2a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024c2e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024c32:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024c36:	fa5f f48c 	uxtb.w	r4, ip
 8024c3a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024c3e:	940b      	str	r4, [sp, #44]	; 0x2c
 8024c40:	07dc      	lsls	r4, r3, #31
 8024c42:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024c46:	bf54      	ite	pl
 8024c48:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024c4c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024c50:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024c54:	fa5f f38c 	uxtb.w	r3, ip
 8024c58:	9313      	str	r3, [sp, #76]	; 0x4c
 8024c5a:	b289      	uxth	r1, r1
 8024c5c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024c5e:	b280      	uxth	r0, r0
 8024c60:	fb01 f300 	mul.w	r3, r1, r0
 8024c64:	0109      	lsls	r1, r1, #4
 8024c66:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8024c6a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8024c6e:	1ac9      	subs	r1, r1, r3
 8024c70:	b280      	uxth	r0, r0
 8024c72:	b289      	uxth	r1, r1
 8024c74:	ebac 0c00 	sub.w	ip, ip, r0
 8024c78:	4361      	muls	r1, r4
 8024c7a:	fa1f fc8c 	uxth.w	ip, ip
 8024c7e:	fb02 120c 	mla	r2, r2, ip, r1
 8024c82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024c84:	fb00 2001 	mla	r0, r0, r1, r2
 8024c88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8024c8a:	fb03 0302 	mla	r3, r3, r2, r0
 8024c8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024c92:	2b00      	cmp	r3, #0
 8024c94:	d039      	beq.n	8024d0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8024c96:	4a2d      	ldr	r2, [pc, #180]	; (8024d4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8024c98:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8024c9c:	6810      	ldr	r0, [r2, #0]
 8024c9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024ca0:	fa5f fc80 	uxtb.w	ip, r0
 8024ca4:	4353      	muls	r3, r2
 8024ca6:	1c5a      	adds	r2, r3, #1
 8024ca8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024cac:	121b      	asrs	r3, r3, #8
 8024cae:	b29a      	uxth	r2, r3
 8024cb0:	43db      	mvns	r3, r3
 8024cb2:	fb1c fc02 	smulbb	ip, ip, r2
 8024cb6:	b2db      	uxtb	r3, r3
 8024cb8:	fb01 c103 	mla	r1, r1, r3, ip
 8024cbc:	b289      	uxth	r1, r1
 8024cbe:	f101 0c01 	add.w	ip, r1, #1
 8024cc2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8024cc6:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8024cca:	fb1c fc03 	smulbb	ip, ip, r3
 8024cce:	1209      	asrs	r1, r1, #8
 8024cd0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8024cd4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8024cd8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8024cdc:	fb01 c102 	mla	r1, r1, r2, ip
 8024ce0:	b289      	uxth	r1, r1
 8024ce2:	f101 0c01 	add.w	ip, r1, #1
 8024ce6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8024cea:	1209      	asrs	r1, r1, #8
 8024cec:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8024cf0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8024cf4:	fb11 f303 	smulbb	r3, r1, r3
 8024cf8:	fb00 3002 	mla	r0, r0, r2, r3
 8024cfc:	b280      	uxth	r0, r0
 8024cfe:	1c42      	adds	r2, r0, #1
 8024d00:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024d04:	1200      	asrs	r0, r0, #8
 8024d06:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8024d0a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024d0c:	f10e 0e03 	add.w	lr, lr, #3
 8024d10:	f109 39ff 	add.w	r9, r9, #4294967295
 8024d14:	441d      	add	r5, r3
 8024d16:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024d18:	441e      	add	r6, r3
 8024d1a:	e604      	b.n	8024926 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8024d1c:	2800      	cmp	r0, #0
 8024d1e:	d09c      	beq.n	8024c5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8024d20:	4453      	add	r3, sl
 8024d22:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024d26:	07db      	lsls	r3, r3, #31
 8024d28:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024d2c:	bf54      	ite	pl
 8024d2e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024d32:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024d36:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024d3a:	fa5f f38c 	uxtb.w	r3, ip
 8024d3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8024d40:	e78b      	b.n	8024c5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8024d42:	b017      	add	sp, #92	; 0x5c
 8024d44:	ecbd 8b08 	vpop	{d8-d11}
 8024d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d4c:	2000b3fc 	.word	0x2000b3fc

08024d50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8024d50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d54:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8024d58:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8024d5c:	2800      	cmp	r0, #0
 8024d5e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8024d62:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8024d66:	fb0c 0e03 	mla	lr, ip, r3, r0
 8024d6a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8024d6e:	db6b      	blt.n	8024e48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024d70:	4580      	cmp	r8, r0
 8024d72:	dd69      	ble.n	8024e48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024d74:	f1bc 0f00 	cmp.w	ip, #0
 8024d78:	db66      	blt.n	8024e48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024d7a:	45e1      	cmp	r9, ip
 8024d7c:	dd64      	ble.n	8024e48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024d7e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024d82:	f01e 0f01 	tst.w	lr, #1
 8024d86:	5d16      	ldrb	r6, [r2, r4]
 8024d88:	bf0c      	ite	eq
 8024d8a:	f006 060f 	andeq.w	r6, r6, #15
 8024d8e:	1136      	asrne	r6, r6, #4
 8024d90:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024d94:	b2f6      	uxtb	r6, r6
 8024d96:	f110 0a01 	adds.w	sl, r0, #1
 8024d9a:	d457      	bmi.n	8024e4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024d9c:	45d0      	cmp	r8, sl
 8024d9e:	dd55      	ble.n	8024e4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024da0:	f1bc 0f00 	cmp.w	ip, #0
 8024da4:	db52      	blt.n	8024e4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024da6:	45e1      	cmp	r9, ip
 8024da8:	dd50      	ble.n	8024e4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024daa:	2f00      	cmp	r7, #0
 8024dac:	f000 80a5 	beq.w	8024efa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8024db0:	f10e 0b01 	add.w	fp, lr, #1
 8024db4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8024db8:	f01b 0f01 	tst.w	fp, #1
 8024dbc:	5d14      	ldrb	r4, [r2, r4]
 8024dbe:	bf0c      	ite	eq
 8024dc0:	f004 040f 	andeq.w	r4, r4, #15
 8024dc4:	1124      	asrne	r4, r4, #4
 8024dc6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024dca:	b2e4      	uxtb	r4, r4
 8024dcc:	2d00      	cmp	r5, #0
 8024dce:	f000 808f 	beq.w	8024ef0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8024dd2:	2800      	cmp	r0, #0
 8024dd4:	f10c 0c01 	add.w	ip, ip, #1
 8024dd8:	db3c      	blt.n	8024e54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024dda:	4580      	cmp	r8, r0
 8024ddc:	dd3a      	ble.n	8024e54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024dde:	f1bc 0f00 	cmp.w	ip, #0
 8024de2:	db37      	blt.n	8024e54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024de4:	45e1      	cmp	r9, ip
 8024de6:	dd35      	ble.n	8024e54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024de8:	eb03 0b0e 	add.w	fp, r3, lr
 8024dec:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8024df0:	f01b 0f01 	tst.w	fp, #1
 8024df4:	5c10      	ldrb	r0, [r2, r0]
 8024df6:	bf0c      	ite	eq
 8024df8:	f000 000f 	andeq.w	r0, r0, #15
 8024dfc:	1100      	asrne	r0, r0, #4
 8024dfe:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024e02:	b2c0      	uxtb	r0, r0
 8024e04:	f1ba 0f00 	cmp.w	sl, #0
 8024e08:	db26      	blt.n	8024e58 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024e0a:	45d0      	cmp	r8, sl
 8024e0c:	dd24      	ble.n	8024e58 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024e0e:	f1bc 0f00 	cmp.w	ip, #0
 8024e12:	db21      	blt.n	8024e58 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024e14:	45e1      	cmp	r9, ip
 8024e16:	dd1f      	ble.n	8024e58 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024e18:	b307      	cbz	r7, 8024e5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8024e1a:	3301      	adds	r3, #1
 8024e1c:	449e      	add	lr, r3
 8024e1e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024e22:	f01e 0f01 	tst.w	lr, #1
 8024e26:	5cd3      	ldrb	r3, [r2, r3]
 8024e28:	bf0c      	ite	eq
 8024e2a:	f003 030f 	andeq.w	r3, r3, #15
 8024e2e:	111b      	asrne	r3, r3, #4
 8024e30:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024e34:	b2db      	uxtb	r3, r3
 8024e36:	2f0f      	cmp	r7, #15
 8024e38:	d911      	bls.n	8024e5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8024e3a:	4b32      	ldr	r3, [pc, #200]	; (8024f04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8024e3c:	f240 11a5 	movw	r1, #421	; 0x1a5
 8024e40:	4a31      	ldr	r2, [pc, #196]	; (8024f08 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8024e42:	4832      	ldr	r0, [pc, #200]	; (8024f0c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8024e44:	f002 f802 	bl	8026e4c <__assert_func>
 8024e48:	2600      	movs	r6, #0
 8024e4a:	e7a4      	b.n	8024d96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8024e4c:	2400      	movs	r4, #0
 8024e4e:	e7bd      	b.n	8024dcc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8024e50:	463c      	mov	r4, r7
 8024e52:	e7be      	b.n	8024dd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8024e54:	2000      	movs	r0, #0
 8024e56:	e7d5      	b.n	8024e04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8024e58:	2300      	movs	r3, #0
 8024e5a:	e7ec      	b.n	8024e36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8024e5c:	463b      	mov	r3, r7
 8024e5e:	2d0f      	cmp	r5, #15
 8024e60:	d8eb      	bhi.n	8024e3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8024e62:	b2bf      	uxth	r7, r7
 8024e64:	b2ad      	uxth	r5, r5
 8024e66:	fb07 f205 	mul.w	r2, r7, r5
 8024e6a:	013f      	lsls	r7, r7, #4
 8024e6c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8024e70:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8024e74:	1abf      	subs	r7, r7, r2
 8024e76:	b2ad      	uxth	r5, r5
 8024e78:	b2bf      	uxth	r7, r7
 8024e7a:	ebac 0c05 	sub.w	ip, ip, r5
 8024e7e:	437c      	muls	r4, r7
 8024e80:	fa1f fc8c 	uxth.w	ip, ip
 8024e84:	fb06 440c 	mla	r4, r6, ip, r4
 8024e88:	fb05 4400 	mla	r4, r5, r0, r4
 8024e8c:	fb02 4303 	mla	r3, r2, r3, r4
 8024e90:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024e94:	b353      	cbz	r3, 8024eec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8024e96:	4a1e      	ldr	r2, [pc, #120]	; (8024f10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8024e98:	7808      	ldrb	r0, [r1, #0]
 8024e9a:	6814      	ldr	r4, [r2, #0]
 8024e9c:	b29a      	uxth	r2, r3
 8024e9e:	43db      	mvns	r3, r3
 8024ea0:	b2e5      	uxtb	r5, r4
 8024ea2:	b2db      	uxtb	r3, r3
 8024ea4:	fb15 f502 	smulbb	r5, r5, r2
 8024ea8:	fb00 5003 	mla	r0, r0, r3, r5
 8024eac:	b280      	uxth	r0, r0
 8024eae:	1c45      	adds	r5, r0, #1
 8024eb0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024eb4:	784d      	ldrb	r5, [r1, #1]
 8024eb6:	fb15 f503 	smulbb	r5, r5, r3
 8024eba:	1200      	asrs	r0, r0, #8
 8024ebc:	7008      	strb	r0, [r1, #0]
 8024ebe:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8024ec2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8024ec6:	fb00 5002 	mla	r0, r0, r2, r5
 8024eca:	b280      	uxth	r0, r0
 8024ecc:	1c45      	adds	r5, r0, #1
 8024ece:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024ed2:	1200      	asrs	r0, r0, #8
 8024ed4:	7048      	strb	r0, [r1, #1]
 8024ed6:	7888      	ldrb	r0, [r1, #2]
 8024ed8:	fb10 f303 	smulbb	r3, r0, r3
 8024edc:	fb04 3202 	mla	r2, r4, r2, r3
 8024ee0:	b292      	uxth	r2, r2
 8024ee2:	1c53      	adds	r3, r2, #1
 8024ee4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024ee8:	1212      	asrs	r2, r2, #8
 8024eea:	708a      	strb	r2, [r1, #2]
 8024eec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ef0:	2f0f      	cmp	r7, #15
 8024ef2:	d8a2      	bhi.n	8024e3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8024ef4:	462b      	mov	r3, r5
 8024ef6:	4628      	mov	r0, r5
 8024ef8:	e7b3      	b.n	8024e62 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8024efa:	2d00      	cmp	r5, #0
 8024efc:	d1a8      	bne.n	8024e50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8024efe:	462c      	mov	r4, r5
 8024f00:	e7f8      	b.n	8024ef4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8024f02:	bf00      	nop
 8024f04:	0802c1f1 	.word	0x0802c1f1
 8024f08:	0802c6e6 	.word	0x0802c6e6
 8024f0c:	0802c2ba 	.word	0x0802c2ba
 8024f10:	2000b3fc 	.word	0x2000b3fc

08024f14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f18:	ed2d 8b08 	vpush	{d8-d11}
 8024f1c:	b095      	sub	sp, #84	; 0x54
 8024f1e:	461c      	mov	r4, r3
 8024f20:	eeb0 aa40 	vmov.f32	s20, s0
 8024f24:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8024f28:	eef0 9a60 	vmov.f32	s19, s1
 8024f2c:	920e      	str	r2, [sp, #56]	; 0x38
 8024f2e:	eeb0 9a41 	vmov.f32	s18, s2
 8024f32:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024f34:	eeb0 8a62 	vmov.f32	s16, s5
 8024f38:	9307      	str	r3, [sp, #28]
 8024f3a:	eef0 8a43 	vmov.f32	s17, s6
 8024f3e:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8024f42:	eef0 ba44 	vmov.f32	s23, s8
 8024f46:	9013      	str	r0, [sp, #76]	; 0x4c
 8024f48:	eeb0 ba64 	vmov.f32	s22, s9
 8024f4c:	9109      	str	r1, [sp, #36]	; 0x24
 8024f4e:	eef0 aa45 	vmov.f32	s21, s10
 8024f52:	9308      	str	r3, [sp, #32]
 8024f54:	6850      	ldr	r0, [r2, #4]
 8024f56:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8024f5a:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8024f5e:	fb00 1803 	mla	r8, r0, r3, r1
 8024f62:	6813      	ldr	r3, [r2, #0]
 8024f64:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024f68:	4498      	add	r8, r3
 8024f6a:	9b07      	ldr	r3, [sp, #28]
 8024f6c:	3301      	adds	r3, #1
 8024f6e:	f023 0301 	bic.w	r3, r3, #1
 8024f72:	930b      	str	r3, [sp, #44]	; 0x2c
 8024f74:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024f76:	681f      	ldr	r7, [r3, #0]
 8024f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f7a:	2b00      	cmp	r3, #0
 8024f7c:	dc03      	bgt.n	8024f86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8024f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024f80:	2b00      	cmp	r3, #0
 8024f82:	f340 8238 	ble.w	80253f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8024f86:	2c00      	cmp	r4, #0
 8024f88:	f340 8109 	ble.w	802519e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8024f8c:	142a      	asrs	r2, r5, #16
 8024f8e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024f92:	d42b      	bmi.n	8024fec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8024f94:	1c51      	adds	r1, r2, #1
 8024f96:	9807      	ldr	r0, [sp, #28]
 8024f98:	4288      	cmp	r0, r1
 8024f9a:	dd2a      	ble.n	8024ff2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8024f9c:	2b00      	cmp	r3, #0
 8024f9e:	db28      	blt.n	8024ff2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8024fa0:	1c59      	adds	r1, r3, #1
 8024fa2:	9808      	ldr	r0, [sp, #32]
 8024fa4:	4288      	cmp	r0, r1
 8024fa6:	dd24      	ble.n	8024ff2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8024fa8:	1e63      	subs	r3, r4, #1
 8024faa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024fac:	fb02 5203 	mla	r2, r2, r3, r5
 8024fb0:	1412      	asrs	r2, r2, #16
 8024fb2:	d429      	bmi.n	8025008 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8024fb4:	3201      	adds	r2, #1
 8024fb6:	9907      	ldr	r1, [sp, #28]
 8024fb8:	4291      	cmp	r1, r2
 8024fba:	dd25      	ble.n	8025008 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8024fbc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024fbe:	fb02 6303 	mla	r3, r2, r3, r6
 8024fc2:	141b      	asrs	r3, r3, #16
 8024fc4:	d420      	bmi.n	8025008 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8024fc6:	3301      	adds	r3, #1
 8024fc8:	9a08      	ldr	r2, [sp, #32]
 8024fca:	429a      	cmp	r2, r3
 8024fcc:	dd1c      	ble.n	8025008 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8024fce:	f108 0e03 	add.w	lr, r8, #3
 8024fd2:	46a1      	mov	r9, r4
 8024fd4:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8024fd8:	f1b9 0f00 	cmp.w	r9, #0
 8024fdc:	f300 8155 	bgt.w	802528a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8024fe0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8024fe4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024fe8:	44a0      	add	r8, r4
 8024fea:	e0da      	b.n	80251a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8024fec:	1c50      	adds	r0, r2, #1
 8024fee:	f040 80ce 	bne.w	802518e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8024ff2:	9907      	ldr	r1, [sp, #28]
 8024ff4:	4291      	cmp	r1, r2
 8024ff6:	f340 80ca 	ble.w	802518e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8024ffa:	1c59      	adds	r1, r3, #1
 8024ffc:	f2c0 80c7 	blt.w	802518e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8025000:	9a08      	ldr	r2, [sp, #32]
 8025002:	4293      	cmp	r3, r2
 8025004:	f280 80c3 	bge.w	802518e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8025008:	46a3      	mov	fp, r4
 802500a:	46c1      	mov	r9, r8
 802500c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8025010:	f1bb 0f00 	cmp.w	fp, #0
 8025014:	dde4      	ble.n	8024fe0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8025016:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802501a:	1428      	asrs	r0, r5, #16
 802501c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025020:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025024:	920a      	str	r2, [sp, #40]	; 0x28
 8025026:	f100 8116 	bmi.w	8025256 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802502a:	f100 0c01 	add.w	ip, r0, #1
 802502e:	9a07      	ldr	r2, [sp, #28]
 8025030:	4562      	cmp	r2, ip
 8025032:	f340 8112 	ble.w	802525a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8025036:	2b00      	cmp	r3, #0
 8025038:	f2c0 810f 	blt.w	802525a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802503c:	f103 0c01 	add.w	ip, r3, #1
 8025040:	9a08      	ldr	r2, [sp, #32]
 8025042:	4562      	cmp	r2, ip
 8025044:	f340 8109 	ble.w	802525a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8025048:	fb03 030a 	mla	r3, r3, sl, r0
 802504c:	0858      	lsrs	r0, r3, #1
 802504e:	07da      	lsls	r2, r3, #31
 8025050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025052:	5c38      	ldrb	r0, [r7, r0]
 8025054:	bf54      	ite	pl
 8025056:	f000 000f 	andpl.w	r0, r0, #15
 802505a:	1100      	asrmi	r0, r0, #4
 802505c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025060:	b2c0      	uxtb	r0, r0
 8025062:	2a00      	cmp	r2, #0
 8025064:	f000 80dd 	beq.w	8025222 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8025068:	f103 0e01 	add.w	lr, r3, #1
 802506c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8025070:	f01e 0f01 	tst.w	lr, #1
 8025074:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025078:	bf0c      	ite	eq
 802507a:	f00c 0c0f 	andeq.w	ip, ip, #15
 802507e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8025082:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025086:	fa5f fc8c 	uxtb.w	ip, ip
 802508a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 802508e:	b301      	cbz	r1, 80250d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8025090:	4453      	add	r3, sl
 8025092:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025096:	07da      	lsls	r2, r3, #31
 8025098:	f103 0301 	add.w	r3, r3, #1
 802509c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80250a0:	bf54      	ite	pl
 80250a2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80250a6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80250aa:	07da      	lsls	r2, r3, #31
 80250ac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80250b0:	fa5f fc8c 	uxtb.w	ip, ip
 80250b4:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80250b8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80250bc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80250c0:	bf54      	ite	pl
 80250c2:	f00c 030f 	andpl.w	r3, ip, #15
 80250c6:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80250ca:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80250ce:	b2db      	uxtb	r3, r3
 80250d0:	9310      	str	r3, [sp, #64]	; 0x40
 80250d2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80250d6:	b289      	uxth	r1, r1
 80250d8:	fb02 f301 	mul.w	r3, r2, r1
 80250dc:	0112      	lsls	r2, r2, #4
 80250de:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80250e2:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80250e6:	1ad2      	subs	r2, r2, r3
 80250e8:	fa1f fe81 	uxth.w	lr, r1
 80250ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80250ee:	b292      	uxth	r2, r2
 80250f0:	ebac 0c0e 	sub.w	ip, ip, lr
 80250f4:	434a      	muls	r2, r1
 80250f6:	fa1f fc8c 	uxth.w	ip, ip
 80250fa:	fb00 200c 	mla	r0, r0, ip, r2
 80250fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025100:	fb0e 0002 	mla	r0, lr, r2, r0
 8025104:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025106:	fb03 0002 	mla	r0, r3, r2, r0
 802510a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802510e:	b3a8      	cbz	r0, 802517c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8025110:	4bbb      	ldr	r3, [pc, #748]	; (8025400 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8025112:	28ff      	cmp	r0, #255	; 0xff
 8025114:	681b      	ldr	r3, [r3, #0]
 8025116:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 802511a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 802511e:	b2db      	uxtb	r3, r3
 8025120:	f000 8092 	beq.w	8025248 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8025124:	b282      	uxth	r2, r0
 8025126:	43c0      	mvns	r0, r0
 8025128:	f899 e000 	ldrb.w	lr, [r9]
 802512c:	fb13 f302 	smulbb	r3, r3, r2
 8025130:	b2c0      	uxtb	r0, r0
 8025132:	fb11 f102 	smulbb	r1, r1, r2
 8025136:	fb0e 3300 	mla	r3, lr, r0, r3
 802513a:	fb1c f202 	smulbb	r2, ip, r2
 802513e:	b29b      	uxth	r3, r3
 8025140:	f103 0e01 	add.w	lr, r3, #1
 8025144:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8025148:	121b      	asrs	r3, r3, #8
 802514a:	f889 3000 	strb.w	r3, [r9]
 802514e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8025152:	fb03 1100 	mla	r1, r3, r0, r1
 8025156:	b289      	uxth	r1, r1
 8025158:	1c4b      	adds	r3, r1, #1
 802515a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802515e:	f899 3002 	ldrb.w	r3, [r9, #2]
 8025162:	fb03 2000 	mla	r0, r3, r0, r2
 8025166:	1209      	asrs	r1, r1, #8
 8025168:	b280      	uxth	r0, r0
 802516a:	f889 1001 	strb.w	r1, [r9, #1]
 802516e:	f100 0c01 	add.w	ip, r0, #1
 8025172:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8025176:	1200      	asrs	r0, r0, #8
 8025178:	f889 0002 	strb.w	r0, [r9, #2]
 802517c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802517e:	f109 0903 	add.w	r9, r9, #3
 8025182:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025186:	441d      	add	r5, r3
 8025188:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802518a:	441e      	add	r6, r3
 802518c:	e740      	b.n	8025010 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802518e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025190:	3c01      	subs	r4, #1
 8025192:	f108 0803 	add.w	r8, r8, #3
 8025196:	441d      	add	r5, r3
 8025198:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802519a:	441e      	add	r6, r3
 802519c:	e6f3      	b.n	8024f86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802519e:	f47f af03 	bne.w	8024fa8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80251a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80251a4:	2b00      	cmp	r3, #0
 80251a6:	f340 8126 	ble.w	80253f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80251aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80251ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80251b0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80251b4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80251b8:	eef0 6a48 	vmov.f32	s13, s16
 80251bc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80251c0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80251c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80251c8:	ee16 5a90 	vmov	r5, s13
 80251cc:	eef0 6a68 	vmov.f32	s13, s17
 80251d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80251d4:	ee16 6a90 	vmov	r6, s13
 80251d8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80251dc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80251e0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80251e4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80251e8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80251ec:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80251f0:	ee18 2a10 	vmov	r2, s16
 80251f4:	eeb0 8a47 	vmov.f32	s16, s14
 80251f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80251fc:	ee18 2a90 	vmov	r2, s17
 8025200:	9329      	str	r3, [sp, #164]	; 0xa4
 8025202:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025204:	eef0 8a67 	vmov.f32	s17, s15
 8025208:	fb92 f3f3 	sdiv	r3, r2, r3
 802520c:	932a      	str	r3, [sp, #168]	; 0xa8
 802520e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025210:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025212:	3b01      	subs	r3, #1
 8025214:	9309      	str	r3, [sp, #36]	; 0x24
 8025216:	bf08      	it	eq
 8025218:	4614      	moveq	r4, r2
 802521a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802521c:	bf18      	it	ne
 802521e:	461c      	movne	r4, r3
 8025220:	e6aa      	b.n	8024f78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8025222:	2900      	cmp	r1, #0
 8025224:	f43f af55 	beq.w	80250d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8025228:	4453      	add	r3, sl
 802522a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802522e:	07db      	lsls	r3, r3, #31
 8025230:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025234:	bf54      	ite	pl
 8025236:	f00c 030f 	andpl.w	r3, ip, #15
 802523a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802523e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025242:	b2db      	uxtb	r3, r3
 8025244:	930c      	str	r3, [sp, #48]	; 0x30
 8025246:	e744      	b.n	80250d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8025248:	f889 3000 	strb.w	r3, [r9]
 802524c:	f889 1001 	strb.w	r1, [r9, #1]
 8025250:	f889 c002 	strb.w	ip, [r9, #2]
 8025254:	e792      	b.n	802517c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8025256:	1c42      	adds	r2, r0, #1
 8025258:	d190      	bne.n	802517c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802525a:	9a07      	ldr	r2, [sp, #28]
 802525c:	4282      	cmp	r2, r0
 802525e:	dd8d      	ble.n	802517c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8025260:	1c5a      	adds	r2, r3, #1
 8025262:	db8b      	blt.n	802517c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8025264:	9a08      	ldr	r2, [sp, #32]
 8025266:	429a      	cmp	r2, r3
 8025268:	dd88      	ble.n	802517c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802526a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802526c:	9105      	str	r1, [sp, #20]
 802526e:	4649      	mov	r1, r9
 8025270:	9002      	str	r0, [sp, #8]
 8025272:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8025274:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8025278:	9b08      	ldr	r3, [sp, #32]
 802527a:	463a      	mov	r2, r7
 802527c:	9301      	str	r3, [sp, #4]
 802527e:	9b07      	ldr	r3, [sp, #28]
 8025280:	9300      	str	r3, [sp, #0]
 8025282:	4653      	mov	r3, sl
 8025284:	f7ff fd64 	bl	8024d50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8025288:	e778      	b.n	802517c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802528a:	142a      	asrs	r2, r5, #16
 802528c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025290:	1433      	asrs	r3, r6, #16
 8025292:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025296:	fb0a 2303 	mla	r3, sl, r3, r2
 802529a:	085a      	lsrs	r2, r3, #1
 802529c:	07d9      	lsls	r1, r3, #31
 802529e:	5cba      	ldrb	r2, [r7, r2]
 80252a0:	bf54      	ite	pl
 80252a2:	f002 020f 	andpl.w	r2, r2, #15
 80252a6:	1112      	asrmi	r2, r2, #4
 80252a8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80252ac:	b2d2      	uxtb	r2, r2
 80252ae:	2800      	cmp	r0, #0
 80252b0:	f000 808a 	beq.w	80253c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 80252b4:	f103 0b01 	add.w	fp, r3, #1
 80252b8:	ea4f 015b 	mov.w	r1, fp, lsr #1
 80252bc:	f01b 0f01 	tst.w	fp, #1
 80252c0:	5c79      	ldrb	r1, [r7, r1]
 80252c2:	bf0c      	ite	eq
 80252c4:	f001 010f 	andeq.w	r1, r1, #15
 80252c8:	1109      	asrne	r1, r1, #4
 80252ca:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80252ce:	b2c9      	uxtb	r1, r1
 80252d0:	9111      	str	r1, [sp, #68]	; 0x44
 80252d2:	f1bc 0f00 	cmp.w	ip, #0
 80252d6:	d019      	beq.n	802530c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80252d8:	4453      	add	r3, sl
 80252da:	0859      	lsrs	r1, r3, #1
 80252dc:	f013 0f01 	tst.w	r3, #1
 80252e0:	f103 0301 	add.w	r3, r3, #1
 80252e4:	5c79      	ldrb	r1, [r7, r1]
 80252e6:	bf0c      	ite	eq
 80252e8:	f001 010f 	andeq.w	r1, r1, #15
 80252ec:	1109      	asrne	r1, r1, #4
 80252ee:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80252f2:	b2c9      	uxtb	r1, r1
 80252f4:	910d      	str	r1, [sp, #52]	; 0x34
 80252f6:	0859      	lsrs	r1, r3, #1
 80252f8:	07db      	lsls	r3, r3, #31
 80252fa:	5c79      	ldrb	r1, [r7, r1]
 80252fc:	bf54      	ite	pl
 80252fe:	f001 010f 	andpl.w	r1, r1, #15
 8025302:	1109      	asrmi	r1, r1, #4
 8025304:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8025308:	b2c9      	uxtb	r1, r1
 802530a:	9112      	str	r1, [sp, #72]	; 0x48
 802530c:	b280      	uxth	r0, r0
 802530e:	fa1f fc8c 	uxth.w	ip, ip
 8025312:	fb00 f30c 	mul.w	r3, r0, ip
 8025316:	0100      	lsls	r0, r0, #4
 8025318:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802531c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8025320:	1ac0      	subs	r0, r0, r3
 8025322:	fa1f fc8c 	uxth.w	ip, ip
 8025326:	b280      	uxth	r0, r0
 8025328:	eba1 010c 	sub.w	r1, r1, ip
 802532c:	fa1f fb81 	uxth.w	fp, r1
 8025330:	9911      	ldr	r1, [sp, #68]	; 0x44
 8025332:	4348      	muls	r0, r1
 8025334:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025336:	fb02 020b 	mla	r2, r2, fp, r0
 802533a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802533e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025340:	fb03 c302 	mla	r3, r3, r2, ip
 8025344:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025348:	b3ab      	cbz	r3, 80253b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802534a:	4a2d      	ldr	r2, [pc, #180]	; (8025400 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 802534c:	2bff      	cmp	r3, #255	; 0xff
 802534e:	6811      	ldr	r1, [r2, #0]
 8025350:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8025354:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8025358:	b2c9      	uxtb	r1, r1
 802535a:	d045      	beq.n	80253e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 802535c:	b298      	uxth	r0, r3
 802535e:	43db      	mvns	r3, r3
 8025360:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8025364:	fb11 f100 	smulbb	r1, r1, r0
 8025368:	b2db      	uxtb	r3, r3
 802536a:	fb1c fc00 	smulbb	ip, ip, r0
 802536e:	fb02 1103 	mla	r1, r2, r3, r1
 8025372:	fb1b f000 	smulbb	r0, fp, r0
 8025376:	b289      	uxth	r1, r1
 8025378:	1c4a      	adds	r2, r1, #1
 802537a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802537e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8025382:	fb02 cc03 	mla	ip, r2, r3, ip
 8025386:	1209      	asrs	r1, r1, #8
 8025388:	fa1f fc8c 	uxth.w	ip, ip
 802538c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8025390:	f10c 0201 	add.w	r2, ip, #1
 8025394:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8025398:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 802539c:	fb02 0303 	mla	r3, r2, r3, r0
 80253a0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80253a4:	b29b      	uxth	r3, r3
 80253a6:	f80e cc02 	strb.w	ip, [lr, #-2]
 80253aa:	1c5a      	adds	r2, r3, #1
 80253ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80253b0:	121b      	asrs	r3, r3, #8
 80253b2:	f80e 3c01 	strb.w	r3, [lr, #-1]
 80253b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80253b8:	f10e 0e03 	add.w	lr, lr, #3
 80253bc:	f109 39ff 	add.w	r9, r9, #4294967295
 80253c0:	441d      	add	r5, r3
 80253c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80253c4:	441e      	add	r6, r3
 80253c6:	e607      	b.n	8024fd8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 80253c8:	f1bc 0f00 	cmp.w	ip, #0
 80253cc:	d09e      	beq.n	802530c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80253ce:	4453      	add	r3, sl
 80253d0:	0859      	lsrs	r1, r3, #1
 80253d2:	07db      	lsls	r3, r3, #31
 80253d4:	5c79      	ldrb	r1, [r7, r1]
 80253d6:	bf54      	ite	pl
 80253d8:	f001 010f 	andpl.w	r1, r1, #15
 80253dc:	1109      	asrmi	r1, r1, #4
 80253de:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80253e2:	b2c9      	uxtb	r1, r1
 80253e4:	910d      	str	r1, [sp, #52]	; 0x34
 80253e6:	e791      	b.n	802530c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80253e8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80253ec:	f80e cc02 	strb.w	ip, [lr, #-2]
 80253f0:	f80e bc01 	strb.w	fp, [lr, #-1]
 80253f4:	e7df      	b.n	80253b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80253f6:	b015      	add	sp, #84	; 0x54
 80253f8:	ecbd 8b08 	vpop	{d8-d11}
 80253fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025400:	2000b3fc 	.word	0x2000b3fc

08025404 <CRC_Lock>:
 8025404:	4a1d      	ldr	r2, [pc, #116]	; (802547c <CRC_Lock+0x78>)
 8025406:	b530      	push	{r4, r5, lr}
 8025408:	6813      	ldr	r3, [r2, #0]
 802540a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802540e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8025412:	f023 0301 	bic.w	r3, r3, #1
 8025416:	6013      	str	r3, [r2, #0]
 8025418:	4b19      	ldr	r3, [pc, #100]	; (8025480 <CRC_Lock+0x7c>)
 802541a:	681a      	ldr	r2, [r3, #0]
 802541c:	4022      	ands	r2, r4
 802541e:	42aa      	cmp	r2, r5
 8025420:	d005      	beq.n	802542e <CRC_Lock+0x2a>
 8025422:	681b      	ldr	r3, [r3, #0]
 8025424:	f24c 2270 	movw	r2, #49776	; 0xc270
 8025428:	4023      	ands	r3, r4
 802542a:	4293      	cmp	r3, r2
 802542c:	d11d      	bne.n	802546a <CRC_Lock+0x66>
 802542e:	4b15      	ldr	r3, [pc, #84]	; (8025484 <CRC_Lock+0x80>)
 8025430:	681b      	ldr	r3, [r3, #0]
 8025432:	b9d3      	cbnz	r3, 802546a <CRC_Lock+0x66>
 8025434:	4a14      	ldr	r2, [pc, #80]	; (8025488 <CRC_Lock+0x84>)
 8025436:	6813      	ldr	r3, [r2, #0]
 8025438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802543c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8025440:	d006      	beq.n	8025450 <CRC_Lock+0x4c>
 8025442:	6813      	ldr	r3, [r2, #0]
 8025444:	f240 4283 	movw	r2, #1155	; 0x483
 8025448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802544c:	4293      	cmp	r3, r2
 802544e:	d10c      	bne.n	802546a <CRC_Lock+0x66>
 8025450:	4b0e      	ldr	r3, [pc, #56]	; (802548c <CRC_Lock+0x88>)
 8025452:	2201      	movs	r2, #1
 8025454:	601a      	str	r2, [r3, #0]
 8025456:	681a      	ldr	r2, [r3, #0]
 8025458:	2a00      	cmp	r2, #0
 802545a:	d1fc      	bne.n	8025456 <CRC_Lock+0x52>
 802545c:	4b0c      	ldr	r3, [pc, #48]	; (8025490 <CRC_Lock+0x8c>)
 802545e:	6018      	str	r0, [r3, #0]
 8025460:	6818      	ldr	r0, [r3, #0]
 8025462:	1a43      	subs	r3, r0, r1
 8025464:	4258      	negs	r0, r3
 8025466:	4158      	adcs	r0, r3
 8025468:	bd30      	pop	{r4, r5, pc}
 802546a:	4b0a      	ldr	r3, [pc, #40]	; (8025494 <CRC_Lock+0x90>)
 802546c:	2201      	movs	r2, #1
 802546e:	601a      	str	r2, [r3, #0]
 8025470:	681a      	ldr	r2, [r3, #0]
 8025472:	2a00      	cmp	r2, #0
 8025474:	d1fc      	bne.n	8025470 <CRC_Lock+0x6c>
 8025476:	4b08      	ldr	r3, [pc, #32]	; (8025498 <CRC_Lock+0x94>)
 8025478:	e7f1      	b.n	802545e <CRC_Lock+0x5a>
 802547a:	bf00      	nop
 802547c:	e0002000 	.word	0xe0002000
 8025480:	e000ed00 	.word	0xe000ed00
 8025484:	e0042000 	.word	0xe0042000
 8025488:	5c001000 	.word	0x5c001000
 802548c:	58024c08 	.word	0x58024c08
 8025490:	58024c00 	.word	0x58024c00
 8025494:	40023008 	.word	0x40023008
 8025498:	40023000 	.word	0x40023000

0802549c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802549c:	6101      	str	r1, [r0, #16]
 802549e:	4770      	bx	lr

080254a0 <_ZN8touchgfx8Gestures4tickEv>:
 80254a0:	7b83      	ldrb	r3, [r0, #14]
 80254a2:	b14b      	cbz	r3, 80254b8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80254a4:	8903      	ldrh	r3, [r0, #8]
 80254a6:	3301      	adds	r3, #1
 80254a8:	b29b      	uxth	r3, r3
 80254aa:	2b07      	cmp	r3, #7
 80254ac:	8103      	strh	r3, [r0, #8]
 80254ae:	bf81      	itttt	hi
 80254b0:	2300      	movhi	r3, #0
 80254b2:	8143      	strhhi	r3, [r0, #10]
 80254b4:	8183      	strhhi	r3, [r0, #12]
 80254b6:	7383      	strbhi	r3, [r0, #14]
 80254b8:	4770      	bx	lr
	...

080254bc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80254bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80254c0:	4604      	mov	r4, r0
 80254c2:	4698      	mov	r8, r3
 80254c4:	8880      	ldrh	r0, [r0, #4]
 80254c6:	4617      	mov	r7, r2
 80254c8:	4b1d      	ldr	r3, [pc, #116]	; (8025540 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80254ca:	460e      	mov	r6, r1
 80254cc:	f8ad 0006 	strh.w	r0, [sp, #6]
 80254d0:	eba8 0000 	sub.w	r0, r8, r0
 80254d4:	9300      	str	r3, [sp, #0]
 80254d6:	2300      	movs	r3, #0
 80254d8:	b280      	uxth	r0, r0
 80254da:	8aa2      	ldrh	r2, [r4, #20]
 80254dc:	f88d 3004 	strb.w	r3, [sp, #4]
 80254e0:	b203      	sxth	r3, r0
 80254e2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80254e6:	88e1      	ldrh	r1, [r4, #6]
 80254e8:	2b00      	cmp	r3, #0
 80254ea:	f8ad 800a 	strh.w	r8, [sp, #10]
 80254ee:	f8ad 1008 	strh.w	r1, [sp, #8]
 80254f2:	bfb8      	it	lt
 80254f4:	4240      	neglt	r0, r0
 80254f6:	f8ad 500c 	strh.w	r5, [sp, #12]
 80254fa:	bfb8      	it	lt
 80254fc:	b203      	sxthlt	r3, r0
 80254fe:	4293      	cmp	r3, r2
 8025500:	dc08      	bgt.n	8025514 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8025502:	1a69      	subs	r1, r5, r1
 8025504:	b289      	uxth	r1, r1
 8025506:	b20b      	sxth	r3, r1
 8025508:	2b00      	cmp	r3, #0
 802550a:	bfbc      	itt	lt
 802550c:	4249      	neglt	r1, r1
 802550e:	b20b      	sxthlt	r3, r1
 8025510:	429a      	cmp	r2, r3
 8025512:	da13      	bge.n	802553c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8025514:	6920      	ldr	r0, [r4, #16]
 8025516:	4669      	mov	r1, sp
 8025518:	eba8 0606 	sub.w	r6, r8, r6
 802551c:	1bef      	subs	r7, r5, r7
 802551e:	6803      	ldr	r3, [r0, #0]
 8025520:	685b      	ldr	r3, [r3, #4]
 8025522:	4798      	blx	r3
 8025524:	2300      	movs	r3, #0
 8025526:	2001      	movs	r0, #1
 8025528:	8166      	strh	r6, [r4, #10]
 802552a:	8123      	strh	r3, [r4, #8]
 802552c:	81a7      	strh	r7, [r4, #12]
 802552e:	f8a4 8004 	strh.w	r8, [r4, #4]
 8025532:	80e5      	strh	r5, [r4, #6]
 8025534:	73a0      	strb	r0, [r4, #14]
 8025536:	b004      	add	sp, #16
 8025538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802553c:	2000      	movs	r0, #0
 802553e:	e7fa      	b.n	8025536 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8025540:	0802b5cc 	.word	0x0802b5cc

08025544 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8025544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025546:	461e      	mov	r6, r3
 8025548:	1e4b      	subs	r3, r1, #1
 802554a:	b085      	sub	sp, #20
 802554c:	4604      	mov	r4, r0
 802554e:	2b01      	cmp	r3, #1
 8025550:	460d      	mov	r5, r1
 8025552:	4617      	mov	r7, r2
 8025554:	d84b      	bhi.n	80255ee <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8025556:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802555a:	1cd3      	adds	r3, r2, #3
 802555c:	b29b      	uxth	r3, r3
 802555e:	2b06      	cmp	r3, #6
 8025560:	d916      	bls.n	8025590 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8025562:	f8df c098 	ldr.w	ip, [pc, #152]	; 80255fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8025566:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802556a:	f8cd c004 	str.w	ip, [sp, #4]
 802556e:	f04f 0c00 	mov.w	ip, #0
 8025572:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025576:	6900      	ldr	r0, [r0, #16]
 8025578:	f8ad 100c 	strh.w	r1, [sp, #12]
 802557c:	a901      	add	r1, sp, #4
 802557e:	f88d c008 	strb.w	ip, [sp, #8]
 8025582:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025586:	f8ad 300e 	strh.w	r3, [sp, #14]
 802558a:	6803      	ldr	r3, [r0, #0]
 802558c:	689b      	ldr	r3, [r3, #8]
 802558e:	4798      	blx	r3
 8025590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025594:	1cd3      	adds	r3, r2, #3
 8025596:	b29b      	uxth	r3, r3
 8025598:	2b06      	cmp	r3, #6
 802559a:	d916      	bls.n	80255ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802559c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80255fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 80255a0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80255a4:	f8cd c004 	str.w	ip, [sp, #4]
 80255a8:	f04f 0c01 	mov.w	ip, #1
 80255ac:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80255b0:	6920      	ldr	r0, [r4, #16]
 80255b2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80255b6:	a901      	add	r1, sp, #4
 80255b8:	f88d c008 	strb.w	ip, [sp, #8]
 80255bc:	f8ad 200a 	strh.w	r2, [sp, #10]
 80255c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80255c4:	6803      	ldr	r3, [r0, #0]
 80255c6:	689b      	ldr	r3, [r3, #8]
 80255c8:	4798      	blx	r3
 80255ca:	4b0b      	ldr	r3, [pc, #44]	; (80255f8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 80255cc:	a901      	add	r1, sp, #4
 80255ce:	6920      	ldr	r0, [r4, #16]
 80255d0:	9301      	str	r3, [sp, #4]
 80255d2:	2300      	movs	r3, #0
 80255d4:	f88d 5008 	strb.w	r5, [sp, #8]
 80255d8:	f8ad 700a 	strh.w	r7, [sp, #10]
 80255dc:	f8ad 600c 	strh.w	r6, [sp, #12]
 80255e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80255e4:	6803      	ldr	r3, [r0, #0]
 80255e6:	681b      	ldr	r3, [r3, #0]
 80255e8:	4798      	blx	r3
 80255ea:	b005      	add	sp, #20
 80255ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80255ee:	2900      	cmp	r1, #0
 80255f0:	d1eb      	bne.n	80255ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80255f2:	80a2      	strh	r2, [r4, #4]
 80255f4:	80c6      	strh	r6, [r0, #6]
 80255f6:	e7e8      	b.n	80255ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80255f8:	0802b5b8 	.word	0x0802b5b8
 80255fc:	0802b5e0 	.word	0x0802b5e0

08025600 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>:
 8025600:	10c9      	asrs	r1, r1, #3
 8025602:	2900      	cmp	r1, #0
 8025604:	bfb8      	it	lt
 8025606:	4249      	neglt	r1, r1
 8025608:	2801      	cmp	r0, #1
 802560a:	d108      	bne.n	802561e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 802560c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8025610:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8025614:	4601      	mov	r1, r0
 8025616:	dd02      	ble.n	802561e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15+0x1e>
 8025618:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802561c:	4770      	bx	lr
 802561e:	29ff      	cmp	r1, #255	; 0xff
 8025620:	bfa8      	it	ge
 8025622:	21ff      	movge	r1, #255	; 0xff
 8025624:	4608      	mov	r0, r1
 8025626:	4770      	bx	lr

08025628 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8025628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802562c:	688c      	ldr	r4, [r1, #8]
 802562e:	b087      	sub	sp, #28
 8025630:	4607      	mov	r7, r0
 8025632:	2c00      	cmp	r4, #0
 8025634:	db2b      	blt.n	802568e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8025636:	6803      	ldr	r3, [r0, #0]
 8025638:	691a      	ldr	r2, [r3, #16]
 802563a:	42a2      	cmp	r2, r4
 802563c:	dd27      	ble.n	802568e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802563e:	685a      	ldr	r2, [r3, #4]
 8025640:	695e      	ldr	r6, [r3, #20]
 8025642:	68cd      	ldr	r5, [r1, #12]
 8025644:	fb06 2604 	mla	r6, r6, r4, r2
 8025648:	f8d1 901c 	ldr.w	r9, [r1, #28]
 802564c:	698a      	ldr	r2, [r1, #24]
 802564e:	f893 a008 	ldrb.w	sl, [r3, #8]
 8025652:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8025656:	9205      	str	r2, [sp, #20]
 8025658:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 802565c:	9b05      	ldr	r3, [sp, #20]
 802565e:	6839      	ldr	r1, [r7, #0]
 8025660:	eb03 0c02 	add.w	ip, r3, r2
 8025664:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8025668:	68c9      	ldr	r1, [r1, #12]
 802566a:	1898      	adds	r0, r3, r2
 802566c:	4288      	cmp	r0, r1
 802566e:	db02      	blt.n	8025676 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8025670:	1a8b      	subs	r3, r1, r2
 8025672:	2b00      	cmp	r3, #0
 8025674:	dd09      	ble.n	802568a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8025676:	6878      	ldr	r0, [r7, #4]
 8025678:	6801      	ldr	r1, [r0, #0]
 802567a:	9400      	str	r4, [sp, #0]
 802567c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8025680:	4653      	mov	r3, sl
 8025682:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8025686:	4631      	mov	r1, r6
 8025688:	47d8      	blx	fp
 802568a:	3d01      	subs	r5, #1
 802568c:	d1e4      	bne.n	8025658 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 802568e:	b007      	add	sp, #28
 8025690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025694 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8025694:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8025698:	b90b      	cbnz	r3, 802569e <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802569a:	f001 b970 	b.w	802697e <_ZN8touchgfx7Outline6lineToEii>
 802569e:	4770      	bx	lr

080256a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 80256a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80256a4:	4604      	mov	r4, r0
 80256a6:	2600      	movs	r6, #0
 80256a8:	4b8e      	ldr	r3, [pc, #568]	; (80258e4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 80256aa:	f100 0518 	add.w	r5, r0, #24
 80256ae:	f104 0730 	add.w	r7, r4, #48	; 0x30
 80256b2:	b086      	sub	sp, #24
 80256b4:	4690      	mov	r8, r2
 80256b6:	e9c0 3100 	strd	r3, r1, [r0]
 80256ba:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80256be:	e9c0 6604 	strd	r6, r6, [r0, #16]
 80256c2:	4628      	mov	r0, r5
 80256c4:	f001 fb7a 	bl	8026dbc <_ZN8touchgfx15RenderingBufferC1Ev>
 80256c8:	4638      	mov	r0, r7
 80256ca:	f000 fb41 	bl	8025d50 <_ZN8touchgfx7OutlineC1Ev>
 80256ce:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80256d2:	f001 fb1f 	bl	8026d14 <_ZN8touchgfx8ScanlineC1Ev>
 80256d6:	2301      	movs	r3, #1
 80256d8:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 80256dc:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 80256e0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80256e4:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 80256e8:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 80256ec:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 80256f0:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 80256f4:	f7f4 f820 	bl	8019738 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 80256f8:	b928      	cbnz	r0, 8025706 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 80256fa:	4b7b      	ldr	r3, [pc, #492]	; (80258e8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 80256fc:	2118      	movs	r1, #24
 80256fe:	4a7b      	ldr	r2, [pc, #492]	; (80258ec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8025700:	487b      	ldr	r0, [pc, #492]	; (80258f0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8025702:	f001 fba3 	bl	8026e4c <__assert_func>
 8025706:	f9b8 2000 	ldrsh.w	r2, [r8]
 802570a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802570e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8025712:	4410      	add	r0, r2
 8025714:	9602      	str	r6, [sp, #8]
 8025716:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802571a:	b280      	uxth	r0, r0
 802571c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8025720:	fa0f fa80 	sxth.w	sl, r0
 8025724:	f1ba 0f00 	cmp.w	sl, #0
 8025728:	dd70      	ble.n	802580c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802572a:	4591      	cmp	r9, r2
 802572c:	dd6e      	ble.n	802580c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802572e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8025732:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8025736:	440b      	add	r3, r1
 8025738:	b29b      	uxth	r3, r3
 802573a:	b21e      	sxth	r6, r3
 802573c:	2e00      	cmp	r6, #0
 802573e:	dd65      	ble.n	802580c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8025740:	458e      	cmp	lr, r1
 8025742:	dd63      	ble.n	802580c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8025744:	45d1      	cmp	r9, sl
 8025746:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802574a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802574e:	bfb8      	it	lt
 8025750:	fa1f f089 	uxthlt.w	r0, r9
 8025754:	45b6      	cmp	lr, r6
 8025756:	f8ad 2008 	strh.w	r2, [sp, #8]
 802575a:	bfb8      	it	lt
 802575c:	fa1f f38e 	uxthlt.w	r3, lr
 8025760:	1a80      	subs	r0, r0, r2
 8025762:	f8ad 100a 	strh.w	r1, [sp, #10]
 8025766:	1a5b      	subs	r3, r3, r1
 8025768:	f8ad 000c 	strh.w	r0, [sp, #12]
 802576c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025770:	f10d 0808 	add.w	r8, sp, #8
 8025774:	ae04      	add	r6, sp, #16
 8025776:	e898 0003 	ldmia.w	r8, {r0, r1}
 802577a:	e886 0003 	stmia.w	r6, {r0, r1}
 802577e:	f8dc 3000 	ldr.w	r3, [ip]
 8025782:	4660      	mov	r0, ip
 8025784:	4631      	mov	r1, r6
 8025786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025788:	4798      	blx	r3
 802578a:	6861      	ldr	r1, [r4, #4]
 802578c:	4640      	mov	r0, r8
 802578e:	3104      	adds	r1, #4
 8025790:	f7f5 f9d6 	bl	801ab40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025794:	4630      	mov	r0, r6
 8025796:	f7f5 f9eb 	bl	801ab70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802579a:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 802579e:	f7f3 ff5b 	bl	8019658 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 80257a2:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 80257a6:	4638      	mov	r0, r7
 80257a8:	f000 faae 	bl	8025d08 <_ZN8touchgfx7Outline5resetEv>
 80257ac:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80257b0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80257b4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 80257b8:	015b      	lsls	r3, r3, #5
 80257ba:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 80257be:	0152      	lsls	r2, r2, #5
 80257c0:	60e3      	str	r3, [r4, #12]
 80257c2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80257c6:	60a2      	str	r2, [r4, #8]
 80257c8:	015b      	lsls	r3, r3, #5
 80257ca:	6123      	str	r3, [r4, #16]
 80257cc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80257d0:	015b      	lsls	r3, r3, #5
 80257d2:	6163      	str	r3, [r4, #20]
 80257d4:	4b47      	ldr	r3, [pc, #284]	; (80258f4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 80257d6:	6818      	ldr	r0, [r3, #0]
 80257d8:	6803      	ldr	r3, [r0, #0]
 80257da:	6a1b      	ldr	r3, [r3, #32]
 80257dc:	4798      	blx	r3
 80257de:	4606      	mov	r6, r0
 80257e0:	f7e9 ffe6 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 80257e4:	6803      	ldr	r3, [r0, #0]
 80257e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80257e8:	4798      	blx	r3
 80257ea:	4607      	mov	r7, r0
 80257ec:	f7e9 ffe0 	bl	800f7b0 <_ZN8touchgfx3HAL3lcdEv>
 80257f0:	6803      	ldr	r3, [r0, #0]
 80257f2:	6a1b      	ldr	r3, [r3, #32]
 80257f4:	4798      	blx	r3
 80257f6:	280c      	cmp	r0, #12
 80257f8:	d854      	bhi.n	80258a4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 80257fa:	e8df f000 	tbb	[pc, r0]
 80257fe:	554b      	.short	0x554b
 8025800:	2b6e0a66 	.word	0x2b6e0a66
 8025804:	5f5f5f3b 	.word	0x5f5f5f3b
 8025808:	5f5f      	.short	0x5f5f
 802580a:	6e          	.byte	0x6e
 802580b:	00          	.byte	0x00
 802580c:	2300      	movs	r3, #0
 802580e:	9303      	str	r3, [sp, #12]
 8025810:	e7ae      	b.n	8025770 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8025812:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025816:	2108      	movs	r1, #8
 8025818:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802581c:	fb92 f1f1 	sdiv	r1, r2, r1
 8025820:	fb07 1303 	mla	r3, r7, r3, r1
 8025824:	441e      	add	r6, r3
 8025826:	4253      	negs	r3, r2
 8025828:	f002 0207 	and.w	r2, r2, #7
 802582c:	f003 0307 	and.w	r3, r3, #7
 8025830:	bf58      	it	pl
 8025832:	425a      	negpl	r2, r3
 8025834:	b2d2      	uxtb	r2, r2
 8025836:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802583a:	4628      	mov	r0, r5
 802583c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8025840:	6721      	str	r1, [r4, #112]	; 0x70
 8025842:	e9cd 1700 	strd	r1, r7, [sp]
 8025846:	4631      	mov	r1, r6
 8025848:	f001 fac4 	bl	8026dd4 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 802584c:	4620      	mov	r0, r4
 802584e:	b006      	add	sp, #24
 8025850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025854:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025858:	2104      	movs	r1, #4
 802585a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802585e:	fb92 f1f1 	sdiv	r1, r2, r1
 8025862:	fb07 1303 	mla	r3, r7, r3, r1
 8025866:	441e      	add	r6, r3
 8025868:	4253      	negs	r3, r2
 802586a:	f002 0203 	and.w	r2, r2, #3
 802586e:	f003 0303 	and.w	r3, r3, #3
 8025872:	e7dd      	b.n	8025830 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8025874:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8025878:	2102      	movs	r1, #2
 802587a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802587e:	2a00      	cmp	r2, #0
 8025880:	fb92 f1f1 	sdiv	r1, r2, r1
 8025884:	f002 0201 	and.w	r2, r2, #1
 8025888:	fb07 1303 	mla	r3, r7, r3, r1
 802588c:	bfb8      	it	lt
 802588e:	4252      	neglt	r2, r2
 8025890:	441e      	add	r6, r3
 8025892:	e7cf      	b.n	8025834 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8025894:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8025898:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802589c:	437b      	muls	r3, r7
 802589e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80258a2:	441e      	add	r6, r3
 80258a4:	2200      	movs	r2, #0
 80258a6:	e7c6      	b.n	8025836 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 80258a8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80258ac:	2103      	movs	r1, #3
 80258ae:	fb07 f203 	mul.w	r2, r7, r3
 80258b2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80258b6:	fb13 2301 	smlabb	r3, r3, r1, r2
 80258ba:	e7f2      	b.n	80258a2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80258bc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80258c0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80258c4:	fb07 2303 	mla	r3, r7, r3, r2
 80258c8:	e7eb      	b.n	80258a2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80258ca:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80258ce:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80258d2:	437b      	muls	r3, r7
 80258d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80258d8:	e7e3      	b.n	80258a2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80258da:	4b07      	ldr	r3, [pc, #28]	; (80258f8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 80258dc:	2156      	movs	r1, #86	; 0x56
 80258de:	4a03      	ldr	r2, [pc, #12]	; (80258ec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80258e0:	e70e      	b.n	8025700 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 80258e2:	bf00      	nop
 80258e4:	0802ca0c 	.word	0x0802ca0c
 80258e8:	0802c956 	.word	0x0802c956
 80258ec:	0802ca14 	.word	0x0802ca14
 80258f0:	0802c9b2 	.word	0x0802c9b2
 80258f4:	2000b3d4 	.word	0x2000b3d4
 80258f8:	0802c9e6 	.word	0x0802c9e6

080258fc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 80258fc:	6812      	ldr	r2, [r2, #0]
 80258fe:	2a00      	cmp	r2, #0
 8025900:	db0b      	blt.n	802591a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8025902:	9800      	ldr	r0, [sp, #0]
 8025904:	6800      	ldr	r0, [r0, #0]
 8025906:	4290      	cmp	r0, r2
 8025908:	bfd4      	ite	le
 802590a:	2002      	movle	r0, #2
 802590c:	2000      	movgt	r0, #0
 802590e:	680a      	ldr	r2, [r1, #0]
 8025910:	2a00      	cmp	r2, #0
 8025912:	da04      	bge.n	802591e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8025914:	f040 0004 	orr.w	r0, r0, #4
 8025918:	4770      	bx	lr
 802591a:	2001      	movs	r0, #1
 802591c:	e7f7      	b.n	802590e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802591e:	681b      	ldr	r3, [r3, #0]
 8025920:	4293      	cmp	r3, r2
 8025922:	bfd8      	it	le
 8025924:	f040 0008 	orrle.w	r0, r0, #8
 8025928:	4770      	bx	lr
	...

0802592c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802592c:	4b07      	ldr	r3, [pc, #28]	; (802594c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802592e:	b510      	push	{r4, lr}
 8025930:	781b      	ldrb	r3, [r3, #0]
 8025932:	2b01      	cmp	r3, #1
 8025934:	d108      	bne.n	8025948 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8025936:	6843      	ldr	r3, [r0, #4]
 8025938:	6814      	ldr	r4, [r2, #0]
 802593a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802593e:	680b      	ldr	r3, [r1, #0]
 8025940:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8025944:	6013      	str	r3, [r2, #0]
 8025946:	600c      	str	r4, [r1, #0]
 8025948:	bd10      	pop	{r4, pc}
 802594a:	bf00      	nop
 802594c:	2000b3cc 	.word	0x2000b3cc

08025950 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8025950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025952:	b085      	sub	sp, #20
 8025954:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8025958:	4604      	mov	r4, r0
 802595a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802595e:	b33b      	cbz	r3, 80259b0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8025960:	aa02      	add	r2, sp, #8
 8025962:	a903      	add	r1, sp, #12
 8025964:	f7ff ffe2 	bl	802592c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8025968:	68a3      	ldr	r3, [r4, #8]
 802596a:	9e03      	ldr	r6, [sp, #12]
 802596c:	aa02      	add	r2, sp, #8
 802596e:	9f02      	ldr	r7, [sp, #8]
 8025970:	a903      	add	r1, sp, #12
 8025972:	1af6      	subs	r6, r6, r3
 8025974:	68e3      	ldr	r3, [r4, #12]
 8025976:	4620      	mov	r0, r4
 8025978:	1aff      	subs	r7, r7, r3
 802597a:	f104 0314 	add.w	r3, r4, #20
 802597e:	9603      	str	r6, [sp, #12]
 8025980:	9300      	str	r3, [sp, #0]
 8025982:	f104 0310 	add.w	r3, r4, #16
 8025986:	9702      	str	r7, [sp, #8]
 8025988:	f7ff ffb8 	bl	80258fc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802598c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8025990:	4605      	mov	r5, r0
 8025992:	b97b      	cbnz	r3, 80259b4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8025994:	463a      	mov	r2, r7
 8025996:	4631      	mov	r1, r6
 8025998:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802599c:	f7ff fe7a 	bl	8025694 <_ZN8touchgfx10Rasterizer6lineToEii>
 80259a0:	9b03      	ldr	r3, [sp, #12]
 80259a2:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 80259a6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80259aa:	9b02      	ldr	r3, [sp, #8]
 80259ac:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80259b0:	b005      	add	sp, #20
 80259b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80259b4:	b110      	cbz	r0, 80259bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 80259b6:	ea13 0200 	ands.w	r2, r3, r0
 80259ba:	d11c      	bne.n	80259f6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 80259bc:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 80259c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80259c4:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 80259c8:	b188      	cbz	r0, 80259ee <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 80259ca:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 80259ce:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80259d2:	b913      	cbnz	r3, 80259da <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 80259d4:	4630      	mov	r0, r6
 80259d6:	f001 f802 	bl	80269de <_ZN8touchgfx7Outline6moveToEii>
 80259da:	2300      	movs	r3, #0
 80259dc:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80259e0:	2301      	movs	r3, #1
 80259e2:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80259e6:	4630      	mov	r0, r6
 80259e8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80259ec:	e7d6      	b.n	802599c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 80259ee:	4630      	mov	r0, r6
 80259f0:	f7ff fe50 	bl	8025694 <_ZN8touchgfx10Rasterizer6lineToEii>
 80259f4:	e7f7      	b.n	80259e6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 80259f6:	4615      	mov	r5, r2
 80259f8:	e7d2      	b.n	80259a0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

080259fa <_ZN8touchgfx6Canvas5closeEv>:
 80259fa:	b538      	push	{r3, r4, r5, lr}
 80259fc:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8025a00:	4604      	mov	r4, r0
 8025a02:	b993      	cbnz	r3, 8025a2a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8025a04:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8025a08:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 8025a0c:	4213      	tst	r3, r2
 8025a0e:	d10c      	bne.n	8025a2a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8025a10:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8025a14:	b123      	cbz	r3, 8025a20 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8025a16:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 8025a1a:	4628      	mov	r0, r5
 8025a1c:	f7ff fe3a 	bl	8025694 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025a20:	4628      	mov	r0, r5
 8025a22:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 8025a26:	f7ff fe35 	bl	8025694 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025a2a:	2300      	movs	r3, #0
 8025a2c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8025a30:	bd38      	pop	{r3, r4, r5, pc}

08025a32 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8025a32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a34:	b085      	sub	sp, #20
 8025a36:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8025a3a:	4604      	mov	r4, r0
 8025a3c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8025a40:	b353      	cbz	r3, 8025a98 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8025a42:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 8025a46:	b90b      	cbnz	r3, 8025a4c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8025a48:	f7ff ffd7 	bl	80259fa <_ZN8touchgfx6Canvas5closeEv>
 8025a4c:	aa02      	add	r2, sp, #8
 8025a4e:	a903      	add	r1, sp, #12
 8025a50:	4620      	mov	r0, r4
 8025a52:	f7ff ff6b 	bl	802592c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8025a56:	68a3      	ldr	r3, [r4, #8]
 8025a58:	9d03      	ldr	r5, [sp, #12]
 8025a5a:	aa02      	add	r2, sp, #8
 8025a5c:	9e02      	ldr	r6, [sp, #8]
 8025a5e:	a903      	add	r1, sp, #12
 8025a60:	1aed      	subs	r5, r5, r3
 8025a62:	68e3      	ldr	r3, [r4, #12]
 8025a64:	4620      	mov	r0, r4
 8025a66:	1af6      	subs	r6, r6, r3
 8025a68:	f104 0314 	add.w	r3, r4, #20
 8025a6c:	9503      	str	r5, [sp, #12]
 8025a6e:	9300      	str	r3, [sp, #0]
 8025a70:	f104 0310 	add.w	r3, r4, #16
 8025a74:	9602      	str	r6, [sp, #8]
 8025a76:	f7ff ff41 	bl	80258fc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8025a7a:	4607      	mov	r7, r0
 8025a7c:	b170      	cbz	r0, 8025a9c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8025a7e:	2301      	movs	r3, #1
 8025a80:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8025a84:	9a03      	ldr	r2, [sp, #12]
 8025a86:	9b02      	ldr	r3, [sp, #8]
 8025a88:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 8025a8c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8025a90:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 8025a94:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 8025a98:	b005      	add	sp, #20
 8025a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025a9c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8025aa0:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 8025aa4:	b92b      	cbnz	r3, 8025ab2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8025aa6:	4632      	mov	r2, r6
 8025aa8:	4629      	mov	r1, r5
 8025aaa:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8025aae:	f000 ff96 	bl	80269de <_ZN8touchgfx7Outline6moveToEii>
 8025ab2:	2300      	movs	r3, #0
 8025ab4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8025ab8:	2301      	movs	r3, #1
 8025aba:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8025abe:	e7e1      	b.n	8025a84 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08025ac0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8025ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ac4:	4604      	mov	r4, r0
 8025ac6:	b087      	sub	sp, #28
 8025ac8:	9105      	str	r1, [sp, #20]
 8025aca:	f001 f8cc 	bl	8026c66 <_ZN8touchgfx7Outline8getCellsEv>
 8025ace:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8025ad2:	4605      	mov	r5, r0
 8025ad4:	f1b9 0f00 	cmp.w	r9, #0
 8025ad8:	d103      	bne.n	8025ae2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8025ada:	2001      	movs	r0, #1
 8025adc:	b007      	add	sp, #28
 8025ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ae2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8025ae6:	2e00      	cmp	r6, #0
 8025ae8:	d139      	bne.n	8025b5e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8025aea:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8025aee:	f105 0708 	add.w	r7, r5, #8
 8025af2:	4640      	mov	r0, r8
 8025af4:	f001 f8f9 	bl	8026cea <_ZN8touchgfx8Scanline5resetEv>
 8025af8:	f109 33ff 	add.w	r3, r9, #4294967295
 8025afc:	9303      	str	r3, [sp, #12]
 8025afe:	f9b5 b000 	ldrsh.w	fp, [r5]
 8025b02:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8025b06:	46da      	mov	sl, fp
 8025b08:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8025b0c:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8025b10:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8025b14:	9b03      	ldr	r3, [sp, #12]
 8025b16:	4416      	add	r6, r2
 8025b18:	9504      	str	r5, [sp, #16]
 8025b1a:	463d      	mov	r5, r7
 8025b1c:	3b01      	subs	r3, #1
 8025b1e:	9303      	str	r3, [sp, #12]
 8025b20:	3301      	adds	r3, #1
 8025b22:	d01e      	beq.n	8025b62 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8025b24:	3708      	adds	r7, #8
 8025b26:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8025b2a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8025b2e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8025b32:	4290      	cmp	r0, r2
 8025b34:	d11e      	bne.n	8025b74 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8025b36:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8025b3a:	4411      	add	r1, r2
 8025b3c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8025b40:	e7e8      	b.n	8025b14 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8025b42:	1c91      	adds	r1, r2, #2
 8025b44:	f04f 0301 	mov.w	r3, #1
 8025b48:	65e1      	str	r1, [r4, #92]	; 0x5c
 8025b4a:	8053      	strh	r3, [r2, #2]
 8025b4c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8025b4e:	1c91      	adds	r1, r2, #2
 8025b50:	65a1      	str	r1, [r4, #88]	; 0x58
 8025b52:	f8a2 b002 	strh.w	fp, [r2, #2]
 8025b56:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8025b58:	3201      	adds	r2, #1
 8025b5a:	6562      	str	r2, [r4, #84]	; 0x54
 8025b5c:	e03a      	b.n	8025bd4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8025b5e:	2000      	movs	r0, #0
 8025b60:	e7bc      	b.n	8025adc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8025b62:	b951      	cbnz	r1, 8025b7a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8025b64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8025b66:	2b00      	cmp	r3, #0
 8025b68:	d0b7      	beq.n	8025ada <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8025b6a:	4641      	mov	r1, r8
 8025b6c:	9805      	ldr	r0, [sp, #20]
 8025b6e:	f7ff fd5b 	bl	8025628 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8025b72:	e7b2      	b.n	8025ada <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8025b74:	2900      	cmp	r1, #0
 8025b76:	d035      	beq.n	8025be4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8025b78:	9504      	str	r5, [sp, #16]
 8025b7a:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8025b7e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8025b82:	f7ff fd3d 	bl	8025600 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 8025b86:	4605      	mov	r5, r0
 8025b88:	b330      	cbz	r0, 8025bd8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8025b8a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8025b8c:	b182      	cbz	r2, 8025bb0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8025b8e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8025b90:	454a      	cmp	r2, r9
 8025b92:	d00d      	beq.n	8025bb0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8025b94:	4641      	mov	r1, r8
 8025b96:	9805      	ldr	r0, [sp, #20]
 8025b98:	f7ff fd46 	bl	8025628 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8025b9c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025ba0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8025ba2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8025ba6:	65e2      	str	r2, [r4, #92]	; 0x5c
 8025ba8:	2300      	movs	r3, #0
 8025baa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025bac:	6563      	str	r3, [r4, #84]	; 0x54
 8025bae:	65a2      	str	r2, [r4, #88]	; 0x58
 8025bb0:	f1bb 0f00 	cmp.w	fp, #0
 8025bb4:	db10      	blt.n	8025bd8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8025bb6:	f7f3 fdcd 	bl	8019754 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025bba:	4583      	cmp	fp, r0
 8025bbc:	d20c      	bcs.n	8025bd8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8025bbe:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8025bc0:	f802 500b 	strb.w	r5, [r2, fp]
 8025bc4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8025bc6:	3201      	adds	r2, #1
 8025bc8:	455a      	cmp	r2, fp
 8025bca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8025bcc:	d1b9      	bne.n	8025b42 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8025bce:	8811      	ldrh	r1, [r2, #0]
 8025bd0:	3101      	adds	r1, #1
 8025bd2:	8011      	strh	r1, [r2, #0]
 8025bd4:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8025bd8:	9b03      	ldr	r3, [sp, #12]
 8025bda:	3301      	adds	r3, #1
 8025bdc:	d0c2      	beq.n	8025b64 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8025bde:	f10b 0a01 	add.w	sl, fp, #1
 8025be2:	9d04      	ldr	r5, [sp, #16]
 8025be4:	f9b5 3000 	ldrsh.w	r3, [r5]
 8025be8:	4553      	cmp	r3, sl
 8025bea:	dd88      	ble.n	8025afe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8025bec:	01b1      	lsls	r1, r6, #6
 8025bee:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8025bf2:	f7ff fd05 	bl	8025600 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.15>
 8025bf6:	4683      	mov	fp, r0
 8025bf8:	2800      	cmp	r0, #0
 8025bfa:	d080      	beq.n	8025afe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8025bfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8025bfe:	b183      	cbz	r3, 8025c22 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8025c00:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8025c02:	454b      	cmp	r3, r9
 8025c04:	d00d      	beq.n	8025c22 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8025c06:	4641      	mov	r1, r8
 8025c08:	9805      	ldr	r0, [sp, #20]
 8025c0a:	f7ff fd0d 	bl	8025628 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8025c0e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025c12:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8025c16:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8025c18:	65e3      	str	r3, [r4, #92]	; 0x5c
 8025c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025c1c:	65a3      	str	r3, [r4, #88]	; 0x58
 8025c1e:	2300      	movs	r3, #0
 8025c20:	6563      	str	r3, [r4, #84]	; 0x54
 8025c22:	f9b5 3000 	ldrsh.w	r3, [r5]
 8025c26:	464a      	mov	r2, r9
 8025c28:	f8cd b000 	str.w	fp, [sp]
 8025c2c:	4651      	mov	r1, sl
 8025c2e:	eba3 030a 	sub.w	r3, r3, sl
 8025c32:	4640      	mov	r0, r8
 8025c34:	f001 f880 	bl	8026d38 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8025c38:	e761      	b.n	8025afe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08025c3a <_ZN8touchgfx6Canvas6renderEv>:
 8025c3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025c3c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8025c40:	4604      	mov	r4, r0
 8025c42:	b913      	cbnz	r3, 8025c4a <_ZN8touchgfx6Canvas6renderEv+0x10>
 8025c44:	2001      	movs	r0, #1
 8025c46:	b003      	add	sp, #12
 8025c48:	bd30      	pop	{r4, r5, pc}
 8025c4a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8025c4e:	2b00      	cmp	r3, #0
 8025c50:	d12e      	bne.n	8025cb0 <_ZN8touchgfx6Canvas6renderEv+0x76>
 8025c52:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 8025c56:	2b00      	cmp	r3, #0
 8025c58:	d0f4      	beq.n	8025c44 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8025c5a:	6840      	ldr	r0, [r0, #4]
 8025c5c:	6803      	ldr	r3, [r0, #0]
 8025c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8025c60:	4798      	blx	r3
 8025c62:	2800      	cmp	r0, #0
 8025c64:	d0ee      	beq.n	8025c44 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8025c66:	4620      	mov	r0, r4
 8025c68:	f7ff fec7 	bl	80259fa <_ZN8touchgfx6Canvas5closeEv>
 8025c6c:	6860      	ldr	r0, [r4, #4]
 8025c6e:	6803      	ldr	r3, [r0, #0]
 8025c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8025c72:	4798      	blx	r3
 8025c74:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 8025c78:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 8025c7c:	8082      	strh	r2, [r0, #4]
 8025c7e:	80c3      	strh	r3, [r0, #6]
 8025c80:	6860      	ldr	r0, [r4, #4]
 8025c82:	6803      	ldr	r3, [r0, #0]
 8025c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8025c86:	4798      	blx	r3
 8025c88:	4605      	mov	r5, r0
 8025c8a:	6860      	ldr	r0, [r4, #4]
 8025c8c:	6803      	ldr	r3, [r0, #0]
 8025c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8025c90:	4798      	blx	r3
 8025c92:	7228      	strb	r0, [r5, #8]
 8025c94:	6860      	ldr	r0, [r4, #4]
 8025c96:	6803      	ldr	r3, [r0, #0]
 8025c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8025c9a:	4798      	blx	r3
 8025c9c:	f104 0318 	add.w	r3, r4, #24
 8025ca0:	4669      	mov	r1, sp
 8025ca2:	e9cd 3000 	strd	r3, r0, [sp]
 8025ca6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8025caa:	f7ff ff09 	bl	8025ac0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8025cae:	e7ca      	b.n	8025c46 <_ZN8touchgfx6Canvas6renderEv+0xc>
 8025cb0:	2000      	movs	r0, #0
 8025cb2:	e7c8      	b.n	8025c46 <_ZN8touchgfx6Canvas6renderEv+0xc>

08025cb4 <_ZN8touchgfx6CanvasD1Ev>:
 8025cb4:	b538      	push	{r3, r4, r5, lr}
 8025cb6:	4605      	mov	r5, r0
 8025cb8:	4b08      	ldr	r3, [pc, #32]	; (8025cdc <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8025cba:	4604      	mov	r4, r0
 8025cbc:	f845 3b30 	str.w	r3, [r5], #48
 8025cc0:	4b07      	ldr	r3, [pc, #28]	; (8025ce0 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8025cc2:	6818      	ldr	r0, [r3, #0]
 8025cc4:	6803      	ldr	r3, [r0, #0]
 8025cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025cc8:	4798      	blx	r3
 8025cca:	4628      	mov	r0, r5
 8025ccc:	f000 f814 	bl	8025cf8 <_ZN8touchgfx7OutlineD1Ev>
 8025cd0:	f104 0018 	add.w	r0, r4, #24
 8025cd4:	f001 f869 	bl	8026daa <_ZN8touchgfx15RenderingBufferD1Ev>
 8025cd8:	4620      	mov	r0, r4
 8025cda:	bd38      	pop	{r3, r4, r5, pc}
 8025cdc:	0802ca0c 	.word	0x0802ca0c
 8025ce0:	2000b3d4 	.word	0x2000b3d4

08025ce4 <_ZN8touchgfx6CanvasD0Ev>:
 8025ce4:	b510      	push	{r4, lr}
 8025ce6:	4604      	mov	r4, r0
 8025ce8:	f7ff ffe4 	bl	8025cb4 <_ZN8touchgfx6CanvasD1Ev>
 8025cec:	21bc      	movs	r1, #188	; 0xbc
 8025cee:	4620      	mov	r0, r4
 8025cf0:	f001 f880 	bl	8026df4 <_ZdlPvj>
 8025cf4:	4620      	mov	r0, r4
 8025cf6:	bd10      	pop	{r4, pc}

08025cf8 <_ZN8touchgfx7OutlineD1Ev>:
 8025cf8:	4770      	bx	lr

08025cfa <_ZN8touchgfx7OutlineD0Ev>:
 8025cfa:	b510      	push	{r4, lr}
 8025cfc:	4604      	mov	r4, r0
 8025cfe:	2148      	movs	r1, #72	; 0x48
 8025d00:	f001 f878 	bl	8026df4 <_ZdlPvj>
 8025d04:	4620      	mov	r0, r4
 8025d06:	bd10      	pop	{r4, pc}

08025d08 <_ZN8touchgfx7Outline5resetEv>:
 8025d08:	b510      	push	{r4, lr}
 8025d0a:	4604      	mov	r4, r0
 8025d0c:	f7f3 fd3a 	bl	8019784 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8025d10:	60e0      	str	r0, [r4, #12]
 8025d12:	f7f3 fd3d 	bl	8019790 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8025d16:	68e3      	ldr	r3, [r4, #12]
 8025d18:	2200      	movs	r2, #0
 8025d1a:	08c0      	lsrs	r0, r0, #3
 8025d1c:	6123      	str	r3, [r4, #16]
 8025d1e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025d22:	6060      	str	r0, [r4, #4]
 8025d24:	82a3      	strh	r3, [r4, #20]
 8025d26:	82e3      	strh	r3, [r4, #22]
 8025d28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025d2a:	60a2      	str	r2, [r4, #8]
 8025d2c:	f023 0301 	bic.w	r3, r3, #1
 8025d30:	8322      	strh	r2, [r4, #24]
 8025d32:	8362      	strh	r2, [r4, #26]
 8025d34:	f043 0302 	orr.w	r3, r3, #2
 8025d38:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025d3c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8025d3e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025d42:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8025d46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8025d4a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8025d4e:	bd10      	pop	{r4, pc}

08025d50 <_ZN8touchgfx7OutlineC1Ev>:
 8025d50:	4b0f      	ldr	r3, [pc, #60]	; (8025d90 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8025d52:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8025d56:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8025d5a:	b510      	push	{r4, lr}
 8025d5c:	6003      	str	r3, [r0, #0]
 8025d5e:	2300      	movs	r3, #0
 8025d60:	4604      	mov	r4, r0
 8025d62:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8025d66:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8025d6a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025d6e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8025d72:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8025d76:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8025d7a:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8025d7e:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8025d82:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8025d86:	f7ff ffbf 	bl	8025d08 <_ZN8touchgfx7Outline5resetEv>
 8025d8a:	4620      	mov	r0, r4
 8025d8c:	bd10      	pop	{r4, pc}
 8025d8e:	bf00      	nop
 8025d90:	0802ca6c 	.word	0x0802ca6c

08025d94 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8025d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d98:	b093      	sub	sp, #76	; 0x4c
 8025d9a:	4604      	mov	r4, r0
 8025d9c:	1156      	asrs	r6, r2, #5
 8025d9e:	f002 0e1f 	and.w	lr, r2, #31
 8025da2:	981c      	ldr	r0, [sp, #112]	; 0x70
 8025da4:	9305      	str	r3, [sp, #20]
 8025da6:	1143      	asrs	r3, r0, #5
 8025da8:	1145      	asrs	r5, r0, #5
 8025daa:	930c      	str	r3, [sp, #48]	; 0x30
 8025dac:	f000 031f 	and.w	r3, r0, #31
 8025db0:	9303      	str	r3, [sp, #12]
 8025db2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8025db4:	42b3      	cmp	r3, r6
 8025db6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8025db8:	bfc8      	it	gt
 8025dba:	6326      	strgt	r6, [r4, #48]	; 0x30
 8025dbc:	42b3      	cmp	r3, r6
 8025dbe:	bfdc      	itt	le
 8025dc0:	1c73      	addle	r3, r6, #1
 8025dc2:	63a3      	strle	r3, [r4, #56]	; 0x38
 8025dc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8025dc6:	42ab      	cmp	r3, r5
 8025dc8:	bfc8      	it	gt
 8025dca:	462b      	movgt	r3, r5
 8025dcc:	ea4f 1560 	mov.w	r5, r0, asr #5
 8025dd0:	bfc8      	it	gt
 8025dd2:	6323      	strgt	r3, [r4, #48]	; 0x30
 8025dd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8025dd6:	42ab      	cmp	r3, r5
 8025dd8:	bfd8      	it	le
 8025dda:	462b      	movle	r3, r5
 8025ddc:	ea4f 1561 	mov.w	r5, r1, asr #5
 8025de0:	bfdc      	itt	le
 8025de2:	3301      	addle	r3, #1
 8025de4:	63a3      	strle	r3, [r4, #56]	; 0x38
 8025de6:	9b05      	ldr	r3, [sp, #20]
 8025de8:	eba3 0a01 	sub.w	sl, r3, r1
 8025dec:	1143      	asrs	r3, r0, #5
 8025dee:	429e      	cmp	r6, r3
 8025df0:	f040 8119 	bne.w	8026026 <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8025df4:	9b05      	ldr	r3, [sp, #20]
 8025df6:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8025dfa:	9b03      	ldr	r3, [sp, #12]
 8025dfc:	459e      	cmp	lr, r3
 8025dfe:	d12c      	bne.n	8025e5a <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8025e00:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025e04:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8025e08:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8025e0c:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8025e10:	4291      	cmp	r1, r2
 8025e12:	d037      	beq.n	8025e84 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8025e14:	8b61      	ldrh	r1, [r4, #26]
 8025e16:	8b22      	ldrh	r2, [r4, #24]
 8025e18:	430a      	orrs	r2, r1
 8025e1a:	d00b      	beq.n	8025e34 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8025e1c:	2b00      	cmp	r3, #0
 8025e1e:	db09      	blt.n	8025e34 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8025e20:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8025e22:	429a      	cmp	r2, r3
 8025e24:	dd06      	ble.n	8025e34 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8025e26:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8025e2a:	429a      	cmp	r2, r3
 8025e2c:	d308      	bcc.n	8025e40 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 8025e2e:	2301      	movs	r3, #1
 8025e30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025e34:	f8a4 c014 	strh.w	ip, [r4, #20]
 8025e38:	82e6      	strh	r6, [r4, #22]
 8025e3a:	2300      	movs	r3, #0
 8025e3c:	8323      	strh	r3, [r4, #24]
 8025e3e:	e0c6      	b.n	8025fce <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8025e40:	f104 0314 	add.w	r3, r4, #20
 8025e44:	6922      	ldr	r2, [r4, #16]
 8025e46:	cb03      	ldmia	r3!, {r0, r1}
 8025e48:	6010      	str	r0, [r2, #0]
 8025e4a:	6051      	str	r1, [r2, #4]
 8025e4c:	6923      	ldr	r3, [r4, #16]
 8025e4e:	3308      	adds	r3, #8
 8025e50:	6123      	str	r3, [r4, #16]
 8025e52:	68a3      	ldr	r3, [r4, #8]
 8025e54:	3301      	adds	r3, #1
 8025e56:	60a3      	str	r3, [r4, #8]
 8025e58:	e7ec      	b.n	8025e34 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8025e5a:	9b05      	ldr	r3, [sp, #20]
 8025e5c:	45ac      	cmp	ip, r5
 8025e5e:	f001 011f 	and.w	r1, r1, #31
 8025e62:	8b20      	ldrh	r0, [r4, #24]
 8025e64:	f003 031f 	and.w	r3, r3, #31
 8025e68:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8025e6c:	9304      	str	r3, [sp, #16]
 8025e6e:	9b03      	ldr	r3, [sp, #12]
 8025e70:	eba3 020e 	sub.w	r2, r3, lr
 8025e74:	d109      	bne.n	8025e8a <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8025e76:	9b04      	ldr	r3, [sp, #16]
 8025e78:	4410      	add	r0, r2
 8025e7a:	4419      	add	r1, r3
 8025e7c:	8320      	strh	r0, [r4, #24]
 8025e7e:	fb02 8201 	mla	r2, r2, r1, r8
 8025e82:	8362      	strh	r2, [r4, #26]
 8025e84:	b013      	add	sp, #76	; 0x4c
 8025e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e8a:	f1ba 0f00 	cmp.w	sl, #0
 8025e8e:	f2c0 80a0 	blt.w	8025fd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8025e92:	f1c1 0320 	rsb	r3, r1, #32
 8025e96:	f04f 0b20 	mov.w	fp, #32
 8025e9a:	435a      	muls	r2, r3
 8025e9c:	2301      	movs	r3, #1
 8025e9e:	9302      	str	r3, [sp, #8]
 8025ea0:	4459      	add	r1, fp
 8025ea2:	fb92 f7fa 	sdiv	r7, r2, sl
 8025ea6:	fb0a 2217 	mls	r2, sl, r7, r2
 8025eaa:	2a00      	cmp	r2, #0
 8025eac:	bfbc      	itt	lt
 8025eae:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8025eb2:	4452      	addlt	r2, sl
 8025eb4:	fb07 8101 	mla	r1, r7, r1, r8
 8025eb8:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8025ebc:	4438      	add	r0, r7
 8025ebe:	b20b      	sxth	r3, r1
 8025ec0:	9902      	ldr	r1, [sp, #8]
 8025ec2:	b200      	sxth	r0, r0
 8025ec4:	9301      	str	r3, [sp, #4]
 8025ec6:	8363      	strh	r3, [r4, #26]
 8025ec8:	186b      	adds	r3, r5, r1
 8025eca:	0435      	lsls	r5, r6, #16
 8025ecc:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8025ed0:	8320      	strh	r0, [r4, #24]
 8025ed2:	eb03 0905 	add.w	r9, r3, r5
 8025ed6:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8025eda:	9300      	str	r3, [sp, #0]
 8025edc:	45c1      	cmp	r9, r8
 8025ede:	9505      	str	r5, [sp, #20]
 8025ee0:	d014      	beq.n	8025f0c <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8025ee2:	9b01      	ldr	r3, [sp, #4]
 8025ee4:	4303      	orrs	r3, r0
 8025ee6:	d00b      	beq.n	8025f00 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8025ee8:	2900      	cmp	r1, #0
 8025eea:	db09      	blt.n	8025f00 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8025eec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025eee:	428b      	cmp	r3, r1
 8025ef0:	dd06      	ble.n	8025f00 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8025ef2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8025ef6:	4299      	cmp	r1, r3
 8025ef8:	d374      	bcc.n	8025fe4 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8025efa:	2301      	movs	r3, #1
 8025efc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025f00:	9b00      	ldr	r3, [sp, #0]
 8025f02:	82e6      	strh	r6, [r4, #22]
 8025f04:	82a3      	strh	r3, [r4, #20]
 8025f06:	2300      	movs	r3, #0
 8025f08:	8323      	strh	r3, [r4, #24]
 8025f0a:	8363      	strh	r3, [r4, #26]
 8025f0c:	9900      	ldr	r1, [sp, #0]
 8025f0e:	eb0e 0307 	add.w	r3, lr, r7
 8025f12:	458c      	cmp	ip, r1
 8025f14:	d04e      	beq.n	8025fb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8025f16:	9903      	ldr	r1, [sp, #12]
 8025f18:	eba2 020a 	sub.w	r2, r2, sl
 8025f1c:	1ac9      	subs	r1, r1, r3
 8025f1e:	9201      	str	r2, [sp, #4]
 8025f20:	440f      	add	r7, r1
 8025f22:	017f      	lsls	r7, r7, #5
 8025f24:	fb97 fefa 	sdiv	lr, r7, sl
 8025f28:	fb0a 771e 	mls	r7, sl, lr, r7
 8025f2c:	2f00      	cmp	r7, #0
 8025f2e:	bfbc      	itt	lt
 8025f30:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8025f34:	4457      	addlt	r7, sl
 8025f36:	f10e 0101 	add.w	r1, lr, #1
 8025f3a:	9106      	str	r1, [sp, #24]
 8025f3c:	9a01      	ldr	r2, [sp, #4]
 8025f3e:	8b20      	ldrh	r0, [r4, #24]
 8025f40:	19d2      	adds	r2, r2, r7
 8025f42:	8b61      	ldrh	r1, [r4, #26]
 8025f44:	9d02      	ldr	r5, [sp, #8]
 8025f46:	9201      	str	r2, [sp, #4]
 8025f48:	bf5b      	ittet	pl
 8025f4a:	eba2 020a 	subpl.w	r2, r2, sl
 8025f4e:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8025f52:	46f0      	movmi	r8, lr
 8025f54:	9201      	strpl	r2, [sp, #4]
 8025f56:	9a00      	ldr	r2, [sp, #0]
 8025f58:	4440      	add	r0, r8
 8025f5a:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8025f5e:	4443      	add	r3, r8
 8025f60:	442a      	add	r2, r5
 8025f62:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8025f66:	9d05      	ldr	r5, [sp, #20]
 8025f68:	b200      	sxth	r0, r0
 8025f6a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8025f6e:	b209      	sxth	r1, r1
 8025f70:	4415      	add	r5, r2
 8025f72:	8320      	strh	r0, [r4, #24]
 8025f74:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8025f78:	8361      	strh	r1, [r4, #26]
 8025f7a:	9200      	str	r2, [sp, #0]
 8025f7c:	454d      	cmp	r5, r9
 8025f7e:	d016      	beq.n	8025fae <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8025f80:	4301      	orrs	r1, r0
 8025f82:	d00d      	beq.n	8025fa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8025f84:	f1b8 0f00 	cmp.w	r8, #0
 8025f88:	db0a      	blt.n	8025fa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8025f8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025f8c:	4541      	cmp	r1, r8
 8025f8e:	dd07      	ble.n	8025fa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8025f90:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025f94:	4288      	cmp	r0, r1
 8025f96:	d335      	bcc.n	8026004 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8025f98:	f04f 0101 	mov.w	r1, #1
 8025f9c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025fa0:	9900      	ldr	r1, [sp, #0]
 8025fa2:	82e6      	strh	r6, [r4, #22]
 8025fa4:	82a1      	strh	r1, [r4, #20]
 8025fa6:	f04f 0100 	mov.w	r1, #0
 8025faa:	8321      	strh	r1, [r4, #24]
 8025fac:	8361      	strh	r1, [r4, #26]
 8025fae:	9a00      	ldr	r2, [sp, #0]
 8025fb0:	4594      	cmp	ip, r2
 8025fb2:	d1c3      	bne.n	8025f3c <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8025fb4:	9a03      	ldr	r2, [sp, #12]
 8025fb6:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8025fba:	1ad3      	subs	r3, r2, r3
 8025fbc:	8b22      	ldrh	r2, [r4, #24]
 8025fbe:	441a      	add	r2, r3
 8025fc0:	8322      	strh	r2, [r4, #24]
 8025fc2:	9a04      	ldr	r2, [sp, #16]
 8025fc4:	3220      	adds	r2, #32
 8025fc6:	eba2 020b 	sub.w	r2, r2, fp
 8025fca:	fb03 c302 	mla	r3, r3, r2, ip
 8025fce:	8363      	strh	r3, [r4, #26]
 8025fd0:	e758      	b.n	8025e84 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8025fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8025fd6:	434a      	muls	r2, r1
 8025fd8:	f1ca 0a00 	rsb	sl, sl, #0
 8025fdc:	f04f 0b00 	mov.w	fp, #0
 8025fe0:	9302      	str	r3, [sp, #8]
 8025fe2:	e75d      	b.n	8025ea0 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8025fe4:	f104 0314 	add.w	r3, r4, #20
 8025fe8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025fec:	cb03      	ldmia	r3!, {r0, r1}
 8025fee:	f8c8 0000 	str.w	r0, [r8]
 8025ff2:	f8c8 1004 	str.w	r1, [r8, #4]
 8025ff6:	6923      	ldr	r3, [r4, #16]
 8025ff8:	3308      	adds	r3, #8
 8025ffa:	6123      	str	r3, [r4, #16]
 8025ffc:	68a3      	ldr	r3, [r4, #8]
 8025ffe:	3301      	adds	r3, #1
 8026000:	60a3      	str	r3, [r4, #8]
 8026002:	e77d      	b.n	8025f00 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8026004:	f104 0814 	add.w	r8, r4, #20
 8026008:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802600c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8026010:	f8c9 0000 	str.w	r0, [r9]
 8026014:	f8c9 1004 	str.w	r1, [r9, #4]
 8026018:	6921      	ldr	r1, [r4, #16]
 802601a:	3108      	adds	r1, #8
 802601c:	6121      	str	r1, [r4, #16]
 802601e:	68a1      	ldr	r1, [r4, #8]
 8026020:	3101      	adds	r1, #1
 8026022:	60a1      	str	r1, [r4, #8]
 8026024:	e7bc      	b.n	8025fa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8026026:	1a83      	subs	r3, r0, r2
 8026028:	9301      	str	r3, [sp, #4]
 802602a:	f1ba 0f00 	cmp.w	sl, #0
 802602e:	f040 8094 	bne.w	802615a <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 8026032:	9a01      	ldr	r2, [sp, #4]
 8026034:	0049      	lsls	r1, r1, #1
 8026036:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802603a:	2a00      	cmp	r2, #0
 802603c:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8026040:	8b62      	ldrh	r2, [r4, #26]
 8026042:	bfaa      	itet	ge
 8026044:	f04f 0a20 	movge.w	sl, #32
 8026048:	f04f 38ff 	movlt.w	r8, #4294967295
 802604c:	f04f 0801 	movge.w	r8, #1
 8026050:	8b21      	ldrh	r1, [r4, #24]
 8026052:	ebaa 0e0e 	sub.w	lr, sl, lr
 8026056:	4471      	add	r1, lr
 8026058:	fb0e 2e03 	mla	lr, lr, r3, r2
 802605c:	eb08 0206 	add.w	r2, r8, r6
 8026060:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8026064:	b209      	sxth	r1, r1
 8026066:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 802606a:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 802606e:	8321      	strh	r1, [r4, #24]
 8026070:	fa0f fe8e 	sxth.w	lr, lr
 8026074:	42b7      	cmp	r7, r6
 8026076:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802607a:	d013      	beq.n	80260a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 802607c:	ea51 010e 	orrs.w	r1, r1, lr
 8026080:	d00b      	beq.n	802609a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8026082:	2800      	cmp	r0, #0
 8026084:	db09      	blt.n	802609a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8026086:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026088:	4281      	cmp	r1, r0
 802608a:	dd06      	ble.n	802609a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802608c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026090:	4288      	cmp	r0, r1
 8026092:	d339      	bcc.n	8026108 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8026094:	2101      	movs	r1, #1
 8026096:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802609a:	2100      	movs	r1, #0
 802609c:	82a5      	strh	r5, [r4, #20]
 802609e:	82e2      	strh	r2, [r4, #22]
 80260a0:	8321      	strh	r1, [r4, #24]
 80260a2:	8361      	strh	r1, [r4, #26]
 80260a4:	f1aa 0610 	sub.w	r6, sl, #16
 80260a8:	f04f 0e00 	mov.w	lr, #0
 80260ac:	f04f 0b01 	mov.w	fp, #1
 80260b0:	0076      	lsls	r6, r6, #1
 80260b2:	fb06 f703 	mul.w	r7, r6, r3
 80260b6:	b236      	sxth	r6, r6
 80260b8:	b23f      	sxth	r7, r7
 80260ba:	ea46 0107 	orr.w	r1, r6, r7
 80260be:	9100      	str	r1, [sp, #0]
 80260c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80260c2:	428a      	cmp	r2, r1
 80260c4:	d03e      	beq.n	8026144 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 80260c6:	4442      	add	r2, r8
 80260c8:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80260cc:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80260d0:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 80260d4:	8326      	strh	r6, [r4, #24]
 80260d6:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 80260da:	8367      	strh	r7, [r4, #26]
 80260dc:	4584      	cmp	ip, r0
 80260de:	d0ef      	beq.n	80260c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80260e0:	9800      	ldr	r0, [sp, #0]
 80260e2:	b150      	cbz	r0, 80260fa <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80260e4:	2900      	cmp	r1, #0
 80260e6:	db08      	blt.n	80260fa <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80260e8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80260ea:	4288      	cmp	r0, r1
 80260ec:	dd05      	ble.n	80260fa <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80260ee:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80260f2:	4288      	cmp	r0, r1
 80260f4:	d315      	bcc.n	8026122 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 80260f6:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 80260fa:	82a5      	strh	r5, [r4, #20]
 80260fc:	82e2      	strh	r2, [r4, #22]
 80260fe:	f8a4 e018 	strh.w	lr, [r4, #24]
 8026102:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8026106:	e7db      	b.n	80260c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8026108:	f104 0614 	add.w	r6, r4, #20
 802610c:	6927      	ldr	r7, [r4, #16]
 802610e:	ce03      	ldmia	r6!, {r0, r1}
 8026110:	6038      	str	r0, [r7, #0]
 8026112:	6079      	str	r1, [r7, #4]
 8026114:	6921      	ldr	r1, [r4, #16]
 8026116:	3108      	adds	r1, #8
 8026118:	6121      	str	r1, [r4, #16]
 802611a:	68a1      	ldr	r1, [r4, #8]
 802611c:	3101      	adds	r1, #1
 802611e:	60a1      	str	r1, [r4, #8]
 8026120:	e7bb      	b.n	802609a <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8026122:	f104 0c14 	add.w	ip, r4, #20
 8026126:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802612a:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 802612e:	f8c9 0000 	str.w	r0, [r9]
 8026132:	f8c9 1004 	str.w	r1, [r9, #4]
 8026136:	6921      	ldr	r1, [r4, #16]
 8026138:	3108      	adds	r1, #8
 802613a:	6121      	str	r1, [r4, #16]
 802613c:	68a1      	ldr	r1, [r4, #8]
 802613e:	3101      	adds	r1, #1
 8026140:	60a1      	str	r1, [r4, #8]
 8026142:	e7da      	b.n	80260fa <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8026144:	9a03      	ldr	r2, [sp, #12]
 8026146:	8b61      	ldrh	r1, [r4, #26]
 8026148:	f1a2 0c20 	sub.w	ip, r2, #32
 802614c:	8b22      	ldrh	r2, [r4, #24]
 802614e:	44d4      	add	ip, sl
 8026150:	4462      	add	r2, ip
 8026152:	fb0c 1303 	mla	r3, ip, r3, r1
 8026156:	8322      	strh	r2, [r4, #24]
 8026158:	e739      	b.n	8025fce <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 802615a:	9b01      	ldr	r3, [sp, #4]
 802615c:	2b00      	cmp	r3, #0
 802615e:	db3f      	blt.n	80261e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8026160:	2201      	movs	r2, #1
 8026162:	f1ce 0320 	rsb	r3, lr, #32
 8026166:	920b      	str	r2, [sp, #44]	; 0x2c
 8026168:	2220      	movs	r2, #32
 802616a:	fb0a f303 	mul.w	r3, sl, r3
 802616e:	9202      	str	r2, [sp, #8]
 8026170:	9a01      	ldr	r2, [sp, #4]
 8026172:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8026176:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802617a:	fb93 f7f2 	sdiv	r7, r3, r2
 802617e:	fb02 3317 	mls	r3, r2, r7, r3
 8026182:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8026186:	2b00      	cmp	r3, #0
 8026188:	9308      	str	r3, [sp, #32]
 802618a:	bfbc      	itt	lt
 802618c:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8026190:	189b      	addlt	r3, r3, r2
 8026192:	eb07 0b01 	add.w	fp, r7, r1
 8026196:	bfb8      	it	lt
 8026198:	9308      	strlt	r3, [sp, #32]
 802619a:	ea4f 136b 	mov.w	r3, fp, asr #5
 802619e:	9304      	str	r3, [sp, #16]
 80261a0:	9b02      	ldr	r3, [sp, #8]
 80261a2:	4573      	cmp	r3, lr
 80261a4:	d133      	bne.n	802620e <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 80261a6:	9b04      	ldr	r3, [sp, #16]
 80261a8:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 80261ac:	454b      	cmp	r3, r9
 80261ae:	d045      	beq.n	802623c <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80261b0:	8b62      	ldrh	r2, [r4, #26]
 80261b2:	8b23      	ldrh	r3, [r4, #24]
 80261b4:	4313      	orrs	r3, r2
 80261b6:	d00c      	beq.n	80261d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80261b8:	f1b8 0f00 	cmp.w	r8, #0
 80261bc:	db09      	blt.n	80261d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80261be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80261c0:	4543      	cmp	r3, r8
 80261c2:	dd06      	ble.n	80261d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80261c4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80261c8:	429a      	cmp	r2, r3
 80261ca:	d313      	bcc.n	80261f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 80261cc:	2301      	movs	r3, #1
 80261ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80261d2:	9b04      	ldr	r3, [sp, #16]
 80261d4:	82e6      	strh	r6, [r4, #22]
 80261d6:	82a3      	strh	r3, [r4, #20]
 80261d8:	2300      	movs	r3, #0
 80261da:	8323      	strh	r3, [r4, #24]
 80261dc:	8363      	strh	r3, [r4, #26]
 80261de:	e02d      	b.n	802623c <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80261e0:	9a01      	ldr	r2, [sp, #4]
 80261e2:	fb0a f30e 	mul.w	r3, sl, lr
 80261e6:	4252      	negs	r2, r2
 80261e8:	9201      	str	r2, [sp, #4]
 80261ea:	f04f 32ff 	mov.w	r2, #4294967295
 80261ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80261f0:	2200      	movs	r2, #0
 80261f2:	e7bc      	b.n	802616e <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80261f4:	f104 0314 	add.w	r3, r4, #20
 80261f8:	6922      	ldr	r2, [r4, #16]
 80261fa:	cb03      	ldmia	r3!, {r0, r1}
 80261fc:	6010      	str	r0, [r2, #0]
 80261fe:	6051      	str	r1, [r2, #4]
 8026200:	6923      	ldr	r3, [r4, #16]
 8026202:	3308      	adds	r3, #8
 8026204:	6123      	str	r3, [r4, #16]
 8026206:	68a3      	ldr	r3, [r4, #8]
 8026208:	3301      	adds	r3, #1
 802620a:	60a3      	str	r3, [r4, #8]
 802620c:	e7e1      	b.n	80261d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802620e:	f00b 031f 	and.w	r3, fp, #31
 8026212:	f001 011f 	and.w	r1, r1, #31
 8026216:	8b20      	ldrh	r0, [r4, #24]
 8026218:	9309      	str	r3, [sp, #36]	; 0x24
 802621a:	9b02      	ldr	r3, [sp, #8]
 802621c:	eba3 020e 	sub.w	r2, r3, lr
 8026220:	8b63      	ldrh	r3, [r4, #26]
 8026222:	9300      	str	r3, [sp, #0]
 8026224:	9b04      	ldr	r3, [sp, #16]
 8026226:	42ab      	cmp	r3, r5
 8026228:	f040 80ef 	bne.w	802640a <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 802622c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802622e:	4410      	add	r0, r2
 8026230:	4419      	add	r1, r3
 8026232:	9b00      	ldr	r3, [sp, #0]
 8026234:	8320      	strh	r0, [r4, #24]
 8026236:	fb02 3101 	mla	r1, r2, r1, r3
 802623a:	8361      	strh	r1, [r4, #26]
 802623c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802623e:	9904      	ldr	r1, [sp, #16]
 8026240:	4433      	add	r3, r6
 8026242:	9300      	str	r3, [sp, #0]
 8026244:	9a00      	ldr	r2, [sp, #0]
 8026246:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802624a:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 802624e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8026252:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026256:	4288      	cmp	r0, r1
 8026258:	d018      	beq.n	802628c <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 802625a:	8b60      	ldrh	r0, [r4, #26]
 802625c:	8b21      	ldrh	r1, [r4, #24]
 802625e:	ea50 0201 	orrs.w	r2, r0, r1
 8026262:	d00c      	beq.n	802627e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8026264:	2b00      	cmp	r3, #0
 8026266:	db0a      	blt.n	802627e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8026268:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802626a:	4299      	cmp	r1, r3
 802626c:	dd07      	ble.n	802627e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802626e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026272:	4299      	cmp	r1, r3
 8026274:	f0c0 818b 	bcc.w	802658e <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8026278:	2301      	movs	r3, #1
 802627a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802627e:	9b04      	ldr	r3, [sp, #16]
 8026280:	82a3      	strh	r3, [r4, #20]
 8026282:	9b00      	ldr	r3, [sp, #0]
 8026284:	82e3      	strh	r3, [r4, #22]
 8026286:	2300      	movs	r3, #0
 8026288:	8323      	strh	r3, [r4, #24]
 802628a:	8363      	strh	r3, [r4, #26]
 802628c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802628e:	9a00      	ldr	r2, [sp, #0]
 8026290:	4293      	cmp	r3, r2
 8026292:	f000 808d 	beq.w	80263b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8026296:	ea4f 134a 	mov.w	r3, sl, lsl #5
 802629a:	9901      	ldr	r1, [sp, #4]
 802629c:	9801      	ldr	r0, [sp, #4]
 802629e:	fb93 f1f1 	sdiv	r1, r3, r1
 80262a2:	fb00 3311 	mls	r3, r0, r1, r3
 80262a6:	9106      	str	r1, [sp, #24]
 80262a8:	2b00      	cmp	r3, #0
 80262aa:	9307      	str	r3, [sp, #28]
 80262ac:	da04      	bge.n	80262b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 80262ae:	1e4b      	subs	r3, r1, #1
 80262b0:	9306      	str	r3, [sp, #24]
 80262b2:	9b07      	ldr	r3, [sp, #28]
 80262b4:	4403      	add	r3, r0
 80262b6:	9307      	str	r3, [sp, #28]
 80262b8:	9b08      	ldr	r3, [sp, #32]
 80262ba:	f04f 0c00 	mov.w	ip, #0
 80262be:	9901      	ldr	r1, [sp, #4]
 80262c0:	1a5b      	subs	r3, r3, r1
 80262c2:	4659      	mov	r1, fp
 80262c4:	9308      	str	r3, [sp, #32]
 80262c6:	9b02      	ldr	r3, [sp, #8]
 80262c8:	f1c3 0320 	rsb	r3, r3, #32
 80262cc:	930a      	str	r3, [sp, #40]	; 0x28
 80262ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80262d0:	9b02      	ldr	r3, [sp, #8]
 80262d2:	1a1b      	subs	r3, r3, r0
 80262d4:	9309      	str	r3, [sp, #36]	; 0x24
 80262d6:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 80262da:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80262de:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 80262e2:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 80262e6:	181b      	adds	r3, r3, r0
 80262e8:	bf58      	it	pl
 80262ea:	9801      	ldrpl	r0, [sp, #4]
 80262ec:	9308      	str	r3, [sp, #32]
 80262ee:	bf54      	ite	pl
 80262f0:	1a1b      	subpl	r3, r3, r0
 80262f2:	9d06      	ldrmi	r5, [sp, #24]
 80262f4:	9802      	ldr	r0, [sp, #8]
 80262f6:	bf5e      	ittt	pl
 80262f8:	9308      	strpl	r3, [sp, #32]
 80262fa:	9b06      	ldrpl	r3, [sp, #24]
 80262fc:	1c5d      	addpl	r5, r3, #1
 80262fe:	44ab      	add	fp, r5
 8026300:	ea4f 136b 	mov.w	r3, fp, asr #5
 8026304:	9304      	str	r3, [sp, #16]
 8026306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026308:	4283      	cmp	r3, r0
 802630a:	f040 815a 	bne.w	80265c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 802630e:	9b04      	ldr	r3, [sp, #16]
 8026310:	9a00      	ldr	r2, [sp, #0]
 8026312:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8026316:	4543      	cmp	r3, r8
 8026318:	d01a      	beq.n	8026350 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 802631a:	8b61      	ldrh	r1, [r4, #26]
 802631c:	8b23      	ldrh	r3, [r4, #24]
 802631e:	430b      	orrs	r3, r1
 8026320:	d00e      	beq.n	8026340 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8026322:	f1be 0f00 	cmp.w	lr, #0
 8026326:	db0b      	blt.n	8026340 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8026328:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802632a:	4573      	cmp	r3, lr
 802632c:	dd08      	ble.n	8026340 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802632e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026332:	4299      	cmp	r1, r3
 8026334:	f0c0 8138 	bcc.w	80265a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8026338:	f04f 0301 	mov.w	r3, #1
 802633c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026340:	9b04      	ldr	r3, [sp, #16]
 8026342:	f8a4 c018 	strh.w	ip, [r4, #24]
 8026346:	82a3      	strh	r3, [r4, #20]
 8026348:	9b00      	ldr	r3, [sp, #0]
 802634a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802634e:	82e3      	strh	r3, [r4, #22]
 8026350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026352:	9a00      	ldr	r2, [sp, #0]
 8026354:	441a      	add	r2, r3
 8026356:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802635a:	9200      	str	r2, [sp, #0]
 802635c:	9900      	ldr	r1, [sp, #0]
 802635e:	9a04      	ldr	r2, [sp, #16]
 8026360:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8026364:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8026368:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802636c:	4288      	cmp	r0, r1
 802636e:	d01a      	beq.n	80263a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8026370:	8b60      	ldrh	r0, [r4, #26]
 8026372:	8b21      	ldrh	r1, [r4, #24]
 8026374:	ea50 0201 	orrs.w	r2, r0, r1
 8026378:	d00d      	beq.n	8026396 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802637a:	2b00      	cmp	r3, #0
 802637c:	db0b      	blt.n	8026396 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802637e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026380:	4299      	cmp	r1, r3
 8026382:	dd08      	ble.n	8026396 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8026384:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026388:	4299      	cmp	r1, r3
 802638a:	f0c0 81f9 	bcc.w	8026780 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 802638e:	f04f 0301 	mov.w	r3, #1
 8026392:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026396:	9b04      	ldr	r3, [sp, #16]
 8026398:	f8a4 c018 	strh.w	ip, [r4, #24]
 802639c:	82a3      	strh	r3, [r4, #20]
 802639e:	9b00      	ldr	r3, [sp, #0]
 80263a0:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80263a4:	82e3      	strh	r3, [r4, #22]
 80263a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80263a8:	4659      	mov	r1, fp
 80263aa:	9a00      	ldr	r2, [sp, #0]
 80263ac:	4293      	cmp	r3, r2
 80263ae:	d192      	bne.n	80262d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80263b0:	9b02      	ldr	r3, [sp, #8]
 80263b2:	f1c3 0c20 	rsb	ip, r3, #32
 80263b6:	9b05      	ldr	r3, [sp, #20]
 80263b8:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80263bc:	9b03      	ldr	r3, [sp, #12]
 80263be:	459c      	cmp	ip, r3
 80263c0:	f040 81f8 	bne.w	80267b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 80263c4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80263c8:	9a00      	ldr	r2, [sp, #0]
 80263ca:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80263ce:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 80263d2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80263d6:	4288      	cmp	r0, r1
 80263d8:	f43f ad54 	beq.w	8025e84 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80263dc:	8b60      	ldrh	r0, [r4, #26]
 80263de:	8b21      	ldrh	r1, [r4, #24]
 80263e0:	ea50 0201 	orrs.w	r2, r0, r1
 80263e4:	d00c      	beq.n	8026400 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80263e6:	2b00      	cmp	r3, #0
 80263e8:	db0a      	blt.n	8026400 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80263ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80263ec:	4299      	cmp	r1, r3
 80263ee:	dd07      	ble.n	8026400 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80263f0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80263f4:	4299      	cmp	r1, r3
 80263f6:	f0c0 81d0 	bcc.w	802679a <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 80263fa:	2301      	movs	r3, #1
 80263fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026400:	9b00      	ldr	r3, [sp, #0]
 8026402:	f8a4 e014 	strh.w	lr, [r4, #20]
 8026406:	82e3      	strh	r3, [r4, #22]
 8026408:	e517      	b.n	8025e3a <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 802640a:	2f00      	cmp	r7, #0
 802640c:	f2c0 8097 	blt.w	802653e <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8026410:	2301      	movs	r3, #1
 8026412:	f1c1 0c20 	rsb	ip, r1, #32
 8026416:	9307      	str	r3, [sp, #28]
 8026418:	2320      	movs	r3, #32
 802641a:	fb02 f20c 	mul.w	r2, r2, ip
 802641e:	9306      	str	r3, [sp, #24]
 8026420:	9b06      	ldr	r3, [sp, #24]
 8026422:	fb92 fcf7 	sdiv	ip, r2, r7
 8026426:	fb07 221c 	mls	r2, r7, ip, r2
 802642a:	4419      	add	r1, r3
 802642c:	9b00      	ldr	r3, [sp, #0]
 802642e:	2a00      	cmp	r2, #0
 8026430:	bfbc      	itt	lt
 8026432:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8026436:	19d2      	addlt	r2, r2, r7
 8026438:	fb0c 3101 	mla	r1, ip, r1, r3
 802643c:	9b07      	ldr	r3, [sp, #28]
 802643e:	4460      	add	r0, ip
 8026440:	441d      	add	r5, r3
 8026442:	0433      	lsls	r3, r6, #16
 8026444:	b200      	sxth	r0, r0
 8026446:	930a      	str	r3, [sp, #40]	; 0x28
 8026448:	18eb      	adds	r3, r5, r3
 802644a:	b209      	sxth	r1, r1
 802644c:	8320      	strh	r0, [r4, #24]
 802644e:	454b      	cmp	r3, r9
 8026450:	8361      	strh	r1, [r4, #26]
 8026452:	d014      	beq.n	802647e <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8026454:	ea50 0301 	orrs.w	r3, r0, r1
 8026458:	d00c      	beq.n	8026474 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802645a:	f1b8 0f00 	cmp.w	r8, #0
 802645e:	db09      	blt.n	8026474 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8026460:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026462:	4543      	cmp	r3, r8
 8026464:	dd06      	ble.n	8026474 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8026466:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802646a:	4299      	cmp	r1, r3
 802646c:	d36e      	bcc.n	802654c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 802646e:	2301      	movs	r3, #1
 8026470:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026474:	2300      	movs	r3, #0
 8026476:	82a5      	strh	r5, [r4, #20]
 8026478:	82e6      	strh	r6, [r4, #22]
 802647a:	8323      	strh	r3, [r4, #24]
 802647c:	8363      	strh	r3, [r4, #26]
 802647e:	9904      	ldr	r1, [sp, #16]
 8026480:	eb0e 030c 	add.w	r3, lr, ip
 8026484:	42a9      	cmp	r1, r5
 8026486:	d04d      	beq.n	8026524 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8026488:	9902      	ldr	r1, [sp, #8]
 802648a:	1bd2      	subs	r2, r2, r7
 802648c:	1ac9      	subs	r1, r1, r3
 802648e:	9200      	str	r2, [sp, #0]
 8026490:	448c      	add	ip, r1
 8026492:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8026496:	fb9c fef7 	sdiv	lr, ip, r7
 802649a:	fb07 cc1e 	mls	ip, r7, lr, ip
 802649e:	f1bc 0f00 	cmp.w	ip, #0
 80264a2:	bfbc      	itt	lt
 80264a4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80264a8:	44bc      	addlt	ip, r7
 80264aa:	f10e 0101 	add.w	r1, lr, #1
 80264ae:	910d      	str	r1, [sp, #52]	; 0x34
 80264b0:	9a00      	ldr	r2, [sp, #0]
 80264b2:	8b20      	ldrh	r0, [r4, #24]
 80264b4:	eb12 020c 	adds.w	r2, r2, ip
 80264b8:	8b61      	ldrh	r1, [r4, #26]
 80264ba:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80264be:	9200      	str	r2, [sp, #0]
 80264c0:	bf5b      	ittet	pl
 80264c2:	1bd2      	subpl	r2, r2, r7
 80264c4:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 80264c8:	46f0      	movmi	r8, lr
 80264ca:	9200      	strpl	r2, [sp, #0]
 80264cc:	9a07      	ldr	r2, [sp, #28]
 80264ce:	4440      	add	r0, r8
 80264d0:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 80264d4:	4443      	add	r3, r8
 80264d6:	4415      	add	r5, r2
 80264d8:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80264dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80264de:	b200      	sxth	r0, r0
 80264e0:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80264e4:	442a      	add	r2, r5
 80264e6:	b209      	sxth	r1, r1
 80264e8:	8320      	strh	r0, [r4, #24]
 80264ea:	454a      	cmp	r2, r9
 80264ec:	8361      	strh	r1, [r4, #26]
 80264ee:	d016      	beq.n	802651e <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80264f0:	ea50 0201 	orrs.w	r2, r0, r1
 80264f4:	d00d      	beq.n	8026512 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80264f6:	f1b8 0f00 	cmp.w	r8, #0
 80264fa:	db0a      	blt.n	8026512 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80264fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80264fe:	4541      	cmp	r1, r8
 8026500:	dd07      	ble.n	8026512 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8026502:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026506:	4288      	cmp	r0, r1
 8026508:	d330      	bcc.n	802656c <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 802650a:	f04f 0201 	mov.w	r2, #1
 802650e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8026512:	f04f 0200 	mov.w	r2, #0
 8026516:	82a5      	strh	r5, [r4, #20]
 8026518:	82e6      	strh	r6, [r4, #22]
 802651a:	8322      	strh	r2, [r4, #24]
 802651c:	8362      	strh	r2, [r4, #26]
 802651e:	9904      	ldr	r1, [sp, #16]
 8026520:	42a9      	cmp	r1, r5
 8026522:	d1c5      	bne.n	80264b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8026524:	9a02      	ldr	r2, [sp, #8]
 8026526:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026528:	1ad3      	subs	r3, r2, r3
 802652a:	8b22      	ldrh	r2, [r4, #24]
 802652c:	3120      	adds	r1, #32
 802652e:	441a      	add	r2, r3
 8026530:	8322      	strh	r2, [r4, #24]
 8026532:	9a06      	ldr	r2, [sp, #24]
 8026534:	1a89      	subs	r1, r1, r2
 8026536:	8b62      	ldrh	r2, [r4, #26]
 8026538:	fb03 2301 	mla	r3, r3, r1, r2
 802653c:	e64e      	b.n	80261dc <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 802653e:	f04f 33ff 	mov.w	r3, #4294967295
 8026542:	434a      	muls	r2, r1
 8026544:	427f      	negs	r7, r7
 8026546:	9307      	str	r3, [sp, #28]
 8026548:	2300      	movs	r3, #0
 802654a:	e768      	b.n	802641e <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 802654c:	f104 0314 	add.w	r3, r4, #20
 8026550:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8026554:	cb03      	ldmia	r3!, {r0, r1}
 8026556:	f8c8 0000 	str.w	r0, [r8]
 802655a:	f8c8 1004 	str.w	r1, [r8, #4]
 802655e:	6923      	ldr	r3, [r4, #16]
 8026560:	3308      	adds	r3, #8
 8026562:	6123      	str	r3, [r4, #16]
 8026564:	68a3      	ldr	r3, [r4, #8]
 8026566:	3301      	adds	r3, #1
 8026568:	60a3      	str	r3, [r4, #8]
 802656a:	e783      	b.n	8026474 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802656c:	f104 0814 	add.w	r8, r4, #20
 8026570:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8026574:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8026578:	f8c9 0000 	str.w	r0, [r9]
 802657c:	f8c9 1004 	str.w	r1, [r9, #4]
 8026580:	6921      	ldr	r1, [r4, #16]
 8026582:	3108      	adds	r1, #8
 8026584:	6121      	str	r1, [r4, #16]
 8026586:	68a1      	ldr	r1, [r4, #8]
 8026588:	3101      	adds	r1, #1
 802658a:	60a1      	str	r1, [r4, #8]
 802658c:	e7c1      	b.n	8026512 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802658e:	f104 0314 	add.w	r3, r4, #20
 8026592:	6925      	ldr	r5, [r4, #16]
 8026594:	cb03      	ldmia	r3!, {r0, r1}
 8026596:	6028      	str	r0, [r5, #0]
 8026598:	6069      	str	r1, [r5, #4]
 802659a:	6923      	ldr	r3, [r4, #16]
 802659c:	3308      	adds	r3, #8
 802659e:	6123      	str	r3, [r4, #16]
 80265a0:	68a3      	ldr	r3, [r4, #8]
 80265a2:	3301      	adds	r3, #1
 80265a4:	60a3      	str	r3, [r4, #8]
 80265a6:	e66a      	b.n	802627e <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80265a8:	f104 0314 	add.w	r3, r4, #20
 80265ac:	6925      	ldr	r5, [r4, #16]
 80265ae:	cb03      	ldmia	r3!, {r0, r1}
 80265b0:	6028      	str	r0, [r5, #0]
 80265b2:	6069      	str	r1, [r5, #4]
 80265b4:	6923      	ldr	r3, [r4, #16]
 80265b6:	3308      	adds	r3, #8
 80265b8:	6123      	str	r3, [r4, #16]
 80265ba:	68a3      	ldr	r3, [r4, #8]
 80265bc:	3301      	adds	r3, #1
 80265be:	60a3      	str	r3, [r4, #8]
 80265c0:	e6be      	b.n	8026340 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80265c2:	f00b 031f 	and.w	r3, fp, #31
 80265c6:	114f      	asrs	r7, r1, #5
 80265c8:	8b20      	ldrh	r0, [r4, #24]
 80265ca:	f001 011f 	and.w	r1, r1, #31
 80265ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80265d0:	9b04      	ldr	r3, [sp, #16]
 80265d2:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 80265d6:	429f      	cmp	r7, r3
 80265d8:	d10a      	bne.n	80265f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 80265da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80265dc:	4418      	add	r0, r3
 80265de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80265e0:	4419      	add	r1, r3
 80265e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80265e4:	8320      	strh	r0, [r4, #24]
 80265e6:	fb03 9901 	mla	r9, r3, r1, r9
 80265ea:	f8a4 901a 	strh.w	r9, [r4, #26]
 80265ee:	e6af      	b.n	8026350 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80265f0:	2d00      	cmp	r5, #0
 80265f2:	f2c0 809b 	blt.w	802672c <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 80265f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80265f8:	f1c1 0320 	rsb	r3, r1, #32
 80265fc:	4373      	muls	r3, r6
 80265fe:	2601      	movs	r6, #1
 8026600:	960e      	str	r6, [sp, #56]	; 0x38
 8026602:	2620      	movs	r6, #32
 8026604:	960d      	str	r6, [sp, #52]	; 0x34
 8026606:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026608:	fb93 f6f5 	sdiv	r6, r3, r5
 802660c:	4411      	add	r1, r2
 802660e:	fb05 3316 	mls	r3, r5, r6, r3
 8026612:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026614:	2b00      	cmp	r3, #0
 8026616:	4417      	add	r7, r2
 8026618:	9a00      	ldr	r2, [sp, #0]
 802661a:	bfbc      	itt	lt
 802661c:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8026620:	195b      	addlt	r3, r3, r5
 8026622:	0412      	lsls	r2, r2, #16
 8026624:	fb06 9101 	mla	r1, r6, r1, r9
 8026628:	4430      	add	r0, r6
 802662a:	eb07 0902 	add.w	r9, r7, r2
 802662e:	9210      	str	r2, [sp, #64]	; 0x40
 8026630:	b200      	sxth	r0, r0
 8026632:	b209      	sxth	r1, r1
 8026634:	45c1      	cmp	r9, r8
 8026636:	8320      	strh	r0, [r4, #24]
 8026638:	8361      	strh	r1, [r4, #26]
 802663a:	d017      	beq.n	802666c <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 802663c:	ea50 0201 	orrs.w	r2, r0, r1
 8026640:	d00d      	beq.n	802665e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8026642:	f1be 0f00 	cmp.w	lr, #0
 8026646:	db0a      	blt.n	802665e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8026648:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802664a:	4571      	cmp	r1, lr
 802664c:	dd07      	ble.n	802665e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802664e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026652:	4288      	cmp	r0, r1
 8026654:	d372      	bcc.n	802673c <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8026656:	f04f 0201 	mov.w	r2, #1
 802665a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802665e:	9a00      	ldr	r2, [sp, #0]
 8026660:	82a7      	strh	r7, [r4, #20]
 8026662:	82e2      	strh	r2, [r4, #22]
 8026664:	f8a4 c018 	strh.w	ip, [r4, #24]
 8026668:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802666c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802666e:	eb02 0e06 	add.w	lr, r2, r6
 8026672:	9a04      	ldr	r2, [sp, #16]
 8026674:	42ba      	cmp	r2, r7
 8026676:	d049      	beq.n	802670c <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8026678:	9a02      	ldr	r2, [sp, #8]
 802667a:	1b5b      	subs	r3, r3, r5
 802667c:	eba2 010e 	sub.w	r1, r2, lr
 8026680:	440e      	add	r6, r1
 8026682:	0176      	lsls	r6, r6, #5
 8026684:	fb96 f8f5 	sdiv	r8, r6, r5
 8026688:	fb05 6618 	mls	r6, r5, r8, r6
 802668c:	2e00      	cmp	r6, #0
 802668e:	bfbc      	itt	lt
 8026690:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8026694:	1976      	addlt	r6, r6, r5
 8026696:	f108 0201 	add.w	r2, r8, #1
 802669a:	9211      	str	r2, [sp, #68]	; 0x44
 802669c:	199b      	adds	r3, r3, r6
 802669e:	8b20      	ldrh	r0, [r4, #24]
 80266a0:	8b61      	ldrh	r1, [r4, #26]
 80266a2:	bf54      	ite	pl
 80266a4:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 80266a8:	46c1      	movmi	r9, r8
 80266aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80266ac:	bf58      	it	pl
 80266ae:	1b5b      	subpl	r3, r3, r5
 80266b0:	4448      	add	r0, r9
 80266b2:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 80266b6:	4417      	add	r7, r2
 80266b8:	44ce      	add	lr, r9
 80266ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80266bc:	b200      	sxth	r0, r0
 80266be:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 80266c2:	b209      	sxth	r1, r1
 80266c4:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 80266c8:	443a      	add	r2, r7
 80266ca:	8320      	strh	r0, [r4, #24]
 80266cc:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 80266d0:	8361      	strh	r1, [r4, #26]
 80266d2:	4552      	cmp	r2, sl
 80266d4:	d017      	beq.n	8026706 <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 80266d6:	ea50 0201 	orrs.w	r2, r0, r1
 80266da:	d00d      	beq.n	80266f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80266dc:	f1b9 0f00 	cmp.w	r9, #0
 80266e0:	db0a      	blt.n	80266f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80266e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80266e4:	4549      	cmp	r1, r9
 80266e6:	dd07      	ble.n	80266f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80266e8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80266ec:	4288      	cmp	r0, r1
 80266ee:	d336      	bcc.n	802675e <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 80266f0:	f04f 0201 	mov.w	r2, #1
 80266f4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80266f8:	9a00      	ldr	r2, [sp, #0]
 80266fa:	82a7      	strh	r7, [r4, #20]
 80266fc:	82e2      	strh	r2, [r4, #22]
 80266fe:	f8a4 c018 	strh.w	ip, [r4, #24]
 8026702:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8026706:	9a04      	ldr	r2, [sp, #16]
 8026708:	42ba      	cmp	r2, r7
 802670a:	d1c7      	bne.n	802669c <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802670c:	9b02      	ldr	r3, [sp, #8]
 802670e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8026710:	eba3 0e0e 	sub.w	lr, r3, lr
 8026714:	8b23      	ldrh	r3, [r4, #24]
 8026716:	3120      	adds	r1, #32
 8026718:	4473      	add	r3, lr
 802671a:	8323      	strh	r3, [r4, #24]
 802671c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802671e:	1ac9      	subs	r1, r1, r3
 8026720:	8b63      	ldrh	r3, [r4, #26]
 8026722:	fb0e 3e01 	mla	lr, lr, r1, r3
 8026726:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802672a:	e611      	b.n	8026350 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 802672c:	f04f 36ff 	mov.w	r6, #4294967295
 8026730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026732:	426d      	negs	r5, r5
 8026734:	960e      	str	r6, [sp, #56]	; 0x38
 8026736:	2600      	movs	r6, #0
 8026738:	434b      	muls	r3, r1
 802673a:	e763      	b.n	8026604 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 802673c:	f104 0e14 	add.w	lr, r4, #20
 8026740:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8026744:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8026748:	f8c8 0000 	str.w	r0, [r8]
 802674c:	f8c8 1004 	str.w	r1, [r8, #4]
 8026750:	6921      	ldr	r1, [r4, #16]
 8026752:	3108      	adds	r1, #8
 8026754:	6121      	str	r1, [r4, #16]
 8026756:	68a1      	ldr	r1, [r4, #8]
 8026758:	3101      	adds	r1, #1
 802675a:	60a1      	str	r1, [r4, #8]
 802675c:	e77f      	b.n	802665e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802675e:	f104 0914 	add.w	r9, r4, #20
 8026762:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8026766:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 802676a:	f8ca 0000 	str.w	r0, [sl]
 802676e:	f8ca 1004 	str.w	r1, [sl, #4]
 8026772:	6921      	ldr	r1, [r4, #16]
 8026774:	3108      	adds	r1, #8
 8026776:	6121      	str	r1, [r4, #16]
 8026778:	68a1      	ldr	r1, [r4, #8]
 802677a:	3101      	adds	r1, #1
 802677c:	60a1      	str	r1, [r4, #8]
 802677e:	e7bb      	b.n	80266f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8026780:	f104 0314 	add.w	r3, r4, #20
 8026784:	6925      	ldr	r5, [r4, #16]
 8026786:	cb03      	ldmia	r3!, {r0, r1}
 8026788:	6028      	str	r0, [r5, #0]
 802678a:	6069      	str	r1, [r5, #4]
 802678c:	6923      	ldr	r3, [r4, #16]
 802678e:	3308      	adds	r3, #8
 8026790:	6123      	str	r3, [r4, #16]
 8026792:	68a3      	ldr	r3, [r4, #8]
 8026794:	3301      	adds	r3, #1
 8026796:	60a3      	str	r3, [r4, #8]
 8026798:	e5fd      	b.n	8026396 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802679a:	f104 0314 	add.w	r3, r4, #20
 802679e:	6925      	ldr	r5, [r4, #16]
 80267a0:	cb03      	ldmia	r3!, {r0, r1}
 80267a2:	6028      	str	r0, [r5, #0]
 80267a4:	6069      	str	r1, [r5, #4]
 80267a6:	6923      	ldr	r3, [r4, #16]
 80267a8:	3308      	adds	r3, #8
 80267aa:	6123      	str	r3, [r4, #16]
 80267ac:	68a3      	ldr	r3, [r4, #8]
 80267ae:	3301      	adds	r3, #1
 80267b0:	60a3      	str	r3, [r4, #8]
 80267b2:	e625      	b.n	8026400 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80267b4:	9b05      	ldr	r3, [sp, #20]
 80267b6:	ea4f 176b 	mov.w	r7, fp, asr #5
 80267ba:	f00b 081f 	and.w	r8, fp, #31
 80267be:	8b20      	ldrh	r0, [r4, #24]
 80267c0:	f003 031f 	and.w	r3, r3, #31
 80267c4:	4577      	cmp	r7, lr
 80267c6:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 80267ca:	9302      	str	r3, [sp, #8]
 80267cc:	9b03      	ldr	r3, [sp, #12]
 80267ce:	eba3 050c 	sub.w	r5, r3, ip
 80267d2:	d108      	bne.n	80267e6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 80267d4:	9b02      	ldr	r3, [sp, #8]
 80267d6:	4428      	add	r0, r5
 80267d8:	4498      	add	r8, r3
 80267da:	8320      	strh	r0, [r4, #24]
 80267dc:	fb05 9508 	mla	r5, r5, r8, r9
 80267e0:	8365      	strh	r5, [r4, #26]
 80267e2:	f7ff bb4f 	b.w	8025e84 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80267e6:	9b05      	ldr	r3, [sp, #20]
 80267e8:	ebb3 030b 	subs.w	r3, r3, fp
 80267ec:	f100 809c 	bmi.w	8026928 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 80267f0:	f1c8 0120 	rsb	r1, r8, #32
 80267f4:	2201      	movs	r2, #1
 80267f6:	f04f 0b20 	mov.w	fp, #32
 80267fa:	434d      	muls	r5, r1
 80267fc:	9201      	str	r2, [sp, #4]
 80267fe:	9a01      	ldr	r2, [sp, #4]
 8026800:	44d8      	add	r8, fp
 8026802:	fb95 f6f3 	sdiv	r6, r5, r3
 8026806:	fb03 5516 	mls	r5, r3, r6, r5
 802680a:	4417      	add	r7, r2
 802680c:	9a00      	ldr	r2, [sp, #0]
 802680e:	2d00      	cmp	r5, #0
 8026810:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8026814:	bfbc      	itt	lt
 8026816:	f106 36ff 	addlt.w	r6, r6, #4294967295
 802681a:	18ed      	addlt	r5, r5, r3
 802681c:	eb07 0a02 	add.w	sl, r7, r2
 8026820:	9204      	str	r2, [sp, #16]
 8026822:	fb06 9808 	mla	r8, r6, r8, r9
 8026826:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802682a:	4430      	add	r0, r6
 802682c:	fa0f f188 	sxth.w	r1, r8
 8026830:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8026834:	b200      	sxth	r0, r0
 8026836:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802683a:	8361      	strh	r1, [r4, #26]
 802683c:	8320      	strh	r0, [r4, #24]
 802683e:	45ca      	cmp	sl, r9
 8026840:	d015      	beq.n	802686e <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 8026842:	ea50 0201 	orrs.w	r2, r0, r1
 8026846:	d00c      	beq.n	8026862 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8026848:	f1b8 0f00 	cmp.w	r8, #0
 802684c:	db09      	blt.n	8026862 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802684e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026850:	4541      	cmp	r1, r8
 8026852:	dd06      	ble.n	8026862 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8026854:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8026858:	4288      	cmp	r0, r1
 802685a:	d36e      	bcc.n	802693a <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 802685c:	2101      	movs	r1, #1
 802685e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8026862:	2100      	movs	r1, #0
 8026864:	9a00      	ldr	r2, [sp, #0]
 8026866:	82a7      	strh	r7, [r4, #20]
 8026868:	82e2      	strh	r2, [r4, #22]
 802686a:	8321      	strh	r1, [r4, #24]
 802686c:	8361      	strh	r1, [r4, #26]
 802686e:	45be      	cmp	lr, r7
 8026870:	44b4      	add	ip, r6
 8026872:	d048      	beq.n	8026906 <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8026874:	9a03      	ldr	r2, [sp, #12]
 8026876:	1aed      	subs	r5, r5, r3
 8026878:	eba2 010c 	sub.w	r1, r2, ip
 802687c:	440e      	add	r6, r1
 802687e:	0176      	lsls	r6, r6, #5
 8026880:	fb96 f8f3 	sdiv	r8, r6, r3
 8026884:	fb03 6618 	mls	r6, r3, r8, r6
 8026888:	2e00      	cmp	r6, #0
 802688a:	bfbc      	itt	lt
 802688c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8026890:	18f6      	addlt	r6, r6, r3
 8026892:	f108 0201 	add.w	r2, r8, #1
 8026896:	9205      	str	r2, [sp, #20]
 8026898:	19ad      	adds	r5, r5, r6
 802689a:	8b20      	ldrh	r0, [r4, #24]
 802689c:	8b61      	ldrh	r1, [r4, #26]
 802689e:	bf54      	ite	pl
 80268a0:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 80268a4:	46c1      	movmi	r9, r8
 80268a6:	9a01      	ldr	r2, [sp, #4]
 80268a8:	bf58      	it	pl
 80268aa:	1aed      	subpl	r5, r5, r3
 80268ac:	4448      	add	r0, r9
 80268ae:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 80268b2:	4417      	add	r7, r2
 80268b4:	44cc      	add	ip, r9
 80268b6:	9a04      	ldr	r2, [sp, #16]
 80268b8:	b200      	sxth	r0, r0
 80268ba:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 80268be:	b209      	sxth	r1, r1
 80268c0:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 80268c4:	443a      	add	r2, r7
 80268c6:	8320      	strh	r0, [r4, #24]
 80268c8:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 80268cc:	8361      	strh	r1, [r4, #26]
 80268ce:	4552      	cmp	r2, sl
 80268d0:	d017      	beq.n	8026902 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 80268d2:	ea50 0201 	orrs.w	r2, r0, r1
 80268d6:	d00d      	beq.n	80268f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80268d8:	f1b9 0f00 	cmp.w	r9, #0
 80268dc:	db0a      	blt.n	80268f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80268de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80268e0:	4549      	cmp	r1, r9
 80268e2:	dd07      	ble.n	80268f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80268e4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80268e8:	4288      	cmp	r0, r1
 80268ea:	d337      	bcc.n	802695c <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 80268ec:	f04f 0201 	mov.w	r2, #1
 80268f0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80268f4:	9a00      	ldr	r2, [sp, #0]
 80268f6:	82a7      	strh	r7, [r4, #20]
 80268f8:	82e2      	strh	r2, [r4, #22]
 80268fa:	f04f 0200 	mov.w	r2, #0
 80268fe:	8322      	strh	r2, [r4, #24]
 8026900:	8362      	strh	r2, [r4, #26]
 8026902:	45be      	cmp	lr, r7
 8026904:	d1c8      	bne.n	8026898 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 8026906:	9b03      	ldr	r3, [sp, #12]
 8026908:	8b62      	ldrh	r2, [r4, #26]
 802690a:	eba3 0c0c 	sub.w	ip, r3, ip
 802690e:	8b23      	ldrh	r3, [r4, #24]
 8026910:	4463      	add	r3, ip
 8026912:	8323      	strh	r3, [r4, #24]
 8026914:	9b02      	ldr	r3, [sp, #8]
 8026916:	3320      	adds	r3, #32
 8026918:	eba3 030b 	sub.w	r3, r3, fp
 802691c:	fb0c 2c03 	mla	ip, ip, r3, r2
 8026920:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8026924:	f7ff baae 	b.w	8025e84 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8026928:	f04f 32ff 	mov.w	r2, #4294967295
 802692c:	fb05 f508 	mul.w	r5, r5, r8
 8026930:	425b      	negs	r3, r3
 8026932:	f04f 0b00 	mov.w	fp, #0
 8026936:	9201      	str	r2, [sp, #4]
 8026938:	e761      	b.n	80267fe <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 802693a:	f104 0814 	add.w	r8, r4, #20
 802693e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8026942:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8026946:	f8c9 0000 	str.w	r0, [r9]
 802694a:	f8c9 1004 	str.w	r1, [r9, #4]
 802694e:	6921      	ldr	r1, [r4, #16]
 8026950:	3108      	adds	r1, #8
 8026952:	6121      	str	r1, [r4, #16]
 8026954:	68a1      	ldr	r1, [r4, #8]
 8026956:	3101      	adds	r1, #1
 8026958:	60a1      	str	r1, [r4, #8]
 802695a:	e782      	b.n	8026862 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802695c:	f104 0914 	add.w	r9, r4, #20
 8026960:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8026964:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8026968:	f8ca 0000 	str.w	r0, [sl]
 802696c:	f8ca 1004 	str.w	r1, [sl, #4]
 8026970:	6921      	ldr	r1, [r4, #16]
 8026972:	3108      	adds	r1, #8
 8026974:	6121      	str	r1, [r4, #16]
 8026976:	68a1      	ldr	r1, [r4, #8]
 8026978:	3101      	adds	r1, #1
 802697a:	60a1      	str	r1, [r4, #8]
 802697c:	e7ba      	b.n	80268f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

0802697e <_ZN8touchgfx7Outline6lineToEii>:
 802697e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026980:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8026982:	4604      	mov	r4, r0
 8026984:	460d      	mov	r5, r1
 8026986:	4616      	mov	r6, r2
 8026988:	079b      	lsls	r3, r3, #30
 802698a:	d526      	bpl.n	80269da <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802698c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8026990:	ea85 0001 	eor.w	r0, r5, r1
 8026994:	ea86 0302 	eor.w	r3, r6, r2
 8026998:	4303      	orrs	r3, r0
 802699a:	d01e      	beq.n	80269da <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802699c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802699e:	114b      	asrs	r3, r1, #5
 80269a0:	9600      	str	r6, [sp, #0]
 80269a2:	4283      	cmp	r3, r0
 80269a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80269a6:	bfb8      	it	lt
 80269a8:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 80269aa:	3301      	adds	r3, #1
 80269ac:	4283      	cmp	r3, r0
 80269ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80269b0:	bfc8      	it	gt
 80269b2:	6363      	strgt	r3, [r4, #52]	; 0x34
 80269b4:	116b      	asrs	r3, r5, #5
 80269b6:	4283      	cmp	r3, r0
 80269b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80269ba:	bfb8      	it	lt
 80269bc:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 80269be:	3301      	adds	r3, #1
 80269c0:	4283      	cmp	r3, r0
 80269c2:	4620      	mov	r0, r4
 80269c4:	bfc8      	it	gt
 80269c6:	6363      	strgt	r3, [r4, #52]	; 0x34
 80269c8:	462b      	mov	r3, r5
 80269ca:	f7ff f9e3 	bl	8025d94 <_ZN8touchgfx7Outline10renderLineEiiii>
 80269ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80269d0:	f043 0301 	orr.w	r3, r3, #1
 80269d4:	e9c4 5607 	strd	r5, r6, [r4, #28]
 80269d8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80269da:	b002      	add	sp, #8
 80269dc:	bd70      	pop	{r4, r5, r6, pc}

080269de <_ZN8touchgfx7Outline6moveToEii>:
 80269de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80269e0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80269e2:	4615      	mov	r5, r2
 80269e4:	4604      	mov	r4, r0
 80269e6:	460e      	mov	r6, r1
 80269e8:	079a      	lsls	r2, r3, #30
 80269ea:	d401      	bmi.n	80269f0 <_ZN8touchgfx7Outline6moveToEii+0x12>
 80269ec:	f7ff f98c 	bl	8025d08 <_ZN8touchgfx7Outline5resetEv>
 80269f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80269f2:	07db      	lsls	r3, r3, #31
 80269f4:	d504      	bpl.n	8026a00 <_ZN8touchgfx7Outline6moveToEii+0x22>
 80269f6:	4620      	mov	r0, r4
 80269f8:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 80269fc:	f7ff ffbf 	bl	802697e <_ZN8touchgfx7Outline6lineToEii>
 8026a00:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8026a04:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8026a08:	116f      	asrs	r7, r5, #5
 8026a0a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8026a0e:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8026a12:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8026a16:	4291      	cmp	r1, r2
 8026a18:	d015      	beq.n	8026a46 <_ZN8touchgfx7Outline6moveToEii+0x68>
 8026a1a:	8b61      	ldrh	r1, [r4, #26]
 8026a1c:	8b22      	ldrh	r2, [r4, #24]
 8026a1e:	430a      	orrs	r2, r1
 8026a20:	d00b      	beq.n	8026a3a <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8026a22:	2b00      	cmp	r3, #0
 8026a24:	db09      	blt.n	8026a3a <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8026a26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8026a28:	429a      	cmp	r2, r3
 8026a2a:	dd06      	ble.n	8026a3a <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8026a2c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8026a30:	429a      	cmp	r2, r3
 8026a32:	d30d      	bcc.n	8026a50 <_ZN8touchgfx7Outline6moveToEii+0x72>
 8026a34:	2301      	movs	r3, #1
 8026a36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026a3a:	2300      	movs	r3, #0
 8026a3c:	f8a4 c014 	strh.w	ip, [r4, #20]
 8026a40:	82e7      	strh	r7, [r4, #22]
 8026a42:	8323      	strh	r3, [r4, #24]
 8026a44:	8363      	strh	r3, [r4, #26]
 8026a46:	61e6      	str	r6, [r4, #28]
 8026a48:	62a5      	str	r5, [r4, #40]	; 0x28
 8026a4a:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8026a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026a50:	f104 0314 	add.w	r3, r4, #20
 8026a54:	6922      	ldr	r2, [r4, #16]
 8026a56:	cb03      	ldmia	r3!, {r0, r1}
 8026a58:	6010      	str	r0, [r2, #0]
 8026a5a:	6051      	str	r1, [r2, #4]
 8026a5c:	6923      	ldr	r3, [r4, #16]
 8026a5e:	3308      	adds	r3, #8
 8026a60:	6123      	str	r3, [r4, #16]
 8026a62:	68a3      	ldr	r3, [r4, #8]
 8026a64:	3301      	adds	r3, #1
 8026a66:	60a3      	str	r3, [r4, #8]
 8026a68:	e7e7      	b.n	8026a3a <_ZN8touchgfx7Outline6moveToEii+0x5c>

08026a6a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8026a6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a6e:	b0d1      	sub	sp, #324	; 0x144
 8026a70:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8026a74:	466c      	mov	r4, sp
 8026a76:	1a0d      	subs	r5, r1, r0
 8026a78:	f100 0208 	add.w	r2, r0, #8
 8026a7c:	2d48      	cmp	r5, #72	; 0x48
 8026a7e:	f340 80ba 	ble.w	8026bf6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8026a82:	112d      	asrs	r5, r5, #4
 8026a84:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8026a88:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8026a8c:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8026a90:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8026a94:	f9b0 8000 	ldrsh.w	r8, [r0]
 8026a98:	681e      	ldr	r6, [r3, #0]
 8026a9a:	6006      	str	r6, [r0, #0]
 8026a9c:	685e      	ldr	r6, [r3, #4]
 8026a9e:	6046      	str	r6, [r0, #4]
 8026aa0:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8026aa4:	f8a3 c004 	strh.w	ip, [r3, #4]
 8026aa8:	f8a3 e002 	strh.w	lr, [r3, #2]
 8026aac:	80df      	strh	r7, [r3, #6]
 8026aae:	f1a1 0308 	sub.w	r3, r1, #8
 8026ab2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8026ab6:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8026aba:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8026abe:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8026ac2:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8026ac6:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8026aca:	45ac      	cmp	ip, r5
 8026acc:	dd0f      	ble.n	8026aee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8026ace:	681d      	ldr	r5, [r3, #0]
 8026ad0:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8026ad4:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8026ad8:	6015      	str	r5, [r2, #0]
 8026ada:	685d      	ldr	r5, [r3, #4]
 8026adc:	6055      	str	r5, [r2, #4]
 8026ade:	f821 7c08 	strh.w	r7, [r1, #-8]
 8026ae2:	f821 6c06 	strh.w	r6, [r1, #-6]
 8026ae6:	f821 ec04 	strh.w	lr, [r1, #-4]
 8026aea:	f821 cc02 	strh.w	ip, [r1, #-2]
 8026aee:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8026af2:	f9b0 7000 	ldrsh.w	r7, [r0]
 8026af6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8026afa:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8026afe:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8026b02:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8026b06:	4565      	cmp	r5, ip
 8026b08:	dd0d      	ble.n	8026b26 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8026b0a:	6815      	ldr	r5, [r2, #0]
 8026b0c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8026b10:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8026b14:	6005      	str	r5, [r0, #0]
 8026b16:	6855      	ldr	r5, [r2, #4]
 8026b18:	8107      	strh	r7, [r0, #8]
 8026b1a:	6045      	str	r5, [r0, #4]
 8026b1c:	8146      	strh	r6, [r0, #10]
 8026b1e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8026b22:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8026b26:	f9b0 7000 	ldrsh.w	r7, [r0]
 8026b2a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8026b2e:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8026b32:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8026b36:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8026b3a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8026b3e:	45ac      	cmp	ip, r5
 8026b40:	dd0f      	ble.n	8026b62 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8026b42:	681d      	ldr	r5, [r3, #0]
 8026b44:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8026b48:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8026b4c:	6005      	str	r5, [r0, #0]
 8026b4e:	685d      	ldr	r5, [r3, #4]
 8026b50:	6045      	str	r5, [r0, #4]
 8026b52:	f821 7c08 	strh.w	r7, [r1, #-8]
 8026b56:	f821 6c06 	strh.w	r6, [r1, #-6]
 8026b5a:	f821 ec04 	strh.w	lr, [r1, #-4]
 8026b5e:	f821 cc02 	strh.w	ip, [r1, #-2]
 8026b62:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8026b66:	f102 0508 	add.w	r5, r2, #8
 8026b6a:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8026b6e:	f9b0 e000 	ldrsh.w	lr, [r0]
 8026b72:	462f      	mov	r7, r5
 8026b74:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8026b78:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8026b7c:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8026b80:	45b2      	cmp	sl, r6
 8026b82:	dc18      	bgt.n	8026bb6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8026b84:	3b08      	subs	r3, #8
 8026b86:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8026b8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8026b8e:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8026b92:	45b2      	cmp	sl, r6
 8026b94:	dbf6      	blt.n	8026b84 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8026b96:	42ab      	cmp	r3, r5
 8026b98:	681e      	ldr	r6, [r3, #0]
 8026b9a:	d30e      	bcc.n	8026bba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8026b9c:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8026ba0:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8026ba4:	602e      	str	r6, [r5, #0]
 8026ba6:	685e      	ldr	r6, [r3, #4]
 8026ba8:	606e      	str	r6, [r5, #4]
 8026baa:	f8a3 9000 	strh.w	r9, [r3]
 8026bae:	f8a3 8002 	strh.w	r8, [r3, #2]
 8026bb2:	809f      	strh	r7, [r3, #4]
 8026bb4:	80da      	strh	r2, [r3, #6]
 8026bb6:	462a      	mov	r2, r5
 8026bb8:	e7d3      	b.n	8026b62 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8026bba:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8026bbe:	6006      	str	r6, [r0, #0]
 8026bc0:	685e      	ldr	r6, [r3, #4]
 8026bc2:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8026bc6:	6046      	str	r6, [r0, #4]
 8026bc8:	1a1e      	subs	r6, r3, r0
 8026bca:	80da      	strh	r2, [r3, #6]
 8026bcc:	1b4a      	subs	r2, r1, r5
 8026bce:	f8a3 e000 	strh.w	lr, [r3]
 8026bd2:	10d2      	asrs	r2, r2, #3
 8026bd4:	f8a3 c002 	strh.w	ip, [r3, #2]
 8026bd8:	f8a3 8004 	strh.w	r8, [r3, #4]
 8026bdc:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8026be0:	bfb5      	itete	lt
 8026be2:	e9c4 0300 	strdlt	r0, r3, [r4]
 8026be6:	4607      	movge	r7, r0
 8026be8:	460b      	movlt	r3, r1
 8026bea:	e9c4 5100 	strdge	r5, r1, [r4]
 8026bee:	4638      	mov	r0, r7
 8026bf0:	3408      	adds	r4, #8
 8026bf2:	4619      	mov	r1, r3
 8026bf4:	e73f      	b.n	8026a76 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8026bf6:	4291      	cmp	r1, r2
 8026bf8:	d925      	bls.n	8026c46 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8026bfa:	f1a2 0310 	sub.w	r3, r2, #16
 8026bfe:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8026c02:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8026c06:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8026c0a:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8026c0e:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8026c12:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8026c16:	42b5      	cmp	r5, r6
 8026c18:	dd13      	ble.n	8026c42 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8026c1a:	461d      	mov	r5, r3
 8026c1c:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8026c20:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8026c24:	3b08      	subs	r3, #8
 8026c26:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8026c2a:	619e      	str	r6, [r3, #24]
 8026c2c:	42a8      	cmp	r0, r5
 8026c2e:	686e      	ldr	r6, [r5, #4]
 8026c30:	f8a3 c010 	strh.w	ip, [r3, #16]
 8026c34:	61de      	str	r6, [r3, #28]
 8026c36:	825f      	strh	r7, [r3, #18]
 8026c38:	f8a3 8014 	strh.w	r8, [r3, #20]
 8026c3c:	f8a3 e016 	strh.w	lr, [r3, #22]
 8026c40:	d1dd      	bne.n	8026bfe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8026c42:	3208      	adds	r2, #8
 8026c44:	e7d7      	b.n	8026bf6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8026c46:	466b      	mov	r3, sp
 8026c48:	429c      	cmp	r4, r3
 8026c4a:	d903      	bls.n	8026c54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8026c4c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8026c50:	3c08      	subs	r4, #8
 8026c52:	e710      	b.n	8026a76 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8026c54:	b051      	add	sp, #324	; 0x144
 8026c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026c5a <_ZN8touchgfx7Outline9sortCellsEv>:
 8026c5a:	6881      	ldr	r1, [r0, #8]
 8026c5c:	b111      	cbz	r1, 8026c64 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8026c5e:	68c0      	ldr	r0, [r0, #12]
 8026c60:	f7ff bf03 	b.w	8026a6a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8026c64:	4770      	bx	lr

08026c66 <_ZN8touchgfx7Outline8getCellsEv>:
 8026c66:	b510      	push	{r4, lr}
 8026c68:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8026c6a:	4604      	mov	r4, r0
 8026c6c:	07da      	lsls	r2, r3, #31
 8026c6e:	d507      	bpl.n	8026c80 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8026c70:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8026c74:	f7ff fe83 	bl	802697e <_ZN8touchgfx7Outline6lineToEii>
 8026c78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8026c7a:	f023 0301 	bic.w	r3, r3, #1
 8026c7e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8026c80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8026c82:	079b      	lsls	r3, r3, #30
 8026c84:	d51a      	bpl.n	8026cbc <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8026c86:	8b62      	ldrh	r2, [r4, #26]
 8026c88:	8b23      	ldrh	r3, [r4, #24]
 8026c8a:	4313      	orrs	r3, r2
 8026c8c:	d00d      	beq.n	8026caa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8026c8e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8026c92:	2b00      	cmp	r3, #0
 8026c94:	db09      	blt.n	8026caa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8026c96:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8026c98:	4293      	cmp	r3, r2
 8026c9a:	da06      	bge.n	8026caa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8026c9c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8026ca0:	429a      	cmp	r2, r3
 8026ca2:	d80d      	bhi.n	8026cc0 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8026ca4:	2301      	movs	r3, #1
 8026ca6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026caa:	68a0      	ldr	r0, [r4, #8]
 8026cac:	b138      	cbz	r0, 8026cbe <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8026cae:	4620      	mov	r0, r4
 8026cb0:	f7ff ffd3 	bl	8026c5a <_ZN8touchgfx7Outline9sortCellsEv>
 8026cb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8026cb6:	f023 0302 	bic.w	r3, r3, #2
 8026cba:	63e3      	str	r3, [r4, #60]	; 0x3c
 8026cbc:	68e0      	ldr	r0, [r4, #12]
 8026cbe:	bd10      	pop	{r4, pc}
 8026cc0:	f104 0314 	add.w	r3, r4, #20
 8026cc4:	6922      	ldr	r2, [r4, #16]
 8026cc6:	cb03      	ldmia	r3!, {r0, r1}
 8026cc8:	6010      	str	r0, [r2, #0]
 8026cca:	6051      	str	r1, [r2, #4]
 8026ccc:	6923      	ldr	r3, [r4, #16]
 8026cce:	3308      	adds	r3, #8
 8026cd0:	6123      	str	r3, [r4, #16]
 8026cd2:	68a3      	ldr	r3, [r4, #8]
 8026cd4:	3301      	adds	r3, #1
 8026cd6:	60a3      	str	r3, [r4, #8]
 8026cd8:	e7e7      	b.n	8026caa <_ZN8touchgfx7Outline8getCellsEv+0x44>

08026cda <_ZN8touchgfx8ScanlineD1Ev>:
 8026cda:	4770      	bx	lr

08026cdc <_ZN8touchgfx8ScanlineD0Ev>:
 8026cdc:	b510      	push	{r4, lr}
 8026cde:	4604      	mov	r4, r0
 8026ce0:	2124      	movs	r1, #36	; 0x24
 8026ce2:	f000 f887 	bl	8026df4 <_ZdlPvj>
 8026ce6:	4620      	mov	r0, r4
 8026ce8:	bd10      	pop	{r4, pc}

08026cea <_ZN8touchgfx8Scanline5resetEv>:
 8026cea:	b510      	push	{r4, lr}
 8026cec:	4604      	mov	r4, r0
 8026cee:	f7f2 fd37 	bl	8019760 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8026cf2:	61a0      	str	r0, [r4, #24]
 8026cf4:	f7f2 fd3a 	bl	801976c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8026cf8:	61e0      	str	r0, [r4, #28]
 8026cfa:	f7f2 fd3d 	bl	8019778 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8026cfe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8026d02:	6220      	str	r0, [r4, #32]
 8026d04:	6160      	str	r0, [r4, #20]
 8026d06:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8026d0a:	69e3      	ldr	r3, [r4, #28]
 8026d0c:	6123      	str	r3, [r4, #16]
 8026d0e:	2300      	movs	r3, #0
 8026d10:	60e3      	str	r3, [r4, #12]
 8026d12:	bd10      	pop	{r4, pc}

08026d14 <_ZN8touchgfx8ScanlineC1Ev>:
 8026d14:	4b07      	ldr	r3, [pc, #28]	; (8026d34 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 8026d16:	b510      	push	{r4, lr}
 8026d18:	6003      	str	r3, [r0, #0]
 8026d1a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8026d1e:	4604      	mov	r4, r0
 8026d20:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8026d24:	2300      	movs	r3, #0
 8026d26:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8026d2a:	6143      	str	r3, [r0, #20]
 8026d2c:	f7ff ffdd 	bl	8026cea <_ZN8touchgfx8Scanline5resetEv>
 8026d30:	4620      	mov	r0, r4
 8026d32:	bd10      	pop	{r4, pc}
 8026d34:	0802ca7c 	.word	0x0802ca7c

08026d38 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8026d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026d3c:	1e0c      	subs	r4, r1, #0
 8026d3e:	4605      	mov	r5, r0
 8026d40:	4617      	mov	r7, r2
 8026d42:	461e      	mov	r6, r3
 8026d44:	da03      	bge.n	8026d4e <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8026d46:	4426      	add	r6, r4
 8026d48:	2e01      	cmp	r6, #1
 8026d4a:	d421      	bmi.n	8026d90 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8026d4c:	2400      	movs	r4, #0
 8026d4e:	f7f2 fd01 	bl	8019754 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8026d52:	42a0      	cmp	r0, r4
 8026d54:	d91c      	bls.n	8026d90 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8026d56:	eb04 0806 	add.w	r8, r4, r6
 8026d5a:	f7f2 fcfb 	bl	8019754 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8026d5e:	4580      	cmp	r8, r0
 8026d60:	d902      	bls.n	8026d68 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8026d62:	f7f2 fcf7 	bl	8019754 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8026d66:	1b06      	subs	r6, r0, r4
 8026d68:	69a8      	ldr	r0, [r5, #24]
 8026d6a:	4632      	mov	r2, r6
 8026d6c:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8026d70:	4420      	add	r0, r4
 8026d72:	f7f4 fd93 	bl	801b89c <_ZN8touchgfx6memsetEPvhm>
 8026d76:	686b      	ldr	r3, [r5, #4]
 8026d78:	b2b2      	uxth	r2, r6
 8026d7a:	3301      	adds	r3, #1
 8026d7c:	42a3      	cmp	r3, r4
 8026d7e:	696b      	ldr	r3, [r5, #20]
 8026d80:	d108      	bne.n	8026d94 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8026d82:	8819      	ldrh	r1, [r3, #0]
 8026d84:	440a      	add	r2, r1
 8026d86:	801a      	strh	r2, [r3, #0]
 8026d88:	3c01      	subs	r4, #1
 8026d8a:	4434      	add	r4, r6
 8026d8c:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8026d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026d94:	1c99      	adds	r1, r3, #2
 8026d96:	6169      	str	r1, [r5, #20]
 8026d98:	805a      	strh	r2, [r3, #2]
 8026d9a:	692b      	ldr	r3, [r5, #16]
 8026d9c:	1c9a      	adds	r2, r3, #2
 8026d9e:	612a      	str	r2, [r5, #16]
 8026da0:	805c      	strh	r4, [r3, #2]
 8026da2:	68eb      	ldr	r3, [r5, #12]
 8026da4:	3301      	adds	r3, #1
 8026da6:	60eb      	str	r3, [r5, #12]
 8026da8:	e7ee      	b.n	8026d88 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08026daa <_ZN8touchgfx15RenderingBufferD1Ev>:
 8026daa:	4770      	bx	lr

08026dac <_ZN8touchgfx15RenderingBufferD0Ev>:
 8026dac:	b510      	push	{r4, lr}
 8026dae:	4604      	mov	r4, r0
 8026db0:	2118      	movs	r1, #24
 8026db2:	f000 f81f 	bl	8026df4 <_ZdlPvj>
 8026db6:	4620      	mov	r0, r4
 8026db8:	bd10      	pop	{r4, pc}
	...

08026dbc <_ZN8touchgfx15RenderingBufferC1Ev>:
 8026dbc:	4a04      	ldr	r2, [pc, #16]	; (8026dd0 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 8026dbe:	6002      	str	r2, [r0, #0]
 8026dc0:	2200      	movs	r2, #0
 8026dc2:	6042      	str	r2, [r0, #4]
 8026dc4:	7202      	strb	r2, [r0, #8]
 8026dc6:	6142      	str	r2, [r0, #20]
 8026dc8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8026dcc:	4770      	bx	lr
 8026dce:	bf00      	nop
 8026dd0:	0802ca8c 	.word	0x0802ca8c

08026dd4 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8026dd4:	60c3      	str	r3, [r0, #12]
 8026dd6:	9b00      	ldr	r3, [sp, #0]
 8026dd8:	6041      	str	r1, [r0, #4]
 8026dda:	6103      	str	r3, [r0, #16]
 8026ddc:	9b01      	ldr	r3, [sp, #4]
 8026dde:	7202      	strb	r2, [r0, #8]
 8026de0:	6143      	str	r3, [r0, #20]
 8026de2:	4770      	bx	lr

08026de4 <__aeabi_atexit>:
 8026de4:	460b      	mov	r3, r1
 8026de6:	4601      	mov	r1, r0
 8026de8:	4618      	mov	r0, r3
 8026dea:	f000 b853 	b.w	8026e94 <__cxa_atexit>

08026dee <__cxa_pure_virtual>:
 8026dee:	b508      	push	{r3, lr}
 8026df0:	f000 f820 	bl	8026e34 <_ZSt9terminatev>

08026df4 <_ZdlPvj>:
 8026df4:	f000 b80f 	b.w	8026e16 <_ZdlPv>

08026df8 <__cxa_guard_acquire>:
 8026df8:	6803      	ldr	r3, [r0, #0]
 8026dfa:	07db      	lsls	r3, r3, #31
 8026dfc:	d406      	bmi.n	8026e0c <__cxa_guard_acquire+0x14>
 8026dfe:	7843      	ldrb	r3, [r0, #1]
 8026e00:	b103      	cbz	r3, 8026e04 <__cxa_guard_acquire+0xc>
 8026e02:	deff      	udf	#255	; 0xff
 8026e04:	2301      	movs	r3, #1
 8026e06:	7043      	strb	r3, [r0, #1]
 8026e08:	4618      	mov	r0, r3
 8026e0a:	4770      	bx	lr
 8026e0c:	2000      	movs	r0, #0
 8026e0e:	4770      	bx	lr

08026e10 <__cxa_guard_release>:
 8026e10:	2301      	movs	r3, #1
 8026e12:	6003      	str	r3, [r0, #0]
 8026e14:	4770      	bx	lr

08026e16 <_ZdlPv>:
 8026e16:	f000 b88f 	b.w	8026f38 <free>

08026e1a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8026e1a:	b508      	push	{r3, lr}
 8026e1c:	4780      	blx	r0
 8026e1e:	f000 f80e 	bl	8026e3e <abort>
	...

08026e24 <_ZSt13get_terminatev>:
 8026e24:	4b02      	ldr	r3, [pc, #8]	; (8026e30 <_ZSt13get_terminatev+0xc>)
 8026e26:	6818      	ldr	r0, [r3, #0]
 8026e28:	f3bf 8f5b 	dmb	ish
 8026e2c:	4770      	bx	lr
 8026e2e:	bf00      	nop
 8026e30:	20000094 	.word	0x20000094

08026e34 <_ZSt9terminatev>:
 8026e34:	b508      	push	{r3, lr}
 8026e36:	f7ff fff5 	bl	8026e24 <_ZSt13get_terminatev>
 8026e3a:	f7ff ffee 	bl	8026e1a <_ZN10__cxxabiv111__terminateEPFvvE>

08026e3e <abort>:
 8026e3e:	b508      	push	{r3, lr}
 8026e40:	2006      	movs	r0, #6
 8026e42:	f000 fc3d 	bl	80276c0 <raise>
 8026e46:	2001      	movs	r0, #1
 8026e48:	f7dc f938 	bl	80030bc <_exit>

08026e4c <__assert_func>:
 8026e4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026e4e:	461c      	mov	r4, r3
 8026e50:	4b09      	ldr	r3, [pc, #36]	; (8026e78 <__assert_func+0x2c>)
 8026e52:	681b      	ldr	r3, [r3, #0]
 8026e54:	4605      	mov	r5, r0
 8026e56:	68d8      	ldr	r0, [r3, #12]
 8026e58:	b152      	cbz	r2, 8026e70 <__assert_func+0x24>
 8026e5a:	4b08      	ldr	r3, [pc, #32]	; (8026e7c <__assert_func+0x30>)
 8026e5c:	9100      	str	r1, [sp, #0]
 8026e5e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8026e62:	4907      	ldr	r1, [pc, #28]	; (8026e80 <__assert_func+0x34>)
 8026e64:	462b      	mov	r3, r5
 8026e66:	4622      	mov	r2, r4
 8026e68:	f000 f828 	bl	8026ebc <fiprintf>
 8026e6c:	f7ff ffe7 	bl	8026e3e <abort>
 8026e70:	4b04      	ldr	r3, [pc, #16]	; (8026e84 <__assert_func+0x38>)
 8026e72:	461a      	mov	r2, r3
 8026e74:	e7f2      	b.n	8026e5c <__assert_func+0x10>
 8026e76:	bf00      	nop
 8026e78:	20000098 	.word	0x20000098
 8026e7c:	0802ca94 	.word	0x0802ca94
 8026e80:	0802caa1 	.word	0x0802caa1
 8026e84:	0802cacf 	.word	0x0802cacf

08026e88 <atexit>:
 8026e88:	2300      	movs	r3, #0
 8026e8a:	4601      	mov	r1, r0
 8026e8c:	461a      	mov	r2, r3
 8026e8e:	4618      	mov	r0, r3
 8026e90:	f000 bcf2 	b.w	8027878 <__register_exitproc>

08026e94 <__cxa_atexit>:
 8026e94:	b510      	push	{r4, lr}
 8026e96:	4c05      	ldr	r4, [pc, #20]	; (8026eac <__cxa_atexit+0x18>)
 8026e98:	4613      	mov	r3, r2
 8026e9a:	b12c      	cbz	r4, 8026ea8 <__cxa_atexit+0x14>
 8026e9c:	460a      	mov	r2, r1
 8026e9e:	4601      	mov	r1, r0
 8026ea0:	2002      	movs	r0, #2
 8026ea2:	f000 fce9 	bl	8027878 <__register_exitproc>
 8026ea6:	bd10      	pop	{r4, pc}
 8026ea8:	4620      	mov	r0, r4
 8026eaa:	e7fc      	b.n	8026ea6 <__cxa_atexit+0x12>
 8026eac:	08027879 	.word	0x08027879

08026eb0 <__errno>:
 8026eb0:	4b01      	ldr	r3, [pc, #4]	; (8026eb8 <__errno+0x8>)
 8026eb2:	6818      	ldr	r0, [r3, #0]
 8026eb4:	4770      	bx	lr
 8026eb6:	bf00      	nop
 8026eb8:	20000098 	.word	0x20000098

08026ebc <fiprintf>:
 8026ebc:	b40e      	push	{r1, r2, r3}
 8026ebe:	b503      	push	{r0, r1, lr}
 8026ec0:	4601      	mov	r1, r0
 8026ec2:	ab03      	add	r3, sp, #12
 8026ec4:	4805      	ldr	r0, [pc, #20]	; (8026edc <fiprintf+0x20>)
 8026ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8026eca:	6800      	ldr	r0, [r0, #0]
 8026ecc:	9301      	str	r3, [sp, #4]
 8026ece:	f000 f921 	bl	8027114 <_vfiprintf_r>
 8026ed2:	b002      	add	sp, #8
 8026ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8026ed8:	b003      	add	sp, #12
 8026eda:	4770      	bx	lr
 8026edc:	20000098 	.word	0x20000098

08026ee0 <__libc_init_array>:
 8026ee0:	b570      	push	{r4, r5, r6, lr}
 8026ee2:	4e0d      	ldr	r6, [pc, #52]	; (8026f18 <__libc_init_array+0x38>)
 8026ee4:	4c0d      	ldr	r4, [pc, #52]	; (8026f1c <__libc_init_array+0x3c>)
 8026ee6:	1ba4      	subs	r4, r4, r6
 8026ee8:	10a4      	asrs	r4, r4, #2
 8026eea:	2500      	movs	r5, #0
 8026eec:	42a5      	cmp	r5, r4
 8026eee:	d109      	bne.n	8026f04 <__libc_init_array+0x24>
 8026ef0:	4e0b      	ldr	r6, [pc, #44]	; (8026f20 <__libc_init_array+0x40>)
 8026ef2:	4c0c      	ldr	r4, [pc, #48]	; (8026f24 <__libc_init_array+0x44>)
 8026ef4:	f000 ffb0 	bl	8027e58 <_init>
 8026ef8:	1ba4      	subs	r4, r4, r6
 8026efa:	10a4      	asrs	r4, r4, #2
 8026efc:	2500      	movs	r5, #0
 8026efe:	42a5      	cmp	r5, r4
 8026f00:	d105      	bne.n	8026f0e <__libc_init_array+0x2e>
 8026f02:	bd70      	pop	{r4, r5, r6, pc}
 8026f04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026f08:	4798      	blx	r3
 8026f0a:	3501      	adds	r5, #1
 8026f0c:	e7ee      	b.n	8026eec <__libc_init_array+0xc>
 8026f0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026f12:	4798      	blx	r3
 8026f14:	3501      	adds	r5, #1
 8026f16:	e7f2      	b.n	8026efe <__libc_init_array+0x1e>
 8026f18:	080c06a4 	.word	0x080c06a4
 8026f1c:	080c06a4 	.word	0x080c06a4
 8026f20:	080c06a4 	.word	0x080c06a4
 8026f24:	080c06b8 	.word	0x080c06b8

08026f28 <malloc>:
 8026f28:	4b02      	ldr	r3, [pc, #8]	; (8026f34 <malloc+0xc>)
 8026f2a:	4601      	mov	r1, r0
 8026f2c:	6818      	ldr	r0, [r3, #0]
 8026f2e:	f000 b86d 	b.w	802700c <_malloc_r>
 8026f32:	bf00      	nop
 8026f34:	20000098 	.word	0x20000098

08026f38 <free>:
 8026f38:	4b02      	ldr	r3, [pc, #8]	; (8026f44 <free+0xc>)
 8026f3a:	4601      	mov	r1, r0
 8026f3c:	6818      	ldr	r0, [r3, #0]
 8026f3e:	f000 b817 	b.w	8026f70 <_free_r>
 8026f42:	bf00      	nop
 8026f44:	20000098 	.word	0x20000098

08026f48 <memcpy>:
 8026f48:	b510      	push	{r4, lr}
 8026f4a:	1e43      	subs	r3, r0, #1
 8026f4c:	440a      	add	r2, r1
 8026f4e:	4291      	cmp	r1, r2
 8026f50:	d100      	bne.n	8026f54 <memcpy+0xc>
 8026f52:	bd10      	pop	{r4, pc}
 8026f54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026f58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026f5c:	e7f7      	b.n	8026f4e <memcpy+0x6>

08026f5e <memset>:
 8026f5e:	4402      	add	r2, r0
 8026f60:	4603      	mov	r3, r0
 8026f62:	4293      	cmp	r3, r2
 8026f64:	d100      	bne.n	8026f68 <memset+0xa>
 8026f66:	4770      	bx	lr
 8026f68:	f803 1b01 	strb.w	r1, [r3], #1
 8026f6c:	e7f9      	b.n	8026f62 <memset+0x4>
	...

08026f70 <_free_r>:
 8026f70:	b538      	push	{r3, r4, r5, lr}
 8026f72:	4605      	mov	r5, r0
 8026f74:	2900      	cmp	r1, #0
 8026f76:	d045      	beq.n	8027004 <_free_r+0x94>
 8026f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026f7c:	1f0c      	subs	r4, r1, #4
 8026f7e:	2b00      	cmp	r3, #0
 8026f80:	bfb8      	it	lt
 8026f82:	18e4      	addlt	r4, r4, r3
 8026f84:	f000 feba 	bl	8027cfc <__malloc_lock>
 8026f88:	4a1f      	ldr	r2, [pc, #124]	; (8027008 <_free_r+0x98>)
 8026f8a:	6813      	ldr	r3, [r2, #0]
 8026f8c:	4610      	mov	r0, r2
 8026f8e:	b933      	cbnz	r3, 8026f9e <_free_r+0x2e>
 8026f90:	6063      	str	r3, [r4, #4]
 8026f92:	6014      	str	r4, [r2, #0]
 8026f94:	4628      	mov	r0, r5
 8026f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026f9a:	f000 beb0 	b.w	8027cfe <__malloc_unlock>
 8026f9e:	42a3      	cmp	r3, r4
 8026fa0:	d90c      	bls.n	8026fbc <_free_r+0x4c>
 8026fa2:	6821      	ldr	r1, [r4, #0]
 8026fa4:	1862      	adds	r2, r4, r1
 8026fa6:	4293      	cmp	r3, r2
 8026fa8:	bf04      	itt	eq
 8026faa:	681a      	ldreq	r2, [r3, #0]
 8026fac:	685b      	ldreq	r3, [r3, #4]
 8026fae:	6063      	str	r3, [r4, #4]
 8026fb0:	bf04      	itt	eq
 8026fb2:	1852      	addeq	r2, r2, r1
 8026fb4:	6022      	streq	r2, [r4, #0]
 8026fb6:	6004      	str	r4, [r0, #0]
 8026fb8:	e7ec      	b.n	8026f94 <_free_r+0x24>
 8026fba:	4613      	mov	r3, r2
 8026fbc:	685a      	ldr	r2, [r3, #4]
 8026fbe:	b10a      	cbz	r2, 8026fc4 <_free_r+0x54>
 8026fc0:	42a2      	cmp	r2, r4
 8026fc2:	d9fa      	bls.n	8026fba <_free_r+0x4a>
 8026fc4:	6819      	ldr	r1, [r3, #0]
 8026fc6:	1858      	adds	r0, r3, r1
 8026fc8:	42a0      	cmp	r0, r4
 8026fca:	d10b      	bne.n	8026fe4 <_free_r+0x74>
 8026fcc:	6820      	ldr	r0, [r4, #0]
 8026fce:	4401      	add	r1, r0
 8026fd0:	1858      	adds	r0, r3, r1
 8026fd2:	4282      	cmp	r2, r0
 8026fd4:	6019      	str	r1, [r3, #0]
 8026fd6:	d1dd      	bne.n	8026f94 <_free_r+0x24>
 8026fd8:	6810      	ldr	r0, [r2, #0]
 8026fda:	6852      	ldr	r2, [r2, #4]
 8026fdc:	605a      	str	r2, [r3, #4]
 8026fde:	4401      	add	r1, r0
 8026fe0:	6019      	str	r1, [r3, #0]
 8026fe2:	e7d7      	b.n	8026f94 <_free_r+0x24>
 8026fe4:	d902      	bls.n	8026fec <_free_r+0x7c>
 8026fe6:	230c      	movs	r3, #12
 8026fe8:	602b      	str	r3, [r5, #0]
 8026fea:	e7d3      	b.n	8026f94 <_free_r+0x24>
 8026fec:	6820      	ldr	r0, [r4, #0]
 8026fee:	1821      	adds	r1, r4, r0
 8026ff0:	428a      	cmp	r2, r1
 8026ff2:	bf04      	itt	eq
 8026ff4:	6811      	ldreq	r1, [r2, #0]
 8026ff6:	6852      	ldreq	r2, [r2, #4]
 8026ff8:	6062      	str	r2, [r4, #4]
 8026ffa:	bf04      	itt	eq
 8026ffc:	1809      	addeq	r1, r1, r0
 8026ffe:	6021      	streq	r1, [r4, #0]
 8027000:	605c      	str	r4, [r3, #4]
 8027002:	e7c7      	b.n	8026f94 <_free_r+0x24>
 8027004:	bd38      	pop	{r3, r4, r5, pc}
 8027006:	bf00      	nop
 8027008:	2000b4f0 	.word	0x2000b4f0

0802700c <_malloc_r>:
 802700c:	b570      	push	{r4, r5, r6, lr}
 802700e:	1ccd      	adds	r5, r1, #3
 8027010:	f025 0503 	bic.w	r5, r5, #3
 8027014:	3508      	adds	r5, #8
 8027016:	2d0c      	cmp	r5, #12
 8027018:	bf38      	it	cc
 802701a:	250c      	movcc	r5, #12
 802701c:	2d00      	cmp	r5, #0
 802701e:	4606      	mov	r6, r0
 8027020:	db01      	blt.n	8027026 <_malloc_r+0x1a>
 8027022:	42a9      	cmp	r1, r5
 8027024:	d903      	bls.n	802702e <_malloc_r+0x22>
 8027026:	230c      	movs	r3, #12
 8027028:	6033      	str	r3, [r6, #0]
 802702a:	2000      	movs	r0, #0
 802702c:	bd70      	pop	{r4, r5, r6, pc}
 802702e:	f000 fe65 	bl	8027cfc <__malloc_lock>
 8027032:	4a21      	ldr	r2, [pc, #132]	; (80270b8 <_malloc_r+0xac>)
 8027034:	6814      	ldr	r4, [r2, #0]
 8027036:	4621      	mov	r1, r4
 8027038:	b991      	cbnz	r1, 8027060 <_malloc_r+0x54>
 802703a:	4c20      	ldr	r4, [pc, #128]	; (80270bc <_malloc_r+0xb0>)
 802703c:	6823      	ldr	r3, [r4, #0]
 802703e:	b91b      	cbnz	r3, 8027048 <_malloc_r+0x3c>
 8027040:	4630      	mov	r0, r6
 8027042:	f000 fb05 	bl	8027650 <_sbrk_r>
 8027046:	6020      	str	r0, [r4, #0]
 8027048:	4629      	mov	r1, r5
 802704a:	4630      	mov	r0, r6
 802704c:	f000 fb00 	bl	8027650 <_sbrk_r>
 8027050:	1c43      	adds	r3, r0, #1
 8027052:	d124      	bne.n	802709e <_malloc_r+0x92>
 8027054:	230c      	movs	r3, #12
 8027056:	6033      	str	r3, [r6, #0]
 8027058:	4630      	mov	r0, r6
 802705a:	f000 fe50 	bl	8027cfe <__malloc_unlock>
 802705e:	e7e4      	b.n	802702a <_malloc_r+0x1e>
 8027060:	680b      	ldr	r3, [r1, #0]
 8027062:	1b5b      	subs	r3, r3, r5
 8027064:	d418      	bmi.n	8027098 <_malloc_r+0x8c>
 8027066:	2b0b      	cmp	r3, #11
 8027068:	d90f      	bls.n	802708a <_malloc_r+0x7e>
 802706a:	600b      	str	r3, [r1, #0]
 802706c:	50cd      	str	r5, [r1, r3]
 802706e:	18cc      	adds	r4, r1, r3
 8027070:	4630      	mov	r0, r6
 8027072:	f000 fe44 	bl	8027cfe <__malloc_unlock>
 8027076:	f104 000b 	add.w	r0, r4, #11
 802707a:	1d23      	adds	r3, r4, #4
 802707c:	f020 0007 	bic.w	r0, r0, #7
 8027080:	1ac3      	subs	r3, r0, r3
 8027082:	d0d3      	beq.n	802702c <_malloc_r+0x20>
 8027084:	425a      	negs	r2, r3
 8027086:	50e2      	str	r2, [r4, r3]
 8027088:	e7d0      	b.n	802702c <_malloc_r+0x20>
 802708a:	428c      	cmp	r4, r1
 802708c:	684b      	ldr	r3, [r1, #4]
 802708e:	bf16      	itet	ne
 8027090:	6063      	strne	r3, [r4, #4]
 8027092:	6013      	streq	r3, [r2, #0]
 8027094:	460c      	movne	r4, r1
 8027096:	e7eb      	b.n	8027070 <_malloc_r+0x64>
 8027098:	460c      	mov	r4, r1
 802709a:	6849      	ldr	r1, [r1, #4]
 802709c:	e7cc      	b.n	8027038 <_malloc_r+0x2c>
 802709e:	1cc4      	adds	r4, r0, #3
 80270a0:	f024 0403 	bic.w	r4, r4, #3
 80270a4:	42a0      	cmp	r0, r4
 80270a6:	d005      	beq.n	80270b4 <_malloc_r+0xa8>
 80270a8:	1a21      	subs	r1, r4, r0
 80270aa:	4630      	mov	r0, r6
 80270ac:	f000 fad0 	bl	8027650 <_sbrk_r>
 80270b0:	3001      	adds	r0, #1
 80270b2:	d0cf      	beq.n	8027054 <_malloc_r+0x48>
 80270b4:	6025      	str	r5, [r4, #0]
 80270b6:	e7db      	b.n	8027070 <_malloc_r+0x64>
 80270b8:	2000b4f0 	.word	0x2000b4f0
 80270bc:	2000b4f4 	.word	0x2000b4f4

080270c0 <__sfputc_r>:
 80270c0:	6893      	ldr	r3, [r2, #8]
 80270c2:	3b01      	subs	r3, #1
 80270c4:	2b00      	cmp	r3, #0
 80270c6:	b410      	push	{r4}
 80270c8:	6093      	str	r3, [r2, #8]
 80270ca:	da08      	bge.n	80270de <__sfputc_r+0x1e>
 80270cc:	6994      	ldr	r4, [r2, #24]
 80270ce:	42a3      	cmp	r3, r4
 80270d0:	db01      	blt.n	80270d6 <__sfputc_r+0x16>
 80270d2:	290a      	cmp	r1, #10
 80270d4:	d103      	bne.n	80270de <__sfputc_r+0x1e>
 80270d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80270da:	f000 bb0d 	b.w	80276f8 <__swbuf_r>
 80270de:	6813      	ldr	r3, [r2, #0]
 80270e0:	1c58      	adds	r0, r3, #1
 80270e2:	6010      	str	r0, [r2, #0]
 80270e4:	7019      	strb	r1, [r3, #0]
 80270e6:	4608      	mov	r0, r1
 80270e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80270ec:	4770      	bx	lr

080270ee <__sfputs_r>:
 80270ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80270f0:	4606      	mov	r6, r0
 80270f2:	460f      	mov	r7, r1
 80270f4:	4614      	mov	r4, r2
 80270f6:	18d5      	adds	r5, r2, r3
 80270f8:	42ac      	cmp	r4, r5
 80270fa:	d101      	bne.n	8027100 <__sfputs_r+0x12>
 80270fc:	2000      	movs	r0, #0
 80270fe:	e007      	b.n	8027110 <__sfputs_r+0x22>
 8027100:	463a      	mov	r2, r7
 8027102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027106:	4630      	mov	r0, r6
 8027108:	f7ff ffda 	bl	80270c0 <__sfputc_r>
 802710c:	1c43      	adds	r3, r0, #1
 802710e:	d1f3      	bne.n	80270f8 <__sfputs_r+0xa>
 8027110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027114 <_vfiprintf_r>:
 8027114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027118:	460c      	mov	r4, r1
 802711a:	b09d      	sub	sp, #116	; 0x74
 802711c:	4617      	mov	r7, r2
 802711e:	461d      	mov	r5, r3
 8027120:	4606      	mov	r6, r0
 8027122:	b118      	cbz	r0, 802712c <_vfiprintf_r+0x18>
 8027124:	6983      	ldr	r3, [r0, #24]
 8027126:	b90b      	cbnz	r3, 802712c <_vfiprintf_r+0x18>
 8027128:	f000 fcfa 	bl	8027b20 <__sinit>
 802712c:	4b7c      	ldr	r3, [pc, #496]	; (8027320 <_vfiprintf_r+0x20c>)
 802712e:	429c      	cmp	r4, r3
 8027130:	d158      	bne.n	80271e4 <_vfiprintf_r+0xd0>
 8027132:	6874      	ldr	r4, [r6, #4]
 8027134:	89a3      	ldrh	r3, [r4, #12]
 8027136:	0718      	lsls	r0, r3, #28
 8027138:	d55e      	bpl.n	80271f8 <_vfiprintf_r+0xe4>
 802713a:	6923      	ldr	r3, [r4, #16]
 802713c:	2b00      	cmp	r3, #0
 802713e:	d05b      	beq.n	80271f8 <_vfiprintf_r+0xe4>
 8027140:	2300      	movs	r3, #0
 8027142:	9309      	str	r3, [sp, #36]	; 0x24
 8027144:	2320      	movs	r3, #32
 8027146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802714a:	2330      	movs	r3, #48	; 0x30
 802714c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027150:	9503      	str	r5, [sp, #12]
 8027152:	f04f 0b01 	mov.w	fp, #1
 8027156:	46b8      	mov	r8, r7
 8027158:	4645      	mov	r5, r8
 802715a:	f815 3b01 	ldrb.w	r3, [r5], #1
 802715e:	b10b      	cbz	r3, 8027164 <_vfiprintf_r+0x50>
 8027160:	2b25      	cmp	r3, #37	; 0x25
 8027162:	d154      	bne.n	802720e <_vfiprintf_r+0xfa>
 8027164:	ebb8 0a07 	subs.w	sl, r8, r7
 8027168:	d00b      	beq.n	8027182 <_vfiprintf_r+0x6e>
 802716a:	4653      	mov	r3, sl
 802716c:	463a      	mov	r2, r7
 802716e:	4621      	mov	r1, r4
 8027170:	4630      	mov	r0, r6
 8027172:	f7ff ffbc 	bl	80270ee <__sfputs_r>
 8027176:	3001      	adds	r0, #1
 8027178:	f000 80c2 	beq.w	8027300 <_vfiprintf_r+0x1ec>
 802717c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802717e:	4453      	add	r3, sl
 8027180:	9309      	str	r3, [sp, #36]	; 0x24
 8027182:	f898 3000 	ldrb.w	r3, [r8]
 8027186:	2b00      	cmp	r3, #0
 8027188:	f000 80ba 	beq.w	8027300 <_vfiprintf_r+0x1ec>
 802718c:	2300      	movs	r3, #0
 802718e:	f04f 32ff 	mov.w	r2, #4294967295
 8027192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027196:	9304      	str	r3, [sp, #16]
 8027198:	9307      	str	r3, [sp, #28]
 802719a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802719e:	931a      	str	r3, [sp, #104]	; 0x68
 80271a0:	46a8      	mov	r8, r5
 80271a2:	2205      	movs	r2, #5
 80271a4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80271a8:	485e      	ldr	r0, [pc, #376]	; (8027324 <_vfiprintf_r+0x210>)
 80271aa:	f7d9 f831 	bl	8000210 <memchr>
 80271ae:	9b04      	ldr	r3, [sp, #16]
 80271b0:	bb78      	cbnz	r0, 8027212 <_vfiprintf_r+0xfe>
 80271b2:	06d9      	lsls	r1, r3, #27
 80271b4:	bf44      	itt	mi
 80271b6:	2220      	movmi	r2, #32
 80271b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80271bc:	071a      	lsls	r2, r3, #28
 80271be:	bf44      	itt	mi
 80271c0:	222b      	movmi	r2, #43	; 0x2b
 80271c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80271c6:	782a      	ldrb	r2, [r5, #0]
 80271c8:	2a2a      	cmp	r2, #42	; 0x2a
 80271ca:	d02a      	beq.n	8027222 <_vfiprintf_r+0x10e>
 80271cc:	9a07      	ldr	r2, [sp, #28]
 80271ce:	46a8      	mov	r8, r5
 80271d0:	2000      	movs	r0, #0
 80271d2:	250a      	movs	r5, #10
 80271d4:	4641      	mov	r1, r8
 80271d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80271da:	3b30      	subs	r3, #48	; 0x30
 80271dc:	2b09      	cmp	r3, #9
 80271de:	d969      	bls.n	80272b4 <_vfiprintf_r+0x1a0>
 80271e0:	b360      	cbz	r0, 802723c <_vfiprintf_r+0x128>
 80271e2:	e024      	b.n	802722e <_vfiprintf_r+0x11a>
 80271e4:	4b50      	ldr	r3, [pc, #320]	; (8027328 <_vfiprintf_r+0x214>)
 80271e6:	429c      	cmp	r4, r3
 80271e8:	d101      	bne.n	80271ee <_vfiprintf_r+0xda>
 80271ea:	68b4      	ldr	r4, [r6, #8]
 80271ec:	e7a2      	b.n	8027134 <_vfiprintf_r+0x20>
 80271ee:	4b4f      	ldr	r3, [pc, #316]	; (802732c <_vfiprintf_r+0x218>)
 80271f0:	429c      	cmp	r4, r3
 80271f2:	bf08      	it	eq
 80271f4:	68f4      	ldreq	r4, [r6, #12]
 80271f6:	e79d      	b.n	8027134 <_vfiprintf_r+0x20>
 80271f8:	4621      	mov	r1, r4
 80271fa:	4630      	mov	r0, r6
 80271fc:	f000 face 	bl	802779c <__swsetup_r>
 8027200:	2800      	cmp	r0, #0
 8027202:	d09d      	beq.n	8027140 <_vfiprintf_r+0x2c>
 8027204:	f04f 30ff 	mov.w	r0, #4294967295
 8027208:	b01d      	add	sp, #116	; 0x74
 802720a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802720e:	46a8      	mov	r8, r5
 8027210:	e7a2      	b.n	8027158 <_vfiprintf_r+0x44>
 8027212:	4a44      	ldr	r2, [pc, #272]	; (8027324 <_vfiprintf_r+0x210>)
 8027214:	1a80      	subs	r0, r0, r2
 8027216:	fa0b f000 	lsl.w	r0, fp, r0
 802721a:	4318      	orrs	r0, r3
 802721c:	9004      	str	r0, [sp, #16]
 802721e:	4645      	mov	r5, r8
 8027220:	e7be      	b.n	80271a0 <_vfiprintf_r+0x8c>
 8027222:	9a03      	ldr	r2, [sp, #12]
 8027224:	1d11      	adds	r1, r2, #4
 8027226:	6812      	ldr	r2, [r2, #0]
 8027228:	9103      	str	r1, [sp, #12]
 802722a:	2a00      	cmp	r2, #0
 802722c:	db01      	blt.n	8027232 <_vfiprintf_r+0x11e>
 802722e:	9207      	str	r2, [sp, #28]
 8027230:	e004      	b.n	802723c <_vfiprintf_r+0x128>
 8027232:	4252      	negs	r2, r2
 8027234:	f043 0302 	orr.w	r3, r3, #2
 8027238:	9207      	str	r2, [sp, #28]
 802723a:	9304      	str	r3, [sp, #16]
 802723c:	f898 3000 	ldrb.w	r3, [r8]
 8027240:	2b2e      	cmp	r3, #46	; 0x2e
 8027242:	d10e      	bne.n	8027262 <_vfiprintf_r+0x14e>
 8027244:	f898 3001 	ldrb.w	r3, [r8, #1]
 8027248:	2b2a      	cmp	r3, #42	; 0x2a
 802724a:	d138      	bne.n	80272be <_vfiprintf_r+0x1aa>
 802724c:	9b03      	ldr	r3, [sp, #12]
 802724e:	1d1a      	adds	r2, r3, #4
 8027250:	681b      	ldr	r3, [r3, #0]
 8027252:	9203      	str	r2, [sp, #12]
 8027254:	2b00      	cmp	r3, #0
 8027256:	bfb8      	it	lt
 8027258:	f04f 33ff 	movlt.w	r3, #4294967295
 802725c:	f108 0802 	add.w	r8, r8, #2
 8027260:	9305      	str	r3, [sp, #20]
 8027262:	4d33      	ldr	r5, [pc, #204]	; (8027330 <_vfiprintf_r+0x21c>)
 8027264:	f898 1000 	ldrb.w	r1, [r8]
 8027268:	2203      	movs	r2, #3
 802726a:	4628      	mov	r0, r5
 802726c:	f7d8 ffd0 	bl	8000210 <memchr>
 8027270:	b140      	cbz	r0, 8027284 <_vfiprintf_r+0x170>
 8027272:	2340      	movs	r3, #64	; 0x40
 8027274:	1b40      	subs	r0, r0, r5
 8027276:	fa03 f000 	lsl.w	r0, r3, r0
 802727a:	9b04      	ldr	r3, [sp, #16]
 802727c:	4303      	orrs	r3, r0
 802727e:	f108 0801 	add.w	r8, r8, #1
 8027282:	9304      	str	r3, [sp, #16]
 8027284:	f898 1000 	ldrb.w	r1, [r8]
 8027288:	482a      	ldr	r0, [pc, #168]	; (8027334 <_vfiprintf_r+0x220>)
 802728a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802728e:	2206      	movs	r2, #6
 8027290:	f108 0701 	add.w	r7, r8, #1
 8027294:	f7d8 ffbc 	bl	8000210 <memchr>
 8027298:	2800      	cmp	r0, #0
 802729a:	d037      	beq.n	802730c <_vfiprintf_r+0x1f8>
 802729c:	4b26      	ldr	r3, [pc, #152]	; (8027338 <_vfiprintf_r+0x224>)
 802729e:	bb1b      	cbnz	r3, 80272e8 <_vfiprintf_r+0x1d4>
 80272a0:	9b03      	ldr	r3, [sp, #12]
 80272a2:	3307      	adds	r3, #7
 80272a4:	f023 0307 	bic.w	r3, r3, #7
 80272a8:	3308      	adds	r3, #8
 80272aa:	9303      	str	r3, [sp, #12]
 80272ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80272ae:	444b      	add	r3, r9
 80272b0:	9309      	str	r3, [sp, #36]	; 0x24
 80272b2:	e750      	b.n	8027156 <_vfiprintf_r+0x42>
 80272b4:	fb05 3202 	mla	r2, r5, r2, r3
 80272b8:	2001      	movs	r0, #1
 80272ba:	4688      	mov	r8, r1
 80272bc:	e78a      	b.n	80271d4 <_vfiprintf_r+0xc0>
 80272be:	2300      	movs	r3, #0
 80272c0:	f108 0801 	add.w	r8, r8, #1
 80272c4:	9305      	str	r3, [sp, #20]
 80272c6:	4619      	mov	r1, r3
 80272c8:	250a      	movs	r5, #10
 80272ca:	4640      	mov	r0, r8
 80272cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80272d0:	3a30      	subs	r2, #48	; 0x30
 80272d2:	2a09      	cmp	r2, #9
 80272d4:	d903      	bls.n	80272de <_vfiprintf_r+0x1ca>
 80272d6:	2b00      	cmp	r3, #0
 80272d8:	d0c3      	beq.n	8027262 <_vfiprintf_r+0x14e>
 80272da:	9105      	str	r1, [sp, #20]
 80272dc:	e7c1      	b.n	8027262 <_vfiprintf_r+0x14e>
 80272de:	fb05 2101 	mla	r1, r5, r1, r2
 80272e2:	2301      	movs	r3, #1
 80272e4:	4680      	mov	r8, r0
 80272e6:	e7f0      	b.n	80272ca <_vfiprintf_r+0x1b6>
 80272e8:	ab03      	add	r3, sp, #12
 80272ea:	9300      	str	r3, [sp, #0]
 80272ec:	4622      	mov	r2, r4
 80272ee:	4b13      	ldr	r3, [pc, #76]	; (802733c <_vfiprintf_r+0x228>)
 80272f0:	a904      	add	r1, sp, #16
 80272f2:	4630      	mov	r0, r6
 80272f4:	f3af 8000 	nop.w
 80272f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80272fc:	4681      	mov	r9, r0
 80272fe:	d1d5      	bne.n	80272ac <_vfiprintf_r+0x198>
 8027300:	89a3      	ldrh	r3, [r4, #12]
 8027302:	065b      	lsls	r3, r3, #25
 8027304:	f53f af7e 	bmi.w	8027204 <_vfiprintf_r+0xf0>
 8027308:	9809      	ldr	r0, [sp, #36]	; 0x24
 802730a:	e77d      	b.n	8027208 <_vfiprintf_r+0xf4>
 802730c:	ab03      	add	r3, sp, #12
 802730e:	9300      	str	r3, [sp, #0]
 8027310:	4622      	mov	r2, r4
 8027312:	4b0a      	ldr	r3, [pc, #40]	; (802733c <_vfiprintf_r+0x228>)
 8027314:	a904      	add	r1, sp, #16
 8027316:	4630      	mov	r0, r6
 8027318:	f000 f888 	bl	802742c <_printf_i>
 802731c:	e7ec      	b.n	80272f8 <_vfiprintf_r+0x1e4>
 802731e:	bf00      	nop
 8027320:	0802cb2c 	.word	0x0802cb2c
 8027324:	0802cad4 	.word	0x0802cad4
 8027328:	0802cb4c 	.word	0x0802cb4c
 802732c:	0802cb0c 	.word	0x0802cb0c
 8027330:	0802cada 	.word	0x0802cada
 8027334:	0802cade 	.word	0x0802cade
 8027338:	00000000 	.word	0x00000000
 802733c:	080270ef 	.word	0x080270ef

08027340 <_printf_common>:
 8027340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027344:	4691      	mov	r9, r2
 8027346:	461f      	mov	r7, r3
 8027348:	688a      	ldr	r2, [r1, #8]
 802734a:	690b      	ldr	r3, [r1, #16]
 802734c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8027350:	4293      	cmp	r3, r2
 8027352:	bfb8      	it	lt
 8027354:	4613      	movlt	r3, r2
 8027356:	f8c9 3000 	str.w	r3, [r9]
 802735a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802735e:	4606      	mov	r6, r0
 8027360:	460c      	mov	r4, r1
 8027362:	b112      	cbz	r2, 802736a <_printf_common+0x2a>
 8027364:	3301      	adds	r3, #1
 8027366:	f8c9 3000 	str.w	r3, [r9]
 802736a:	6823      	ldr	r3, [r4, #0]
 802736c:	0699      	lsls	r1, r3, #26
 802736e:	bf42      	ittt	mi
 8027370:	f8d9 3000 	ldrmi.w	r3, [r9]
 8027374:	3302      	addmi	r3, #2
 8027376:	f8c9 3000 	strmi.w	r3, [r9]
 802737a:	6825      	ldr	r5, [r4, #0]
 802737c:	f015 0506 	ands.w	r5, r5, #6
 8027380:	d107      	bne.n	8027392 <_printf_common+0x52>
 8027382:	f104 0a19 	add.w	sl, r4, #25
 8027386:	68e3      	ldr	r3, [r4, #12]
 8027388:	f8d9 2000 	ldr.w	r2, [r9]
 802738c:	1a9b      	subs	r3, r3, r2
 802738e:	42ab      	cmp	r3, r5
 8027390:	dc28      	bgt.n	80273e4 <_printf_common+0xa4>
 8027392:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8027396:	6822      	ldr	r2, [r4, #0]
 8027398:	3300      	adds	r3, #0
 802739a:	bf18      	it	ne
 802739c:	2301      	movne	r3, #1
 802739e:	0692      	lsls	r2, r2, #26
 80273a0:	d42d      	bmi.n	80273fe <_printf_common+0xbe>
 80273a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80273a6:	4639      	mov	r1, r7
 80273a8:	4630      	mov	r0, r6
 80273aa:	47c0      	blx	r8
 80273ac:	3001      	adds	r0, #1
 80273ae:	d020      	beq.n	80273f2 <_printf_common+0xb2>
 80273b0:	6823      	ldr	r3, [r4, #0]
 80273b2:	68e5      	ldr	r5, [r4, #12]
 80273b4:	f8d9 2000 	ldr.w	r2, [r9]
 80273b8:	f003 0306 	and.w	r3, r3, #6
 80273bc:	2b04      	cmp	r3, #4
 80273be:	bf08      	it	eq
 80273c0:	1aad      	subeq	r5, r5, r2
 80273c2:	68a3      	ldr	r3, [r4, #8]
 80273c4:	6922      	ldr	r2, [r4, #16]
 80273c6:	bf0c      	ite	eq
 80273c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80273cc:	2500      	movne	r5, #0
 80273ce:	4293      	cmp	r3, r2
 80273d0:	bfc4      	itt	gt
 80273d2:	1a9b      	subgt	r3, r3, r2
 80273d4:	18ed      	addgt	r5, r5, r3
 80273d6:	f04f 0900 	mov.w	r9, #0
 80273da:	341a      	adds	r4, #26
 80273dc:	454d      	cmp	r5, r9
 80273de:	d11a      	bne.n	8027416 <_printf_common+0xd6>
 80273e0:	2000      	movs	r0, #0
 80273e2:	e008      	b.n	80273f6 <_printf_common+0xb6>
 80273e4:	2301      	movs	r3, #1
 80273e6:	4652      	mov	r2, sl
 80273e8:	4639      	mov	r1, r7
 80273ea:	4630      	mov	r0, r6
 80273ec:	47c0      	blx	r8
 80273ee:	3001      	adds	r0, #1
 80273f0:	d103      	bne.n	80273fa <_printf_common+0xba>
 80273f2:	f04f 30ff 	mov.w	r0, #4294967295
 80273f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80273fa:	3501      	adds	r5, #1
 80273fc:	e7c3      	b.n	8027386 <_printf_common+0x46>
 80273fe:	18e1      	adds	r1, r4, r3
 8027400:	1c5a      	adds	r2, r3, #1
 8027402:	2030      	movs	r0, #48	; 0x30
 8027404:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027408:	4422      	add	r2, r4
 802740a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802740e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027412:	3302      	adds	r3, #2
 8027414:	e7c5      	b.n	80273a2 <_printf_common+0x62>
 8027416:	2301      	movs	r3, #1
 8027418:	4622      	mov	r2, r4
 802741a:	4639      	mov	r1, r7
 802741c:	4630      	mov	r0, r6
 802741e:	47c0      	blx	r8
 8027420:	3001      	adds	r0, #1
 8027422:	d0e6      	beq.n	80273f2 <_printf_common+0xb2>
 8027424:	f109 0901 	add.w	r9, r9, #1
 8027428:	e7d8      	b.n	80273dc <_printf_common+0x9c>
	...

0802742c <_printf_i>:
 802742c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027430:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8027434:	460c      	mov	r4, r1
 8027436:	7e09      	ldrb	r1, [r1, #24]
 8027438:	b085      	sub	sp, #20
 802743a:	296e      	cmp	r1, #110	; 0x6e
 802743c:	4617      	mov	r7, r2
 802743e:	4606      	mov	r6, r0
 8027440:	4698      	mov	r8, r3
 8027442:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027444:	f000 80b3 	beq.w	80275ae <_printf_i+0x182>
 8027448:	d822      	bhi.n	8027490 <_printf_i+0x64>
 802744a:	2963      	cmp	r1, #99	; 0x63
 802744c:	d036      	beq.n	80274bc <_printf_i+0x90>
 802744e:	d80a      	bhi.n	8027466 <_printf_i+0x3a>
 8027450:	2900      	cmp	r1, #0
 8027452:	f000 80b9 	beq.w	80275c8 <_printf_i+0x19c>
 8027456:	2958      	cmp	r1, #88	; 0x58
 8027458:	f000 8083 	beq.w	8027562 <_printf_i+0x136>
 802745c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027460:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8027464:	e032      	b.n	80274cc <_printf_i+0xa0>
 8027466:	2964      	cmp	r1, #100	; 0x64
 8027468:	d001      	beq.n	802746e <_printf_i+0x42>
 802746a:	2969      	cmp	r1, #105	; 0x69
 802746c:	d1f6      	bne.n	802745c <_printf_i+0x30>
 802746e:	6820      	ldr	r0, [r4, #0]
 8027470:	6813      	ldr	r3, [r2, #0]
 8027472:	0605      	lsls	r5, r0, #24
 8027474:	f103 0104 	add.w	r1, r3, #4
 8027478:	d52a      	bpl.n	80274d0 <_printf_i+0xa4>
 802747a:	681b      	ldr	r3, [r3, #0]
 802747c:	6011      	str	r1, [r2, #0]
 802747e:	2b00      	cmp	r3, #0
 8027480:	da03      	bge.n	802748a <_printf_i+0x5e>
 8027482:	222d      	movs	r2, #45	; 0x2d
 8027484:	425b      	negs	r3, r3
 8027486:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802748a:	486f      	ldr	r0, [pc, #444]	; (8027648 <_printf_i+0x21c>)
 802748c:	220a      	movs	r2, #10
 802748e:	e039      	b.n	8027504 <_printf_i+0xd8>
 8027490:	2973      	cmp	r1, #115	; 0x73
 8027492:	f000 809d 	beq.w	80275d0 <_printf_i+0x1a4>
 8027496:	d808      	bhi.n	80274aa <_printf_i+0x7e>
 8027498:	296f      	cmp	r1, #111	; 0x6f
 802749a:	d020      	beq.n	80274de <_printf_i+0xb2>
 802749c:	2970      	cmp	r1, #112	; 0x70
 802749e:	d1dd      	bne.n	802745c <_printf_i+0x30>
 80274a0:	6823      	ldr	r3, [r4, #0]
 80274a2:	f043 0320 	orr.w	r3, r3, #32
 80274a6:	6023      	str	r3, [r4, #0]
 80274a8:	e003      	b.n	80274b2 <_printf_i+0x86>
 80274aa:	2975      	cmp	r1, #117	; 0x75
 80274ac:	d017      	beq.n	80274de <_printf_i+0xb2>
 80274ae:	2978      	cmp	r1, #120	; 0x78
 80274b0:	d1d4      	bne.n	802745c <_printf_i+0x30>
 80274b2:	2378      	movs	r3, #120	; 0x78
 80274b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80274b8:	4864      	ldr	r0, [pc, #400]	; (802764c <_printf_i+0x220>)
 80274ba:	e055      	b.n	8027568 <_printf_i+0x13c>
 80274bc:	6813      	ldr	r3, [r2, #0]
 80274be:	1d19      	adds	r1, r3, #4
 80274c0:	681b      	ldr	r3, [r3, #0]
 80274c2:	6011      	str	r1, [r2, #0]
 80274c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80274c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80274cc:	2301      	movs	r3, #1
 80274ce:	e08c      	b.n	80275ea <_printf_i+0x1be>
 80274d0:	681b      	ldr	r3, [r3, #0]
 80274d2:	6011      	str	r1, [r2, #0]
 80274d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80274d8:	bf18      	it	ne
 80274da:	b21b      	sxthne	r3, r3
 80274dc:	e7cf      	b.n	802747e <_printf_i+0x52>
 80274de:	6813      	ldr	r3, [r2, #0]
 80274e0:	6825      	ldr	r5, [r4, #0]
 80274e2:	1d18      	adds	r0, r3, #4
 80274e4:	6010      	str	r0, [r2, #0]
 80274e6:	0628      	lsls	r0, r5, #24
 80274e8:	d501      	bpl.n	80274ee <_printf_i+0xc2>
 80274ea:	681b      	ldr	r3, [r3, #0]
 80274ec:	e002      	b.n	80274f4 <_printf_i+0xc8>
 80274ee:	0668      	lsls	r0, r5, #25
 80274f0:	d5fb      	bpl.n	80274ea <_printf_i+0xbe>
 80274f2:	881b      	ldrh	r3, [r3, #0]
 80274f4:	4854      	ldr	r0, [pc, #336]	; (8027648 <_printf_i+0x21c>)
 80274f6:	296f      	cmp	r1, #111	; 0x6f
 80274f8:	bf14      	ite	ne
 80274fa:	220a      	movne	r2, #10
 80274fc:	2208      	moveq	r2, #8
 80274fe:	2100      	movs	r1, #0
 8027500:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027504:	6865      	ldr	r5, [r4, #4]
 8027506:	60a5      	str	r5, [r4, #8]
 8027508:	2d00      	cmp	r5, #0
 802750a:	f2c0 8095 	blt.w	8027638 <_printf_i+0x20c>
 802750e:	6821      	ldr	r1, [r4, #0]
 8027510:	f021 0104 	bic.w	r1, r1, #4
 8027514:	6021      	str	r1, [r4, #0]
 8027516:	2b00      	cmp	r3, #0
 8027518:	d13d      	bne.n	8027596 <_printf_i+0x16a>
 802751a:	2d00      	cmp	r5, #0
 802751c:	f040 808e 	bne.w	802763c <_printf_i+0x210>
 8027520:	4665      	mov	r5, ip
 8027522:	2a08      	cmp	r2, #8
 8027524:	d10b      	bne.n	802753e <_printf_i+0x112>
 8027526:	6823      	ldr	r3, [r4, #0]
 8027528:	07db      	lsls	r3, r3, #31
 802752a:	d508      	bpl.n	802753e <_printf_i+0x112>
 802752c:	6923      	ldr	r3, [r4, #16]
 802752e:	6862      	ldr	r2, [r4, #4]
 8027530:	429a      	cmp	r2, r3
 8027532:	bfde      	ittt	le
 8027534:	2330      	movle	r3, #48	; 0x30
 8027536:	f805 3c01 	strble.w	r3, [r5, #-1]
 802753a:	f105 35ff 	addle.w	r5, r5, #4294967295
 802753e:	ebac 0305 	sub.w	r3, ip, r5
 8027542:	6123      	str	r3, [r4, #16]
 8027544:	f8cd 8000 	str.w	r8, [sp]
 8027548:	463b      	mov	r3, r7
 802754a:	aa03      	add	r2, sp, #12
 802754c:	4621      	mov	r1, r4
 802754e:	4630      	mov	r0, r6
 8027550:	f7ff fef6 	bl	8027340 <_printf_common>
 8027554:	3001      	adds	r0, #1
 8027556:	d14d      	bne.n	80275f4 <_printf_i+0x1c8>
 8027558:	f04f 30ff 	mov.w	r0, #4294967295
 802755c:	b005      	add	sp, #20
 802755e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027562:	4839      	ldr	r0, [pc, #228]	; (8027648 <_printf_i+0x21c>)
 8027564:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8027568:	6813      	ldr	r3, [r2, #0]
 802756a:	6821      	ldr	r1, [r4, #0]
 802756c:	1d1d      	adds	r5, r3, #4
 802756e:	681b      	ldr	r3, [r3, #0]
 8027570:	6015      	str	r5, [r2, #0]
 8027572:	060a      	lsls	r2, r1, #24
 8027574:	d50b      	bpl.n	802758e <_printf_i+0x162>
 8027576:	07ca      	lsls	r2, r1, #31
 8027578:	bf44      	itt	mi
 802757a:	f041 0120 	orrmi.w	r1, r1, #32
 802757e:	6021      	strmi	r1, [r4, #0]
 8027580:	b91b      	cbnz	r3, 802758a <_printf_i+0x15e>
 8027582:	6822      	ldr	r2, [r4, #0]
 8027584:	f022 0220 	bic.w	r2, r2, #32
 8027588:	6022      	str	r2, [r4, #0]
 802758a:	2210      	movs	r2, #16
 802758c:	e7b7      	b.n	80274fe <_printf_i+0xd2>
 802758e:	064d      	lsls	r5, r1, #25
 8027590:	bf48      	it	mi
 8027592:	b29b      	uxthmi	r3, r3
 8027594:	e7ef      	b.n	8027576 <_printf_i+0x14a>
 8027596:	4665      	mov	r5, ip
 8027598:	fbb3 f1f2 	udiv	r1, r3, r2
 802759c:	fb02 3311 	mls	r3, r2, r1, r3
 80275a0:	5cc3      	ldrb	r3, [r0, r3]
 80275a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80275a6:	460b      	mov	r3, r1
 80275a8:	2900      	cmp	r1, #0
 80275aa:	d1f5      	bne.n	8027598 <_printf_i+0x16c>
 80275ac:	e7b9      	b.n	8027522 <_printf_i+0xf6>
 80275ae:	6813      	ldr	r3, [r2, #0]
 80275b0:	6825      	ldr	r5, [r4, #0]
 80275b2:	6961      	ldr	r1, [r4, #20]
 80275b4:	1d18      	adds	r0, r3, #4
 80275b6:	6010      	str	r0, [r2, #0]
 80275b8:	0628      	lsls	r0, r5, #24
 80275ba:	681b      	ldr	r3, [r3, #0]
 80275bc:	d501      	bpl.n	80275c2 <_printf_i+0x196>
 80275be:	6019      	str	r1, [r3, #0]
 80275c0:	e002      	b.n	80275c8 <_printf_i+0x19c>
 80275c2:	066a      	lsls	r2, r5, #25
 80275c4:	d5fb      	bpl.n	80275be <_printf_i+0x192>
 80275c6:	8019      	strh	r1, [r3, #0]
 80275c8:	2300      	movs	r3, #0
 80275ca:	6123      	str	r3, [r4, #16]
 80275cc:	4665      	mov	r5, ip
 80275ce:	e7b9      	b.n	8027544 <_printf_i+0x118>
 80275d0:	6813      	ldr	r3, [r2, #0]
 80275d2:	1d19      	adds	r1, r3, #4
 80275d4:	6011      	str	r1, [r2, #0]
 80275d6:	681d      	ldr	r5, [r3, #0]
 80275d8:	6862      	ldr	r2, [r4, #4]
 80275da:	2100      	movs	r1, #0
 80275dc:	4628      	mov	r0, r5
 80275de:	f7d8 fe17 	bl	8000210 <memchr>
 80275e2:	b108      	cbz	r0, 80275e8 <_printf_i+0x1bc>
 80275e4:	1b40      	subs	r0, r0, r5
 80275e6:	6060      	str	r0, [r4, #4]
 80275e8:	6863      	ldr	r3, [r4, #4]
 80275ea:	6123      	str	r3, [r4, #16]
 80275ec:	2300      	movs	r3, #0
 80275ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80275f2:	e7a7      	b.n	8027544 <_printf_i+0x118>
 80275f4:	6923      	ldr	r3, [r4, #16]
 80275f6:	462a      	mov	r2, r5
 80275f8:	4639      	mov	r1, r7
 80275fa:	4630      	mov	r0, r6
 80275fc:	47c0      	blx	r8
 80275fe:	3001      	adds	r0, #1
 8027600:	d0aa      	beq.n	8027558 <_printf_i+0x12c>
 8027602:	6823      	ldr	r3, [r4, #0]
 8027604:	079b      	lsls	r3, r3, #30
 8027606:	d413      	bmi.n	8027630 <_printf_i+0x204>
 8027608:	68e0      	ldr	r0, [r4, #12]
 802760a:	9b03      	ldr	r3, [sp, #12]
 802760c:	4298      	cmp	r0, r3
 802760e:	bfb8      	it	lt
 8027610:	4618      	movlt	r0, r3
 8027612:	e7a3      	b.n	802755c <_printf_i+0x130>
 8027614:	2301      	movs	r3, #1
 8027616:	464a      	mov	r2, r9
 8027618:	4639      	mov	r1, r7
 802761a:	4630      	mov	r0, r6
 802761c:	47c0      	blx	r8
 802761e:	3001      	adds	r0, #1
 8027620:	d09a      	beq.n	8027558 <_printf_i+0x12c>
 8027622:	3501      	adds	r5, #1
 8027624:	68e3      	ldr	r3, [r4, #12]
 8027626:	9a03      	ldr	r2, [sp, #12]
 8027628:	1a9b      	subs	r3, r3, r2
 802762a:	42ab      	cmp	r3, r5
 802762c:	dcf2      	bgt.n	8027614 <_printf_i+0x1e8>
 802762e:	e7eb      	b.n	8027608 <_printf_i+0x1dc>
 8027630:	2500      	movs	r5, #0
 8027632:	f104 0919 	add.w	r9, r4, #25
 8027636:	e7f5      	b.n	8027624 <_printf_i+0x1f8>
 8027638:	2b00      	cmp	r3, #0
 802763a:	d1ac      	bne.n	8027596 <_printf_i+0x16a>
 802763c:	7803      	ldrb	r3, [r0, #0]
 802763e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027642:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027646:	e76c      	b.n	8027522 <_printf_i+0xf6>
 8027648:	0802cae5 	.word	0x0802cae5
 802764c:	0802caf6 	.word	0x0802caf6

08027650 <_sbrk_r>:
 8027650:	b538      	push	{r3, r4, r5, lr}
 8027652:	4c06      	ldr	r4, [pc, #24]	; (802766c <_sbrk_r+0x1c>)
 8027654:	2300      	movs	r3, #0
 8027656:	4605      	mov	r5, r0
 8027658:	4608      	mov	r0, r1
 802765a:	6023      	str	r3, [r4, #0]
 802765c:	f7db fda6 	bl	80031ac <_sbrk>
 8027660:	1c43      	adds	r3, r0, #1
 8027662:	d102      	bne.n	802766a <_sbrk_r+0x1a>
 8027664:	6823      	ldr	r3, [r4, #0]
 8027666:	b103      	cbz	r3, 802766a <_sbrk_r+0x1a>
 8027668:	602b      	str	r3, [r5, #0]
 802766a:	bd38      	pop	{r3, r4, r5, pc}
 802766c:	2000c2dc 	.word	0x2000c2dc

08027670 <_raise_r>:
 8027670:	291f      	cmp	r1, #31
 8027672:	b538      	push	{r3, r4, r5, lr}
 8027674:	4604      	mov	r4, r0
 8027676:	460d      	mov	r5, r1
 8027678:	d904      	bls.n	8027684 <_raise_r+0x14>
 802767a:	2316      	movs	r3, #22
 802767c:	6003      	str	r3, [r0, #0]
 802767e:	f04f 30ff 	mov.w	r0, #4294967295
 8027682:	bd38      	pop	{r3, r4, r5, pc}
 8027684:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8027686:	b112      	cbz	r2, 802768e <_raise_r+0x1e>
 8027688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802768c:	b94b      	cbnz	r3, 80276a2 <_raise_r+0x32>
 802768e:	4620      	mov	r0, r4
 8027690:	f000 f830 	bl	80276f4 <_getpid_r>
 8027694:	462a      	mov	r2, r5
 8027696:	4601      	mov	r1, r0
 8027698:	4620      	mov	r0, r4
 802769a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802769e:	f000 b817 	b.w	80276d0 <_kill_r>
 80276a2:	2b01      	cmp	r3, #1
 80276a4:	d00a      	beq.n	80276bc <_raise_r+0x4c>
 80276a6:	1c59      	adds	r1, r3, #1
 80276a8:	d103      	bne.n	80276b2 <_raise_r+0x42>
 80276aa:	2316      	movs	r3, #22
 80276ac:	6003      	str	r3, [r0, #0]
 80276ae:	2001      	movs	r0, #1
 80276b0:	e7e7      	b.n	8027682 <_raise_r+0x12>
 80276b2:	2400      	movs	r4, #0
 80276b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80276b8:	4628      	mov	r0, r5
 80276ba:	4798      	blx	r3
 80276bc:	2000      	movs	r0, #0
 80276be:	e7e0      	b.n	8027682 <_raise_r+0x12>

080276c0 <raise>:
 80276c0:	4b02      	ldr	r3, [pc, #8]	; (80276cc <raise+0xc>)
 80276c2:	4601      	mov	r1, r0
 80276c4:	6818      	ldr	r0, [r3, #0]
 80276c6:	f7ff bfd3 	b.w	8027670 <_raise_r>
 80276ca:	bf00      	nop
 80276cc:	20000098 	.word	0x20000098

080276d0 <_kill_r>:
 80276d0:	b538      	push	{r3, r4, r5, lr}
 80276d2:	4c07      	ldr	r4, [pc, #28]	; (80276f0 <_kill_r+0x20>)
 80276d4:	2300      	movs	r3, #0
 80276d6:	4605      	mov	r5, r0
 80276d8:	4608      	mov	r0, r1
 80276da:	4611      	mov	r1, r2
 80276dc:	6023      	str	r3, [r4, #0]
 80276de:	f7db fcdd 	bl	800309c <_kill>
 80276e2:	1c43      	adds	r3, r0, #1
 80276e4:	d102      	bne.n	80276ec <_kill_r+0x1c>
 80276e6:	6823      	ldr	r3, [r4, #0]
 80276e8:	b103      	cbz	r3, 80276ec <_kill_r+0x1c>
 80276ea:	602b      	str	r3, [r5, #0]
 80276ec:	bd38      	pop	{r3, r4, r5, pc}
 80276ee:	bf00      	nop
 80276f0:	2000c2dc 	.word	0x2000c2dc

080276f4 <_getpid_r>:
 80276f4:	f7db bcca 	b.w	800308c <_getpid>

080276f8 <__swbuf_r>:
 80276f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80276fa:	460e      	mov	r6, r1
 80276fc:	4614      	mov	r4, r2
 80276fe:	4605      	mov	r5, r0
 8027700:	b118      	cbz	r0, 802770a <__swbuf_r+0x12>
 8027702:	6983      	ldr	r3, [r0, #24]
 8027704:	b90b      	cbnz	r3, 802770a <__swbuf_r+0x12>
 8027706:	f000 fa0b 	bl	8027b20 <__sinit>
 802770a:	4b21      	ldr	r3, [pc, #132]	; (8027790 <__swbuf_r+0x98>)
 802770c:	429c      	cmp	r4, r3
 802770e:	d12a      	bne.n	8027766 <__swbuf_r+0x6e>
 8027710:	686c      	ldr	r4, [r5, #4]
 8027712:	69a3      	ldr	r3, [r4, #24]
 8027714:	60a3      	str	r3, [r4, #8]
 8027716:	89a3      	ldrh	r3, [r4, #12]
 8027718:	071a      	lsls	r2, r3, #28
 802771a:	d52e      	bpl.n	802777a <__swbuf_r+0x82>
 802771c:	6923      	ldr	r3, [r4, #16]
 802771e:	b363      	cbz	r3, 802777a <__swbuf_r+0x82>
 8027720:	6923      	ldr	r3, [r4, #16]
 8027722:	6820      	ldr	r0, [r4, #0]
 8027724:	1ac0      	subs	r0, r0, r3
 8027726:	6963      	ldr	r3, [r4, #20]
 8027728:	b2f6      	uxtb	r6, r6
 802772a:	4283      	cmp	r3, r0
 802772c:	4637      	mov	r7, r6
 802772e:	dc04      	bgt.n	802773a <__swbuf_r+0x42>
 8027730:	4621      	mov	r1, r4
 8027732:	4628      	mov	r0, r5
 8027734:	f000 f98a 	bl	8027a4c <_fflush_r>
 8027738:	bb28      	cbnz	r0, 8027786 <__swbuf_r+0x8e>
 802773a:	68a3      	ldr	r3, [r4, #8]
 802773c:	3b01      	subs	r3, #1
 802773e:	60a3      	str	r3, [r4, #8]
 8027740:	6823      	ldr	r3, [r4, #0]
 8027742:	1c5a      	adds	r2, r3, #1
 8027744:	6022      	str	r2, [r4, #0]
 8027746:	701e      	strb	r6, [r3, #0]
 8027748:	6963      	ldr	r3, [r4, #20]
 802774a:	3001      	adds	r0, #1
 802774c:	4283      	cmp	r3, r0
 802774e:	d004      	beq.n	802775a <__swbuf_r+0x62>
 8027750:	89a3      	ldrh	r3, [r4, #12]
 8027752:	07db      	lsls	r3, r3, #31
 8027754:	d519      	bpl.n	802778a <__swbuf_r+0x92>
 8027756:	2e0a      	cmp	r6, #10
 8027758:	d117      	bne.n	802778a <__swbuf_r+0x92>
 802775a:	4621      	mov	r1, r4
 802775c:	4628      	mov	r0, r5
 802775e:	f000 f975 	bl	8027a4c <_fflush_r>
 8027762:	b190      	cbz	r0, 802778a <__swbuf_r+0x92>
 8027764:	e00f      	b.n	8027786 <__swbuf_r+0x8e>
 8027766:	4b0b      	ldr	r3, [pc, #44]	; (8027794 <__swbuf_r+0x9c>)
 8027768:	429c      	cmp	r4, r3
 802776a:	d101      	bne.n	8027770 <__swbuf_r+0x78>
 802776c:	68ac      	ldr	r4, [r5, #8]
 802776e:	e7d0      	b.n	8027712 <__swbuf_r+0x1a>
 8027770:	4b09      	ldr	r3, [pc, #36]	; (8027798 <__swbuf_r+0xa0>)
 8027772:	429c      	cmp	r4, r3
 8027774:	bf08      	it	eq
 8027776:	68ec      	ldreq	r4, [r5, #12]
 8027778:	e7cb      	b.n	8027712 <__swbuf_r+0x1a>
 802777a:	4621      	mov	r1, r4
 802777c:	4628      	mov	r0, r5
 802777e:	f000 f80d 	bl	802779c <__swsetup_r>
 8027782:	2800      	cmp	r0, #0
 8027784:	d0cc      	beq.n	8027720 <__swbuf_r+0x28>
 8027786:	f04f 37ff 	mov.w	r7, #4294967295
 802778a:	4638      	mov	r0, r7
 802778c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802778e:	bf00      	nop
 8027790:	0802cb2c 	.word	0x0802cb2c
 8027794:	0802cb4c 	.word	0x0802cb4c
 8027798:	0802cb0c 	.word	0x0802cb0c

0802779c <__swsetup_r>:
 802779c:	4b32      	ldr	r3, [pc, #200]	; (8027868 <__swsetup_r+0xcc>)
 802779e:	b570      	push	{r4, r5, r6, lr}
 80277a0:	681d      	ldr	r5, [r3, #0]
 80277a2:	4606      	mov	r6, r0
 80277a4:	460c      	mov	r4, r1
 80277a6:	b125      	cbz	r5, 80277b2 <__swsetup_r+0x16>
 80277a8:	69ab      	ldr	r3, [r5, #24]
 80277aa:	b913      	cbnz	r3, 80277b2 <__swsetup_r+0x16>
 80277ac:	4628      	mov	r0, r5
 80277ae:	f000 f9b7 	bl	8027b20 <__sinit>
 80277b2:	4b2e      	ldr	r3, [pc, #184]	; (802786c <__swsetup_r+0xd0>)
 80277b4:	429c      	cmp	r4, r3
 80277b6:	d10f      	bne.n	80277d8 <__swsetup_r+0x3c>
 80277b8:	686c      	ldr	r4, [r5, #4]
 80277ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80277be:	b29a      	uxth	r2, r3
 80277c0:	0715      	lsls	r5, r2, #28
 80277c2:	d42c      	bmi.n	802781e <__swsetup_r+0x82>
 80277c4:	06d0      	lsls	r0, r2, #27
 80277c6:	d411      	bmi.n	80277ec <__swsetup_r+0x50>
 80277c8:	2209      	movs	r2, #9
 80277ca:	6032      	str	r2, [r6, #0]
 80277cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80277d0:	81a3      	strh	r3, [r4, #12]
 80277d2:	f04f 30ff 	mov.w	r0, #4294967295
 80277d6:	e03e      	b.n	8027856 <__swsetup_r+0xba>
 80277d8:	4b25      	ldr	r3, [pc, #148]	; (8027870 <__swsetup_r+0xd4>)
 80277da:	429c      	cmp	r4, r3
 80277dc:	d101      	bne.n	80277e2 <__swsetup_r+0x46>
 80277de:	68ac      	ldr	r4, [r5, #8]
 80277e0:	e7eb      	b.n	80277ba <__swsetup_r+0x1e>
 80277e2:	4b24      	ldr	r3, [pc, #144]	; (8027874 <__swsetup_r+0xd8>)
 80277e4:	429c      	cmp	r4, r3
 80277e6:	bf08      	it	eq
 80277e8:	68ec      	ldreq	r4, [r5, #12]
 80277ea:	e7e6      	b.n	80277ba <__swsetup_r+0x1e>
 80277ec:	0751      	lsls	r1, r2, #29
 80277ee:	d512      	bpl.n	8027816 <__swsetup_r+0x7a>
 80277f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80277f2:	b141      	cbz	r1, 8027806 <__swsetup_r+0x6a>
 80277f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80277f8:	4299      	cmp	r1, r3
 80277fa:	d002      	beq.n	8027802 <__swsetup_r+0x66>
 80277fc:	4630      	mov	r0, r6
 80277fe:	f7ff fbb7 	bl	8026f70 <_free_r>
 8027802:	2300      	movs	r3, #0
 8027804:	6363      	str	r3, [r4, #52]	; 0x34
 8027806:	89a3      	ldrh	r3, [r4, #12]
 8027808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802780c:	81a3      	strh	r3, [r4, #12]
 802780e:	2300      	movs	r3, #0
 8027810:	6063      	str	r3, [r4, #4]
 8027812:	6923      	ldr	r3, [r4, #16]
 8027814:	6023      	str	r3, [r4, #0]
 8027816:	89a3      	ldrh	r3, [r4, #12]
 8027818:	f043 0308 	orr.w	r3, r3, #8
 802781c:	81a3      	strh	r3, [r4, #12]
 802781e:	6923      	ldr	r3, [r4, #16]
 8027820:	b94b      	cbnz	r3, 8027836 <__swsetup_r+0x9a>
 8027822:	89a3      	ldrh	r3, [r4, #12]
 8027824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802782c:	d003      	beq.n	8027836 <__swsetup_r+0x9a>
 802782e:	4621      	mov	r1, r4
 8027830:	4630      	mov	r0, r6
 8027832:	f000 fa23 	bl	8027c7c <__smakebuf_r>
 8027836:	89a2      	ldrh	r2, [r4, #12]
 8027838:	f012 0301 	ands.w	r3, r2, #1
 802783c:	d00c      	beq.n	8027858 <__swsetup_r+0xbc>
 802783e:	2300      	movs	r3, #0
 8027840:	60a3      	str	r3, [r4, #8]
 8027842:	6963      	ldr	r3, [r4, #20]
 8027844:	425b      	negs	r3, r3
 8027846:	61a3      	str	r3, [r4, #24]
 8027848:	6923      	ldr	r3, [r4, #16]
 802784a:	b953      	cbnz	r3, 8027862 <__swsetup_r+0xc6>
 802784c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027850:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8027854:	d1ba      	bne.n	80277cc <__swsetup_r+0x30>
 8027856:	bd70      	pop	{r4, r5, r6, pc}
 8027858:	0792      	lsls	r2, r2, #30
 802785a:	bf58      	it	pl
 802785c:	6963      	ldrpl	r3, [r4, #20]
 802785e:	60a3      	str	r3, [r4, #8]
 8027860:	e7f2      	b.n	8027848 <__swsetup_r+0xac>
 8027862:	2000      	movs	r0, #0
 8027864:	e7f7      	b.n	8027856 <__swsetup_r+0xba>
 8027866:	bf00      	nop
 8027868:	20000098 	.word	0x20000098
 802786c:	0802cb2c 	.word	0x0802cb2c
 8027870:	0802cb4c 	.word	0x0802cb4c
 8027874:	0802cb0c 	.word	0x0802cb0c

08027878 <__register_exitproc>:
 8027878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802787c:	4d2c      	ldr	r5, [pc, #176]	; (8027930 <__register_exitproc+0xb8>)
 802787e:	682c      	ldr	r4, [r5, #0]
 8027880:	4607      	mov	r7, r0
 8027882:	460e      	mov	r6, r1
 8027884:	4691      	mov	r9, r2
 8027886:	4698      	mov	r8, r3
 8027888:	b934      	cbnz	r4, 8027898 <__register_exitproc+0x20>
 802788a:	4b2a      	ldr	r3, [pc, #168]	; (8027934 <__register_exitproc+0xbc>)
 802788c:	4c2a      	ldr	r4, [pc, #168]	; (8027938 <__register_exitproc+0xc0>)
 802788e:	602c      	str	r4, [r5, #0]
 8027890:	b113      	cbz	r3, 8027898 <__register_exitproc+0x20>
 8027892:	681b      	ldr	r3, [r3, #0]
 8027894:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8027898:	6863      	ldr	r3, [r4, #4]
 802789a:	2b1f      	cmp	r3, #31
 802789c:	dd3d      	ble.n	802791a <__register_exitproc+0xa2>
 802789e:	4b27      	ldr	r3, [pc, #156]	; (802793c <__register_exitproc+0xc4>)
 80278a0:	b91b      	cbnz	r3, 80278aa <__register_exitproc+0x32>
 80278a2:	f04f 30ff 	mov.w	r0, #4294967295
 80278a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80278aa:	208c      	movs	r0, #140	; 0x8c
 80278ac:	f7ff fb3c 	bl	8026f28 <malloc>
 80278b0:	4604      	mov	r4, r0
 80278b2:	2800      	cmp	r0, #0
 80278b4:	d0f5      	beq.n	80278a2 <__register_exitproc+0x2a>
 80278b6:	2300      	movs	r3, #0
 80278b8:	682a      	ldr	r2, [r5, #0]
 80278ba:	6002      	str	r2, [r0, #0]
 80278bc:	6043      	str	r3, [r0, #4]
 80278be:	6028      	str	r0, [r5, #0]
 80278c0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80278c4:	b30f      	cbz	r7, 802790a <__register_exitproc+0x92>
 80278c6:	f44f 7084 	mov.w	r0, #264	; 0x108
 80278ca:	f7ff fb2d 	bl	8026f28 <malloc>
 80278ce:	2800      	cmp	r0, #0
 80278d0:	d0e7      	beq.n	80278a2 <__register_exitproc+0x2a>
 80278d2:	2300      	movs	r3, #0
 80278d4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80278d8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80278dc:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80278e0:	6862      	ldr	r2, [r4, #4]
 80278e2:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 80278e6:	2301      	movs	r3, #1
 80278e8:	4093      	lsls	r3, r2
 80278ea:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80278ee:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80278f2:	431a      	orrs	r2, r3
 80278f4:	2f02      	cmp	r7, #2
 80278f6:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80278fa:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80278fe:	bf02      	ittt	eq
 8027900:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8027904:	4313      	orreq	r3, r2
 8027906:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802790a:	6863      	ldr	r3, [r4, #4]
 802790c:	1c5a      	adds	r2, r3, #1
 802790e:	3302      	adds	r3, #2
 8027910:	6062      	str	r2, [r4, #4]
 8027912:	2000      	movs	r0, #0
 8027914:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8027918:	e7c5      	b.n	80278a6 <__register_exitproc+0x2e>
 802791a:	2f00      	cmp	r7, #0
 802791c:	d0f5      	beq.n	802790a <__register_exitproc+0x92>
 802791e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8027922:	2800      	cmp	r0, #0
 8027924:	d1dc      	bne.n	80278e0 <__register_exitproc+0x68>
 8027926:	4b05      	ldr	r3, [pc, #20]	; (802793c <__register_exitproc+0xc4>)
 8027928:	2b00      	cmp	r3, #0
 802792a:	d0ba      	beq.n	80278a2 <__register_exitproc+0x2a>
 802792c:	e7cb      	b.n	80278c6 <__register_exitproc+0x4e>
 802792e:	bf00      	nop
 8027930:	2000b68c 	.word	0x2000b68c
 8027934:	0802cb08 	.word	0x0802cb08
 8027938:	2000b600 	.word	0x2000b600
 802793c:	08026f29 	.word	0x08026f29

08027940 <__sflush_r>:
 8027940:	898a      	ldrh	r2, [r1, #12]
 8027942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027946:	4605      	mov	r5, r0
 8027948:	0710      	lsls	r0, r2, #28
 802794a:	460c      	mov	r4, r1
 802794c:	d458      	bmi.n	8027a00 <__sflush_r+0xc0>
 802794e:	684b      	ldr	r3, [r1, #4]
 8027950:	2b00      	cmp	r3, #0
 8027952:	dc05      	bgt.n	8027960 <__sflush_r+0x20>
 8027954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8027956:	2b00      	cmp	r3, #0
 8027958:	dc02      	bgt.n	8027960 <__sflush_r+0x20>
 802795a:	2000      	movs	r0, #0
 802795c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027962:	2e00      	cmp	r6, #0
 8027964:	d0f9      	beq.n	802795a <__sflush_r+0x1a>
 8027966:	2300      	movs	r3, #0
 8027968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802796c:	682f      	ldr	r7, [r5, #0]
 802796e:	6a21      	ldr	r1, [r4, #32]
 8027970:	602b      	str	r3, [r5, #0]
 8027972:	d032      	beq.n	80279da <__sflush_r+0x9a>
 8027974:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8027976:	89a3      	ldrh	r3, [r4, #12]
 8027978:	075a      	lsls	r2, r3, #29
 802797a:	d505      	bpl.n	8027988 <__sflush_r+0x48>
 802797c:	6863      	ldr	r3, [r4, #4]
 802797e:	1ac0      	subs	r0, r0, r3
 8027980:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027982:	b10b      	cbz	r3, 8027988 <__sflush_r+0x48>
 8027984:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027986:	1ac0      	subs	r0, r0, r3
 8027988:	2300      	movs	r3, #0
 802798a:	4602      	mov	r2, r0
 802798c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802798e:	6a21      	ldr	r1, [r4, #32]
 8027990:	4628      	mov	r0, r5
 8027992:	47b0      	blx	r6
 8027994:	1c43      	adds	r3, r0, #1
 8027996:	89a3      	ldrh	r3, [r4, #12]
 8027998:	d106      	bne.n	80279a8 <__sflush_r+0x68>
 802799a:	6829      	ldr	r1, [r5, #0]
 802799c:	291d      	cmp	r1, #29
 802799e:	d848      	bhi.n	8027a32 <__sflush_r+0xf2>
 80279a0:	4a29      	ldr	r2, [pc, #164]	; (8027a48 <__sflush_r+0x108>)
 80279a2:	40ca      	lsrs	r2, r1
 80279a4:	07d6      	lsls	r6, r2, #31
 80279a6:	d544      	bpl.n	8027a32 <__sflush_r+0xf2>
 80279a8:	2200      	movs	r2, #0
 80279aa:	6062      	str	r2, [r4, #4]
 80279ac:	04d9      	lsls	r1, r3, #19
 80279ae:	6922      	ldr	r2, [r4, #16]
 80279b0:	6022      	str	r2, [r4, #0]
 80279b2:	d504      	bpl.n	80279be <__sflush_r+0x7e>
 80279b4:	1c42      	adds	r2, r0, #1
 80279b6:	d101      	bne.n	80279bc <__sflush_r+0x7c>
 80279b8:	682b      	ldr	r3, [r5, #0]
 80279ba:	b903      	cbnz	r3, 80279be <__sflush_r+0x7e>
 80279bc:	6560      	str	r0, [r4, #84]	; 0x54
 80279be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80279c0:	602f      	str	r7, [r5, #0]
 80279c2:	2900      	cmp	r1, #0
 80279c4:	d0c9      	beq.n	802795a <__sflush_r+0x1a>
 80279c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80279ca:	4299      	cmp	r1, r3
 80279cc:	d002      	beq.n	80279d4 <__sflush_r+0x94>
 80279ce:	4628      	mov	r0, r5
 80279d0:	f7ff face 	bl	8026f70 <_free_r>
 80279d4:	2000      	movs	r0, #0
 80279d6:	6360      	str	r0, [r4, #52]	; 0x34
 80279d8:	e7c0      	b.n	802795c <__sflush_r+0x1c>
 80279da:	2301      	movs	r3, #1
 80279dc:	4628      	mov	r0, r5
 80279de:	47b0      	blx	r6
 80279e0:	1c41      	adds	r1, r0, #1
 80279e2:	d1c8      	bne.n	8027976 <__sflush_r+0x36>
 80279e4:	682b      	ldr	r3, [r5, #0]
 80279e6:	2b00      	cmp	r3, #0
 80279e8:	d0c5      	beq.n	8027976 <__sflush_r+0x36>
 80279ea:	2b1d      	cmp	r3, #29
 80279ec:	d001      	beq.n	80279f2 <__sflush_r+0xb2>
 80279ee:	2b16      	cmp	r3, #22
 80279f0:	d101      	bne.n	80279f6 <__sflush_r+0xb6>
 80279f2:	602f      	str	r7, [r5, #0]
 80279f4:	e7b1      	b.n	802795a <__sflush_r+0x1a>
 80279f6:	89a3      	ldrh	r3, [r4, #12]
 80279f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80279fc:	81a3      	strh	r3, [r4, #12]
 80279fe:	e7ad      	b.n	802795c <__sflush_r+0x1c>
 8027a00:	690f      	ldr	r7, [r1, #16]
 8027a02:	2f00      	cmp	r7, #0
 8027a04:	d0a9      	beq.n	802795a <__sflush_r+0x1a>
 8027a06:	0793      	lsls	r3, r2, #30
 8027a08:	680e      	ldr	r6, [r1, #0]
 8027a0a:	bf08      	it	eq
 8027a0c:	694b      	ldreq	r3, [r1, #20]
 8027a0e:	600f      	str	r7, [r1, #0]
 8027a10:	bf18      	it	ne
 8027a12:	2300      	movne	r3, #0
 8027a14:	eba6 0807 	sub.w	r8, r6, r7
 8027a18:	608b      	str	r3, [r1, #8]
 8027a1a:	f1b8 0f00 	cmp.w	r8, #0
 8027a1e:	dd9c      	ble.n	802795a <__sflush_r+0x1a>
 8027a20:	4643      	mov	r3, r8
 8027a22:	463a      	mov	r2, r7
 8027a24:	6a21      	ldr	r1, [r4, #32]
 8027a26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8027a28:	4628      	mov	r0, r5
 8027a2a:	47b0      	blx	r6
 8027a2c:	2800      	cmp	r0, #0
 8027a2e:	dc06      	bgt.n	8027a3e <__sflush_r+0xfe>
 8027a30:	89a3      	ldrh	r3, [r4, #12]
 8027a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027a36:	81a3      	strh	r3, [r4, #12]
 8027a38:	f04f 30ff 	mov.w	r0, #4294967295
 8027a3c:	e78e      	b.n	802795c <__sflush_r+0x1c>
 8027a3e:	4407      	add	r7, r0
 8027a40:	eba8 0800 	sub.w	r8, r8, r0
 8027a44:	e7e9      	b.n	8027a1a <__sflush_r+0xda>
 8027a46:	bf00      	nop
 8027a48:	20400001 	.word	0x20400001

08027a4c <_fflush_r>:
 8027a4c:	b538      	push	{r3, r4, r5, lr}
 8027a4e:	690b      	ldr	r3, [r1, #16]
 8027a50:	4605      	mov	r5, r0
 8027a52:	460c      	mov	r4, r1
 8027a54:	b1db      	cbz	r3, 8027a8e <_fflush_r+0x42>
 8027a56:	b118      	cbz	r0, 8027a60 <_fflush_r+0x14>
 8027a58:	6983      	ldr	r3, [r0, #24]
 8027a5a:	b90b      	cbnz	r3, 8027a60 <_fflush_r+0x14>
 8027a5c:	f000 f860 	bl	8027b20 <__sinit>
 8027a60:	4b0c      	ldr	r3, [pc, #48]	; (8027a94 <_fflush_r+0x48>)
 8027a62:	429c      	cmp	r4, r3
 8027a64:	d109      	bne.n	8027a7a <_fflush_r+0x2e>
 8027a66:	686c      	ldr	r4, [r5, #4]
 8027a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027a6c:	b17b      	cbz	r3, 8027a8e <_fflush_r+0x42>
 8027a6e:	4621      	mov	r1, r4
 8027a70:	4628      	mov	r0, r5
 8027a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027a76:	f7ff bf63 	b.w	8027940 <__sflush_r>
 8027a7a:	4b07      	ldr	r3, [pc, #28]	; (8027a98 <_fflush_r+0x4c>)
 8027a7c:	429c      	cmp	r4, r3
 8027a7e:	d101      	bne.n	8027a84 <_fflush_r+0x38>
 8027a80:	68ac      	ldr	r4, [r5, #8]
 8027a82:	e7f1      	b.n	8027a68 <_fflush_r+0x1c>
 8027a84:	4b05      	ldr	r3, [pc, #20]	; (8027a9c <_fflush_r+0x50>)
 8027a86:	429c      	cmp	r4, r3
 8027a88:	bf08      	it	eq
 8027a8a:	68ec      	ldreq	r4, [r5, #12]
 8027a8c:	e7ec      	b.n	8027a68 <_fflush_r+0x1c>
 8027a8e:	2000      	movs	r0, #0
 8027a90:	bd38      	pop	{r3, r4, r5, pc}
 8027a92:	bf00      	nop
 8027a94:	0802cb2c 	.word	0x0802cb2c
 8027a98:	0802cb4c 	.word	0x0802cb4c
 8027a9c:	0802cb0c 	.word	0x0802cb0c

08027aa0 <std>:
 8027aa0:	2300      	movs	r3, #0
 8027aa2:	b510      	push	{r4, lr}
 8027aa4:	4604      	mov	r4, r0
 8027aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8027aaa:	6083      	str	r3, [r0, #8]
 8027aac:	8181      	strh	r1, [r0, #12]
 8027aae:	6643      	str	r3, [r0, #100]	; 0x64
 8027ab0:	81c2      	strh	r2, [r0, #14]
 8027ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8027ab6:	6183      	str	r3, [r0, #24]
 8027ab8:	4619      	mov	r1, r3
 8027aba:	2208      	movs	r2, #8
 8027abc:	305c      	adds	r0, #92	; 0x5c
 8027abe:	f7ff fa4e 	bl	8026f5e <memset>
 8027ac2:	4b05      	ldr	r3, [pc, #20]	; (8027ad8 <std+0x38>)
 8027ac4:	6263      	str	r3, [r4, #36]	; 0x24
 8027ac6:	4b05      	ldr	r3, [pc, #20]	; (8027adc <std+0x3c>)
 8027ac8:	62a3      	str	r3, [r4, #40]	; 0x28
 8027aca:	4b05      	ldr	r3, [pc, #20]	; (8027ae0 <std+0x40>)
 8027acc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8027ace:	4b05      	ldr	r3, [pc, #20]	; (8027ae4 <std+0x44>)
 8027ad0:	6224      	str	r4, [r4, #32]
 8027ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8027ad4:	bd10      	pop	{r4, pc}
 8027ad6:	bf00      	nop
 8027ad8:	08027d01 	.word	0x08027d01
 8027adc:	08027d23 	.word	0x08027d23
 8027ae0:	08027d5b 	.word	0x08027d5b
 8027ae4:	08027d7f 	.word	0x08027d7f

08027ae8 <_cleanup_r>:
 8027ae8:	4901      	ldr	r1, [pc, #4]	; (8027af0 <_cleanup_r+0x8>)
 8027aea:	f000 b885 	b.w	8027bf8 <_fwalk_reent>
 8027aee:	bf00      	nop
 8027af0:	08027a4d 	.word	0x08027a4d

08027af4 <__sfmoreglue>:
 8027af4:	b570      	push	{r4, r5, r6, lr}
 8027af6:	1e4a      	subs	r2, r1, #1
 8027af8:	2568      	movs	r5, #104	; 0x68
 8027afa:	4355      	muls	r5, r2
 8027afc:	460e      	mov	r6, r1
 8027afe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8027b02:	f7ff fa83 	bl	802700c <_malloc_r>
 8027b06:	4604      	mov	r4, r0
 8027b08:	b140      	cbz	r0, 8027b1c <__sfmoreglue+0x28>
 8027b0a:	2100      	movs	r1, #0
 8027b0c:	e9c0 1600 	strd	r1, r6, [r0]
 8027b10:	300c      	adds	r0, #12
 8027b12:	60a0      	str	r0, [r4, #8]
 8027b14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8027b18:	f7ff fa21 	bl	8026f5e <memset>
 8027b1c:	4620      	mov	r0, r4
 8027b1e:	bd70      	pop	{r4, r5, r6, pc}

08027b20 <__sinit>:
 8027b20:	6983      	ldr	r3, [r0, #24]
 8027b22:	b510      	push	{r4, lr}
 8027b24:	4604      	mov	r4, r0
 8027b26:	bb33      	cbnz	r3, 8027b76 <__sinit+0x56>
 8027b28:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8027b2c:	6503      	str	r3, [r0, #80]	; 0x50
 8027b2e:	4b12      	ldr	r3, [pc, #72]	; (8027b78 <__sinit+0x58>)
 8027b30:	4a12      	ldr	r2, [pc, #72]	; (8027b7c <__sinit+0x5c>)
 8027b32:	681b      	ldr	r3, [r3, #0]
 8027b34:	6282      	str	r2, [r0, #40]	; 0x28
 8027b36:	4298      	cmp	r0, r3
 8027b38:	bf04      	itt	eq
 8027b3a:	2301      	moveq	r3, #1
 8027b3c:	6183      	streq	r3, [r0, #24]
 8027b3e:	f000 f81f 	bl	8027b80 <__sfp>
 8027b42:	6060      	str	r0, [r4, #4]
 8027b44:	4620      	mov	r0, r4
 8027b46:	f000 f81b 	bl	8027b80 <__sfp>
 8027b4a:	60a0      	str	r0, [r4, #8]
 8027b4c:	4620      	mov	r0, r4
 8027b4e:	f000 f817 	bl	8027b80 <__sfp>
 8027b52:	2200      	movs	r2, #0
 8027b54:	60e0      	str	r0, [r4, #12]
 8027b56:	2104      	movs	r1, #4
 8027b58:	6860      	ldr	r0, [r4, #4]
 8027b5a:	f7ff ffa1 	bl	8027aa0 <std>
 8027b5e:	2201      	movs	r2, #1
 8027b60:	2109      	movs	r1, #9
 8027b62:	68a0      	ldr	r0, [r4, #8]
 8027b64:	f7ff ff9c 	bl	8027aa0 <std>
 8027b68:	2202      	movs	r2, #2
 8027b6a:	2112      	movs	r1, #18
 8027b6c:	68e0      	ldr	r0, [r4, #12]
 8027b6e:	f7ff ff97 	bl	8027aa0 <std>
 8027b72:	2301      	movs	r3, #1
 8027b74:	61a3      	str	r3, [r4, #24]
 8027b76:	bd10      	pop	{r4, pc}
 8027b78:	0802cad0 	.word	0x0802cad0
 8027b7c:	08027ae9 	.word	0x08027ae9

08027b80 <__sfp>:
 8027b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027b82:	4b1b      	ldr	r3, [pc, #108]	; (8027bf0 <__sfp+0x70>)
 8027b84:	681e      	ldr	r6, [r3, #0]
 8027b86:	69b3      	ldr	r3, [r6, #24]
 8027b88:	4607      	mov	r7, r0
 8027b8a:	b913      	cbnz	r3, 8027b92 <__sfp+0x12>
 8027b8c:	4630      	mov	r0, r6
 8027b8e:	f7ff ffc7 	bl	8027b20 <__sinit>
 8027b92:	3648      	adds	r6, #72	; 0x48
 8027b94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8027b98:	3b01      	subs	r3, #1
 8027b9a:	d503      	bpl.n	8027ba4 <__sfp+0x24>
 8027b9c:	6833      	ldr	r3, [r6, #0]
 8027b9e:	b133      	cbz	r3, 8027bae <__sfp+0x2e>
 8027ba0:	6836      	ldr	r6, [r6, #0]
 8027ba2:	e7f7      	b.n	8027b94 <__sfp+0x14>
 8027ba4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8027ba8:	b16d      	cbz	r5, 8027bc6 <__sfp+0x46>
 8027baa:	3468      	adds	r4, #104	; 0x68
 8027bac:	e7f4      	b.n	8027b98 <__sfp+0x18>
 8027bae:	2104      	movs	r1, #4
 8027bb0:	4638      	mov	r0, r7
 8027bb2:	f7ff ff9f 	bl	8027af4 <__sfmoreglue>
 8027bb6:	6030      	str	r0, [r6, #0]
 8027bb8:	2800      	cmp	r0, #0
 8027bba:	d1f1      	bne.n	8027ba0 <__sfp+0x20>
 8027bbc:	230c      	movs	r3, #12
 8027bbe:	603b      	str	r3, [r7, #0]
 8027bc0:	4604      	mov	r4, r0
 8027bc2:	4620      	mov	r0, r4
 8027bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027bc6:	4b0b      	ldr	r3, [pc, #44]	; (8027bf4 <__sfp+0x74>)
 8027bc8:	6665      	str	r5, [r4, #100]	; 0x64
 8027bca:	e9c4 5500 	strd	r5, r5, [r4]
 8027bce:	60a5      	str	r5, [r4, #8]
 8027bd0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8027bd4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8027bd8:	2208      	movs	r2, #8
 8027bda:	4629      	mov	r1, r5
 8027bdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8027be0:	f7ff f9bd 	bl	8026f5e <memset>
 8027be4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8027be8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8027bec:	e7e9      	b.n	8027bc2 <__sfp+0x42>
 8027bee:	bf00      	nop
 8027bf0:	0802cad0 	.word	0x0802cad0
 8027bf4:	ffff0001 	.word	0xffff0001

08027bf8 <_fwalk_reent>:
 8027bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027bfc:	4680      	mov	r8, r0
 8027bfe:	4689      	mov	r9, r1
 8027c00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8027c04:	2600      	movs	r6, #0
 8027c06:	b914      	cbnz	r4, 8027c0e <_fwalk_reent+0x16>
 8027c08:	4630      	mov	r0, r6
 8027c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027c0e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8027c12:	3f01      	subs	r7, #1
 8027c14:	d501      	bpl.n	8027c1a <_fwalk_reent+0x22>
 8027c16:	6824      	ldr	r4, [r4, #0]
 8027c18:	e7f5      	b.n	8027c06 <_fwalk_reent+0xe>
 8027c1a:	89ab      	ldrh	r3, [r5, #12]
 8027c1c:	2b01      	cmp	r3, #1
 8027c1e:	d907      	bls.n	8027c30 <_fwalk_reent+0x38>
 8027c20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8027c24:	3301      	adds	r3, #1
 8027c26:	d003      	beq.n	8027c30 <_fwalk_reent+0x38>
 8027c28:	4629      	mov	r1, r5
 8027c2a:	4640      	mov	r0, r8
 8027c2c:	47c8      	blx	r9
 8027c2e:	4306      	orrs	r6, r0
 8027c30:	3568      	adds	r5, #104	; 0x68
 8027c32:	e7ee      	b.n	8027c12 <_fwalk_reent+0x1a>

08027c34 <__swhatbuf_r>:
 8027c34:	b570      	push	{r4, r5, r6, lr}
 8027c36:	460e      	mov	r6, r1
 8027c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027c3c:	2900      	cmp	r1, #0
 8027c3e:	b096      	sub	sp, #88	; 0x58
 8027c40:	4614      	mov	r4, r2
 8027c42:	461d      	mov	r5, r3
 8027c44:	da07      	bge.n	8027c56 <__swhatbuf_r+0x22>
 8027c46:	2300      	movs	r3, #0
 8027c48:	602b      	str	r3, [r5, #0]
 8027c4a:	89b3      	ldrh	r3, [r6, #12]
 8027c4c:	061a      	lsls	r2, r3, #24
 8027c4e:	d410      	bmi.n	8027c72 <__swhatbuf_r+0x3e>
 8027c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027c54:	e00e      	b.n	8027c74 <__swhatbuf_r+0x40>
 8027c56:	466a      	mov	r2, sp
 8027c58:	f000 f8b8 	bl	8027dcc <_fstat_r>
 8027c5c:	2800      	cmp	r0, #0
 8027c5e:	dbf2      	blt.n	8027c46 <__swhatbuf_r+0x12>
 8027c60:	9a01      	ldr	r2, [sp, #4]
 8027c62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8027c66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8027c6a:	425a      	negs	r2, r3
 8027c6c:	415a      	adcs	r2, r3
 8027c6e:	602a      	str	r2, [r5, #0]
 8027c70:	e7ee      	b.n	8027c50 <__swhatbuf_r+0x1c>
 8027c72:	2340      	movs	r3, #64	; 0x40
 8027c74:	2000      	movs	r0, #0
 8027c76:	6023      	str	r3, [r4, #0]
 8027c78:	b016      	add	sp, #88	; 0x58
 8027c7a:	bd70      	pop	{r4, r5, r6, pc}

08027c7c <__smakebuf_r>:
 8027c7c:	898b      	ldrh	r3, [r1, #12]
 8027c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027c80:	079d      	lsls	r5, r3, #30
 8027c82:	4606      	mov	r6, r0
 8027c84:	460c      	mov	r4, r1
 8027c86:	d507      	bpl.n	8027c98 <__smakebuf_r+0x1c>
 8027c88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027c8c:	6023      	str	r3, [r4, #0]
 8027c8e:	6123      	str	r3, [r4, #16]
 8027c90:	2301      	movs	r3, #1
 8027c92:	6163      	str	r3, [r4, #20]
 8027c94:	b002      	add	sp, #8
 8027c96:	bd70      	pop	{r4, r5, r6, pc}
 8027c98:	ab01      	add	r3, sp, #4
 8027c9a:	466a      	mov	r2, sp
 8027c9c:	f7ff ffca 	bl	8027c34 <__swhatbuf_r>
 8027ca0:	9900      	ldr	r1, [sp, #0]
 8027ca2:	4605      	mov	r5, r0
 8027ca4:	4630      	mov	r0, r6
 8027ca6:	f7ff f9b1 	bl	802700c <_malloc_r>
 8027caa:	b948      	cbnz	r0, 8027cc0 <__smakebuf_r+0x44>
 8027cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027cb0:	059a      	lsls	r2, r3, #22
 8027cb2:	d4ef      	bmi.n	8027c94 <__smakebuf_r+0x18>
 8027cb4:	f023 0303 	bic.w	r3, r3, #3
 8027cb8:	f043 0302 	orr.w	r3, r3, #2
 8027cbc:	81a3      	strh	r3, [r4, #12]
 8027cbe:	e7e3      	b.n	8027c88 <__smakebuf_r+0xc>
 8027cc0:	4b0d      	ldr	r3, [pc, #52]	; (8027cf8 <__smakebuf_r+0x7c>)
 8027cc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8027cc4:	89a3      	ldrh	r3, [r4, #12]
 8027cc6:	6020      	str	r0, [r4, #0]
 8027cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027ccc:	81a3      	strh	r3, [r4, #12]
 8027cce:	9b00      	ldr	r3, [sp, #0]
 8027cd0:	6163      	str	r3, [r4, #20]
 8027cd2:	9b01      	ldr	r3, [sp, #4]
 8027cd4:	6120      	str	r0, [r4, #16]
 8027cd6:	b15b      	cbz	r3, 8027cf0 <__smakebuf_r+0x74>
 8027cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027cdc:	4630      	mov	r0, r6
 8027cde:	f000 f887 	bl	8027df0 <_isatty_r>
 8027ce2:	b128      	cbz	r0, 8027cf0 <__smakebuf_r+0x74>
 8027ce4:	89a3      	ldrh	r3, [r4, #12]
 8027ce6:	f023 0303 	bic.w	r3, r3, #3
 8027cea:	f043 0301 	orr.w	r3, r3, #1
 8027cee:	81a3      	strh	r3, [r4, #12]
 8027cf0:	89a3      	ldrh	r3, [r4, #12]
 8027cf2:	431d      	orrs	r5, r3
 8027cf4:	81a5      	strh	r5, [r4, #12]
 8027cf6:	e7cd      	b.n	8027c94 <__smakebuf_r+0x18>
 8027cf8:	08027ae9 	.word	0x08027ae9

08027cfc <__malloc_lock>:
 8027cfc:	4770      	bx	lr

08027cfe <__malloc_unlock>:
 8027cfe:	4770      	bx	lr

08027d00 <__sread>:
 8027d00:	b510      	push	{r4, lr}
 8027d02:	460c      	mov	r4, r1
 8027d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027d08:	f000 f894 	bl	8027e34 <_read_r>
 8027d0c:	2800      	cmp	r0, #0
 8027d0e:	bfab      	itete	ge
 8027d10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8027d12:	89a3      	ldrhlt	r3, [r4, #12]
 8027d14:	181b      	addge	r3, r3, r0
 8027d16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8027d1a:	bfac      	ite	ge
 8027d1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8027d1e:	81a3      	strhlt	r3, [r4, #12]
 8027d20:	bd10      	pop	{r4, pc}

08027d22 <__swrite>:
 8027d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027d26:	461f      	mov	r7, r3
 8027d28:	898b      	ldrh	r3, [r1, #12]
 8027d2a:	05db      	lsls	r3, r3, #23
 8027d2c:	4605      	mov	r5, r0
 8027d2e:	460c      	mov	r4, r1
 8027d30:	4616      	mov	r6, r2
 8027d32:	d505      	bpl.n	8027d40 <__swrite+0x1e>
 8027d34:	2302      	movs	r3, #2
 8027d36:	2200      	movs	r2, #0
 8027d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027d3c:	f000 f868 	bl	8027e10 <_lseek_r>
 8027d40:	89a3      	ldrh	r3, [r4, #12]
 8027d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027d46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027d4a:	81a3      	strh	r3, [r4, #12]
 8027d4c:	4632      	mov	r2, r6
 8027d4e:	463b      	mov	r3, r7
 8027d50:	4628      	mov	r0, r5
 8027d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027d56:	f000 b817 	b.w	8027d88 <_write_r>

08027d5a <__sseek>:
 8027d5a:	b510      	push	{r4, lr}
 8027d5c:	460c      	mov	r4, r1
 8027d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027d62:	f000 f855 	bl	8027e10 <_lseek_r>
 8027d66:	1c43      	adds	r3, r0, #1
 8027d68:	89a3      	ldrh	r3, [r4, #12]
 8027d6a:	bf15      	itete	ne
 8027d6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8027d6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8027d72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8027d76:	81a3      	strheq	r3, [r4, #12]
 8027d78:	bf18      	it	ne
 8027d7a:	81a3      	strhne	r3, [r4, #12]
 8027d7c:	bd10      	pop	{r4, pc}

08027d7e <__sclose>:
 8027d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027d82:	f000 b813 	b.w	8027dac <_close_r>
	...

08027d88 <_write_r>:
 8027d88:	b538      	push	{r3, r4, r5, lr}
 8027d8a:	4c07      	ldr	r4, [pc, #28]	; (8027da8 <_write_r+0x20>)
 8027d8c:	4605      	mov	r5, r0
 8027d8e:	4608      	mov	r0, r1
 8027d90:	4611      	mov	r1, r2
 8027d92:	2200      	movs	r2, #0
 8027d94:	6022      	str	r2, [r4, #0]
 8027d96:	461a      	mov	r2, r3
 8027d98:	f7db f9b7 	bl	800310a <_write>
 8027d9c:	1c43      	adds	r3, r0, #1
 8027d9e:	d102      	bne.n	8027da6 <_write_r+0x1e>
 8027da0:	6823      	ldr	r3, [r4, #0]
 8027da2:	b103      	cbz	r3, 8027da6 <_write_r+0x1e>
 8027da4:	602b      	str	r3, [r5, #0]
 8027da6:	bd38      	pop	{r3, r4, r5, pc}
 8027da8:	2000c2dc 	.word	0x2000c2dc

08027dac <_close_r>:
 8027dac:	b538      	push	{r3, r4, r5, lr}
 8027dae:	4c06      	ldr	r4, [pc, #24]	; (8027dc8 <_close_r+0x1c>)
 8027db0:	2300      	movs	r3, #0
 8027db2:	4605      	mov	r5, r0
 8027db4:	4608      	mov	r0, r1
 8027db6:	6023      	str	r3, [r4, #0]
 8027db8:	f7db f9c3 	bl	8003142 <_close>
 8027dbc:	1c43      	adds	r3, r0, #1
 8027dbe:	d102      	bne.n	8027dc6 <_close_r+0x1a>
 8027dc0:	6823      	ldr	r3, [r4, #0]
 8027dc2:	b103      	cbz	r3, 8027dc6 <_close_r+0x1a>
 8027dc4:	602b      	str	r3, [r5, #0]
 8027dc6:	bd38      	pop	{r3, r4, r5, pc}
 8027dc8:	2000c2dc 	.word	0x2000c2dc

08027dcc <_fstat_r>:
 8027dcc:	b538      	push	{r3, r4, r5, lr}
 8027dce:	4c07      	ldr	r4, [pc, #28]	; (8027dec <_fstat_r+0x20>)
 8027dd0:	2300      	movs	r3, #0
 8027dd2:	4605      	mov	r5, r0
 8027dd4:	4608      	mov	r0, r1
 8027dd6:	4611      	mov	r1, r2
 8027dd8:	6023      	str	r3, [r4, #0]
 8027dda:	f7db f9be 	bl	800315a <_fstat>
 8027dde:	1c43      	adds	r3, r0, #1
 8027de0:	d102      	bne.n	8027de8 <_fstat_r+0x1c>
 8027de2:	6823      	ldr	r3, [r4, #0]
 8027de4:	b103      	cbz	r3, 8027de8 <_fstat_r+0x1c>
 8027de6:	602b      	str	r3, [r5, #0]
 8027de8:	bd38      	pop	{r3, r4, r5, pc}
 8027dea:	bf00      	nop
 8027dec:	2000c2dc 	.word	0x2000c2dc

08027df0 <_isatty_r>:
 8027df0:	b538      	push	{r3, r4, r5, lr}
 8027df2:	4c06      	ldr	r4, [pc, #24]	; (8027e0c <_isatty_r+0x1c>)
 8027df4:	2300      	movs	r3, #0
 8027df6:	4605      	mov	r5, r0
 8027df8:	4608      	mov	r0, r1
 8027dfa:	6023      	str	r3, [r4, #0]
 8027dfc:	f7db f9bd 	bl	800317a <_isatty>
 8027e00:	1c43      	adds	r3, r0, #1
 8027e02:	d102      	bne.n	8027e0a <_isatty_r+0x1a>
 8027e04:	6823      	ldr	r3, [r4, #0]
 8027e06:	b103      	cbz	r3, 8027e0a <_isatty_r+0x1a>
 8027e08:	602b      	str	r3, [r5, #0]
 8027e0a:	bd38      	pop	{r3, r4, r5, pc}
 8027e0c:	2000c2dc 	.word	0x2000c2dc

08027e10 <_lseek_r>:
 8027e10:	b538      	push	{r3, r4, r5, lr}
 8027e12:	4c07      	ldr	r4, [pc, #28]	; (8027e30 <_lseek_r+0x20>)
 8027e14:	4605      	mov	r5, r0
 8027e16:	4608      	mov	r0, r1
 8027e18:	4611      	mov	r1, r2
 8027e1a:	2200      	movs	r2, #0
 8027e1c:	6022      	str	r2, [r4, #0]
 8027e1e:	461a      	mov	r2, r3
 8027e20:	f7db f9b6 	bl	8003190 <_lseek>
 8027e24:	1c43      	adds	r3, r0, #1
 8027e26:	d102      	bne.n	8027e2e <_lseek_r+0x1e>
 8027e28:	6823      	ldr	r3, [r4, #0]
 8027e2a:	b103      	cbz	r3, 8027e2e <_lseek_r+0x1e>
 8027e2c:	602b      	str	r3, [r5, #0]
 8027e2e:	bd38      	pop	{r3, r4, r5, pc}
 8027e30:	2000c2dc 	.word	0x2000c2dc

08027e34 <_read_r>:
 8027e34:	b538      	push	{r3, r4, r5, lr}
 8027e36:	4c07      	ldr	r4, [pc, #28]	; (8027e54 <_read_r+0x20>)
 8027e38:	4605      	mov	r5, r0
 8027e3a:	4608      	mov	r0, r1
 8027e3c:	4611      	mov	r1, r2
 8027e3e:	2200      	movs	r2, #0
 8027e40:	6022      	str	r2, [r4, #0]
 8027e42:	461a      	mov	r2, r3
 8027e44:	f7db f944 	bl	80030d0 <_read>
 8027e48:	1c43      	adds	r3, r0, #1
 8027e4a:	d102      	bne.n	8027e52 <_read_r+0x1e>
 8027e4c:	6823      	ldr	r3, [r4, #0]
 8027e4e:	b103      	cbz	r3, 8027e52 <_read_r+0x1e>
 8027e50:	602b      	str	r3, [r5, #0]
 8027e52:	bd38      	pop	{r3, r4, r5, pc}
 8027e54:	2000c2dc 	.word	0x2000c2dc

08027e58 <_init>:
 8027e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027e5a:	bf00      	nop
 8027e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027e5e:	bc08      	pop	{r3}
 8027e60:	469e      	mov	lr, r3
 8027e62:	4770      	bx	lr

08027e64 <_fini>:
 8027e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027e66:	bf00      	nop
 8027e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027e6a:	bc08      	pop	{r3}
 8027e6c:	469e      	mov	lr, r3
 8027e6e:	4770      	bx	lr
